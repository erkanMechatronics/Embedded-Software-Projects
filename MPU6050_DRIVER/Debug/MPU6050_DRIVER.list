
MPU6050_DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d2c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002eb8  08002eb8  00012eb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f10  08002f10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f10  08002f10  00012f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f18  08002f18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f18  08002f18  00012f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f1c  08002f1c  00012f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000114  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000124  20000124  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007a14  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000015cb  00000000  00000000  00027a93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000730  00000000  00000000  00029060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000578  00000000  00000000  00029790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f847  00000000  00000000  00029d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009bac  00000000  00000000  0004954f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bee03  00000000  00000000  000530fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001cbc  00000000  00000000  00111f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00113bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002e9c 	.word	0x08002e9c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002e9c 	.word	0x08002e9c

080001c8 <__aeabi_d2f>:
 80001c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80001cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80001d0:	bf24      	itt	cs
 80001d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80001d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80001da:	d90d      	bls.n	80001f8 <__aeabi_d2f+0x30>
 80001dc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80001e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80001e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80001e8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80001ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80001f0:	bf08      	it	eq
 80001f2:	f020 0001 	biceq.w	r0, r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80001fc:	d121      	bne.n	8000242 <__aeabi_d2f+0x7a>
 80001fe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000202:	bfbc      	itt	lt
 8000204:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000208:	4770      	bxlt	lr
 800020a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800020e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000212:	f1c2 0218 	rsb	r2, r2, #24
 8000216:	f1c2 0c20 	rsb	ip, r2, #32
 800021a:	fa10 f30c 	lsls.w	r3, r0, ip
 800021e:	fa20 f002 	lsr.w	r0, r0, r2
 8000222:	bf18      	it	ne
 8000224:	f040 0001 	orrne.w	r0, r0, #1
 8000228:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800022c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000230:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000234:	ea40 000c 	orr.w	r0, r0, ip
 8000238:	fa23 f302 	lsr.w	r3, r3, r2
 800023c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000240:	e7cc      	b.n	80001dc <__aeabi_d2f+0x14>
 8000242:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000246:	d107      	bne.n	8000258 <__aeabi_d2f+0x90>
 8000248:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800024c:	bf1e      	ittt	ne
 800024e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000252:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000256:	4770      	bxne	lr
 8000258:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800025c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000260:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop

08000268 <__aeabi_uldivmod>:
 8000268:	b953      	cbnz	r3, 8000280 <__aeabi_uldivmod+0x18>
 800026a:	b94a      	cbnz	r2, 8000280 <__aeabi_uldivmod+0x18>
 800026c:	2900      	cmp	r1, #0
 800026e:	bf08      	it	eq
 8000270:	2800      	cmpeq	r0, #0
 8000272:	bf1c      	itt	ne
 8000274:	f04f 31ff 	movne.w	r1, #4294967295
 8000278:	f04f 30ff 	movne.w	r0, #4294967295
 800027c:	f000 b970 	b.w	8000560 <__aeabi_idiv0>
 8000280:	f1ad 0c08 	sub.w	ip, sp, #8
 8000284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000288:	f000 f806 	bl	8000298 <__udivmoddi4>
 800028c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000294:	b004      	add	sp, #16
 8000296:	4770      	bx	lr

08000298 <__udivmoddi4>:
 8000298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800029c:	9e08      	ldr	r6, [sp, #32]
 800029e:	460d      	mov	r5, r1
 80002a0:	4604      	mov	r4, r0
 80002a2:	460f      	mov	r7, r1
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d14a      	bne.n	800033e <__udivmoddi4+0xa6>
 80002a8:	428a      	cmp	r2, r1
 80002aa:	4694      	mov	ip, r2
 80002ac:	d965      	bls.n	800037a <__udivmoddi4+0xe2>
 80002ae:	fab2 f382 	clz	r3, r2
 80002b2:	b143      	cbz	r3, 80002c6 <__udivmoddi4+0x2e>
 80002b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002b8:	f1c3 0220 	rsb	r2, r3, #32
 80002bc:	409f      	lsls	r7, r3
 80002be:	fa20 f202 	lsr.w	r2, r0, r2
 80002c2:	4317      	orrs	r7, r2
 80002c4:	409c      	lsls	r4, r3
 80002c6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ca:	fa1f f58c 	uxth.w	r5, ip
 80002ce:	fbb7 f1fe 	udiv	r1, r7, lr
 80002d2:	0c22      	lsrs	r2, r4, #16
 80002d4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002d8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002dc:	fb01 f005 	mul.w	r0, r1, r5
 80002e0:	4290      	cmp	r0, r2
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x62>
 80002e4:	eb1c 0202 	adds.w	r2, ip, r2
 80002e8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002ec:	f080 811c 	bcs.w	8000528 <__udivmoddi4+0x290>
 80002f0:	4290      	cmp	r0, r2
 80002f2:	f240 8119 	bls.w	8000528 <__udivmoddi4+0x290>
 80002f6:	3902      	subs	r1, #2
 80002f8:	4462      	add	r2, ip
 80002fa:	1a12      	subs	r2, r2, r0
 80002fc:	b2a4      	uxth	r4, r4
 80002fe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000302:	fb0e 2210 	mls	r2, lr, r0, r2
 8000306:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800030a:	fb00 f505 	mul.w	r5, r0, r5
 800030e:	42a5      	cmp	r5, r4
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x90>
 8000312:	eb1c 0404 	adds.w	r4, ip, r4
 8000316:	f100 32ff 	add.w	r2, r0, #4294967295
 800031a:	f080 8107 	bcs.w	800052c <__udivmoddi4+0x294>
 800031e:	42a5      	cmp	r5, r4
 8000320:	f240 8104 	bls.w	800052c <__udivmoddi4+0x294>
 8000324:	4464      	add	r4, ip
 8000326:	3802      	subs	r0, #2
 8000328:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800032c:	1b64      	subs	r4, r4, r5
 800032e:	2100      	movs	r1, #0
 8000330:	b11e      	cbz	r6, 800033a <__udivmoddi4+0xa2>
 8000332:	40dc      	lsrs	r4, r3
 8000334:	2300      	movs	r3, #0
 8000336:	e9c6 4300 	strd	r4, r3, [r6]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0xbc>
 8000342:	2e00      	cmp	r6, #0
 8000344:	f000 80ed 	beq.w	8000522 <__udivmoddi4+0x28a>
 8000348:	2100      	movs	r1, #0
 800034a:	e9c6 0500 	strd	r0, r5, [r6]
 800034e:	4608      	mov	r0, r1
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	fab3 f183 	clz	r1, r3
 8000358:	2900      	cmp	r1, #0
 800035a:	d149      	bne.n	80003f0 <__udivmoddi4+0x158>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d302      	bcc.n	8000366 <__udivmoddi4+0xce>
 8000360:	4282      	cmp	r2, r0
 8000362:	f200 80f8 	bhi.w	8000556 <__udivmoddi4+0x2be>
 8000366:	1a84      	subs	r4, r0, r2
 8000368:	eb65 0203 	sbc.w	r2, r5, r3
 800036c:	2001      	movs	r0, #1
 800036e:	4617      	mov	r7, r2
 8000370:	2e00      	cmp	r6, #0
 8000372:	d0e2      	beq.n	800033a <__udivmoddi4+0xa2>
 8000374:	e9c6 4700 	strd	r4, r7, [r6]
 8000378:	e7df      	b.n	800033a <__udivmoddi4+0xa2>
 800037a:	b902      	cbnz	r2, 800037e <__udivmoddi4+0xe6>
 800037c:	deff      	udf	#255	; 0xff
 800037e:	fab2 f382 	clz	r3, r2
 8000382:	2b00      	cmp	r3, #0
 8000384:	f040 8090 	bne.w	80004a8 <__udivmoddi4+0x210>
 8000388:	1a8a      	subs	r2, r1, r2
 800038a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800038e:	fa1f fe8c 	uxth.w	lr, ip
 8000392:	2101      	movs	r1, #1
 8000394:	fbb2 f5f7 	udiv	r5, r2, r7
 8000398:	fb07 2015 	mls	r0, r7, r5, r2
 800039c:	0c22      	lsrs	r2, r4, #16
 800039e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a2:	fb0e f005 	mul.w	r0, lr, r5
 80003a6:	4290      	cmp	r0, r2
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x124>
 80003aa:	eb1c 0202 	adds.w	r2, ip, r2
 80003ae:	f105 38ff 	add.w	r8, r5, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x122>
 80003b4:	4290      	cmp	r0, r2
 80003b6:	f200 80cb 	bhi.w	8000550 <__udivmoddi4+0x2b8>
 80003ba:	4645      	mov	r5, r8
 80003bc:	1a12      	subs	r2, r2, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003c4:	fb07 2210 	mls	r2, r7, r0, r2
 80003c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003cc:	fb0e fe00 	mul.w	lr, lr, r0
 80003d0:	45a6      	cmp	lr, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x14e>
 80003d4:	eb1c 0404 	adds.w	r4, ip, r4
 80003d8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003dc:	d202      	bcs.n	80003e4 <__udivmoddi4+0x14c>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f200 80bb 	bhi.w	800055a <__udivmoddi4+0x2c2>
 80003e4:	4610      	mov	r0, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ee:	e79f      	b.n	8000330 <__udivmoddi4+0x98>
 80003f0:	f1c1 0720 	rsb	r7, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003fe:	fa05 f401 	lsl.w	r4, r5, r1
 8000402:	fa20 f307 	lsr.w	r3, r0, r7
 8000406:	40fd      	lsrs	r5, r7
 8000408:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800040c:	4323      	orrs	r3, r4
 800040e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000412:	fa1f fe8c 	uxth.w	lr, ip
 8000416:	fb09 5518 	mls	r5, r9, r8, r5
 800041a:	0c1c      	lsrs	r4, r3, #16
 800041c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000420:	fb08 f50e 	mul.w	r5, r8, lr
 8000424:	42a5      	cmp	r5, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	fa00 f001 	lsl.w	r0, r0, r1
 800042e:	d90b      	bls.n	8000448 <__udivmoddi4+0x1b0>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f108 3aff 	add.w	sl, r8, #4294967295
 8000438:	f080 8088 	bcs.w	800054c <__udivmoddi4+0x2b4>
 800043c:	42a5      	cmp	r5, r4
 800043e:	f240 8085 	bls.w	800054c <__udivmoddi4+0x2b4>
 8000442:	f1a8 0802 	sub.w	r8, r8, #2
 8000446:	4464      	add	r4, ip
 8000448:	1b64      	subs	r4, r4, r5
 800044a:	b29d      	uxth	r5, r3
 800044c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000450:	fb09 4413 	mls	r4, r9, r3, r4
 8000454:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000458:	fb03 fe0e 	mul.w	lr, r3, lr
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x1da>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f103 35ff 	add.w	r5, r3, #4294967295
 8000468:	d26c      	bcs.n	8000544 <__udivmoddi4+0x2ac>
 800046a:	45a6      	cmp	lr, r4
 800046c:	d96a      	bls.n	8000544 <__udivmoddi4+0x2ac>
 800046e:	3b02      	subs	r3, #2
 8000470:	4464      	add	r4, ip
 8000472:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000476:	fba3 9502 	umull	r9, r5, r3, r2
 800047a:	eba4 040e 	sub.w	r4, r4, lr
 800047e:	42ac      	cmp	r4, r5
 8000480:	46c8      	mov	r8, r9
 8000482:	46ae      	mov	lr, r5
 8000484:	d356      	bcc.n	8000534 <__udivmoddi4+0x29c>
 8000486:	d053      	beq.n	8000530 <__udivmoddi4+0x298>
 8000488:	b156      	cbz	r6, 80004a0 <__udivmoddi4+0x208>
 800048a:	ebb0 0208 	subs.w	r2, r0, r8
 800048e:	eb64 040e 	sbc.w	r4, r4, lr
 8000492:	fa04 f707 	lsl.w	r7, r4, r7
 8000496:	40ca      	lsrs	r2, r1
 8000498:	40cc      	lsrs	r4, r1
 800049a:	4317      	orrs	r7, r2
 800049c:	e9c6 7400 	strd	r7, r4, [r6]
 80004a0:	4618      	mov	r0, r3
 80004a2:	2100      	movs	r1, #0
 80004a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a8:	f1c3 0120 	rsb	r1, r3, #32
 80004ac:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b0:	fa20 f201 	lsr.w	r2, r0, r1
 80004b4:	fa25 f101 	lsr.w	r1, r5, r1
 80004b8:	409d      	lsls	r5, r3
 80004ba:	432a      	orrs	r2, r5
 80004bc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c0:	fa1f fe8c 	uxth.w	lr, ip
 80004c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004c8:	fb07 1510 	mls	r5, r7, r0, r1
 80004cc:	0c11      	lsrs	r1, r2, #16
 80004ce:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004d2:	fb00 f50e 	mul.w	r5, r0, lr
 80004d6:	428d      	cmp	r5, r1
 80004d8:	fa04 f403 	lsl.w	r4, r4, r3
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x258>
 80004de:	eb1c 0101 	adds.w	r1, ip, r1
 80004e2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e6:	d22f      	bcs.n	8000548 <__udivmoddi4+0x2b0>
 80004e8:	428d      	cmp	r5, r1
 80004ea:	d92d      	bls.n	8000548 <__udivmoddi4+0x2b0>
 80004ec:	3802      	subs	r0, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	1b49      	subs	r1, r1, r5
 80004f2:	b292      	uxth	r2, r2
 80004f4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004f8:	fb07 1115 	mls	r1, r7, r5, r1
 80004fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000500:	fb05 f10e 	mul.w	r1, r5, lr
 8000504:	4291      	cmp	r1, r2
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x282>
 8000508:	eb1c 0202 	adds.w	r2, ip, r2
 800050c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000510:	d216      	bcs.n	8000540 <__udivmoddi4+0x2a8>
 8000512:	4291      	cmp	r1, r2
 8000514:	d914      	bls.n	8000540 <__udivmoddi4+0x2a8>
 8000516:	3d02      	subs	r5, #2
 8000518:	4462      	add	r2, ip
 800051a:	1a52      	subs	r2, r2, r1
 800051c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000520:	e738      	b.n	8000394 <__udivmoddi4+0xfc>
 8000522:	4631      	mov	r1, r6
 8000524:	4630      	mov	r0, r6
 8000526:	e708      	b.n	800033a <__udivmoddi4+0xa2>
 8000528:	4639      	mov	r1, r7
 800052a:	e6e6      	b.n	80002fa <__udivmoddi4+0x62>
 800052c:	4610      	mov	r0, r2
 800052e:	e6fb      	b.n	8000328 <__udivmoddi4+0x90>
 8000530:	4548      	cmp	r0, r9
 8000532:	d2a9      	bcs.n	8000488 <__udivmoddi4+0x1f0>
 8000534:	ebb9 0802 	subs.w	r8, r9, r2
 8000538:	eb65 0e0c 	sbc.w	lr, r5, ip
 800053c:	3b01      	subs	r3, #1
 800053e:	e7a3      	b.n	8000488 <__udivmoddi4+0x1f0>
 8000540:	4645      	mov	r5, r8
 8000542:	e7ea      	b.n	800051a <__udivmoddi4+0x282>
 8000544:	462b      	mov	r3, r5
 8000546:	e794      	b.n	8000472 <__udivmoddi4+0x1da>
 8000548:	4640      	mov	r0, r8
 800054a:	e7d1      	b.n	80004f0 <__udivmoddi4+0x258>
 800054c:	46d0      	mov	r8, sl
 800054e:	e77b      	b.n	8000448 <__udivmoddi4+0x1b0>
 8000550:	3d02      	subs	r5, #2
 8000552:	4462      	add	r2, ip
 8000554:	e732      	b.n	80003bc <__udivmoddi4+0x124>
 8000556:	4608      	mov	r0, r1
 8000558:	e70a      	b.n	8000370 <__udivmoddi4+0xd8>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e742      	b.n	80003e6 <__udivmoddi4+0x14e>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <MPU6050_read_id>:
#include "MPU6050_driver.h"
#include "main.h"
#include "sensordriver.h"

sensor_status_e MPU6050_read_id(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af04      	add	r7, sp, #16
	uint8_t candidateAddress;

	HAL_I2C_Mem_Read(&hi2c1, DEVICE_ADDRESS, WHO_AM_I, 1, &candidateAddress,1, 100);
 800056a:	2364      	movs	r3, #100	; 0x64
 800056c:	9302      	str	r3, [sp, #8]
 800056e:	2301      	movs	r3, #1
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	1dfb      	adds	r3, r7, #7
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2301      	movs	r3, #1
 8000578:	2275      	movs	r2, #117	; 0x75
 800057a:	21d0      	movs	r1, #208	; 0xd0
 800057c:	4806      	ldr	r0, [pc, #24]	; (8000598 <MPU6050_read_id+0x34>)
 800057e:	f001 f92d 	bl	80017dc <HAL_I2C_Mem_Read>

	if(candidateAddress == 0x68)
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	2b68      	cmp	r3, #104	; 0x68
 8000586:	d101      	bne.n	800058c <MPU6050_read_id+0x28>
	{
		return SENSOR_OK;
 8000588:	2300      	movs	r3, #0
 800058a:	e000      	b.n	800058e <MPU6050_read_id+0x2a>
	}
	else
	{
		return SENSOR_ERROR;
 800058c:	2301      	movs	r3, #1
	}
}
 800058e:	4618      	mov	r0, r3
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	2000002c 	.word	0x2000002c

0800059c <MPU6050_test_sensor>:

sensor_status_e MPU6050_test_sensor(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;

	status = HAL_I2C_IsDeviceReady(&hi2c1, DEVICE_ADDRESS, 4, 100);
 80005a2:	2364      	movs	r3, #100	; 0x64
 80005a4:	2204      	movs	r2, #4
 80005a6:	21d0      	movs	r1, #208	; 0xd0
 80005a8:	4807      	ldr	r0, [pc, #28]	; (80005c8 <MPU6050_test_sensor+0x2c>)
 80005aa:	f001 fb3d 	bl	8001c28 <HAL_I2C_IsDeviceReady>
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]

	if(!(status == HAL_OK))
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MPU6050_test_sensor+0x20>
	{
		return SENSOR_ERROR;
 80005b8:	2301      	movs	r3, #1
 80005ba:	e000      	b.n	80005be <MPU6050_test_sensor+0x22>
	}

	return SENSOR_OK;
 80005bc:	2300      	movs	r3, #0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	2000002c 	.word	0x2000002c

080005cc <MPU6050_initialize>:
	}

}

sensor_status_e MPU6050_initialize( SensorData_t *pSensor, fs_sel_e gyroConfig, afs_sel_e acc_config )
{
 80005cc:	b5b0      	push	{r4, r5, r7, lr}
 80005ce:	b098      	sub	sp, #96	; 0x60
 80005d0:	af04      	add	r7, sp, #16
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	460b      	mov	r3, r1
 80005d6:	70fb      	strb	r3, [r7, #3]
 80005d8:	4613      	mov	r3, r2
 80005da:	70bb      	strb	r3, [r7, #2]
	uint8_t gyroConfigData = gyroConfig << 3;
 80005dc:	78fb      	ldrb	r3, [r7, #3]
 80005de:	00db      	lsls	r3, r3, #3
 80005e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t accConfigData  = acc_config << 3;
 80005e4:	78bb      	ldrb	r3, [r7, #2]
 80005e6:	00db      	lsls	r3, r3, #3
 80005e8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t buffer[2];
	buffer[0] = gyroConfigData;
 80005ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80005f0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	buffer[1] = accConfigData;
 80005f4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80005f8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	double acc_co_array[4] = {16384,8192,4096,2048};
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <MPU6050_initialize+0xb0>)
 80005fe:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000602:	461d      	mov	r5, r3
 8000604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000608:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800060c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	double gyro_co_array[4] = {131,65.5,32.8,16.4};
 8000610:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <MPU6050_initialize+0xb4>)
 8000612:	f107 0408 	add.w	r4, r7, #8
 8000616:	461d      	mov	r5, r3
 8000618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000620:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	pSensor->acc_co = acc_co_array[acc_config];
 8000624:	78bb      	ldrb	r3, [r7, #2]
 8000626:	00db      	lsls	r3, r3, #3
 8000628:	3350      	adds	r3, #80	; 0x50
 800062a:	443b      	add	r3, r7
 800062c:	3b28      	subs	r3, #40	; 0x28
 800062e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000632:	6879      	ldr	r1, [r7, #4]
 8000634:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	pSensor->gyro_co = gyro_co_array[gyroConfig];
 8000638:	78fb      	ldrb	r3, [r7, #3]
 800063a:	00db      	lsls	r3, r3, #3
 800063c:	3350      	adds	r3, #80	; 0x50
 800063e:	443b      	add	r3, r7
 8000640:	3b48      	subs	r3, #72	; 0x48
 8000642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000646:	6879      	ldr	r1, [r7, #4]
 8000648:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	if(HAL_I2C_Mem_Write(&hi2c1, DEVICE_ADDRESS, MPU_REG_GYRO_CONFIG, 1, buffer,2, 100) != HAL_OK)
 800064c:	2364      	movs	r3, #100	; 0x64
 800064e:	9302      	str	r3, [sp, #8]
 8000650:	2302      	movs	r3, #2
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2301      	movs	r3, #1
 800065c:	221b      	movs	r2, #27
 800065e:	21d0      	movs	r1, #208	; 0xd0
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <MPU6050_initialize+0xb8>)
 8000662:	f000 ffc1 	bl	80015e8 <HAL_I2C_Mem_Write>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MPU6050_initialize+0xa4>
	{
		return SENSOR_ERROR;
 800066c:	2301      	movs	r3, #1
 800066e:	e000      	b.n	8000672 <MPU6050_initialize+0xa6>
	}
	else
	{
		return SENSOR_OK;
 8000670:	2300      	movs	r3, #0
	}

}
 8000672:	4618      	mov	r0, r3
 8000674:	3750      	adds	r7, #80	; 0x50
 8000676:	46bd      	mov	sp, r7
 8000678:	bdb0      	pop	{r4, r5, r7, pc}
 800067a:	bf00      	nop
 800067c:	08002eb8 	.word	0x08002eb8
 8000680:	08002ed8 	.word	0x08002ed8
 8000684:	2000002c 	.word	0x2000002c

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	ed2d 8b02 	vpush	{d8}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f000 fb4e 	bl	8000d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f930 	bl	80008f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f000 f9c6 	bl	8000a28 <MX_GPIO_Init>
  MX_I2C1_Init();
 800069c:	f000 f996 	bl	80009cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  pwr_mng_val = 0x01;
 80006a0:	4b7e      	ldr	r3, [pc, #504]	; (800089c <main+0x214>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]

  status_test1 = MPU6050_read_id();
 80006a6:	f7ff ff5d 	bl	8000564 <MPU6050_read_id>
 80006aa:	4603      	mov	r3, r0
 80006ac:	461a      	mov	r2, r3
 80006ae:	4b7c      	ldr	r3, [pc, #496]	; (80008a0 <main+0x218>)
 80006b0:	701a      	strb	r2, [r3, #0]
  status_test2 = MPU6050_test_sensor();
 80006b2:	f7ff ff73 	bl	800059c <MPU6050_test_sensor>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b7a      	ldr	r3, [pc, #488]	; (80008a4 <main+0x21c>)
 80006bc:	701a      	strb	r2, [r3, #0]
  status_test3 = MPU6050_initialize(&MPU6050_sensor,FS_250, AFS_2G);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	4879      	ldr	r0, [pc, #484]	; (80008a8 <main+0x220>)
 80006c4:	f7ff ff82 	bl	80005cc <MPU6050_initialize>
 80006c8:	4603      	mov	r3, r0
 80006ca:	461a      	mov	r2, r3
 80006cc:	4b77      	ldr	r3, [pc, #476]	; (80008ac <main+0x224>)
 80006ce:	701a      	strb	r2, [r3, #0]
  status_test4 = sensor_write_register8(DEVICE_ADDRESS,MPU_REG_PWR_MGMT_1, pwr_mng_val);
 80006d0:	4b72      	ldr	r3, [pc, #456]	; (800089c <main+0x214>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	216b      	movs	r1, #107	; 0x6b
 80006d8:	20d0      	movs	r0, #208	; 0xd0
 80006da:	f000 fa2f 	bl	8000b3c <sensor_write_register8>
 80006de:	4603      	mov	r3, r0
 80006e0:	461a      	mov	r2, r3
 80006e2:	4b73      	ldr	r3, [pc, #460]	; (80008b0 <main+0x228>)
 80006e4:	701a      	strb	r2, [r3, #0]
  returnVal = sensor_read_register8(DEVICE_ADDRESS,MPU_REG_PWR_MGMT_1);
 80006e6:	216b      	movs	r1, #107	; 0x6b
 80006e8:	20d0      	movs	r0, #208	; 0xd0
 80006ea:	f000 f9d9 	bl	8000aa0 <sensor_read_register8>
 80006ee:	4603      	mov	r3, r0
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b70      	ldr	r3, [pc, #448]	; (80008b4 <main+0x22c>)
 80006f4:	701a      	strb	r2, [r3, #0]
  returnafsVal = MPU6050_sensor.acc_co;
 80006f6:	4b6c      	ldr	r3, [pc, #432]	; (80008a8 <main+0x220>)
 80006f8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80006fc:	496e      	ldr	r1, [pc, #440]	; (80008b8 <main+0x230>)
 80006fe:	e9c1 2300 	strd	r2, r3, [r1]
  returnfsVal = MPU6050_sensor.gyro_co;
 8000702:	4b69      	ldr	r3, [pc, #420]	; (80008a8 <main+0x220>)
 8000704:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8000708:	496c      	ldr	r1, [pc, #432]	; (80008bc <main+0x234>)
 800070a:	e9c1 2300 	strd	r2, r3, [r1]
  returnGyroConfig = sensor_read_register8(DEVICE_ADDRESS,MPU_REG_GYRO_CONFIG);
 800070e:	211b      	movs	r1, #27
 8000710:	20d0      	movs	r0, #208	; 0xd0
 8000712:	f000 f9c5 	bl	8000aa0 <sensor_read_register8>
 8000716:	4603      	mov	r3, r0
 8000718:	461a      	mov	r2, r3
 800071a:	4b69      	ldr	r3, [pc, #420]	; (80008c0 <main+0x238>)
 800071c:	701a      	strb	r2, [r3, #0]
  returnAccConfig = sensor_read_register8(DEVICE_ADDRESS,MPU_REG_ACCEL_CONFIG);
 800071e:	211c      	movs	r1, #28
 8000720:	20d0      	movs	r0, #208	; 0xd0
 8000722:	f000 f9bd 	bl	8000aa0 <sensor_read_register8>
 8000726:	4603      	mov	r3, r0
 8000728:	461a      	mov	r2, r3
 800072a:	4b66      	ldr	r3, [pc, #408]	; (80008c4 <main+0x23c>)
 800072c:	701a      	strb	r2, [r3, #0]
  sensor_write_register8(DEVICE_ADDRESS,MPU_REG_CONFIG , 0x19);
 800072e:	2219      	movs	r2, #25
 8000730:	211a      	movs	r1, #26
 8000732:	20d0      	movs	r0, #208	; 0xd0
 8000734:	f000 fa02 	bl	8000b3c <sensor_write_register8>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rawAccX = sensor_read_register16(DEVICE_ADDRESS, MPU_REG_ACCEL_XOUT_H);
 8000738:	213b      	movs	r1, #59	; 0x3b
 800073a:	20d0      	movs	r0, #208	; 0xd0
 800073c:	f000 f9d6 	bl	8000aec <sensor_read_register16>
 8000740:	4603      	mov	r3, r0
 8000742:	ee07 3a90 	vmov	s15, r3
 8000746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800074a:	4b5f      	ldr	r3, [pc, #380]	; (80008c8 <main+0x240>)
 800074c:	edc3 7a00 	vstr	s15, [r3]
	  rawAccY = sensor_read_register16(DEVICE_ADDRESS, MPU_REG_ACCEL_YOUT_H);
 8000750:	213d      	movs	r1, #61	; 0x3d
 8000752:	20d0      	movs	r0, #208	; 0xd0
 8000754:	f000 f9ca 	bl	8000aec <sensor_read_register16>
 8000758:	4603      	mov	r3, r0
 800075a:	ee07 3a90 	vmov	s15, r3
 800075e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000762:	4b5a      	ldr	r3, [pc, #360]	; (80008cc <main+0x244>)
 8000764:	edc3 7a00 	vstr	s15, [r3]
	  rawAccZ = sensor_read_register16(DEVICE_ADDRESS, MPU_REG_ACCEL_ZOUT_H);
 8000768:	213f      	movs	r1, #63	; 0x3f
 800076a:	20d0      	movs	r0, #208	; 0xd0
 800076c:	f000 f9be 	bl	8000aec <sensor_read_register16>
 8000770:	4603      	mov	r3, r0
 8000772:	ee07 3a90 	vmov	s15, r3
 8000776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800077a:	4b55      	ldr	r3, [pc, #340]	; (80008d0 <main+0x248>)
 800077c:	edc3 7a00 	vstr	s15, [r3]

	  rawGyroX = sensor_read_register16(DEVICE_ADDRESS, MPU_REG_GYRO_XOUT_H);
 8000780:	2143      	movs	r1, #67	; 0x43
 8000782:	20d0      	movs	r0, #208	; 0xd0
 8000784:	f000 f9b2 	bl	8000aec <sensor_read_register16>
 8000788:	4603      	mov	r3, r0
 800078a:	ee07 3a90 	vmov	s15, r3
 800078e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000792:	4b50      	ldr	r3, [pc, #320]	; (80008d4 <main+0x24c>)
 8000794:	edc3 7a00 	vstr	s15, [r3]
	  rawGyroY = sensor_read_register16(DEVICE_ADDRESS, MPU_REG_GYRO_YOUT_H);
 8000798:	2145      	movs	r1, #69	; 0x45
 800079a:	20d0      	movs	r0, #208	; 0xd0
 800079c:	f000 f9a6 	bl	8000aec <sensor_read_register16>
 80007a0:	4603      	mov	r3, r0
 80007a2:	ee07 3a90 	vmov	s15, r3
 80007a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007aa:	4b4b      	ldr	r3, [pc, #300]	; (80008d8 <main+0x250>)
 80007ac:	edc3 7a00 	vstr	s15, [r3]
	  rawGyroZ = sensor_read_register16(DEVICE_ADDRESS, MPU_REG_GYRO_ZOUT_H);
 80007b0:	2147      	movs	r1, #71	; 0x47
 80007b2:	20d0      	movs	r0, #208	; 0xd0
 80007b4:	f000 f99a 	bl	8000aec <sensor_read_register16>
 80007b8:	4603      	mov	r3, r0
 80007ba:	ee07 3a90 	vmov	s15, r3
 80007be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007c2:	4b46      	ldr	r3, [pc, #280]	; (80008dc <main+0x254>)
 80007c4:	edc3 7a00 	vstr	s15, [r3]

	  AccX = rawAccX / (float)MPU6050_sensor.acc_co;
 80007c8:	4b3f      	ldr	r3, [pc, #252]	; (80008c8 <main+0x240>)
 80007ca:	ed93 8a00 	vldr	s16, [r3]
 80007ce:	4b36      	ldr	r3, [pc, #216]	; (80008a8 <main+0x220>)
 80007d0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80007d4:	4610      	mov	r0, r2
 80007d6:	4619      	mov	r1, r3
 80007d8:	f7ff fcf6 	bl	80001c8 <__aeabi_d2f>
 80007dc:	ee07 0a10 	vmov	s14, r0
 80007e0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80007e4:	4b3e      	ldr	r3, [pc, #248]	; (80008e0 <main+0x258>)
 80007e6:	edc3 7a00 	vstr	s15, [r3]
	  AccY = rawAccY / (float)MPU6050_sensor.acc_co;
 80007ea:	4b38      	ldr	r3, [pc, #224]	; (80008cc <main+0x244>)
 80007ec:	ed93 8a00 	vldr	s16, [r3]
 80007f0:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <main+0x220>)
 80007f2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80007f6:	4610      	mov	r0, r2
 80007f8:	4619      	mov	r1, r3
 80007fa:	f7ff fce5 	bl	80001c8 <__aeabi_d2f>
 80007fe:	ee07 0a10 	vmov	s14, r0
 8000802:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000806:	4b37      	ldr	r3, [pc, #220]	; (80008e4 <main+0x25c>)
 8000808:	edc3 7a00 	vstr	s15, [r3]
	  AccZ = rawAccZ / (float)MPU6050_sensor.acc_co;
 800080c:	4b30      	ldr	r3, [pc, #192]	; (80008d0 <main+0x248>)
 800080e:	ed93 8a00 	vldr	s16, [r3]
 8000812:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <main+0x220>)
 8000814:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000818:	4610      	mov	r0, r2
 800081a:	4619      	mov	r1, r3
 800081c:	f7ff fcd4 	bl	80001c8 <__aeabi_d2f>
 8000820:	ee07 0a10 	vmov	s14, r0
 8000824:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000828:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <main+0x260>)
 800082a:	edc3 7a00 	vstr	s15, [r3]

	  GyroX = rawGyroX / (float)MPU6050_sensor.gyro_co;
 800082e:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <main+0x24c>)
 8000830:	ed93 8a00 	vldr	s16, [r3]
 8000834:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <main+0x220>)
 8000836:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800083a:	4610      	mov	r0, r2
 800083c:	4619      	mov	r1, r3
 800083e:	f7ff fcc3 	bl	80001c8 <__aeabi_d2f>
 8000842:	ee07 0a10 	vmov	s14, r0
 8000846:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800084a:	4b28      	ldr	r3, [pc, #160]	; (80008ec <main+0x264>)
 800084c:	edc3 7a00 	vstr	s15, [r3]
	  GyroY = rawGyroY / (float)MPU6050_sensor.gyro_co;
 8000850:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <main+0x250>)
 8000852:	ed93 8a00 	vldr	s16, [r3]
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <main+0x220>)
 8000858:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800085c:	4610      	mov	r0, r2
 800085e:	4619      	mov	r1, r3
 8000860:	f7ff fcb2 	bl	80001c8 <__aeabi_d2f>
 8000864:	ee07 0a10 	vmov	s14, r0
 8000868:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800086c:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <main+0x268>)
 800086e:	edc3 7a00 	vstr	s15, [r3]
	  GyroZ = rawGyroZ / (float)MPU6050_sensor.gyro_co;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <main+0x254>)
 8000874:	ed93 8a00 	vldr	s16, [r3]
 8000878:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <main+0x220>)
 800087a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800087e:	4610      	mov	r0, r2
 8000880:	4619      	mov	r1, r3
 8000882:	f7ff fca1 	bl	80001c8 <__aeabi_d2f>
 8000886:	ee07 0a10 	vmov	s14, r0
 800088a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <main+0x26c>)
 8000890:	edc3 7a00 	vstr	s15, [r3]

	  HAL_Delay(100);
 8000894:	2064      	movs	r0, #100	; 0x64
 8000896:	f000 fabd 	bl	8000e14 <HAL_Delay>
	  rawAccX = sensor_read_register16(DEVICE_ADDRESS, MPU_REG_ACCEL_XOUT_H);
 800089a:	e74d      	b.n	8000738 <main+0xb0>
 800089c:	20000080 	.word	0x20000080
 80008a0:	2000009a 	.word	0x2000009a
 80008a4:	2000009b 	.word	0x2000009b
 80008a8:	200000a0 	.word	0x200000a0
 80008ac:	2000009c 	.word	0x2000009c
 80008b0:	2000009d 	.word	0x2000009d
 80008b4:	20000081 	.word	0x20000081
 80008b8:	20000090 	.word	0x20000090
 80008bc:	20000088 	.word	0x20000088
 80008c0:	20000098 	.word	0x20000098
 80008c4:	20000099 	.word	0x20000099
 80008c8:	200000f0 	.word	0x200000f0
 80008cc:	200000f4 	.word	0x200000f4
 80008d0:	200000f8 	.word	0x200000f8
 80008d4:	20000108 	.word	0x20000108
 80008d8:	2000010c 	.word	0x2000010c
 80008dc:	20000110 	.word	0x20000110
 80008e0:	200000fc 	.word	0x200000fc
 80008e4:	20000100 	.word	0x20000100
 80008e8:	20000104 	.word	0x20000104
 80008ec:	20000114 	.word	0x20000114
 80008f0:	20000118 	.word	0x20000118
 80008f4:	2000011c 	.word	0x2000011c

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b094      	sub	sp, #80	; 0x50
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 0320 	add.w	r3, r7, #32
 8000902:	2230      	movs	r2, #48	; 0x30
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f002 fa9c 	bl	8002e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	4b28      	ldr	r3, [pc, #160]	; (80009c4 <SystemClock_Config+0xcc>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	4a27      	ldr	r2, [pc, #156]	; (80009c4 <SystemClock_Config+0xcc>)
 8000926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092a:	6413      	str	r3, [r2, #64]	; 0x40
 800092c:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <SystemClock_Config+0xcc>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <SystemClock_Config+0xd0>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a21      	ldr	r2, [pc, #132]	; (80009c8 <SystemClock_Config+0xd0>)
 8000942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000946:	6013      	str	r3, [r2, #0]
 8000948:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <SystemClock_Config+0xd0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000954:	2301      	movs	r3, #1
 8000956:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000958:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095e:	2302      	movs	r3, #2
 8000960:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000962:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000968:	2304      	movs	r3, #4
 800096a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800096c:	23a8      	movs	r3, #168	; 0xa8
 800096e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000970:	2302      	movs	r3, #2
 8000972:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000974:	2304      	movs	r3, #4
 8000976:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000978:	f107 0320 	add.w	r3, r7, #32
 800097c:	4618      	mov	r0, r3
 800097e:	f001 fddd 	bl	800253c <HAL_RCC_OscConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000988:	f000 f884 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098c:	230f      	movs	r3, #15
 800098e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000990:	2302      	movs	r3, #2
 8000992:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000998:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800099c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800099e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	2105      	movs	r1, #5
 80009aa:	4618      	mov	r0, r3
 80009ac:	f002 f83e 	bl	8002a2c <HAL_RCC_ClockConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009b6:	f000 f86d 	bl	8000a94 <Error_Handler>
  }
}
 80009ba:	bf00      	nop
 80009bc:	3750      	adds	r7, #80	; 0x50
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40007000 	.word	0x40007000

080009cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <MX_I2C1_Init+0x50>)
 80009d2:	4a13      	ldr	r2, [pc, #76]	; (8000a20 <MX_I2C1_Init+0x54>)
 80009d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_I2C1_Init+0x50>)
 80009d8:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <MX_I2C1_Init+0x58>)
 80009da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_I2C1_Init+0x50>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_I2C1_Init+0x50>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_I2C1_Init+0x50>)
 80009ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <MX_I2C1_Init+0x50>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_I2C1_Init+0x50>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <MX_I2C1_Init+0x50>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_I2C1_Init+0x50>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_I2C1_Init+0x50>)
 8000a0a:	f000 fca9 	bl	8001360 <HAL_I2C_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a14:	f000 f83e 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2000002c 	.word	0x2000002c
 8000a20:	40005400 	.word	0x40005400
 8000a24:	00061a80 	.word	0x00061a80

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <MX_GPIO_Init+0x68>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a16      	ldr	r2, [pc, #88]	; (8000a90 <MX_GPIO_Init+0x68>)
 8000a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_GPIO_Init+0x68>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <MX_GPIO_Init+0x68>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a0f      	ldr	r2, [pc, #60]	; (8000a90 <MX_GPIO_Init+0x68>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <MX_GPIO_Init+0x68>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_GPIO_Init+0x68>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <MX_GPIO_Init+0x68>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_GPIO_Init+0x68>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a82:	bf00      	nop
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <Error_Handler+0x8>
	...

08000aa0 <sensor_read_register8>:
#include "sensordriver.h"
#include "MPU6050_driver.h"


uint8_t sensor_read_register8(uint8_t chipAdd, uint8_t regAdd)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af04      	add	r7, sp, #16
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	460a      	mov	r2, r1
 8000aaa:	71fb      	strb	r3, [r7, #7]
 8000aac:	4613      	mov	r3, r2
 8000aae:	71bb      	strb	r3, [r7, #6]
	uint8_t returnVal;

	HAL_StatusTypeDef status;

	status = HAL_I2C_Mem_Read(&hi2c1,chipAdd,regAdd , 1, &returnVal, 1, 100);
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	b299      	uxth	r1, r3
 8000ab4:	79bb      	ldrb	r3, [r7, #6]
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	2364      	movs	r3, #100	; 0x64
 8000aba:	9302      	str	r3, [sp, #8]
 8000abc:	2301      	movs	r3, #1
 8000abe:	9301      	str	r3, [sp, #4]
 8000ac0:	f107 030e 	add.w	r3, r7, #14
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	4807      	ldr	r0, [pc, #28]	; (8000ae8 <sensor_read_register8+0x48>)
 8000aca:	f000 fe87 	bl	80017dc <HAL_I2C_Mem_Read>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	73fb      	strb	r3, [r7, #15]

	if(status != HAL_OK)
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <sensor_read_register8+0x3c>
	{
		Error_Handler();
 8000ad8:	f7ff ffdc 	bl	8000a94 <Error_Handler>
	}

	return returnVal;
 8000adc:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2000002c 	.word	0x2000002c

08000aec <sensor_read_register16>:

int16_t sensor_read_register16(uint8_t chipAdd, uint8_t regAdd)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af04      	add	r7, sp, #16
 8000af2:	4603      	mov	r3, r0
 8000af4:	460a      	mov	r2, r1
 8000af6:	71fb      	strb	r3, [r7, #7]
 8000af8:	4613      	mov	r3, r2
 8000afa:	71bb      	strb	r3, [r7, #6]
	int8_t returnVal[2];
	int16_t returnVal16;

	HAL_I2C_Mem_Read(&hi2c1,chipAdd,regAdd , 1, (uint8_t *)returnVal, 2, 100);
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	b299      	uxth	r1, r3
 8000b00:	79bb      	ldrb	r3, [r7, #6]
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	2364      	movs	r3, #100	; 0x64
 8000b06:	9302      	str	r3, [sp, #8]
 8000b08:	2302      	movs	r3, #2
 8000b0a:	9301      	str	r3, [sp, #4]
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	2301      	movs	r3, #1
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <sensor_read_register16+0x4c>)
 8000b16:	f000 fe61 	bl	80017dc <HAL_I2C_Mem_Read>

	returnVal16 = (returnVal[0] << 8) | returnVal[1];
 8000b1a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000b1e:	021b      	lsls	r3, r3, #8
 8000b20:	b21a      	sxth	r2, r3
 8000b22:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b26:	b21b      	sxth	r3, r3
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	81fb      	strh	r3, [r7, #14]

	return returnVal16;
 8000b2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	2000002c 	.word	0x2000002c

08000b3c <sensor_write_register8>:

sensor_status_e sensor_write_register8(uint8_t chipAdd, uint8_t regAdd, uint8_t value)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af04      	add	r7, sp, #16
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
 8000b46:	460b      	mov	r3, r1
 8000b48:	71bb      	strb	r3, [r7, #6]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	717b      	strb	r3, [r7, #5]
	if(HAL_I2C_Mem_Write(&hi2c1,chipAdd,regAdd,1,&value,1,100) != HAL_OK)
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	b299      	uxth	r1, r3
 8000b52:	79bb      	ldrb	r3, [r7, #6]
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	2364      	movs	r3, #100	; 0x64
 8000b58:	9302      	str	r3, [sp, #8]
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	9301      	str	r3, [sp, #4]
 8000b5e:	1d7b      	adds	r3, r7, #5
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	2301      	movs	r3, #1
 8000b64:	4806      	ldr	r0, [pc, #24]	; (8000b80 <sensor_write_register8+0x44>)
 8000b66:	f000 fd3f 	bl	80015e8 <HAL_I2C_Mem_Write>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <sensor_write_register8+0x38>
	{
		return SENSOR_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	e000      	b.n	8000b76 <sensor_write_register8+0x3a>
	}
	else
	{
		return SENSOR_OK;
 8000b74:	2300      	movs	r3, #0
	}
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2000002c 	.word	0x2000002c

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a19      	ldr	r2, [pc, #100]	; (8000c58 <HAL_I2C_MspInit+0x84>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d12b      	bne.n	8000c4e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <HAL_I2C_MspInit+0x88>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a17      	ldr	r2, [pc, #92]	; (8000c5c <HAL_I2C_MspInit+0x88>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_I2C_MspInit+0x88>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c12:	23c0      	movs	r3, #192	; 0xc0
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c16:	2312      	movs	r3, #18
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c22:	2304      	movs	r3, #4
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480c      	ldr	r0, [pc, #48]	; (8000c60 <HAL_I2C_MspInit+0x8c>)
 8000c2e:	f000 f9fb 	bl	8001028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_I2C_MspInit+0x88>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <HAL_I2C_MspInit+0x88>)
 8000c3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_I2C_MspInit+0x88>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	3728      	adds	r7, #40	; 0x28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40005400 	.word	0x40005400
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020400 	.word	0x40020400

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <NMI_Handler+0x4>

08000c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <HardFault_Handler+0x4>

08000c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <MemManage_Handler+0x4>

08000c76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <BusFault_Handler+0x4>

08000c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <UsageFault_Handler+0x4>

08000c82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb0:	f000 f890 	bl	8000dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <SystemInit+0x20>)
 8000cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <SystemInit+0x20>)
 8000cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ce0:	480d      	ldr	r0, [pc, #52]	; (8000d18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ce2:	490e      	ldr	r1, [pc, #56]	; (8000d1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ce4:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce8:	e002      	b.n	8000cf0 <LoopCopyDataInit>

08000cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cee:	3304      	adds	r3, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf4:	d3f9      	bcc.n	8000cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf6:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cf8:	4c0b      	ldr	r4, [pc, #44]	; (8000d28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cfc:	e001      	b.n	8000d02 <LoopFillZerobss>

08000cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d00:	3204      	adds	r2, #4

08000d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d04:	d3fb      	bcc.n	8000cfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d06:	f7ff ffd7 	bl	8000cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d0a:	f002 f8a3 	bl	8002e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d0e:	f7ff fcbb 	bl	8000688 <main>
  bx  lr    
 8000d12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d20:	08002f20 	.word	0x08002f20
  ldr r2, =_sbss
 8000d24:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d28:	20000124 	.word	0x20000124

08000d2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d2c:	e7fe      	b.n	8000d2c <ADC_IRQHandler>
	...

08000d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d34:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <HAL_Init+0x40>)
 8000d3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <HAL_Init+0x40>)
 8000d46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <HAL_Init+0x40>)
 8000d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f000 f931 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5e:	200f      	movs	r0, #15
 8000d60:	f000 f808 	bl	8000d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d64:	f7ff ff0e 	bl	8000b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023c00 	.word	0x40023c00

08000d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_InitTick+0x54>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_InitTick+0x58>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f93b 	bl	800100e <HAL_SYSTICK_Config>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00e      	b.n	8000dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b0f      	cmp	r3, #15
 8000da6:	d80a      	bhi.n	8000dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da8:	2200      	movs	r2, #0
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f000 f911 	bl	8000fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db4:	4a06      	ldr	r2, [pc, #24]	; (8000dd0 <HAL_InitTick+0x5c>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e000      	b.n	8000dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000004 	.word	0x20000004

08000dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x20>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_IncTick+0x24>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <HAL_IncTick+0x24>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000008 	.word	0x20000008
 8000df8:	20000120 	.word	0x20000120

08000dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <HAL_GetTick+0x14>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000120 	.word	0x20000120

08000e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e1c:	f7ff ffee 	bl	8000dfc <HAL_GetTick>
 8000e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e2c:	d005      	beq.n	8000e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_Delay+0x44>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e3a:	bf00      	nop
 8000e3c:	f7ff ffde 	bl	8000dfc <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d8f7      	bhi.n	8000e3c <HAL_Delay+0x28>
  {
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	; (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	; (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f1c3 0307 	rsb	r3, r3, #7
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf28      	it	cs
 8000f32:	2304      	movcs	r3, #4
 8000f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d902      	bls.n	8000f44 <NVIC_EncodePriority+0x30>
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3b03      	subs	r3, #3
 8000f42:	e000      	b.n	8000f46 <NVIC_EncodePriority+0x32>
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43da      	mvns	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	4313      	orrs	r3, r2
         );
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	; 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f8c:	d301      	bcc.n	8000f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00f      	b.n	8000fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <SysTick_Config+0x40>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa0:	f7ff ff8e 	bl	8000ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <SysTick_Config+0x40>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000faa:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <SysTick_Config+0x40>)
 8000fac:	2207      	movs	r2, #7
 8000fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	e000e010 	.word	0xe000e010

08000fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff47 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe8:	f7ff ff5c 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8000fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	6978      	ldr	r0, [r7, #20]
 8000ff4:	f7ff ff8e 	bl	8000f14 <NVIC_EncodePriority>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff5d 	bl	8000ec0 <__NVIC_SetPriority>
}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ffb0 	bl	8000f7c <SysTick_Config>
 800101c:	4603      	mov	r3, r0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
 8001042:	e16b      	b.n	800131c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001044:	2201      	movs	r2, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	429a      	cmp	r2, r3
 800105e:	f040 815a 	bne.w	8001316 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	2b01      	cmp	r3, #1
 800106c:	d005      	beq.n	800107a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001076:	2b02      	cmp	r3, #2
 8001078:	d130      	bne.n	80010dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	2203      	movs	r2, #3
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b0:	2201      	movs	r2, #1
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	091b      	lsrs	r3, r3, #4
 80010c6:	f003 0201 	and.w	r2, r3, #1
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	d017      	beq.n	8001118 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	2203      	movs	r2, #3
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d123      	bne.n	800116c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	08da      	lsrs	r2, r3, #3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3208      	adds	r2, #8
 800112c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	220f      	movs	r2, #15
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	08da      	lsrs	r2, r3, #3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3208      	adds	r2, #8
 8001166:	69b9      	ldr	r1, [r7, #24]
 8001168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0203 	and.w	r2, r3, #3
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 80b4 	beq.w	8001316 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b60      	ldr	r3, [pc, #384]	; (8001334 <HAL_GPIO_Init+0x30c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a5f      	ldr	r2, [pc, #380]	; (8001334 <HAL_GPIO_Init+0x30c>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b5d      	ldr	r3, [pc, #372]	; (8001334 <HAL_GPIO_Init+0x30c>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ca:	4a5b      	ldr	r2, [pc, #364]	; (8001338 <HAL_GPIO_Init+0x310>)
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	089b      	lsrs	r3, r3, #2
 80011d0:	3302      	adds	r3, #2
 80011d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	220f      	movs	r2, #15
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a52      	ldr	r2, [pc, #328]	; (800133c <HAL_GPIO_Init+0x314>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d02b      	beq.n	800124e <HAL_GPIO_Init+0x226>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a51      	ldr	r2, [pc, #324]	; (8001340 <HAL_GPIO_Init+0x318>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d025      	beq.n	800124a <HAL_GPIO_Init+0x222>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a50      	ldr	r2, [pc, #320]	; (8001344 <HAL_GPIO_Init+0x31c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d01f      	beq.n	8001246 <HAL_GPIO_Init+0x21e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4f      	ldr	r2, [pc, #316]	; (8001348 <HAL_GPIO_Init+0x320>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d019      	beq.n	8001242 <HAL_GPIO_Init+0x21a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4e      	ldr	r2, [pc, #312]	; (800134c <HAL_GPIO_Init+0x324>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d013      	beq.n	800123e <HAL_GPIO_Init+0x216>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4d      	ldr	r2, [pc, #308]	; (8001350 <HAL_GPIO_Init+0x328>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d00d      	beq.n	800123a <HAL_GPIO_Init+0x212>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4c      	ldr	r2, [pc, #304]	; (8001354 <HAL_GPIO_Init+0x32c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d007      	beq.n	8001236 <HAL_GPIO_Init+0x20e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4b      	ldr	r2, [pc, #300]	; (8001358 <HAL_GPIO_Init+0x330>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d101      	bne.n	8001232 <HAL_GPIO_Init+0x20a>
 800122e:	2307      	movs	r3, #7
 8001230:	e00e      	b.n	8001250 <HAL_GPIO_Init+0x228>
 8001232:	2308      	movs	r3, #8
 8001234:	e00c      	b.n	8001250 <HAL_GPIO_Init+0x228>
 8001236:	2306      	movs	r3, #6
 8001238:	e00a      	b.n	8001250 <HAL_GPIO_Init+0x228>
 800123a:	2305      	movs	r3, #5
 800123c:	e008      	b.n	8001250 <HAL_GPIO_Init+0x228>
 800123e:	2304      	movs	r3, #4
 8001240:	e006      	b.n	8001250 <HAL_GPIO_Init+0x228>
 8001242:	2303      	movs	r3, #3
 8001244:	e004      	b.n	8001250 <HAL_GPIO_Init+0x228>
 8001246:	2302      	movs	r3, #2
 8001248:	e002      	b.n	8001250 <HAL_GPIO_Init+0x228>
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <HAL_GPIO_Init+0x228>
 800124e:	2300      	movs	r3, #0
 8001250:	69fa      	ldr	r2, [r7, #28]
 8001252:	f002 0203 	and.w	r2, r2, #3
 8001256:	0092      	lsls	r2, r2, #2
 8001258:	4093      	lsls	r3, r2
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001260:	4935      	ldr	r1, [pc, #212]	; (8001338 <HAL_GPIO_Init+0x310>)
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	089b      	lsrs	r3, r3, #2
 8001266:	3302      	adds	r3, #2
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800126e:	4b3b      	ldr	r3, [pc, #236]	; (800135c <HAL_GPIO_Init+0x334>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001292:	4a32      	ldr	r2, [pc, #200]	; (800135c <HAL_GPIO_Init+0x334>)
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001298:	4b30      	ldr	r3, [pc, #192]	; (800135c <HAL_GPIO_Init+0x334>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012bc:	4a27      	ldr	r2, [pc, #156]	; (800135c <HAL_GPIO_Init+0x334>)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012c2:	4b26      	ldr	r3, [pc, #152]	; (800135c <HAL_GPIO_Init+0x334>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012e6:	4a1d      	ldr	r2, [pc, #116]	; (800135c <HAL_GPIO_Init+0x334>)
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <HAL_GPIO_Init+0x334>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001310:	4a12      	ldr	r2, [pc, #72]	; (800135c <HAL_GPIO_Init+0x334>)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3301      	adds	r3, #1
 800131a:	61fb      	str	r3, [r7, #28]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	2b0f      	cmp	r3, #15
 8001320:	f67f ae90 	bls.w	8001044 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	3724      	adds	r7, #36	; 0x24
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800
 8001338:	40013800 	.word	0x40013800
 800133c:	40020000 	.word	0x40020000
 8001340:	40020400 	.word	0x40020400
 8001344:	40020800 	.word	0x40020800
 8001348:	40020c00 	.word	0x40020c00
 800134c:	40021000 	.word	0x40021000
 8001350:	40021400 	.word	0x40021400
 8001354:	40021800 	.word	0x40021800
 8001358:	40021c00 	.word	0x40021c00
 800135c:	40013c00 	.word	0x40013c00

08001360 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e12b      	b.n	80015ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d106      	bne.n	800138c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff fc24 	bl	8000bd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2224      	movs	r2, #36	; 0x24
 8001390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0201 	bic.w	r2, r2, #1
 80013a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013c4:	f001 fd2a 	bl	8002e1c <HAL_RCC_GetPCLK1Freq>
 80013c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	4a81      	ldr	r2, [pc, #516]	; (80015d4 <HAL_I2C_Init+0x274>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d807      	bhi.n	80013e4 <HAL_I2C_Init+0x84>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4a80      	ldr	r2, [pc, #512]	; (80015d8 <HAL_I2C_Init+0x278>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	bf94      	ite	ls
 80013dc:	2301      	movls	r3, #1
 80013de:	2300      	movhi	r3, #0
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	e006      	b.n	80013f2 <HAL_I2C_Init+0x92>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4a7d      	ldr	r2, [pc, #500]	; (80015dc <HAL_I2C_Init+0x27c>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	bf94      	ite	ls
 80013ec:	2301      	movls	r3, #1
 80013ee:	2300      	movhi	r3, #0
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e0e7      	b.n	80015ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4a78      	ldr	r2, [pc, #480]	; (80015e0 <HAL_I2C_Init+0x280>)
 80013fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001402:	0c9b      	lsrs	r3, r3, #18
 8001404:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68ba      	ldr	r2, [r7, #8]
 8001416:	430a      	orrs	r2, r1
 8001418:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	4a6a      	ldr	r2, [pc, #424]	; (80015d4 <HAL_I2C_Init+0x274>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d802      	bhi.n	8001434 <HAL_I2C_Init+0xd4>
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	3301      	adds	r3, #1
 8001432:	e009      	b.n	8001448 <HAL_I2C_Init+0xe8>
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800143a:	fb02 f303 	mul.w	r3, r2, r3
 800143e:	4a69      	ldr	r2, [pc, #420]	; (80015e4 <HAL_I2C_Init+0x284>)
 8001440:	fba2 2303 	umull	r2, r3, r2, r3
 8001444:	099b      	lsrs	r3, r3, #6
 8001446:	3301      	adds	r3, #1
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6812      	ldr	r2, [r2, #0]
 800144c:	430b      	orrs	r3, r1
 800144e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800145a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	495c      	ldr	r1, [pc, #368]	; (80015d4 <HAL_I2C_Init+0x274>)
 8001464:	428b      	cmp	r3, r1
 8001466:	d819      	bhi.n	800149c <HAL_I2C_Init+0x13c>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	1e59      	subs	r1, r3, #1
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	fbb1 f3f3 	udiv	r3, r1, r3
 8001476:	1c59      	adds	r1, r3, #1
 8001478:	f640 73fc 	movw	r3, #4092	; 0xffc
 800147c:	400b      	ands	r3, r1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00a      	beq.n	8001498 <HAL_I2C_Init+0x138>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	1e59      	subs	r1, r3, #1
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001490:	3301      	adds	r3, #1
 8001492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001496:	e051      	b.n	800153c <HAL_I2C_Init+0x1dc>
 8001498:	2304      	movs	r3, #4
 800149a:	e04f      	b.n	800153c <HAL_I2C_Init+0x1dc>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d111      	bne.n	80014c8 <HAL_I2C_Init+0x168>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	1e58      	subs	r0, r3, #1
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6859      	ldr	r1, [r3, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	440b      	add	r3, r1
 80014b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014b6:	3301      	adds	r3, #1
 80014b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014bc:	2b00      	cmp	r3, #0
 80014be:	bf0c      	ite	eq
 80014c0:	2301      	moveq	r3, #1
 80014c2:	2300      	movne	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	e012      	b.n	80014ee <HAL_I2C_Init+0x18e>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	1e58      	subs	r0, r3, #1
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6859      	ldr	r1, [r3, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	0099      	lsls	r1, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	fbb0 f3f3 	udiv	r3, r0, r3
 80014de:	3301      	adds	r3, #1
 80014e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	bf0c      	ite	eq
 80014e8:	2301      	moveq	r3, #1
 80014ea:	2300      	movne	r3, #0
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_I2C_Init+0x196>
 80014f2:	2301      	movs	r3, #1
 80014f4:	e022      	b.n	800153c <HAL_I2C_Init+0x1dc>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10e      	bne.n	800151c <HAL_I2C_Init+0x1bc>
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	1e58      	subs	r0, r3, #1
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6859      	ldr	r1, [r3, #4]
 8001506:	460b      	mov	r3, r1
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	440b      	add	r3, r1
 800150c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001510:	3301      	adds	r3, #1
 8001512:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800151a:	e00f      	b.n	800153c <HAL_I2C_Init+0x1dc>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1e58      	subs	r0, r3, #1
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6859      	ldr	r1, [r3, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	0099      	lsls	r1, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001532:	3301      	adds	r3, #1
 8001534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001538:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	6809      	ldr	r1, [r1, #0]
 8001540:	4313      	orrs	r3, r2
 8001542:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69da      	ldr	r2, [r3, #28]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	431a      	orrs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800156a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	6911      	ldr	r1, [r2, #16]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68d2      	ldr	r2, [r2, #12]
 8001576:	4311      	orrs	r1, r2
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	6812      	ldr	r2, [r2, #0]
 800157c:	430b      	orrs	r3, r1
 800157e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	695a      	ldr	r2, [r3, #20]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0201 	orr.w	r2, r2, #1
 80015aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2220      	movs	r2, #32
 80015b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	000186a0 	.word	0x000186a0
 80015d8:	001e847f 	.word	0x001e847f
 80015dc:	003d08ff 	.word	0x003d08ff
 80015e0:	431bde83 	.word	0x431bde83
 80015e4:	10624dd3 	.word	0x10624dd3

080015e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	4608      	mov	r0, r1
 80015f2:	4611      	mov	r1, r2
 80015f4:	461a      	mov	r2, r3
 80015f6:	4603      	mov	r3, r0
 80015f8:	817b      	strh	r3, [r7, #10]
 80015fa:	460b      	mov	r3, r1
 80015fc:	813b      	strh	r3, [r7, #8]
 80015fe:	4613      	mov	r3, r2
 8001600:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001602:	f7ff fbfb 	bl	8000dfc <HAL_GetTick>
 8001606:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b20      	cmp	r3, #32
 8001612:	f040 80d9 	bne.w	80017c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2319      	movs	r3, #25
 800161c:	2201      	movs	r2, #1
 800161e:	496d      	ldr	r1, [pc, #436]	; (80017d4 <HAL_I2C_Mem_Write+0x1ec>)
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f000 fdad 	bl	8002180 <I2C_WaitOnFlagUntilTimeout>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800162c:	2302      	movs	r3, #2
 800162e:	e0cc      	b.n	80017ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001636:	2b01      	cmp	r3, #1
 8001638:	d101      	bne.n	800163e <HAL_I2C_Mem_Write+0x56>
 800163a:	2302      	movs	r3, #2
 800163c:	e0c5      	b.n	80017ca <HAL_I2C_Mem_Write+0x1e2>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b01      	cmp	r3, #1
 8001652:	d007      	beq.n	8001664 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0201 	orr.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001672:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2221      	movs	r2, #33	; 0x21
 8001678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2240      	movs	r2, #64	; 0x40
 8001680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2200      	movs	r2, #0
 8001688:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6a3a      	ldr	r2, [r7, #32]
 800168e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001694:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800169a:	b29a      	uxth	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4a4d      	ldr	r2, [pc, #308]	; (80017d8 <HAL_I2C_Mem_Write+0x1f0>)
 80016a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016a6:	88f8      	ldrh	r0, [r7, #6]
 80016a8:	893a      	ldrh	r2, [r7, #8]
 80016aa:	8979      	ldrh	r1, [r7, #10]
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	9301      	str	r3, [sp, #4]
 80016b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	4603      	mov	r3, r0
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f000 fbe4 	bl	8001e84 <I2C_RequestMemoryWrite>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d052      	beq.n	8001768 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e081      	b.n	80017ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f000 fe2e 	bl	800232c <I2C_WaitOnTXEFlagUntilTimeout>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00d      	beq.n	80016f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d107      	bne.n	80016ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e06b      	b.n	80017ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	781a      	ldrb	r2, [r3, #0]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170c:	3b01      	subs	r3, #1
 800170e:	b29a      	uxth	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001718:	b29b      	uxth	r3, r3
 800171a:	3b01      	subs	r3, #1
 800171c:	b29a      	uxth	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b04      	cmp	r3, #4
 800172e:	d11b      	bne.n	8001768 <HAL_I2C_Mem_Write+0x180>
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001734:	2b00      	cmp	r3, #0
 8001736:	d017      	beq.n	8001768 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	781a      	ldrb	r2, [r3, #0]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	1c5a      	adds	r2, r3, #1
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001752:	3b01      	subs	r3, #1
 8001754:	b29a      	uxth	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800175e:	b29b      	uxth	r3, r3
 8001760:	3b01      	subs	r3, #1
 8001762:	b29a      	uxth	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1aa      	bne.n	80016c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f000 fe1a 	bl	80023ae <I2C_WaitOnBTFFlagUntilTimeout>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00d      	beq.n	800179c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	2b04      	cmp	r3, #4
 8001786:	d107      	bne.n	8001798 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001796:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e016      	b.n	80017ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2220      	movs	r2, #32
 80017b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	e000      	b.n	80017ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80017c8:	2302      	movs	r3, #2
  }
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	00100002 	.word	0x00100002
 80017d8:	ffff0000 	.word	0xffff0000

080017dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08c      	sub	sp, #48	; 0x30
 80017e0:	af02      	add	r7, sp, #8
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	4608      	mov	r0, r1
 80017e6:	4611      	mov	r1, r2
 80017e8:	461a      	mov	r2, r3
 80017ea:	4603      	mov	r3, r0
 80017ec:	817b      	strh	r3, [r7, #10]
 80017ee:	460b      	mov	r3, r1
 80017f0:	813b      	strh	r3, [r7, #8]
 80017f2:	4613      	mov	r3, r2
 80017f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017f6:	f7ff fb01 	bl	8000dfc <HAL_GetTick>
 80017fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b20      	cmp	r3, #32
 8001806:	f040 8208 	bne.w	8001c1a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	2319      	movs	r3, #25
 8001810:	2201      	movs	r2, #1
 8001812:	497b      	ldr	r1, [pc, #492]	; (8001a00 <HAL_I2C_Mem_Read+0x224>)
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f000 fcb3 	bl	8002180 <I2C_WaitOnFlagUntilTimeout>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001820:	2302      	movs	r3, #2
 8001822:	e1fb      	b.n	8001c1c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800182a:	2b01      	cmp	r3, #1
 800182c:	d101      	bne.n	8001832 <HAL_I2C_Mem_Read+0x56>
 800182e:	2302      	movs	r3, #2
 8001830:	e1f4      	b.n	8001c1c <HAL_I2C_Mem_Read+0x440>
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b01      	cmp	r3, #1
 8001846:	d007      	beq.n	8001858 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0201 	orr.w	r2, r2, #1
 8001856:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001866:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2222      	movs	r2, #34	; 0x22
 800186c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2240      	movs	r2, #64	; 0x40
 8001874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2200      	movs	r2, #0
 800187c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001882:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001888:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800188e:	b29a      	uxth	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4a5b      	ldr	r2, [pc, #364]	; (8001a04 <HAL_I2C_Mem_Read+0x228>)
 8001898:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800189a:	88f8      	ldrh	r0, [r7, #6]
 800189c:	893a      	ldrh	r2, [r7, #8]
 800189e:	8979      	ldrh	r1, [r7, #10]
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	9301      	str	r3, [sp, #4]
 80018a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	4603      	mov	r3, r0
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 fb80 	bl	8001fb0 <I2C_RequestMemoryRead>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e1b0      	b.n	8001c1c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d113      	bne.n	80018ea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018c2:	2300      	movs	r3, #0
 80018c4:	623b      	str	r3, [r7, #32]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	623b      	str	r3, [r7, #32]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	623b      	str	r3, [r7, #32]
 80018d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	e184      	b.n	8001bf4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d11b      	bne.n	800192a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001900:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	61fb      	str	r3, [r7, #28]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	61fb      	str	r3, [r7, #28]
 8001916:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	e164      	b.n	8001bf4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800192e:	2b02      	cmp	r3, #2
 8001930:	d11b      	bne.n	800196a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001940:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001950:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001952:	2300      	movs	r3, #0
 8001954:	61bb      	str	r3, [r7, #24]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	61bb      	str	r3, [r7, #24]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	e144      	b.n	8001bf4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001980:	e138      	b.n	8001bf4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001986:	2b03      	cmp	r3, #3
 8001988:	f200 80f1 	bhi.w	8001b6e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001990:	2b01      	cmp	r3, #1
 8001992:	d123      	bne.n	80019dc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001996:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f000 fd49 	bl	8002430 <I2C_WaitOnRXNEFlagUntilTimeout>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e139      	b.n	8001c1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	691a      	ldr	r2, [r3, #16]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c4:	3b01      	subs	r3, #1
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	3b01      	subs	r3, #1
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019da:	e10b      	b.n	8001bf4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d14e      	bne.n	8001a82 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ea:	2200      	movs	r2, #0
 80019ec:	4906      	ldr	r1, [pc, #24]	; (8001a08 <HAL_I2C_Mem_Read+0x22c>)
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 fbc6 	bl	8002180 <I2C_WaitOnFlagUntilTimeout>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d008      	beq.n	8001a0c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e10e      	b.n	8001c1c <HAL_I2C_Mem_Read+0x440>
 80019fe:	bf00      	nop
 8001a00:	00100002 	.word	0x00100002
 8001a04:	ffff0000 	.word	0xffff0000
 8001a08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	691a      	ldr	r2, [r3, #16]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	691a      	ldr	r2, [r3, #16]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	1c5a      	adds	r2, r3, #1
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a80:	e0b8      	b.n	8001bf4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a88:	2200      	movs	r2, #0
 8001a8a:	4966      	ldr	r1, [pc, #408]	; (8001c24 <HAL_I2C_Mem_Read+0x448>)
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f000 fb77 	bl	8002180 <I2C_WaitOnFlagUntilTimeout>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0bf      	b.n	8001c1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691a      	ldr	r2, [r3, #16]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	494f      	ldr	r1, [pc, #316]	; (8001c24 <HAL_I2C_Mem_Read+0x448>)
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 fb49 	bl	8002180 <I2C_WaitOnFlagUntilTimeout>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e091      	b.n	8001c1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	691a      	ldr	r2, [r3, #16]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b24:	3b01      	subs	r3, #1
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	3b01      	subs	r3, #1
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b56:	3b01      	subs	r3, #1
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b6c:	e042      	b.n	8001bf4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 fc5c 	bl	8002430 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e04c      	b.n	8001c1c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	3b01      	subs	r3, #1
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d118      	bne.n	8001bf4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	691a      	ldr	r2, [r3, #16]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bde:	3b01      	subs	r3, #1
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	3b01      	subs	r3, #1
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f47f aec2 	bne.w	8001982 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2220      	movs	r2, #32
 8001c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e000      	b.n	8001c1c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001c1a:	2302      	movs	r3, #2
  }
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3728      	adds	r7, #40	; 0x28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	00010004 	.word	0x00010004

08001c28 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af02      	add	r7, sp, #8
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	460b      	mov	r3, r1
 8001c36:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001c38:	f7ff f8e0 	bl	8000dfc <HAL_GetTick>
 8001c3c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b20      	cmp	r3, #32
 8001c4c:	f040 8111 	bne.w	8001e72 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	2319      	movs	r3, #25
 8001c56:	2201      	movs	r2, #1
 8001c58:	4988      	ldr	r1, [pc, #544]	; (8001e7c <HAL_I2C_IsDeviceReady+0x254>)
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 fa90 	bl	8002180 <I2C_WaitOnFlagUntilTimeout>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001c66:	2302      	movs	r3, #2
 8001c68:	e104      	b.n	8001e74 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_I2C_IsDeviceReady+0x50>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e0fd      	b.n	8001e74 <HAL_I2C_IsDeviceReady+0x24c>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d007      	beq.n	8001c9e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 0201 	orr.w	r2, r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2224      	movs	r2, #36	; 0x24
 8001cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4a70      	ldr	r2, [pc, #448]	; (8001e80 <HAL_I2C_IsDeviceReady+0x258>)
 8001cc0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cd0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 fa4e 	bl	8002180 <I2C_WaitOnFlagUntilTimeout>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00d      	beq.n	8001d06 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cf8:	d103      	bne.n	8001d02 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d00:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e0b6      	b.n	8001e74 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d06:	897b      	ldrh	r3, [r7, #10]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d14:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001d16:	f7ff f871 	bl	8000dfc <HAL_GetTick>
 8001d1a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	bf0c      	ite	eq
 8001d2a:	2301      	moveq	r3, #1
 8001d2c:	2300      	movne	r3, #0
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d40:	bf0c      	ite	eq
 8001d42:	2301      	moveq	r3, #1
 8001d44:	2300      	movne	r3, #0
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d4a:	e025      	b.n	8001d98 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d4c:	f7ff f856 	bl	8000dfc <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d302      	bcc.n	8001d62 <HAL_I2C_IsDeviceReady+0x13a>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d103      	bne.n	8001d6a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	22a0      	movs	r2, #160	; 0xa0
 8001d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	bf0c      	ite	eq
 8001d78:	2301      	moveq	r3, #1
 8001d7a:	2300      	movne	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d8e:	bf0c      	ite	eq
 8001d90:	2301      	moveq	r3, #1
 8001d92:	2300      	movne	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2ba0      	cmp	r3, #160	; 0xa0
 8001da2:	d005      	beq.n	8001db0 <HAL_I2C_IsDeviceReady+0x188>
 8001da4:	7dfb      	ldrb	r3, [r7, #23]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d102      	bne.n	8001db0 <HAL_I2C_IsDeviceReady+0x188>
 8001daa:	7dbb      	ldrb	r3, [r7, #22]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0cd      	beq.n	8001d4c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2220      	movs	r2, #32
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d129      	bne.n	8001e1a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dd4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	2319      	movs	r3, #25
 8001df2:	2201      	movs	r2, #1
 8001df4:	4921      	ldr	r1, [pc, #132]	; (8001e7c <HAL_I2C_IsDeviceReady+0x254>)
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f000 f9c2 	bl	8002180 <I2C_WaitOnFlagUntilTimeout>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e036      	b.n	8001e74 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2220      	movs	r2, #32
 8001e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	e02c      	b.n	8001e74 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e28:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e32:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2319      	movs	r3, #25
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	490f      	ldr	r1, [pc, #60]	; (8001e7c <HAL_I2C_IsDeviceReady+0x254>)
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 f99e 	bl	8002180 <I2C_WaitOnFlagUntilTimeout>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e012      	b.n	8001e74 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	3301      	adds	r3, #1
 8001e52:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	f4ff af32 	bcc.w	8001cc2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2220      	movs	r2, #32
 8001e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001e72:	2302      	movs	r3, #2
  }
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3720      	adds	r7, #32
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	00100002 	.word	0x00100002
 8001e80:	ffff0000 	.word	0xffff0000

08001e84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af02      	add	r7, sp, #8
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	4608      	mov	r0, r1
 8001e8e:	4611      	mov	r1, r2
 8001e90:	461a      	mov	r2, r3
 8001e92:	4603      	mov	r3, r0
 8001e94:	817b      	strh	r3, [r7, #10]
 8001e96:	460b      	mov	r3, r1
 8001e98:	813b      	strh	r3, [r7, #8]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 f960 	bl	8002180 <I2C_WaitOnFlagUntilTimeout>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00d      	beq.n	8001ee2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ed4:	d103      	bne.n	8001ede <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e05f      	b.n	8001fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ee2:	897b      	ldrh	r3, [r7, #10]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ef0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	6a3a      	ldr	r2, [r7, #32]
 8001ef6:	492d      	ldr	r1, [pc, #180]	; (8001fac <I2C_RequestMemoryWrite+0x128>)
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f000 f998 	bl	800222e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e04c      	b.n	8001fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f20:	6a39      	ldr	r1, [r7, #32]
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 fa02 	bl	800232c <I2C_WaitOnTXEFlagUntilTimeout>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00d      	beq.n	8001f4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d107      	bne.n	8001f46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e02b      	b.n	8001fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d105      	bne.n	8001f5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f50:	893b      	ldrh	r3, [r7, #8]
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	611a      	str	r2, [r3, #16]
 8001f5a:	e021      	b.n	8001fa0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f5c:	893b      	ldrh	r3, [r7, #8]
 8001f5e:	0a1b      	lsrs	r3, r3, #8
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6c:	6a39      	ldr	r1, [r7, #32]
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 f9dc 	bl	800232c <I2C_WaitOnTXEFlagUntilTimeout>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00d      	beq.n	8001f96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d107      	bne.n	8001f92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e005      	b.n	8001fa2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f96:	893b      	ldrh	r3, [r7, #8]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	00010002 	.word	0x00010002

08001fb0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b088      	sub	sp, #32
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	4608      	mov	r0, r1
 8001fba:	4611      	mov	r1, r2
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	817b      	strh	r3, [r7, #10]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	813b      	strh	r3, [r7, #8]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fd8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fe8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	6a3b      	ldr	r3, [r7, #32]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 f8c2 	bl	8002180 <I2C_WaitOnFlagUntilTimeout>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00d      	beq.n	800201e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002010:	d103      	bne.n	800201a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002018:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e0aa      	b.n	8002174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800201e:	897b      	ldrh	r3, [r7, #10]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800202c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	6a3a      	ldr	r2, [r7, #32]
 8002032:	4952      	ldr	r1, [pc, #328]	; (800217c <I2C_RequestMemoryRead+0x1cc>)
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 f8fa 	bl	800222e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e097      	b.n	8002174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800205a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205c:	6a39      	ldr	r1, [r7, #32]
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 f964 	bl	800232c <I2C_WaitOnTXEFlagUntilTimeout>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00d      	beq.n	8002086 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	2b04      	cmp	r3, #4
 8002070:	d107      	bne.n	8002082 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002080:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e076      	b.n	8002174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002086:	88fb      	ldrh	r3, [r7, #6]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d105      	bne.n	8002098 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800208c:	893b      	ldrh	r3, [r7, #8]
 800208e:	b2da      	uxtb	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	611a      	str	r2, [r3, #16]
 8002096:	e021      	b.n	80020dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002098:	893b      	ldrh	r3, [r7, #8]
 800209a:	0a1b      	lsrs	r3, r3, #8
 800209c:	b29b      	uxth	r3, r3
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a8:	6a39      	ldr	r1, [r7, #32]
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 f93e 	bl	800232c <I2C_WaitOnTXEFlagUntilTimeout>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00d      	beq.n	80020d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d107      	bne.n	80020ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e050      	b.n	8002174 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020d2:	893b      	ldrh	r3, [r7, #8]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020de:	6a39      	ldr	r1, [r7, #32]
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 f923 	bl	800232c <I2C_WaitOnTXEFlagUntilTimeout>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00d      	beq.n	8002108 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d107      	bne.n	8002104 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002102:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e035      	b.n	8002174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002116:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	2200      	movs	r2, #0
 8002120:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 f82b 	bl	8002180 <I2C_WaitOnFlagUntilTimeout>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00d      	beq.n	800214c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800213e:	d103      	bne.n	8002148 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002146:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e013      	b.n	8002174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800214c:	897b      	ldrh	r3, [r7, #10]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	b2da      	uxtb	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	6a3a      	ldr	r2, [r7, #32]
 8002160:	4906      	ldr	r1, [pc, #24]	; (800217c <I2C_RequestMemoryRead+0x1cc>)
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 f863 	bl	800222e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	00010002 	.word	0x00010002

08002180 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	4613      	mov	r3, r2
 800218e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002190:	e025      	b.n	80021de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002198:	d021      	beq.n	80021de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800219a:	f7fe fe2f 	bl	8000dfc <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d302      	bcc.n	80021b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d116      	bne.n	80021de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2220      	movs	r2, #32
 80021ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f043 0220 	orr.w	r2, r3, #32
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e023      	b.n	8002226 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	0c1b      	lsrs	r3, r3, #16
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d10d      	bne.n	8002204 <I2C_WaitOnFlagUntilTimeout+0x84>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	4013      	ands	r3, r2
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	bf0c      	ite	eq
 80021fa:	2301      	moveq	r3, #1
 80021fc:	2300      	movne	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	e00c      	b.n	800221e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	43da      	mvns	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	4013      	ands	r3, r2
 8002210:	b29b      	uxth	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	bf0c      	ite	eq
 8002216:	2301      	moveq	r3, #1
 8002218:	2300      	movne	r3, #0
 800221a:	b2db      	uxtb	r3, r3
 800221c:	461a      	mov	r2, r3
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	429a      	cmp	r2, r3
 8002222:	d0b6      	beq.n	8002192 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
 800223a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800223c:	e051      	b.n	80022e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800224c:	d123      	bne.n	8002296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800225c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002266:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2220      	movs	r2, #32
 8002272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f043 0204 	orr.w	r2, r3, #4
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e046      	b.n	8002324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229c:	d021      	beq.n	80022e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800229e:	f7fe fdad 	bl	8000dfc <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d302      	bcc.n	80022b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d116      	bne.n	80022e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2220      	movs	r2, #32
 80022be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f043 0220 	orr.w	r2, r3, #32
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e020      	b.n	8002324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	0c1b      	lsrs	r3, r3, #16
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d10c      	bne.n	8002306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	43da      	mvns	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	4013      	ands	r3, r2
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	bf14      	ite	ne
 80022fe:	2301      	movne	r3, #1
 8002300:	2300      	moveq	r3, #0
 8002302:	b2db      	uxtb	r3, r3
 8002304:	e00b      	b.n	800231e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	43da      	mvns	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	4013      	ands	r3, r2
 8002312:	b29b      	uxth	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	bf14      	ite	ne
 8002318:	2301      	movne	r3, #1
 800231a:	2300      	moveq	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d18d      	bne.n	800223e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002338:	e02d      	b.n	8002396 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 f8ce 	bl	80024dc <I2C_IsAcknowledgeFailed>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e02d      	b.n	80023a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002350:	d021      	beq.n	8002396 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002352:	f7fe fd53 	bl	8000dfc <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	429a      	cmp	r2, r3
 8002360:	d302      	bcc.n	8002368 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d116      	bne.n	8002396 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2220      	movs	r2, #32
 8002372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f043 0220 	orr.w	r2, r3, #32
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e007      	b.n	80023a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a0:	2b80      	cmp	r3, #128	; 0x80
 80023a2:	d1ca      	bne.n	800233a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b084      	sub	sp, #16
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	60f8      	str	r0, [r7, #12]
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023ba:	e02d      	b.n	8002418 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 f88d 	bl	80024dc <I2C_IsAcknowledgeFailed>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e02d      	b.n	8002428 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d2:	d021      	beq.n	8002418 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d4:	f7fe fd12 	bl	8000dfc <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d302      	bcc.n	80023ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d116      	bne.n	8002418 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	f043 0220 	orr.w	r2, r3, #32
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e007      	b.n	8002428 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b04      	cmp	r3, #4
 8002424:	d1ca      	bne.n	80023bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800243c:	e042      	b.n	80024c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	2b10      	cmp	r3, #16
 800244a:	d119      	bne.n	8002480 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 0210 	mvn.w	r2, #16
 8002454:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2220      	movs	r2, #32
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e029      	b.n	80024d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002480:	f7fe fcbc 	bl	8000dfc <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	429a      	cmp	r2, r3
 800248e:	d302      	bcc.n	8002496 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d116      	bne.n	80024c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	f043 0220 	orr.w	r2, r3, #32
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e007      	b.n	80024d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ce:	2b40      	cmp	r3, #64	; 0x40
 80024d0:	d1b5      	bne.n	800243e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f2:	d11b      	bne.n	800252c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	f043 0204 	orr.w	r2, r3, #4
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
	...

0800253c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e267      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d075      	beq.n	8002646 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800255a:	4b88      	ldr	r3, [pc, #544]	; (800277c <HAL_RCC_OscConfig+0x240>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b04      	cmp	r3, #4
 8002564:	d00c      	beq.n	8002580 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002566:	4b85      	ldr	r3, [pc, #532]	; (800277c <HAL_RCC_OscConfig+0x240>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800256e:	2b08      	cmp	r3, #8
 8002570:	d112      	bne.n	8002598 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002572:	4b82      	ldr	r3, [pc, #520]	; (800277c <HAL_RCC_OscConfig+0x240>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800257e:	d10b      	bne.n	8002598 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002580:	4b7e      	ldr	r3, [pc, #504]	; (800277c <HAL_RCC_OscConfig+0x240>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d05b      	beq.n	8002644 <HAL_RCC_OscConfig+0x108>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d157      	bne.n	8002644 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e242      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a0:	d106      	bne.n	80025b0 <HAL_RCC_OscConfig+0x74>
 80025a2:	4b76      	ldr	r3, [pc, #472]	; (800277c <HAL_RCC_OscConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a75      	ldr	r2, [pc, #468]	; (800277c <HAL_RCC_OscConfig+0x240>)
 80025a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e01d      	b.n	80025ec <HAL_RCC_OscConfig+0xb0>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0x98>
 80025ba:	4b70      	ldr	r3, [pc, #448]	; (800277c <HAL_RCC_OscConfig+0x240>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a6f      	ldr	r2, [pc, #444]	; (800277c <HAL_RCC_OscConfig+0x240>)
 80025c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	4b6d      	ldr	r3, [pc, #436]	; (800277c <HAL_RCC_OscConfig+0x240>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a6c      	ldr	r2, [pc, #432]	; (800277c <HAL_RCC_OscConfig+0x240>)
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e00b      	b.n	80025ec <HAL_RCC_OscConfig+0xb0>
 80025d4:	4b69      	ldr	r3, [pc, #420]	; (800277c <HAL_RCC_OscConfig+0x240>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a68      	ldr	r2, [pc, #416]	; (800277c <HAL_RCC_OscConfig+0x240>)
 80025da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	4b66      	ldr	r3, [pc, #408]	; (800277c <HAL_RCC_OscConfig+0x240>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a65      	ldr	r2, [pc, #404]	; (800277c <HAL_RCC_OscConfig+0x240>)
 80025e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d013      	beq.n	800261c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f4:	f7fe fc02 	bl	8000dfc <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025fc:	f7fe fbfe 	bl	8000dfc <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b64      	cmp	r3, #100	; 0x64
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e207      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260e:	4b5b      	ldr	r3, [pc, #364]	; (800277c <HAL_RCC_OscConfig+0x240>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0xc0>
 800261a:	e014      	b.n	8002646 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7fe fbee 	bl	8000dfc <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002624:	f7fe fbea 	bl	8000dfc <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b64      	cmp	r3, #100	; 0x64
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e1f3      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002636:	4b51      	ldr	r3, [pc, #324]	; (800277c <HAL_RCC_OscConfig+0x240>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0xe8>
 8002642:	e000      	b.n	8002646 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d063      	beq.n	800271a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002652:	4b4a      	ldr	r3, [pc, #296]	; (800277c <HAL_RCC_OscConfig+0x240>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00b      	beq.n	8002676 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800265e:	4b47      	ldr	r3, [pc, #284]	; (800277c <HAL_RCC_OscConfig+0x240>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002666:	2b08      	cmp	r3, #8
 8002668:	d11c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800266a:	4b44      	ldr	r3, [pc, #272]	; (800277c <HAL_RCC_OscConfig+0x240>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d116      	bne.n	80026a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002676:	4b41      	ldr	r3, [pc, #260]	; (800277c <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d005      	beq.n	800268e <HAL_RCC_OscConfig+0x152>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d001      	beq.n	800268e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e1c7      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268e:	4b3b      	ldr	r3, [pc, #236]	; (800277c <HAL_RCC_OscConfig+0x240>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	4937      	ldr	r1, [pc, #220]	; (800277c <HAL_RCC_OscConfig+0x240>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a2:	e03a      	b.n	800271a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d020      	beq.n	80026ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ac:	4b34      	ldr	r3, [pc, #208]	; (8002780 <HAL_RCC_OscConfig+0x244>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b2:	f7fe fba3 	bl	8000dfc <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ba:	f7fe fb9f 	bl	8000dfc <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e1a8      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026cc:	4b2b      	ldr	r3, [pc, #172]	; (800277c <HAL_RCC_OscConfig+0x240>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d8:	4b28      	ldr	r3, [pc, #160]	; (800277c <HAL_RCC_OscConfig+0x240>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4925      	ldr	r1, [pc, #148]	; (800277c <HAL_RCC_OscConfig+0x240>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	600b      	str	r3, [r1, #0]
 80026ec:	e015      	b.n	800271a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ee:	4b24      	ldr	r3, [pc, #144]	; (8002780 <HAL_RCC_OscConfig+0x244>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7fe fb82 	bl	8000dfc <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026fc:	f7fe fb7e 	bl	8000dfc <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e187      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270e:	4b1b      	ldr	r3, [pc, #108]	; (800277c <HAL_RCC_OscConfig+0x240>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d036      	beq.n	8002794 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d016      	beq.n	800275c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800272e:	4b15      	ldr	r3, [pc, #84]	; (8002784 <HAL_RCC_OscConfig+0x248>)
 8002730:	2201      	movs	r2, #1
 8002732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002734:	f7fe fb62 	bl	8000dfc <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800273c:	f7fe fb5e 	bl	8000dfc <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e167      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274e:	4b0b      	ldr	r3, [pc, #44]	; (800277c <HAL_RCC_OscConfig+0x240>)
 8002750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x200>
 800275a:	e01b      	b.n	8002794 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800275c:	4b09      	ldr	r3, [pc, #36]	; (8002784 <HAL_RCC_OscConfig+0x248>)
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002762:	f7fe fb4b 	bl	8000dfc <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002768:	e00e      	b.n	8002788 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800276a:	f7fe fb47 	bl	8000dfc <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d907      	bls.n	8002788 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e150      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
 800277c:	40023800 	.word	0x40023800
 8002780:	42470000 	.word	0x42470000
 8002784:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002788:	4b88      	ldr	r3, [pc, #544]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 800278a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1ea      	bne.n	800276a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 8097 	beq.w	80028d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027a2:	2300      	movs	r3, #0
 80027a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027a6:	4b81      	ldr	r3, [pc, #516]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10f      	bne.n	80027d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	4b7d      	ldr	r3, [pc, #500]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	4a7c      	ldr	r2, [pc, #496]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 80027bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c0:	6413      	str	r3, [r2, #64]	; 0x40
 80027c2:	4b7a      	ldr	r3, [pc, #488]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ce:	2301      	movs	r3, #1
 80027d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d2:	4b77      	ldr	r3, [pc, #476]	; (80029b0 <HAL_RCC_OscConfig+0x474>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d118      	bne.n	8002810 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027de:	4b74      	ldr	r3, [pc, #464]	; (80029b0 <HAL_RCC_OscConfig+0x474>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a73      	ldr	r2, [pc, #460]	; (80029b0 <HAL_RCC_OscConfig+0x474>)
 80027e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ea:	f7fe fb07 	bl	8000dfc <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f2:	f7fe fb03 	bl	8000dfc <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e10c      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002804:	4b6a      	ldr	r3, [pc, #424]	; (80029b0 <HAL_RCC_OscConfig+0x474>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0f0      	beq.n	80027f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d106      	bne.n	8002826 <HAL_RCC_OscConfig+0x2ea>
 8002818:	4b64      	ldr	r3, [pc, #400]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	4a63      	ldr	r2, [pc, #396]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	6713      	str	r3, [r2, #112]	; 0x70
 8002824:	e01c      	b.n	8002860 <HAL_RCC_OscConfig+0x324>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b05      	cmp	r3, #5
 800282c:	d10c      	bne.n	8002848 <HAL_RCC_OscConfig+0x30c>
 800282e:	4b5f      	ldr	r3, [pc, #380]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 8002830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002832:	4a5e      	ldr	r2, [pc, #376]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 8002834:	f043 0304 	orr.w	r3, r3, #4
 8002838:	6713      	str	r3, [r2, #112]	; 0x70
 800283a:	4b5c      	ldr	r3, [pc, #368]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 800283c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283e:	4a5b      	ldr	r2, [pc, #364]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6713      	str	r3, [r2, #112]	; 0x70
 8002846:	e00b      	b.n	8002860 <HAL_RCC_OscConfig+0x324>
 8002848:	4b58      	ldr	r3, [pc, #352]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284c:	4a57      	ldr	r2, [pc, #348]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 800284e:	f023 0301 	bic.w	r3, r3, #1
 8002852:	6713      	str	r3, [r2, #112]	; 0x70
 8002854:	4b55      	ldr	r3, [pc, #340]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 8002856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002858:	4a54      	ldr	r2, [pc, #336]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 800285a:	f023 0304 	bic.w	r3, r3, #4
 800285e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d015      	beq.n	8002894 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002868:	f7fe fac8 	bl	8000dfc <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286e:	e00a      	b.n	8002886 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002870:	f7fe fac4 	bl	8000dfc <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f241 3288 	movw	r2, #5000	; 0x1388
 800287e:	4293      	cmp	r3, r2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e0cb      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002886:	4b49      	ldr	r3, [pc, #292]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0ee      	beq.n	8002870 <HAL_RCC_OscConfig+0x334>
 8002892:	e014      	b.n	80028be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002894:	f7fe fab2 	bl	8000dfc <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289a:	e00a      	b.n	80028b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800289c:	f7fe faae 	bl	8000dfc <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e0b5      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b2:	4b3e      	ldr	r3, [pc, #248]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 80028b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1ee      	bne.n	800289c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028be:	7dfb      	ldrb	r3, [r7, #23]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d105      	bne.n	80028d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c4:	4b39      	ldr	r3, [pc, #228]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	4a38      	ldr	r2, [pc, #224]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 80028ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80a1 	beq.w	8002a1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028da:	4b34      	ldr	r3, [pc, #208]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d05c      	beq.n	80029a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d141      	bne.n	8002972 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ee:	4b31      	ldr	r3, [pc, #196]	; (80029b4 <HAL_RCC_OscConfig+0x478>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe fa82 	bl	8000dfc <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fc:	f7fe fa7e 	bl	8000dfc <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e087      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290e:	4b27      	ldr	r3, [pc, #156]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69da      	ldr	r2, [r3, #28]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	019b      	lsls	r3, r3, #6
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002930:	085b      	lsrs	r3, r3, #1
 8002932:	3b01      	subs	r3, #1
 8002934:	041b      	lsls	r3, r3, #16
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	061b      	lsls	r3, r3, #24
 800293e:	491b      	ldr	r1, [pc, #108]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002944:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <HAL_RCC_OscConfig+0x478>)
 8002946:	2201      	movs	r2, #1
 8002948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294a:	f7fe fa57 	bl	8000dfc <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002952:	f7fe fa53 	bl	8000dfc <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e05c      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002964:	4b11      	ldr	r3, [pc, #68]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x416>
 8002970:	e054      	b.n	8002a1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002972:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <HAL_RCC_OscConfig+0x478>)
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7fe fa40 	bl	8000dfc <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002980:	f7fe fa3c 	bl	8000dfc <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e045      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_RCC_OscConfig+0x470>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x444>
 800299e:	e03d      	b.n	8002a1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d107      	bne.n	80029b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e038      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40007000 	.word	0x40007000
 80029b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029b8:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <HAL_RCC_OscConfig+0x4ec>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d028      	beq.n	8002a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d121      	bne.n	8002a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029de:	429a      	cmp	r2, r3
 80029e0:	d11a      	bne.n	8002a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029e8:	4013      	ands	r3, r2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d111      	bne.n	8002a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fe:	085b      	lsrs	r3, r3, #1
 8002a00:	3b01      	subs	r3, #1
 8002a02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d107      	bne.n	8002a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e000      	b.n	8002a1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800

08002a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0cc      	b.n	8002bda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a40:	4b68      	ldr	r3, [pc, #416]	; (8002be4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d90c      	bls.n	8002a68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4e:	4b65      	ldr	r3, [pc, #404]	; (8002be4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a56:	4b63      	ldr	r3, [pc, #396]	; (8002be4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d001      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0b8      	b.n	8002bda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d020      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a80:	4b59      	ldr	r3, [pc, #356]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	4a58      	ldr	r2, [pc, #352]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0308 	and.w	r3, r3, #8
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a98:	4b53      	ldr	r3, [pc, #332]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	4a52      	ldr	r2, [pc, #328]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa4:	4b50      	ldr	r3, [pc, #320]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	494d      	ldr	r1, [pc, #308]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d044      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d107      	bne.n	8002ada <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aca:	4b47      	ldr	r3, [pc, #284]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d119      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e07f      	b.n	8002bda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d003      	beq.n	8002aea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d107      	bne.n	8002afa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aea:	4b3f      	ldr	r3, [pc, #252]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e06f      	b.n	8002bda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afa:	4b3b      	ldr	r3, [pc, #236]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e067      	b.n	8002bda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b0a:	4b37      	ldr	r3, [pc, #220]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f023 0203 	bic.w	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	4934      	ldr	r1, [pc, #208]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b1c:	f7fe f96e 	bl	8000dfc <HAL_GetTick>
 8002b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b22:	e00a      	b.n	8002b3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b24:	f7fe f96a 	bl	8000dfc <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e04f      	b.n	8002bda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3a:	4b2b      	ldr	r3, [pc, #172]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 020c 	and.w	r2, r3, #12
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d1eb      	bne.n	8002b24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b4c:	4b25      	ldr	r3, [pc, #148]	; (8002be4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d20c      	bcs.n	8002b74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5a:	4b22      	ldr	r3, [pc, #136]	; (8002be4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b62:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d001      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e032      	b.n	8002bda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b80:	4b19      	ldr	r3, [pc, #100]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	4916      	ldr	r1, [pc, #88]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b9e:	4b12      	ldr	r3, [pc, #72]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	490e      	ldr	r1, [pc, #56]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bb2:	f000 f821 	bl	8002bf8 <HAL_RCC_GetSysClockFreq>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	490a      	ldr	r1, [pc, #40]	; (8002bec <HAL_RCC_ClockConfig+0x1c0>)
 8002bc4:	5ccb      	ldrb	r3, [r1, r3]
 8002bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bca:	4a09      	ldr	r2, [pc, #36]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bce:	4b09      	ldr	r3, [pc, #36]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fe f8ce 	bl	8000d74 <HAL_InitTick>

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40023c00 	.word	0x40023c00
 8002be8:	40023800 	.word	0x40023800
 8002bec:	08002ef8 	.word	0x08002ef8
 8002bf0:	20000000 	.word	0x20000000
 8002bf4:	20000004 	.word	0x20000004

08002bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bfc:	b094      	sub	sp, #80	; 0x50
 8002bfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	647b      	str	r3, [r7, #68]	; 0x44
 8002c04:	2300      	movs	r3, #0
 8002c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c08:	2300      	movs	r3, #0
 8002c0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c10:	4b79      	ldr	r3, [pc, #484]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 030c 	and.w	r3, r3, #12
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d00d      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0x40>
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	f200 80e1 	bhi.w	8002de4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x34>
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d003      	beq.n	8002c32 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c2a:	e0db      	b.n	8002de4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c2c:	4b73      	ldr	r3, [pc, #460]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x204>)
 8002c2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c30:	e0db      	b.n	8002dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c32:	4b73      	ldr	r3, [pc, #460]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c36:	e0d8      	b.n	8002dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c38:	4b6f      	ldr	r3, [pc, #444]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c42:	4b6d      	ldr	r3, [pc, #436]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d063      	beq.n	8002d16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c4e:	4b6a      	ldr	r3, [pc, #424]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	099b      	lsrs	r3, r3, #6
 8002c54:	2200      	movs	r2, #0
 8002c56:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c60:	633b      	str	r3, [r7, #48]	; 0x30
 8002c62:	2300      	movs	r3, #0
 8002c64:	637b      	str	r3, [r7, #52]	; 0x34
 8002c66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c6a:	4622      	mov	r2, r4
 8002c6c:	462b      	mov	r3, r5
 8002c6e:	f04f 0000 	mov.w	r0, #0
 8002c72:	f04f 0100 	mov.w	r1, #0
 8002c76:	0159      	lsls	r1, r3, #5
 8002c78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c7c:	0150      	lsls	r0, r2, #5
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4621      	mov	r1, r4
 8002c84:	1a51      	subs	r1, r2, r1
 8002c86:	6139      	str	r1, [r7, #16]
 8002c88:	4629      	mov	r1, r5
 8002c8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c9c:	4659      	mov	r1, fp
 8002c9e:	018b      	lsls	r3, r1, #6
 8002ca0:	4651      	mov	r1, sl
 8002ca2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ca6:	4651      	mov	r1, sl
 8002ca8:	018a      	lsls	r2, r1, #6
 8002caa:	4651      	mov	r1, sl
 8002cac:	ebb2 0801 	subs.w	r8, r2, r1
 8002cb0:	4659      	mov	r1, fp
 8002cb2:	eb63 0901 	sbc.w	r9, r3, r1
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cca:	4690      	mov	r8, r2
 8002ccc:	4699      	mov	r9, r3
 8002cce:	4623      	mov	r3, r4
 8002cd0:	eb18 0303 	adds.w	r3, r8, r3
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	462b      	mov	r3, r5
 8002cd8:	eb49 0303 	adc.w	r3, r9, r3
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cea:	4629      	mov	r1, r5
 8002cec:	024b      	lsls	r3, r1, #9
 8002cee:	4621      	mov	r1, r4
 8002cf0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cf4:	4621      	mov	r1, r4
 8002cf6:	024a      	lsls	r2, r1, #9
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cfe:	2200      	movs	r2, #0
 8002d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d08:	f7fd faae 	bl	8000268 <__aeabi_uldivmod>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4613      	mov	r3, r2
 8002d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d14:	e058      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d16:	4b38      	ldr	r3, [pc, #224]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	099b      	lsrs	r3, r3, #6
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	4618      	mov	r0, r3
 8002d20:	4611      	mov	r1, r2
 8002d22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d26:	623b      	str	r3, [r7, #32]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d30:	4642      	mov	r2, r8
 8002d32:	464b      	mov	r3, r9
 8002d34:	f04f 0000 	mov.w	r0, #0
 8002d38:	f04f 0100 	mov.w	r1, #0
 8002d3c:	0159      	lsls	r1, r3, #5
 8002d3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d42:	0150      	lsls	r0, r2, #5
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4641      	mov	r1, r8
 8002d4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d4e:	4649      	mov	r1, r9
 8002d50:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d68:	ebb2 040a 	subs.w	r4, r2, sl
 8002d6c:	eb63 050b 	sbc.w	r5, r3, fp
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	00eb      	lsls	r3, r5, #3
 8002d7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d7e:	00e2      	lsls	r2, r4, #3
 8002d80:	4614      	mov	r4, r2
 8002d82:	461d      	mov	r5, r3
 8002d84:	4643      	mov	r3, r8
 8002d86:	18e3      	adds	r3, r4, r3
 8002d88:	603b      	str	r3, [r7, #0]
 8002d8a:	464b      	mov	r3, r9
 8002d8c:	eb45 0303 	adc.w	r3, r5, r3
 8002d90:	607b      	str	r3, [r7, #4]
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d9e:	4629      	mov	r1, r5
 8002da0:	028b      	lsls	r3, r1, #10
 8002da2:	4621      	mov	r1, r4
 8002da4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002da8:	4621      	mov	r1, r4
 8002daa:	028a      	lsls	r2, r1, #10
 8002dac:	4610      	mov	r0, r2
 8002dae:	4619      	mov	r1, r3
 8002db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002db2:	2200      	movs	r2, #0
 8002db4:	61bb      	str	r3, [r7, #24]
 8002db6:	61fa      	str	r2, [r7, #28]
 8002db8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dbc:	f7fd fa54 	bl	8000268 <__aeabi_uldivmod>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	0c1b      	lsrs	r3, r3, #16
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002dd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002de2:	e002      	b.n	8002dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x204>)
 8002de6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3750      	adds	r7, #80	; 0x50
 8002df0:	46bd      	mov	sp, r7
 8002df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002df6:	bf00      	nop
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	00f42400 	.word	0x00f42400
 8002e00:	007a1200 	.word	0x007a1200

08002e04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	20000000 	.word	0x20000000

08002e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e20:	f7ff fff0 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002e24:	4602      	mov	r2, r0
 8002e26:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	0a9b      	lsrs	r3, r3, #10
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	4903      	ldr	r1, [pc, #12]	; (8002e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e32:	5ccb      	ldrb	r3, [r1, r3]
 8002e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	08002f08 	.word	0x08002f08

08002e44 <memset>:
 8002e44:	4402      	add	r2, r0
 8002e46:	4603      	mov	r3, r0
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d100      	bne.n	8002e4e <memset+0xa>
 8002e4c:	4770      	bx	lr
 8002e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e52:	e7f9      	b.n	8002e48 <memset+0x4>

08002e54 <__libc_init_array>:
 8002e54:	b570      	push	{r4, r5, r6, lr}
 8002e56:	4d0d      	ldr	r5, [pc, #52]	; (8002e8c <__libc_init_array+0x38>)
 8002e58:	4c0d      	ldr	r4, [pc, #52]	; (8002e90 <__libc_init_array+0x3c>)
 8002e5a:	1b64      	subs	r4, r4, r5
 8002e5c:	10a4      	asrs	r4, r4, #2
 8002e5e:	2600      	movs	r6, #0
 8002e60:	42a6      	cmp	r6, r4
 8002e62:	d109      	bne.n	8002e78 <__libc_init_array+0x24>
 8002e64:	4d0b      	ldr	r5, [pc, #44]	; (8002e94 <__libc_init_array+0x40>)
 8002e66:	4c0c      	ldr	r4, [pc, #48]	; (8002e98 <__libc_init_array+0x44>)
 8002e68:	f000 f818 	bl	8002e9c <_init>
 8002e6c:	1b64      	subs	r4, r4, r5
 8002e6e:	10a4      	asrs	r4, r4, #2
 8002e70:	2600      	movs	r6, #0
 8002e72:	42a6      	cmp	r6, r4
 8002e74:	d105      	bne.n	8002e82 <__libc_init_array+0x2e>
 8002e76:	bd70      	pop	{r4, r5, r6, pc}
 8002e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e7c:	4798      	blx	r3
 8002e7e:	3601      	adds	r6, #1
 8002e80:	e7ee      	b.n	8002e60 <__libc_init_array+0xc>
 8002e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e86:	4798      	blx	r3
 8002e88:	3601      	adds	r6, #1
 8002e8a:	e7f2      	b.n	8002e72 <__libc_init_array+0x1e>
 8002e8c:	08002f18 	.word	0x08002f18
 8002e90:	08002f18 	.word	0x08002f18
 8002e94:	08002f18 	.word	0x08002f18
 8002e98:	08002f1c 	.word	0x08002f1c

08002e9c <_init>:
 8002e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9e:	bf00      	nop
 8002ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ea2:	bc08      	pop	{r3}
 8002ea4:	469e      	mov	lr, r3
 8002ea6:	4770      	bx	lr

08002ea8 <_fini>:
 8002ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eaa:	bf00      	nop
 8002eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eae:	bc08      	pop	{r3}
 8002eb0:	469e      	mov	lr, r3
 8002eb2:	4770      	bx	lr
