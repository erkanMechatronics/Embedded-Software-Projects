
FREERTOS_SEMA_LEC_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004670  08004670  00005670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046d8  080046d8  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  080046d8  080046d8  000056d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046e0  080046e0  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046e0  080046e0  000056e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046e4  080046e4  000056e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080046e8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006060  2**0
                  CONTENTS
 10 .bss          000041ac  20000060  20000060  00006060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000420c  2000420c  00006060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 13 .debug_info   000110cf  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a56  00000000  00000000  0001715f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f58  00000000  00000000  00019bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bc9  00000000  00000000  0001ab10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022107  00000000  00000000  0001b6d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011264  00000000  00000000  0003d7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d13c3  00000000  00000000  0004ea44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011fe07  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004240  00000000  00000000  0011fe4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  0012408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004658 	.word	0x08004658

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004658 	.word	0x08004658

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <vApplicationGetIdleTaskMemory+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <vApplicationGetIdleTaskMemory+0x30>)
 80004d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2000007c 	.word	0x2000007c
 80004f0:	2000011c 	.word	0x2000011c

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b5b0      	push	{r4, r5, r7, lr}
 80004f6:	b092      	sub	sp, #72	@ 0x48
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 faa9 	bl	8000a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f851 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f8b9 	bl	8000678 <MX_GPIO_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8000506:	2300      	movs	r3, #0
 8000508:	643b      	str	r3, [r7, #64]	@ 0x40
 800050a:	2300      	movs	r3, #0
 800050c:	647b      	str	r3, [r7, #68]	@ 0x44
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 800050e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000512:	2101      	movs	r1, #1
 8000514:	4618      	mov	r0, r3
 8000516:	f001 fd7e 	bl	8002016 <osSemaphoreCreate>
 800051a:	4603      	mov	r3, r0
 800051c:	4a1b      	ldr	r2, [pc, #108]	@ (800058c <main+0x98>)
 800051e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myBinarySem02 */
  osSemaphoreDef(myBinarySem02);
 8000520:	2300      	movs	r3, #0
 8000522:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000524:	2300      	movs	r3, #0
 8000526:	63fb      	str	r3, [r7, #60]	@ 0x3c
  myBinarySem02Handle = osSemaphoreCreate(osSemaphore(myBinarySem02), 1);
 8000528:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800052c:	2101      	movs	r1, #1
 800052e:	4618      	mov	r0, r3
 8000530:	f001 fd71 	bl	8002016 <osSemaphoreCreate>
 8000534:	4603      	mov	r3, r0
 8000536:	4a16      	ldr	r2, [pc, #88]	@ (8000590 <main+0x9c>)
 8000538:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, StartTask1, osPriorityNormal, 0, 128);
 800053a:	4b16      	ldr	r3, [pc, #88]	@ (8000594 <main+0xa0>)
 800053c:	f107 041c 	add.w	r4, r7, #28
 8000540:	461d      	mov	r5, r3
 8000542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000546:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800054a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 800054e:	f107 031c 	add.w	r3, r7, #28
 8000552:	2100      	movs	r1, #0
 8000554:	4618      	mov	r0, r3
 8000556:	f001 fcfe 	bl	8001f56 <osThreadCreate>
 800055a:	4603      	mov	r3, r0
 800055c:	4a0e      	ldr	r2, [pc, #56]	@ (8000598 <main+0xa4>)
 800055e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, StartTask2, osPriorityIdle, 0, 128);
 8000560:	4b0e      	ldr	r3, [pc, #56]	@ (800059c <main+0xa8>)
 8000562:	463c      	mov	r4, r7
 8000564:	461d      	mov	r5, r3
 8000566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800056e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000572:	463b      	mov	r3, r7
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f001 fced 	bl	8001f56 <osThreadCreate>
 800057c:	4603      	mov	r3, r0
 800057e:	4a08      	ldr	r2, [pc, #32]	@ (80005a0 <main+0xac>)
 8000580:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000582:	f001 fce1 	bl	8001f48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000586:	bf00      	nop
 8000588:	e7fd      	b.n	8000586 <main+0x92>
 800058a:	bf00      	nop
 800058c:	20000324 	.word	0x20000324
 8000590:	20000328 	.word	0x20000328
 8000594:	08004678 	.word	0x08004678
 8000598:	2000031c 	.word	0x2000031c
 800059c:	0800469c 	.word	0x0800469c
 80005a0:	20000320 	.word	0x20000320

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	@ 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	@ 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 ff68 	bl	8004488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b28      	ldr	r3, [pc, #160]	@ (8000670 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	4a27      	ldr	r2, [pc, #156]	@ (8000670 <SystemClock_Config+0xcc>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d8:	4b25      	ldr	r3, [pc, #148]	@ (8000670 <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b22      	ldr	r3, [pc, #136]	@ (8000674 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a21      	ldr	r2, [pc, #132]	@ (8000674 <SystemClock_Config+0xd0>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <SystemClock_Config+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000604:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000612:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000614:	2304      	movs	r3, #4
 8000616:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000618:	23a8      	movs	r3, #168	@ 0xa8
 800061a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000620:	2304      	movs	r3, #4
 8000622:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0320 	add.w	r3, r7, #32
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fd1d 	bl	8001068 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000634:	f000 f8fe 	bl	8000834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063c:	2302      	movs	r3, #2
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000644:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000648:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800064e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2105      	movs	r1, #5
 8000656:	4618      	mov	r0, r3
 8000658:	f000 ff7e 	bl	8001558 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000662:	f000 f8e7 	bl	8000834 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	@ 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	4b2b      	ldr	r3, [pc, #172]	@ (8000740 <MX_GPIO_Init+0xc8>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	4a2a      	ldr	r2, [pc, #168]	@ (8000740 <MX_GPIO_Init+0xc8>)
 8000698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800069c:	6313      	str	r3, [r2, #48]	@ 0x30
 800069e:	4b28      	ldr	r3, [pc, #160]	@ (8000740 <MX_GPIO_Init+0xc8>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b24      	ldr	r3, [pc, #144]	@ (8000740 <MX_GPIO_Init+0xc8>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a23      	ldr	r2, [pc, #140]	@ (8000740 <MX_GPIO_Init+0xc8>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <MX_GPIO_Init+0xc8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000740 <MX_GPIO_Init+0xc8>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000740 <MX_GPIO_Init+0xc8>)
 80006d0:	f043 0308 	orr.w	r3, r3, #8
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000740 <MX_GPIO_Init+0xc8>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	f003 0308 	and.w	r3, r3, #8
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80006e8:	4816      	ldr	r0, [pc, #88]	@ (8000744 <MX_GPIO_Init+0xcc>)
 80006ea:	f000 fc71 	bl	8000fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ee:	2301      	movs	r3, #1
 80006f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006f8:	2302      	movs	r3, #2
 80006fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	4619      	mov	r1, r3
 8000702:	4811      	ldr	r0, [pc, #68]	@ (8000748 <MX_GPIO_Init+0xd0>)
 8000704:	f000 fac8 	bl	8000c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000708:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800070c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	2301      	movs	r3, #1
 8000710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	2300      	movs	r3, #0
 8000718:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	4619      	mov	r1, r3
 8000720:	4808      	ldr	r0, [pc, #32]	@ (8000744 <MX_GPIO_Init+0xcc>)
 8000722:	f000 fab9 	bl	8000c98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2105      	movs	r1, #5
 800072a:	2006      	movs	r0, #6
 800072c:	f000 fa8a 	bl	8000c44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000730:	2006      	movs	r0, #6
 8000732:	f000 faa3 	bl	8000c7c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000736:	bf00      	nop
 8000738:	3720      	adds	r7, #32
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40020c00 	.word	0x40020c00
 8000748:	40020000 	.word	0x40020000

0800074c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]

	// while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));

	xSemaphoreGiveFromISR(myBinarySem01Handle,&xHigherPriorityTaskWoken);
 800075a:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <HAL_GPIO_EXTI_Callback+0x3c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f107 020c 	add.w	r2, r7, #12
 8000762:	4611      	mov	r1, r2
 8000764:	4618      	mov	r0, r3
 8000766:	f001 ff81 	bl	800266c <xQueueGiveFromISR>

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d007      	beq.n	8000780 <HAL_GPIO_EXTI_Callback+0x34>
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <HAL_GPIO_EXTI_Callback+0x40>)
 8000772:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	f3bf 8f4f 	dsb	sy
 800077c:	f3bf 8f6f 	isb	sy
}
 8000780:	bf00      	nop
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000324 	.word	0x20000324
 800078c:	e000ed04 	.word	0xe000ed04

08000790 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void const * argument)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  if(xSemaphoreTake(myBinarySem01Handle,portMAX_DELAY) == pdTRUE)
 8000798:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <StartTask1+0x30>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f04f 31ff 	mov.w	r1, #4294967295
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 fff3 	bl	800278c <xQueueSemaphoreTake>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d104      	bne.n	80007b6 <StartTask1+0x26>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80007ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007b0:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <StartTask1+0x34>)
 80007b2:	f000 fc26 	bl	8001002 <HAL_GPIO_TogglePin>

	  }
	  osDelay(10);
 80007b6:	200a      	movs	r0, #10
 80007b8:	f001 fc19 	bl	8001fee <osDelay>
	  if(xSemaphoreTake(myBinarySem01Handle,portMAX_DELAY) == pdTRUE)
 80007bc:	e7ec      	b.n	8000798 <StartTask1+0x8>
 80007be:	bf00      	nop
 80007c0:	20000324 	.word	0x20000324
 80007c4:	40020c00 	.word	0x40020c00

080007c8 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void const * argument)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  if(xSemaphoreTake(myBinarySem02Handle,portMAX_DELAY) == pdTRUE)
 80007d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000808 <StartTask2+0x40>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f04f 31ff 	mov.w	r1, #4294967295
 80007d8:	4618      	mov	r0, r3
 80007da:	f001 ffd7 	bl	800278c <xQueueSemaphoreTake>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d10b      	bne.n	80007fc <StartTask2+0x34>
	  {
		  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 80007e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007e8:	4808      	ldr	r0, [pc, #32]	@ (800080c <StartTask2+0x44>)
 80007ea:	f000 fc0a 	bl	8001002 <HAL_GPIO_TogglePin>

		  xSemaphoreGive(myBinarySem02Handle);
 80007ee:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <StartTask2+0x40>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	2300      	movs	r3, #0
 80007f4:	2200      	movs	r2, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	f001 fe36 	bl	8002468 <xQueueGenericSend>
	  }

	  osDelay(1000);
 80007fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000800:	f001 fbf5 	bl	8001fee <osDelay>
	  if(xSemaphoreTake(myBinarySem02Handle,portMAX_DELAY) == pdTRUE)
 8000804:	e7e4      	b.n	80007d0 <StartTask2+0x8>
 8000806:	bf00      	nop
 8000808:	20000328 	.word	0x20000328
 800080c:	40020c00 	.word	0x40020c00

08000810 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a04      	ldr	r2, [pc, #16]	@ (8000830 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d101      	bne.n	8000826 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000822:	f000 f937 	bl	8000a94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40010000 	.word	0x40010000

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
}
 800083a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <Error_Handler+0x8>

08000840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <HAL_MspInit+0x54>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800084e:	4a11      	ldr	r2, [pc, #68]	@ (8000894 <HAL_MspInit+0x54>)
 8000850:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000854:	6453      	str	r3, [r2, #68]	@ 0x44
 8000856:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <HAL_MspInit+0x54>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800085a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <HAL_MspInit+0x54>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086a:	4a0a      	ldr	r2, [pc, #40]	@ (8000894 <HAL_MspInit+0x54>)
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000870:	6413      	str	r3, [r2, #64]	@ 0x40
 8000872:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <HAL_MspInit+0x54>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	210f      	movs	r1, #15
 8000882:	f06f 0001 	mvn.w	r0, #1
 8000886:	f000 f9dd 	bl	8000c44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800

08000898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	@ 0x30
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	4b2f      	ldr	r3, [pc, #188]	@ (800096c <HAL_InitTick+0xd4>)
 80008ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b0:	4a2e      	ldr	r2, [pc, #184]	@ (800096c <HAL_InitTick+0xd4>)
 80008b2:	f043 0301 	orr.w	r3, r3, #1
 80008b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80008b8:	4b2c      	ldr	r3, [pc, #176]	@ (800096c <HAL_InitTick+0xd4>)
 80008ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008c4:	f107 020c 	add.w	r2, r7, #12
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	4611      	mov	r1, r2
 80008ce:	4618      	mov	r0, r3
 80008d0:	f001 f84e 	bl	8001970 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80008d4:	f001 f838 	bl	8001948 <HAL_RCC_GetPCLK2Freq>
 80008d8:	4603      	mov	r3, r0
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008e0:	4a23      	ldr	r2, [pc, #140]	@ (8000970 <HAL_InitTick+0xd8>)
 80008e2:	fba2 2303 	umull	r2, r3, r2, r3
 80008e6:	0c9b      	lsrs	r3, r3, #18
 80008e8:	3b01      	subs	r3, #1
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008ec:	4b21      	ldr	r3, [pc, #132]	@ (8000974 <HAL_InitTick+0xdc>)
 80008ee:	4a22      	ldr	r2, [pc, #136]	@ (8000978 <HAL_InitTick+0xe0>)
 80008f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008f2:	4b20      	ldr	r3, [pc, #128]	@ (8000974 <HAL_InitTick+0xdc>)
 80008f4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008f8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000974 <HAL_InitTick+0xdc>)
 80008fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008fe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000900:	4b1c      	ldr	r3, [pc, #112]	@ (8000974 <HAL_InitTick+0xdc>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000906:	4b1b      	ldr	r3, [pc, #108]	@ (8000974 <HAL_InitTick+0xdc>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090c:	4b19      	ldr	r3, [pc, #100]	@ (8000974 <HAL_InitTick+0xdc>)
 800090e:	2200      	movs	r2, #0
 8000910:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000912:	4818      	ldr	r0, [pc, #96]	@ (8000974 <HAL_InitTick+0xdc>)
 8000914:	f001 f85e 	bl	80019d4 <HAL_TIM_Base_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800091e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000922:	2b00      	cmp	r3, #0
 8000924:	d11b      	bne.n	800095e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000926:	4813      	ldr	r0, [pc, #76]	@ (8000974 <HAL_InitTick+0xdc>)
 8000928:	f001 f8ae 	bl	8001a88 <HAL_TIM_Base_Start_IT>
 800092c:	4603      	mov	r3, r0
 800092e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000932:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000936:	2b00      	cmp	r3, #0
 8000938:	d111      	bne.n	800095e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800093a:	2019      	movs	r0, #25
 800093c:	f000 f99e 	bl	8000c7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2b0f      	cmp	r3, #15
 8000944:	d808      	bhi.n	8000958 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000946:	2200      	movs	r2, #0
 8000948:	6879      	ldr	r1, [r7, #4]
 800094a:	2019      	movs	r0, #25
 800094c:	f000 f97a 	bl	8000c44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000950:	4a0a      	ldr	r2, [pc, #40]	@ (800097c <HAL_InitTick+0xe4>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6013      	str	r3, [r2, #0]
 8000956:	e002      	b.n	800095e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000958:	2301      	movs	r3, #1
 800095a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800095e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000962:	4618      	mov	r0, r3
 8000964:	3730      	adds	r7, #48	@ 0x30
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800
 8000970:	431bde83 	.word	0x431bde83
 8000974:	2000032c 	.word	0x2000032c
 8000978:	40010000 	.word	0x40010000
 800097c:	20000004 	.word	0x20000004

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <NMI_Handler+0x4>

08000988 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <MemManage_Handler+0x4>

08000998 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80009ba:	2001      	movs	r0, #1
 80009bc:	f000 fb3c 	bl	8001038 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009c8:	4802      	ldr	r0, [pc, #8]	@ (80009d4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009ca:	f001 f8cd 	bl	8001b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	2000032c 	.word	0x2000032c

080009d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009dc:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <SystemInit+0x20>)
 80009de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009e2:	4a05      	ldr	r2, [pc, #20]	@ (80009f8 <SystemInit+0x20>)
 80009e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a00:	f7ff ffea 	bl	80009d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a04:	480c      	ldr	r0, [pc, #48]	@ (8000a38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a06:	490d      	ldr	r1, [pc, #52]	@ (8000a3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a08:	4a0d      	ldr	r2, [pc, #52]	@ (8000a40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a0c:	e002      	b.n	8000a14 <LoopCopyDataInit>

08000a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a12:	3304      	adds	r3, #4

08000a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a18:	d3f9      	bcc.n	8000a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a20:	e001      	b.n	8000a26 <LoopFillZerobss>

08000a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a24:	3204      	adds	r2, #4

08000a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a28:	d3fb      	bcc.n	8000a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a2a:	f003 fd8b 	bl	8004544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a2e:	f7ff fd61 	bl	80004f4 <main>
  bx  lr    
 8000a32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a3c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000a40:	080046e8 	.word	0x080046e8
  ldr r2, =_sbss
 8000a44:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000a48:	2000420c 	.word	0x2000420c

08000a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC_IRQHandler>
	...

08000a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a54:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0d      	ldr	r2, [pc, #52]	@ (8000a90 <HAL_Init+0x40>)
 8000a5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a60:	4b0b      	ldr	r3, [pc, #44]	@ (8000a90 <HAL_Init+0x40>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a0a      	ldr	r2, [pc, #40]	@ (8000a90 <HAL_Init+0x40>)
 8000a66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a6c:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <HAL_Init+0x40>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a07      	ldr	r2, [pc, #28]	@ (8000a90 <HAL_Init+0x40>)
 8000a72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a78:	2003      	movs	r0, #3
 8000a7a:	f000 f8d8 	bl	8000c2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7e:	200f      	movs	r0, #15
 8000a80:	f7ff ff0a 	bl	8000898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a84:	f7ff fedc 	bl	8000840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023c00 	.word	0x40023c00

08000a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a98:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <HAL_IncTick+0x20>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <HAL_IncTick+0x24>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a04      	ldr	r2, [pc, #16]	@ (8000ab8 <HAL_IncTick+0x24>)
 8000aa6:	6013      	str	r3, [r2, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	20000374 	.word	0x20000374

08000abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac0:	4b03      	ldr	r3, [pc, #12]	@ (8000ad0 <HAL_GetTick+0x14>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000374 	.word	0x20000374

08000ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000af0:	4013      	ands	r3, r2
 8000af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000afc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b06:	4a04      	ldr	r2, [pc, #16]	@ (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	60d3      	str	r3, [r2, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b20:	4b04      	ldr	r3, [pc, #16]	@ (8000b34 <__NVIC_GetPriorityGrouping+0x18>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	f003 0307 	and.w	r3, r3, #7
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	db0b      	blt.n	8000b62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f003 021f 	and.w	r2, r3, #31
 8000b50:	4907      	ldr	r1, [pc, #28]	@ (8000b70 <__NVIC_EnableIRQ+0x38>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	095b      	lsrs	r3, r3, #5
 8000b58:	2001      	movs	r0, #1
 8000b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000e100 	.word	0xe000e100

08000b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	6039      	str	r1, [r7, #0]
 8000b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	db0a      	blt.n	8000b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	490c      	ldr	r1, [pc, #48]	@ (8000bc0 <__NVIC_SetPriority+0x4c>)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	0112      	lsls	r2, r2, #4
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	440b      	add	r3, r1
 8000b98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b9c:	e00a      	b.n	8000bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4908      	ldr	r1, [pc, #32]	@ (8000bc4 <__NVIC_SetPriority+0x50>)
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	3b04      	subs	r3, #4
 8000bac:	0112      	lsls	r2, r2, #4
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	440b      	add	r3, r1
 8000bb2:	761a      	strb	r2, [r3, #24]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000e100 	.word	0xe000e100
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b089      	sub	sp, #36	@ 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	f1c3 0307 	rsb	r3, r3, #7
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	bf28      	it	cs
 8000be6:	2304      	movcs	r3, #4
 8000be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3304      	adds	r3, #4
 8000bee:	2b06      	cmp	r3, #6
 8000bf0:	d902      	bls.n	8000bf8 <NVIC_EncodePriority+0x30>
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3b03      	subs	r3, #3
 8000bf6:	e000      	b.n	8000bfa <NVIC_EncodePriority+0x32>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43da      	mvns	r2, r3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c10:	f04f 31ff 	mov.w	r1, #4294967295
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	43d9      	mvns	r1, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	4313      	orrs	r3, r2
         );
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3724      	adds	r7, #36	@ 0x24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ff4c 	bl	8000ad4 <__NVIC_SetPriorityGrouping>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
 8000c50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c56:	f7ff ff61 	bl	8000b1c <__NVIC_GetPriorityGrouping>
 8000c5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	68b9      	ldr	r1, [r7, #8]
 8000c60:	6978      	ldr	r0, [r7, #20]
 8000c62:	f7ff ffb1 	bl	8000bc8 <NVIC_EncodePriority>
 8000c66:	4602      	mov	r2, r0
 8000c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff ff80 	bl	8000b74 <__NVIC_SetPriority>
}
 8000c74:	bf00      	nop
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ff54 	bl	8000b38 <__NVIC_EnableIRQ>
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	@ 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
 8000cb2:	e16b      	b.n	8000f8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	697a      	ldr	r2, [r7, #20]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	f040 815a 	bne.w	8000f86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d005      	beq.n	8000cea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d130      	bne.n	8000d4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	68da      	ldr	r2, [r3, #12]
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d20:	2201      	movs	r2, #1
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	091b      	lsrs	r3, r3, #4
 8000d36:	f003 0201 	and.w	r2, r3, #1
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0303 	and.w	r3, r3, #3
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	d017      	beq.n	8000d88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	689a      	ldr	r2, [r3, #8]
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 0303 	and.w	r3, r3, #3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d123      	bne.n	8000ddc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	08da      	lsrs	r2, r3, #3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3208      	adds	r2, #8
 8000d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	f003 0307 	and.w	r3, r3, #7
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	220f      	movs	r2, #15
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	691a      	ldr	r2, [r3, #16]
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	08da      	lsrs	r2, r3, #3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3208      	adds	r2, #8
 8000dd6:	69b9      	ldr	r1, [r7, #24]
 8000dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0203 	and.w	r2, r3, #3
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f000 80b4 	beq.w	8000f86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b60      	ldr	r3, [pc, #384]	@ (8000fa4 <HAL_GPIO_Init+0x30c>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e26:	4a5f      	ldr	r2, [pc, #380]	@ (8000fa4 <HAL_GPIO_Init+0x30c>)
 8000e28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e2e:	4b5d      	ldr	r3, [pc, #372]	@ (8000fa4 <HAL_GPIO_Init+0x30c>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e3a:	4a5b      	ldr	r2, [pc, #364]	@ (8000fa8 <HAL_GPIO_Init+0x310>)
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	089b      	lsrs	r3, r3, #2
 8000e40:	3302      	adds	r3, #2
 8000e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	220f      	movs	r2, #15
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a52      	ldr	r2, [pc, #328]	@ (8000fac <HAL_GPIO_Init+0x314>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d02b      	beq.n	8000ebe <HAL_GPIO_Init+0x226>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a51      	ldr	r2, [pc, #324]	@ (8000fb0 <HAL_GPIO_Init+0x318>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d025      	beq.n	8000eba <HAL_GPIO_Init+0x222>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a50      	ldr	r2, [pc, #320]	@ (8000fb4 <HAL_GPIO_Init+0x31c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d01f      	beq.n	8000eb6 <HAL_GPIO_Init+0x21e>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4f      	ldr	r2, [pc, #316]	@ (8000fb8 <HAL_GPIO_Init+0x320>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d019      	beq.n	8000eb2 <HAL_GPIO_Init+0x21a>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4e      	ldr	r2, [pc, #312]	@ (8000fbc <HAL_GPIO_Init+0x324>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d013      	beq.n	8000eae <HAL_GPIO_Init+0x216>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4d      	ldr	r2, [pc, #308]	@ (8000fc0 <HAL_GPIO_Init+0x328>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d00d      	beq.n	8000eaa <HAL_GPIO_Init+0x212>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4c      	ldr	r2, [pc, #304]	@ (8000fc4 <HAL_GPIO_Init+0x32c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d007      	beq.n	8000ea6 <HAL_GPIO_Init+0x20e>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4b      	ldr	r2, [pc, #300]	@ (8000fc8 <HAL_GPIO_Init+0x330>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d101      	bne.n	8000ea2 <HAL_GPIO_Init+0x20a>
 8000e9e:	2307      	movs	r3, #7
 8000ea0:	e00e      	b.n	8000ec0 <HAL_GPIO_Init+0x228>
 8000ea2:	2308      	movs	r3, #8
 8000ea4:	e00c      	b.n	8000ec0 <HAL_GPIO_Init+0x228>
 8000ea6:	2306      	movs	r3, #6
 8000ea8:	e00a      	b.n	8000ec0 <HAL_GPIO_Init+0x228>
 8000eaa:	2305      	movs	r3, #5
 8000eac:	e008      	b.n	8000ec0 <HAL_GPIO_Init+0x228>
 8000eae:	2304      	movs	r3, #4
 8000eb0:	e006      	b.n	8000ec0 <HAL_GPIO_Init+0x228>
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e004      	b.n	8000ec0 <HAL_GPIO_Init+0x228>
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	e002      	b.n	8000ec0 <HAL_GPIO_Init+0x228>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e000      	b.n	8000ec0 <HAL_GPIO_Init+0x228>
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	69fa      	ldr	r2, [r7, #28]
 8000ec2:	f002 0203 	and.w	r2, r2, #3
 8000ec6:	0092      	lsls	r2, r2, #2
 8000ec8:	4093      	lsls	r3, r2
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ed0:	4935      	ldr	r1, [pc, #212]	@ (8000fa8 <HAL_GPIO_Init+0x310>)
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	089b      	lsrs	r3, r3, #2
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ede:	4b3b      	ldr	r3, [pc, #236]	@ (8000fcc <HAL_GPIO_Init+0x334>)
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f02:	4a32      	ldr	r2, [pc, #200]	@ (8000fcc <HAL_GPIO_Init+0x334>)
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f08:	4b30      	ldr	r3, [pc, #192]	@ (8000fcc <HAL_GPIO_Init+0x334>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f2c:	4a27      	ldr	r2, [pc, #156]	@ (8000fcc <HAL_GPIO_Init+0x334>)
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f32:	4b26      	ldr	r3, [pc, #152]	@ (8000fcc <HAL_GPIO_Init+0x334>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f56:	4a1d      	ldr	r2, [pc, #116]	@ (8000fcc <HAL_GPIO_Init+0x334>)
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fcc <HAL_GPIO_Init+0x334>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f80:	4a12      	ldr	r2, [pc, #72]	@ (8000fcc <HAL_GPIO_Init+0x334>)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	61fb      	str	r3, [r7, #28]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	2b0f      	cmp	r3, #15
 8000f90:	f67f ae90 	bls.w	8000cb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3724      	adds	r7, #36	@ 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40013800 	.word	0x40013800
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	40020400 	.word	0x40020400
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	40020c00 	.word	0x40020c00
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40021400 	.word	0x40021400
 8000fc4:	40021800 	.word	0x40021800
 8000fc8:	40021c00 	.word	0x40021c00
 8000fcc:	40013c00 	.word	0x40013c00

08000fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	807b      	strh	r3, [r7, #2]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe0:	787b      	ldrb	r3, [r7, #1]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fe6:	887a      	ldrh	r2, [r7, #2]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fec:	e003      	b.n	8000ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fee:	887b      	ldrh	r3, [r7, #2]
 8000ff0:	041a      	lsls	r2, r3, #16
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	619a      	str	r2, [r3, #24]
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001002:	b480      	push	{r7}
 8001004:	b085      	sub	sp, #20
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	460b      	mov	r3, r1
 800100c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001014:	887a      	ldrh	r2, [r7, #2]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4013      	ands	r3, r2
 800101a:	041a      	lsls	r2, r3, #16
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	43d9      	mvns	r1, r3
 8001020:	887b      	ldrh	r3, [r7, #2]
 8001022:	400b      	ands	r3, r1
 8001024:	431a      	orrs	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	619a      	str	r2, [r3, #24]
}
 800102a:	bf00      	nop
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001042:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001044:	695a      	ldr	r2, [r3, #20]
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	4013      	ands	r3, r2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d006      	beq.n	800105c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800104e:	4a05      	ldr	r2, [pc, #20]	@ (8001064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fb78 	bl	800074c <HAL_GPIO_EXTI_Callback>
  }
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40013c00 	.word	0x40013c00

08001068 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e267      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b00      	cmp	r3, #0
 8001084:	d075      	beq.n	8001172 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001086:	4b88      	ldr	r3, [pc, #544]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 030c 	and.w	r3, r3, #12
 800108e:	2b04      	cmp	r3, #4
 8001090:	d00c      	beq.n	80010ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001092:	4b85      	ldr	r3, [pc, #532]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800109a:	2b08      	cmp	r3, #8
 800109c:	d112      	bne.n	80010c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800109e:	4b82      	ldr	r3, [pc, #520]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010aa:	d10b      	bne.n	80010c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ac:	4b7e      	ldr	r3, [pc, #504]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d05b      	beq.n	8001170 <HAL_RCC_OscConfig+0x108>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d157      	bne.n	8001170 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e242      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010cc:	d106      	bne.n	80010dc <HAL_RCC_OscConfig+0x74>
 80010ce:	4b76      	ldr	r3, [pc, #472]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a75      	ldr	r2, [pc, #468]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	e01d      	b.n	8001118 <HAL_RCC_OscConfig+0xb0>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010e4:	d10c      	bne.n	8001100 <HAL_RCC_OscConfig+0x98>
 80010e6:	4b70      	ldr	r3, [pc, #448]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a6f      	ldr	r2, [pc, #444]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	4b6d      	ldr	r3, [pc, #436]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a6c      	ldr	r2, [pc, #432]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 80010f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	e00b      	b.n	8001118 <HAL_RCC_OscConfig+0xb0>
 8001100:	4b69      	ldr	r3, [pc, #420]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a68      	ldr	r2, [pc, #416]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001106:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	4b66      	ldr	r3, [pc, #408]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a65      	ldr	r2, [pc, #404]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001112:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d013      	beq.n	8001148 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001120:	f7ff fccc 	bl	8000abc <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001128:	f7ff fcc8 	bl	8000abc <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b64      	cmp	r3, #100	@ 0x64
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e207      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113a:	4b5b      	ldr	r3, [pc, #364]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f0      	beq.n	8001128 <HAL_RCC_OscConfig+0xc0>
 8001146:	e014      	b.n	8001172 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001148:	f7ff fcb8 	bl	8000abc <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001150:	f7ff fcb4 	bl	8000abc <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b64      	cmp	r3, #100	@ 0x64
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e1f3      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001162:	4b51      	ldr	r3, [pc, #324]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0xe8>
 800116e:	e000      	b.n	8001172 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d063      	beq.n	8001246 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800117e:	4b4a      	ldr	r3, [pc, #296]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00b      	beq.n	80011a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800118a:	4b47      	ldr	r3, [pc, #284]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001192:	2b08      	cmp	r3, #8
 8001194:	d11c      	bne.n	80011d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001196:	4b44      	ldr	r3, [pc, #272]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d116      	bne.n	80011d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a2:	4b41      	ldr	r3, [pc, #260]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d005      	beq.n	80011ba <HAL_RCC_OscConfig+0x152>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d001      	beq.n	80011ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e1c7      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ba:	4b3b      	ldr	r3, [pc, #236]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	4937      	ldr	r1, [pc, #220]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ce:	e03a      	b.n	8001246 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d020      	beq.n	800121a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d8:	4b34      	ldr	r3, [pc, #208]	@ (80012ac <HAL_RCC_OscConfig+0x244>)
 80011da:	2201      	movs	r2, #1
 80011dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011de:	f7ff fc6d 	bl	8000abc <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011e6:	f7ff fc69 	bl	8000abc <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e1a8      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f8:	4b2b      	ldr	r3, [pc, #172]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f0      	beq.n	80011e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001204:	4b28      	ldr	r3, [pc, #160]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	4925      	ldr	r1, [pc, #148]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 8001214:	4313      	orrs	r3, r2
 8001216:	600b      	str	r3, [r1, #0]
 8001218:	e015      	b.n	8001246 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800121a:	4b24      	ldr	r3, [pc, #144]	@ (80012ac <HAL_RCC_OscConfig+0x244>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001220:	f7ff fc4c 	bl	8000abc <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001228:	f7ff fc48 	bl	8000abc <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e187      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123a:	4b1b      	ldr	r3, [pc, #108]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	2b00      	cmp	r3, #0
 8001250:	d036      	beq.n	80012c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d016      	beq.n	8001288 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800125a:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <HAL_RCC_OscConfig+0x248>)
 800125c:	2201      	movs	r2, #1
 800125e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001260:	f7ff fc2c 	bl	8000abc <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001268:	f7ff fc28 	bl	8000abc <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e167      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127a:	4b0b      	ldr	r3, [pc, #44]	@ (80012a8 <HAL_RCC_OscConfig+0x240>)
 800127c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0f0      	beq.n	8001268 <HAL_RCC_OscConfig+0x200>
 8001286:	e01b      	b.n	80012c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001288:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <HAL_RCC_OscConfig+0x248>)
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128e:	f7ff fc15 	bl	8000abc <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001294:	e00e      	b.n	80012b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001296:	f7ff fc11 	bl	8000abc <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d907      	bls.n	80012b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e150      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
 80012a8:	40023800 	.word	0x40023800
 80012ac:	42470000 	.word	0x42470000
 80012b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b4:	4b88      	ldr	r3, [pc, #544]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 80012b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1ea      	bne.n	8001296 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 8097 	beq.w	80013fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ce:	2300      	movs	r3, #0
 80012d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d2:	4b81      	ldr	r3, [pc, #516]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d10f      	bne.n	80012fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	4b7d      	ldr	r3, [pc, #500]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	4a7c      	ldr	r2, [pc, #496]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ee:	4b7a      	ldr	r3, [pc, #488]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012fa:	2301      	movs	r3, #1
 80012fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fe:	4b77      	ldr	r3, [pc, #476]	@ (80014dc <HAL_RCC_OscConfig+0x474>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001306:	2b00      	cmp	r3, #0
 8001308:	d118      	bne.n	800133c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800130a:	4b74      	ldr	r3, [pc, #464]	@ (80014dc <HAL_RCC_OscConfig+0x474>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a73      	ldr	r2, [pc, #460]	@ (80014dc <HAL_RCC_OscConfig+0x474>)
 8001310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001316:	f7ff fbd1 	bl	8000abc <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800131e:	f7ff fbcd 	bl	8000abc <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e10c      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001330:	4b6a      	ldr	r3, [pc, #424]	@ (80014dc <HAL_RCC_OscConfig+0x474>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0f0      	beq.n	800131e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d106      	bne.n	8001352 <HAL_RCC_OscConfig+0x2ea>
 8001344:	4b64      	ldr	r3, [pc, #400]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001348:	4a63      	ldr	r2, [pc, #396]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001350:	e01c      	b.n	800138c <HAL_RCC_OscConfig+0x324>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	2b05      	cmp	r3, #5
 8001358:	d10c      	bne.n	8001374 <HAL_RCC_OscConfig+0x30c>
 800135a:	4b5f      	ldr	r3, [pc, #380]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 800135c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800135e:	4a5e      	ldr	r2, [pc, #376]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001360:	f043 0304 	orr.w	r3, r3, #4
 8001364:	6713      	str	r3, [r2, #112]	@ 0x70
 8001366:	4b5c      	ldr	r3, [pc, #368]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800136a:	4a5b      	ldr	r2, [pc, #364]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6713      	str	r3, [r2, #112]	@ 0x70
 8001372:	e00b      	b.n	800138c <HAL_RCC_OscConfig+0x324>
 8001374:	4b58      	ldr	r3, [pc, #352]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001378:	4a57      	ldr	r2, [pc, #348]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 800137a:	f023 0301 	bic.w	r3, r3, #1
 800137e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001380:	4b55      	ldr	r3, [pc, #340]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001384:	4a54      	ldr	r2, [pc, #336]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001386:	f023 0304 	bic.w	r3, r3, #4
 800138a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d015      	beq.n	80013c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001394:	f7ff fb92 	bl	8000abc <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139a:	e00a      	b.n	80013b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139c:	f7ff fb8e 	bl	8000abc <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e0cb      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b2:	4b49      	ldr	r3, [pc, #292]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 80013b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0ee      	beq.n	800139c <HAL_RCC_OscConfig+0x334>
 80013be:	e014      	b.n	80013ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c0:	f7ff fb7c 	bl	8000abc <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c6:	e00a      	b.n	80013de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c8:	f7ff fb78 	bl	8000abc <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e0b5      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013de:	4b3e      	ldr	r3, [pc, #248]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 80013e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1ee      	bne.n	80013c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80013ea:	7dfb      	ldrb	r3, [r7, #23]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d105      	bne.n	80013fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f0:	4b39      	ldr	r3, [pc, #228]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f4:	4a38      	ldr	r2, [pc, #224]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 80013f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80a1 	beq.w	8001548 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001406:	4b34      	ldr	r3, [pc, #208]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 030c 	and.w	r3, r3, #12
 800140e:	2b08      	cmp	r3, #8
 8001410:	d05c      	beq.n	80014cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	2b02      	cmp	r3, #2
 8001418:	d141      	bne.n	800149e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141a:	4b31      	ldr	r3, [pc, #196]	@ (80014e0 <HAL_RCC_OscConfig+0x478>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fb4c 	bl	8000abc <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001428:	f7ff fb48 	bl	8000abc <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e087      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143a:	4b27      	ldr	r3, [pc, #156]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69da      	ldr	r2, [r3, #28]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001454:	019b      	lsls	r3, r3, #6
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800145c:	085b      	lsrs	r3, r3, #1
 800145e:	3b01      	subs	r3, #1
 8001460:	041b      	lsls	r3, r3, #16
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001468:	061b      	lsls	r3, r3, #24
 800146a:	491b      	ldr	r1, [pc, #108]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001470:	4b1b      	ldr	r3, [pc, #108]	@ (80014e0 <HAL_RCC_OscConfig+0x478>)
 8001472:	2201      	movs	r2, #1
 8001474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001476:	f7ff fb21 	bl	8000abc <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800147e:	f7ff fb1d 	bl	8000abc <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e05c      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001490:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0f0      	beq.n	800147e <HAL_RCC_OscConfig+0x416>
 800149c:	e054      	b.n	8001548 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149e:	4b10      	ldr	r3, [pc, #64]	@ (80014e0 <HAL_RCC_OscConfig+0x478>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fb0a 	bl	8000abc <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ac:	f7ff fb06 	bl	8000abc <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e045      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <HAL_RCC_OscConfig+0x470>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x444>
 80014ca:	e03d      	b.n	8001548 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d107      	bne.n	80014e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e038      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40007000 	.word	0x40007000
 80014e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001554 <HAL_RCC_OscConfig+0x4ec>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d028      	beq.n	8001544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d121      	bne.n	8001544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800150a:	429a      	cmp	r2, r3
 800150c:	d11a      	bne.n	8001544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001514:	4013      	ands	r3, r2
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800151a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800151c:	4293      	cmp	r3, r2
 800151e:	d111      	bne.n	8001544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800152a:	085b      	lsrs	r3, r3, #1
 800152c:	3b01      	subs	r3, #1
 800152e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001530:	429a      	cmp	r2, r3
 8001532:	d107      	bne.n	8001544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800153e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001540:	429a      	cmp	r2, r3
 8001542:	d001      	beq.n	8001548 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800

08001558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e0cc      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800156c:	4b68      	ldr	r3, [pc, #416]	@ (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d90c      	bls.n	8001594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157a:	4b65      	ldr	r3, [pc, #404]	@ (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001582:	4b63      	ldr	r3, [pc, #396]	@ (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d001      	beq.n	8001594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e0b8      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d020      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015ac:	4b59      	ldr	r3, [pc, #356]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	4a58      	ldr	r2, [pc, #352]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c4:	4b53      	ldr	r3, [pc, #332]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	4a52      	ldr	r2, [pc, #328]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d0:	4b50      	ldr	r3, [pc, #320]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	494d      	ldr	r1, [pc, #308]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d044      	beq.n	8001678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d107      	bne.n	8001606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f6:	4b47      	ldr	r3, [pc, #284]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d119      	bne.n	8001636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e07f      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d003      	beq.n	8001616 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001612:	2b03      	cmp	r3, #3
 8001614:	d107      	bne.n	8001626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001616:	4b3f      	ldr	r3, [pc, #252]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d109      	bne.n	8001636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e06f      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001626:	4b3b      	ldr	r3, [pc, #236]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e067      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001636:	4b37      	ldr	r3, [pc, #220]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f023 0203 	bic.w	r2, r3, #3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4934      	ldr	r1, [pc, #208]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	4313      	orrs	r3, r2
 8001646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001648:	f7ff fa38 	bl	8000abc <HAL_GetTick>
 800164c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164e:	e00a      	b.n	8001666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001650:	f7ff fa34 	bl	8000abc <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800165e:	4293      	cmp	r3, r2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e04f      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001666:	4b2b      	ldr	r3, [pc, #172]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 020c 	and.w	r2, r3, #12
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	429a      	cmp	r2, r3
 8001676:	d1eb      	bne.n	8001650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001678:	4b25      	ldr	r3, [pc, #148]	@ (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d20c      	bcs.n	80016a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	4b22      	ldr	r3, [pc, #136]	@ (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800168e:	4b20      	ldr	r3, [pc, #128]	@ (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d001      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e032      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d008      	beq.n	80016be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ac:	4b19      	ldr	r3, [pc, #100]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	4916      	ldr	r1, [pc, #88]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d009      	beq.n	80016de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ca:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	490e      	ldr	r1, [pc, #56]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016de:	f000 f821 	bl	8001724 <HAL_RCC_GetSysClockFreq>
 80016e2:	4602      	mov	r2, r0
 80016e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	091b      	lsrs	r3, r3, #4
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	490a      	ldr	r1, [pc, #40]	@ (8001718 <HAL_RCC_ClockConfig+0x1c0>)
 80016f0:	5ccb      	ldrb	r3, [r1, r3]
 80016f2:	fa22 f303 	lsr.w	r3, r2, r3
 80016f6:	4a09      	ldr	r2, [pc, #36]	@ (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80016fa:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <HAL_RCC_ClockConfig+0x1c8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff f8ca 	bl	8000898 <HAL_InitTick>

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023c00 	.word	0x40023c00
 8001714:	40023800 	.word	0x40023800
 8001718:	080046c0 	.word	0x080046c0
 800171c:	20000000 	.word	0x20000000
 8001720:	20000004 	.word	0x20000004

08001724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001728:	b094      	sub	sp, #80	@ 0x50
 800172a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800173c:	4b79      	ldr	r3, [pc, #484]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x200>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 030c 	and.w	r3, r3, #12
 8001744:	2b08      	cmp	r3, #8
 8001746:	d00d      	beq.n	8001764 <HAL_RCC_GetSysClockFreq+0x40>
 8001748:	2b08      	cmp	r3, #8
 800174a:	f200 80e1 	bhi.w	8001910 <HAL_RCC_GetSysClockFreq+0x1ec>
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <HAL_RCC_GetSysClockFreq+0x34>
 8001752:	2b04      	cmp	r3, #4
 8001754:	d003      	beq.n	800175e <HAL_RCC_GetSysClockFreq+0x3a>
 8001756:	e0db      	b.n	8001910 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001758:	4b73      	ldr	r3, [pc, #460]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x204>)
 800175a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800175c:	e0db      	b.n	8001916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800175e:	4b73      	ldr	r3, [pc, #460]	@ (800192c <HAL_RCC_GetSysClockFreq+0x208>)
 8001760:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001762:	e0d8      	b.n	8001916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001764:	4b6f      	ldr	r3, [pc, #444]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x200>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800176c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800176e:	4b6d      	ldr	r3, [pc, #436]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x200>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d063      	beq.n	8001842 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800177a:	4b6a      	ldr	r3, [pc, #424]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x200>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	099b      	lsrs	r3, r3, #6
 8001780:	2200      	movs	r2, #0
 8001782:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001784:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800178c:	633b      	str	r3, [r7, #48]	@ 0x30
 800178e:	2300      	movs	r3, #0
 8001790:	637b      	str	r3, [r7, #52]	@ 0x34
 8001792:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001796:	4622      	mov	r2, r4
 8001798:	462b      	mov	r3, r5
 800179a:	f04f 0000 	mov.w	r0, #0
 800179e:	f04f 0100 	mov.w	r1, #0
 80017a2:	0159      	lsls	r1, r3, #5
 80017a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017a8:	0150      	lsls	r0, r2, #5
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4621      	mov	r1, r4
 80017b0:	1a51      	subs	r1, r2, r1
 80017b2:	6139      	str	r1, [r7, #16]
 80017b4:	4629      	mov	r1, r5
 80017b6:	eb63 0301 	sbc.w	r3, r3, r1
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017c8:	4659      	mov	r1, fp
 80017ca:	018b      	lsls	r3, r1, #6
 80017cc:	4651      	mov	r1, sl
 80017ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017d2:	4651      	mov	r1, sl
 80017d4:	018a      	lsls	r2, r1, #6
 80017d6:	4651      	mov	r1, sl
 80017d8:	ebb2 0801 	subs.w	r8, r2, r1
 80017dc:	4659      	mov	r1, fp
 80017de:	eb63 0901 	sbc.w	r9, r3, r1
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017f6:	4690      	mov	r8, r2
 80017f8:	4699      	mov	r9, r3
 80017fa:	4623      	mov	r3, r4
 80017fc:	eb18 0303 	adds.w	r3, r8, r3
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	462b      	mov	r3, r5
 8001804:	eb49 0303 	adc.w	r3, r9, r3
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	f04f 0300 	mov.w	r3, #0
 8001812:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001816:	4629      	mov	r1, r5
 8001818:	024b      	lsls	r3, r1, #9
 800181a:	4621      	mov	r1, r4
 800181c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001820:	4621      	mov	r1, r4
 8001822:	024a      	lsls	r2, r1, #9
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800182a:	2200      	movs	r2, #0
 800182c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800182e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001830:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001834:	f7fe fccc 	bl	80001d0 <__aeabi_uldivmod>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4613      	mov	r3, r2
 800183e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001840:	e058      	b.n	80018f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001842:	4b38      	ldr	r3, [pc, #224]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x200>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	099b      	lsrs	r3, r3, #6
 8001848:	2200      	movs	r2, #0
 800184a:	4618      	mov	r0, r3
 800184c:	4611      	mov	r1, r2
 800184e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001852:	623b      	str	r3, [r7, #32]
 8001854:	2300      	movs	r3, #0
 8001856:	627b      	str	r3, [r7, #36]	@ 0x24
 8001858:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800185c:	4642      	mov	r2, r8
 800185e:	464b      	mov	r3, r9
 8001860:	f04f 0000 	mov.w	r0, #0
 8001864:	f04f 0100 	mov.w	r1, #0
 8001868:	0159      	lsls	r1, r3, #5
 800186a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800186e:	0150      	lsls	r0, r2, #5
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4641      	mov	r1, r8
 8001876:	ebb2 0a01 	subs.w	sl, r2, r1
 800187a:	4649      	mov	r1, r9
 800187c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800188c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001890:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001894:	ebb2 040a 	subs.w	r4, r2, sl
 8001898:	eb63 050b 	sbc.w	r5, r3, fp
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	00eb      	lsls	r3, r5, #3
 80018a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018aa:	00e2      	lsls	r2, r4, #3
 80018ac:	4614      	mov	r4, r2
 80018ae:	461d      	mov	r5, r3
 80018b0:	4643      	mov	r3, r8
 80018b2:	18e3      	adds	r3, r4, r3
 80018b4:	603b      	str	r3, [r7, #0]
 80018b6:	464b      	mov	r3, r9
 80018b8:	eb45 0303 	adc.w	r3, r5, r3
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	f04f 0300 	mov.w	r3, #0
 80018c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018ca:	4629      	mov	r1, r5
 80018cc:	028b      	lsls	r3, r1, #10
 80018ce:	4621      	mov	r1, r4
 80018d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018d4:	4621      	mov	r1, r4
 80018d6:	028a      	lsls	r2, r1, #10
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018de:	2200      	movs	r2, #0
 80018e0:	61bb      	str	r3, [r7, #24]
 80018e2:	61fa      	str	r2, [r7, #28]
 80018e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018e8:	f7fe fc72 	bl	80001d0 <__aeabi_uldivmod>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4613      	mov	r3, r2
 80018f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80018f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x200>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	0c1b      	lsrs	r3, r3, #16
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	3301      	adds	r3, #1
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001904:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001906:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001908:	fbb2 f3f3 	udiv	r3, r2, r3
 800190c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800190e:	e002      	b.n	8001916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001910:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x204>)
 8001912:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001918:	4618      	mov	r0, r3
 800191a:	3750      	adds	r7, #80	@ 0x50
 800191c:	46bd      	mov	sp, r7
 800191e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	00f42400 	.word	0x00f42400
 800192c:	007a1200 	.word	0x007a1200

08001930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001934:	4b03      	ldr	r3, [pc, #12]	@ (8001944 <HAL_RCC_GetHCLKFreq+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000000 	.word	0x20000000

08001948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800194c:	f7ff fff0 	bl	8001930 <HAL_RCC_GetHCLKFreq>
 8001950:	4602      	mov	r2, r0
 8001952:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	0b5b      	lsrs	r3, r3, #13
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	4903      	ldr	r1, [pc, #12]	@ (800196c <HAL_RCC_GetPCLK2Freq+0x24>)
 800195e:	5ccb      	ldrb	r3, [r1, r3]
 8001960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001964:	4618      	mov	r0, r3
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40023800 	.word	0x40023800
 800196c:	080046d0 	.word	0x080046d0

08001970 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	220f      	movs	r2, #15
 800197e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001980:	4b12      	ldr	r3, [pc, #72]	@ (80019cc <HAL_RCC_GetClockConfig+0x5c>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 0203 	and.w	r2, r3, #3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800198c:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <HAL_RCC_GetClockConfig+0x5c>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001998:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <HAL_RCC_GetClockConfig+0x5c>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019a4:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <HAL_RCC_GetClockConfig+0x5c>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	08db      	lsrs	r3, r3, #3
 80019aa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019b2:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <HAL_RCC_GetClockConfig+0x60>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0207 	and.w	r2, r3, #7
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	601a      	str	r2, [r3, #0]
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40023c00 	.word	0x40023c00

080019d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e041      	b.n	8001a6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d106      	bne.n	8001a00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f839 	bl	8001a72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2202      	movs	r2, #2
 8001a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3304      	adds	r3, #4
 8001a10:	4619      	mov	r1, r3
 8001a12:	4610      	mov	r0, r2
 8001a14:	f000 f9c0 	bl	8001d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d001      	beq.n	8001aa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e04e      	b.n	8001b3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0201 	orr.w	r2, r2, #1
 8001ab6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a23      	ldr	r2, [pc, #140]	@ (8001b4c <HAL_TIM_Base_Start_IT+0xc4>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d022      	beq.n	8001b08 <HAL_TIM_Base_Start_IT+0x80>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aca:	d01d      	beq.n	8001b08 <HAL_TIM_Base_Start_IT+0x80>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a1f      	ldr	r2, [pc, #124]	@ (8001b50 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d018      	beq.n	8001b08 <HAL_TIM_Base_Start_IT+0x80>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a1e      	ldr	r2, [pc, #120]	@ (8001b54 <HAL_TIM_Base_Start_IT+0xcc>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d013      	beq.n	8001b08 <HAL_TIM_Base_Start_IT+0x80>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a1c      	ldr	r2, [pc, #112]	@ (8001b58 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d00e      	beq.n	8001b08 <HAL_TIM_Base_Start_IT+0x80>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a1b      	ldr	r2, [pc, #108]	@ (8001b5c <HAL_TIM_Base_Start_IT+0xd4>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d009      	beq.n	8001b08 <HAL_TIM_Base_Start_IT+0x80>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a19      	ldr	r2, [pc, #100]	@ (8001b60 <HAL_TIM_Base_Start_IT+0xd8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d004      	beq.n	8001b08 <HAL_TIM_Base_Start_IT+0x80>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a18      	ldr	r2, [pc, #96]	@ (8001b64 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d111      	bne.n	8001b2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b06      	cmp	r3, #6
 8001b18:	d010      	beq.n	8001b3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f042 0201 	orr.w	r2, r2, #1
 8001b28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b2a:	e007      	b.n	8001b3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0201 	orr.w	r2, r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40010000 	.word	0x40010000
 8001b50:	40000400 	.word	0x40000400
 8001b54:	40000800 	.word	0x40000800
 8001b58:	40000c00 	.word	0x40000c00
 8001b5c:	40010400 	.word	0x40010400
 8001b60:	40014000 	.word	0x40014000
 8001b64:	40001800 	.word	0x40001800

08001b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d020      	beq.n	8001bcc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d01b      	beq.n	8001bcc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f06f 0202 	mvn.w	r2, #2
 8001b9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f8d2 	bl	8001d5c <HAL_TIM_IC_CaptureCallback>
 8001bb8:	e005      	b.n	8001bc6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f8c4 	bl	8001d48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f8d5 	bl	8001d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d020      	beq.n	8001c18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d01b      	beq.n	8001c18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f06f 0204 	mvn.w	r2, #4
 8001be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2202      	movs	r2, #2
 8001bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f8ac 	bl	8001d5c <HAL_TIM_IC_CaptureCallback>
 8001c04:	e005      	b.n	8001c12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f89e 	bl	8001d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f8af 	bl	8001d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d020      	beq.n	8001c64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d01b      	beq.n	8001c64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f06f 0208 	mvn.w	r2, #8
 8001c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2204      	movs	r2, #4
 8001c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f886 	bl	8001d5c <HAL_TIM_IC_CaptureCallback>
 8001c50:	e005      	b.n	8001c5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f878 	bl	8001d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f889 	bl	8001d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d020      	beq.n	8001cb0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f003 0310 	and.w	r3, r3, #16
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d01b      	beq.n	8001cb0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0210 	mvn.w	r2, #16
 8001c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2208      	movs	r2, #8
 8001c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f860 	bl	8001d5c <HAL_TIM_IC_CaptureCallback>
 8001c9c:	e005      	b.n	8001caa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f852 	bl	8001d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f863 	bl	8001d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00c      	beq.n	8001cd4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d007      	beq.n	8001cd4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f06f 0201 	mvn.w	r2, #1
 8001ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7fe fd9e 	bl	8000810 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00c      	beq.n	8001cf8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d007      	beq.n	8001cf8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f906 	bl	8001f04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00c      	beq.n	8001d1c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d007      	beq.n	8001d1c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f834 	bl	8001d84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f003 0320 	and.w	r3, r3, #32
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00c      	beq.n	8001d40 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f003 0320 	and.w	r3, r3, #32
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d007      	beq.n	8001d40 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0220 	mvn.w	r2, #32
 8001d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f8d8 	bl	8001ef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d40:	bf00      	nop
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a46      	ldr	r2, [pc, #280]	@ (8001ec4 <TIM_Base_SetConfig+0x12c>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d013      	beq.n	8001dd8 <TIM_Base_SetConfig+0x40>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001db6:	d00f      	beq.n	8001dd8 <TIM_Base_SetConfig+0x40>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a43      	ldr	r2, [pc, #268]	@ (8001ec8 <TIM_Base_SetConfig+0x130>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d00b      	beq.n	8001dd8 <TIM_Base_SetConfig+0x40>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a42      	ldr	r2, [pc, #264]	@ (8001ecc <TIM_Base_SetConfig+0x134>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d007      	beq.n	8001dd8 <TIM_Base_SetConfig+0x40>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a41      	ldr	r2, [pc, #260]	@ (8001ed0 <TIM_Base_SetConfig+0x138>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d003      	beq.n	8001dd8 <TIM_Base_SetConfig+0x40>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a40      	ldr	r2, [pc, #256]	@ (8001ed4 <TIM_Base_SetConfig+0x13c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d108      	bne.n	8001dea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a35      	ldr	r2, [pc, #212]	@ (8001ec4 <TIM_Base_SetConfig+0x12c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d02b      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001df8:	d027      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a32      	ldr	r2, [pc, #200]	@ (8001ec8 <TIM_Base_SetConfig+0x130>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d023      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a31      	ldr	r2, [pc, #196]	@ (8001ecc <TIM_Base_SetConfig+0x134>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d01f      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a30      	ldr	r2, [pc, #192]	@ (8001ed0 <TIM_Base_SetConfig+0x138>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d01b      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a2f      	ldr	r2, [pc, #188]	@ (8001ed4 <TIM_Base_SetConfig+0x13c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d017      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a2e      	ldr	r2, [pc, #184]	@ (8001ed8 <TIM_Base_SetConfig+0x140>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d013      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a2d      	ldr	r2, [pc, #180]	@ (8001edc <TIM_Base_SetConfig+0x144>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d00f      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a2c      	ldr	r2, [pc, #176]	@ (8001ee0 <TIM_Base_SetConfig+0x148>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d00b      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a2b      	ldr	r2, [pc, #172]	@ (8001ee4 <TIM_Base_SetConfig+0x14c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d007      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ee8 <TIM_Base_SetConfig+0x150>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d003      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a29      	ldr	r2, [pc, #164]	@ (8001eec <TIM_Base_SetConfig+0x154>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d108      	bne.n	8001e5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a10      	ldr	r2, [pc, #64]	@ (8001ec4 <TIM_Base_SetConfig+0x12c>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d003      	beq.n	8001e90 <TIM_Base_SetConfig+0xf8>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a12      	ldr	r2, [pc, #72]	@ (8001ed4 <TIM_Base_SetConfig+0x13c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d103      	bne.n	8001e98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	691a      	ldr	r2, [r3, #16]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d105      	bne.n	8001eb6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f023 0201 	bic.w	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	611a      	str	r2, [r3, #16]
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40010000 	.word	0x40010000
 8001ec8:	40000400 	.word	0x40000400
 8001ecc:	40000800 	.word	0x40000800
 8001ed0:	40000c00 	.word	0x40000c00
 8001ed4:	40010400 	.word	0x40010400
 8001ed8:	40014000 	.word	0x40014000
 8001edc:	40014400 	.word	0x40014400
 8001ee0:	40014800 	.word	0x40014800
 8001ee4:	40001800 	.word	0x40001800
 8001ee8:	40001c00 	.word	0x40001c00
 8001eec:	40002000 	.word	0x40002000

08001ef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f2a:	2b84      	cmp	r3, #132	@ 0x84
 8001f2c:	d005      	beq.n	8001f3a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001f2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4413      	add	r3, r2
 8001f36:	3303      	adds	r3, #3
 8001f38:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001f4c:	f001 f816 	bl	8002f7c <vTaskStartScheduler>
  
  return osOK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001f56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f58:	b089      	sub	sp, #36	@ 0x24
 8001f5a:	af04      	add	r7, sp, #16
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d020      	beq.n	8001faa <osThreadCreate+0x54>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d01c      	beq.n	8001faa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685c      	ldr	r4, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691e      	ldr	r6, [r3, #16]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ffc8 	bl	8001f18 <makeFreeRtosPriority>
 8001f88:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f92:	9202      	str	r2, [sp, #8]
 8001f94:	9301      	str	r3, [sp, #4]
 8001f96:	9100      	str	r1, [sp, #0]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	4632      	mov	r2, r6
 8001f9c:	4629      	mov	r1, r5
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	f000 fe06 	bl	8002bb0 <xTaskCreateStatic>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	e01c      	b.n	8001fe4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685c      	ldr	r4, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fb6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ffaa 	bl	8001f18 <makeFreeRtosPriority>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	f107 030c 	add.w	r3, r7, #12
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	9200      	str	r2, [sp, #0]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	4632      	mov	r2, r6
 8001fd2:	4629      	mov	r1, r5
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	f000 fe4b 	bl	8002c70 <xTaskCreate>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d001      	beq.n	8001fe4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	e000      	b.n	8001fe6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b084      	sub	sp, #16
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <osDelay+0x16>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	e000      	b.n	8002006 <osDelay+0x18>
 8002004:	2301      	movs	r3, #1
 8002006:	4618      	mov	r0, r3
 8002008:	f000 ff82 	bl	8002f10 <vTaskDelay>
  
  return osOK;
 800200c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002016:	b580      	push	{r7, lr}
 8002018:	b086      	sub	sp, #24
 800201a:	af02      	add	r7, sp, #8
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00f      	beq.n	8002048 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d10a      	bne.n	8002044 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2203      	movs	r2, #3
 8002034:	9200      	str	r2, [sp, #0]
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	2001      	movs	r0, #1
 800203c:	f000 f93c 	bl	80022b8 <xQueueGenericCreateStatic>
 8002040:	4603      	mov	r3, r0
 8002042:	e016      	b.n	8002072 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002044:	2300      	movs	r3, #0
 8002046:	e014      	b.n	8002072 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d110      	bne.n	8002070 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800204e:	2203      	movs	r2, #3
 8002050:	2100      	movs	r1, #0
 8002052:	2001      	movs	r0, #1
 8002054:	f000 f9ad 	bl	80023b2 <xQueueGenericCreate>
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <osSemaphoreCreate+0x56>
 8002060:	2300      	movs	r3, #0
 8002062:	2200      	movs	r2, #0
 8002064:	2100      	movs	r1, #0
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 f9fe 	bl	8002468 <xQueueGenericSend>
      return sema;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	e000      	b.n	8002072 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002070:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f103 0208 	add.w	r2, r3, #8
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f04f 32ff 	mov.w	r2, #4294967295
 8002092:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f103 0208 	add.w	r2, r3, #8
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f103 0208 	add.w	r2, r3, #8
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	601a      	str	r2, [r3, #0]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002132:	d103      	bne.n	800213c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	e00c      	b.n	8002156 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3308      	adds	r3, #8
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	e002      	b.n	800214a <vListInsert+0x2e>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	429a      	cmp	r2, r3
 8002154:	d2f6      	bcs.n	8002144 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	601a      	str	r2, [r3, #0]
}
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800218e:	b480      	push	{r7}
 8002190:	b085      	sub	sp, #20
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6892      	ldr	r2, [r2, #8]
 80021a4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6852      	ldr	r2, [r2, #4]
 80021ae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d103      	bne.n	80021c2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	1e5a      	subs	r2, r3, #1
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10b      	bne.n	8002210 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80021f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021fc:	f383 8811 	msr	BASEPRI, r3
 8002200:	f3bf 8f6f 	isb	sy
 8002204:	f3bf 8f4f 	dsb	sy
 8002208:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800220a:	bf00      	nop
 800220c:	bf00      	nop
 800220e:	e7fd      	b.n	800220c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002210:	f001 fe2a 	bl	8003e68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800221c:	68f9      	ldr	r1, [r7, #12]
 800221e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002220:	fb01 f303 	mul.w	r3, r1, r3
 8002224:	441a      	add	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002240:	3b01      	subs	r3, #1
 8002242:	68f9      	ldr	r1, [r7, #12]
 8002244:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002246:	fb01 f303 	mul.w	r3, r1, r3
 800224a:	441a      	add	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	22ff      	movs	r2, #255	@ 0xff
 8002254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	22ff      	movs	r2, #255	@ 0xff
 800225c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d114      	bne.n	8002290 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d01a      	beq.n	80022a4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	3310      	adds	r3, #16
 8002272:	4618      	mov	r0, r3
 8002274:	f001 f8dc 	bl	8003430 <xTaskRemoveFromEventList>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d012      	beq.n	80022a4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800227e:	4b0d      	ldr	r3, [pc, #52]	@ (80022b4 <xQueueGenericReset+0xd0>)
 8002280:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	f3bf 8f4f 	dsb	sy
 800228a:	f3bf 8f6f 	isb	sy
 800228e:	e009      	b.n	80022a4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	3310      	adds	r3, #16
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fef0 	bl	800207a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	3324      	adds	r3, #36	@ 0x24
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff feeb 	bl	800207a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80022a4:	f001 fe12 	bl	8003ecc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80022a8:	2301      	movs	r3, #1
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	e000ed04 	.word	0xe000ed04

080022b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08e      	sub	sp, #56	@ 0x38
 80022bc:	af02      	add	r7, sp, #8
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10b      	bne.n	80022e4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80022cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022d0:	f383 8811 	msr	BASEPRI, r3
 80022d4:	f3bf 8f6f 	isb	sy
 80022d8:	f3bf 8f4f 	dsb	sy
 80022dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80022de:	bf00      	nop
 80022e0:	bf00      	nop
 80022e2:	e7fd      	b.n	80022e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10b      	bne.n	8002302 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80022ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022ee:	f383 8811 	msr	BASEPRI, r3
 80022f2:	f3bf 8f6f 	isb	sy
 80022f6:	f3bf 8f4f 	dsb	sy
 80022fa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80022fc:	bf00      	nop
 80022fe:	bf00      	nop
 8002300:	e7fd      	b.n	80022fe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <xQueueGenericCreateStatic+0x56>
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <xQueueGenericCreateStatic+0x5a>
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <xQueueGenericCreateStatic+0x5c>
 8002312:	2300      	movs	r3, #0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10b      	bne.n	8002330 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800231c:	f383 8811 	msr	BASEPRI, r3
 8002320:	f3bf 8f6f 	isb	sy
 8002324:	f3bf 8f4f 	dsb	sy
 8002328:	623b      	str	r3, [r7, #32]
}
 800232a:	bf00      	nop
 800232c:	bf00      	nop
 800232e:	e7fd      	b.n	800232c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d102      	bne.n	800233c <xQueueGenericCreateStatic+0x84>
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <xQueueGenericCreateStatic+0x88>
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <xQueueGenericCreateStatic+0x8a>
 8002340:	2300      	movs	r3, #0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10b      	bne.n	800235e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800234a:	f383 8811 	msr	BASEPRI, r3
 800234e:	f3bf 8f6f 	isb	sy
 8002352:	f3bf 8f4f 	dsb	sy
 8002356:	61fb      	str	r3, [r7, #28]
}
 8002358:	bf00      	nop
 800235a:	bf00      	nop
 800235c:	e7fd      	b.n	800235a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800235e:	2348      	movs	r3, #72	@ 0x48
 8002360:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2b48      	cmp	r3, #72	@ 0x48
 8002366:	d00b      	beq.n	8002380 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800236c:	f383 8811 	msr	BASEPRI, r3
 8002370:	f3bf 8f6f 	isb	sy
 8002374:	f3bf 8f4f 	dsb	sy
 8002378:	61bb      	str	r3, [r7, #24]
}
 800237a:	bf00      	nop
 800237c:	bf00      	nop
 800237e:	e7fd      	b.n	800237c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002380:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00d      	beq.n	80023a8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800238c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002394:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	4613      	mov	r3, r2
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 f840 	bl	8002428 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80023a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3730      	adds	r7, #48	@ 0x30
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b08a      	sub	sp, #40	@ 0x28
 80023b6:	af02      	add	r7, sp, #8
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	4613      	mov	r3, r2
 80023be:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10b      	bne.n	80023de <xQueueGenericCreate+0x2c>
	__asm volatile
 80023c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023ca:	f383 8811 	msr	BASEPRI, r3
 80023ce:	f3bf 8f6f 	isb	sy
 80023d2:	f3bf 8f4f 	dsb	sy
 80023d6:	613b      	str	r3, [r7, #16]
}
 80023d8:	bf00      	nop
 80023da:	bf00      	nop
 80023dc:	e7fd      	b.n	80023da <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	fb02 f303 	mul.w	r3, r2, r3
 80023e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	3348      	adds	r3, #72	@ 0x48
 80023ec:	4618      	mov	r0, r3
 80023ee:	f001 fe5d 	bl	80040ac <pvPortMalloc>
 80023f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d011      	beq.n	800241e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	3348      	adds	r3, #72	@ 0x48
 8002402:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800240c:	79fa      	ldrb	r2, [r7, #7]
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	4613      	mov	r3, r2
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	68b9      	ldr	r1, [r7, #8]
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 f805 	bl	8002428 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800241e:	69bb      	ldr	r3, [r7, #24]
	}
 8002420:	4618      	mov	r0, r3
 8002422:	3720      	adds	r7, #32
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d103      	bne.n	8002444 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	e002      	b.n	800244a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002456:	2101      	movs	r1, #1
 8002458:	69b8      	ldr	r0, [r7, #24]
 800245a:	f7ff fec3 	bl	80021e4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08e      	sub	sp, #56	@ 0x38
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002476:	2300      	movs	r3, #0
 8002478:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800247e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10b      	bne.n	800249c <xQueueGenericSend+0x34>
	__asm volatile
 8002484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002488:	f383 8811 	msr	BASEPRI, r3
 800248c:	f3bf 8f6f 	isb	sy
 8002490:	f3bf 8f4f 	dsb	sy
 8002494:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002496:	bf00      	nop
 8002498:	bf00      	nop
 800249a:	e7fd      	b.n	8002498 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d103      	bne.n	80024aa <xQueueGenericSend+0x42>
 80024a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <xQueueGenericSend+0x46>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <xQueueGenericSend+0x48>
 80024ae:	2300      	movs	r3, #0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10b      	bne.n	80024cc <xQueueGenericSend+0x64>
	__asm volatile
 80024b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024b8:	f383 8811 	msr	BASEPRI, r3
 80024bc:	f3bf 8f6f 	isb	sy
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80024c6:	bf00      	nop
 80024c8:	bf00      	nop
 80024ca:	e7fd      	b.n	80024c8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d103      	bne.n	80024da <xQueueGenericSend+0x72>
 80024d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <xQueueGenericSend+0x76>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <xQueueGenericSend+0x78>
 80024de:	2300      	movs	r3, #0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10b      	bne.n	80024fc <xQueueGenericSend+0x94>
	__asm volatile
 80024e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024e8:	f383 8811 	msr	BASEPRI, r3
 80024ec:	f3bf 8f6f 	isb	sy
 80024f0:	f3bf 8f4f 	dsb	sy
 80024f4:	623b      	str	r3, [r7, #32]
}
 80024f6:	bf00      	nop
 80024f8:	bf00      	nop
 80024fa:	e7fd      	b.n	80024f8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024fc:	f001 f95e 	bl	80037bc <xTaskGetSchedulerState>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d102      	bne.n	800250c <xQueueGenericSend+0xa4>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <xQueueGenericSend+0xa8>
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <xQueueGenericSend+0xaa>
 8002510:	2300      	movs	r3, #0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10b      	bne.n	800252e <xQueueGenericSend+0xc6>
	__asm volatile
 8002516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800251a:	f383 8811 	msr	BASEPRI, r3
 800251e:	f3bf 8f6f 	isb	sy
 8002522:	f3bf 8f4f 	dsb	sy
 8002526:	61fb      	str	r3, [r7, #28]
}
 8002528:	bf00      	nop
 800252a:	bf00      	nop
 800252c:	e7fd      	b.n	800252a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800252e:	f001 fc9b 	bl	8003e68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002534:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800253a:	429a      	cmp	r2, r3
 800253c:	d302      	bcc.n	8002544 <xQueueGenericSend+0xdc>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d129      	bne.n	8002598 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	68b9      	ldr	r1, [r7, #8]
 8002548:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800254a:	f000 fa47 	bl	80029dc <prvCopyDataToQueue>
 800254e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002554:	2b00      	cmp	r3, #0
 8002556:	d010      	beq.n	800257a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800255a:	3324      	adds	r3, #36	@ 0x24
 800255c:	4618      	mov	r0, r3
 800255e:	f000 ff67 	bl	8003430 <xTaskRemoveFromEventList>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d013      	beq.n	8002590 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002568:	4b3f      	ldr	r3, [pc, #252]	@ (8002668 <xQueueGenericSend+0x200>)
 800256a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	f3bf 8f4f 	dsb	sy
 8002574:	f3bf 8f6f 	isb	sy
 8002578:	e00a      	b.n	8002590 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800257a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002580:	4b39      	ldr	r3, [pc, #228]	@ (8002668 <xQueueGenericSend+0x200>)
 8002582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	f3bf 8f4f 	dsb	sy
 800258c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002590:	f001 fc9c 	bl	8003ecc <vPortExitCritical>
				return pdPASS;
 8002594:	2301      	movs	r3, #1
 8002596:	e063      	b.n	8002660 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d103      	bne.n	80025a6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800259e:	f001 fc95 	bl	8003ecc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e05c      	b.n	8002660 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d106      	bne.n	80025ba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 ffa1 	bl	80034f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025b6:	2301      	movs	r3, #1
 80025b8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025ba:	f001 fc87 	bl	8003ecc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80025be:	f000 fd47 	bl	8003050 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025c2:	f001 fc51 	bl	8003e68 <vPortEnterCritical>
 80025c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025cc:	b25b      	sxtb	r3, r3
 80025ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d2:	d103      	bne.n	80025dc <xQueueGenericSend+0x174>
 80025d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80025e2:	b25b      	sxtb	r3, r3
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e8:	d103      	bne.n	80025f2 <xQueueGenericSend+0x18a>
 80025ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025f2:	f001 fc6b 	bl	8003ecc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025f6:	1d3a      	adds	r2, r7, #4
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 ff90 	bl	8003524 <xTaskCheckForTimeOut>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d124      	bne.n	8002654 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800260a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800260c:	f000 fab8 	bl	8002b80 <prvIsQueueFull>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d018      	beq.n	8002648 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002618:	3310      	adds	r3, #16
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4611      	mov	r1, r2
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fee0 	bl	80033e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002624:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002626:	f000 fa43 	bl	8002ab0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800262a:	f000 fd1f 	bl	800306c <xTaskResumeAll>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	f47f af7c 	bne.w	800252e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002636:	4b0c      	ldr	r3, [pc, #48]	@ (8002668 <xQueueGenericSend+0x200>)
 8002638:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	f3bf 8f6f 	isb	sy
 8002646:	e772      	b.n	800252e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002648:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800264a:	f000 fa31 	bl	8002ab0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800264e:	f000 fd0d 	bl	800306c <xTaskResumeAll>
 8002652:	e76c      	b.n	800252e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002654:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002656:	f000 fa2b 	bl	8002ab0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800265a:	f000 fd07 	bl	800306c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800265e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002660:	4618      	mov	r0, r3
 8002662:	3738      	adds	r7, #56	@ 0x38
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	e000ed04 	.word	0xe000ed04

0800266c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08e      	sub	sp, #56	@ 0x38
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800267a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10b      	bne.n	8002698 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8002680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002684:	f383 8811 	msr	BASEPRI, r3
 8002688:	f3bf 8f6f 	isb	sy
 800268c:	f3bf 8f4f 	dsb	sy
 8002690:	623b      	str	r3, [r7, #32]
}
 8002692:	bf00      	nop
 8002694:	bf00      	nop
 8002696:	e7fd      	b.n	8002694 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800269a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00b      	beq.n	80026b8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80026a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026a4:	f383 8811 	msr	BASEPRI, r3
 80026a8:	f3bf 8f6f 	isb	sy
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	61fb      	str	r3, [r7, #28]
}
 80026b2:	bf00      	nop
 80026b4:	bf00      	nop
 80026b6:	e7fd      	b.n	80026b4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80026b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d103      	bne.n	80026c8 <xQueueGiveFromISR+0x5c>
 80026c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <xQueueGiveFromISR+0x60>
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <xQueueGiveFromISR+0x62>
 80026cc:	2300      	movs	r3, #0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10b      	bne.n	80026ea <xQueueGiveFromISR+0x7e>
	__asm volatile
 80026d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026d6:	f383 8811 	msr	BASEPRI, r3
 80026da:	f3bf 8f6f 	isb	sy
 80026de:	f3bf 8f4f 	dsb	sy
 80026e2:	61bb      	str	r3, [r7, #24]
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	e7fd      	b.n	80026e6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026ea:	f001 fc9d 	bl	8004028 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80026ee:	f3ef 8211 	mrs	r2, BASEPRI
 80026f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026f6:	f383 8811 	msr	BASEPRI, r3
 80026fa:	f3bf 8f6f 	isb	sy
 80026fe:	f3bf 8f4f 	dsb	sy
 8002702:	617a      	str	r2, [r7, #20]
 8002704:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002706:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002708:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800270a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800270c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800270e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002714:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002716:	429a      	cmp	r2, r3
 8002718:	d22b      	bcs.n	8002772 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800271a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800271c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002720:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800272c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002734:	d112      	bne.n	800275c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273a:	2b00      	cmp	r3, #0
 800273c:	d016      	beq.n	800276c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800273e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002740:	3324      	adds	r3, #36	@ 0x24
 8002742:	4618      	mov	r0, r3
 8002744:	f000 fe74 	bl	8003430 <xTaskRemoveFromEventList>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00e      	beq.n	800276c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00b      	beq.n	800276c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	2201      	movs	r2, #1
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	e007      	b.n	800276c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800275c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002760:	3301      	adds	r3, #1
 8002762:	b2db      	uxtb	r3, r3
 8002764:	b25a      	sxtb	r2, r3
 8002766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002768:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800276c:	2301      	movs	r3, #1
 800276e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002770:	e001      	b.n	8002776 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002772:	2300      	movs	r3, #0
 8002774:	637b      	str	r3, [r7, #52]	@ 0x34
 8002776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002778:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002780:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002784:	4618      	mov	r0, r3
 8002786:	3738      	adds	r7, #56	@ 0x38
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08e      	sub	sp, #56	@ 0x38
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002796:	2300      	movs	r3, #0
 8002798:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800279e:	2300      	movs	r3, #0
 80027a0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80027a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10b      	bne.n	80027c0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80027a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027ac:	f383 8811 	msr	BASEPRI, r3
 80027b0:	f3bf 8f6f 	isb	sy
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	623b      	str	r3, [r7, #32]
}
 80027ba:	bf00      	nop
 80027bc:	bf00      	nop
 80027be:	e7fd      	b.n	80027bc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80027c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00b      	beq.n	80027e0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80027c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027cc:	f383 8811 	msr	BASEPRI, r3
 80027d0:	f3bf 8f6f 	isb	sy
 80027d4:	f3bf 8f4f 	dsb	sy
 80027d8:	61fb      	str	r3, [r7, #28]
}
 80027da:	bf00      	nop
 80027dc:	bf00      	nop
 80027de:	e7fd      	b.n	80027dc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027e0:	f000 ffec 	bl	80037bc <xTaskGetSchedulerState>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d102      	bne.n	80027f0 <xQueueSemaphoreTake+0x64>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <xQueueSemaphoreTake+0x68>
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <xQueueSemaphoreTake+0x6a>
 80027f4:	2300      	movs	r3, #0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10b      	bne.n	8002812 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80027fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027fe:	f383 8811 	msr	BASEPRI, r3
 8002802:	f3bf 8f6f 	isb	sy
 8002806:	f3bf 8f4f 	dsb	sy
 800280a:	61bb      	str	r3, [r7, #24]
}
 800280c:	bf00      	nop
 800280e:	bf00      	nop
 8002810:	e7fd      	b.n	800280e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002812:	f001 fb29 	bl	8003e68 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800281a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800281c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800281e:	2b00      	cmp	r3, #0
 8002820:	d024      	beq.n	800286c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002824:	1e5a      	subs	r2, r3, #1
 8002826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002828:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800282a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d104      	bne.n	800283c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002832:	f001 f96f 	bl	8003b14 <pvTaskIncrementMutexHeldCount>
 8002836:	4602      	mov	r2, r0
 8002838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800283a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800283c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00f      	beq.n	8002864 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002846:	3310      	adds	r3, #16
 8002848:	4618      	mov	r0, r3
 800284a:	f000 fdf1 	bl	8003430 <xTaskRemoveFromEventList>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d007      	beq.n	8002864 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002854:	4b54      	ldr	r3, [pc, #336]	@ (80029a8 <xQueueSemaphoreTake+0x21c>)
 8002856:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	f3bf 8f4f 	dsb	sy
 8002860:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002864:	f001 fb32 	bl	8003ecc <vPortExitCritical>
				return pdPASS;
 8002868:	2301      	movs	r3, #1
 800286a:	e098      	b.n	800299e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d112      	bne.n	8002898 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00b      	beq.n	8002890 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8002878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800287c:	f383 8811 	msr	BASEPRI, r3
 8002880:	f3bf 8f6f 	isb	sy
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	617b      	str	r3, [r7, #20]
}
 800288a:	bf00      	nop
 800288c:	bf00      	nop
 800288e:	e7fd      	b.n	800288c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002890:	f001 fb1c 	bl	8003ecc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002894:	2300      	movs	r3, #0
 8002896:	e082      	b.n	800299e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800289a:	2b00      	cmp	r3, #0
 800289c:	d106      	bne.n	80028ac <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800289e:	f107 030c 	add.w	r3, r7, #12
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 fe28 	bl	80034f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028a8:	2301      	movs	r3, #1
 80028aa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028ac:	f001 fb0e 	bl	8003ecc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028b0:	f000 fbce 	bl	8003050 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028b4:	f001 fad8 	bl	8003e68 <vPortEnterCritical>
 80028b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80028be:	b25b      	sxtb	r3, r3
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c4:	d103      	bne.n	80028ce <xQueueSemaphoreTake+0x142>
 80028c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80028d4:	b25b      	sxtb	r3, r3
 80028d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028da:	d103      	bne.n	80028e4 <xQueueSemaphoreTake+0x158>
 80028dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028e4:	f001 faf2 	bl	8003ecc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028e8:	463a      	mov	r2, r7
 80028ea:	f107 030c 	add.w	r3, r7, #12
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f000 fe17 	bl	8003524 <xTaskCheckForTimeOut>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d132      	bne.n	8002962 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80028fe:	f000 f929 	bl	8002b54 <prvIsQueueEmpty>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d026      	beq.n	8002956 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d109      	bne.n	8002924 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8002910:	f001 faaa 	bl	8003e68 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	4618      	mov	r0, r3
 800291a:	f000 ff6d 	bl	80037f8 <xTaskPriorityInherit>
 800291e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8002920:	f001 fad4 	bl	8003ecc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002926:	3324      	adds	r3, #36	@ 0x24
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	4611      	mov	r1, r2
 800292c:	4618      	mov	r0, r3
 800292e:	f000 fd59 	bl	80033e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002932:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002934:	f000 f8bc 	bl	8002ab0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002938:	f000 fb98 	bl	800306c <xTaskResumeAll>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	f47f af67 	bne.w	8002812 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8002944:	4b18      	ldr	r3, [pc, #96]	@ (80029a8 <xQueueSemaphoreTake+0x21c>)
 8002946:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	f3bf 8f4f 	dsb	sy
 8002950:	f3bf 8f6f 	isb	sy
 8002954:	e75d      	b.n	8002812 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002956:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002958:	f000 f8aa 	bl	8002ab0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800295c:	f000 fb86 	bl	800306c <xTaskResumeAll>
 8002960:	e757      	b.n	8002812 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002962:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002964:	f000 f8a4 	bl	8002ab0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002968:	f000 fb80 	bl	800306c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800296c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800296e:	f000 f8f1 	bl	8002b54 <prvIsQueueEmpty>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	f43f af4c 	beq.w	8002812 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800297a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00d      	beq.n	800299c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8002980:	f001 fa72 	bl	8003e68 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002984:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002986:	f000 f811 	bl	80029ac <prvGetDisinheritPriorityAfterTimeout>
 800298a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800298c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002992:	4618      	mov	r0, r3
 8002994:	f001 f82e 	bl	80039f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002998:	f001 fa98 	bl	8003ecc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800299c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3738      	adds	r7, #56	@ 0x38
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	e000ed04 	.word	0xe000ed04

080029ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d006      	beq.n	80029ca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f1c3 0307 	rsb	r3, r3, #7
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	e001      	b.n	80029ce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80029ce:	68fb      	ldr	r3, [r7, #12]
	}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10d      	bne.n	8002a16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d14d      	bne.n	8002a9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 ff6c 	bl	80038e4 <xTaskPriorityDisinherit>
 8002a0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	e043      	b.n	8002a9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d119      	bne.n	8002a50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6858      	ldr	r0, [r3, #4]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a24:	461a      	mov	r2, r3
 8002a26:	68b9      	ldr	r1, [r7, #8]
 8002a28:	f001 fdb2 	bl	8004590 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a34:	441a      	add	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d32b      	bcc.n	8002a9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	e026      	b.n	8002a9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	68d8      	ldr	r0, [r3, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	461a      	mov	r2, r3
 8002a5a:	68b9      	ldr	r1, [r7, #8]
 8002a5c:	f001 fd98 	bl	8004590 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a68:	425b      	negs	r3, r3
 8002a6a:	441a      	add	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d207      	bcs.n	8002a8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a84:	425b      	negs	r3, r3
 8002a86:	441a      	add	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d105      	bne.n	8002a9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002aa6:	697b      	ldr	r3, [r7, #20]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ab8:	f001 f9d6 	bl	8003e68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ac2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ac4:	e011      	b.n	8002aea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d012      	beq.n	8002af4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3324      	adds	r3, #36	@ 0x24
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 fcac 	bl	8003430 <xTaskRemoveFromEventList>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002ade:	f000 fd85 	bl	80035ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	dce9      	bgt.n	8002ac6 <prvUnlockQueue+0x16>
 8002af2:	e000      	b.n	8002af6 <prvUnlockQueue+0x46>
					break;
 8002af4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	22ff      	movs	r2, #255	@ 0xff
 8002afa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002afe:	f001 f9e5 	bl	8003ecc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002b02:	f001 f9b1 	bl	8003e68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b0e:	e011      	b.n	8002b34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d012      	beq.n	8002b3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3310      	adds	r3, #16
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 fc87 	bl	8003430 <xTaskRemoveFromEventList>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002b28:	f000 fd60 	bl	80035ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002b2c:	7bbb      	ldrb	r3, [r7, #14]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	dce9      	bgt.n	8002b10 <prvUnlockQueue+0x60>
 8002b3c:	e000      	b.n	8002b40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002b3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	22ff      	movs	r2, #255	@ 0xff
 8002b44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002b48:	f001 f9c0 	bl	8003ecc <vPortExitCritical>
}
 8002b4c:	bf00      	nop
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b5c:	f001 f984 	bl	8003e68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d102      	bne.n	8002b6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	e001      	b.n	8002b72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b72:	f001 f9ab 	bl	8003ecc <vPortExitCritical>

	return xReturn;
 8002b76:	68fb      	ldr	r3, [r7, #12]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b88:	f001 f96e 	bl	8003e68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d102      	bne.n	8002b9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	e001      	b.n	8002ba2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ba2:	f001 f993 	bl	8003ecc <vPortExitCritical>

	return xReturn;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08e      	sub	sp, #56	@ 0x38
 8002bb4:	af04      	add	r7, sp, #16
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002bbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10b      	bne.n	8002bdc <xTaskCreateStatic+0x2c>
	__asm volatile
 8002bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bc8:	f383 8811 	msr	BASEPRI, r3
 8002bcc:	f3bf 8f6f 	isb	sy
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	623b      	str	r3, [r7, #32]
}
 8002bd6:	bf00      	nop
 8002bd8:	bf00      	nop
 8002bda:	e7fd      	b.n	8002bd8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10b      	bne.n	8002bfa <xTaskCreateStatic+0x4a>
	__asm volatile
 8002be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002be6:	f383 8811 	msr	BASEPRI, r3
 8002bea:	f3bf 8f6f 	isb	sy
 8002bee:	f3bf 8f4f 	dsb	sy
 8002bf2:	61fb      	str	r3, [r7, #28]
}
 8002bf4:	bf00      	nop
 8002bf6:	bf00      	nop
 8002bf8:	e7fd      	b.n	8002bf6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002bfa:	23a0      	movs	r3, #160	@ 0xa0
 8002bfc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	2ba0      	cmp	r3, #160	@ 0xa0
 8002c02:	d00b      	beq.n	8002c1c <xTaskCreateStatic+0x6c>
	__asm volatile
 8002c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c08:	f383 8811 	msr	BASEPRI, r3
 8002c0c:	f3bf 8f6f 	isb	sy
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	61bb      	str	r3, [r7, #24]
}
 8002c16:	bf00      	nop
 8002c18:	bf00      	nop
 8002c1a:	e7fd      	b.n	8002c18 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002c1c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d01e      	beq.n	8002c62 <xTaskCreateStatic+0xb2>
 8002c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d01b      	beq.n	8002c62 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c2c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c32:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	9303      	str	r3, [sp, #12]
 8002c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c42:	9302      	str	r3, [sp, #8]
 8002c44:	f107 0314 	add.w	r3, r7, #20
 8002c48:	9301      	str	r3, [sp, #4]
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	68b9      	ldr	r1, [r7, #8]
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 f851 	bl	8002cfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002c5c:	f000 f8ee 	bl	8002e3c <prvAddNewTaskToReadyList>
 8002c60:	e001      	b.n	8002c66 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c66:	697b      	ldr	r3, [r7, #20]
	}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3728      	adds	r7, #40	@ 0x28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08c      	sub	sp, #48	@ 0x30
 8002c74:	af04      	add	r7, sp, #16
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c80:	88fb      	ldrh	r3, [r7, #6]
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f001 fa11 	bl	80040ac <pvPortMalloc>
 8002c8a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00e      	beq.n	8002cb0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c92:	20a0      	movs	r0, #160	@ 0xa0
 8002c94:	f001 fa0a 	bl	80040ac <pvPortMalloc>
 8002c98:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ca6:	e005      	b.n	8002cb4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002ca8:	6978      	ldr	r0, [r7, #20]
 8002caa:	f001 facd 	bl	8004248 <vPortFree>
 8002cae:	e001      	b.n	8002cb4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d017      	beq.n	8002cea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cc2:	88fa      	ldrh	r2, [r7, #6]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	9303      	str	r3, [sp, #12]
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	9302      	str	r3, [sp, #8]
 8002ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cce:	9301      	str	r3, [sp, #4]
 8002cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68b9      	ldr	r1, [r7, #8]
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 f80f 	bl	8002cfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002cde:	69f8      	ldr	r0, [r7, #28]
 8002ce0:	f000 f8ac 	bl	8002e3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	61bb      	str	r3, [r7, #24]
 8002ce8:	e002      	b.n	8002cf0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002cea:	f04f 33ff 	mov.w	r3, #4294967295
 8002cee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002cf0:	69bb      	ldr	r3, [r7, #24]
	}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3720      	adds	r7, #32
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
 8002d08:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d14:	3b01      	subs	r3, #1
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	f023 0307 	bic.w	r3, r3, #7
 8002d22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00b      	beq.n	8002d46 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d32:	f383 8811 	msr	BASEPRI, r3
 8002d36:	f3bf 8f6f 	isb	sy
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	617b      	str	r3, [r7, #20]
}
 8002d40:	bf00      	nop
 8002d42:	bf00      	nop
 8002d44:	e7fd      	b.n	8002d42 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01f      	beq.n	8002d8c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	e012      	b.n	8002d78 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	4413      	add	r3, r2
 8002d58:	7819      	ldrb	r1, [r3, #0]
 8002d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	4413      	add	r3, r2
 8002d60:	3334      	adds	r3, #52	@ 0x34
 8002d62:	460a      	mov	r2, r1
 8002d64:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d006      	beq.n	8002d80 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3301      	adds	r3, #1
 8002d76:	61fb      	str	r3, [r7, #28]
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	2b0f      	cmp	r3, #15
 8002d7c:	d9e9      	bls.n	8002d52 <prvInitialiseNewTask+0x56>
 8002d7e:	e000      	b.n	8002d82 <prvInitialiseNewTask+0x86>
			{
				break;
 8002d80:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d8a:	e003      	b.n	8002d94 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d96:	2b06      	cmp	r3, #6
 8002d98:	d901      	bls.n	8002d9e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d9a:	2306      	movs	r3, #6
 8002d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002da2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002da8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dac:	2200      	movs	r2, #0
 8002dae:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db2:	3304      	adds	r3, #4
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff f980 	bl	80020ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dbc:	3318      	adds	r3, #24
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff f97b 	bl	80020ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dc8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dcc:	f1c3 0207 	rsb	r2, r3, #7
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dd8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dec:	334c      	adds	r3, #76	@ 0x4c
 8002dee:	224c      	movs	r2, #76	@ 0x4c
 8002df0:	2100      	movs	r1, #0
 8002df2:	4618      	mov	r0, r3
 8002df4:	f001 fb48 	bl	8004488 <memset>
 8002df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfa:	4a0d      	ldr	r2, [pc, #52]	@ (8002e30 <prvInitialiseNewTask+0x134>)
 8002dfc:	651a      	str	r2, [r3, #80]	@ 0x50
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e00:	4a0c      	ldr	r2, [pc, #48]	@ (8002e34 <prvInitialiseNewTask+0x138>)
 8002e02:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e06:	4a0c      	ldr	r2, [pc, #48]	@ (8002e38 <prvInitialiseNewTask+0x13c>)
 8002e08:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	68f9      	ldr	r1, [r7, #12]
 8002e0e:	69b8      	ldr	r0, [r7, #24]
 8002e10:	f000 fefa 	bl	8003c08 <pxPortInitialiseStack>
 8002e14:	4602      	mov	r2, r0
 8002e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e26:	bf00      	nop
 8002e28:	3720      	adds	r7, #32
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	200040cc 	.word	0x200040cc
 8002e34:	20004134 	.word	0x20004134
 8002e38:	2000419c 	.word	0x2000419c

08002e3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e44:	f001 f810 	bl	8003e68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e48:	4b2a      	ldr	r3, [pc, #168]	@ (8002ef4 <prvAddNewTaskToReadyList+0xb8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	4a29      	ldr	r2, [pc, #164]	@ (8002ef4 <prvAddNewTaskToReadyList+0xb8>)
 8002e50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e52:	4b29      	ldr	r3, [pc, #164]	@ (8002ef8 <prvAddNewTaskToReadyList+0xbc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d109      	bne.n	8002e6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e5a:	4a27      	ldr	r2, [pc, #156]	@ (8002ef8 <prvAddNewTaskToReadyList+0xbc>)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e60:	4b24      	ldr	r3, [pc, #144]	@ (8002ef4 <prvAddNewTaskToReadyList+0xb8>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d110      	bne.n	8002e8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e68:	f000 fbe4 	bl	8003634 <prvInitialiseTaskLists>
 8002e6c:	e00d      	b.n	8002e8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e6e:	4b23      	ldr	r3, [pc, #140]	@ (8002efc <prvAddNewTaskToReadyList+0xc0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d109      	bne.n	8002e8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e76:	4b20      	ldr	r3, [pc, #128]	@ (8002ef8 <prvAddNewTaskToReadyList+0xbc>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d802      	bhi.n	8002e8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e84:	4a1c      	ldr	r2, [pc, #112]	@ (8002ef8 <prvAddNewTaskToReadyList+0xbc>)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002f00 <prvAddNewTaskToReadyList+0xc4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	4a1b      	ldr	r2, [pc, #108]	@ (8002f00 <prvAddNewTaskToReadyList+0xc4>)
 8002e92:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e98:	2201      	movs	r2, #1
 8002e9a:	409a      	lsls	r2, r3
 8002e9c:	4b19      	ldr	r3, [pc, #100]	@ (8002f04 <prvAddNewTaskToReadyList+0xc8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	4a18      	ldr	r2, [pc, #96]	@ (8002f04 <prvAddNewTaskToReadyList+0xc8>)
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4a15      	ldr	r2, [pc, #84]	@ (8002f08 <prvAddNewTaskToReadyList+0xcc>)
 8002eb4:	441a      	add	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	f7ff f909 	bl	80020d4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002ec2:	f001 f803 	bl	8003ecc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8002efc <prvAddNewTaskToReadyList+0xc0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00e      	beq.n	8002eec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ece:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef8 <prvAddNewTaskToReadyList+0xbc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d207      	bcs.n	8002eec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002edc:	4b0b      	ldr	r3, [pc, #44]	@ (8002f0c <prvAddNewTaskToReadyList+0xd0>)
 8002ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002eec:	bf00      	nop
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20000478 	.word	0x20000478
 8002ef8:	20000378 	.word	0x20000378
 8002efc:	20000484 	.word	0x20000484
 8002f00:	20000494 	.word	0x20000494
 8002f04:	20000480 	.word	0x20000480
 8002f08:	2000037c 	.word	0x2000037c
 8002f0c:	e000ed04 	.word	0xe000ed04

08002f10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d018      	beq.n	8002f54 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f22:	4b14      	ldr	r3, [pc, #80]	@ (8002f74 <vTaskDelay+0x64>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00b      	beq.n	8002f42 <vTaskDelay+0x32>
	__asm volatile
 8002f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	60bb      	str	r3, [r7, #8]
}
 8002f3c:	bf00      	nop
 8002f3e:	bf00      	nop
 8002f40:	e7fd      	b.n	8002f3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002f42:	f000 f885 	bl	8003050 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f46:	2100      	movs	r1, #0
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 fdf7 	bl	8003b3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f4e:	f000 f88d 	bl	800306c <xTaskResumeAll>
 8002f52:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d107      	bne.n	8002f6a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002f5a:	4b07      	ldr	r3, [pc, #28]	@ (8002f78 <vTaskDelay+0x68>)
 8002f5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	f3bf 8f4f 	dsb	sy
 8002f66:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f6a:	bf00      	nop
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	200004a0 	.word	0x200004a0
 8002f78:	e000ed04 	.word	0xe000ed04

08002f7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08a      	sub	sp, #40	@ 0x28
 8002f80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f8a:	463a      	mov	r2, r7
 8002f8c:	1d39      	adds	r1, r7, #4
 8002f8e:	f107 0308 	add.w	r3, r7, #8
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fd fa94 	bl	80004c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f98:	6839      	ldr	r1, [r7, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	9202      	str	r2, [sp, #8]
 8002fa0:	9301      	str	r3, [sp, #4]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	460a      	mov	r2, r1
 8002faa:	4921      	ldr	r1, [pc, #132]	@ (8003030 <vTaskStartScheduler+0xb4>)
 8002fac:	4821      	ldr	r0, [pc, #132]	@ (8003034 <vTaskStartScheduler+0xb8>)
 8002fae:	f7ff fdff 	bl	8002bb0 <xTaskCreateStatic>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	4a20      	ldr	r2, [pc, #128]	@ (8003038 <vTaskStartScheduler+0xbc>)
 8002fb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8003038 <vTaskStartScheduler+0xbc>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d002      	beq.n	8002fc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	e001      	b.n	8002fca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d11b      	bne.n	8003008 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fd4:	f383 8811 	msr	BASEPRI, r3
 8002fd8:	f3bf 8f6f 	isb	sy
 8002fdc:	f3bf 8f4f 	dsb	sy
 8002fe0:	613b      	str	r3, [r7, #16]
}
 8002fe2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002fe4:	4b15      	ldr	r3, [pc, #84]	@ (800303c <vTaskStartScheduler+0xc0>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	334c      	adds	r3, #76	@ 0x4c
 8002fea:	4a15      	ldr	r2, [pc, #84]	@ (8003040 <vTaskStartScheduler+0xc4>)
 8002fec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002fee:	4b15      	ldr	r3, [pc, #84]	@ (8003044 <vTaskStartScheduler+0xc8>)
 8002ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002ff6:	4b14      	ldr	r3, [pc, #80]	@ (8003048 <vTaskStartScheduler+0xcc>)
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ffc:	4b13      	ldr	r3, [pc, #76]	@ (800304c <vTaskStartScheduler+0xd0>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003002:	f000 fe8d 	bl	8003d20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003006:	e00f      	b.n	8003028 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300e:	d10b      	bne.n	8003028 <vTaskStartScheduler+0xac>
	__asm volatile
 8003010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003014:	f383 8811 	msr	BASEPRI, r3
 8003018:	f3bf 8f6f 	isb	sy
 800301c:	f3bf 8f4f 	dsb	sy
 8003020:	60fb      	str	r3, [r7, #12]
}
 8003022:	bf00      	nop
 8003024:	bf00      	nop
 8003026:	e7fd      	b.n	8003024 <vTaskStartScheduler+0xa8>
}
 8003028:	bf00      	nop
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	080046b8 	.word	0x080046b8
 8003034:	08003605 	.word	0x08003605
 8003038:	2000049c 	.word	0x2000049c
 800303c:	20000378 	.word	0x20000378
 8003040:	20000010 	.word	0x20000010
 8003044:	20000498 	.word	0x20000498
 8003048:	20000484 	.word	0x20000484
 800304c:	2000047c 	.word	0x2000047c

08003050 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003054:	4b04      	ldr	r3, [pc, #16]	@ (8003068 <vTaskSuspendAll+0x18>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3301      	adds	r3, #1
 800305a:	4a03      	ldr	r2, [pc, #12]	@ (8003068 <vTaskSuspendAll+0x18>)
 800305c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800305e:	bf00      	nop
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	200004a0 	.word	0x200004a0

0800306c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003076:	2300      	movs	r3, #0
 8003078:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800307a:	4b42      	ldr	r3, [pc, #264]	@ (8003184 <xTaskResumeAll+0x118>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10b      	bne.n	800309a <xTaskResumeAll+0x2e>
	__asm volatile
 8003082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003086:	f383 8811 	msr	BASEPRI, r3
 800308a:	f3bf 8f6f 	isb	sy
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	603b      	str	r3, [r7, #0]
}
 8003094:	bf00      	nop
 8003096:	bf00      	nop
 8003098:	e7fd      	b.n	8003096 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800309a:	f000 fee5 	bl	8003e68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800309e:	4b39      	ldr	r3, [pc, #228]	@ (8003184 <xTaskResumeAll+0x118>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	4a37      	ldr	r2, [pc, #220]	@ (8003184 <xTaskResumeAll+0x118>)
 80030a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030a8:	4b36      	ldr	r3, [pc, #216]	@ (8003184 <xTaskResumeAll+0x118>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d161      	bne.n	8003174 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030b0:	4b35      	ldr	r3, [pc, #212]	@ (8003188 <xTaskResumeAll+0x11c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d05d      	beq.n	8003174 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030b8:	e02e      	b.n	8003118 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030ba:	4b34      	ldr	r3, [pc, #208]	@ (800318c <xTaskResumeAll+0x120>)
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	3318      	adds	r3, #24
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff f861 	bl	800218e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	3304      	adds	r3, #4
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff f85c 	bl	800218e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030da:	2201      	movs	r2, #1
 80030dc:	409a      	lsls	r2, r3
 80030de:	4b2c      	ldr	r3, [pc, #176]	@ (8003190 <xTaskResumeAll+0x124>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	4a2a      	ldr	r2, [pc, #168]	@ (8003190 <xTaskResumeAll+0x124>)
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4a27      	ldr	r2, [pc, #156]	@ (8003194 <xTaskResumeAll+0x128>)
 80030f6:	441a      	add	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	3304      	adds	r3, #4
 80030fc:	4619      	mov	r1, r3
 80030fe:	4610      	mov	r0, r2
 8003100:	f7fe ffe8 	bl	80020d4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003108:	4b23      	ldr	r3, [pc, #140]	@ (8003198 <xTaskResumeAll+0x12c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310e:	429a      	cmp	r2, r3
 8003110:	d302      	bcc.n	8003118 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003112:	4b22      	ldr	r3, [pc, #136]	@ (800319c <xTaskResumeAll+0x130>)
 8003114:	2201      	movs	r2, #1
 8003116:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003118:	4b1c      	ldr	r3, [pc, #112]	@ (800318c <xTaskResumeAll+0x120>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1cc      	bne.n	80030ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003126:	f000 fb29 	bl	800377c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800312a:	4b1d      	ldr	r3, [pc, #116]	@ (80031a0 <xTaskResumeAll+0x134>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d010      	beq.n	8003158 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003136:	f000 f837 	bl	80031a8 <xTaskIncrementTick>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003140:	4b16      	ldr	r3, [pc, #88]	@ (800319c <xTaskResumeAll+0x130>)
 8003142:	2201      	movs	r2, #1
 8003144:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3b01      	subs	r3, #1
 800314a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f1      	bne.n	8003136 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003152:	4b13      	ldr	r3, [pc, #76]	@ (80031a0 <xTaskResumeAll+0x134>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003158:	4b10      	ldr	r3, [pc, #64]	@ (800319c <xTaskResumeAll+0x130>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d009      	beq.n	8003174 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003160:	2301      	movs	r3, #1
 8003162:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003164:	4b0f      	ldr	r3, [pc, #60]	@ (80031a4 <xTaskResumeAll+0x138>)
 8003166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003174:	f000 feaa 	bl	8003ecc <vPortExitCritical>

	return xAlreadyYielded;
 8003178:	68bb      	ldr	r3, [r7, #8]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	200004a0 	.word	0x200004a0
 8003188:	20000478 	.word	0x20000478
 800318c:	20000438 	.word	0x20000438
 8003190:	20000480 	.word	0x20000480
 8003194:	2000037c 	.word	0x2000037c
 8003198:	20000378 	.word	0x20000378
 800319c:	2000048c 	.word	0x2000048c
 80031a0:	20000488 	.word	0x20000488
 80031a4:	e000ed04 	.word	0xe000ed04

080031a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031b2:	4b4f      	ldr	r3, [pc, #316]	@ (80032f0 <xTaskIncrementTick+0x148>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f040 808f 	bne.w	80032da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031bc:	4b4d      	ldr	r3, [pc, #308]	@ (80032f4 <xTaskIncrementTick+0x14c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3301      	adds	r3, #1
 80031c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80031c4:	4a4b      	ldr	r2, [pc, #300]	@ (80032f4 <xTaskIncrementTick+0x14c>)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d121      	bne.n	8003214 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80031d0:	4b49      	ldr	r3, [pc, #292]	@ (80032f8 <xTaskIncrementTick+0x150>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00b      	beq.n	80031f2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80031da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031de:	f383 8811 	msr	BASEPRI, r3
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	f3bf 8f4f 	dsb	sy
 80031ea:	603b      	str	r3, [r7, #0]
}
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
 80031f0:	e7fd      	b.n	80031ee <xTaskIncrementTick+0x46>
 80031f2:	4b41      	ldr	r3, [pc, #260]	@ (80032f8 <xTaskIncrementTick+0x150>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	4b40      	ldr	r3, [pc, #256]	@ (80032fc <xTaskIncrementTick+0x154>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a3e      	ldr	r2, [pc, #248]	@ (80032f8 <xTaskIncrementTick+0x150>)
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	4a3e      	ldr	r2, [pc, #248]	@ (80032fc <xTaskIncrementTick+0x154>)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	4b3e      	ldr	r3, [pc, #248]	@ (8003300 <xTaskIncrementTick+0x158>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	3301      	adds	r3, #1
 800320c:	4a3c      	ldr	r2, [pc, #240]	@ (8003300 <xTaskIncrementTick+0x158>)
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	f000 fab4 	bl	800377c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003214:	4b3b      	ldr	r3, [pc, #236]	@ (8003304 <xTaskIncrementTick+0x15c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	429a      	cmp	r2, r3
 800321c:	d348      	bcc.n	80032b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800321e:	4b36      	ldr	r3, [pc, #216]	@ (80032f8 <xTaskIncrementTick+0x150>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d104      	bne.n	8003232 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003228:	4b36      	ldr	r3, [pc, #216]	@ (8003304 <xTaskIncrementTick+0x15c>)
 800322a:	f04f 32ff 	mov.w	r2, #4294967295
 800322e:	601a      	str	r2, [r3, #0]
					break;
 8003230:	e03e      	b.n	80032b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003232:	4b31      	ldr	r3, [pc, #196]	@ (80032f8 <xTaskIncrementTick+0x150>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	429a      	cmp	r2, r3
 8003248:	d203      	bcs.n	8003252 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800324a:	4a2e      	ldr	r2, [pc, #184]	@ (8003304 <xTaskIncrementTick+0x15c>)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003250:	e02e      	b.n	80032b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	3304      	adds	r3, #4
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe ff99 	bl	800218e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003260:	2b00      	cmp	r3, #0
 8003262:	d004      	beq.n	800326e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	3318      	adds	r3, #24
 8003268:	4618      	mov	r0, r3
 800326a:	f7fe ff90 	bl	800218e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003272:	2201      	movs	r2, #1
 8003274:	409a      	lsls	r2, r3
 8003276:	4b24      	ldr	r3, [pc, #144]	@ (8003308 <xTaskIncrementTick+0x160>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4313      	orrs	r3, r2
 800327c:	4a22      	ldr	r2, [pc, #136]	@ (8003308 <xTaskIncrementTick+0x160>)
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4a1f      	ldr	r2, [pc, #124]	@ (800330c <xTaskIncrementTick+0x164>)
 800328e:	441a      	add	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	3304      	adds	r3, #4
 8003294:	4619      	mov	r1, r3
 8003296:	4610      	mov	r0, r2
 8003298:	f7fe ff1c 	bl	80020d4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003310 <xTaskIncrementTick+0x168>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d3b9      	bcc.n	800321e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80032aa:	2301      	movs	r3, #1
 80032ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032ae:	e7b6      	b.n	800321e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80032b0:	4b17      	ldr	r3, [pc, #92]	@ (8003310 <xTaskIncrementTick+0x168>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032b6:	4915      	ldr	r1, [pc, #84]	@ (800330c <xTaskIncrementTick+0x164>)
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d901      	bls.n	80032cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80032c8:	2301      	movs	r3, #1
 80032ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80032cc:	4b11      	ldr	r3, [pc, #68]	@ (8003314 <xTaskIncrementTick+0x16c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d007      	beq.n	80032e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80032d4:	2301      	movs	r3, #1
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	e004      	b.n	80032e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80032da:	4b0f      	ldr	r3, [pc, #60]	@ (8003318 <xTaskIncrementTick+0x170>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	3301      	adds	r3, #1
 80032e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003318 <xTaskIncrementTick+0x170>)
 80032e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80032e4:	697b      	ldr	r3, [r7, #20]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	200004a0 	.word	0x200004a0
 80032f4:	2000047c 	.word	0x2000047c
 80032f8:	20000430 	.word	0x20000430
 80032fc:	20000434 	.word	0x20000434
 8003300:	20000490 	.word	0x20000490
 8003304:	20000498 	.word	0x20000498
 8003308:	20000480 	.word	0x20000480
 800330c:	2000037c 	.word	0x2000037c
 8003310:	20000378 	.word	0x20000378
 8003314:	2000048c 	.word	0x2000048c
 8003318:	20000488 	.word	0x20000488

0800331c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003322:	4b2a      	ldr	r3, [pc, #168]	@ (80033cc <vTaskSwitchContext+0xb0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800332a:	4b29      	ldr	r3, [pc, #164]	@ (80033d0 <vTaskSwitchContext+0xb4>)
 800332c:	2201      	movs	r2, #1
 800332e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003330:	e045      	b.n	80033be <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003332:	4b27      	ldr	r3, [pc, #156]	@ (80033d0 <vTaskSwitchContext+0xb4>)
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003338:	4b26      	ldr	r3, [pc, #152]	@ (80033d4 <vTaskSwitchContext+0xb8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	fab3 f383 	clz	r3, r3
 8003344:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003346:	7afb      	ldrb	r3, [r7, #11]
 8003348:	f1c3 031f 	rsb	r3, r3, #31
 800334c:	617b      	str	r3, [r7, #20]
 800334e:	4922      	ldr	r1, [pc, #136]	@ (80033d8 <vTaskSwitchContext+0xbc>)
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10b      	bne.n	800337a <vTaskSwitchContext+0x5e>
	__asm volatile
 8003362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003366:	f383 8811 	msr	BASEPRI, r3
 800336a:	f3bf 8f6f 	isb	sy
 800336e:	f3bf 8f4f 	dsb	sy
 8003372:	607b      	str	r3, [r7, #4]
}
 8003374:	bf00      	nop
 8003376:	bf00      	nop
 8003378:	e7fd      	b.n	8003376 <vTaskSwitchContext+0x5a>
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4a14      	ldr	r2, [pc, #80]	@ (80033d8 <vTaskSwitchContext+0xbc>)
 8003386:	4413      	add	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	605a      	str	r2, [r3, #4]
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	3308      	adds	r3, #8
 800339c:	429a      	cmp	r2, r3
 800339e:	d104      	bne.n	80033aa <vTaskSwitchContext+0x8e>
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	605a      	str	r2, [r3, #4]
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	4a0a      	ldr	r2, [pc, #40]	@ (80033dc <vTaskSwitchContext+0xc0>)
 80033b2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80033b4:	4b09      	ldr	r3, [pc, #36]	@ (80033dc <vTaskSwitchContext+0xc0>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	334c      	adds	r3, #76	@ 0x4c
 80033ba:	4a09      	ldr	r2, [pc, #36]	@ (80033e0 <vTaskSwitchContext+0xc4>)
 80033bc:	6013      	str	r3, [r2, #0]
}
 80033be:	bf00      	nop
 80033c0:	371c      	adds	r7, #28
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	200004a0 	.word	0x200004a0
 80033d0:	2000048c 	.word	0x2000048c
 80033d4:	20000480 	.word	0x20000480
 80033d8:	2000037c 	.word	0x2000037c
 80033dc:	20000378 	.word	0x20000378
 80033e0:	20000010 	.word	0x20000010

080033e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10b      	bne.n	800340c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80033f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f8:	f383 8811 	msr	BASEPRI, r3
 80033fc:	f3bf 8f6f 	isb	sy
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	60fb      	str	r3, [r7, #12]
}
 8003406:	bf00      	nop
 8003408:	bf00      	nop
 800340a:	e7fd      	b.n	8003408 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800340c:	4b07      	ldr	r3, [pc, #28]	@ (800342c <vTaskPlaceOnEventList+0x48>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	3318      	adds	r3, #24
 8003412:	4619      	mov	r1, r3
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7fe fe81 	bl	800211c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800341a:	2101      	movs	r1, #1
 800341c:	6838      	ldr	r0, [r7, #0]
 800341e:	f000 fb8d 	bl	8003b3c <prvAddCurrentTaskToDelayedList>
}
 8003422:	bf00      	nop
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	20000378 	.word	0x20000378

08003430 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10b      	bne.n	800345e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800344a:	f383 8811 	msr	BASEPRI, r3
 800344e:	f3bf 8f6f 	isb	sy
 8003452:	f3bf 8f4f 	dsb	sy
 8003456:	60fb      	str	r3, [r7, #12]
}
 8003458:	bf00      	nop
 800345a:	bf00      	nop
 800345c:	e7fd      	b.n	800345a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	3318      	adds	r3, #24
 8003462:	4618      	mov	r0, r3
 8003464:	f7fe fe93 	bl	800218e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003468:	4b1d      	ldr	r3, [pc, #116]	@ (80034e0 <xTaskRemoveFromEventList+0xb0>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d11c      	bne.n	80034aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	3304      	adds	r3, #4
 8003474:	4618      	mov	r0, r3
 8003476:	f7fe fe8a 	bl	800218e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347e:	2201      	movs	r2, #1
 8003480:	409a      	lsls	r2, r3
 8003482:	4b18      	ldr	r3, [pc, #96]	@ (80034e4 <xTaskRemoveFromEventList+0xb4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4313      	orrs	r3, r2
 8003488:	4a16      	ldr	r2, [pc, #88]	@ (80034e4 <xTaskRemoveFromEventList+0xb4>)
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4a13      	ldr	r2, [pc, #76]	@ (80034e8 <xTaskRemoveFromEventList+0xb8>)
 800349a:	441a      	add	r2, r3
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	3304      	adds	r3, #4
 80034a0:	4619      	mov	r1, r3
 80034a2:	4610      	mov	r0, r2
 80034a4:	f7fe fe16 	bl	80020d4 <vListInsertEnd>
 80034a8:	e005      	b.n	80034b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	3318      	adds	r3, #24
 80034ae:	4619      	mov	r1, r3
 80034b0:	480e      	ldr	r0, [pc, #56]	@ (80034ec <xTaskRemoveFromEventList+0xbc>)
 80034b2:	f7fe fe0f 	bl	80020d4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ba:	4b0d      	ldr	r3, [pc, #52]	@ (80034f0 <xTaskRemoveFromEventList+0xc0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d905      	bls.n	80034d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80034c4:	2301      	movs	r3, #1
 80034c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80034c8:	4b0a      	ldr	r3, [pc, #40]	@ (80034f4 <xTaskRemoveFromEventList+0xc4>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	e001      	b.n	80034d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80034d4:	697b      	ldr	r3, [r7, #20]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	200004a0 	.word	0x200004a0
 80034e4:	20000480 	.word	0x20000480
 80034e8:	2000037c 	.word	0x2000037c
 80034ec:	20000438 	.word	0x20000438
 80034f0:	20000378 	.word	0x20000378
 80034f4:	2000048c 	.word	0x2000048c

080034f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003500:	4b06      	ldr	r3, [pc, #24]	@ (800351c <vTaskInternalSetTimeOutState+0x24>)
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003508:	4b05      	ldr	r3, [pc, #20]	@ (8003520 <vTaskInternalSetTimeOutState+0x28>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	605a      	str	r2, [r3, #4]
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	20000490 	.word	0x20000490
 8003520:	2000047c 	.word	0x2000047c

08003524 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10b      	bne.n	800354c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003538:	f383 8811 	msr	BASEPRI, r3
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	613b      	str	r3, [r7, #16]
}
 8003546:	bf00      	nop
 8003548:	bf00      	nop
 800354a:	e7fd      	b.n	8003548 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10b      	bne.n	800356a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	60fb      	str	r3, [r7, #12]
}
 8003564:	bf00      	nop
 8003566:	bf00      	nop
 8003568:	e7fd      	b.n	8003566 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800356a:	f000 fc7d 	bl	8003e68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800356e:	4b1d      	ldr	r3, [pc, #116]	@ (80035e4 <xTaskCheckForTimeOut+0xc0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003586:	d102      	bne.n	800358e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003588:	2300      	movs	r3, #0
 800358a:	61fb      	str	r3, [r7, #28]
 800358c:	e023      	b.n	80035d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	4b15      	ldr	r3, [pc, #84]	@ (80035e8 <xTaskCheckForTimeOut+0xc4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d007      	beq.n	80035aa <xTaskCheckForTimeOut+0x86>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d302      	bcc.n	80035aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80035a4:	2301      	movs	r3, #1
 80035a6:	61fb      	str	r3, [r7, #28]
 80035a8:	e015      	b.n	80035d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d20b      	bcs.n	80035cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	1ad2      	subs	r2, r2, r3
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff ff99 	bl	80034f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
 80035ca:	e004      	b.n	80035d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80035d2:	2301      	movs	r3, #1
 80035d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80035d6:	f000 fc79 	bl	8003ecc <vPortExitCritical>

	return xReturn;
 80035da:	69fb      	ldr	r3, [r7, #28]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3720      	adds	r7, #32
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	2000047c 	.word	0x2000047c
 80035e8:	20000490 	.word	0x20000490

080035ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80035f0:	4b03      	ldr	r3, [pc, #12]	@ (8003600 <vTaskMissedYield+0x14>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
}
 80035f6:	bf00      	nop
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	2000048c 	.word	0x2000048c

08003604 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800360c:	f000 f852 	bl	80036b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003610:	4b06      	ldr	r3, [pc, #24]	@ (800362c <prvIdleTask+0x28>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d9f9      	bls.n	800360c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003618:	4b05      	ldr	r3, [pc, #20]	@ (8003630 <prvIdleTask+0x2c>)
 800361a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	f3bf 8f4f 	dsb	sy
 8003624:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003628:	e7f0      	b.n	800360c <prvIdleTask+0x8>
 800362a:	bf00      	nop
 800362c:	2000037c 	.word	0x2000037c
 8003630:	e000ed04 	.word	0xe000ed04

08003634 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800363a:	2300      	movs	r3, #0
 800363c:	607b      	str	r3, [r7, #4]
 800363e:	e00c      	b.n	800365a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4a12      	ldr	r2, [pc, #72]	@ (8003694 <prvInitialiseTaskLists+0x60>)
 800364c:	4413      	add	r3, r2
 800364e:	4618      	mov	r0, r3
 8003650:	f7fe fd13 	bl	800207a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3301      	adds	r3, #1
 8003658:	607b      	str	r3, [r7, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b06      	cmp	r3, #6
 800365e:	d9ef      	bls.n	8003640 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003660:	480d      	ldr	r0, [pc, #52]	@ (8003698 <prvInitialiseTaskLists+0x64>)
 8003662:	f7fe fd0a 	bl	800207a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003666:	480d      	ldr	r0, [pc, #52]	@ (800369c <prvInitialiseTaskLists+0x68>)
 8003668:	f7fe fd07 	bl	800207a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800366c:	480c      	ldr	r0, [pc, #48]	@ (80036a0 <prvInitialiseTaskLists+0x6c>)
 800366e:	f7fe fd04 	bl	800207a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003672:	480c      	ldr	r0, [pc, #48]	@ (80036a4 <prvInitialiseTaskLists+0x70>)
 8003674:	f7fe fd01 	bl	800207a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003678:	480b      	ldr	r0, [pc, #44]	@ (80036a8 <prvInitialiseTaskLists+0x74>)
 800367a:	f7fe fcfe 	bl	800207a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800367e:	4b0b      	ldr	r3, [pc, #44]	@ (80036ac <prvInitialiseTaskLists+0x78>)
 8003680:	4a05      	ldr	r2, [pc, #20]	@ (8003698 <prvInitialiseTaskLists+0x64>)
 8003682:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003684:	4b0a      	ldr	r3, [pc, #40]	@ (80036b0 <prvInitialiseTaskLists+0x7c>)
 8003686:	4a05      	ldr	r2, [pc, #20]	@ (800369c <prvInitialiseTaskLists+0x68>)
 8003688:	601a      	str	r2, [r3, #0]
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	2000037c 	.word	0x2000037c
 8003698:	20000408 	.word	0x20000408
 800369c:	2000041c 	.word	0x2000041c
 80036a0:	20000438 	.word	0x20000438
 80036a4:	2000044c 	.word	0x2000044c
 80036a8:	20000464 	.word	0x20000464
 80036ac:	20000430 	.word	0x20000430
 80036b0:	20000434 	.word	0x20000434

080036b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036ba:	e019      	b.n	80036f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80036bc:	f000 fbd4 	bl	8003e68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036c0:	4b10      	ldr	r3, [pc, #64]	@ (8003704 <prvCheckTasksWaitingTermination+0x50>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3304      	adds	r3, #4
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fe fd5e 	bl	800218e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80036d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003708 <prvCheckTasksWaitingTermination+0x54>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003708 <prvCheckTasksWaitingTermination+0x54>)
 80036da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80036dc:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <prvCheckTasksWaitingTermination+0x58>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	4a0a      	ldr	r2, [pc, #40]	@ (800370c <prvCheckTasksWaitingTermination+0x58>)
 80036e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80036e6:	f000 fbf1 	bl	8003ecc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f810 	bl	8003710 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036f0:	4b06      	ldr	r3, [pc, #24]	@ (800370c <prvCheckTasksWaitingTermination+0x58>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1e1      	bne.n	80036bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	2000044c 	.word	0x2000044c
 8003708:	20000478 	.word	0x20000478
 800370c:	20000460 	.word	0x20000460

08003710 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	334c      	adds	r3, #76	@ 0x4c
 800371c:	4618      	mov	r0, r3
 800371e:	f000 febb 	bl	8004498 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003728:	2b00      	cmp	r3, #0
 800372a:	d108      	bne.n	800373e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003730:	4618      	mov	r0, r3
 8003732:	f000 fd89 	bl	8004248 <vPortFree>
				vPortFree( pxTCB );
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 fd86 	bl	8004248 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800373c:	e019      	b.n	8003772 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003744:	2b01      	cmp	r3, #1
 8003746:	d103      	bne.n	8003750 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 fd7d 	bl	8004248 <vPortFree>
	}
 800374e:	e010      	b.n	8003772 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003756:	2b02      	cmp	r3, #2
 8003758:	d00b      	beq.n	8003772 <prvDeleteTCB+0x62>
	__asm volatile
 800375a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	60fb      	str	r3, [r7, #12]
}
 800376c:	bf00      	nop
 800376e:	bf00      	nop
 8003770:	e7fd      	b.n	800376e <prvDeleteTCB+0x5e>
	}
 8003772:	bf00      	nop
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003782:	4b0c      	ldr	r3, [pc, #48]	@ (80037b4 <prvResetNextTaskUnblockTime+0x38>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d104      	bne.n	8003796 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800378c:	4b0a      	ldr	r3, [pc, #40]	@ (80037b8 <prvResetNextTaskUnblockTime+0x3c>)
 800378e:	f04f 32ff 	mov.w	r2, #4294967295
 8003792:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003794:	e008      	b.n	80037a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003796:	4b07      	ldr	r3, [pc, #28]	@ (80037b4 <prvResetNextTaskUnblockTime+0x38>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	4a04      	ldr	r2, [pc, #16]	@ (80037b8 <prvResetNextTaskUnblockTime+0x3c>)
 80037a6:	6013      	str	r3, [r2, #0]
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	20000430 	.word	0x20000430
 80037b8:	20000498 	.word	0x20000498

080037bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80037c2:	4b0b      	ldr	r3, [pc, #44]	@ (80037f0 <xTaskGetSchedulerState+0x34>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d102      	bne.n	80037d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80037ca:	2301      	movs	r3, #1
 80037cc:	607b      	str	r3, [r7, #4]
 80037ce:	e008      	b.n	80037e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037d0:	4b08      	ldr	r3, [pc, #32]	@ (80037f4 <xTaskGetSchedulerState+0x38>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d102      	bne.n	80037de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80037d8:	2302      	movs	r3, #2
 80037da:	607b      	str	r3, [r7, #4]
 80037dc:	e001      	b.n	80037e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80037de:	2300      	movs	r3, #0
 80037e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80037e2:	687b      	ldr	r3, [r7, #4]
	}
 80037e4:	4618      	mov	r0, r3
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	20000484 	.word	0x20000484
 80037f4:	200004a0 	.word	0x200004a0

080037f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d05e      	beq.n	80038cc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003812:	4b31      	ldr	r3, [pc, #196]	@ (80038d8 <xTaskPriorityInherit+0xe0>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003818:	429a      	cmp	r2, r3
 800381a:	d24e      	bcs.n	80038ba <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	2b00      	cmp	r3, #0
 8003822:	db06      	blt.n	8003832 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003824:	4b2c      	ldr	r3, [pc, #176]	@ (80038d8 <xTaskPriorityInherit+0xe0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382a:	f1c3 0207 	rsb	r2, r3, #7
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	6959      	ldr	r1, [r3, #20]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800383a:	4613      	mov	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4a26      	ldr	r2, [pc, #152]	@ (80038dc <xTaskPriorityInherit+0xe4>)
 8003844:	4413      	add	r3, r2
 8003846:	4299      	cmp	r1, r3
 8003848:	d12f      	bne.n	80038aa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	3304      	adds	r3, #4
 800384e:	4618      	mov	r0, r3
 8003850:	f7fe fc9d 	bl	800218e <uxListRemove>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10a      	bne.n	8003870 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385e:	2201      	movs	r2, #1
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43da      	mvns	r2, r3
 8003866:	4b1e      	ldr	r3, [pc, #120]	@ (80038e0 <xTaskPriorityInherit+0xe8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4013      	ands	r3, r2
 800386c:	4a1c      	ldr	r2, [pc, #112]	@ (80038e0 <xTaskPriorityInherit+0xe8>)
 800386e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003870:	4b19      	ldr	r3, [pc, #100]	@ (80038d8 <xTaskPriorityInherit+0xe0>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387e:	2201      	movs	r2, #1
 8003880:	409a      	lsls	r2, r3
 8003882:	4b17      	ldr	r3, [pc, #92]	@ (80038e0 <xTaskPriorityInherit+0xe8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4313      	orrs	r3, r2
 8003888:	4a15      	ldr	r2, [pc, #84]	@ (80038e0 <xTaskPriorityInherit+0xe8>)
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003890:	4613      	mov	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4a10      	ldr	r2, [pc, #64]	@ (80038dc <xTaskPriorityInherit+0xe4>)
 800389a:	441a      	add	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	3304      	adds	r3, #4
 80038a0:	4619      	mov	r1, r3
 80038a2:	4610      	mov	r0, r2
 80038a4:	f7fe fc16 	bl	80020d4 <vListInsertEnd>
 80038a8:	e004      	b.n	80038b4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80038aa:	4b0b      	ldr	r3, [pc, #44]	@ (80038d8 <xTaskPriorityInherit+0xe0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80038b4:	2301      	movs	r3, #1
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	e008      	b.n	80038cc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038be:	4b06      	ldr	r3, [pc, #24]	@ (80038d8 <xTaskPriorityInherit+0xe0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d201      	bcs.n	80038cc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80038c8:	2301      	movs	r3, #1
 80038ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80038cc:	68fb      	ldr	r3, [r7, #12]
	}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000378 	.word	0x20000378
 80038dc:	2000037c 	.word	0x2000037c
 80038e0:	20000480 	.word	0x20000480

080038e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d070      	beq.n	80039dc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80038fa:	4b3b      	ldr	r3, [pc, #236]	@ (80039e8 <xTaskPriorityDisinherit+0x104>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	429a      	cmp	r2, r3
 8003902:	d00b      	beq.n	800391c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003908:	f383 8811 	msr	BASEPRI, r3
 800390c:	f3bf 8f6f 	isb	sy
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	60fb      	str	r3, [r7, #12]
}
 8003916:	bf00      	nop
 8003918:	bf00      	nop
 800391a:	e7fd      	b.n	8003918 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10b      	bne.n	800393c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003928:	f383 8811 	msr	BASEPRI, r3
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	60bb      	str	r3, [r7, #8]
}
 8003936:	bf00      	nop
 8003938:	bf00      	nop
 800393a:	e7fd      	b.n	8003938 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003940:	1e5a      	subs	r2, r3, #1
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800394e:	429a      	cmp	r2, r3
 8003950:	d044      	beq.n	80039dc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003956:	2b00      	cmp	r3, #0
 8003958:	d140      	bne.n	80039dc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	3304      	adds	r3, #4
 800395e:	4618      	mov	r0, r3
 8003960:	f7fe fc15 	bl	800218e <uxListRemove>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d115      	bne.n	8003996 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800396e:	491f      	ldr	r1, [pc, #124]	@ (80039ec <xTaskPriorityDisinherit+0x108>)
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10a      	bne.n	8003996 <xTaskPriorityDisinherit+0xb2>
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003984:	2201      	movs	r2, #1
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43da      	mvns	r2, r3
 800398c:	4b18      	ldr	r3, [pc, #96]	@ (80039f0 <xTaskPriorityDisinherit+0x10c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4013      	ands	r3, r2
 8003992:	4a17      	ldr	r2, [pc, #92]	@ (80039f0 <xTaskPriorityDisinherit+0x10c>)
 8003994:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a2:	f1c3 0207 	rsb	r2, r3, #7
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ae:	2201      	movs	r2, #1
 80039b0:	409a      	lsls	r2, r3
 80039b2:	4b0f      	ldr	r3, [pc, #60]	@ (80039f0 <xTaskPriorityDisinherit+0x10c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	4a0d      	ldr	r2, [pc, #52]	@ (80039f0 <xTaskPriorityDisinherit+0x10c>)
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4a08      	ldr	r2, [pc, #32]	@ (80039ec <xTaskPriorityDisinherit+0x108>)
 80039ca:	441a      	add	r2, r3
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	3304      	adds	r3, #4
 80039d0:	4619      	mov	r1, r3
 80039d2:	4610      	mov	r0, r2
 80039d4:	f7fe fb7e 	bl	80020d4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80039d8:	2301      	movs	r3, #1
 80039da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80039dc:	697b      	ldr	r3, [r7, #20]
	}
 80039de:	4618      	mov	r0, r3
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20000378 	.word	0x20000378
 80039ec:	2000037c 	.word	0x2000037c
 80039f0:	20000480 	.word	0x20000480

080039f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003a02:	2301      	movs	r3, #1
 8003a04:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d079      	beq.n	8003b00 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10b      	bne.n	8003a2c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8003a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	60fb      	str	r3, [r7, #12]
}
 8003a26:	bf00      	nop
 8003a28:	bf00      	nop
 8003a2a:	e7fd      	b.n	8003a28 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d902      	bls.n	8003a3c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	e002      	b.n	8003a42 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a40:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a46:	69fa      	ldr	r2, [r7, #28]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d059      	beq.n	8003b00 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d154      	bne.n	8003b00 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003a56:	4b2c      	ldr	r3, [pc, #176]	@ (8003b08 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d10b      	bne.n	8003a78 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8003a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a64:	f383 8811 	msr	BASEPRI, r3
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	60bb      	str	r3, [r7, #8]
}
 8003a72:	bf00      	nop
 8003a74:	bf00      	nop
 8003a76:	e7fd      	b.n	8003a74 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	69fa      	ldr	r2, [r7, #28]
 8003a82:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	db04      	blt.n	8003a96 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f1c3 0207 	rsb	r2, r3, #7
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	6959      	ldr	r1, [r3, #20]
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4a19      	ldr	r2, [pc, #100]	@ (8003b0c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003aa6:	4413      	add	r3, r2
 8003aa8:	4299      	cmp	r1, r3
 8003aaa:	d129      	bne.n	8003b00 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	3304      	adds	r3, #4
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fe fb6c 	bl	800218e <uxListRemove>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10a      	bne.n	8003ad2 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	43da      	mvns	r2, r3
 8003ac8:	4b11      	ldr	r3, [pc, #68]	@ (8003b10 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4013      	ands	r3, r2
 8003ace:	4a10      	ldr	r2, [pc, #64]	@ (8003b10 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8003ad0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	409a      	lsls	r2, r3
 8003ada:	4b0d      	ldr	r3, [pc, #52]	@ (8003b10 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	4a0b      	ldr	r2, [pc, #44]	@ (8003b10 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ae8:	4613      	mov	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4a06      	ldr	r2, [pc, #24]	@ (8003b0c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003af2:	441a      	add	r2, r3
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	3304      	adds	r3, #4
 8003af8:	4619      	mov	r1, r3
 8003afa:	4610      	mov	r0, r2
 8003afc:	f7fe faea 	bl	80020d4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b00:	bf00      	nop
 8003b02:	3720      	adds	r7, #32
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	20000378 	.word	0x20000378
 8003b0c:	2000037c 	.word	0x2000037c
 8003b10:	20000480 	.word	0x20000480

08003b14 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003b18:	4b07      	ldr	r3, [pc, #28]	@ (8003b38 <pvTaskIncrementMutexHeldCount+0x24>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d004      	beq.n	8003b2a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003b20:	4b05      	ldr	r3, [pc, #20]	@ (8003b38 <pvTaskIncrementMutexHeldCount+0x24>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b26:	3201      	adds	r2, #1
 8003b28:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8003b2a:	4b03      	ldr	r3, [pc, #12]	@ (8003b38 <pvTaskIncrementMutexHeldCount+0x24>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
	}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	20000378 	.word	0x20000378

08003b3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b46:	4b29      	ldr	r3, [pc, #164]	@ (8003bec <prvAddCurrentTaskToDelayedList+0xb0>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b4c:	4b28      	ldr	r3, [pc, #160]	@ (8003bf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3304      	adds	r3, #4
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fe fb1b 	bl	800218e <uxListRemove>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10b      	bne.n	8003b76 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003b5e:	4b24      	ldr	r3, [pc, #144]	@ (8003bf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b64:	2201      	movs	r2, #1
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	43da      	mvns	r2, r3
 8003b6c:	4b21      	ldr	r3, [pc, #132]	@ (8003bf4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4013      	ands	r3, r2
 8003b72:	4a20      	ldr	r2, [pc, #128]	@ (8003bf4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b74:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7c:	d10a      	bne.n	8003b94 <prvAddCurrentTaskToDelayedList+0x58>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d007      	beq.n	8003b94 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b84:	4b1a      	ldr	r3, [pc, #104]	@ (8003bf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3304      	adds	r3, #4
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	481a      	ldr	r0, [pc, #104]	@ (8003bf8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003b8e:	f7fe faa1 	bl	80020d4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b92:	e026      	b.n	8003be2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4413      	add	r3, r2
 8003b9a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b9c:	4b14      	ldr	r3, [pc, #80]	@ (8003bf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d209      	bcs.n	8003bc0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bac:	4b13      	ldr	r3, [pc, #76]	@ (8003bfc <prvAddCurrentTaskToDelayedList+0xc0>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4610      	mov	r0, r2
 8003bba:	f7fe faaf 	bl	800211c <vListInsert>
}
 8003bbe:	e010      	b.n	8003be2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c00 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4610      	mov	r0, r2
 8003bce:	f7fe faa5 	bl	800211c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003c04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d202      	bcs.n	8003be2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003bdc:	4a09      	ldr	r2, [pc, #36]	@ (8003c04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	6013      	str	r3, [r2, #0]
}
 8003be2:	bf00      	nop
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	2000047c 	.word	0x2000047c
 8003bf0:	20000378 	.word	0x20000378
 8003bf4:	20000480 	.word	0x20000480
 8003bf8:	20000464 	.word	0x20000464
 8003bfc:	20000434 	.word	0x20000434
 8003c00:	20000430 	.word	0x20000430
 8003c04:	20000498 	.word	0x20000498

08003c08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	3b04      	subs	r3, #4
 8003c18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	3b04      	subs	r3, #4
 8003c26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f023 0201 	bic.w	r2, r3, #1
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	3b04      	subs	r3, #4
 8003c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c38:	4a0c      	ldr	r2, [pc, #48]	@ (8003c6c <pxPortInitialiseStack+0x64>)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	3b14      	subs	r3, #20
 8003c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3b04      	subs	r3, #4
 8003c4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f06f 0202 	mvn.w	r2, #2
 8003c56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	3b20      	subs	r3, #32
 8003c5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	08003c71 	.word	0x08003c71

08003c70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003c76:	2300      	movs	r3, #0
 8003c78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003c7a:	4b13      	ldr	r3, [pc, #76]	@ (8003cc8 <prvTaskExitError+0x58>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c82:	d00b      	beq.n	8003c9c <prvTaskExitError+0x2c>
	__asm volatile
 8003c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	60fb      	str	r3, [r7, #12]
}
 8003c96:	bf00      	nop
 8003c98:	bf00      	nop
 8003c9a:	e7fd      	b.n	8003c98 <prvTaskExitError+0x28>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	60bb      	str	r3, [r7, #8]
}
 8003cae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003cb0:	bf00      	nop
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0fc      	beq.n	8003cb2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003cb8:	bf00      	nop
 8003cba:	bf00      	nop
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	2000000c 	.word	0x2000000c
 8003ccc:	00000000 	.word	0x00000000

08003cd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003cd0:	4b07      	ldr	r3, [pc, #28]	@ (8003cf0 <pxCurrentTCBConst2>)
 8003cd2:	6819      	ldr	r1, [r3, #0]
 8003cd4:	6808      	ldr	r0, [r1, #0]
 8003cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cda:	f380 8809 	msr	PSP, r0
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	f04f 0000 	mov.w	r0, #0
 8003ce6:	f380 8811 	msr	BASEPRI, r0
 8003cea:	4770      	bx	lr
 8003cec:	f3af 8000 	nop.w

08003cf0 <pxCurrentTCBConst2>:
 8003cf0:	20000378 	.word	0x20000378
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003cf4:	bf00      	nop
 8003cf6:	bf00      	nop

08003cf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003cf8:	4808      	ldr	r0, [pc, #32]	@ (8003d1c <prvPortStartFirstTask+0x24>)
 8003cfa:	6800      	ldr	r0, [r0, #0]
 8003cfc:	6800      	ldr	r0, [r0, #0]
 8003cfe:	f380 8808 	msr	MSP, r0
 8003d02:	f04f 0000 	mov.w	r0, #0
 8003d06:	f380 8814 	msr	CONTROL, r0
 8003d0a:	b662      	cpsie	i
 8003d0c:	b661      	cpsie	f
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	df00      	svc	0
 8003d18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003d1a:	bf00      	nop
 8003d1c:	e000ed08 	.word	0xe000ed08

08003d20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d26:	4b47      	ldr	r3, [pc, #284]	@ (8003e44 <xPortStartScheduler+0x124>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a47      	ldr	r2, [pc, #284]	@ (8003e48 <xPortStartScheduler+0x128>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d10b      	bne.n	8003d48 <xPortStartScheduler+0x28>
	__asm volatile
 8003d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d34:	f383 8811 	msr	BASEPRI, r3
 8003d38:	f3bf 8f6f 	isb	sy
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	613b      	str	r3, [r7, #16]
}
 8003d42:	bf00      	nop
 8003d44:	bf00      	nop
 8003d46:	e7fd      	b.n	8003d44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d48:	4b3e      	ldr	r3, [pc, #248]	@ (8003e44 <xPortStartScheduler+0x124>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a3f      	ldr	r2, [pc, #252]	@ (8003e4c <xPortStartScheduler+0x12c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d10b      	bne.n	8003d6a <xPortStartScheduler+0x4a>
	__asm volatile
 8003d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	60fb      	str	r3, [r7, #12]
}
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop
 8003d68:	e7fd      	b.n	8003d66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d6a:	4b39      	ldr	r3, [pc, #228]	@ (8003e50 <xPortStartScheduler+0x130>)
 8003d6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	22ff      	movs	r2, #255	@ 0xff
 8003d7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	4b31      	ldr	r3, [pc, #196]	@ (8003e54 <xPortStartScheduler+0x134>)
 8003d90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d92:	4b31      	ldr	r3, [pc, #196]	@ (8003e58 <xPortStartScheduler+0x138>)
 8003d94:	2207      	movs	r2, #7
 8003d96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d98:	e009      	b.n	8003dae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8003d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8003e58 <xPortStartScheduler+0x138>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	4a2d      	ldr	r2, [pc, #180]	@ (8003e58 <xPortStartScheduler+0x138>)
 8003da2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003da4:	78fb      	ldrb	r3, [r7, #3]
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dae:	78fb      	ldrb	r3, [r7, #3]
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003db6:	2b80      	cmp	r3, #128	@ 0x80
 8003db8:	d0ef      	beq.n	8003d9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003dba:	4b27      	ldr	r3, [pc, #156]	@ (8003e58 <xPortStartScheduler+0x138>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f1c3 0307 	rsb	r3, r3, #7
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d00b      	beq.n	8003dde <xPortStartScheduler+0xbe>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	60bb      	str	r3, [r7, #8]
}
 8003dd8:	bf00      	nop
 8003dda:	bf00      	nop
 8003ddc:	e7fd      	b.n	8003dda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003dde:	4b1e      	ldr	r3, [pc, #120]	@ (8003e58 <xPortStartScheduler+0x138>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	021b      	lsls	r3, r3, #8
 8003de4:	4a1c      	ldr	r2, [pc, #112]	@ (8003e58 <xPortStartScheduler+0x138>)
 8003de6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003de8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e58 <xPortStartScheduler+0x138>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003df0:	4a19      	ldr	r2, [pc, #100]	@ (8003e58 <xPortStartScheduler+0x138>)
 8003df2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003dfc:	4b17      	ldr	r3, [pc, #92]	@ (8003e5c <xPortStartScheduler+0x13c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a16      	ldr	r2, [pc, #88]	@ (8003e5c <xPortStartScheduler+0x13c>)
 8003e02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003e08:	4b14      	ldr	r3, [pc, #80]	@ (8003e5c <xPortStartScheduler+0x13c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a13      	ldr	r2, [pc, #76]	@ (8003e5c <xPortStartScheduler+0x13c>)
 8003e0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003e12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003e14:	f000 f8da 	bl	8003fcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003e18:	4b11      	ldr	r3, [pc, #68]	@ (8003e60 <xPortStartScheduler+0x140>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003e1e:	f000 f8f9 	bl	8004014 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003e22:	4b10      	ldr	r3, [pc, #64]	@ (8003e64 <xPortStartScheduler+0x144>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a0f      	ldr	r2, [pc, #60]	@ (8003e64 <xPortStartScheduler+0x144>)
 8003e28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003e2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003e2e:	f7ff ff63 	bl	8003cf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003e32:	f7ff fa73 	bl	800331c <vTaskSwitchContext>
	prvTaskExitError();
 8003e36:	f7ff ff1b 	bl	8003c70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	e000ed00 	.word	0xe000ed00
 8003e48:	410fc271 	.word	0x410fc271
 8003e4c:	410fc270 	.word	0x410fc270
 8003e50:	e000e400 	.word	0xe000e400
 8003e54:	200004a4 	.word	0x200004a4
 8003e58:	200004a8 	.word	0x200004a8
 8003e5c:	e000ed20 	.word	0xe000ed20
 8003e60:	2000000c 	.word	0x2000000c
 8003e64:	e000ef34 	.word	0xe000ef34

08003e68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
	__asm volatile
 8003e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e72:	f383 8811 	msr	BASEPRI, r3
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	607b      	str	r3, [r7, #4]
}
 8003e80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003e82:	4b10      	ldr	r3, [pc, #64]	@ (8003ec4 <vPortEnterCritical+0x5c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3301      	adds	r3, #1
 8003e88:	4a0e      	ldr	r2, [pc, #56]	@ (8003ec4 <vPortEnterCritical+0x5c>)
 8003e8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec4 <vPortEnterCritical+0x5c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d110      	bne.n	8003eb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e94:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec8 <vPortEnterCritical+0x60>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00b      	beq.n	8003eb6 <vPortEnterCritical+0x4e>
	__asm volatile
 8003e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	603b      	str	r3, [r7, #0]
}
 8003eb0:	bf00      	nop
 8003eb2:	bf00      	nop
 8003eb4:	e7fd      	b.n	8003eb2 <vPortEnterCritical+0x4a>
	}
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	2000000c 	.word	0x2000000c
 8003ec8:	e000ed04 	.word	0xe000ed04

08003ecc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003ed2:	4b12      	ldr	r3, [pc, #72]	@ (8003f1c <vPortExitCritical+0x50>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10b      	bne.n	8003ef2 <vPortExitCritical+0x26>
	__asm volatile
 8003eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	607b      	str	r3, [r7, #4]
}
 8003eec:	bf00      	nop
 8003eee:	bf00      	nop
 8003ef0:	e7fd      	b.n	8003eee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8003f1c <vPortExitCritical+0x50>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	4a08      	ldr	r2, [pc, #32]	@ (8003f1c <vPortExitCritical+0x50>)
 8003efa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003efc:	4b07      	ldr	r3, [pc, #28]	@ (8003f1c <vPortExitCritical+0x50>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d105      	bne.n	8003f10 <vPortExitCritical+0x44>
 8003f04:	2300      	movs	r3, #0
 8003f06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	f383 8811 	msr	BASEPRI, r3
}
 8003f0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	2000000c 	.word	0x2000000c

08003f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003f20:	f3ef 8009 	mrs	r0, PSP
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	4b15      	ldr	r3, [pc, #84]	@ (8003f80 <pxCurrentTCBConst>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	f01e 0f10 	tst.w	lr, #16
 8003f30:	bf08      	it	eq
 8003f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f3a:	6010      	str	r0, [r2, #0]
 8003f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003f40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003f44:	f380 8811 	msr	BASEPRI, r0
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f7ff f9e4 	bl	800331c <vTaskSwitchContext>
 8003f54:	f04f 0000 	mov.w	r0, #0
 8003f58:	f380 8811 	msr	BASEPRI, r0
 8003f5c:	bc09      	pop	{r0, r3}
 8003f5e:	6819      	ldr	r1, [r3, #0]
 8003f60:	6808      	ldr	r0, [r1, #0]
 8003f62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f66:	f01e 0f10 	tst.w	lr, #16
 8003f6a:	bf08      	it	eq
 8003f6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003f70:	f380 8809 	msr	PSP, r0
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	f3af 8000 	nop.w

08003f80 <pxCurrentTCBConst>:
 8003f80:	20000378 	.word	0x20000378
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop

08003f88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8003f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	607b      	str	r3, [r7, #4]
}
 8003fa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003fa2:	f7ff f901 	bl	80031a8 <xTaskIncrementTick>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003fac:	4b06      	ldr	r3, [pc, #24]	@ (8003fc8 <SysTick_Handler+0x40>)
 8003fae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	f383 8811 	msr	BASEPRI, r3
}
 8003fbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003fc0:	bf00      	nop
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	e000ed04 	.word	0xe000ed04

08003fcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004000 <vPortSetupTimerInterrupt+0x34>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004004 <vPortSetupTimerInterrupt+0x38>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8004008 <vPortSetupTimerInterrupt+0x3c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a0a      	ldr	r2, [pc, #40]	@ (800400c <vPortSetupTimerInterrupt+0x40>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	099b      	lsrs	r3, r3, #6
 8003fe8:	4a09      	ldr	r2, [pc, #36]	@ (8004010 <vPortSetupTimerInterrupt+0x44>)
 8003fea:	3b01      	subs	r3, #1
 8003fec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003fee:	4b04      	ldr	r3, [pc, #16]	@ (8004000 <vPortSetupTimerInterrupt+0x34>)
 8003ff0:	2207      	movs	r2, #7
 8003ff2:	601a      	str	r2, [r3, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	e000e010 	.word	0xe000e010
 8004004:	e000e018 	.word	0xe000e018
 8004008:	20000000 	.word	0x20000000
 800400c:	10624dd3 	.word	0x10624dd3
 8004010:	e000e014 	.word	0xe000e014

08004014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004014:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004024 <vPortEnableVFP+0x10>
 8004018:	6801      	ldr	r1, [r0, #0]
 800401a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800401e:	6001      	str	r1, [r0, #0]
 8004020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004022:	bf00      	nop
 8004024:	e000ed88 	.word	0xe000ed88

08004028 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800402e:	f3ef 8305 	mrs	r3, IPSR
 8004032:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2b0f      	cmp	r3, #15
 8004038:	d915      	bls.n	8004066 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800403a:	4a18      	ldr	r2, [pc, #96]	@ (800409c <vPortValidateInterruptPriority+0x74>)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4413      	add	r3, r2
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004044:	4b16      	ldr	r3, [pc, #88]	@ (80040a0 <vPortValidateInterruptPriority+0x78>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	7afa      	ldrb	r2, [r7, #11]
 800404a:	429a      	cmp	r2, r3
 800404c:	d20b      	bcs.n	8004066 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800404e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	607b      	str	r3, [r7, #4]
}
 8004060:	bf00      	nop
 8004062:	bf00      	nop
 8004064:	e7fd      	b.n	8004062 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004066:	4b0f      	ldr	r3, [pc, #60]	@ (80040a4 <vPortValidateInterruptPriority+0x7c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800406e:	4b0e      	ldr	r3, [pc, #56]	@ (80040a8 <vPortValidateInterruptPriority+0x80>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d90b      	bls.n	800408e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	603b      	str	r3, [r7, #0]
}
 8004088:	bf00      	nop
 800408a:	bf00      	nop
 800408c:	e7fd      	b.n	800408a <vPortValidateInterruptPriority+0x62>
	}
 800408e:	bf00      	nop
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	e000e3f0 	.word	0xe000e3f0
 80040a0:	200004a4 	.word	0x200004a4
 80040a4:	e000ed0c 	.word	0xe000ed0c
 80040a8:	200004a8 	.word	0x200004a8

080040ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08a      	sub	sp, #40	@ 0x28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80040b4:	2300      	movs	r3, #0
 80040b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80040b8:	f7fe ffca 	bl	8003050 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80040bc:	4b5c      	ldr	r3, [pc, #368]	@ (8004230 <pvPortMalloc+0x184>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80040c4:	f000 f924 	bl	8004310 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80040c8:	4b5a      	ldr	r3, [pc, #360]	@ (8004234 <pvPortMalloc+0x188>)
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f040 8095 	bne.w	8004200 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d01e      	beq.n	800411a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80040dc:	2208      	movs	r2, #8
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4413      	add	r3, r2
 80040e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d015      	beq.n	800411a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f023 0307 	bic.w	r3, r3, #7
 80040f4:	3308      	adds	r3, #8
 80040f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00b      	beq.n	800411a <pvPortMalloc+0x6e>
	__asm volatile
 8004102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004106:	f383 8811 	msr	BASEPRI, r3
 800410a:	f3bf 8f6f 	isb	sy
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	617b      	str	r3, [r7, #20]
}
 8004114:	bf00      	nop
 8004116:	bf00      	nop
 8004118:	e7fd      	b.n	8004116 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d06f      	beq.n	8004200 <pvPortMalloc+0x154>
 8004120:	4b45      	ldr	r3, [pc, #276]	@ (8004238 <pvPortMalloc+0x18c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	429a      	cmp	r2, r3
 8004128:	d86a      	bhi.n	8004200 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800412a:	4b44      	ldr	r3, [pc, #272]	@ (800423c <pvPortMalloc+0x190>)
 800412c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800412e:	4b43      	ldr	r3, [pc, #268]	@ (800423c <pvPortMalloc+0x190>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004134:	e004      	b.n	8004140 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004138:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	429a      	cmp	r2, r3
 8004148:	d903      	bls.n	8004152 <pvPortMalloc+0xa6>
 800414a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f1      	bne.n	8004136 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004152:	4b37      	ldr	r3, [pc, #220]	@ (8004230 <pvPortMalloc+0x184>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004158:	429a      	cmp	r2, r3
 800415a:	d051      	beq.n	8004200 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2208      	movs	r2, #8
 8004162:	4413      	add	r3, r2
 8004164:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	1ad2      	subs	r2, r2, r3
 8004176:	2308      	movs	r3, #8
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	429a      	cmp	r2, r3
 800417c:	d920      	bls.n	80041c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800417e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4413      	add	r3, r2
 8004184:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00b      	beq.n	80041a8 <pvPortMalloc+0xfc>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	613b      	str	r3, [r7, #16]
}
 80041a2:	bf00      	nop
 80041a4:	bf00      	nop
 80041a6:	e7fd      	b.n	80041a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80041a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	1ad2      	subs	r2, r2, r3
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80041b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80041ba:	69b8      	ldr	r0, [r7, #24]
 80041bc:	f000 f90a 	bl	80043d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80041c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004238 <pvPortMalloc+0x18c>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004238 <pvPortMalloc+0x18c>)
 80041cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80041ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004238 <pvPortMalloc+0x18c>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004240 <pvPortMalloc+0x194>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d203      	bcs.n	80041e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80041da:	4b17      	ldr	r3, [pc, #92]	@ (8004238 <pvPortMalloc+0x18c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a18      	ldr	r2, [pc, #96]	@ (8004240 <pvPortMalloc+0x194>)
 80041e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80041e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	4b13      	ldr	r3, [pc, #76]	@ (8004234 <pvPortMalloc+0x188>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80041f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80041f6:	4b13      	ldr	r3, [pc, #76]	@ (8004244 <pvPortMalloc+0x198>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3301      	adds	r3, #1
 80041fc:	4a11      	ldr	r2, [pc, #68]	@ (8004244 <pvPortMalloc+0x198>)
 80041fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004200:	f7fe ff34 	bl	800306c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00b      	beq.n	8004226 <pvPortMalloc+0x17a>
	__asm volatile
 800420e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	60fb      	str	r3, [r7, #12]
}
 8004220:	bf00      	nop
 8004222:	bf00      	nop
 8004224:	e7fd      	b.n	8004222 <pvPortMalloc+0x176>
	return pvReturn;
 8004226:	69fb      	ldr	r3, [r7, #28]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3728      	adds	r7, #40	@ 0x28
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	200040b4 	.word	0x200040b4
 8004234:	200040c8 	.word	0x200040c8
 8004238:	200040b8 	.word	0x200040b8
 800423c:	200040ac 	.word	0x200040ac
 8004240:	200040bc 	.word	0x200040bc
 8004244:	200040c0 	.word	0x200040c0

08004248 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d04f      	beq.n	80042fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800425a:	2308      	movs	r3, #8
 800425c:	425b      	negs	r3, r3
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	4413      	add	r3, r2
 8004262:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	4b25      	ldr	r3, [pc, #148]	@ (8004304 <vPortFree+0xbc>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4013      	ands	r3, r2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10b      	bne.n	800428e <vPortFree+0x46>
	__asm volatile
 8004276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	60fb      	str	r3, [r7, #12]
}
 8004288:	bf00      	nop
 800428a:	bf00      	nop
 800428c:	e7fd      	b.n	800428a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00b      	beq.n	80042ae <vPortFree+0x66>
	__asm volatile
 8004296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	60bb      	str	r3, [r7, #8]
}
 80042a8:	bf00      	nop
 80042aa:	bf00      	nop
 80042ac:	e7fd      	b.n	80042aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	4b14      	ldr	r3, [pc, #80]	@ (8004304 <vPortFree+0xbc>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4013      	ands	r3, r2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d01e      	beq.n	80042fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d11a      	bne.n	80042fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004304 <vPortFree+0xbc>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	43db      	mvns	r3, r3
 80042ce:	401a      	ands	r2, r3
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80042d4:	f7fe febc 	bl	8003050 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004308 <vPortFree+0xc0>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4413      	add	r3, r2
 80042e2:	4a09      	ldr	r2, [pc, #36]	@ (8004308 <vPortFree+0xc0>)
 80042e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80042e6:	6938      	ldr	r0, [r7, #16]
 80042e8:	f000 f874 	bl	80043d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80042ec:	4b07      	ldr	r3, [pc, #28]	@ (800430c <vPortFree+0xc4>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3301      	adds	r3, #1
 80042f2:	4a06      	ldr	r2, [pc, #24]	@ (800430c <vPortFree+0xc4>)
 80042f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80042f6:	f7fe feb9 	bl	800306c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80042fa:	bf00      	nop
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	200040c8 	.word	0x200040c8
 8004308:	200040b8 	.word	0x200040b8
 800430c:	200040c4 	.word	0x200040c4

08004310 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004316:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800431a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800431c:	4b27      	ldr	r3, [pc, #156]	@ (80043bc <prvHeapInit+0xac>)
 800431e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00c      	beq.n	8004344 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	3307      	adds	r3, #7
 800432e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0307 	bic.w	r3, r3, #7
 8004336:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	4a1f      	ldr	r2, [pc, #124]	@ (80043bc <prvHeapInit+0xac>)
 8004340:	4413      	add	r3, r2
 8004342:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004348:	4a1d      	ldr	r2, [pc, #116]	@ (80043c0 <prvHeapInit+0xb0>)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800434e:	4b1c      	ldr	r3, [pc, #112]	@ (80043c0 <prvHeapInit+0xb0>)
 8004350:	2200      	movs	r2, #0
 8004352:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	4413      	add	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800435c:	2208      	movs	r2, #8
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	1a9b      	subs	r3, r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0307 	bic.w	r3, r3, #7
 800436a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4a15      	ldr	r2, [pc, #84]	@ (80043c4 <prvHeapInit+0xb4>)
 8004370:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004372:	4b14      	ldr	r3, [pc, #80]	@ (80043c4 <prvHeapInit+0xb4>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2200      	movs	r2, #0
 8004378:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800437a:	4b12      	ldr	r3, [pc, #72]	@ (80043c4 <prvHeapInit+0xb4>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	1ad2      	subs	r2, r2, r3
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004390:	4b0c      	ldr	r3, [pc, #48]	@ (80043c4 <prvHeapInit+0xb4>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	4a0a      	ldr	r2, [pc, #40]	@ (80043c8 <prvHeapInit+0xb8>)
 800439e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	4a09      	ldr	r2, [pc, #36]	@ (80043cc <prvHeapInit+0xbc>)
 80043a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80043a8:	4b09      	ldr	r3, [pc, #36]	@ (80043d0 <prvHeapInit+0xc0>)
 80043aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80043ae:	601a      	str	r2, [r3, #0]
}
 80043b0:	bf00      	nop
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	200004ac 	.word	0x200004ac
 80043c0:	200040ac 	.word	0x200040ac
 80043c4:	200040b4 	.word	0x200040b4
 80043c8:	200040bc 	.word	0x200040bc
 80043cc:	200040b8 	.word	0x200040b8
 80043d0:	200040c8 	.word	0x200040c8

080043d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80043dc:	4b28      	ldr	r3, [pc, #160]	@ (8004480 <prvInsertBlockIntoFreeList+0xac>)
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	e002      	b.n	80043e8 <prvInsertBlockIntoFreeList+0x14>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d8f7      	bhi.n	80043e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	4413      	add	r3, r2
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	429a      	cmp	r2, r3
 8004402:	d108      	bne.n	8004416 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	441a      	add	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	441a      	add	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d118      	bne.n	800445c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	4b15      	ldr	r3, [pc, #84]	@ (8004484 <prvInsertBlockIntoFreeList+0xb0>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d00d      	beq.n	8004452 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	441a      	add	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	e008      	b.n	8004464 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004452:	4b0c      	ldr	r3, [pc, #48]	@ (8004484 <prvInsertBlockIntoFreeList+0xb0>)
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	e003      	b.n	8004464 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	429a      	cmp	r2, r3
 800446a:	d002      	beq.n	8004472 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004472:	bf00      	nop
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	200040ac 	.word	0x200040ac
 8004484:	200040b4 	.word	0x200040b4

08004488 <memset>:
 8004488:	4402      	add	r2, r0
 800448a:	4603      	mov	r3, r0
 800448c:	4293      	cmp	r3, r2
 800448e:	d100      	bne.n	8004492 <memset+0xa>
 8004490:	4770      	bx	lr
 8004492:	f803 1b01 	strb.w	r1, [r3], #1
 8004496:	e7f9      	b.n	800448c <memset+0x4>

08004498 <_reclaim_reent>:
 8004498:	4b29      	ldr	r3, [pc, #164]	@ (8004540 <_reclaim_reent+0xa8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4283      	cmp	r3, r0
 800449e:	b570      	push	{r4, r5, r6, lr}
 80044a0:	4604      	mov	r4, r0
 80044a2:	d04b      	beq.n	800453c <_reclaim_reent+0xa4>
 80044a4:	69c3      	ldr	r3, [r0, #28]
 80044a6:	b1ab      	cbz	r3, 80044d4 <_reclaim_reent+0x3c>
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	b16b      	cbz	r3, 80044c8 <_reclaim_reent+0x30>
 80044ac:	2500      	movs	r5, #0
 80044ae:	69e3      	ldr	r3, [r4, #28]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	5959      	ldr	r1, [r3, r5]
 80044b4:	2900      	cmp	r1, #0
 80044b6:	d13b      	bne.n	8004530 <_reclaim_reent+0x98>
 80044b8:	3504      	adds	r5, #4
 80044ba:	2d80      	cmp	r5, #128	@ 0x80
 80044bc:	d1f7      	bne.n	80044ae <_reclaim_reent+0x16>
 80044be:	69e3      	ldr	r3, [r4, #28]
 80044c0:	4620      	mov	r0, r4
 80044c2:	68d9      	ldr	r1, [r3, #12]
 80044c4:	f000 f872 	bl	80045ac <_free_r>
 80044c8:	69e3      	ldr	r3, [r4, #28]
 80044ca:	6819      	ldr	r1, [r3, #0]
 80044cc:	b111      	cbz	r1, 80044d4 <_reclaim_reent+0x3c>
 80044ce:	4620      	mov	r0, r4
 80044d0:	f000 f86c 	bl	80045ac <_free_r>
 80044d4:	6961      	ldr	r1, [r4, #20]
 80044d6:	b111      	cbz	r1, 80044de <_reclaim_reent+0x46>
 80044d8:	4620      	mov	r0, r4
 80044da:	f000 f867 	bl	80045ac <_free_r>
 80044de:	69e1      	ldr	r1, [r4, #28]
 80044e0:	b111      	cbz	r1, 80044e8 <_reclaim_reent+0x50>
 80044e2:	4620      	mov	r0, r4
 80044e4:	f000 f862 	bl	80045ac <_free_r>
 80044e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80044ea:	b111      	cbz	r1, 80044f2 <_reclaim_reent+0x5a>
 80044ec:	4620      	mov	r0, r4
 80044ee:	f000 f85d 	bl	80045ac <_free_r>
 80044f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80044f4:	b111      	cbz	r1, 80044fc <_reclaim_reent+0x64>
 80044f6:	4620      	mov	r0, r4
 80044f8:	f000 f858 	bl	80045ac <_free_r>
 80044fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80044fe:	b111      	cbz	r1, 8004506 <_reclaim_reent+0x6e>
 8004500:	4620      	mov	r0, r4
 8004502:	f000 f853 	bl	80045ac <_free_r>
 8004506:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004508:	b111      	cbz	r1, 8004510 <_reclaim_reent+0x78>
 800450a:	4620      	mov	r0, r4
 800450c:	f000 f84e 	bl	80045ac <_free_r>
 8004510:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004512:	b111      	cbz	r1, 800451a <_reclaim_reent+0x82>
 8004514:	4620      	mov	r0, r4
 8004516:	f000 f849 	bl	80045ac <_free_r>
 800451a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800451c:	b111      	cbz	r1, 8004524 <_reclaim_reent+0x8c>
 800451e:	4620      	mov	r0, r4
 8004520:	f000 f844 	bl	80045ac <_free_r>
 8004524:	6a23      	ldr	r3, [r4, #32]
 8004526:	b14b      	cbz	r3, 800453c <_reclaim_reent+0xa4>
 8004528:	4620      	mov	r0, r4
 800452a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800452e:	4718      	bx	r3
 8004530:	680e      	ldr	r6, [r1, #0]
 8004532:	4620      	mov	r0, r4
 8004534:	f000 f83a 	bl	80045ac <_free_r>
 8004538:	4631      	mov	r1, r6
 800453a:	e7bb      	b.n	80044b4 <_reclaim_reent+0x1c>
 800453c:	bd70      	pop	{r4, r5, r6, pc}
 800453e:	bf00      	nop
 8004540:	20000010 	.word	0x20000010

08004544 <__libc_init_array>:
 8004544:	b570      	push	{r4, r5, r6, lr}
 8004546:	4d0d      	ldr	r5, [pc, #52]	@ (800457c <__libc_init_array+0x38>)
 8004548:	4c0d      	ldr	r4, [pc, #52]	@ (8004580 <__libc_init_array+0x3c>)
 800454a:	1b64      	subs	r4, r4, r5
 800454c:	10a4      	asrs	r4, r4, #2
 800454e:	2600      	movs	r6, #0
 8004550:	42a6      	cmp	r6, r4
 8004552:	d109      	bne.n	8004568 <__libc_init_array+0x24>
 8004554:	4d0b      	ldr	r5, [pc, #44]	@ (8004584 <__libc_init_array+0x40>)
 8004556:	4c0c      	ldr	r4, [pc, #48]	@ (8004588 <__libc_init_array+0x44>)
 8004558:	f000 f87e 	bl	8004658 <_init>
 800455c:	1b64      	subs	r4, r4, r5
 800455e:	10a4      	asrs	r4, r4, #2
 8004560:	2600      	movs	r6, #0
 8004562:	42a6      	cmp	r6, r4
 8004564:	d105      	bne.n	8004572 <__libc_init_array+0x2e>
 8004566:	bd70      	pop	{r4, r5, r6, pc}
 8004568:	f855 3b04 	ldr.w	r3, [r5], #4
 800456c:	4798      	blx	r3
 800456e:	3601      	adds	r6, #1
 8004570:	e7ee      	b.n	8004550 <__libc_init_array+0xc>
 8004572:	f855 3b04 	ldr.w	r3, [r5], #4
 8004576:	4798      	blx	r3
 8004578:	3601      	adds	r6, #1
 800457a:	e7f2      	b.n	8004562 <__libc_init_array+0x1e>
 800457c:	080046e0 	.word	0x080046e0
 8004580:	080046e0 	.word	0x080046e0
 8004584:	080046e0 	.word	0x080046e0
 8004588:	080046e4 	.word	0x080046e4

0800458c <__retarget_lock_acquire_recursive>:
 800458c:	4770      	bx	lr

0800458e <__retarget_lock_release_recursive>:
 800458e:	4770      	bx	lr

08004590 <memcpy>:
 8004590:	440a      	add	r2, r1
 8004592:	4291      	cmp	r1, r2
 8004594:	f100 33ff 	add.w	r3, r0, #4294967295
 8004598:	d100      	bne.n	800459c <memcpy+0xc>
 800459a:	4770      	bx	lr
 800459c:	b510      	push	{r4, lr}
 800459e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045a6:	4291      	cmp	r1, r2
 80045a8:	d1f9      	bne.n	800459e <memcpy+0xe>
 80045aa:	bd10      	pop	{r4, pc}

080045ac <_free_r>:
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	4605      	mov	r5, r0
 80045b0:	2900      	cmp	r1, #0
 80045b2:	d041      	beq.n	8004638 <_free_r+0x8c>
 80045b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045b8:	1f0c      	subs	r4, r1, #4
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	bfb8      	it	lt
 80045be:	18e4      	addlt	r4, r4, r3
 80045c0:	f000 f83e 	bl	8004640 <__malloc_lock>
 80045c4:	4a1d      	ldr	r2, [pc, #116]	@ (800463c <_free_r+0x90>)
 80045c6:	6813      	ldr	r3, [r2, #0]
 80045c8:	b933      	cbnz	r3, 80045d8 <_free_r+0x2c>
 80045ca:	6063      	str	r3, [r4, #4]
 80045cc:	6014      	str	r4, [r2, #0]
 80045ce:	4628      	mov	r0, r5
 80045d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045d4:	f000 b83a 	b.w	800464c <__malloc_unlock>
 80045d8:	42a3      	cmp	r3, r4
 80045da:	d908      	bls.n	80045ee <_free_r+0x42>
 80045dc:	6820      	ldr	r0, [r4, #0]
 80045de:	1821      	adds	r1, r4, r0
 80045e0:	428b      	cmp	r3, r1
 80045e2:	bf01      	itttt	eq
 80045e4:	6819      	ldreq	r1, [r3, #0]
 80045e6:	685b      	ldreq	r3, [r3, #4]
 80045e8:	1809      	addeq	r1, r1, r0
 80045ea:	6021      	streq	r1, [r4, #0]
 80045ec:	e7ed      	b.n	80045ca <_free_r+0x1e>
 80045ee:	461a      	mov	r2, r3
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	b10b      	cbz	r3, 80045f8 <_free_r+0x4c>
 80045f4:	42a3      	cmp	r3, r4
 80045f6:	d9fa      	bls.n	80045ee <_free_r+0x42>
 80045f8:	6811      	ldr	r1, [r2, #0]
 80045fa:	1850      	adds	r0, r2, r1
 80045fc:	42a0      	cmp	r0, r4
 80045fe:	d10b      	bne.n	8004618 <_free_r+0x6c>
 8004600:	6820      	ldr	r0, [r4, #0]
 8004602:	4401      	add	r1, r0
 8004604:	1850      	adds	r0, r2, r1
 8004606:	4283      	cmp	r3, r0
 8004608:	6011      	str	r1, [r2, #0]
 800460a:	d1e0      	bne.n	80045ce <_free_r+0x22>
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	6053      	str	r3, [r2, #4]
 8004612:	4408      	add	r0, r1
 8004614:	6010      	str	r0, [r2, #0]
 8004616:	e7da      	b.n	80045ce <_free_r+0x22>
 8004618:	d902      	bls.n	8004620 <_free_r+0x74>
 800461a:	230c      	movs	r3, #12
 800461c:	602b      	str	r3, [r5, #0]
 800461e:	e7d6      	b.n	80045ce <_free_r+0x22>
 8004620:	6820      	ldr	r0, [r4, #0]
 8004622:	1821      	adds	r1, r4, r0
 8004624:	428b      	cmp	r3, r1
 8004626:	bf04      	itt	eq
 8004628:	6819      	ldreq	r1, [r3, #0]
 800462a:	685b      	ldreq	r3, [r3, #4]
 800462c:	6063      	str	r3, [r4, #4]
 800462e:	bf04      	itt	eq
 8004630:	1809      	addeq	r1, r1, r0
 8004632:	6021      	streq	r1, [r4, #0]
 8004634:	6054      	str	r4, [r2, #4]
 8004636:	e7ca      	b.n	80045ce <_free_r+0x22>
 8004638:	bd38      	pop	{r3, r4, r5, pc}
 800463a:	bf00      	nop
 800463c:	20004208 	.word	0x20004208

08004640 <__malloc_lock>:
 8004640:	4801      	ldr	r0, [pc, #4]	@ (8004648 <__malloc_lock+0x8>)
 8004642:	f7ff bfa3 	b.w	800458c <__retarget_lock_acquire_recursive>
 8004646:	bf00      	nop
 8004648:	20004204 	.word	0x20004204

0800464c <__malloc_unlock>:
 800464c:	4801      	ldr	r0, [pc, #4]	@ (8004654 <__malloc_unlock+0x8>)
 800464e:	f7ff bf9e 	b.w	800458e <__retarget_lock_release_recursive>
 8004652:	bf00      	nop
 8004654:	20004204 	.word	0x20004204

08004658 <_init>:
 8004658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465a:	bf00      	nop
 800465c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800465e:	bc08      	pop	{r3}
 8004660:	469e      	mov	lr, r3
 8004662:	4770      	bx	lr

08004664 <_fini>:
 8004664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004666:	bf00      	nop
 8004668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466a:	bc08      	pop	{r3}
 800466c:	469e      	mov	lr, r3
 800466e:	4770      	bx	lr
