
FREERTOS_SOFTTIMER_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048c0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08004a50  08004a50  00005a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aa0  08004aa0  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004aa0  08004aa0  00005aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004aa8  08004aa8  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004aa8  08004aa8  00005aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004aac  08004aac  00005aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004ab0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006060  2**0
                  CONTENTS
 10 .bss          00004788  20000060  20000060  00006060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200047e8  200047e8  00006060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fb69  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002953  00000000  00000000  00015bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e68  00000000  00000000  00018550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b10  00000000  00000000  000193b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f7d  00000000  00000000  00019ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010dbe  00000000  00000000  0003be45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0928  00000000  00000000  0004cc03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011d52b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e10  00000000  00000000  0011d570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00121380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a38 	.word	0x08004a38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004a38 	.word	0x08004a38

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <vApplicationGetIdleTaskMemory+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <vApplicationGetIdleTaskMemory+0x30>)
 80004d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2000007c 	.word	0x2000007c
 80004f0:	2000011c 	.word	0x2000011c

080004f4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	4a07      	ldr	r2, [pc, #28]	@ (8000520 <vApplicationGetTimerTaskMemory+0x2c>)
 8000504:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	4a06      	ldr	r2, [pc, #24]	@ (8000524 <vApplicationGetTimerTaskMemory+0x30>)
 800050a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000512:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000514:	bf00      	nop
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	2000031c 	.word	0x2000031c
 8000524:	200003bc 	.word	0x200003bc

08000528 <someFunction>:
xTaskHandle led2Handle;

/* definition and creation of OSTCallback */
// osTimerDef(OSTCallback, OSTCallback1);
// OSTCallbackHandle = osTimerCreate(osTimer(OSTCallback), osTimerOnce, NULL);
void someFunction() {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af02      	add	r7, sp, #8
    // Create and assign the timers
    PTHandle = xTimerCreate("timer1", pdMS_TO_TICKS(1000), pdTRUE, (void *)1, TimerCallback);
 800052e:	4b0d      	ldr	r3, [pc, #52]	@ (8000564 <someFunction+0x3c>)
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	2301      	movs	r3, #1
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800053a:	480b      	ldr	r0, [pc, #44]	@ (8000568 <someFunction+0x40>)
 800053c:	f003 fa00 	bl	8003940 <xTimerCreate>
 8000540:	4603      	mov	r3, r0
 8000542:	4a0a      	ldr	r2, [pc, #40]	@ (800056c <someFunction+0x44>)
 8000544:	6013      	str	r3, [r2, #0]
    OTHandle = xTimerCreate("timer2", pdMS_TO_TICKS(4000), pdFALSE, (void *)2, TimerCallback);
 8000546:	4b07      	ldr	r3, [pc, #28]	@ (8000564 <someFunction+0x3c>)
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2302      	movs	r3, #2
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 8000552:	4807      	ldr	r0, [pc, #28]	@ (8000570 <someFunction+0x48>)
 8000554:	f003 f9f4 	bl	8003940 <xTimerCreate>
 8000558:	4603      	mov	r3, r0
 800055a:	4a06      	ldr	r2, [pc, #24]	@ (8000574 <someFunction+0x4c>)
 800055c:	6013      	str	r3, [r2, #0]

    // Other code...
}
 800055e:	bf00      	nop
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	080007dd 	.word	0x080007dd
 8000568:	08004a50 	.word	0x08004a50
 800056c:	200007bc 	.word	0x200007bc
 8000570:	08004a58 	.word	0x08004a58
 8000574:	200007c0 	.word	0x200007c0

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fa73 	bl	8000a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f829 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f885 	bl	8000694 <MX_GPIO_Init>
  /* Create the thread(s) */
  /* definition and creation of led1Task */
  //osThreadDef(led1Task, StartLed1Task, osPriorityNormal, 0, 128);
  // led1TaskHandle = osThreadCreate(osThread(led1Task), NULL);

  xTaskCreate(led1Task, "led1", 128, NULL, 1, &led1Handle);
 800058a:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <main+0x48>)
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2301      	movs	r3, #1
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	2280      	movs	r2, #128	@ 0x80
 8000596:	490b      	ldr	r1, [pc, #44]	@ (80005c4 <main+0x4c>)
 8000598:	480b      	ldr	r0, [pc, #44]	@ (80005c8 <main+0x50>)
 800059a:	f002 fa93 	bl	8002ac4 <xTaskCreate>
  xTaskCreate(led2Task, "led2", 128, NULL, 1, &led2Handle);
 800059e:	4b0b      	ldr	r3, [pc, #44]	@ (80005cc <main+0x54>)
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2301      	movs	r3, #1
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2300      	movs	r3, #0
 80005a8:	2280      	movs	r2, #128	@ 0x80
 80005aa:	4909      	ldr	r1, [pc, #36]	@ (80005d0 <main+0x58>)
 80005ac:	4809      	ldr	r0, [pc, #36]	@ (80005d4 <main+0x5c>)
 80005ae:	f002 fa89 	bl	8002ac4 <xTaskCreate>


  someFunction();
 80005b2:	f7ff ffb9 	bl	8000528 <someFunction>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  // osKernelStart();
  vTaskStartScheduler();
 80005b6:	f002 fc0b 	bl	8002dd0 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ba:	bf00      	nop
 80005bc:	e7fd      	b.n	80005ba <main+0x42>
 80005be:	bf00      	nop
 80005c0:	200007c4 	.word	0x200007c4
 80005c4:	08004a60 	.word	0x08004a60
 80005c8:	08000755 	.word	0x08000755
 80005cc:	200007c8 	.word	0x200007c8
 80005d0:	08004a68 	.word	0x08004a68
 80005d4:	08000795 	.word	0x08000795

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	@ 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2230      	movs	r2, #48	@ 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f004 f93e 	bl	8004868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	4b22      	ldr	r3, [pc, #136]	@ (800068c <SystemClock_Config+0xb4>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	4a21      	ldr	r2, [pc, #132]	@ (800068c <SystemClock_Config+0xb4>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	@ 0x40
 800060c:	4b1f      	ldr	r3, [pc, #124]	@ (800068c <SystemClock_Config+0xb4>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b1c      	ldr	r3, [pc, #112]	@ (8000690 <SystemClock_Config+0xb8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a1b      	ldr	r2, [pc, #108]	@ (8000690 <SystemClock_Config+0xb8>)
 8000622:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b19      	ldr	r3, [pc, #100]	@ (8000690 <SystemClock_Config+0xb8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000634:	2302      	movs	r3, #2
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063c:	2310      	movs	r3, #16
 800063e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000640:	2300      	movs	r3, #0
 8000642:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f000 fd19 	bl	8001080 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000654:	f000 f8f8 	bl	8000848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f000 ff7c 	bl	8001570 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800067e:	f000 f8e3 	bl	8000848 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3750      	adds	r7, #80	@ 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	4b26      	ldr	r3, [pc, #152]	@ (8000748 <MX_GPIO_Init+0xb4>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a25      	ldr	r2, [pc, #148]	@ (8000748 <MX_GPIO_Init+0xb4>)
 80006b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b23      	ldr	r3, [pc, #140]	@ (8000748 <MX_GPIO_Init+0xb4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000748 <MX_GPIO_Init+0xb4>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a1e      	ldr	r2, [pc, #120]	@ (8000748 <MX_GPIO_Init+0xb4>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <MX_GPIO_Init+0xb4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <MX_GPIO_Init+0xb4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a17      	ldr	r2, [pc, #92]	@ (8000748 <MX_GPIO_Init+0xb4>)
 80006ec:	f043 0308 	orr.w	r3, r3, #8
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <MX_GPIO_Init+0xb4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0308 	and.w	r3, r3, #8
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8000704:	4811      	ldr	r0, [pc, #68]	@ (800074c <MX_GPIO_Init+0xb8>)
 8000706:	f000 fc87 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800070a:	2301      	movs	r3, #1
 800070c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	4619      	mov	r1, r3
 800071c:	480c      	ldr	r0, [pc, #48]	@ (8000750 <MX_GPIO_Init+0xbc>)
 800071e:	f000 fac7 	bl	8000cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000722:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000726:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	4619      	mov	r1, r3
 800073a:	4804      	ldr	r0, [pc, #16]	@ (800074c <MX_GPIO_Init+0xb8>)
 800073c:	f000 fab8 	bl	8000cb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000740:	bf00      	nop
 8000742:	3720      	adds	r7, #32
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40023800 	.word	0x40023800
 800074c:	40020c00 	.word	0x40020c00
 8000750:	40020000 	.word	0x40020000

08000754 <led1Task>:
//  }
//  /* USER CODE END 5 */
//}

void led1Task(void* argument)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b085      	sub	sp, #20
 8000758:	af02      	add	r7, sp, #8
 800075a:	6078      	str	r0, [r7, #4]
	xTimerStart(PTHandle,0);
 800075c:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <led1Task+0x38>)
 800075e:	681c      	ldr	r4, [r3, #0]
 8000760:	f002 fc52 	bl	8003008 <xTaskGetTickCount>
 8000764:	4602      	mov	r2, r0
 8000766:	2300      	movs	r3, #0
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2300      	movs	r3, #0
 800076c:	2101      	movs	r1, #1
 800076e:	4620      	mov	r0, r4
 8000770:	f003 f944 	bl	80039fc <xTimerGenericCommand>

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 8000774:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000778:	4805      	ldr	r0, [pc, #20]	@ (8000790 <led1Task+0x3c>)
 800077a:	f000 fc66 	bl	800104a <HAL_GPIO_TogglePin>
		vTaskDelay(2000);
 800077e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000782:	f002 faef 	bl	8002d64 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 8000786:	bf00      	nop
 8000788:	e7f4      	b.n	8000774 <led1Task+0x20>
 800078a:	bf00      	nop
 800078c:	200007bc 	.word	0x200007bc
 8000790:	40020c00 	.word	0x40020c00

08000794 <led2Task>:


}

void led2Task(void* argument)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b085      	sub	sp, #20
 8000798:	af02      	add	r7, sp, #8
 800079a:	6078      	str	r0, [r7, #4]


	while(1)
	{
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) == 1)
 800079c:	2101      	movs	r1, #1
 800079e:	480d      	ldr	r0, [pc, #52]	@ (80007d4 <led2Task+0x40>)
 80007a0:	f000 fc22 	bl	8000fe8 <HAL_GPIO_ReadPin>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d1f8      	bne.n	800079c <led2Task+0x8>
		{
			while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0));
 80007aa:	bf00      	nop
 80007ac:	2101      	movs	r1, #1
 80007ae:	4809      	ldr	r0, [pc, #36]	@ (80007d4 <led2Task+0x40>)
 80007b0:	f000 fc1a 	bl	8000fe8 <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d1f8      	bne.n	80007ac <led2Task+0x18>
			xTimerStart(OTHandle,0);
 80007ba:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <led2Task+0x44>)
 80007bc:	681c      	ldr	r4, [r3, #0]
 80007be:	f002 fc23 	bl	8003008 <xTaskGetTickCount>
 80007c2:	4602      	mov	r2, r0
 80007c4:	2300      	movs	r3, #0
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	2300      	movs	r3, #0
 80007ca:	2101      	movs	r1, #1
 80007cc:	4620      	mov	r0, r4
 80007ce:	f003 f915 	bl	80039fc <xTimerGenericCommand>
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) == 1)
 80007d2:	e7e3      	b.n	800079c <led2Task+0x8>
 80007d4:	40020000 	.word	0x40020000
 80007d8:	200007c0 	.word	0x200007c0

080007dc <TimerCallback>:
//
//  /* USER CODE END OSTCallback1 */
//}

void TimerCallback(xTimerHandle xTimer)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	if(xTimer == PTHandle)
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <TimerCallback+0x3c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d105      	bne.n	80007fa <TimerCallback+0x1e>
	{
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 80007ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007f2:	480a      	ldr	r0, [pc, #40]	@ (800081c <TimerCallback+0x40>)
 80007f4:	f000 fc29 	bl	800104a <HAL_GPIO_TogglePin>
	{
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14);
	}


}
 80007f8:	e009      	b.n	800080e <TimerCallback+0x32>
	else if(xTimer == OTHandle)
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <TimerCallback+0x44>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	429a      	cmp	r2, r3
 8000802:	d104      	bne.n	800080e <TimerCallback+0x32>
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14);
 8000804:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000808:	4804      	ldr	r0, [pc, #16]	@ (800081c <TimerCallback+0x40>)
 800080a:	f000 fc1e 	bl	800104a <HAL_GPIO_TogglePin>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200007bc 	.word	0x200007bc
 800081c:	40020c00 	.word	0x40020c00
 8000820:	200007c0 	.word	0x200007c0

08000824 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a04      	ldr	r2, [pc, #16]	@ (8000844 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d101      	bne.n	800083a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000836:	f000 f939 	bl	8000aac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40001000 	.word	0x40001000

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <Error_Handler+0x8>

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <HAL_MspInit+0x54>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000862:	4a11      	ldr	r2, [pc, #68]	@ (80008a8 <HAL_MspInit+0x54>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000868:	6453      	str	r3, [r2, #68]	@ 0x44
 800086a:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <HAL_MspInit+0x54>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <HAL_MspInit+0x54>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	4a0a      	ldr	r2, [pc, #40]	@ (80008a8 <HAL_MspInit+0x54>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000884:	6413      	str	r3, [r2, #64]	@ 0x40
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <HAL_MspInit+0x54>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	210f      	movs	r1, #15
 8000896:	f06f 0001 	mvn.w	r0, #1
 800089a:	f000 f9df 	bl	8000c5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800

080008ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08e      	sub	sp, #56	@ 0x38
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	4b33      	ldr	r3, [pc, #204]	@ (8000990 <HAL_InitTick+0xe4>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c4:	4a32      	ldr	r2, [pc, #200]	@ (8000990 <HAL_InitTick+0xe4>)
 80008c6:	f043 0310 	orr.w	r3, r3, #16
 80008ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80008cc:	4b30      	ldr	r3, [pc, #192]	@ (8000990 <HAL_InitTick+0xe4>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d0:	f003 0310 	and.w	r3, r3, #16
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008d8:	f107 0210 	add.w	r2, r7, #16
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4611      	mov	r1, r2
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 f810 	bl	8001908 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008e8:	6a3b      	ldr	r3, [r7, #32]
 80008ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d103      	bne.n	80008fa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008f2:	f000 fff5 	bl	80018e0 <HAL_RCC_GetPCLK1Freq>
 80008f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80008f8:	e004      	b.n	8000904 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008fa:	f000 fff1 	bl	80018e0 <HAL_RCC_GetPCLK1Freq>
 80008fe:	4603      	mov	r3, r0
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000906:	4a23      	ldr	r2, [pc, #140]	@ (8000994 <HAL_InitTick+0xe8>)
 8000908:	fba2 2303 	umull	r2, r3, r2, r3
 800090c:	0c9b      	lsrs	r3, r3, #18
 800090e:	3b01      	subs	r3, #1
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000912:	4b21      	ldr	r3, [pc, #132]	@ (8000998 <HAL_InitTick+0xec>)
 8000914:	4a21      	ldr	r2, [pc, #132]	@ (800099c <HAL_InitTick+0xf0>)
 8000916:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000918:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <HAL_InitTick+0xec>)
 800091a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800091e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000920:	4a1d      	ldr	r2, [pc, #116]	@ (8000998 <HAL_InitTick+0xec>)
 8000922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000924:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000926:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <HAL_InitTick+0xec>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092c:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <HAL_InitTick+0xec>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000932:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <HAL_InitTick+0xec>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000938:	4817      	ldr	r0, [pc, #92]	@ (8000998 <HAL_InitTick+0xec>)
 800093a:	f001 f817 	bl	800196c <HAL_TIM_Base_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000944:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000948:	2b00      	cmp	r3, #0
 800094a:	d11b      	bne.n	8000984 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800094c:	4812      	ldr	r0, [pc, #72]	@ (8000998 <HAL_InitTick+0xec>)
 800094e:	f001 f867 	bl	8001a20 <HAL_TIM_Base_Start_IT>
 8000952:	4603      	mov	r3, r0
 8000954:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000958:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800095c:	2b00      	cmp	r3, #0
 800095e:	d111      	bne.n	8000984 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000960:	2036      	movs	r0, #54	@ 0x36
 8000962:	f000 f997 	bl	8000c94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b0f      	cmp	r3, #15
 800096a:	d808      	bhi.n	800097e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800096c:	2200      	movs	r2, #0
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	2036      	movs	r0, #54	@ 0x36
 8000972:	f000 f973 	bl	8000c5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000976:	4a0a      	ldr	r2, [pc, #40]	@ (80009a0 <HAL_InitTick+0xf4>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	e002      	b.n	8000984 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000984:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000988:	4618      	mov	r0, r3
 800098a:	3738      	adds	r7, #56	@ 0x38
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800
 8000994:	431bde83 	.word	0x431bde83
 8000998:	200007cc 	.word	0x200007cc
 800099c:	40001000 	.word	0x40001000
 80009a0:	20000004 	.word	0x20000004

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <NMI_Handler+0x4>

080009ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <HardFault_Handler+0x4>

080009b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <MemManage_Handler+0x4>

080009bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <UsageFault_Handler+0x4>

080009cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
	...

080009dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009e0:	4802      	ldr	r0, [pc, #8]	@ (80009ec <TIM6_DAC_IRQHandler+0x10>)
 80009e2:	f001 f88d 	bl	8001b00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200007cc 	.word	0x200007cc

080009f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <SystemInit+0x20>)
 80009f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009fa:	4a05      	ldr	r2, [pc, #20]	@ (8000a10 <SystemInit+0x20>)
 80009fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a18:	f7ff ffea 	bl	80009f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a1c:	480c      	ldr	r0, [pc, #48]	@ (8000a50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a1e:	490d      	ldr	r1, [pc, #52]	@ (8000a54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a20:	4a0d      	ldr	r2, [pc, #52]	@ (8000a58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a24:	e002      	b.n	8000a2c <LoopCopyDataInit>

08000a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2a:	3304      	adds	r3, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a30:	d3f9      	bcc.n	8000a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a32:	4a0a      	ldr	r2, [pc, #40]	@ (8000a5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a34:	4c0a      	ldr	r4, [pc, #40]	@ (8000a60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a38:	e001      	b.n	8000a3e <LoopFillZerobss>

08000a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3c:	3204      	adds	r2, #4

08000a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a40:	d3fb      	bcc.n	8000a3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a42:	f003 ff6f 	bl	8004924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a46:	f7ff fd97 	bl	8000578 <main>
  bx  lr    
 8000a4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a54:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000a58:	08004ab0 	.word	0x08004ab0
  ldr r2, =_sbss
 8000a5c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000a60:	200047e8 	.word	0x200047e8

08000a64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a64:	e7fe      	b.n	8000a64 <ADC_IRQHandler>
	...

08000a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <HAL_Init+0x40>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa8 <HAL_Init+0x40>)
 8000a72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a78:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa8 <HAL_Init+0x40>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa8 <HAL_Init+0x40>)
 8000a7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a84:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a07      	ldr	r2, [pc, #28]	@ (8000aa8 <HAL_Init+0x40>)
 8000a8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a90:	2003      	movs	r0, #3
 8000a92:	f000 f8d8 	bl	8000c46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a96:	200f      	movs	r0, #15
 8000a98:	f7ff ff08 	bl	80008ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a9c:	f7ff feda 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023c00 	.word	0x40023c00

08000aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <HAL_IncTick+0x20>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <HAL_IncTick+0x24>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	4a04      	ldr	r2, [pc, #16]	@ (8000ad0 <HAL_IncTick+0x24>)
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	20000814 	.word	0x20000814

08000ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b03      	ldr	r3, [pc, #12]	@ (8000ae8 <HAL_GetTick+0x14>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000814 	.word	0x20000814

08000aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000afc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1e:	4a04      	ldr	r2, [pc, #16]	@ (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	60d3      	str	r3, [r2, #12]
}
 8000b24:	bf00      	nop
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b38:	4b04      	ldr	r3, [pc, #16]	@ (8000b4c <__NVIC_GetPriorityGrouping+0x18>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	0a1b      	lsrs	r3, r3, #8
 8000b3e:	f003 0307 	and.w	r3, r3, #7
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	db0b      	blt.n	8000b7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	f003 021f 	and.w	r2, r3, #31
 8000b68:	4907      	ldr	r1, [pc, #28]	@ (8000b88 <__NVIC_EnableIRQ+0x38>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	095b      	lsrs	r3, r3, #5
 8000b70:	2001      	movs	r0, #1
 8000b72:	fa00 f202 	lsl.w	r2, r0, r2
 8000b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000e100 	.word	0xe000e100

08000b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	db0a      	blt.n	8000bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	490c      	ldr	r1, [pc, #48]	@ (8000bd8 <__NVIC_SetPriority+0x4c>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	0112      	lsls	r2, r2, #4
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	440b      	add	r3, r1
 8000bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb4:	e00a      	b.n	8000bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4908      	ldr	r1, [pc, #32]	@ (8000bdc <__NVIC_SetPriority+0x50>)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	3b04      	subs	r3, #4
 8000bc4:	0112      	lsls	r2, r2, #4
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	440b      	add	r3, r1
 8000bca:	761a      	strb	r2, [r3, #24]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000e100 	.word	0xe000e100
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	@ 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	f1c3 0307 	rsb	r3, r3, #7
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	bf28      	it	cs
 8000bfe:	2304      	movcs	r3, #4
 8000c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3304      	adds	r3, #4
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d902      	bls.n	8000c10 <NVIC_EncodePriority+0x30>
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3b03      	subs	r3, #3
 8000c0e:	e000      	b.n	8000c12 <NVIC_EncodePriority+0x32>
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c28:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	43d9      	mvns	r1, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	4313      	orrs	r3, r2
         );
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3724      	adds	r7, #36	@ 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ff4c 	bl	8000aec <__NVIC_SetPriorityGrouping>
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
 8000c68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c6e:	f7ff ff61 	bl	8000b34 <__NVIC_GetPriorityGrouping>
 8000c72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	68b9      	ldr	r1, [r7, #8]
 8000c78:	6978      	ldr	r0, [r7, #20]
 8000c7a:	f7ff ffb1 	bl	8000be0 <NVIC_EncodePriority>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c84:	4611      	mov	r1, r2
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff ff80 	bl	8000b8c <__NVIC_SetPriority>
}
 8000c8c:	bf00      	nop
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ff54 	bl	8000b50 <__NVIC_EnableIRQ>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	@ 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
 8000cca:	e16b      	b.n	8000fa4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ccc:	2201      	movs	r2, #1
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	f040 815a 	bne.w	8000f9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f003 0303 	and.w	r3, r3, #3
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d005      	beq.n	8000d02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d130      	bne.n	8000d64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43db      	mvns	r3, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4013      	ands	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	68da      	ldr	r2, [r3, #12]
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d38:	2201      	movs	r2, #1
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	091b      	lsrs	r3, r3, #4
 8000d4e:	f003 0201 	and.w	r2, r3, #1
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	d017      	beq.n	8000da0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d123      	bne.n	8000df4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	08da      	lsrs	r2, r3, #3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3208      	adds	r2, #8
 8000db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	f003 0307 	and.w	r3, r3, #7
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	220f      	movs	r2, #15
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	691a      	ldr	r2, [r3, #16]
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	08da      	lsrs	r2, r3, #3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3208      	adds	r2, #8
 8000dee:	69b9      	ldr	r1, [r7, #24]
 8000df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0203 	and.w	r2, r3, #3
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f000 80b4 	beq.w	8000f9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b60      	ldr	r3, [pc, #384]	@ (8000fbc <HAL_GPIO_Init+0x30c>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3e:	4a5f      	ldr	r2, [pc, #380]	@ (8000fbc <HAL_GPIO_Init+0x30c>)
 8000e40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e46:	4b5d      	ldr	r3, [pc, #372]	@ (8000fbc <HAL_GPIO_Init+0x30c>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e52:	4a5b      	ldr	r2, [pc, #364]	@ (8000fc0 <HAL_GPIO_Init+0x310>)
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	089b      	lsrs	r3, r3, #2
 8000e58:	3302      	adds	r3, #2
 8000e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	220f      	movs	r2, #15
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4013      	ands	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a52      	ldr	r2, [pc, #328]	@ (8000fc4 <HAL_GPIO_Init+0x314>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d02b      	beq.n	8000ed6 <HAL_GPIO_Init+0x226>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a51      	ldr	r2, [pc, #324]	@ (8000fc8 <HAL_GPIO_Init+0x318>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d025      	beq.n	8000ed2 <HAL_GPIO_Init+0x222>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a50      	ldr	r2, [pc, #320]	@ (8000fcc <HAL_GPIO_Init+0x31c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d01f      	beq.n	8000ece <HAL_GPIO_Init+0x21e>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4f      	ldr	r2, [pc, #316]	@ (8000fd0 <HAL_GPIO_Init+0x320>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d019      	beq.n	8000eca <HAL_GPIO_Init+0x21a>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4e      	ldr	r2, [pc, #312]	@ (8000fd4 <HAL_GPIO_Init+0x324>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d013      	beq.n	8000ec6 <HAL_GPIO_Init+0x216>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4d      	ldr	r2, [pc, #308]	@ (8000fd8 <HAL_GPIO_Init+0x328>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d00d      	beq.n	8000ec2 <HAL_GPIO_Init+0x212>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4c      	ldr	r2, [pc, #304]	@ (8000fdc <HAL_GPIO_Init+0x32c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d007      	beq.n	8000ebe <HAL_GPIO_Init+0x20e>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4b      	ldr	r2, [pc, #300]	@ (8000fe0 <HAL_GPIO_Init+0x330>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d101      	bne.n	8000eba <HAL_GPIO_Init+0x20a>
 8000eb6:	2307      	movs	r3, #7
 8000eb8:	e00e      	b.n	8000ed8 <HAL_GPIO_Init+0x228>
 8000eba:	2308      	movs	r3, #8
 8000ebc:	e00c      	b.n	8000ed8 <HAL_GPIO_Init+0x228>
 8000ebe:	2306      	movs	r3, #6
 8000ec0:	e00a      	b.n	8000ed8 <HAL_GPIO_Init+0x228>
 8000ec2:	2305      	movs	r3, #5
 8000ec4:	e008      	b.n	8000ed8 <HAL_GPIO_Init+0x228>
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	e006      	b.n	8000ed8 <HAL_GPIO_Init+0x228>
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e004      	b.n	8000ed8 <HAL_GPIO_Init+0x228>
 8000ece:	2302      	movs	r3, #2
 8000ed0:	e002      	b.n	8000ed8 <HAL_GPIO_Init+0x228>
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e000      	b.n	8000ed8 <HAL_GPIO_Init+0x228>
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	69fa      	ldr	r2, [r7, #28]
 8000eda:	f002 0203 	and.w	r2, r2, #3
 8000ede:	0092      	lsls	r2, r2, #2
 8000ee0:	4093      	lsls	r3, r2
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ee8:	4935      	ldr	r1, [pc, #212]	@ (8000fc0 <HAL_GPIO_Init+0x310>)
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	089b      	lsrs	r3, r3, #2
 8000eee:	3302      	adds	r3, #2
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8000fe4 <HAL_GPIO_Init+0x334>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f1a:	4a32      	ldr	r2, [pc, #200]	@ (8000fe4 <HAL_GPIO_Init+0x334>)
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f20:	4b30      	ldr	r3, [pc, #192]	@ (8000fe4 <HAL_GPIO_Init+0x334>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f44:	4a27      	ldr	r2, [pc, #156]	@ (8000fe4 <HAL_GPIO_Init+0x334>)
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f4a:	4b26      	ldr	r3, [pc, #152]	@ (8000fe4 <HAL_GPIO_Init+0x334>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe4 <HAL_GPIO_Init+0x334>)
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f74:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe4 <HAL_GPIO_Init+0x334>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f98:	4a12      	ldr	r2, [pc, #72]	@ (8000fe4 <HAL_GPIO_Init+0x334>)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	61fb      	str	r3, [r7, #28]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	2b0f      	cmp	r3, #15
 8000fa8:	f67f ae90 	bls.w	8000ccc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3724      	adds	r7, #36	@ 0x24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40013800 	.word	0x40013800
 8000fc4:	40020000 	.word	0x40020000
 8000fc8:	40020400 	.word	0x40020400
 8000fcc:	40020800 	.word	0x40020800
 8000fd0:	40020c00 	.word	0x40020c00
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40021400 	.word	0x40021400
 8000fdc:	40021800 	.word	0x40021800
 8000fe0:	40021c00 	.word	0x40021c00
 8000fe4:	40013c00 	.word	0x40013c00

08000fe8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	691a      	ldr	r2, [r3, #16]
 8000ff8:	887b      	ldrh	r3, [r7, #2]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d002      	beq.n	8001006 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001000:	2301      	movs	r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
 8001004:	e001      	b.n	800100a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800100a:	7bfb      	ldrb	r3, [r7, #15]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	807b      	strh	r3, [r7, #2]
 8001024:	4613      	mov	r3, r2
 8001026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001028:	787b      	ldrb	r3, [r7, #1]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800102e:	887a      	ldrh	r2, [r7, #2]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001034:	e003      	b.n	800103e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	041a      	lsls	r2, r3, #16
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	619a      	str	r2, [r3, #24]
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800104a:	b480      	push	{r7}
 800104c:	b085      	sub	sp, #20
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	460b      	mov	r3, r1
 8001054:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800105c:	887a      	ldrh	r2, [r7, #2]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4013      	ands	r3, r2
 8001062:	041a      	lsls	r2, r3, #16
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	43d9      	mvns	r1, r3
 8001068:	887b      	ldrh	r3, [r7, #2]
 800106a:	400b      	ands	r3, r1
 800106c:	431a      	orrs	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	619a      	str	r2, [r3, #24]
}
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e267      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	d075      	beq.n	800118a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800109e:	4b88      	ldr	r3, [pc, #544]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f003 030c 	and.w	r3, r3, #12
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	d00c      	beq.n	80010c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010aa:	4b85      	ldr	r3, [pc, #532]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010b2:	2b08      	cmp	r3, #8
 80010b4:	d112      	bne.n	80010dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010b6:	4b82      	ldr	r3, [pc, #520]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010c2:	d10b      	bne.n	80010dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c4:	4b7e      	ldr	r3, [pc, #504]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d05b      	beq.n	8001188 <HAL_RCC_OscConfig+0x108>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d157      	bne.n	8001188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e242      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010e4:	d106      	bne.n	80010f4 <HAL_RCC_OscConfig+0x74>
 80010e6:	4b76      	ldr	r3, [pc, #472]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a75      	ldr	r2, [pc, #468]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 80010ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e01d      	b.n	8001130 <HAL_RCC_OscConfig+0xb0>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_OscConfig+0x98>
 80010fe:	4b70      	ldr	r3, [pc, #448]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a6f      	ldr	r2, [pc, #444]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 8001104:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	4b6d      	ldr	r3, [pc, #436]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a6c      	ldr	r2, [pc, #432]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 8001110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e00b      	b.n	8001130 <HAL_RCC_OscConfig+0xb0>
 8001118:	4b69      	ldr	r3, [pc, #420]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a68      	ldr	r2, [pc, #416]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 800111e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	4b66      	ldr	r3, [pc, #408]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a65      	ldr	r2, [pc, #404]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 800112a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800112e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d013      	beq.n	8001160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001138:	f7ff fccc 	bl	8000ad4 <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001140:	f7ff fcc8 	bl	8000ad4 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b64      	cmp	r3, #100	@ 0x64
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e207      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001152:	4b5b      	ldr	r3, [pc, #364]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0f0      	beq.n	8001140 <HAL_RCC_OscConfig+0xc0>
 800115e:	e014      	b.n	800118a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001160:	f7ff fcb8 	bl	8000ad4 <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001168:	f7ff fcb4 	bl	8000ad4 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b64      	cmp	r3, #100	@ 0x64
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e1f3      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117a:	4b51      	ldr	r3, [pc, #324]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1f0      	bne.n	8001168 <HAL_RCC_OscConfig+0xe8>
 8001186:	e000      	b.n	800118a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d063      	beq.n	800125e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001196:	4b4a      	ldr	r3, [pc, #296]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 030c 	and.w	r3, r3, #12
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00b      	beq.n	80011ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011a2:	4b47      	ldr	r3, [pc, #284]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011aa:	2b08      	cmp	r3, #8
 80011ac:	d11c      	bne.n	80011e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ae:	4b44      	ldr	r3, [pc, #272]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d116      	bne.n	80011e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ba:	4b41      	ldr	r3, [pc, #260]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d005      	beq.n	80011d2 <HAL_RCC_OscConfig+0x152>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d001      	beq.n	80011d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e1c7      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d2:	4b3b      	ldr	r3, [pc, #236]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4937      	ldr	r1, [pc, #220]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e6:	e03a      	b.n	800125e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d020      	beq.n	8001232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011f0:	4b34      	ldr	r3, [pc, #208]	@ (80012c4 <HAL_RCC_OscConfig+0x244>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f6:	f7ff fc6d 	bl	8000ad4 <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011fe:	f7ff fc69 	bl	8000ad4 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e1a8      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001210:	4b2b      	ldr	r3, [pc, #172]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0f0      	beq.n	80011fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121c:	4b28      	ldr	r3, [pc, #160]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	4925      	ldr	r1, [pc, #148]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 800122c:	4313      	orrs	r3, r2
 800122e:	600b      	str	r3, [r1, #0]
 8001230:	e015      	b.n	800125e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001232:	4b24      	ldr	r3, [pc, #144]	@ (80012c4 <HAL_RCC_OscConfig+0x244>)
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001238:	f7ff fc4c 	bl	8000ad4 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001240:	f7ff fc48 	bl	8000ad4 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e187      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001252:	4b1b      	ldr	r3, [pc, #108]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f0      	bne.n	8001240 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	2b00      	cmp	r3, #0
 8001268:	d036      	beq.n	80012d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d016      	beq.n	80012a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001272:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <HAL_RCC_OscConfig+0x248>)
 8001274:	2201      	movs	r2, #1
 8001276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001278:	f7ff fc2c 	bl	8000ad4 <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001280:	f7ff fc28 	bl	8000ad4 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e167      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001292:	4b0b      	ldr	r3, [pc, #44]	@ (80012c0 <HAL_RCC_OscConfig+0x240>)
 8001294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f0      	beq.n	8001280 <HAL_RCC_OscConfig+0x200>
 800129e:	e01b      	b.n	80012d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012a0:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <HAL_RCC_OscConfig+0x248>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a6:	f7ff fc15 	bl	8000ad4 <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ac:	e00e      	b.n	80012cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ae:	f7ff fc11 	bl	8000ad4 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d907      	bls.n	80012cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e150      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
 80012c0:	40023800 	.word	0x40023800
 80012c4:	42470000 	.word	0x42470000
 80012c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012cc:	4b88      	ldr	r3, [pc, #544]	@ (80014f0 <HAL_RCC_OscConfig+0x470>)
 80012ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1ea      	bne.n	80012ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f000 8097 	beq.w	8001414 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ea:	4b81      	ldr	r3, [pc, #516]	@ (80014f0 <HAL_RCC_OscConfig+0x470>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d10f      	bne.n	8001316 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	4b7d      	ldr	r3, [pc, #500]	@ (80014f0 <HAL_RCC_OscConfig+0x470>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	4a7c      	ldr	r2, [pc, #496]	@ (80014f0 <HAL_RCC_OscConfig+0x470>)
 8001300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001304:	6413      	str	r3, [r2, #64]	@ 0x40
 8001306:	4b7a      	ldr	r3, [pc, #488]	@ (80014f0 <HAL_RCC_OscConfig+0x470>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001312:	2301      	movs	r3, #1
 8001314:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001316:	4b77      	ldr	r3, [pc, #476]	@ (80014f4 <HAL_RCC_OscConfig+0x474>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800131e:	2b00      	cmp	r3, #0
 8001320:	d118      	bne.n	8001354 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001322:	4b74      	ldr	r3, [pc, #464]	@ (80014f4 <HAL_RCC_OscConfig+0x474>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a73      	ldr	r2, [pc, #460]	@ (80014f4 <HAL_RCC_OscConfig+0x474>)
 8001328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800132c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800132e:	f7ff fbd1 	bl	8000ad4 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001336:	f7ff fbcd 	bl	8000ad4 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e10c      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001348:	4b6a      	ldr	r3, [pc, #424]	@ (80014f4 <HAL_RCC_OscConfig+0x474>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0f0      	beq.n	8001336 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d106      	bne.n	800136a <HAL_RCC_OscConfig+0x2ea>
 800135c:	4b64      	ldr	r3, [pc, #400]	@ (80014f0 <HAL_RCC_OscConfig+0x470>)
 800135e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001360:	4a63      	ldr	r2, [pc, #396]	@ (80014f0 <HAL_RCC_OscConfig+0x470>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6713      	str	r3, [r2, #112]	@ 0x70
 8001368:	e01c      	b.n	80013a4 <HAL_RCC_OscConfig+0x324>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	2b05      	cmp	r3, #5
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0x30c>
 8001372:	4b5f      	ldr	r3, [pc, #380]	@ (80014f0 <HAL_RCC_OscConfig+0x470>)
 8001374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001376:	4a5e      	ldr	r2, [pc, #376]	@ (80014f0 <HAL_RCC_OscConfig+0x470>)
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	6713      	str	r3, [r2, #112]	@ 0x70
 800137e:	4b5c      	ldr	r3, [pc, #368]	@ (80014f0 <HAL_RCC_OscConfig+0x470>)
 8001380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001382:	4a5b      	ldr	r2, [pc, #364]	@ (80014f0 <HAL_RCC_OscConfig+0x470>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6713      	str	r3, [r2, #112]	@ 0x70
 800138a:	e00b      	b.n	80013a4 <HAL_RCC_OscConfig+0x324>
 800138c:	4b58      	ldr	r3, [pc, #352]	@ (80014f0 <HAL_RCC_OscConfig+0x470>)
 800138e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001390:	4a57      	ldr	r2, [pc, #348]	@ (80014f0 <HAL_RCC_OscConfig+0x470>)
 8001392:	f023 0301 	bic.w	r3, r3, #1
 8001396:	6713      	str	r3, [r2, #112]	@ 0x70
 8001398:	4b55      	ldr	r3, [pc, #340]	@ (80014f0 <HAL_RCC_OscConfig+0x470>)
 800139a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800139c:	4a54      	ldr	r2, [pc, #336]	@ (80014f0 <HAL_RCC_OscConfig+0x470>)
 800139e:	f023 0304 	bic.w	r3, r3, #4
 80013a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d015      	beq.n	80013d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ac:	f7ff fb92 	bl	8000ad4 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b2:	e00a      	b.n	80013ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013b4:	f7ff fb8e 	bl	8000ad4 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e0cb      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ca:	4b49      	ldr	r3, [pc, #292]	@ (80014f0 <HAL_RCC_OscConfig+0x470>)
 80013cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0ee      	beq.n	80013b4 <HAL_RCC_OscConfig+0x334>
 80013d6:	e014      	b.n	8001402 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d8:	f7ff fb7c 	bl	8000ad4 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013de:	e00a      	b.n	80013f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013e0:	f7ff fb78 	bl	8000ad4 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e0b5      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f6:	4b3e      	ldr	r3, [pc, #248]	@ (80014f0 <HAL_RCC_OscConfig+0x470>)
 80013f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1ee      	bne.n	80013e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001402:	7dfb      	ldrb	r3, [r7, #23]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d105      	bne.n	8001414 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001408:	4b39      	ldr	r3, [pc, #228]	@ (80014f0 <HAL_RCC_OscConfig+0x470>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140c:	4a38      	ldr	r2, [pc, #224]	@ (80014f0 <HAL_RCC_OscConfig+0x470>)
 800140e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001412:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 80a1 	beq.w	8001560 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800141e:	4b34      	ldr	r3, [pc, #208]	@ (80014f0 <HAL_RCC_OscConfig+0x470>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	2b08      	cmp	r3, #8
 8001428:	d05c      	beq.n	80014e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d141      	bne.n	80014b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001432:	4b31      	ldr	r3, [pc, #196]	@ (80014f8 <HAL_RCC_OscConfig+0x478>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fb4c 	bl	8000ad4 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001440:	f7ff fb48 	bl	8000ad4 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e087      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001452:	4b27      	ldr	r3, [pc, #156]	@ (80014f0 <HAL_RCC_OscConfig+0x470>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69da      	ldr	r2, [r3, #28]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146c:	019b      	lsls	r3, r3, #6
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001474:	085b      	lsrs	r3, r3, #1
 8001476:	3b01      	subs	r3, #1
 8001478:	041b      	lsls	r3, r3, #16
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001480:	061b      	lsls	r3, r3, #24
 8001482:	491b      	ldr	r1, [pc, #108]	@ (80014f0 <HAL_RCC_OscConfig+0x470>)
 8001484:	4313      	orrs	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001488:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <HAL_RCC_OscConfig+0x478>)
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148e:	f7ff fb21 	bl	8000ad4 <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001496:	f7ff fb1d 	bl	8000ad4 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e05c      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a8:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <HAL_RCC_OscConfig+0x470>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x416>
 80014b4:	e054      	b.n	8001560 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b6:	4b10      	ldr	r3, [pc, #64]	@ (80014f8 <HAL_RCC_OscConfig+0x478>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fb0a 	bl	8000ad4 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c4:	f7ff fb06 	bl	8000ad4 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e045      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d6:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <HAL_RCC_OscConfig+0x470>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x444>
 80014e2:	e03d      	b.n	8001560 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d107      	bne.n	80014fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e038      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40007000 	.word	0x40007000
 80014f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <HAL_RCC_OscConfig+0x4ec>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d028      	beq.n	800155c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001514:	429a      	cmp	r2, r3
 8001516:	d121      	bne.n	800155c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001522:	429a      	cmp	r2, r3
 8001524:	d11a      	bne.n	800155c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800152c:	4013      	ands	r3, r2
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001532:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001534:	4293      	cmp	r3, r2
 8001536:	d111      	bne.n	800155c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001542:	085b      	lsrs	r3, r3, #1
 8001544:	3b01      	subs	r3, #1
 8001546:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001548:	429a      	cmp	r2, r3
 800154a:	d107      	bne.n	800155c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001556:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001558:	429a      	cmp	r2, r3
 800155a:	d001      	beq.n	8001560 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e000      	b.n	8001562 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800

08001570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e0cc      	b.n	800171e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001584:	4b68      	ldr	r3, [pc, #416]	@ (8001728 <HAL_RCC_ClockConfig+0x1b8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	d90c      	bls.n	80015ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001592:	4b65      	ldr	r3, [pc, #404]	@ (8001728 <HAL_RCC_ClockConfig+0x1b8>)
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800159a:	4b63      	ldr	r3, [pc, #396]	@ (8001728 <HAL_RCC_ClockConfig+0x1b8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d001      	beq.n	80015ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e0b8      	b.n	800171e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d020      	beq.n	80015fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015c4:	4b59      	ldr	r3, [pc, #356]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	4a58      	ldr	r2, [pc, #352]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015dc:	4b53      	ldr	r3, [pc, #332]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	4a52      	ldr	r2, [pc, #328]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e8:	4b50      	ldr	r3, [pc, #320]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	494d      	ldr	r1, [pc, #308]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b00      	cmp	r3, #0
 8001604:	d044      	beq.n	8001690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d107      	bne.n	800161e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160e:	4b47      	ldr	r3, [pc, #284]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d119      	bne.n	800164e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e07f      	b.n	800171e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b02      	cmp	r3, #2
 8001624:	d003      	beq.n	800162e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800162a:	2b03      	cmp	r3, #3
 800162c:	d107      	bne.n	800163e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162e:	4b3f      	ldr	r3, [pc, #252]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d109      	bne.n	800164e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e06f      	b.n	800171e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163e:	4b3b      	ldr	r3, [pc, #236]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e067      	b.n	800171e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800164e:	4b37      	ldr	r3, [pc, #220]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f023 0203 	bic.w	r2, r3, #3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	4934      	ldr	r1, [pc, #208]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 800165c:	4313      	orrs	r3, r2
 800165e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001660:	f7ff fa38 	bl	8000ad4 <HAL_GetTick>
 8001664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001666:	e00a      	b.n	800167e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001668:	f7ff fa34 	bl	8000ad4 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001676:	4293      	cmp	r3, r2
 8001678:	d901      	bls.n	800167e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e04f      	b.n	800171e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167e:	4b2b      	ldr	r3, [pc, #172]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 020c 	and.w	r2, r3, #12
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	429a      	cmp	r2, r3
 800168e:	d1eb      	bne.n	8001668 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001690:	4b25      	ldr	r3, [pc, #148]	@ (8001728 <HAL_RCC_ClockConfig+0x1b8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d20c      	bcs.n	80016b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169e:	4b22      	ldr	r3, [pc, #136]	@ (8001728 <HAL_RCC_ClockConfig+0x1b8>)
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a6:	4b20      	ldr	r3, [pc, #128]	@ (8001728 <HAL_RCC_ClockConfig+0x1b8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e032      	b.n	800171e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d008      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016c4:	4b19      	ldr	r3, [pc, #100]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	4916      	ldr	r1, [pc, #88]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d009      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016e2:	4b12      	ldr	r3, [pc, #72]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	490e      	ldr	r1, [pc, #56]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016f6:	f000 f821 	bl	800173c <HAL_RCC_GetSysClockFreq>
 80016fa:	4602      	mov	r2, r0
 80016fc:	4b0b      	ldr	r3, [pc, #44]	@ (800172c <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	091b      	lsrs	r3, r3, #4
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	490a      	ldr	r1, [pc, #40]	@ (8001730 <HAL_RCC_ClockConfig+0x1c0>)
 8001708:	5ccb      	ldrb	r3, [r1, r3]
 800170a:	fa22 f303 	lsr.w	r3, r2, r3
 800170e:	4a09      	ldr	r2, [pc, #36]	@ (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 8001710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001712:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <HAL_RCC_ClockConfig+0x1c8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff f8c8 	bl	80008ac <HAL_InitTick>

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023c00 	.word	0x40023c00
 800172c:	40023800 	.word	0x40023800
 8001730:	08004a88 	.word	0x08004a88
 8001734:	20000000 	.word	0x20000000
 8001738:	20000004 	.word	0x20000004

0800173c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800173c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001740:	b090      	sub	sp, #64	@ 0x40
 8001742:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001754:	4b59      	ldr	r3, [pc, #356]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x180>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 030c 	and.w	r3, r3, #12
 800175c:	2b08      	cmp	r3, #8
 800175e:	d00d      	beq.n	800177c <HAL_RCC_GetSysClockFreq+0x40>
 8001760:	2b08      	cmp	r3, #8
 8001762:	f200 80a1 	bhi.w	80018a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001766:	2b00      	cmp	r3, #0
 8001768:	d002      	beq.n	8001770 <HAL_RCC_GetSysClockFreq+0x34>
 800176a:	2b04      	cmp	r3, #4
 800176c:	d003      	beq.n	8001776 <HAL_RCC_GetSysClockFreq+0x3a>
 800176e:	e09b      	b.n	80018a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001770:	4b53      	ldr	r3, [pc, #332]	@ (80018c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001772:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001774:	e09b      	b.n	80018ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001776:	4b53      	ldr	r3, [pc, #332]	@ (80018c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001778:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800177a:	e098      	b.n	80018ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800177c:	4b4f      	ldr	r3, [pc, #316]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x180>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001784:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001786:	4b4d      	ldr	r3, [pc, #308]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x180>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d028      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001792:	4b4a      	ldr	r3, [pc, #296]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x180>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	099b      	lsrs	r3, r3, #6
 8001798:	2200      	movs	r2, #0
 800179a:	623b      	str	r3, [r7, #32]
 800179c:	627a      	str	r2, [r7, #36]	@ 0x24
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017a4:	2100      	movs	r1, #0
 80017a6:	4b47      	ldr	r3, [pc, #284]	@ (80018c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80017a8:	fb03 f201 	mul.w	r2, r3, r1
 80017ac:	2300      	movs	r3, #0
 80017ae:	fb00 f303 	mul.w	r3, r0, r3
 80017b2:	4413      	add	r3, r2
 80017b4:	4a43      	ldr	r2, [pc, #268]	@ (80018c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80017b6:	fba0 1202 	umull	r1, r2, r0, r2
 80017ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017bc:	460a      	mov	r2, r1
 80017be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80017c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017c2:	4413      	add	r3, r2
 80017c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017c8:	2200      	movs	r2, #0
 80017ca:	61bb      	str	r3, [r7, #24]
 80017cc:	61fa      	str	r2, [r7, #28]
 80017ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80017d6:	f7fe fcfb 	bl	80001d0 <__aeabi_uldivmod>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4613      	mov	r3, r2
 80017e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017e2:	e053      	b.n	800188c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e4:	4b35      	ldr	r3, [pc, #212]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x180>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	099b      	lsrs	r3, r3, #6
 80017ea:	2200      	movs	r2, #0
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	617a      	str	r2, [r7, #20]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80017f6:	f04f 0b00 	mov.w	fp, #0
 80017fa:	4652      	mov	r2, sl
 80017fc:	465b      	mov	r3, fp
 80017fe:	f04f 0000 	mov.w	r0, #0
 8001802:	f04f 0100 	mov.w	r1, #0
 8001806:	0159      	lsls	r1, r3, #5
 8001808:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800180c:	0150      	lsls	r0, r2, #5
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	ebb2 080a 	subs.w	r8, r2, sl
 8001816:	eb63 090b 	sbc.w	r9, r3, fp
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001826:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800182a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800182e:	ebb2 0408 	subs.w	r4, r2, r8
 8001832:	eb63 0509 	sbc.w	r5, r3, r9
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	00eb      	lsls	r3, r5, #3
 8001840:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001844:	00e2      	lsls	r2, r4, #3
 8001846:	4614      	mov	r4, r2
 8001848:	461d      	mov	r5, r3
 800184a:	eb14 030a 	adds.w	r3, r4, sl
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	eb45 030b 	adc.w	r3, r5, fp
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001862:	4629      	mov	r1, r5
 8001864:	028b      	lsls	r3, r1, #10
 8001866:	4621      	mov	r1, r4
 8001868:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800186c:	4621      	mov	r1, r4
 800186e:	028a      	lsls	r2, r1, #10
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001876:	2200      	movs	r2, #0
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	60fa      	str	r2, [r7, #12]
 800187c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001880:	f7fe fca6 	bl	80001d0 <__aeabi_uldivmod>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4613      	mov	r3, r2
 800188a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800188c:	4b0b      	ldr	r3, [pc, #44]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x180>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	0c1b      	lsrs	r3, r3, #16
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	3301      	adds	r3, #1
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800189c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800189e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018a6:	e002      	b.n	80018ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018a8:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80018aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3740      	adds	r7, #64	@ 0x40
 80018b4:	46bd      	mov	sp, r7
 80018b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800
 80018c0:	00f42400 	.word	0x00f42400
 80018c4:	017d7840 	.word	0x017d7840

080018c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018cc:	4b03      	ldr	r3, [pc, #12]	@ (80018dc <HAL_RCC_GetHCLKFreq+0x14>)
 80018ce:	681b      	ldr	r3, [r3, #0]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	20000000 	.word	0x20000000

080018e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018e4:	f7ff fff0 	bl	80018c8 <HAL_RCC_GetHCLKFreq>
 80018e8:	4602      	mov	r2, r0
 80018ea:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	0a9b      	lsrs	r3, r3, #10
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	4903      	ldr	r1, [pc, #12]	@ (8001904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018f6:	5ccb      	ldrb	r3, [r1, r3]
 80018f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40023800 	.word	0x40023800
 8001904:	08004a98 	.word	0x08004a98

08001908 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	220f      	movs	r2, #15
 8001916:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001918:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <HAL_RCC_GetClockConfig+0x5c>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 0203 	and.w	r2, r3, #3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001924:	4b0f      	ldr	r3, [pc, #60]	@ (8001964 <HAL_RCC_GetClockConfig+0x5c>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001930:	4b0c      	ldr	r3, [pc, #48]	@ (8001964 <HAL_RCC_GetClockConfig+0x5c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800193c:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <HAL_RCC_GetClockConfig+0x5c>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	08db      	lsrs	r3, r3, #3
 8001942:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800194a:	4b07      	ldr	r3, [pc, #28]	@ (8001968 <HAL_RCC_GetClockConfig+0x60>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0207 	and.w	r2, r3, #7
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	601a      	str	r2, [r3, #0]
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800
 8001968:	40023c00 	.word	0x40023c00

0800196c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e041      	b.n	8001a02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d106      	bne.n	8001998 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f839 	bl	8001a0a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2202      	movs	r2, #2
 800199c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3304      	adds	r3, #4
 80019a8:	4619      	mov	r1, r3
 80019aa:	4610      	mov	r0, r2
 80019ac:	f000 f9c0 	bl	8001d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d001      	beq.n	8001a38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e04e      	b.n	8001ad6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0201 	orr.w	r2, r2, #1
 8001a4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a23      	ldr	r2, [pc, #140]	@ (8001ae4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d022      	beq.n	8001aa0 <HAL_TIM_Base_Start_IT+0x80>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a62:	d01d      	beq.n	8001aa0 <HAL_TIM_Base_Start_IT+0x80>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a1f      	ldr	r2, [pc, #124]	@ (8001ae8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d018      	beq.n	8001aa0 <HAL_TIM_Base_Start_IT+0x80>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a1e      	ldr	r2, [pc, #120]	@ (8001aec <HAL_TIM_Base_Start_IT+0xcc>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d013      	beq.n	8001aa0 <HAL_TIM_Base_Start_IT+0x80>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a1c      	ldr	r2, [pc, #112]	@ (8001af0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00e      	beq.n	8001aa0 <HAL_TIM_Base_Start_IT+0x80>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a1b      	ldr	r2, [pc, #108]	@ (8001af4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d009      	beq.n	8001aa0 <HAL_TIM_Base_Start_IT+0x80>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a19      	ldr	r2, [pc, #100]	@ (8001af8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d004      	beq.n	8001aa0 <HAL_TIM_Base_Start_IT+0x80>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a18      	ldr	r2, [pc, #96]	@ (8001afc <HAL_TIM_Base_Start_IT+0xdc>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d111      	bne.n	8001ac4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2b06      	cmp	r3, #6
 8001ab0:	d010      	beq.n	8001ad4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f042 0201 	orr.w	r2, r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ac2:	e007      	b.n	8001ad4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0201 	orr.w	r2, r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40010000 	.word	0x40010000
 8001ae8:	40000400 	.word	0x40000400
 8001aec:	40000800 	.word	0x40000800
 8001af0:	40000c00 	.word	0x40000c00
 8001af4:	40010400 	.word	0x40010400
 8001af8:	40014000 	.word	0x40014000
 8001afc:	40001800 	.word	0x40001800

08001b00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d020      	beq.n	8001b64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d01b      	beq.n	8001b64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f06f 0202 	mvn.w	r2, #2
 8001b34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f8d2 	bl	8001cf4 <HAL_TIM_IC_CaptureCallback>
 8001b50:	e005      	b.n	8001b5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f8c4 	bl	8001ce0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f8d5 	bl	8001d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d020      	beq.n	8001bb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d01b      	beq.n	8001bb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f06f 0204 	mvn.w	r2, #4
 8001b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2202      	movs	r2, #2
 8001b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f8ac 	bl	8001cf4 <HAL_TIM_IC_CaptureCallback>
 8001b9c:	e005      	b.n	8001baa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f89e 	bl	8001ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f8af 	bl	8001d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d020      	beq.n	8001bfc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d01b      	beq.n	8001bfc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f06f 0208 	mvn.w	r2, #8
 8001bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f886 	bl	8001cf4 <HAL_TIM_IC_CaptureCallback>
 8001be8:	e005      	b.n	8001bf6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f878 	bl	8001ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f889 	bl	8001d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	f003 0310 	and.w	r3, r3, #16
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d020      	beq.n	8001c48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f003 0310 	and.w	r3, r3, #16
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d01b      	beq.n	8001c48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f06f 0210 	mvn.w	r2, #16
 8001c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2208      	movs	r2, #8
 8001c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f860 	bl	8001cf4 <HAL_TIM_IC_CaptureCallback>
 8001c34:	e005      	b.n	8001c42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f852 	bl	8001ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f863 	bl	8001d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00c      	beq.n	8001c6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d007      	beq.n	8001c6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 0201 	mvn.w	r2, #1
 8001c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7fe fddc 	bl	8000824 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00c      	beq.n	8001c90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d007      	beq.n	8001c90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f906 	bl	8001e9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00c      	beq.n	8001cb4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d007      	beq.n	8001cb4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f834 	bl	8001d1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	f003 0320 	and.w	r3, r3, #32
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00c      	beq.n	8001cd8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f003 0320 	and.w	r3, r3, #32
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d007      	beq.n	8001cd8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f06f 0220 	mvn.w	r2, #32
 8001cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f8d8 	bl	8001e88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cd8:	bf00      	nop
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a46      	ldr	r2, [pc, #280]	@ (8001e5c <TIM_Base_SetConfig+0x12c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d013      	beq.n	8001d70 <TIM_Base_SetConfig+0x40>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d4e:	d00f      	beq.n	8001d70 <TIM_Base_SetConfig+0x40>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a43      	ldr	r2, [pc, #268]	@ (8001e60 <TIM_Base_SetConfig+0x130>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d00b      	beq.n	8001d70 <TIM_Base_SetConfig+0x40>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a42      	ldr	r2, [pc, #264]	@ (8001e64 <TIM_Base_SetConfig+0x134>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d007      	beq.n	8001d70 <TIM_Base_SetConfig+0x40>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a41      	ldr	r2, [pc, #260]	@ (8001e68 <TIM_Base_SetConfig+0x138>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d003      	beq.n	8001d70 <TIM_Base_SetConfig+0x40>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a40      	ldr	r2, [pc, #256]	@ (8001e6c <TIM_Base_SetConfig+0x13c>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d108      	bne.n	8001d82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a35      	ldr	r2, [pc, #212]	@ (8001e5c <TIM_Base_SetConfig+0x12c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d02b      	beq.n	8001de2 <TIM_Base_SetConfig+0xb2>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d90:	d027      	beq.n	8001de2 <TIM_Base_SetConfig+0xb2>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a32      	ldr	r2, [pc, #200]	@ (8001e60 <TIM_Base_SetConfig+0x130>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d023      	beq.n	8001de2 <TIM_Base_SetConfig+0xb2>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a31      	ldr	r2, [pc, #196]	@ (8001e64 <TIM_Base_SetConfig+0x134>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d01f      	beq.n	8001de2 <TIM_Base_SetConfig+0xb2>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a30      	ldr	r2, [pc, #192]	@ (8001e68 <TIM_Base_SetConfig+0x138>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d01b      	beq.n	8001de2 <TIM_Base_SetConfig+0xb2>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a2f      	ldr	r2, [pc, #188]	@ (8001e6c <TIM_Base_SetConfig+0x13c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d017      	beq.n	8001de2 <TIM_Base_SetConfig+0xb2>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a2e      	ldr	r2, [pc, #184]	@ (8001e70 <TIM_Base_SetConfig+0x140>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d013      	beq.n	8001de2 <TIM_Base_SetConfig+0xb2>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a2d      	ldr	r2, [pc, #180]	@ (8001e74 <TIM_Base_SetConfig+0x144>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d00f      	beq.n	8001de2 <TIM_Base_SetConfig+0xb2>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a2c      	ldr	r2, [pc, #176]	@ (8001e78 <TIM_Base_SetConfig+0x148>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00b      	beq.n	8001de2 <TIM_Base_SetConfig+0xb2>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a2b      	ldr	r2, [pc, #172]	@ (8001e7c <TIM_Base_SetConfig+0x14c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d007      	beq.n	8001de2 <TIM_Base_SetConfig+0xb2>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a2a      	ldr	r2, [pc, #168]	@ (8001e80 <TIM_Base_SetConfig+0x150>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d003      	beq.n	8001de2 <TIM_Base_SetConfig+0xb2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a29      	ldr	r2, [pc, #164]	@ (8001e84 <TIM_Base_SetConfig+0x154>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d108      	bne.n	8001df4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a10      	ldr	r2, [pc, #64]	@ (8001e5c <TIM_Base_SetConfig+0x12c>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d003      	beq.n	8001e28 <TIM_Base_SetConfig+0xf8>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a12      	ldr	r2, [pc, #72]	@ (8001e6c <TIM_Base_SetConfig+0x13c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d103      	bne.n	8001e30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d105      	bne.n	8001e4e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	f023 0201 	bic.w	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	611a      	str	r2, [r3, #16]
  }
}
 8001e4e:	bf00      	nop
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40010000 	.word	0x40010000
 8001e60:	40000400 	.word	0x40000400
 8001e64:	40000800 	.word	0x40000800
 8001e68:	40000c00 	.word	0x40000c00
 8001e6c:	40010400 	.word	0x40010400
 8001e70:	40014000 	.word	0x40014000
 8001e74:	40014400 	.word	0x40014400
 8001e78:	40014800 	.word	0x40014800
 8001e7c:	40001800 	.word	0x40001800
 8001e80:	40001c00 	.word	0x40001c00
 8001e84:	40002000 	.word	0x40002000

08001e88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f103 0208 	add.w	r2, r3, #8
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f103 0208 	add.w	r2, r3, #8
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f103 0208 	add.w	r2, r3, #8
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b085      	sub	sp, #20
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	601a      	str	r2, [r3, #0]
}
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f52:	b480      	push	{r7}
 8001f54:	b085      	sub	sp, #20
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f68:	d103      	bne.n	8001f72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	e00c      	b.n	8001f8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3308      	adds	r3, #8
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	e002      	b.n	8001f80 <vListInsert+0x2e>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d2f6      	bcs.n	8001f7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	601a      	str	r2, [r3, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6892      	ldr	r2, [r2, #8]
 8001fda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6852      	ldr	r2, [r2, #4]
 8001fe4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d103      	bne.n	8001ff8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	1e5a      	subs	r2, r3, #1
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10b      	bne.n	8002044 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800202c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002030:	f383 8811 	msr	BASEPRI, r3
 8002034:	f3bf 8f6f 	isb	sy
 8002038:	f3bf 8f4f 	dsb	sy
 800203c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800203e:	bf00      	nop
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002044:	f002 f900 	bl	8004248 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002050:	68f9      	ldr	r1, [r7, #12]
 8002052:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002054:	fb01 f303 	mul.w	r3, r1, r3
 8002058:	441a      	add	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002074:	3b01      	subs	r3, #1
 8002076:	68f9      	ldr	r1, [r7, #12]
 8002078:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	441a      	add	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	22ff      	movs	r2, #255	@ 0xff
 8002088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	22ff      	movs	r2, #255	@ 0xff
 8002090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d114      	bne.n	80020c4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d01a      	beq.n	80020d8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	3310      	adds	r3, #16
 80020a6:	4618      	mov	r0, r3
 80020a8:	f001 f92e 	bl	8003308 <xTaskRemoveFromEventList>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d012      	beq.n	80020d8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80020b2:	4b0d      	ldr	r3, [pc, #52]	@ (80020e8 <xQueueGenericReset+0xd0>)
 80020b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	f3bf 8f4f 	dsb	sy
 80020be:	f3bf 8f6f 	isb	sy
 80020c2:	e009      	b.n	80020d8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	3310      	adds	r3, #16
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff fef1 	bl	8001eb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	3324      	adds	r3, #36	@ 0x24
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff feec 	bl	8001eb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80020d8:	f002 f8e8 	bl	80042ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80020dc:	2301      	movs	r3, #1
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	e000ed04 	.word	0xe000ed04

080020ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08e      	sub	sp, #56	@ 0x38
 80020f0:	af02      	add	r7, sp, #8
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10b      	bne.n	8002118 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002104:	f383 8811 	msr	BASEPRI, r3
 8002108:	f3bf 8f6f 	isb	sy
 800210c:	f3bf 8f4f 	dsb	sy
 8002110:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002112:	bf00      	nop
 8002114:	bf00      	nop
 8002116:	e7fd      	b.n	8002114 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10b      	bne.n	8002136 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800211e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002122:	f383 8811 	msr	BASEPRI, r3
 8002126:	f3bf 8f6f 	isb	sy
 800212a:	f3bf 8f4f 	dsb	sy
 800212e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	e7fd      	b.n	8002132 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <xQueueGenericCreateStatic+0x56>
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <xQueueGenericCreateStatic+0x5a>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <xQueueGenericCreateStatic+0x5c>
 8002146:	2300      	movs	r3, #0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10b      	bne.n	8002164 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800214c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002150:	f383 8811 	msr	BASEPRI, r3
 8002154:	f3bf 8f6f 	isb	sy
 8002158:	f3bf 8f4f 	dsb	sy
 800215c:	623b      	str	r3, [r7, #32]
}
 800215e:	bf00      	nop
 8002160:	bf00      	nop
 8002162:	e7fd      	b.n	8002160 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d102      	bne.n	8002170 <xQueueGenericCreateStatic+0x84>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <xQueueGenericCreateStatic+0x88>
 8002170:	2301      	movs	r3, #1
 8002172:	e000      	b.n	8002176 <xQueueGenericCreateStatic+0x8a>
 8002174:	2300      	movs	r3, #0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10b      	bne.n	8002192 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800217a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800217e:	f383 8811 	msr	BASEPRI, r3
 8002182:	f3bf 8f6f 	isb	sy
 8002186:	f3bf 8f4f 	dsb	sy
 800218a:	61fb      	str	r3, [r7, #28]
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	e7fd      	b.n	800218e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002192:	2348      	movs	r3, #72	@ 0x48
 8002194:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2b48      	cmp	r3, #72	@ 0x48
 800219a:	d00b      	beq.n	80021b4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800219c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021a0:	f383 8811 	msr	BASEPRI, r3
 80021a4:	f3bf 8f6f 	isb	sy
 80021a8:	f3bf 8f4f 	dsb	sy
 80021ac:	61bb      	str	r3, [r7, #24]
}
 80021ae:	bf00      	nop
 80021b0:	bf00      	nop
 80021b2:	e7fd      	b.n	80021b0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80021b4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80021ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00d      	beq.n	80021dc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80021c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80021c8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80021cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	4613      	mov	r3, r2
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 f805 	bl	80021e6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80021dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80021de:	4618      	mov	r0, r3
 80021e0:	3730      	adds	r7, #48	@ 0x30
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d103      	bne.n	8002202 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	e002      	b.n	8002208 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002214:	2101      	movs	r1, #1
 8002216:	69b8      	ldr	r0, [r7, #24]
 8002218:	f7ff fefe 	bl	8002018 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800221c:	bf00      	nop
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08e      	sub	sp, #56	@ 0x38
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002232:	2300      	movs	r3, #0
 8002234:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800223a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10b      	bne.n	8002258 <xQueueGenericSend+0x34>
	__asm volatile
 8002240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002244:	f383 8811 	msr	BASEPRI, r3
 8002248:	f3bf 8f6f 	isb	sy
 800224c:	f3bf 8f4f 	dsb	sy
 8002250:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002252:	bf00      	nop
 8002254:	bf00      	nop
 8002256:	e7fd      	b.n	8002254 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d103      	bne.n	8002266 <xQueueGenericSend+0x42>
 800225e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <xQueueGenericSend+0x46>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <xQueueGenericSend+0x48>
 800226a:	2300      	movs	r3, #0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10b      	bne.n	8002288 <xQueueGenericSend+0x64>
	__asm volatile
 8002270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002274:	f383 8811 	msr	BASEPRI, r3
 8002278:	f3bf 8f6f 	isb	sy
 800227c:	f3bf 8f4f 	dsb	sy
 8002280:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002282:	bf00      	nop
 8002284:	bf00      	nop
 8002286:	e7fd      	b.n	8002284 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d103      	bne.n	8002296 <xQueueGenericSend+0x72>
 800228e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002292:	2b01      	cmp	r3, #1
 8002294:	d101      	bne.n	800229a <xQueueGenericSend+0x76>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <xQueueGenericSend+0x78>
 800229a:	2300      	movs	r3, #0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10b      	bne.n	80022b8 <xQueueGenericSend+0x94>
	__asm volatile
 80022a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022a4:	f383 8811 	msr	BASEPRI, r3
 80022a8:	f3bf 8f6f 	isb	sy
 80022ac:	f3bf 8f4f 	dsb	sy
 80022b0:	623b      	str	r3, [r7, #32]
}
 80022b2:	bf00      	nop
 80022b4:	bf00      	nop
 80022b6:	e7fd      	b.n	80022b4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022b8:	f001 f9ec 	bl	8003694 <xTaskGetSchedulerState>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d102      	bne.n	80022c8 <xQueueGenericSend+0xa4>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <xQueueGenericSend+0xa8>
 80022c8:	2301      	movs	r3, #1
 80022ca:	e000      	b.n	80022ce <xQueueGenericSend+0xaa>
 80022cc:	2300      	movs	r3, #0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10b      	bne.n	80022ea <xQueueGenericSend+0xc6>
	__asm volatile
 80022d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022d6:	f383 8811 	msr	BASEPRI, r3
 80022da:	f3bf 8f6f 	isb	sy
 80022de:	f3bf 8f4f 	dsb	sy
 80022e2:	61fb      	str	r3, [r7, #28]
}
 80022e4:	bf00      	nop
 80022e6:	bf00      	nop
 80022e8:	e7fd      	b.n	80022e6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80022ea:	f001 ffad 	bl	8004248 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80022ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d302      	bcc.n	8002300 <xQueueGenericSend+0xdc>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d129      	bne.n	8002354 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	68b9      	ldr	r1, [r7, #8]
 8002304:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002306:	f000 fa0f 	bl	8002728 <prvCopyDataToQueue>
 800230a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800230c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800230e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002310:	2b00      	cmp	r3, #0
 8002312:	d010      	beq.n	8002336 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002316:	3324      	adds	r3, #36	@ 0x24
 8002318:	4618      	mov	r0, r3
 800231a:	f000 fff5 	bl	8003308 <xTaskRemoveFromEventList>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d013      	beq.n	800234c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002324:	4b3f      	ldr	r3, [pc, #252]	@ (8002424 <xQueueGenericSend+0x200>)
 8002326:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	f3bf 8f4f 	dsb	sy
 8002330:	f3bf 8f6f 	isb	sy
 8002334:	e00a      	b.n	800234c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002338:	2b00      	cmp	r3, #0
 800233a:	d007      	beq.n	800234c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800233c:	4b39      	ldr	r3, [pc, #228]	@ (8002424 <xQueueGenericSend+0x200>)
 800233e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	f3bf 8f4f 	dsb	sy
 8002348:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800234c:	f001 ffae 	bl	80042ac <vPortExitCritical>
				return pdPASS;
 8002350:	2301      	movs	r3, #1
 8002352:	e063      	b.n	800241c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d103      	bne.n	8002362 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800235a:	f001 ffa7 	bl	80042ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800235e:	2300      	movs	r3, #0
 8002360:	e05c      	b.n	800241c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002364:	2b00      	cmp	r3, #0
 8002366:	d106      	bne.n	8002376 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	4618      	mov	r0, r3
 800236e:	f001 f82f 	bl	80033d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002372:	2301      	movs	r3, #1
 8002374:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002376:	f001 ff99 	bl	80042ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800237a:	f000 fd99 	bl	8002eb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800237e:	f001 ff63 	bl	8004248 <vPortEnterCritical>
 8002382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002384:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002388:	b25b      	sxtb	r3, r3
 800238a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238e:	d103      	bne.n	8002398 <xQueueGenericSend+0x174>
 8002390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800239a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800239e:	b25b      	sxtb	r3, r3
 80023a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a4:	d103      	bne.n	80023ae <xQueueGenericSend+0x18a>
 80023a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80023ae:	f001 ff7d 	bl	80042ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023b2:	1d3a      	adds	r2, r7, #4
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f001 f81e 	bl	80033fc <xTaskCheckForTimeOut>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d124      	bne.n	8002410 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80023c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023c8:	f000 faa6 	bl	8002918 <prvIsQueueFull>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d018      	beq.n	8002404 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80023d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d4:	3310      	adds	r3, #16
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	4611      	mov	r1, r2
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 ff42 	bl	8003264 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80023e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023e2:	f000 fa31 	bl	8002848 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80023e6:	f000 fd71 	bl	8002ecc <xTaskResumeAll>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f47f af7c 	bne.w	80022ea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80023f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002424 <xQueueGenericSend+0x200>)
 80023f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	f3bf 8f4f 	dsb	sy
 80023fe:	f3bf 8f6f 	isb	sy
 8002402:	e772      	b.n	80022ea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002404:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002406:	f000 fa1f 	bl	8002848 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800240a:	f000 fd5f 	bl	8002ecc <xTaskResumeAll>
 800240e:	e76c      	b.n	80022ea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002410:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002412:	f000 fa19 	bl	8002848 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002416:	f000 fd59 	bl	8002ecc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800241a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800241c:	4618      	mov	r0, r3
 800241e:	3738      	adds	r7, #56	@ 0x38
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	e000ed04 	.word	0xe000ed04

08002428 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b090      	sub	sp, #64	@ 0x40
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800243a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10b      	bne.n	8002458 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002444:	f383 8811 	msr	BASEPRI, r3
 8002448:	f3bf 8f6f 	isb	sy
 800244c:	f3bf 8f4f 	dsb	sy
 8002450:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002452:	bf00      	nop
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d103      	bne.n	8002466 <xQueueGenericSendFromISR+0x3e>
 800245e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <xQueueGenericSendFromISR+0x42>
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <xQueueGenericSendFromISR+0x44>
 800246a:	2300      	movs	r3, #0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10b      	bne.n	8002488 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002474:	f383 8811 	msr	BASEPRI, r3
 8002478:	f3bf 8f6f 	isb	sy
 800247c:	f3bf 8f4f 	dsb	sy
 8002480:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002482:	bf00      	nop
 8002484:	bf00      	nop
 8002486:	e7fd      	b.n	8002484 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d103      	bne.n	8002496 <xQueueGenericSendFromISR+0x6e>
 800248e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <xQueueGenericSendFromISR+0x72>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <xQueueGenericSendFromISR+0x74>
 800249a:	2300      	movs	r3, #0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10b      	bne.n	80024b8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80024a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024a4:	f383 8811 	msr	BASEPRI, r3
 80024a8:	f3bf 8f6f 	isb	sy
 80024ac:	f3bf 8f4f 	dsb	sy
 80024b0:	623b      	str	r3, [r7, #32]
}
 80024b2:	bf00      	nop
 80024b4:	bf00      	nop
 80024b6:	e7fd      	b.n	80024b4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80024b8:	f001 ffa6 	bl	8004408 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80024bc:	f3ef 8211 	mrs	r2, BASEPRI
 80024c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024c4:	f383 8811 	msr	BASEPRI, r3
 80024c8:	f3bf 8f6f 	isb	sy
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	61fa      	str	r2, [r7, #28]
 80024d2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80024d4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80024d6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d302      	bcc.n	80024ea <xQueueGenericSendFromISR+0xc2>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d12f      	bne.n	800254a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80024ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80024f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002500:	f000 f912 	bl	8002728 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002504:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d112      	bne.n	8002534 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800250e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002512:	2b00      	cmp	r3, #0
 8002514:	d016      	beq.n	8002544 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002518:	3324      	adds	r3, #36	@ 0x24
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fef4 	bl	8003308 <xTaskRemoveFromEventList>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00e      	beq.n	8002544 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00b      	beq.n	8002544 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	e007      	b.n	8002544 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002534:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002538:	3301      	adds	r3, #1
 800253a:	b2db      	uxtb	r3, r3
 800253c:	b25a      	sxtb	r2, r3
 800253e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002540:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002544:	2301      	movs	r3, #1
 8002546:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002548:	e001      	b.n	800254e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800254a:	2300      	movs	r3, #0
 800254c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800254e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002550:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002558:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800255a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800255c:	4618      	mov	r0, r3
 800255e:	3740      	adds	r7, #64	@ 0x40
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08c      	sub	sp, #48	@ 0x30
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002570:	2300      	movs	r3, #0
 8002572:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10b      	bne.n	8002596 <xQueueReceive+0x32>
	__asm volatile
 800257e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002582:	f383 8811 	msr	BASEPRI, r3
 8002586:	f3bf 8f6f 	isb	sy
 800258a:	f3bf 8f4f 	dsb	sy
 800258e:	623b      	str	r3, [r7, #32]
}
 8002590:	bf00      	nop
 8002592:	bf00      	nop
 8002594:	e7fd      	b.n	8002592 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d103      	bne.n	80025a4 <xQueueReceive+0x40>
 800259c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800259e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <xQueueReceive+0x44>
 80025a4:	2301      	movs	r3, #1
 80025a6:	e000      	b.n	80025aa <xQueueReceive+0x46>
 80025a8:	2300      	movs	r3, #0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10b      	bne.n	80025c6 <xQueueReceive+0x62>
	__asm volatile
 80025ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025b2:	f383 8811 	msr	BASEPRI, r3
 80025b6:	f3bf 8f6f 	isb	sy
 80025ba:	f3bf 8f4f 	dsb	sy
 80025be:	61fb      	str	r3, [r7, #28]
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	e7fd      	b.n	80025c2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025c6:	f001 f865 	bl	8003694 <xTaskGetSchedulerState>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d102      	bne.n	80025d6 <xQueueReceive+0x72>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <xQueueReceive+0x76>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <xQueueReceive+0x78>
 80025da:	2300      	movs	r3, #0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10b      	bne.n	80025f8 <xQueueReceive+0x94>
	__asm volatile
 80025e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025e4:	f383 8811 	msr	BASEPRI, r3
 80025e8:	f3bf 8f6f 	isb	sy
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	61bb      	str	r3, [r7, #24]
}
 80025f2:	bf00      	nop
 80025f4:	bf00      	nop
 80025f6:	e7fd      	b.n	80025f4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025f8:	f001 fe26 	bl	8004248 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002600:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	2b00      	cmp	r3, #0
 8002606:	d01f      	beq.n	8002648 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002608:	68b9      	ldr	r1, [r7, #8]
 800260a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800260c:	f000 f8f6 	bl	80027fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002612:	1e5a      	subs	r2, r3, #1
 8002614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002616:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00f      	beq.n	8002640 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002622:	3310      	adds	r3, #16
 8002624:	4618      	mov	r0, r3
 8002626:	f000 fe6f 	bl	8003308 <xTaskRemoveFromEventList>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d007      	beq.n	8002640 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002630:	4b3c      	ldr	r3, [pc, #240]	@ (8002724 <xQueueReceive+0x1c0>)
 8002632:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002640:	f001 fe34 	bl	80042ac <vPortExitCritical>
				return pdPASS;
 8002644:	2301      	movs	r3, #1
 8002646:	e069      	b.n	800271c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d103      	bne.n	8002656 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800264e:	f001 fe2d 	bl	80042ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002652:	2300      	movs	r3, #0
 8002654:	e062      	b.n	800271c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002658:	2b00      	cmp	r3, #0
 800265a:	d106      	bne.n	800266a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800265c:	f107 0310 	add.w	r3, r7, #16
 8002660:	4618      	mov	r0, r3
 8002662:	f000 feb5 	bl	80033d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002666:	2301      	movs	r3, #1
 8002668:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800266a:	f001 fe1f 	bl	80042ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800266e:	f000 fc1f 	bl	8002eb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002672:	f001 fde9 	bl	8004248 <vPortEnterCritical>
 8002676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002678:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800267c:	b25b      	sxtb	r3, r3
 800267e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002682:	d103      	bne.n	800268c <xQueueReceive+0x128>
 8002684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800268c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800268e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002692:	b25b      	sxtb	r3, r3
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002698:	d103      	bne.n	80026a2 <xQueueReceive+0x13e>
 800269a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80026a2:	f001 fe03 	bl	80042ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026a6:	1d3a      	adds	r2, r7, #4
 80026a8:	f107 0310 	add.w	r3, r7, #16
 80026ac:	4611      	mov	r1, r2
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 fea4 	bl	80033fc <xTaskCheckForTimeOut>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d123      	bne.n	8002702 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026bc:	f000 f916 	bl	80028ec <prvIsQueueEmpty>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d017      	beq.n	80026f6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80026c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026c8:	3324      	adds	r3, #36	@ 0x24
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	4611      	mov	r1, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fdc8 	bl	8003264 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80026d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026d6:	f000 f8b7 	bl	8002848 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80026da:	f000 fbf7 	bl	8002ecc <xTaskResumeAll>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d189      	bne.n	80025f8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80026e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002724 <xQueueReceive+0x1c0>)
 80026e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	f3bf 8f6f 	isb	sy
 80026f4:	e780      	b.n	80025f8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80026f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026f8:	f000 f8a6 	bl	8002848 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026fc:	f000 fbe6 	bl	8002ecc <xTaskResumeAll>
 8002700:	e77a      	b.n	80025f8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002702:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002704:	f000 f8a0 	bl	8002848 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002708:	f000 fbe0 	bl	8002ecc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800270c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800270e:	f000 f8ed 	bl	80028ec <prvIsQueueEmpty>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	f43f af6f 	beq.w	80025f8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800271a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800271c:	4618      	mov	r0, r3
 800271e:	3730      	adds	r7, #48	@ 0x30
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	e000ed04 	.word	0xe000ed04

08002728 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800273c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10d      	bne.n	8002762 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d14d      	bne.n	80027ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	4618      	mov	r0, r3
 8002754:	f000 ffbc 	bl	80036d0 <xTaskPriorityDisinherit>
 8002758:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	e043      	b.n	80027ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d119      	bne.n	800279c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6858      	ldr	r0, [r3, #4]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002770:	461a      	mov	r2, r3
 8002772:	68b9      	ldr	r1, [r7, #8]
 8002774:	f002 f8fc 	bl	8004970 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002780:	441a      	add	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	429a      	cmp	r2, r3
 8002790:	d32b      	bcc.n	80027ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	e026      	b.n	80027ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	68d8      	ldr	r0, [r3, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a4:	461a      	mov	r2, r3
 80027a6:	68b9      	ldr	r1, [r7, #8]
 80027a8:	f002 f8e2 	bl	8004970 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b4:	425b      	negs	r3, r3
 80027b6:	441a      	add	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d207      	bcs.n	80027d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d0:	425b      	negs	r3, r3
 80027d2:	441a      	add	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d105      	bne.n	80027ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80027f2:	697b      	ldr	r3, [r7, #20]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	d018      	beq.n	8002840 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	441a      	add	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68da      	ldr	r2, [r3, #12]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	429a      	cmp	r2, r3
 8002826:	d303      	bcc.n	8002830 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68d9      	ldr	r1, [r3, #12]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002838:	461a      	mov	r2, r3
 800283a:	6838      	ldr	r0, [r7, #0]
 800283c:	f002 f898 	bl	8004970 <memcpy>
	}
}
 8002840:	bf00      	nop
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002850:	f001 fcfa 	bl	8004248 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800285a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800285c:	e011      	b.n	8002882 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002862:	2b00      	cmp	r3, #0
 8002864:	d012      	beq.n	800288c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3324      	adds	r3, #36	@ 0x24
 800286a:	4618      	mov	r0, r3
 800286c:	f000 fd4c 	bl	8003308 <xTaskRemoveFromEventList>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002876:	f000 fe25 	bl	80034c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	3b01      	subs	r3, #1
 800287e:	b2db      	uxtb	r3, r3
 8002880:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002886:	2b00      	cmp	r3, #0
 8002888:	dce9      	bgt.n	800285e <prvUnlockQueue+0x16>
 800288a:	e000      	b.n	800288e <prvUnlockQueue+0x46>
					break;
 800288c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	22ff      	movs	r2, #255	@ 0xff
 8002892:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002896:	f001 fd09 	bl	80042ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800289a:	f001 fcd5 	bl	8004248 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80028a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80028a6:	e011      	b.n	80028cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d012      	beq.n	80028d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3310      	adds	r3, #16
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fd27 	bl	8003308 <xTaskRemoveFromEventList>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80028c0:	f000 fe00 	bl	80034c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80028c4:	7bbb      	ldrb	r3, [r7, #14]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80028cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	dce9      	bgt.n	80028a8 <prvUnlockQueue+0x60>
 80028d4:	e000      	b.n	80028d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80028d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	22ff      	movs	r2, #255	@ 0xff
 80028dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80028e0:	f001 fce4 	bl	80042ac <vPortExitCritical>
}
 80028e4:	bf00      	nop
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80028f4:	f001 fca8 	bl	8004248 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d102      	bne.n	8002906 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002900:	2301      	movs	r3, #1
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	e001      	b.n	800290a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800290a:	f001 fccf 	bl	80042ac <vPortExitCritical>

	return xReturn;
 800290e:	68fb      	ldr	r3, [r7, #12]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002920:	f001 fc92 	bl	8004248 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800292c:	429a      	cmp	r2, r3
 800292e:	d102      	bne.n	8002936 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002930:	2301      	movs	r3, #1
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	e001      	b.n	800293a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800293a:	f001 fcb7 	bl	80042ac <vPortExitCritical>

	return xReturn;
 800293e:	68fb      	ldr	r3, [r7, #12]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	e014      	b.n	8002982 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002958:	4a0f      	ldr	r2, [pc, #60]	@ (8002998 <vQueueAddToRegistry+0x50>)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10b      	bne.n	800297c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002964:	490c      	ldr	r1, [pc, #48]	@ (8002998 <vQueueAddToRegistry+0x50>)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800296e:	4a0a      	ldr	r2, [pc, #40]	@ (8002998 <vQueueAddToRegistry+0x50>)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4413      	add	r3, r2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800297a:	e006      	b.n	800298a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	3301      	adds	r3, #1
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b07      	cmp	r3, #7
 8002986:	d9e7      	bls.n	8002958 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	20000818 	.word	0x20000818

0800299c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80029ac:	f001 fc4c 	bl	8004248 <vPortEnterCritical>
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029b6:	b25b      	sxtb	r3, r3
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029bc:	d103      	bne.n	80029c6 <vQueueWaitForMessageRestricted+0x2a>
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029cc:	b25b      	sxtb	r3, r3
 80029ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d2:	d103      	bne.n	80029dc <vQueueWaitForMessageRestricted+0x40>
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029dc:	f001 fc66 	bl	80042ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d106      	bne.n	80029f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	3324      	adds	r3, #36	@ 0x24
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	68b9      	ldr	r1, [r7, #8]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 fc5d 	bl	80032b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80029f6:	6978      	ldr	r0, [r7, #20]
 80029f8:	f7ff ff26 	bl	8002848 <prvUnlockQueue>
	}
 80029fc:	bf00      	nop
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08e      	sub	sp, #56	@ 0x38
 8002a08:	af04      	add	r7, sp, #16
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10b      	bne.n	8002a30 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a1c:	f383 8811 	msr	BASEPRI, r3
 8002a20:	f3bf 8f6f 	isb	sy
 8002a24:	f3bf 8f4f 	dsb	sy
 8002a28:	623b      	str	r3, [r7, #32]
}
 8002a2a:	bf00      	nop
 8002a2c:	bf00      	nop
 8002a2e:	e7fd      	b.n	8002a2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10b      	bne.n	8002a4e <xTaskCreateStatic+0x4a>
	__asm volatile
 8002a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a3a:	f383 8811 	msr	BASEPRI, r3
 8002a3e:	f3bf 8f6f 	isb	sy
 8002a42:	f3bf 8f4f 	dsb	sy
 8002a46:	61fb      	str	r3, [r7, #28]
}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	e7fd      	b.n	8002a4a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002a4e:	23a0      	movs	r3, #160	@ 0xa0
 8002a50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a56:	d00b      	beq.n	8002a70 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a5c:	f383 8811 	msr	BASEPRI, r3
 8002a60:	f3bf 8f6f 	isb	sy
 8002a64:	f3bf 8f4f 	dsb	sy
 8002a68:	61bb      	str	r3, [r7, #24]
}
 8002a6a:	bf00      	nop
 8002a6c:	bf00      	nop
 8002a6e:	e7fd      	b.n	8002a6c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002a70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d01e      	beq.n	8002ab6 <xTaskCreateStatic+0xb2>
 8002a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d01b      	beq.n	8002ab6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a80:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a86:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002a90:	2300      	movs	r3, #0
 8002a92:	9303      	str	r3, [sp, #12]
 8002a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a96:	9302      	str	r3, [sp, #8]
 8002a98:	f107 0314 	add.w	r3, r7, #20
 8002a9c:	9301      	str	r3, [sp, #4]
 8002a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	68b9      	ldr	r1, [r7, #8]
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 f851 	bl	8002b50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002aae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002ab0:	f000 f8ee 	bl	8002c90 <prvAddNewTaskToReadyList>
 8002ab4:	e001      	b.n	8002aba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002aba:	697b      	ldr	r3, [r7, #20]
	}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3728      	adds	r7, #40	@ 0x28
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08c      	sub	sp, #48	@ 0x30
 8002ac8:	af04      	add	r7, sp, #16
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f001 fcd7 	bl	800448c <pvPortMalloc>
 8002ade:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00e      	beq.n	8002b04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ae6:	20a0      	movs	r0, #160	@ 0xa0
 8002ae8:	f001 fcd0 	bl	800448c <pvPortMalloc>
 8002aec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002afa:	e005      	b.n	8002b08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002afc:	6978      	ldr	r0, [r7, #20]
 8002afe:	f001 fd93 	bl	8004628 <vPortFree>
 8002b02:	e001      	b.n	8002b08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d017      	beq.n	8002b3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b16:	88fa      	ldrh	r2, [r7, #6]
 8002b18:	2300      	movs	r3, #0
 8002b1a:	9303      	str	r3, [sp, #12]
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	9302      	str	r3, [sp, #8]
 8002b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b22:	9301      	str	r3, [sp, #4]
 8002b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	68b9      	ldr	r1, [r7, #8]
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 f80f 	bl	8002b50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b32:	69f8      	ldr	r0, [r7, #28]
 8002b34:	f000 f8ac 	bl	8002c90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	61bb      	str	r3, [r7, #24]
 8002b3c:	e002      	b.n	8002b44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002b44:	69bb      	ldr	r3, [r7, #24]
	}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3720      	adds	r7, #32
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	f023 0307 	bic.w	r3, r3, #7
 8002b76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00b      	beq.n	8002b9a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b86:	f383 8811 	msr	BASEPRI, r3
 8002b8a:	f3bf 8f6f 	isb	sy
 8002b8e:	f3bf 8f4f 	dsb	sy
 8002b92:	617b      	str	r3, [r7, #20]
}
 8002b94:	bf00      	nop
 8002b96:	bf00      	nop
 8002b98:	e7fd      	b.n	8002b96 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d01f      	beq.n	8002be0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	61fb      	str	r3, [r7, #28]
 8002ba4:	e012      	b.n	8002bcc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	4413      	add	r3, r2
 8002bac:	7819      	ldrb	r1, [r3, #0]
 8002bae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3334      	adds	r3, #52	@ 0x34
 8002bb6:	460a      	mov	r2, r1
 8002bb8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d006      	beq.n	8002bd4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	61fb      	str	r3, [r7, #28]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	2b0f      	cmp	r3, #15
 8002bd0:	d9e9      	bls.n	8002ba6 <prvInitialiseNewTask+0x56>
 8002bd2:	e000      	b.n	8002bd6 <prvInitialiseNewTask+0x86>
			{
				break;
 8002bd4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bde:	e003      	b.n	8002be8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bea:	2b06      	cmp	r3, #6
 8002bec:	d901      	bls.n	8002bf2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002bee:	2306      	movs	r3, #6
 8002bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bf6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bfc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c00:	2200      	movs	r2, #0
 8002c02:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c06:	3304      	adds	r3, #4
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff f971 	bl	8001ef0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c10:	3318      	adds	r3, #24
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff f96c 	bl	8001ef0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c1c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c20:	f1c3 0207 	rsb	r2, r3, #7
 8002c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c26:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c2c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c30:	2200      	movs	r2, #0
 8002c32:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c40:	334c      	adds	r3, #76	@ 0x4c
 8002c42:	224c      	movs	r2, #76	@ 0x4c
 8002c44:	2100      	movs	r1, #0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f001 fe0e 	bl	8004868 <memset>
 8002c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c4e:	4a0d      	ldr	r2, [pc, #52]	@ (8002c84 <prvInitialiseNewTask+0x134>)
 8002c50:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c54:	4a0c      	ldr	r2, [pc, #48]	@ (8002c88 <prvInitialiseNewTask+0x138>)
 8002c56:	655a      	str	r2, [r3, #84]	@ 0x54
 8002c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c5a:	4a0c      	ldr	r2, [pc, #48]	@ (8002c8c <prvInitialiseNewTask+0x13c>)
 8002c5c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	68f9      	ldr	r1, [r7, #12]
 8002c62:	69b8      	ldr	r0, [r7, #24]
 8002c64:	f001 f9be 	bl	8003fe4 <pxPortInitialiseStack>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c6c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c7a:	bf00      	nop
 8002c7c:	3720      	adds	r7, #32
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200046a8 	.word	0x200046a8
 8002c88:	20004710 	.word	0x20004710
 8002c8c:	20004778 	.word	0x20004778

08002c90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002c98:	f001 fad6 	bl	8004248 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002c9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002d48 <prvAddNewTaskToReadyList+0xb8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	4a29      	ldr	r2, [pc, #164]	@ (8002d48 <prvAddNewTaskToReadyList+0xb8>)
 8002ca4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002ca6:	4b29      	ldr	r3, [pc, #164]	@ (8002d4c <prvAddNewTaskToReadyList+0xbc>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002cae:	4a27      	ldr	r2, [pc, #156]	@ (8002d4c <prvAddNewTaskToReadyList+0xbc>)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002cb4:	4b24      	ldr	r3, [pc, #144]	@ (8002d48 <prvAddNewTaskToReadyList+0xb8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d110      	bne.n	8002cde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002cbc:	f000 fc26 	bl	800350c <prvInitialiseTaskLists>
 8002cc0:	e00d      	b.n	8002cde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002cc2:	4b23      	ldr	r3, [pc, #140]	@ (8002d50 <prvAddNewTaskToReadyList+0xc0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d109      	bne.n	8002cde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002cca:	4b20      	ldr	r3, [pc, #128]	@ (8002d4c <prvAddNewTaskToReadyList+0xbc>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d802      	bhi.n	8002cde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002cd8:	4a1c      	ldr	r2, [pc, #112]	@ (8002d4c <prvAddNewTaskToReadyList+0xbc>)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002cde:	4b1d      	ldr	r3, [pc, #116]	@ (8002d54 <prvAddNewTaskToReadyList+0xc4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d54 <prvAddNewTaskToReadyList+0xc4>)
 8002ce6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cec:	2201      	movs	r2, #1
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	4b19      	ldr	r3, [pc, #100]	@ (8002d58 <prvAddNewTaskToReadyList+0xc8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	4a18      	ldr	r2, [pc, #96]	@ (8002d58 <prvAddNewTaskToReadyList+0xc8>)
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4a15      	ldr	r2, [pc, #84]	@ (8002d5c <prvAddNewTaskToReadyList+0xcc>)
 8002d08:	441a      	add	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4610      	mov	r0, r2
 8002d12:	f7ff f8fa 	bl	8001f0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002d16:	f001 fac9 	bl	80042ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d50 <prvAddNewTaskToReadyList+0xc0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00e      	beq.n	8002d40 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d22:	4b0a      	ldr	r3, [pc, #40]	@ (8002d4c <prvAddNewTaskToReadyList+0xbc>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d207      	bcs.n	8002d40 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002d30:	4b0b      	ldr	r3, [pc, #44]	@ (8002d60 <prvAddNewTaskToReadyList+0xd0>)
 8002d32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	20000958 	.word	0x20000958
 8002d4c:	20000858 	.word	0x20000858
 8002d50:	20000964 	.word	0x20000964
 8002d54:	20000974 	.word	0x20000974
 8002d58:	20000960 	.word	0x20000960
 8002d5c:	2000085c 	.word	0x2000085c
 8002d60:	e000ed04 	.word	0xe000ed04

08002d64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d018      	beq.n	8002da8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002d76:	4b14      	ldr	r3, [pc, #80]	@ (8002dc8 <vTaskDelay+0x64>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00b      	beq.n	8002d96 <vTaskDelay+0x32>
	__asm volatile
 8002d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d82:	f383 8811 	msr	BASEPRI, r3
 8002d86:	f3bf 8f6f 	isb	sy
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	60bb      	str	r3, [r7, #8]
}
 8002d90:	bf00      	nop
 8002d92:	bf00      	nop
 8002d94:	e7fd      	b.n	8002d92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002d96:	f000 f88b 	bl	8002eb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 fd1f 	bl	80037e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002da2:	f000 f893 	bl	8002ecc <xTaskResumeAll>
 8002da6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d107      	bne.n	8002dbe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002dae:	4b07      	ldr	r3, [pc, #28]	@ (8002dcc <vTaskDelay+0x68>)
 8002db0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	f3bf 8f4f 	dsb	sy
 8002dba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002dbe:	bf00      	nop
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20000980 	.word	0x20000980
 8002dcc:	e000ed04 	.word	0xe000ed04

08002dd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08a      	sub	sp, #40	@ 0x28
 8002dd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002dde:	463a      	mov	r2, r7
 8002de0:	1d39      	adds	r1, r7, #4
 8002de2:	f107 0308 	add.w	r3, r7, #8
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fd fb6a 	bl	80004c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002dec:	6839      	ldr	r1, [r7, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	9202      	str	r2, [sp, #8]
 8002df4:	9301      	str	r3, [sp, #4]
 8002df6:	2300      	movs	r3, #0
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	460a      	mov	r2, r1
 8002dfe:	4924      	ldr	r1, [pc, #144]	@ (8002e90 <vTaskStartScheduler+0xc0>)
 8002e00:	4824      	ldr	r0, [pc, #144]	@ (8002e94 <vTaskStartScheduler+0xc4>)
 8002e02:	f7ff fdff 	bl	8002a04 <xTaskCreateStatic>
 8002e06:	4603      	mov	r3, r0
 8002e08:	4a23      	ldr	r2, [pc, #140]	@ (8002e98 <vTaskStartScheduler+0xc8>)
 8002e0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002e0c:	4b22      	ldr	r3, [pc, #136]	@ (8002e98 <vTaskStartScheduler+0xc8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002e14:	2301      	movs	r3, #1
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	e001      	b.n	8002e1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d102      	bne.n	8002e2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002e24:	f000 fd42 	bl	80038ac <xTimerCreateTimerTask>
 8002e28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d11b      	bne.n	8002e68 <vTaskStartScheduler+0x98>
	__asm volatile
 8002e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	613b      	str	r3, [r7, #16]
}
 8002e42:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002e44:	4b15      	ldr	r3, [pc, #84]	@ (8002e9c <vTaskStartScheduler+0xcc>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	334c      	adds	r3, #76	@ 0x4c
 8002e4a:	4a15      	ldr	r2, [pc, #84]	@ (8002ea0 <vTaskStartScheduler+0xd0>)
 8002e4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002e4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ea4 <vTaskStartScheduler+0xd4>)
 8002e50:	f04f 32ff 	mov.w	r2, #4294967295
 8002e54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002e56:	4b14      	ldr	r3, [pc, #80]	@ (8002ea8 <vTaskStartScheduler+0xd8>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e5c:	4b13      	ldr	r3, [pc, #76]	@ (8002eac <vTaskStartScheduler+0xdc>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002e62:	f001 f94d 	bl	8004100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002e66:	e00f      	b.n	8002e88 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6e:	d10b      	bne.n	8002e88 <vTaskStartScheduler+0xb8>
	__asm volatile
 8002e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e74:	f383 8811 	msr	BASEPRI, r3
 8002e78:	f3bf 8f6f 	isb	sy
 8002e7c:	f3bf 8f4f 	dsb	sy
 8002e80:	60fb      	str	r3, [r7, #12]
}
 8002e82:	bf00      	nop
 8002e84:	bf00      	nop
 8002e86:	e7fd      	b.n	8002e84 <vTaskStartScheduler+0xb4>
}
 8002e88:	bf00      	nop
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	08004a70 	.word	0x08004a70
 8002e94:	080034dd 	.word	0x080034dd
 8002e98:	2000097c 	.word	0x2000097c
 8002e9c:	20000858 	.word	0x20000858
 8002ea0:	20000010 	.word	0x20000010
 8002ea4:	20000978 	.word	0x20000978
 8002ea8:	20000964 	.word	0x20000964
 8002eac:	2000095c 	.word	0x2000095c

08002eb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002eb4:	4b04      	ldr	r3, [pc, #16]	@ (8002ec8 <vTaskSuspendAll+0x18>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	4a03      	ldr	r2, [pc, #12]	@ (8002ec8 <vTaskSuspendAll+0x18>)
 8002ebc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002ebe:	bf00      	nop
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	20000980 	.word	0x20000980

08002ecc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002eda:	4b42      	ldr	r3, [pc, #264]	@ (8002fe4 <xTaskResumeAll+0x118>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10b      	bne.n	8002efa <xTaskResumeAll+0x2e>
	__asm volatile
 8002ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	603b      	str	r3, [r7, #0]
}
 8002ef4:	bf00      	nop
 8002ef6:	bf00      	nop
 8002ef8:	e7fd      	b.n	8002ef6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002efa:	f001 f9a5 	bl	8004248 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002efe:	4b39      	ldr	r3, [pc, #228]	@ (8002fe4 <xTaskResumeAll+0x118>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	4a37      	ldr	r2, [pc, #220]	@ (8002fe4 <xTaskResumeAll+0x118>)
 8002f06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f08:	4b36      	ldr	r3, [pc, #216]	@ (8002fe4 <xTaskResumeAll+0x118>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d161      	bne.n	8002fd4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f10:	4b35      	ldr	r3, [pc, #212]	@ (8002fe8 <xTaskResumeAll+0x11c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d05d      	beq.n	8002fd4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f18:	e02e      	b.n	8002f78 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f1a:	4b34      	ldr	r3, [pc, #208]	@ (8002fec <xTaskResumeAll+0x120>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	3318      	adds	r3, #24
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff f84c 	bl	8001fc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	3304      	adds	r3, #4
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff f847 	bl	8001fc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	409a      	lsls	r2, r3
 8002f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8002ff0 <xTaskResumeAll+0x124>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	4a2a      	ldr	r2, [pc, #168]	@ (8002ff0 <xTaskResumeAll+0x124>)
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4a27      	ldr	r2, [pc, #156]	@ (8002ff4 <xTaskResumeAll+0x128>)
 8002f56:	441a      	add	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4610      	mov	r0, r2
 8002f60:	f7fe ffd3 	bl	8001f0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f68:	4b23      	ldr	r3, [pc, #140]	@ (8002ff8 <xTaskResumeAll+0x12c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d302      	bcc.n	8002f78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002f72:	4b22      	ldr	r3, [pc, #136]	@ (8002ffc <xTaskResumeAll+0x130>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f78:	4b1c      	ldr	r3, [pc, #112]	@ (8002fec <xTaskResumeAll+0x120>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1cc      	bne.n	8002f1a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002f86:	f000 fb65 	bl	8003654 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8003000 <xTaskResumeAll+0x134>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d010      	beq.n	8002fb8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002f96:	f000 f847 	bl	8003028 <xTaskIncrementTick>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002fa0:	4b16      	ldr	r3, [pc, #88]	@ (8002ffc <xTaskResumeAll+0x130>)
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f1      	bne.n	8002f96 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002fb2:	4b13      	ldr	r3, [pc, #76]	@ (8003000 <xTaskResumeAll+0x134>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002fb8:	4b10      	ldr	r3, [pc, #64]	@ (8002ffc <xTaskResumeAll+0x130>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d009      	beq.n	8002fd4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003004 <xTaskResumeAll+0x138>)
 8002fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002fd4:	f001 f96a 	bl	80042ac <vPortExitCritical>

	return xAlreadyYielded;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000980 	.word	0x20000980
 8002fe8:	20000958 	.word	0x20000958
 8002fec:	20000918 	.word	0x20000918
 8002ff0:	20000960 	.word	0x20000960
 8002ff4:	2000085c 	.word	0x2000085c
 8002ff8:	20000858 	.word	0x20000858
 8002ffc:	2000096c 	.word	0x2000096c
 8003000:	20000968 	.word	0x20000968
 8003004:	e000ed04 	.word	0xe000ed04

08003008 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800300e:	4b05      	ldr	r3, [pc, #20]	@ (8003024 <xTaskGetTickCount+0x1c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003014:	687b      	ldr	r3, [r7, #4]
}
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	2000095c 	.word	0x2000095c

08003028 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003032:	4b4f      	ldr	r3, [pc, #316]	@ (8003170 <xTaskIncrementTick+0x148>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	f040 808f 	bne.w	800315a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800303c:	4b4d      	ldr	r3, [pc, #308]	@ (8003174 <xTaskIncrementTick+0x14c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3301      	adds	r3, #1
 8003042:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003044:	4a4b      	ldr	r2, [pc, #300]	@ (8003174 <xTaskIncrementTick+0x14c>)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d121      	bne.n	8003094 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003050:	4b49      	ldr	r3, [pc, #292]	@ (8003178 <xTaskIncrementTick+0x150>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00b      	beq.n	8003072 <xTaskIncrementTick+0x4a>
	__asm volatile
 800305a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	603b      	str	r3, [r7, #0]
}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	e7fd      	b.n	800306e <xTaskIncrementTick+0x46>
 8003072:	4b41      	ldr	r3, [pc, #260]	@ (8003178 <xTaskIncrementTick+0x150>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	4b40      	ldr	r3, [pc, #256]	@ (800317c <xTaskIncrementTick+0x154>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a3e      	ldr	r2, [pc, #248]	@ (8003178 <xTaskIncrementTick+0x150>)
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	4a3e      	ldr	r2, [pc, #248]	@ (800317c <xTaskIncrementTick+0x154>)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	4b3e      	ldr	r3, [pc, #248]	@ (8003180 <xTaskIncrementTick+0x158>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	3301      	adds	r3, #1
 800308c:	4a3c      	ldr	r2, [pc, #240]	@ (8003180 <xTaskIncrementTick+0x158>)
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	f000 fae0 	bl	8003654 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003094:	4b3b      	ldr	r3, [pc, #236]	@ (8003184 <xTaskIncrementTick+0x15c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	429a      	cmp	r2, r3
 800309c:	d348      	bcc.n	8003130 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800309e:	4b36      	ldr	r3, [pc, #216]	@ (8003178 <xTaskIncrementTick+0x150>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d104      	bne.n	80030b2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030a8:	4b36      	ldr	r3, [pc, #216]	@ (8003184 <xTaskIncrementTick+0x15c>)
 80030aa:	f04f 32ff 	mov.w	r2, #4294967295
 80030ae:	601a      	str	r2, [r3, #0]
					break;
 80030b0:	e03e      	b.n	8003130 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030b2:	4b31      	ldr	r3, [pc, #196]	@ (8003178 <xTaskIncrementTick+0x150>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d203      	bcs.n	80030d2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80030ca:	4a2e      	ldr	r2, [pc, #184]	@ (8003184 <xTaskIncrementTick+0x15c>)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80030d0:	e02e      	b.n	8003130 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	3304      	adds	r3, #4
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fe ff74 	bl	8001fc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d004      	beq.n	80030ee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	3318      	adds	r3, #24
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fe ff6b 	bl	8001fc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f2:	2201      	movs	r2, #1
 80030f4:	409a      	lsls	r2, r3
 80030f6:	4b24      	ldr	r3, [pc, #144]	@ (8003188 <xTaskIncrementTick+0x160>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	4a22      	ldr	r2, [pc, #136]	@ (8003188 <xTaskIncrementTick+0x160>)
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003104:	4613      	mov	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4a1f      	ldr	r2, [pc, #124]	@ (800318c <xTaskIncrementTick+0x164>)
 800310e:	441a      	add	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	3304      	adds	r3, #4
 8003114:	4619      	mov	r1, r3
 8003116:	4610      	mov	r0, r2
 8003118:	f7fe fef7 	bl	8001f0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003120:	4b1b      	ldr	r3, [pc, #108]	@ (8003190 <xTaskIncrementTick+0x168>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003126:	429a      	cmp	r2, r3
 8003128:	d3b9      	bcc.n	800309e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800312a:	2301      	movs	r3, #1
 800312c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800312e:	e7b6      	b.n	800309e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003130:	4b17      	ldr	r3, [pc, #92]	@ (8003190 <xTaskIncrementTick+0x168>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003136:	4915      	ldr	r1, [pc, #84]	@ (800318c <xTaskIncrementTick+0x164>)
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d901      	bls.n	800314c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003148:	2301      	movs	r3, #1
 800314a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800314c:	4b11      	ldr	r3, [pc, #68]	@ (8003194 <xTaskIncrementTick+0x16c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d007      	beq.n	8003164 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003154:	2301      	movs	r3, #1
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	e004      	b.n	8003164 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800315a:	4b0f      	ldr	r3, [pc, #60]	@ (8003198 <xTaskIncrementTick+0x170>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	3301      	adds	r3, #1
 8003160:	4a0d      	ldr	r2, [pc, #52]	@ (8003198 <xTaskIncrementTick+0x170>)
 8003162:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003164:	697b      	ldr	r3, [r7, #20]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20000980 	.word	0x20000980
 8003174:	2000095c 	.word	0x2000095c
 8003178:	20000910 	.word	0x20000910
 800317c:	20000914 	.word	0x20000914
 8003180:	20000970 	.word	0x20000970
 8003184:	20000978 	.word	0x20000978
 8003188:	20000960 	.word	0x20000960
 800318c:	2000085c 	.word	0x2000085c
 8003190:	20000858 	.word	0x20000858
 8003194:	2000096c 	.word	0x2000096c
 8003198:	20000968 	.word	0x20000968

0800319c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80031a2:	4b2a      	ldr	r3, [pc, #168]	@ (800324c <vTaskSwitchContext+0xb0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80031aa:	4b29      	ldr	r3, [pc, #164]	@ (8003250 <vTaskSwitchContext+0xb4>)
 80031ac:	2201      	movs	r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80031b0:	e045      	b.n	800323e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80031b2:	4b27      	ldr	r3, [pc, #156]	@ (8003250 <vTaskSwitchContext+0xb4>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031b8:	4b26      	ldr	r3, [pc, #152]	@ (8003254 <vTaskSwitchContext+0xb8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	fab3 f383 	clz	r3, r3
 80031c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80031c6:	7afb      	ldrb	r3, [r7, #11]
 80031c8:	f1c3 031f 	rsb	r3, r3, #31
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	4922      	ldr	r1, [pc, #136]	@ (8003258 <vTaskSwitchContext+0xbc>)
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10b      	bne.n	80031fa <vTaskSwitchContext+0x5e>
	__asm volatile
 80031e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031e6:	f383 8811 	msr	BASEPRI, r3
 80031ea:	f3bf 8f6f 	isb	sy
 80031ee:	f3bf 8f4f 	dsb	sy
 80031f2:	607b      	str	r3, [r7, #4]
}
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop
 80031f8:	e7fd      	b.n	80031f6 <vTaskSwitchContext+0x5a>
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4a14      	ldr	r2, [pc, #80]	@ (8003258 <vTaskSwitchContext+0xbc>)
 8003206:	4413      	add	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	605a      	str	r2, [r3, #4]
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	3308      	adds	r3, #8
 800321c:	429a      	cmp	r2, r3
 800321e:	d104      	bne.n	800322a <vTaskSwitchContext+0x8e>
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	4a0a      	ldr	r2, [pc, #40]	@ (800325c <vTaskSwitchContext+0xc0>)
 8003232:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003234:	4b09      	ldr	r3, [pc, #36]	@ (800325c <vTaskSwitchContext+0xc0>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	334c      	adds	r3, #76	@ 0x4c
 800323a:	4a09      	ldr	r2, [pc, #36]	@ (8003260 <vTaskSwitchContext+0xc4>)
 800323c:	6013      	str	r3, [r2, #0]
}
 800323e:	bf00      	nop
 8003240:	371c      	adds	r7, #28
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	20000980 	.word	0x20000980
 8003250:	2000096c 	.word	0x2000096c
 8003254:	20000960 	.word	0x20000960
 8003258:	2000085c 	.word	0x2000085c
 800325c:	20000858 	.word	0x20000858
 8003260:	20000010 	.word	0x20000010

08003264 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10b      	bne.n	800328c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	60fb      	str	r3, [r7, #12]
}
 8003286:	bf00      	nop
 8003288:	bf00      	nop
 800328a:	e7fd      	b.n	8003288 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800328c:	4b07      	ldr	r3, [pc, #28]	@ (80032ac <vTaskPlaceOnEventList+0x48>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3318      	adds	r3, #24
 8003292:	4619      	mov	r1, r3
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7fe fe5c 	bl	8001f52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800329a:	2101      	movs	r1, #1
 800329c:	6838      	ldr	r0, [r7, #0]
 800329e:	f000 fa9f 	bl	80037e0 <prvAddCurrentTaskToDelayedList>
}
 80032a2:	bf00      	nop
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000858 	.word	0x20000858

080032b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10b      	bne.n	80032da <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80032c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c6:	f383 8811 	msr	BASEPRI, r3
 80032ca:	f3bf 8f6f 	isb	sy
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	617b      	str	r3, [r7, #20]
}
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop
 80032d8:	e7fd      	b.n	80032d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032da:	4b0a      	ldr	r3, [pc, #40]	@ (8003304 <vTaskPlaceOnEventListRestricted+0x54>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	3318      	adds	r3, #24
 80032e0:	4619      	mov	r1, r3
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f7fe fe11 	bl	8001f0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80032ee:	f04f 33ff 	mov.w	r3, #4294967295
 80032f2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	68b8      	ldr	r0, [r7, #8]
 80032f8:	f000 fa72 	bl	80037e0 <prvAddCurrentTaskToDelayedList>
	}
 80032fc:	bf00      	nop
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	20000858 	.word	0x20000858

08003308 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10b      	bne.n	8003336 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800331e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	60fb      	str	r3, [r7, #12]
}
 8003330:	bf00      	nop
 8003332:	bf00      	nop
 8003334:	e7fd      	b.n	8003332 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	3318      	adds	r3, #24
 800333a:	4618      	mov	r0, r3
 800333c:	f7fe fe42 	bl	8001fc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003340:	4b1d      	ldr	r3, [pc, #116]	@ (80033b8 <xTaskRemoveFromEventList+0xb0>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d11c      	bne.n	8003382 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	3304      	adds	r3, #4
 800334c:	4618      	mov	r0, r3
 800334e:	f7fe fe39 	bl	8001fc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003356:	2201      	movs	r2, #1
 8003358:	409a      	lsls	r2, r3
 800335a:	4b18      	ldr	r3, [pc, #96]	@ (80033bc <xTaskRemoveFromEventList+0xb4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4313      	orrs	r3, r2
 8003360:	4a16      	ldr	r2, [pc, #88]	@ (80033bc <xTaskRemoveFromEventList+0xb4>)
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4a13      	ldr	r2, [pc, #76]	@ (80033c0 <xTaskRemoveFromEventList+0xb8>)
 8003372:	441a      	add	r2, r3
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	3304      	adds	r3, #4
 8003378:	4619      	mov	r1, r3
 800337a:	4610      	mov	r0, r2
 800337c:	f7fe fdc5 	bl	8001f0a <vListInsertEnd>
 8003380:	e005      	b.n	800338e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	3318      	adds	r3, #24
 8003386:	4619      	mov	r1, r3
 8003388:	480e      	ldr	r0, [pc, #56]	@ (80033c4 <xTaskRemoveFromEventList+0xbc>)
 800338a:	f7fe fdbe 	bl	8001f0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003392:	4b0d      	ldr	r3, [pc, #52]	@ (80033c8 <xTaskRemoveFromEventList+0xc0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003398:	429a      	cmp	r2, r3
 800339a:	d905      	bls.n	80033a8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800339c:	2301      	movs	r3, #1
 800339e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80033a0:	4b0a      	ldr	r3, [pc, #40]	@ (80033cc <xTaskRemoveFromEventList+0xc4>)
 80033a2:	2201      	movs	r2, #1
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	e001      	b.n	80033ac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80033ac:	697b      	ldr	r3, [r7, #20]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000980 	.word	0x20000980
 80033bc:	20000960 	.word	0x20000960
 80033c0:	2000085c 	.word	0x2000085c
 80033c4:	20000918 	.word	0x20000918
 80033c8:	20000858 	.word	0x20000858
 80033cc:	2000096c 	.word	0x2000096c

080033d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80033d8:	4b06      	ldr	r3, [pc, #24]	@ (80033f4 <vTaskInternalSetTimeOutState+0x24>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80033e0:	4b05      	ldr	r3, [pc, #20]	@ (80033f8 <vTaskInternalSetTimeOutState+0x28>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	605a      	str	r2, [r3, #4]
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	20000970 	.word	0x20000970
 80033f8:	2000095c 	.word	0x2000095c

080033fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10b      	bne.n	8003424 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800340c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003410:	f383 8811 	msr	BASEPRI, r3
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	613b      	str	r3, [r7, #16]
}
 800341e:	bf00      	nop
 8003420:	bf00      	nop
 8003422:	e7fd      	b.n	8003420 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10b      	bne.n	8003442 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800342a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800342e:	f383 8811 	msr	BASEPRI, r3
 8003432:	f3bf 8f6f 	isb	sy
 8003436:	f3bf 8f4f 	dsb	sy
 800343a:	60fb      	str	r3, [r7, #12]
}
 800343c:	bf00      	nop
 800343e:	bf00      	nop
 8003440:	e7fd      	b.n	800343e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003442:	f000 ff01 	bl	8004248 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003446:	4b1d      	ldr	r3, [pc, #116]	@ (80034bc <xTaskCheckForTimeOut+0xc0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345e:	d102      	bne.n	8003466 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003460:	2300      	movs	r3, #0
 8003462:	61fb      	str	r3, [r7, #28]
 8003464:	e023      	b.n	80034ae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	4b15      	ldr	r3, [pc, #84]	@ (80034c0 <xTaskCheckForTimeOut+0xc4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d007      	beq.n	8003482 <xTaskCheckForTimeOut+0x86>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	429a      	cmp	r2, r3
 800347a:	d302      	bcc.n	8003482 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800347c:	2301      	movs	r3, #1
 800347e:	61fb      	str	r3, [r7, #28]
 8003480:	e015      	b.n	80034ae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	429a      	cmp	r2, r3
 800348a:	d20b      	bcs.n	80034a4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	1ad2      	subs	r2, r2, r3
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff ff99 	bl	80033d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800349e:	2300      	movs	r3, #0
 80034a0:	61fb      	str	r3, [r7, #28]
 80034a2:	e004      	b.n	80034ae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80034aa:	2301      	movs	r3, #1
 80034ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80034ae:	f000 fefd 	bl	80042ac <vPortExitCritical>

	return xReturn;
 80034b2:	69fb      	ldr	r3, [r7, #28]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3720      	adds	r7, #32
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	2000095c 	.word	0x2000095c
 80034c0:	20000970 	.word	0x20000970

080034c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80034c8:	4b03      	ldr	r3, [pc, #12]	@ (80034d8 <vTaskMissedYield+0x14>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	601a      	str	r2, [r3, #0]
}
 80034ce:	bf00      	nop
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	2000096c 	.word	0x2000096c

080034dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80034e4:	f000 f852 	bl	800358c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80034e8:	4b06      	ldr	r3, [pc, #24]	@ (8003504 <prvIdleTask+0x28>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d9f9      	bls.n	80034e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80034f0:	4b05      	ldr	r3, [pc, #20]	@ (8003508 <prvIdleTask+0x2c>)
 80034f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003500:	e7f0      	b.n	80034e4 <prvIdleTask+0x8>
 8003502:	bf00      	nop
 8003504:	2000085c 	.word	0x2000085c
 8003508:	e000ed04 	.word	0xe000ed04

0800350c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003512:	2300      	movs	r3, #0
 8003514:	607b      	str	r3, [r7, #4]
 8003516:	e00c      	b.n	8003532 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4a12      	ldr	r2, [pc, #72]	@ (800356c <prvInitialiseTaskLists+0x60>)
 8003524:	4413      	add	r3, r2
 8003526:	4618      	mov	r0, r3
 8003528:	f7fe fcc2 	bl	8001eb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3301      	adds	r3, #1
 8003530:	607b      	str	r3, [r7, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b06      	cmp	r3, #6
 8003536:	d9ef      	bls.n	8003518 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003538:	480d      	ldr	r0, [pc, #52]	@ (8003570 <prvInitialiseTaskLists+0x64>)
 800353a:	f7fe fcb9 	bl	8001eb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800353e:	480d      	ldr	r0, [pc, #52]	@ (8003574 <prvInitialiseTaskLists+0x68>)
 8003540:	f7fe fcb6 	bl	8001eb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003544:	480c      	ldr	r0, [pc, #48]	@ (8003578 <prvInitialiseTaskLists+0x6c>)
 8003546:	f7fe fcb3 	bl	8001eb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800354a:	480c      	ldr	r0, [pc, #48]	@ (800357c <prvInitialiseTaskLists+0x70>)
 800354c:	f7fe fcb0 	bl	8001eb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003550:	480b      	ldr	r0, [pc, #44]	@ (8003580 <prvInitialiseTaskLists+0x74>)
 8003552:	f7fe fcad 	bl	8001eb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003556:	4b0b      	ldr	r3, [pc, #44]	@ (8003584 <prvInitialiseTaskLists+0x78>)
 8003558:	4a05      	ldr	r2, [pc, #20]	@ (8003570 <prvInitialiseTaskLists+0x64>)
 800355a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800355c:	4b0a      	ldr	r3, [pc, #40]	@ (8003588 <prvInitialiseTaskLists+0x7c>)
 800355e:	4a05      	ldr	r2, [pc, #20]	@ (8003574 <prvInitialiseTaskLists+0x68>)
 8003560:	601a      	str	r2, [r3, #0]
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	2000085c 	.word	0x2000085c
 8003570:	200008e8 	.word	0x200008e8
 8003574:	200008fc 	.word	0x200008fc
 8003578:	20000918 	.word	0x20000918
 800357c:	2000092c 	.word	0x2000092c
 8003580:	20000944 	.word	0x20000944
 8003584:	20000910 	.word	0x20000910
 8003588:	20000914 	.word	0x20000914

0800358c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003592:	e019      	b.n	80035c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003594:	f000 fe58 	bl	8004248 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003598:	4b10      	ldr	r3, [pc, #64]	@ (80035dc <prvCheckTasksWaitingTermination+0x50>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3304      	adds	r3, #4
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fe fd0d 	bl	8001fc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80035aa:	4b0d      	ldr	r3, [pc, #52]	@ (80035e0 <prvCheckTasksWaitingTermination+0x54>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	4a0b      	ldr	r2, [pc, #44]	@ (80035e0 <prvCheckTasksWaitingTermination+0x54>)
 80035b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80035b4:	4b0b      	ldr	r3, [pc, #44]	@ (80035e4 <prvCheckTasksWaitingTermination+0x58>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	3b01      	subs	r3, #1
 80035ba:	4a0a      	ldr	r2, [pc, #40]	@ (80035e4 <prvCheckTasksWaitingTermination+0x58>)
 80035bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80035be:	f000 fe75 	bl	80042ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f810 	bl	80035e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035c8:	4b06      	ldr	r3, [pc, #24]	@ (80035e4 <prvCheckTasksWaitingTermination+0x58>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1e1      	bne.n	8003594 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80035d0:	bf00      	nop
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	2000092c 	.word	0x2000092c
 80035e0:	20000958 	.word	0x20000958
 80035e4:	20000940 	.word	0x20000940

080035e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	334c      	adds	r3, #76	@ 0x4c
 80035f4:	4618      	mov	r0, r3
 80035f6:	f001 f93f 	bl	8004878 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003600:	2b00      	cmp	r3, #0
 8003602:	d108      	bne.n	8003616 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003608:	4618      	mov	r0, r3
 800360a:	f001 f80d 	bl	8004628 <vPortFree>
				vPortFree( pxTCB );
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f001 f80a 	bl	8004628 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003614:	e019      	b.n	800364a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800361c:	2b01      	cmp	r3, #1
 800361e:	d103      	bne.n	8003628 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f001 f801 	bl	8004628 <vPortFree>
	}
 8003626:	e010      	b.n	800364a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800362e:	2b02      	cmp	r3, #2
 8003630:	d00b      	beq.n	800364a <prvDeleteTCB+0x62>
	__asm volatile
 8003632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	60fb      	str	r3, [r7, #12]
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop
 8003648:	e7fd      	b.n	8003646 <prvDeleteTCB+0x5e>
	}
 800364a:	bf00      	nop
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800365a:	4b0c      	ldr	r3, [pc, #48]	@ (800368c <prvResetNextTaskUnblockTime+0x38>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d104      	bne.n	800366e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003664:	4b0a      	ldr	r3, [pc, #40]	@ (8003690 <prvResetNextTaskUnblockTime+0x3c>)
 8003666:	f04f 32ff 	mov.w	r2, #4294967295
 800366a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800366c:	e008      	b.n	8003680 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800366e:	4b07      	ldr	r3, [pc, #28]	@ (800368c <prvResetNextTaskUnblockTime+0x38>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	4a04      	ldr	r2, [pc, #16]	@ (8003690 <prvResetNextTaskUnblockTime+0x3c>)
 800367e:	6013      	str	r3, [r2, #0]
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	20000910 	.word	0x20000910
 8003690:	20000978 	.word	0x20000978

08003694 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800369a:	4b0b      	ldr	r3, [pc, #44]	@ (80036c8 <xTaskGetSchedulerState+0x34>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d102      	bne.n	80036a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80036a2:	2301      	movs	r3, #1
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	e008      	b.n	80036ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036a8:	4b08      	ldr	r3, [pc, #32]	@ (80036cc <xTaskGetSchedulerState+0x38>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d102      	bne.n	80036b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80036b0:	2302      	movs	r3, #2
 80036b2:	607b      	str	r3, [r7, #4]
 80036b4:	e001      	b.n	80036ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80036b6:	2300      	movs	r3, #0
 80036b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80036ba:	687b      	ldr	r3, [r7, #4]
	}
 80036bc:	4618      	mov	r0, r3
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	20000964 	.word	0x20000964
 80036cc:	20000980 	.word	0x20000980

080036d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d070      	beq.n	80037c8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80036e6:	4b3b      	ldr	r3, [pc, #236]	@ (80037d4 <xTaskPriorityDisinherit+0x104>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d00b      	beq.n	8003708 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80036f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	60fb      	str	r3, [r7, #12]
}
 8003702:	bf00      	nop
 8003704:	bf00      	nop
 8003706:	e7fd      	b.n	8003704 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10b      	bne.n	8003728 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003714:	f383 8811 	msr	BASEPRI, r3
 8003718:	f3bf 8f6f 	isb	sy
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	60bb      	str	r3, [r7, #8]
}
 8003722:	bf00      	nop
 8003724:	bf00      	nop
 8003726:	e7fd      	b.n	8003724 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800372c:	1e5a      	subs	r2, r3, #1
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373a:	429a      	cmp	r2, r3
 800373c:	d044      	beq.n	80037c8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003742:	2b00      	cmp	r3, #0
 8003744:	d140      	bne.n	80037c8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	3304      	adds	r3, #4
 800374a:	4618      	mov	r0, r3
 800374c:	f7fe fc3a 	bl	8001fc4 <uxListRemove>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d115      	bne.n	8003782 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800375a:	491f      	ldr	r1, [pc, #124]	@ (80037d8 <xTaskPriorityDisinherit+0x108>)
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10a      	bne.n	8003782 <xTaskPriorityDisinherit+0xb2>
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003770:	2201      	movs	r2, #1
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43da      	mvns	r2, r3
 8003778:	4b18      	ldr	r3, [pc, #96]	@ (80037dc <xTaskPriorityDisinherit+0x10c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4013      	ands	r3, r2
 800377e:	4a17      	ldr	r2, [pc, #92]	@ (80037dc <xTaskPriorityDisinherit+0x10c>)
 8003780:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378e:	f1c3 0207 	rsb	r2, r3, #7
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379a:	2201      	movs	r2, #1
 800379c:	409a      	lsls	r2, r3
 800379e:	4b0f      	ldr	r3, [pc, #60]	@ (80037dc <xTaskPriorityDisinherit+0x10c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	4a0d      	ldr	r2, [pc, #52]	@ (80037dc <xTaskPriorityDisinherit+0x10c>)
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4a08      	ldr	r2, [pc, #32]	@ (80037d8 <xTaskPriorityDisinherit+0x108>)
 80037b6:	441a      	add	r2, r3
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	3304      	adds	r3, #4
 80037bc:	4619      	mov	r1, r3
 80037be:	4610      	mov	r0, r2
 80037c0:	f7fe fba3 	bl	8001f0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80037c4:	2301      	movs	r3, #1
 80037c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80037c8:	697b      	ldr	r3, [r7, #20]
	}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000858 	.word	0x20000858
 80037d8:	2000085c 	.word	0x2000085c
 80037dc:	20000960 	.word	0x20000960

080037e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80037ea:	4b29      	ldr	r3, [pc, #164]	@ (8003890 <prvAddCurrentTaskToDelayedList+0xb0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037f0:	4b28      	ldr	r3, [pc, #160]	@ (8003894 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3304      	adds	r3, #4
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe fbe4 	bl	8001fc4 <uxListRemove>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10b      	bne.n	800381a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003802:	4b24      	ldr	r3, [pc, #144]	@ (8003894 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003808:	2201      	movs	r2, #1
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	43da      	mvns	r2, r3
 8003810:	4b21      	ldr	r3, [pc, #132]	@ (8003898 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4013      	ands	r3, r2
 8003816:	4a20      	ldr	r2, [pc, #128]	@ (8003898 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003818:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003820:	d10a      	bne.n	8003838 <prvAddCurrentTaskToDelayedList+0x58>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d007      	beq.n	8003838 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003828:	4b1a      	ldr	r3, [pc, #104]	@ (8003894 <prvAddCurrentTaskToDelayedList+0xb4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3304      	adds	r3, #4
 800382e:	4619      	mov	r1, r3
 8003830:	481a      	ldr	r0, [pc, #104]	@ (800389c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003832:	f7fe fb6a 	bl	8001f0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003836:	e026      	b.n	8003886 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4413      	add	r3, r2
 800383e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003840:	4b14      	ldr	r3, [pc, #80]	@ (8003894 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	429a      	cmp	r2, r3
 800384e:	d209      	bcs.n	8003864 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003850:	4b13      	ldr	r3, [pc, #76]	@ (80038a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4b0f      	ldr	r3, [pc, #60]	@ (8003894 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3304      	adds	r3, #4
 800385a:	4619      	mov	r1, r3
 800385c:	4610      	mov	r0, r2
 800385e:	f7fe fb78 	bl	8001f52 <vListInsert>
}
 8003862:	e010      	b.n	8003886 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003864:	4b0f      	ldr	r3, [pc, #60]	@ (80038a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	4b0a      	ldr	r3, [pc, #40]	@ (8003894 <prvAddCurrentTaskToDelayedList+0xb4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3304      	adds	r3, #4
 800386e:	4619      	mov	r1, r3
 8003870:	4610      	mov	r0, r2
 8003872:	f7fe fb6e 	bl	8001f52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003876:	4b0c      	ldr	r3, [pc, #48]	@ (80038a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	429a      	cmp	r2, r3
 800387e:	d202      	bcs.n	8003886 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003880:	4a09      	ldr	r2, [pc, #36]	@ (80038a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	6013      	str	r3, [r2, #0]
}
 8003886:	bf00      	nop
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	2000095c 	.word	0x2000095c
 8003894:	20000858 	.word	0x20000858
 8003898:	20000960 	.word	0x20000960
 800389c:	20000944 	.word	0x20000944
 80038a0:	20000914 	.word	0x20000914
 80038a4:	20000910 	.word	0x20000910
 80038a8:	20000978 	.word	0x20000978

080038ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08a      	sub	sp, #40	@ 0x28
 80038b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80038b6:	f000 fb55 	bl	8003f64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80038ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003930 <xTimerCreateTimerTask+0x84>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d021      	beq.n	8003906 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80038ca:	1d3a      	adds	r2, r7, #4
 80038cc:	f107 0108 	add.w	r1, r7, #8
 80038d0:	f107 030c 	add.w	r3, r7, #12
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fc fe0d 	bl	80004f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	9202      	str	r2, [sp, #8]
 80038e2:	9301      	str	r3, [sp, #4]
 80038e4:	2306      	movs	r3, #6
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	2300      	movs	r3, #0
 80038ea:	460a      	mov	r2, r1
 80038ec:	4911      	ldr	r1, [pc, #68]	@ (8003934 <xTimerCreateTimerTask+0x88>)
 80038ee:	4812      	ldr	r0, [pc, #72]	@ (8003938 <xTimerCreateTimerTask+0x8c>)
 80038f0:	f7ff f888 	bl	8002a04 <xTaskCreateStatic>
 80038f4:	4603      	mov	r3, r0
 80038f6:	4a11      	ldr	r2, [pc, #68]	@ (800393c <xTimerCreateTimerTask+0x90>)
 80038f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80038fa:	4b10      	ldr	r3, [pc, #64]	@ (800393c <xTimerCreateTimerTask+0x90>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003902:	2301      	movs	r3, #1
 8003904:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10b      	bne.n	8003924 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800390c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003910:	f383 8811 	msr	BASEPRI, r3
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	613b      	str	r3, [r7, #16]
}
 800391e:	bf00      	nop
 8003920:	bf00      	nop
 8003922:	e7fd      	b.n	8003920 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003924:	697b      	ldr	r3, [r7, #20]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	200009b4 	.word	0x200009b4
 8003934:	08004a78 	.word	0x08004a78
 8003938:	08003b35 	.word	0x08003b35
 800393c:	200009b8 	.word	0x200009b8

08003940 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af02      	add	r7, sp, #8
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800394e:	2028      	movs	r0, #40	@ 0x28
 8003950:	f000 fd9c 	bl	800448c <pvPortMalloc>
 8003954:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00d      	beq.n	8003978 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	9301      	str	r3, [sp, #4]
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	68b9      	ldr	r1, [r7, #8]
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 f805 	bl	8003982 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8003978:	697b      	ldr	r3, [r7, #20]
	}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b086      	sub	sp, #24
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10b      	bne.n	80039ae <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8003996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800399a:	f383 8811 	msr	BASEPRI, r3
 800399e:	f3bf 8f6f 	isb	sy
 80039a2:	f3bf 8f4f 	dsb	sy
 80039a6:	617b      	str	r3, [r7, #20]
}
 80039a8:	bf00      	nop
 80039aa:	bf00      	nop
 80039ac:	e7fd      	b.n	80039aa <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01e      	beq.n	80039f2 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80039b4:	f000 fad6 	bl	8003f64 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80039b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80039be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80039c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80039ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039cc:	6a3a      	ldr	r2, [r7, #32]
 80039ce:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80039d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d2:	3304      	adds	r3, #4
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fe fa8b 	bl	8001ef0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d008      	beq.n	80039f2 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80039e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039e6:	f043 0304 	orr.w	r3, r3, #4
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80039f2:	bf00      	nop
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	@ 0x28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10b      	bne.n	8003a2c <xTimerGenericCommand+0x30>
	__asm volatile
 8003a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	623b      	str	r3, [r7, #32]
}
 8003a26:	bf00      	nop
 8003a28:	bf00      	nop
 8003a2a:	e7fd      	b.n	8003a28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003a2c:	4b19      	ldr	r3, [pc, #100]	@ (8003a94 <xTimerGenericCommand+0x98>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d02a      	beq.n	8003a8a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b05      	cmp	r3, #5
 8003a44:	dc18      	bgt.n	8003a78 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a46:	f7ff fe25 	bl	8003694 <xTaskGetSchedulerState>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d109      	bne.n	8003a64 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a50:	4b10      	ldr	r3, [pc, #64]	@ (8003a94 <xTimerGenericCommand+0x98>)
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	f107 0114 	add.w	r1, r7, #20
 8003a58:	2300      	movs	r3, #0
 8003a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a5c:	f7fe fbe2 	bl	8002224 <xQueueGenericSend>
 8003a60:	6278      	str	r0, [r7, #36]	@ 0x24
 8003a62:	e012      	b.n	8003a8a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a64:	4b0b      	ldr	r3, [pc, #44]	@ (8003a94 <xTimerGenericCommand+0x98>)
 8003a66:	6818      	ldr	r0, [r3, #0]
 8003a68:	f107 0114 	add.w	r1, r7, #20
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f7fe fbd8 	bl	8002224 <xQueueGenericSend>
 8003a74:	6278      	str	r0, [r7, #36]	@ 0x24
 8003a76:	e008      	b.n	8003a8a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a78:	4b06      	ldr	r3, [pc, #24]	@ (8003a94 <xTimerGenericCommand+0x98>)
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	f107 0114 	add.w	r1, r7, #20
 8003a80:	2300      	movs	r3, #0
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	f7fe fcd0 	bl	8002428 <xQueueGenericSendFromISR>
 8003a88:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3728      	adds	r7, #40	@ 0x28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	200009b4 	.word	0x200009b4

08003a98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aa2:	4b23      	ldr	r3, [pc, #140]	@ (8003b30 <prvProcessExpiredTimer+0x98>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	3304      	adds	r3, #4
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fe fa87 	bl	8001fc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d023      	beq.n	8003b0c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	699a      	ldr	r2, [r3, #24]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	18d1      	adds	r1, r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	6978      	ldr	r0, [r7, #20]
 8003ad2:	f000 f8d5 	bl	8003c80 <prvInsertTimerInActiveList>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d020      	beq.n	8003b1e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003adc:	2300      	movs	r3, #0
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	6978      	ldr	r0, [r7, #20]
 8003ae8:	f7ff ff88 	bl	80039fc <xTimerGenericCommand>
 8003aec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d114      	bne.n	8003b1e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	60fb      	str	r3, [r7, #12]
}
 8003b06:	bf00      	nop
 8003b08:	bf00      	nop
 8003b0a:	e7fd      	b.n	8003b08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b12:	f023 0301 	bic.w	r3, r3, #1
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	6978      	ldr	r0, [r7, #20]
 8003b24:	4798      	blx	r3
}
 8003b26:	bf00      	nop
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	200009ac 	.word	0x200009ac

08003b34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b3c:	f107 0308 	add.w	r3, r7, #8
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 f859 	bl	8003bf8 <prvGetNextExpireTime>
 8003b46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 f805 	bl	8003b5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003b52:	f000 f8d7 	bl	8003d04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b56:	bf00      	nop
 8003b58:	e7f0      	b.n	8003b3c <prvTimerTask+0x8>
	...

08003b5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003b66:	f7ff f9a3 	bl	8002eb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b6a:	f107 0308 	add.w	r3, r7, #8
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 f866 	bl	8003c40 <prvSampleTimeNow>
 8003b74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d130      	bne.n	8003bde <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10a      	bne.n	8003b98 <prvProcessTimerOrBlockTask+0x3c>
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d806      	bhi.n	8003b98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003b8a:	f7ff f99f 	bl	8002ecc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b8e:	68f9      	ldr	r1, [r7, #12]
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff ff81 	bl	8003a98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003b96:	e024      	b.n	8003be2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b9e:	4b13      	ldr	r3, [pc, #76]	@ (8003bec <prvProcessTimerOrBlockTask+0x90>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <prvProcessTimerOrBlockTask+0x50>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e000      	b.n	8003bae <prvProcessTimerOrBlockTask+0x52>
 8003bac:	2300      	movs	r3, #0
 8003bae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf0 <prvProcessTimerOrBlockTask+0x94>)
 8003bb2:	6818      	ldr	r0, [r3, #0]
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	f7fe feed 	bl	800299c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003bc2:	f7ff f983 	bl	8002ecc <xTaskResumeAll>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10a      	bne.n	8003be2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003bcc:	4b09      	ldr	r3, [pc, #36]	@ (8003bf4 <prvProcessTimerOrBlockTask+0x98>)
 8003bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	f3bf 8f6f 	isb	sy
}
 8003bdc:	e001      	b.n	8003be2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003bde:	f7ff f975 	bl	8002ecc <xTaskResumeAll>
}
 8003be2:	bf00      	nop
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	200009b0 	.word	0x200009b0
 8003bf0:	200009b4 	.word	0x200009b4
 8003bf4:	e000ed04 	.word	0xe000ed04

08003bf8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c00:	4b0e      	ldr	r3, [pc, #56]	@ (8003c3c <prvGetNextExpireTime+0x44>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <prvGetNextExpireTime+0x16>
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	e000      	b.n	8003c10 <prvGetNextExpireTime+0x18>
 8003c0e:	2200      	movs	r2, #0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d105      	bne.n	8003c28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c1c:	4b07      	ldr	r3, [pc, #28]	@ (8003c3c <prvGetNextExpireTime+0x44>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	e001      	b.n	8003c2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	200009ac 	.word	0x200009ac

08003c40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003c48:	f7ff f9de 	bl	8003008 <xTaskGetTickCount>
 8003c4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c7c <prvSampleTimeNow+0x3c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d205      	bcs.n	8003c64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003c58:	f000 f91e 	bl	8003e98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	e002      	b.n	8003c6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003c6a:	4a04      	ldr	r2, [pc, #16]	@ (8003c7c <prvSampleTimeNow+0x3c>)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003c70:	68fb      	ldr	r3, [r7, #12]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	200009bc 	.word	0x200009bc

08003c80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d812      	bhi.n	8003ccc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	1ad2      	subs	r2, r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d302      	bcc.n	8003cba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	e01b      	b.n	8003cf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003cba:	4b10      	ldr	r3, [pc, #64]	@ (8003cfc <prvInsertTimerInActiveList+0x7c>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	f7fe f944 	bl	8001f52 <vListInsert>
 8003cca:	e012      	b.n	8003cf2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d206      	bcs.n	8003ce2 <prvInsertTimerInActiveList+0x62>
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d302      	bcc.n	8003ce2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	e007      	b.n	8003cf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ce2:	4b07      	ldr	r3, [pc, #28]	@ (8003d00 <prvInsertTimerInActiveList+0x80>)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	3304      	adds	r3, #4
 8003cea:	4619      	mov	r1, r3
 8003cec:	4610      	mov	r0, r2
 8003cee:	f7fe f930 	bl	8001f52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003cf2:	697b      	ldr	r3, [r7, #20]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	200009b0 	.word	0x200009b0
 8003d00:	200009ac 	.word	0x200009ac

08003d04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08c      	sub	sp, #48	@ 0x30
 8003d08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d0a:	e0b2      	b.n	8003e72 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f2c0 80af 	blt.w	8003e72 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d004      	beq.n	8003d2a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d22:	3304      	adds	r3, #4
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fe f94d 	bl	8001fc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d2a:	1d3b      	adds	r3, r7, #4
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff ff87 	bl	8003c40 <prvSampleTimeNow>
 8003d32:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b09      	cmp	r3, #9
 8003d38:	f200 8098 	bhi.w	8003e6c <prvProcessReceivedCommands+0x168>
 8003d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d44 <prvProcessReceivedCommands+0x40>)
 8003d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d42:	bf00      	nop
 8003d44:	08003d6d 	.word	0x08003d6d
 8003d48:	08003d6d 	.word	0x08003d6d
 8003d4c:	08003d6d 	.word	0x08003d6d
 8003d50:	08003de3 	.word	0x08003de3
 8003d54:	08003df7 	.word	0x08003df7
 8003d58:	08003e43 	.word	0x08003e43
 8003d5c:	08003d6d 	.word	0x08003d6d
 8003d60:	08003d6d 	.word	0x08003d6d
 8003d64:	08003de3 	.word	0x08003de3
 8003d68:	08003df7 	.word	0x08003df7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d72:	f043 0301 	orr.w	r3, r3, #1
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	18d1      	adds	r1, r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a3a      	ldr	r2, [r7, #32]
 8003d8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d8c:	f7ff ff78 	bl	8003c80 <prvInsertTimerInActiveList>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d06c      	beq.n	8003e70 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d061      	beq.n	8003e70 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	441a      	add	r2, r3
 8003db4:	2300      	movs	r3, #0
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	2300      	movs	r3, #0
 8003dba:	2100      	movs	r1, #0
 8003dbc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003dbe:	f7ff fe1d 	bl	80039fc <xTimerGenericCommand>
 8003dc2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d152      	bne.n	8003e70 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8003dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	61bb      	str	r3, [r7, #24]
}
 8003ddc:	bf00      	nop
 8003dde:	bf00      	nop
 8003de0:	e7fd      	b.n	8003dde <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003de8:	f023 0301 	bic.w	r3, r3, #1
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8003df4:	e03d      	b.n	8003e72 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10b      	bne.n	8003e2e <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8003e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e1a:	f383 8811 	msr	BASEPRI, r3
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	617b      	str	r3, [r7, #20]
}
 8003e28:	bf00      	nop
 8003e2a:	bf00      	nop
 8003e2c:	e7fd      	b.n	8003e2a <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	699a      	ldr	r2, [r3, #24]
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	18d1      	adds	r1, r2, r3
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	6a3a      	ldr	r2, [r7, #32]
 8003e3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e3c:	f7ff ff20 	bl	8003c80 <prvInsertTimerInActiveList>
					break;
 8003e40:	e017      	b.n	8003e72 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d103      	bne.n	8003e58 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8003e50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e52:	f000 fbe9 	bl	8004628 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003e56:	e00c      	b.n	8003e72 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e5e:	f023 0301 	bic.w	r3, r3, #1
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8003e6a:	e002      	b.n	8003e72 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8003e6c:	bf00      	nop
 8003e6e:	e000      	b.n	8003e72 <prvProcessReceivedCommands+0x16e>
					break;
 8003e70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e72:	4b08      	ldr	r3, [pc, #32]	@ (8003e94 <prvProcessReceivedCommands+0x190>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f107 0108 	add.w	r1, r7, #8
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fe fb71 	bl	8002564 <xQueueReceive>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f47f af41 	bne.w	8003d0c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003e8a:	bf00      	nop
 8003e8c:	bf00      	nop
 8003e8e:	3728      	adds	r7, #40	@ 0x28
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	200009b4 	.word	0x200009b4

08003e98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e9e:	e049      	b.n	8003f34 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ea0:	4b2e      	ldr	r3, [pc, #184]	@ (8003f5c <prvSwitchTimerLists+0xc4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8003f5c <prvSwitchTimerLists+0xc4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fe f883 	bl	8001fc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d02f      	beq.n	8003f34 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	4413      	add	r3, r2
 8003edc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d90e      	bls.n	8003f04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8003f5c <prvSwitchTimerLists+0xc4>)
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	3304      	adds	r3, #4
 8003efa:	4619      	mov	r1, r3
 8003efc:	4610      	mov	r0, r2
 8003efe:	f7fe f828 	bl	8001f52 <vListInsert>
 8003f02:	e017      	b.n	8003f34 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f04:	2300      	movs	r3, #0
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	2300      	movs	r3, #0
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f7ff fd74 	bl	80039fc <xTimerGenericCommand>
 8003f14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10b      	bne.n	8003f34 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	603b      	str	r3, [r7, #0]
}
 8003f2e:	bf00      	nop
 8003f30:	bf00      	nop
 8003f32:	e7fd      	b.n	8003f30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f34:	4b09      	ldr	r3, [pc, #36]	@ (8003f5c <prvSwitchTimerLists+0xc4>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1b0      	bne.n	8003ea0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003f3e:	4b07      	ldr	r3, [pc, #28]	@ (8003f5c <prvSwitchTimerLists+0xc4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003f44:	4b06      	ldr	r3, [pc, #24]	@ (8003f60 <prvSwitchTimerLists+0xc8>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a04      	ldr	r2, [pc, #16]	@ (8003f5c <prvSwitchTimerLists+0xc4>)
 8003f4a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003f4c:	4a04      	ldr	r2, [pc, #16]	@ (8003f60 <prvSwitchTimerLists+0xc8>)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	6013      	str	r3, [r2, #0]
}
 8003f52:	bf00      	nop
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	200009ac 	.word	0x200009ac
 8003f60:	200009b0 	.word	0x200009b0

08003f64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003f6a:	f000 f96d 	bl	8004248 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003f6e:	4b15      	ldr	r3, [pc, #84]	@ (8003fc4 <prvCheckForValidListAndQueue+0x60>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d120      	bne.n	8003fb8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003f76:	4814      	ldr	r0, [pc, #80]	@ (8003fc8 <prvCheckForValidListAndQueue+0x64>)
 8003f78:	f7fd ff9a 	bl	8001eb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003f7c:	4813      	ldr	r0, [pc, #76]	@ (8003fcc <prvCheckForValidListAndQueue+0x68>)
 8003f7e:	f7fd ff97 	bl	8001eb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003f82:	4b13      	ldr	r3, [pc, #76]	@ (8003fd0 <prvCheckForValidListAndQueue+0x6c>)
 8003f84:	4a10      	ldr	r2, [pc, #64]	@ (8003fc8 <prvCheckForValidListAndQueue+0x64>)
 8003f86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003f88:	4b12      	ldr	r3, [pc, #72]	@ (8003fd4 <prvCheckForValidListAndQueue+0x70>)
 8003f8a:	4a10      	ldr	r2, [pc, #64]	@ (8003fcc <prvCheckForValidListAndQueue+0x68>)
 8003f8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003f8e:	2300      	movs	r3, #0
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	4b11      	ldr	r3, [pc, #68]	@ (8003fd8 <prvCheckForValidListAndQueue+0x74>)
 8003f94:	4a11      	ldr	r2, [pc, #68]	@ (8003fdc <prvCheckForValidListAndQueue+0x78>)
 8003f96:	210c      	movs	r1, #12
 8003f98:	200a      	movs	r0, #10
 8003f9a:	f7fe f8a7 	bl	80020ec <xQueueGenericCreateStatic>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4a08      	ldr	r2, [pc, #32]	@ (8003fc4 <prvCheckForValidListAndQueue+0x60>)
 8003fa2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003fa4:	4b07      	ldr	r3, [pc, #28]	@ (8003fc4 <prvCheckForValidListAndQueue+0x60>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003fac:	4b05      	ldr	r3, [pc, #20]	@ (8003fc4 <prvCheckForValidListAndQueue+0x60>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	490b      	ldr	r1, [pc, #44]	@ (8003fe0 <prvCheckForValidListAndQueue+0x7c>)
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe fcc8 	bl	8002948 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fb8:	f000 f978 	bl	80042ac <vPortExitCritical>
}
 8003fbc:	bf00      	nop
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	200009b4 	.word	0x200009b4
 8003fc8:	20000984 	.word	0x20000984
 8003fcc:	20000998 	.word	0x20000998
 8003fd0:	200009ac 	.word	0x200009ac
 8003fd4:	200009b0 	.word	0x200009b0
 8003fd8:	20000a38 	.word	0x20000a38
 8003fdc:	200009c0 	.word	0x200009c0
 8003fe0:	08004a80 	.word	0x08004a80

08003fe4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	3b04      	subs	r3, #4
 8003ff4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	3b04      	subs	r3, #4
 8004002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f023 0201 	bic.w	r2, r3, #1
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	3b04      	subs	r3, #4
 8004012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004014:	4a0c      	ldr	r2, [pc, #48]	@ (8004048 <pxPortInitialiseStack+0x64>)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	3b14      	subs	r3, #20
 800401e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	3b04      	subs	r3, #4
 800402a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f06f 0202 	mvn.w	r2, #2
 8004032:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3b20      	subs	r3, #32
 8004038:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800403a:	68fb      	ldr	r3, [r7, #12]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	0800404d 	.word	0x0800404d

0800404c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004052:	2300      	movs	r3, #0
 8004054:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004056:	4b13      	ldr	r3, [pc, #76]	@ (80040a4 <prvTaskExitError+0x58>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405e:	d00b      	beq.n	8004078 <prvTaskExitError+0x2c>
	__asm volatile
 8004060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004064:	f383 8811 	msr	BASEPRI, r3
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	60fb      	str	r3, [r7, #12]
}
 8004072:	bf00      	nop
 8004074:	bf00      	nop
 8004076:	e7fd      	b.n	8004074 <prvTaskExitError+0x28>
	__asm volatile
 8004078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	60bb      	str	r3, [r7, #8]
}
 800408a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800408c:	bf00      	nop
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0fc      	beq.n	800408e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004094:	bf00      	nop
 8004096:	bf00      	nop
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	2000000c 	.word	0x2000000c
	...

080040b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80040b0:	4b07      	ldr	r3, [pc, #28]	@ (80040d0 <pxCurrentTCBConst2>)
 80040b2:	6819      	ldr	r1, [r3, #0]
 80040b4:	6808      	ldr	r0, [r1, #0]
 80040b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ba:	f380 8809 	msr	PSP, r0
 80040be:	f3bf 8f6f 	isb	sy
 80040c2:	f04f 0000 	mov.w	r0, #0
 80040c6:	f380 8811 	msr	BASEPRI, r0
 80040ca:	4770      	bx	lr
 80040cc:	f3af 8000 	nop.w

080040d0 <pxCurrentTCBConst2>:
 80040d0:	20000858 	.word	0x20000858
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop

080040d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80040d8:	4808      	ldr	r0, [pc, #32]	@ (80040fc <prvPortStartFirstTask+0x24>)
 80040da:	6800      	ldr	r0, [r0, #0]
 80040dc:	6800      	ldr	r0, [r0, #0]
 80040de:	f380 8808 	msr	MSP, r0
 80040e2:	f04f 0000 	mov.w	r0, #0
 80040e6:	f380 8814 	msr	CONTROL, r0
 80040ea:	b662      	cpsie	i
 80040ec:	b661      	cpsie	f
 80040ee:	f3bf 8f4f 	dsb	sy
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	df00      	svc	0
 80040f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80040fa:	bf00      	nop
 80040fc:	e000ed08 	.word	0xe000ed08

08004100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004106:	4b47      	ldr	r3, [pc, #284]	@ (8004224 <xPortStartScheduler+0x124>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a47      	ldr	r2, [pc, #284]	@ (8004228 <xPortStartScheduler+0x128>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d10b      	bne.n	8004128 <xPortStartScheduler+0x28>
	__asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	613b      	str	r3, [r7, #16]
}
 8004122:	bf00      	nop
 8004124:	bf00      	nop
 8004126:	e7fd      	b.n	8004124 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004128:	4b3e      	ldr	r3, [pc, #248]	@ (8004224 <xPortStartScheduler+0x124>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a3f      	ldr	r2, [pc, #252]	@ (800422c <xPortStartScheduler+0x12c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d10b      	bne.n	800414a <xPortStartScheduler+0x4a>
	__asm volatile
 8004132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004136:	f383 8811 	msr	BASEPRI, r3
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	60fb      	str	r3, [r7, #12]
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop
 8004148:	e7fd      	b.n	8004146 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800414a:	4b39      	ldr	r3, [pc, #228]	@ (8004230 <xPortStartScheduler+0x130>)
 800414c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	b2db      	uxtb	r3, r3
 8004154:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	22ff      	movs	r2, #255	@ 0xff
 800415a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800416c:	b2da      	uxtb	r2, r3
 800416e:	4b31      	ldr	r3, [pc, #196]	@ (8004234 <xPortStartScheduler+0x134>)
 8004170:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004172:	4b31      	ldr	r3, [pc, #196]	@ (8004238 <xPortStartScheduler+0x138>)
 8004174:	2207      	movs	r2, #7
 8004176:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004178:	e009      	b.n	800418e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800417a:	4b2f      	ldr	r3, [pc, #188]	@ (8004238 <xPortStartScheduler+0x138>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3b01      	subs	r3, #1
 8004180:	4a2d      	ldr	r2, [pc, #180]	@ (8004238 <xPortStartScheduler+0x138>)
 8004182:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	b2db      	uxtb	r3, r3
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	b2db      	uxtb	r3, r3
 800418c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800418e:	78fb      	ldrb	r3, [r7, #3]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004196:	2b80      	cmp	r3, #128	@ 0x80
 8004198:	d0ef      	beq.n	800417a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800419a:	4b27      	ldr	r3, [pc, #156]	@ (8004238 <xPortStartScheduler+0x138>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f1c3 0307 	rsb	r3, r3, #7
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d00b      	beq.n	80041be <xPortStartScheduler+0xbe>
	__asm volatile
 80041a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041aa:	f383 8811 	msr	BASEPRI, r3
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	f3bf 8f4f 	dsb	sy
 80041b6:	60bb      	str	r3, [r7, #8]
}
 80041b8:	bf00      	nop
 80041ba:	bf00      	nop
 80041bc:	e7fd      	b.n	80041ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041be:	4b1e      	ldr	r3, [pc, #120]	@ (8004238 <xPortStartScheduler+0x138>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	021b      	lsls	r3, r3, #8
 80041c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004238 <xPortStartScheduler+0x138>)
 80041c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004238 <xPortStartScheduler+0x138>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80041d0:	4a19      	ldr	r2, [pc, #100]	@ (8004238 <xPortStartScheduler+0x138>)
 80041d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80041dc:	4b17      	ldr	r3, [pc, #92]	@ (800423c <xPortStartScheduler+0x13c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a16      	ldr	r2, [pc, #88]	@ (800423c <xPortStartScheduler+0x13c>)
 80041e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80041e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80041e8:	4b14      	ldr	r3, [pc, #80]	@ (800423c <xPortStartScheduler+0x13c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a13      	ldr	r2, [pc, #76]	@ (800423c <xPortStartScheduler+0x13c>)
 80041ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80041f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80041f4:	f000 f8da 	bl	80043ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80041f8:	4b11      	ldr	r3, [pc, #68]	@ (8004240 <xPortStartScheduler+0x140>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80041fe:	f000 f8f9 	bl	80043f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004202:	4b10      	ldr	r3, [pc, #64]	@ (8004244 <xPortStartScheduler+0x144>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a0f      	ldr	r2, [pc, #60]	@ (8004244 <xPortStartScheduler+0x144>)
 8004208:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800420c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800420e:	f7ff ff63 	bl	80040d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004212:	f7fe ffc3 	bl	800319c <vTaskSwitchContext>
	prvTaskExitError();
 8004216:	f7ff ff19 	bl	800404c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	e000ed00 	.word	0xe000ed00
 8004228:	410fc271 	.word	0x410fc271
 800422c:	410fc270 	.word	0x410fc270
 8004230:	e000e400 	.word	0xe000e400
 8004234:	20000a80 	.word	0x20000a80
 8004238:	20000a84 	.word	0x20000a84
 800423c:	e000ed20 	.word	0xe000ed20
 8004240:	2000000c 	.word	0x2000000c
 8004244:	e000ef34 	.word	0xe000ef34

08004248 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
	__asm volatile
 800424e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	607b      	str	r3, [r7, #4]
}
 8004260:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004262:	4b10      	ldr	r3, [pc, #64]	@ (80042a4 <vPortEnterCritical+0x5c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3301      	adds	r3, #1
 8004268:	4a0e      	ldr	r2, [pc, #56]	@ (80042a4 <vPortEnterCritical+0x5c>)
 800426a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800426c:	4b0d      	ldr	r3, [pc, #52]	@ (80042a4 <vPortEnterCritical+0x5c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d110      	bne.n	8004296 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004274:	4b0c      	ldr	r3, [pc, #48]	@ (80042a8 <vPortEnterCritical+0x60>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00b      	beq.n	8004296 <vPortEnterCritical+0x4e>
	__asm volatile
 800427e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	603b      	str	r3, [r7, #0]
}
 8004290:	bf00      	nop
 8004292:	bf00      	nop
 8004294:	e7fd      	b.n	8004292 <vPortEnterCritical+0x4a>
	}
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	2000000c 	.word	0x2000000c
 80042a8:	e000ed04 	.word	0xe000ed04

080042ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80042b2:	4b12      	ldr	r3, [pc, #72]	@ (80042fc <vPortExitCritical+0x50>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10b      	bne.n	80042d2 <vPortExitCritical+0x26>
	__asm volatile
 80042ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042be:	f383 8811 	msr	BASEPRI, r3
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	607b      	str	r3, [r7, #4]
}
 80042cc:	bf00      	nop
 80042ce:	bf00      	nop
 80042d0:	e7fd      	b.n	80042ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80042d2:	4b0a      	ldr	r3, [pc, #40]	@ (80042fc <vPortExitCritical+0x50>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	4a08      	ldr	r2, [pc, #32]	@ (80042fc <vPortExitCritical+0x50>)
 80042da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80042dc:	4b07      	ldr	r3, [pc, #28]	@ (80042fc <vPortExitCritical+0x50>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d105      	bne.n	80042f0 <vPortExitCritical+0x44>
 80042e4:	2300      	movs	r3, #0
 80042e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	f383 8811 	msr	BASEPRI, r3
}
 80042ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	2000000c 	.word	0x2000000c

08004300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004300:	f3ef 8009 	mrs	r0, PSP
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	4b15      	ldr	r3, [pc, #84]	@ (8004360 <pxCurrentTCBConst>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	f01e 0f10 	tst.w	lr, #16
 8004310:	bf08      	it	eq
 8004312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800431a:	6010      	str	r0, [r2, #0]
 800431c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004320:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004324:	f380 8811 	msr	BASEPRI, r0
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f7fe ff34 	bl	800319c <vTaskSwitchContext>
 8004334:	f04f 0000 	mov.w	r0, #0
 8004338:	f380 8811 	msr	BASEPRI, r0
 800433c:	bc09      	pop	{r0, r3}
 800433e:	6819      	ldr	r1, [r3, #0]
 8004340:	6808      	ldr	r0, [r1, #0]
 8004342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004346:	f01e 0f10 	tst.w	lr, #16
 800434a:	bf08      	it	eq
 800434c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004350:	f380 8809 	msr	PSP, r0
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	f3af 8000 	nop.w

08004360 <pxCurrentTCBConst>:
 8004360:	20000858 	.word	0x20000858
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004364:	bf00      	nop
 8004366:	bf00      	nop

08004368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
	__asm volatile
 800436e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	607b      	str	r3, [r7, #4]
}
 8004380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004382:	f7fe fe51 	bl	8003028 <xTaskIncrementTick>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800438c:	4b06      	ldr	r3, [pc, #24]	@ (80043a8 <SysTick_Handler+0x40>)
 800438e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	2300      	movs	r3, #0
 8004396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	f383 8811 	msr	BASEPRI, r3
}
 800439e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80043a0:	bf00      	nop
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	e000ed04 	.word	0xe000ed04

080043ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043b0:	4b0b      	ldr	r3, [pc, #44]	@ (80043e0 <vPortSetupTimerInterrupt+0x34>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043b6:	4b0b      	ldr	r3, [pc, #44]	@ (80043e4 <vPortSetupTimerInterrupt+0x38>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043bc:	4b0a      	ldr	r3, [pc, #40]	@ (80043e8 <vPortSetupTimerInterrupt+0x3c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a0a      	ldr	r2, [pc, #40]	@ (80043ec <vPortSetupTimerInterrupt+0x40>)
 80043c2:	fba2 2303 	umull	r2, r3, r2, r3
 80043c6:	099b      	lsrs	r3, r3, #6
 80043c8:	4a09      	ldr	r2, [pc, #36]	@ (80043f0 <vPortSetupTimerInterrupt+0x44>)
 80043ca:	3b01      	subs	r3, #1
 80043cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043ce:	4b04      	ldr	r3, [pc, #16]	@ (80043e0 <vPortSetupTimerInterrupt+0x34>)
 80043d0:	2207      	movs	r2, #7
 80043d2:	601a      	str	r2, [r3, #0]
}
 80043d4:	bf00      	nop
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	e000e010 	.word	0xe000e010
 80043e4:	e000e018 	.word	0xe000e018
 80043e8:	20000000 	.word	0x20000000
 80043ec:	10624dd3 	.word	0x10624dd3
 80043f0:	e000e014 	.word	0xe000e014

080043f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80043f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004404 <vPortEnableVFP+0x10>
 80043f8:	6801      	ldr	r1, [r0, #0]
 80043fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80043fe:	6001      	str	r1, [r0, #0]
 8004400:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004402:	bf00      	nop
 8004404:	e000ed88 	.word	0xe000ed88

08004408 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800440e:	f3ef 8305 	mrs	r3, IPSR
 8004412:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b0f      	cmp	r3, #15
 8004418:	d915      	bls.n	8004446 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800441a:	4a18      	ldr	r2, [pc, #96]	@ (800447c <vPortValidateInterruptPriority+0x74>)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4413      	add	r3, r2
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004424:	4b16      	ldr	r3, [pc, #88]	@ (8004480 <vPortValidateInterruptPriority+0x78>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	7afa      	ldrb	r2, [r7, #11]
 800442a:	429a      	cmp	r2, r3
 800442c:	d20b      	bcs.n	8004446 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800442e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	607b      	str	r3, [r7, #4]
}
 8004440:	bf00      	nop
 8004442:	bf00      	nop
 8004444:	e7fd      	b.n	8004442 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004446:	4b0f      	ldr	r3, [pc, #60]	@ (8004484 <vPortValidateInterruptPriority+0x7c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800444e:	4b0e      	ldr	r3, [pc, #56]	@ (8004488 <vPortValidateInterruptPriority+0x80>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d90b      	bls.n	800446e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	603b      	str	r3, [r7, #0]
}
 8004468:	bf00      	nop
 800446a:	bf00      	nop
 800446c:	e7fd      	b.n	800446a <vPortValidateInterruptPriority+0x62>
	}
 800446e:	bf00      	nop
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	e000e3f0 	.word	0xe000e3f0
 8004480:	20000a80 	.word	0x20000a80
 8004484:	e000ed0c 	.word	0xe000ed0c
 8004488:	20000a84 	.word	0x20000a84

0800448c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08a      	sub	sp, #40	@ 0x28
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004494:	2300      	movs	r3, #0
 8004496:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004498:	f7fe fd0a 	bl	8002eb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800449c:	4b5c      	ldr	r3, [pc, #368]	@ (8004610 <pvPortMalloc+0x184>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80044a4:	f000 f924 	bl	80046f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80044a8:	4b5a      	ldr	r3, [pc, #360]	@ (8004614 <pvPortMalloc+0x188>)
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4013      	ands	r3, r2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f040 8095 	bne.w	80045e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01e      	beq.n	80044fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80044bc:	2208      	movs	r2, #8
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4413      	add	r3, r2
 80044c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d015      	beq.n	80044fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f023 0307 	bic.w	r3, r3, #7
 80044d4:	3308      	adds	r3, #8
 80044d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00b      	beq.n	80044fa <pvPortMalloc+0x6e>
	__asm volatile
 80044e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e6:	f383 8811 	msr	BASEPRI, r3
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	617b      	str	r3, [r7, #20]
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop
 80044f8:	e7fd      	b.n	80044f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d06f      	beq.n	80045e0 <pvPortMalloc+0x154>
 8004500:	4b45      	ldr	r3, [pc, #276]	@ (8004618 <pvPortMalloc+0x18c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	429a      	cmp	r2, r3
 8004508:	d86a      	bhi.n	80045e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800450a:	4b44      	ldr	r3, [pc, #272]	@ (800461c <pvPortMalloc+0x190>)
 800450c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800450e:	4b43      	ldr	r3, [pc, #268]	@ (800461c <pvPortMalloc+0x190>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004514:	e004      	b.n	8004520 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800451a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	429a      	cmp	r2, r3
 8004528:	d903      	bls.n	8004532 <pvPortMalloc+0xa6>
 800452a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f1      	bne.n	8004516 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004532:	4b37      	ldr	r3, [pc, #220]	@ (8004610 <pvPortMalloc+0x184>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004538:	429a      	cmp	r2, r3
 800453a:	d051      	beq.n	80045e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2208      	movs	r2, #8
 8004542:	4413      	add	r3, r2
 8004544:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800454e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	1ad2      	subs	r2, r2, r3
 8004556:	2308      	movs	r3, #8
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	429a      	cmp	r2, r3
 800455c:	d920      	bls.n	80045a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800455e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4413      	add	r3, r2
 8004564:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00b      	beq.n	8004588 <pvPortMalloc+0xfc>
	__asm volatile
 8004570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	613b      	str	r3, [r7, #16]
}
 8004582:	bf00      	nop
 8004584:	bf00      	nop
 8004586:	e7fd      	b.n	8004584 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	1ad2      	subs	r2, r2, r3
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800459a:	69b8      	ldr	r0, [r7, #24]
 800459c:	f000 f90a 	bl	80047b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004618 <pvPortMalloc+0x18c>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004618 <pvPortMalloc+0x18c>)
 80045ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004618 <pvPortMalloc+0x18c>)
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004620 <pvPortMalloc+0x194>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d203      	bcs.n	80045c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045ba:	4b17      	ldr	r3, [pc, #92]	@ (8004618 <pvPortMalloc+0x18c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a18      	ldr	r2, [pc, #96]	@ (8004620 <pvPortMalloc+0x194>)
 80045c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	4b13      	ldr	r3, [pc, #76]	@ (8004614 <pvPortMalloc+0x188>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80045d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80045d6:	4b13      	ldr	r3, [pc, #76]	@ (8004624 <pvPortMalloc+0x198>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3301      	adds	r3, #1
 80045dc:	4a11      	ldr	r2, [pc, #68]	@ (8004624 <pvPortMalloc+0x198>)
 80045de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80045e0:	f7fe fc74 	bl	8002ecc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00b      	beq.n	8004606 <pvPortMalloc+0x17a>
	__asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	60fb      	str	r3, [r7, #12]
}
 8004600:	bf00      	nop
 8004602:	bf00      	nop
 8004604:	e7fd      	b.n	8004602 <pvPortMalloc+0x176>
	return pvReturn;
 8004606:	69fb      	ldr	r3, [r7, #28]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3728      	adds	r7, #40	@ 0x28
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	20004690 	.word	0x20004690
 8004614:	200046a4 	.word	0x200046a4
 8004618:	20004694 	.word	0x20004694
 800461c:	20004688 	.word	0x20004688
 8004620:	20004698 	.word	0x20004698
 8004624:	2000469c 	.word	0x2000469c

08004628 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d04f      	beq.n	80046da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800463a:	2308      	movs	r3, #8
 800463c:	425b      	negs	r3, r3
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	4413      	add	r3, r2
 8004642:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	4b25      	ldr	r3, [pc, #148]	@ (80046e4 <vPortFree+0xbc>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4013      	ands	r3, r2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10b      	bne.n	800466e <vPortFree+0x46>
	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	60fb      	str	r3, [r7, #12]
}
 8004668:	bf00      	nop
 800466a:	bf00      	nop
 800466c:	e7fd      	b.n	800466a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00b      	beq.n	800468e <vPortFree+0x66>
	__asm volatile
 8004676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800467a:	f383 8811 	msr	BASEPRI, r3
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	60bb      	str	r3, [r7, #8]
}
 8004688:	bf00      	nop
 800468a:	bf00      	nop
 800468c:	e7fd      	b.n	800468a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	4b14      	ldr	r3, [pc, #80]	@ (80046e4 <vPortFree+0xbc>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4013      	ands	r3, r2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d01e      	beq.n	80046da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d11a      	bne.n	80046da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	4b0e      	ldr	r3, [pc, #56]	@ (80046e4 <vPortFree+0xbc>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	43db      	mvns	r3, r3
 80046ae:	401a      	ands	r2, r3
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80046b4:	f7fe fbfc 	bl	8002eb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	4b0a      	ldr	r3, [pc, #40]	@ (80046e8 <vPortFree+0xc0>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4413      	add	r3, r2
 80046c2:	4a09      	ldr	r2, [pc, #36]	@ (80046e8 <vPortFree+0xc0>)
 80046c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046c6:	6938      	ldr	r0, [r7, #16]
 80046c8:	f000 f874 	bl	80047b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80046cc:	4b07      	ldr	r3, [pc, #28]	@ (80046ec <vPortFree+0xc4>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3301      	adds	r3, #1
 80046d2:	4a06      	ldr	r2, [pc, #24]	@ (80046ec <vPortFree+0xc4>)
 80046d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80046d6:	f7fe fbf9 	bl	8002ecc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80046da:	bf00      	nop
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	200046a4 	.word	0x200046a4
 80046e8:	20004694 	.word	0x20004694
 80046ec:	200046a0 	.word	0x200046a0

080046f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80046f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80046fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80046fc:	4b27      	ldr	r3, [pc, #156]	@ (800479c <prvHeapInit+0xac>)
 80046fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00c      	beq.n	8004724 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	3307      	adds	r3, #7
 800470e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 0307 	bic.w	r3, r3, #7
 8004716:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	4a1f      	ldr	r2, [pc, #124]	@ (800479c <prvHeapInit+0xac>)
 8004720:	4413      	add	r3, r2
 8004722:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004728:	4a1d      	ldr	r2, [pc, #116]	@ (80047a0 <prvHeapInit+0xb0>)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800472e:	4b1c      	ldr	r3, [pc, #112]	@ (80047a0 <prvHeapInit+0xb0>)
 8004730:	2200      	movs	r2, #0
 8004732:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	4413      	add	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800473c:	2208      	movs	r2, #8
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	1a9b      	subs	r3, r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0307 	bic.w	r3, r3, #7
 800474a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4a15      	ldr	r2, [pc, #84]	@ (80047a4 <prvHeapInit+0xb4>)
 8004750:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004752:	4b14      	ldr	r3, [pc, #80]	@ (80047a4 <prvHeapInit+0xb4>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2200      	movs	r2, #0
 8004758:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800475a:	4b12      	ldr	r3, [pc, #72]	@ (80047a4 <prvHeapInit+0xb4>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	1ad2      	subs	r2, r2, r3
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004770:	4b0c      	ldr	r3, [pc, #48]	@ (80047a4 <prvHeapInit+0xb4>)
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	4a0a      	ldr	r2, [pc, #40]	@ (80047a8 <prvHeapInit+0xb8>)
 800477e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	4a09      	ldr	r2, [pc, #36]	@ (80047ac <prvHeapInit+0xbc>)
 8004786:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004788:	4b09      	ldr	r3, [pc, #36]	@ (80047b0 <prvHeapInit+0xc0>)
 800478a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800478e:	601a      	str	r2, [r3, #0]
}
 8004790:	bf00      	nop
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	20000a88 	.word	0x20000a88
 80047a0:	20004688 	.word	0x20004688
 80047a4:	20004690 	.word	0x20004690
 80047a8:	20004698 	.word	0x20004698
 80047ac:	20004694 	.word	0x20004694
 80047b0:	200046a4 	.word	0x200046a4

080047b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047bc:	4b28      	ldr	r3, [pc, #160]	@ (8004860 <prvInsertBlockIntoFreeList+0xac>)
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	e002      	b.n	80047c8 <prvInsertBlockIntoFreeList+0x14>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d8f7      	bhi.n	80047c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	4413      	add	r3, r2
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d108      	bne.n	80047f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	441a      	add	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	441a      	add	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d118      	bne.n	800483c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	4b15      	ldr	r3, [pc, #84]	@ (8004864 <prvInsertBlockIntoFreeList+0xb0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d00d      	beq.n	8004832 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	441a      	add	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	e008      	b.n	8004844 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004832:	4b0c      	ldr	r3, [pc, #48]	@ (8004864 <prvInsertBlockIntoFreeList+0xb0>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	e003      	b.n	8004844 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	429a      	cmp	r2, r3
 800484a:	d002      	beq.n	8004852 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004852:	bf00      	nop
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	20004688 	.word	0x20004688
 8004864:	20004690 	.word	0x20004690

08004868 <memset>:
 8004868:	4402      	add	r2, r0
 800486a:	4603      	mov	r3, r0
 800486c:	4293      	cmp	r3, r2
 800486e:	d100      	bne.n	8004872 <memset+0xa>
 8004870:	4770      	bx	lr
 8004872:	f803 1b01 	strb.w	r1, [r3], #1
 8004876:	e7f9      	b.n	800486c <memset+0x4>

08004878 <_reclaim_reent>:
 8004878:	4b29      	ldr	r3, [pc, #164]	@ (8004920 <_reclaim_reent+0xa8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4283      	cmp	r3, r0
 800487e:	b570      	push	{r4, r5, r6, lr}
 8004880:	4604      	mov	r4, r0
 8004882:	d04b      	beq.n	800491c <_reclaim_reent+0xa4>
 8004884:	69c3      	ldr	r3, [r0, #28]
 8004886:	b1ab      	cbz	r3, 80048b4 <_reclaim_reent+0x3c>
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	b16b      	cbz	r3, 80048a8 <_reclaim_reent+0x30>
 800488c:	2500      	movs	r5, #0
 800488e:	69e3      	ldr	r3, [r4, #28]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	5959      	ldr	r1, [r3, r5]
 8004894:	2900      	cmp	r1, #0
 8004896:	d13b      	bne.n	8004910 <_reclaim_reent+0x98>
 8004898:	3504      	adds	r5, #4
 800489a:	2d80      	cmp	r5, #128	@ 0x80
 800489c:	d1f7      	bne.n	800488e <_reclaim_reent+0x16>
 800489e:	69e3      	ldr	r3, [r4, #28]
 80048a0:	4620      	mov	r0, r4
 80048a2:	68d9      	ldr	r1, [r3, #12]
 80048a4:	f000 f872 	bl	800498c <_free_r>
 80048a8:	69e3      	ldr	r3, [r4, #28]
 80048aa:	6819      	ldr	r1, [r3, #0]
 80048ac:	b111      	cbz	r1, 80048b4 <_reclaim_reent+0x3c>
 80048ae:	4620      	mov	r0, r4
 80048b0:	f000 f86c 	bl	800498c <_free_r>
 80048b4:	6961      	ldr	r1, [r4, #20]
 80048b6:	b111      	cbz	r1, 80048be <_reclaim_reent+0x46>
 80048b8:	4620      	mov	r0, r4
 80048ba:	f000 f867 	bl	800498c <_free_r>
 80048be:	69e1      	ldr	r1, [r4, #28]
 80048c0:	b111      	cbz	r1, 80048c8 <_reclaim_reent+0x50>
 80048c2:	4620      	mov	r0, r4
 80048c4:	f000 f862 	bl	800498c <_free_r>
 80048c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80048ca:	b111      	cbz	r1, 80048d2 <_reclaim_reent+0x5a>
 80048cc:	4620      	mov	r0, r4
 80048ce:	f000 f85d 	bl	800498c <_free_r>
 80048d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80048d4:	b111      	cbz	r1, 80048dc <_reclaim_reent+0x64>
 80048d6:	4620      	mov	r0, r4
 80048d8:	f000 f858 	bl	800498c <_free_r>
 80048dc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80048de:	b111      	cbz	r1, 80048e6 <_reclaim_reent+0x6e>
 80048e0:	4620      	mov	r0, r4
 80048e2:	f000 f853 	bl	800498c <_free_r>
 80048e6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80048e8:	b111      	cbz	r1, 80048f0 <_reclaim_reent+0x78>
 80048ea:	4620      	mov	r0, r4
 80048ec:	f000 f84e 	bl	800498c <_free_r>
 80048f0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80048f2:	b111      	cbz	r1, 80048fa <_reclaim_reent+0x82>
 80048f4:	4620      	mov	r0, r4
 80048f6:	f000 f849 	bl	800498c <_free_r>
 80048fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80048fc:	b111      	cbz	r1, 8004904 <_reclaim_reent+0x8c>
 80048fe:	4620      	mov	r0, r4
 8004900:	f000 f844 	bl	800498c <_free_r>
 8004904:	6a23      	ldr	r3, [r4, #32]
 8004906:	b14b      	cbz	r3, 800491c <_reclaim_reent+0xa4>
 8004908:	4620      	mov	r0, r4
 800490a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800490e:	4718      	bx	r3
 8004910:	680e      	ldr	r6, [r1, #0]
 8004912:	4620      	mov	r0, r4
 8004914:	f000 f83a 	bl	800498c <_free_r>
 8004918:	4631      	mov	r1, r6
 800491a:	e7bb      	b.n	8004894 <_reclaim_reent+0x1c>
 800491c:	bd70      	pop	{r4, r5, r6, pc}
 800491e:	bf00      	nop
 8004920:	20000010 	.word	0x20000010

08004924 <__libc_init_array>:
 8004924:	b570      	push	{r4, r5, r6, lr}
 8004926:	4d0d      	ldr	r5, [pc, #52]	@ (800495c <__libc_init_array+0x38>)
 8004928:	4c0d      	ldr	r4, [pc, #52]	@ (8004960 <__libc_init_array+0x3c>)
 800492a:	1b64      	subs	r4, r4, r5
 800492c:	10a4      	asrs	r4, r4, #2
 800492e:	2600      	movs	r6, #0
 8004930:	42a6      	cmp	r6, r4
 8004932:	d109      	bne.n	8004948 <__libc_init_array+0x24>
 8004934:	4d0b      	ldr	r5, [pc, #44]	@ (8004964 <__libc_init_array+0x40>)
 8004936:	4c0c      	ldr	r4, [pc, #48]	@ (8004968 <__libc_init_array+0x44>)
 8004938:	f000 f87e 	bl	8004a38 <_init>
 800493c:	1b64      	subs	r4, r4, r5
 800493e:	10a4      	asrs	r4, r4, #2
 8004940:	2600      	movs	r6, #0
 8004942:	42a6      	cmp	r6, r4
 8004944:	d105      	bne.n	8004952 <__libc_init_array+0x2e>
 8004946:	bd70      	pop	{r4, r5, r6, pc}
 8004948:	f855 3b04 	ldr.w	r3, [r5], #4
 800494c:	4798      	blx	r3
 800494e:	3601      	adds	r6, #1
 8004950:	e7ee      	b.n	8004930 <__libc_init_array+0xc>
 8004952:	f855 3b04 	ldr.w	r3, [r5], #4
 8004956:	4798      	blx	r3
 8004958:	3601      	adds	r6, #1
 800495a:	e7f2      	b.n	8004942 <__libc_init_array+0x1e>
 800495c:	08004aa8 	.word	0x08004aa8
 8004960:	08004aa8 	.word	0x08004aa8
 8004964:	08004aa8 	.word	0x08004aa8
 8004968:	08004aac 	.word	0x08004aac

0800496c <__retarget_lock_acquire_recursive>:
 800496c:	4770      	bx	lr

0800496e <__retarget_lock_release_recursive>:
 800496e:	4770      	bx	lr

08004970 <memcpy>:
 8004970:	440a      	add	r2, r1
 8004972:	4291      	cmp	r1, r2
 8004974:	f100 33ff 	add.w	r3, r0, #4294967295
 8004978:	d100      	bne.n	800497c <memcpy+0xc>
 800497a:	4770      	bx	lr
 800497c:	b510      	push	{r4, lr}
 800497e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004982:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004986:	4291      	cmp	r1, r2
 8004988:	d1f9      	bne.n	800497e <memcpy+0xe>
 800498a:	bd10      	pop	{r4, pc}

0800498c <_free_r>:
 800498c:	b538      	push	{r3, r4, r5, lr}
 800498e:	4605      	mov	r5, r0
 8004990:	2900      	cmp	r1, #0
 8004992:	d041      	beq.n	8004a18 <_free_r+0x8c>
 8004994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004998:	1f0c      	subs	r4, r1, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	bfb8      	it	lt
 800499e:	18e4      	addlt	r4, r4, r3
 80049a0:	f000 f83e 	bl	8004a20 <__malloc_lock>
 80049a4:	4a1d      	ldr	r2, [pc, #116]	@ (8004a1c <_free_r+0x90>)
 80049a6:	6813      	ldr	r3, [r2, #0]
 80049a8:	b933      	cbnz	r3, 80049b8 <_free_r+0x2c>
 80049aa:	6063      	str	r3, [r4, #4]
 80049ac:	6014      	str	r4, [r2, #0]
 80049ae:	4628      	mov	r0, r5
 80049b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049b4:	f000 b83a 	b.w	8004a2c <__malloc_unlock>
 80049b8:	42a3      	cmp	r3, r4
 80049ba:	d908      	bls.n	80049ce <_free_r+0x42>
 80049bc:	6820      	ldr	r0, [r4, #0]
 80049be:	1821      	adds	r1, r4, r0
 80049c0:	428b      	cmp	r3, r1
 80049c2:	bf01      	itttt	eq
 80049c4:	6819      	ldreq	r1, [r3, #0]
 80049c6:	685b      	ldreq	r3, [r3, #4]
 80049c8:	1809      	addeq	r1, r1, r0
 80049ca:	6021      	streq	r1, [r4, #0]
 80049cc:	e7ed      	b.n	80049aa <_free_r+0x1e>
 80049ce:	461a      	mov	r2, r3
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	b10b      	cbz	r3, 80049d8 <_free_r+0x4c>
 80049d4:	42a3      	cmp	r3, r4
 80049d6:	d9fa      	bls.n	80049ce <_free_r+0x42>
 80049d8:	6811      	ldr	r1, [r2, #0]
 80049da:	1850      	adds	r0, r2, r1
 80049dc:	42a0      	cmp	r0, r4
 80049de:	d10b      	bne.n	80049f8 <_free_r+0x6c>
 80049e0:	6820      	ldr	r0, [r4, #0]
 80049e2:	4401      	add	r1, r0
 80049e4:	1850      	adds	r0, r2, r1
 80049e6:	4283      	cmp	r3, r0
 80049e8:	6011      	str	r1, [r2, #0]
 80049ea:	d1e0      	bne.n	80049ae <_free_r+0x22>
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	6053      	str	r3, [r2, #4]
 80049f2:	4408      	add	r0, r1
 80049f4:	6010      	str	r0, [r2, #0]
 80049f6:	e7da      	b.n	80049ae <_free_r+0x22>
 80049f8:	d902      	bls.n	8004a00 <_free_r+0x74>
 80049fa:	230c      	movs	r3, #12
 80049fc:	602b      	str	r3, [r5, #0]
 80049fe:	e7d6      	b.n	80049ae <_free_r+0x22>
 8004a00:	6820      	ldr	r0, [r4, #0]
 8004a02:	1821      	adds	r1, r4, r0
 8004a04:	428b      	cmp	r3, r1
 8004a06:	bf04      	itt	eq
 8004a08:	6819      	ldreq	r1, [r3, #0]
 8004a0a:	685b      	ldreq	r3, [r3, #4]
 8004a0c:	6063      	str	r3, [r4, #4]
 8004a0e:	bf04      	itt	eq
 8004a10:	1809      	addeq	r1, r1, r0
 8004a12:	6021      	streq	r1, [r4, #0]
 8004a14:	6054      	str	r4, [r2, #4]
 8004a16:	e7ca      	b.n	80049ae <_free_r+0x22>
 8004a18:	bd38      	pop	{r3, r4, r5, pc}
 8004a1a:	bf00      	nop
 8004a1c:	200047e4 	.word	0x200047e4

08004a20 <__malloc_lock>:
 8004a20:	4801      	ldr	r0, [pc, #4]	@ (8004a28 <__malloc_lock+0x8>)
 8004a22:	f7ff bfa3 	b.w	800496c <__retarget_lock_acquire_recursive>
 8004a26:	bf00      	nop
 8004a28:	200047e0 	.word	0x200047e0

08004a2c <__malloc_unlock>:
 8004a2c:	4801      	ldr	r0, [pc, #4]	@ (8004a34 <__malloc_unlock+0x8>)
 8004a2e:	f7ff bf9e 	b.w	800496e <__retarget_lock_release_recursive>
 8004a32:	bf00      	nop
 8004a34:	200047e0 	.word	0x200047e0

08004a38 <_init>:
 8004a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3a:	bf00      	nop
 8004a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3e:	bc08      	pop	{r3}
 8004a40:	469e      	mov	lr, r3
 8004a42:	4770      	bx	lr

08004a44 <_fini>:
 8004a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a46:	bf00      	nop
 8004a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a4a:	bc08      	pop	{r3}
 8004a4c:	469e      	mov	lr, r3
 8004a4e:	4770      	bx	lr
