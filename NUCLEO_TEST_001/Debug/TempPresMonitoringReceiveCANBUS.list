
TempPresMonitoringReceiveCANBUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003658  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080037ec  080037ec  000047ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800381c  0800381c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  0800381c  0800381c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800381c  0800381c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800381c  0800381c  0000481c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003820  08003820  00004820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003824  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000b8  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000c4  200000c4  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000757d  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016b0  00000000  00000000  0000c5b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f0  00000000  00000000  0000dc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000524  00000000  00000000  0000e360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ee1d  00000000  00000000  0000e884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008a46  00000000  00000000  0002d6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba277  00000000  00000000  000360e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f035e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ab0  00000000  00000000  000f03a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  000f1e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080037d4 	.word	0x080037d4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080037d4 	.word	0x080037d4

080001d4 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* CAN 통신 초기화  */
int CANSPI_Initialize(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b088      	sub	sp, #32
 80001d8:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 80001da:	2300      	movs	r3, #0
 80001dc:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 80001de:	2300      	movs	r3, #0
 80001e0:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 80001e2:	2300      	movs	r3, #0
 80001e4:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 80001e6:	2300      	movs	r3, #0
 80001e8:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 80001ea:	2300      	movs	r3, #0
 80001ec:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 80001ee:	2300      	movs	r3, #0
 80001f0:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 80001f2:	2300      	movs	r3, #0
 80001f4:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 80001f6:	2300      	movs	r3, #0
 80001f8:	70fb      	strb	r3, [r7, #3]

  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;
 80001fa:	2300      	movs	r3, #0
 80001fc:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 80001fe:	2300      	movs	r3, #0
 8000200:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 8000202:	2300      	movs	r3, #0
 8000204:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 8000206:	2300      	movs	r3, #0
 8000208:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 800020a:	2300      	movs	r3, #0
 800020c:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 800020e:	2308      	movs	r3, #8
 8000210:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8000212:	2300      	movs	r3, #0
 8000214:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 8000216:	2300      	movs	r3, #0
 8000218:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 800021a:	2300      	movs	r3, #0
 800021c:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 800021e:	2300      	movs	r3, #0
 8000220:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000222:	2300      	movs	r3, #0
 8000224:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 8000226:	2300      	movs	r3, #0
 8000228:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 800022a:	2300      	movs	r3, #0
 800022c:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 800022e:	2300      	movs	r3, #0
 8000230:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000232:	2300      	movs	r3, #0
 8000234:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 8000236:	2300      	movs	r3, #0
 8000238:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 800023a:	2300      	movs	r3, #0
 800023c:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 800023e:	2300      	movs	r3, #0
 8000240:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000242:	2300      	movs	r3, #0
 8000244:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8000246:	2300      	movs	r3, #0
 8000248:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 800024a:	2300      	movs	r3, #0
 800024c:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 800024e:	2308      	movs	r3, #8
 8000250:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000252:	2300      	movs	r3, #0
 8000254:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8000256:	2300      	movs	r3, #0
 8000258:	72fb      	strb	r3, [r7, #11]

  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize())
 800025a:	f000 fa13 	bl	8000684 <MCP2515_Initialize>
 800025e:	4603      	mov	r3, r0
 8000260:	f083 0301 	eor.w	r3, r3, #1
 8000264:	b2db      	uxtb	r3, r3
 8000266:	2b00      	cmp	r3, #0
 8000268:	d002      	beq.n	8000270 <CANSPI_Initialize+0x9c>
    return -1;
 800026a:	f04f 33ff 	mov.w	r3, #4294967295
 800026e:	e060      	b.n	8000332 <CANSPI_Initialize+0x15e>

  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode())
 8000270:	f000 fa28 	bl	80006c4 <MCP2515_SetConfigMode>
 8000274:	4603      	mov	r3, r0
 8000276:	f083 0301 	eor.w	r3, r3, #1
 800027a:	b2db      	uxtb	r3, r3
 800027c:	2b00      	cmp	r3, #0
 800027e:	d002      	beq.n	8000286 <CANSPI_Initialize+0xb2>
    return -2;
 8000280:	f06f 0301 	mvn.w	r3, #1
 8000284:	e055      	b.n	8000332 <CANSPI_Initialize+0x15e>

  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	461a      	mov	r2, r3
 800028a:	2123      	movs	r1, #35	@ 0x23
 800028c:	2020      	movs	r0, #32
 800028e:	f000 faba 	bl	8000806 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000292:	463b      	mov	r3, r7
 8000294:	461a      	mov	r2, r3
 8000296:	2127      	movs	r1, #39	@ 0x27
 8000298:	2024      	movs	r0, #36	@ 0x24
 800029a:	f000 fab4 	bl	8000806 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800029e:	f107 031c 	add.w	r3, r7, #28
 80002a2:	461a      	mov	r2, r3
 80002a4:	2103      	movs	r1, #3
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 faad 	bl	8000806 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80002ac:	f107 0318 	add.w	r3, r7, #24
 80002b0:	461a      	mov	r2, r3
 80002b2:	2107      	movs	r1, #7
 80002b4:	2004      	movs	r0, #4
 80002b6:	f000 faa6 	bl	8000806 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80002ba:	f107 0314 	add.w	r3, r7, #20
 80002be:	461a      	mov	r2, r3
 80002c0:	210b      	movs	r1, #11
 80002c2:	2008      	movs	r0, #8
 80002c4:	f000 fa9f 	bl	8000806 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80002c8:	f107 0310 	add.w	r3, r7, #16
 80002cc:	461a      	mov	r2, r3
 80002ce:	2113      	movs	r1, #19
 80002d0:	2010      	movs	r0, #16
 80002d2:	f000 fa98 	bl	8000806 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80002d6:	f107 030c 	add.w	r3, r7, #12
 80002da:	461a      	mov	r2, r3
 80002dc:	2117      	movs	r1, #23
 80002de:	2014      	movs	r0, #20
 80002e0:	f000 fa91 	bl	8000806 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 80002e4:	f107 0308 	add.w	r3, r7, #8
 80002e8:	461a      	mov	r2, r3
 80002ea:	211b      	movs	r1, #27
 80002ec:	2018      	movs	r0, #24
 80002ee:	f000 fa8a 	bl	8000806 <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 80002f2:	2104      	movs	r1, #4
 80002f4:	2060      	movs	r0, #96	@ 0x60
 80002f6:	f000 fa63 	bl	80007c0 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 80002fa:	2101      	movs	r1, #1
 80002fc:	2070      	movs	r0, #112	@ 0x70
 80002fe:	f000 fa5f 	bl	80007c0 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8000302:	2100      	movs	r1, #0
 8000304:	202a      	movs	r0, #42	@ 0x2a
 8000306:	f000 fa5b 	bl	80007c0 <MCP2515_WriteByte>

  /* 1 1 100(5tq) 101(6tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 800030a:	21e5      	movs	r1, #229	@ 0xe5
 800030c:	2029      	movs	r0, #41	@ 0x29
 800030e:	f000 fa57 	bl	80007c0 <MCP2515_WriteByte>

  /* 1 0 000 011(4tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8000312:	2183      	movs	r1, #131	@ 0x83
 8000314:	2028      	movs	r0, #40	@ 0x28
 8000316:	f000 fa53 	bl	80007c0 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 800031a:	f000 f9f1 	bl	8000700 <MCP2515_SetNormalMode>
 800031e:	4603      	mov	r3, r0
 8000320:	f083 0301 	eor.w	r3, r3, #1
 8000324:	b2db      	uxtb	r3, r3
 8000326:	2b00      	cmp	r3, #0
 8000328:	d002      	beq.n	8000330 <CANSPI_Initialize+0x15c>
    return -3;
 800032a:	f06f 0302 	mvn.w	r3, #2
 800032e:	e000      	b.n	8000332 <CANSPI_Initialize+0x15e>

  return 1;
 8000330:	2301      	movs	r3, #1
}
 8000332:	4618      	mov	r0, r3
 8000334:	3720      	adds	r7, #32
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <CANSPI_Transmit>:

/* CAN 메시지 전송 */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000344:	2300      	movs	r3, #0
 8000346:	73fb      	strb	r3, [r7, #15]

  idReg.tempSIDH = 0;
 8000348:	4b36      	ldr	r3, [pc, #216]	@ (8000424 <CANSPI_Transmit+0xe8>)
 800034a:	2200      	movs	r2, #0
 800034c:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 800034e:	4b35      	ldr	r3, [pc, #212]	@ (8000424 <CANSPI_Transmit+0xe8>)
 8000350:	2200      	movs	r2, #0
 8000352:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000354:	4b33      	ldr	r3, [pc, #204]	@ (8000424 <CANSPI_Transmit+0xe8>)
 8000356:	2200      	movs	r2, #0
 8000358:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 800035a:	4b32      	ldr	r3, [pc, #200]	@ (8000424 <CANSPI_Transmit+0xe8>)
 800035c:	2200      	movs	r2, #0
 800035e:	70da      	strb	r2, [r3, #3]

  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000360:	f000 fabd 	bl	80008de <MCP2515_ReadStatus>
 8000364:	4603      	mov	r3, r0
 8000366:	461a      	mov	r2, r3
 8000368:	4b2f      	ldr	r3, [pc, #188]	@ (8000428 <CANSPI_Transmit+0xec>)
 800036a:	701a      	strb	r2, [r3, #0]

  /* 현재 Transmission 이 Pending 되지 않은 버퍼를 찾아서 전송한다. */
  if (ctrlStatus.TXB0REQ != 1)
 800036c:	4b2e      	ldr	r3, [pc, #184]	@ (8000428 <CANSPI_Transmit+0xec>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	f003 0304 	and.w	r3, r3, #4
 8000374:	b2db      	uxtb	r3, r3
 8000376:	2b00      	cmp	r3, #0
 8000378:	d115      	bne.n	80003a6 <CANSPI_Transmit+0x6a>
  {
    /* ID Type에 맞게 변환 */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	6858      	ldr	r0, [r3, #4]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	4a28      	ldr	r2, [pc, #160]	@ (8000424 <CANSPI_Transmit+0xe8>)
 8000384:	4619      	mov	r1, r3
 8000386:	f000 f928 	bl	80005da <convertCANid2Reg>

    /* Tx Buffer에 전송할 데이터 Loading */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	7a1a      	ldrb	r2, [r3, #8]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	3309      	adds	r3, #9
 8000392:	4924      	ldr	r1, [pc, #144]	@ (8000424 <CANSPI_Transmit+0xe8>)
 8000394:	2040      	movs	r0, #64	@ 0x40
 8000396:	f000 fa5f 	bl	8000858 <MCP2515_LoadTxSequence>

    /* Tx Buffer의 데이터 전송요청 */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 800039a:	2081      	movs	r0, #129	@ 0x81
 800039c:	f000 fa86 	bl	80008ac <MCP2515_RequestToSend>

    returnValue = 1;
 80003a0:	2301      	movs	r3, #1
 80003a2:	73fb      	strb	r3, [r7, #15]
 80003a4:	e038      	b.n	8000418 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 80003a6:	4b20      	ldr	r3, [pc, #128]	@ (8000428 <CANSPI_Transmit+0xec>)
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	f003 0310 	and.w	r3, r3, #16
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d115      	bne.n	80003e0 <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	6858      	ldr	r0, [r3, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	4a19      	ldr	r2, [pc, #100]	@ (8000424 <CANSPI_Transmit+0xe8>)
 80003be:	4619      	mov	r1, r3
 80003c0:	f000 f90b 	bl	80005da <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	7a1a      	ldrb	r2, [r3, #8]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	3309      	adds	r3, #9
 80003cc:	4915      	ldr	r1, [pc, #84]	@ (8000424 <CANSPI_Transmit+0xe8>)
 80003ce:	2042      	movs	r0, #66	@ 0x42
 80003d0:	f000 fa42 	bl	8000858 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 80003d4:	2082      	movs	r0, #130	@ 0x82
 80003d6:	f000 fa69 	bl	80008ac <MCP2515_RequestToSend>

    returnValue = 1;
 80003da:	2301      	movs	r3, #1
 80003dc:	73fb      	strb	r3, [r7, #15]
 80003de:	e01b      	b.n	8000418 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 80003e0:	4b11      	ldr	r3, [pc, #68]	@ (8000428 <CANSPI_Transmit+0xec>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d114      	bne.n	8000418 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	6858      	ldr	r0, [r3, #4]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	4a0b      	ldr	r2, [pc, #44]	@ (8000424 <CANSPI_Transmit+0xe8>)
 80003f8:	4619      	mov	r1, r3
 80003fa:	f000 f8ee 	bl	80005da <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	7a1a      	ldrb	r2, [r3, #8]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	3309      	adds	r3, #9
 8000406:	4907      	ldr	r1, [pc, #28]	@ (8000424 <CANSPI_Transmit+0xe8>)
 8000408:	2044      	movs	r0, #68	@ 0x44
 800040a:	f000 fa25 	bl	8000858 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 800040e:	2084      	movs	r0, #132	@ 0x84
 8000410:	f000 fa4c 	bl	80008ac <MCP2515_RequestToSend>

    returnValue = 1;
 8000414:	2301      	movs	r3, #1
 8000416:	73fb      	strb	r3, [r7, #15]
  }

  return (returnValue);
 8000418:	7bfb      	ldrb	r3, [r7, #15]
}
 800041a:	4618      	mov	r0, r3
 800041c:	3710      	adds	r7, #16
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	2000002c 	.word	0x2000002c
 8000428:	20000028 	.word	0x20000028

0800042c <CANSPI_Receive>:

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b088      	sub	sp, #32
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;

  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8000438:	f000 fa6c 	bl	8000914 <MCP2515_GetRxStatus>
 800043c:	4603      	mov	r3, r0
 800043e:	733b      	strb	r3, [r7, #12]

  /* 버퍼에 수신된 메시지가 있는지 확인 */
  if (rxStatus.rxBuffer != 0)
 8000440:	7b3b      	ldrb	r3, [r7, #12]
 8000442:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000446:	b2db      	uxtb	r3, r3
 8000448:	2b00      	cmp	r3, #0
 800044a:	d066      	beq.n	800051a <CANSPI_Receive+0xee>
  {
    /* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 800044c:	7b3b      	ldrb	r3, [r7, #12]
 800044e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000452:	b2db      	uxtb	r3, r3
 8000454:	2b40      	cmp	r3, #64	@ 0x40
 8000456:	bf0c      	ite	eq
 8000458:	2301      	moveq	r3, #1
 800045a:	2300      	movne	r3, #0
 800045c:	b2da      	uxtb	r2, r3
 800045e:	7b3b      	ldrb	r3, [r7, #12]
 8000460:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000464:	b2db      	uxtb	r3, r3
 8000466:	2bc0      	cmp	r3, #192	@ 0xc0
 8000468:	bf0c      	ite	eq
 800046a:	2301      	moveq	r3, #1
 800046c:	2300      	movne	r3, #0
 800046e:	b2db      	uxtb	r3, r3
 8000470:	4313      	orrs	r3, r2
 8000472:	b2db      	uxtb	r3, r3
 8000474:	2b00      	cmp	r3, #0
 8000476:	d007      	beq.n	8000488 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000478:	f107 0310 	add.w	r3, r7, #16
 800047c:	220d      	movs	r2, #13
 800047e:	4619      	mov	r1, r3
 8000480:	2090      	movs	r0, #144	@ 0x90
 8000482:	f000 f97c 	bl	800077e <MCP2515_ReadRxSequence>
 8000486:	e00c      	b.n	80004a2 <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8000488:	7b3b      	ldrb	r3, [r7, #12]
 800048a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800048e:	b2db      	uxtb	r3, r3
 8000490:	2b80      	cmp	r3, #128	@ 0x80
 8000492:	d106      	bne.n	80004a2 <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	220d      	movs	r2, #13
 800049a:	4619      	mov	r1, r3
 800049c:	2094      	movs	r0, #148	@ 0x94
 800049e:	f000 f96e 	bl	800077e <MCP2515_ReadRxSequence>
    }

    /* Extended 타입 */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 80004a2:	7b3b      	ldrb	r3, [r7, #12]
 80004a4:	f003 0318 	and.w	r3, r3, #24
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	2b10      	cmp	r3, #16
 80004ac:	d10c      	bne.n	80004c8 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	2202      	movs	r2, #2
 80004b2:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80004b4:	7cb8      	ldrb	r0, [r7, #18]
 80004b6:	7cf9      	ldrb	r1, [r7, #19]
 80004b8:	7c3a      	ldrb	r2, [r7, #16]
 80004ba:	7c7b      	ldrb	r3, [r7, #17]
 80004bc:	f000 f832 	bl	8000524 <convertReg2ExtendedCANid>
 80004c0:	4602      	mov	r2, r0
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	e00b      	b.n	80004e0 <CANSPI_Receive+0xb4>
    }
    else
    {
      /* Standard 타입 */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2201      	movs	r2, #1
 80004cc:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80004ce:	7c3b      	ldrb	r3, [r7, #16]
 80004d0:	7c7a      	ldrb	r2, [r7, #17]
 80004d2:	4611      	mov	r1, r2
 80004d4:	4618      	mov	r0, r3
 80004d6:	f000 f863 	bl	80005a0 <convertReg2StandardCANid>
 80004da:	4602      	mov	r2, r0
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	605a      	str	r2, [r3, #4]
    }

    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 80004e0:	7d3a      	ldrb	r2, [r7, #20]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 80004e6:	7d7a      	ldrb	r2, [r7, #21]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 80004ec:	7dba      	ldrb	r2, [r7, #22]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 80004f2:	7dfa      	ldrb	r2, [r7, #23]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 80004f8:	7e3a      	ldrb	r2, [r7, #24]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 80004fe:	7e7a      	ldrb	r2, [r7, #25]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8000504:	7eba      	ldrb	r2, [r7, #26]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 800050a:	7efa      	ldrb	r2, [r7, #27]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8000510:	7f3a      	ldrb	r2, [r7, #28]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	741a      	strb	r2, [r3, #16]

    returnValue = 1;
 8000516:	2301      	movs	r3, #1
 8000518:	77fb      	strb	r3, [r7, #31]
  }

  return (returnValue);
 800051a:	7ffb      	ldrb	r3, [r7, #31]
}
 800051c:	4618      	mov	r0, r3
 800051e:	3720      	adds	r7, #32
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8000524:	b490      	push	{r4, r7}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	4604      	mov	r4, r0
 800052c:	4608      	mov	r0, r1
 800052e:	4611      	mov	r1, r2
 8000530:	461a      	mov	r2, r3
 8000532:	4623      	mov	r3, r4
 8000534:	71fb      	strb	r3, [r7, #7]
 8000536:	4603      	mov	r3, r0
 8000538:	71bb      	strb	r3, [r7, #6]
 800053a:	460b      	mov	r3, r1
 800053c:	717b      	strb	r3, [r7, #5]
 800053e:	4613      	mov	r3, r2
 8000540:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 800054a:	793b      	ldrb	r3, [r7, #4]
 800054c:	f003 0303 	and.w	r3, r3, #3
 8000550:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 8000552:	793b      	ldrb	r3, [r7, #4]
 8000554:	095b      	lsrs	r3, r3, #5
 8000556:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8000558:	797b      	ldrb	r3, [r7, #5]
 800055a:	00db      	lsls	r3, r3, #3
 800055c:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 800055e:	7bbb      	ldrb	r3, [r7, #14]
 8000560:	693a      	ldr	r2, [r7, #16]
 8000562:	4413      	add	r3, r2
 8000564:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 8000566:	693b      	ldr	r3, [r7, #16]
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 800056c:	7bfb      	ldrb	r3, [r7, #15]
 800056e:	693a      	ldr	r2, [r7, #16]
 8000570:	4413      	add	r3, r2
 8000572:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8000574:	693b      	ldr	r3, [r7, #16]
 8000576:	021b      	lsls	r3, r3, #8
 8000578:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	693a      	ldr	r2, [r7, #16]
 800057e:	4413      	add	r3, r2
 8000580:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8000582:	693b      	ldr	r3, [r7, #16]
 8000584:	021b      	lsls	r3, r3, #8
 8000586:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8000588:	79bb      	ldrb	r3, [r7, #6]
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	4413      	add	r3, r2
 800058e:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 8000590:	693b      	ldr	r3, [r7, #16]
 8000592:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8000594:	697b      	ldr	r3, [r7, #20]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3718      	adds	r7, #24
 800059a:	46bd      	mov	sp, r7
 800059c:	bc90      	pop	{r4, r7}
 800059e:	4770      	bx	lr

080005a0 <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	460a      	mov	r2, r1
 80005aa:	71fb      	strb	r3, [r7, #7]
 80005ac:	4613      	mov	r3, r2
 80005ae:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	00db      	lsls	r3, r3, #3
 80005b8:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 80005ba:	79bb      	ldrb	r3, [r7, #6]
 80005bc:	095b      	lsrs	r3, r3, #5
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	461a      	mov	r2, r3
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	4413      	add	r3, r2
 80005c6:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 80005cc:	68fb      	ldr	r3, [r7, #12]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <convertCANid2Reg>:

/* CAN ID를 Register에 저장하기 위한 변환 함수 */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg)
{
 80005da:	b480      	push	{r7}
 80005dc:	b087      	sub	sp, #28
 80005de:	af00      	add	r7, sp, #0
 80005e0:	60f8      	str	r0, [r7, #12]
 80005e2:	460b      	mov	r3, r1
 80005e4:	607a      	str	r2, [r7, #4]
 80005e6:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	75fb      	strb	r3, [r7, #23]

  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B)
 80005ec:	7afb      	ldrb	r3, [r7, #11]
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	d12e      	bne.n	8000650 <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	60fb      	str	r3, [r7, #12]

    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	b2da      	uxtb	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	0a1b      	lsrs	r3, r3, #8
 800060c:	60fb      	str	r3, [r7, #12]

    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	f003 0303 	and.w	r3, r3, #3
 8000616:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	00db      	lsls	r3, r3, #3
 800061c:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	f023 031f 	bic.w	r3, r3, #31
 8000626:	b2da      	uxtb	r2, r3
 8000628:	7dfb      	ldrb	r3, [r7, #23]
 800062a:	4413      	add	r3, r2
 800062c:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 800062e:	7dfb      	ldrb	r3, [r7, #23]
 8000630:	3308      	adds	r3, #8
 8000632:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000634:	7dfb      	ldrb	r3, [r7, #23]
 8000636:	f023 0314 	bic.w	r3, r3, #20
 800063a:	b2da      	uxtb	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	705a      	strb	r2, [r3, #1]

    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	0a1b      	lsrs	r3, r3, #8
 8000644:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	b2da      	uxtb	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 800064e:	e013      	b.n	8000678 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2200      	movs	r2, #0
 8000654:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2200      	movs	r2, #0
 800065a:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	015b      	lsls	r3, r3, #5
 8000660:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	b2da      	uxtb	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	0a1b      	lsrs	r3, r3, #8
 800066e:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	b2da      	uxtb	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	701a      	strb	r2, [r3, #0]
}
 8000678:	bf00      	nop
 800067a:	371c      	adds	r7, #28
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* MCP2515 초기화 */
bool MCP2515_Initialize(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 800068a:	2201      	movs	r2, #1
 800068c:	2110      	movs	r1, #16
 800068e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000692:	f000 fedd 	bl	8001450 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 8000696:	230a      	movs	r3, #10
 8000698:	71fb      	strb	r3, [r7, #7]

  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 800069a:	4809      	ldr	r0, [pc, #36]	@ (80006c0 <MCP2515_Initialize+0x3c>)
 800069c:	f002 fea3 	bl	80033e6 <HAL_SPI_GetState>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d101      	bne.n	80006aa <MCP2515_Initialize+0x26>
      return true;
 80006a6:	2301      	movs	r3, #1
 80006a8:	e006      	b.n	80006b8 <MCP2515_Initialize+0x34>

    loop--;
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d1f1      	bne.n	800069a <MCP2515_Initialize+0x16>

  return false;
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	2000005c 	.word	0x2000005c

080006c4 <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
bool MCP2515_SetConfigMode(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80006ca:	2180      	movs	r1, #128	@ 0x80
 80006cc:	200f      	movs	r0, #15
 80006ce:	f000 f877 	bl	80007c0 <MCP2515_WriteByte>

  uint8_t loop = 10;
 80006d2:	230a      	movs	r3, #10
 80006d4:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 80006d6:	200e      	movs	r0, #14
 80006d8:	f000 f830 	bl	800073c <MCP2515_ReadByte>
 80006dc:	4603      	mov	r3, r0
 80006de:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80006e2:	2b80      	cmp	r3, #128	@ 0x80
 80006e4:	d101      	bne.n	80006ea <MCP2515_SetConfigMode+0x26>
      return true;
 80006e6:	2301      	movs	r3, #1
 80006e8:	e006      	b.n	80006f8 <MCP2515_SetConfigMode+0x34>

    loop--;
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	3b01      	subs	r3, #1
 80006ee:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d1ef      	bne.n	80006d6 <MCP2515_SetConfigMode+0x12>

  return false;
 80006f6:	2300      	movs	r3, #0
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
bool MCP2515_SetNormalMode(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8000706:	2100      	movs	r1, #0
 8000708:	200f      	movs	r0, #15
 800070a:	f000 f859 	bl	80007c0 <MCP2515_WriteByte>

  uint8_t loop = 10;
 800070e:	230a      	movs	r3, #10
 8000710:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8000712:	200e      	movs	r0, #14
 8000714:	f000 f812 	bl	800073c <MCP2515_ReadByte>
 8000718:	4603      	mov	r3, r0
 800071a:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d101      	bne.n	8000726 <MCP2515_SetNormalMode+0x26>
      return true;
 8000722:	2301      	movs	r3, #1
 8000724:	e006      	b.n	8000734 <MCP2515_SetNormalMode+0x34>

    loop--;
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	3b01      	subs	r3, #1
 800072a:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1ef      	bne.n	8000712 <MCP2515_SetNormalMode+0x12>

  return false;
 8000732:	2300      	movs	r3, #0
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000746:	2200      	movs	r2, #0
 8000748:	2110      	movs	r1, #16
 800074a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800074e:	f000 fe7f 	bl	8001450 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 8000752:	2003      	movs	r0, #3
 8000754:	f000 f8fa 	bl	800094c <SPI_Tx>
  SPI_Tx(address);
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f8f6 	bl	800094c <SPI_Tx>
  retVal = SPI_Rx();
 8000760:	f000 f91a 	bl	8000998 <SPI_Rx>
 8000764:	4603      	mov	r3, r0
 8000766:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 8000768:	2201      	movs	r2, #1
 800076a:	2110      	movs	r1, #16
 800076c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000770:	f000 fe6e 	bl	8001450 <HAL_GPIO_WritePin>

  return retVal;
 8000774:	7bfb      	ldrb	r3, [r7, #15]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
 8000784:	4603      	mov	r3, r0
 8000786:	6039      	str	r1, [r7, #0]
 8000788:	71fb      	strb	r3, [r7, #7]
 800078a:	4613      	mov	r3, r2
 800078c:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 800078e:	2200      	movs	r2, #0
 8000790:	2110      	movs	r1, #16
 8000792:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000796:	f000 fe5b 	bl	8001450 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	4618      	mov	r0, r3
 800079e:	f000 f8d5 	bl	800094c <SPI_Tx>
  SPI_RxBuffer(data, length);
 80007a2:	79bb      	ldrb	r3, [r7, #6]
 80007a4:	4619      	mov	r1, r3
 80007a6:	6838      	ldr	r0, [r7, #0]
 80007a8:	f000 f906 	bl	80009b8 <SPI_RxBuffer>

  MCP2515_CS_HIGH();
 80007ac:	2201      	movs	r2, #1
 80007ae:	2110      	movs	r1, #16
 80007b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b4:	f000 fe4c 	bl	8001450 <HAL_GPIO_WritePin>
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <MCP2515_WriteByte>:

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	460a      	mov	r2, r1
 80007ca:	71fb      	strb	r3, [r7, #7]
 80007cc:	4613      	mov	r3, r2
 80007ce:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80007d0:	2200      	movs	r2, #0
 80007d2:	2110      	movs	r1, #16
 80007d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d8:	f000 fe3a 	bl	8001450 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 80007dc:	2002      	movs	r0, #2
 80007de:	f000 f8b5 	bl	800094c <SPI_Tx>
  SPI_Tx(address);
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 f8b1 	bl	800094c <SPI_Tx>
  SPI_Tx(data);
 80007ea:	79bb      	ldrb	r3, [r7, #6]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 f8ad 	bl	800094c <SPI_Tx>

  MCP2515_CS_HIGH();
 80007f2:	2201      	movs	r2, #1
 80007f4:	2110      	movs	r1, #16
 80007f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007fa:	f000 fe29 	bl	8001450 <HAL_GPIO_WritePin>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	603a      	str	r2, [r7, #0]
 8000810:	71fb      	strb	r3, [r7, #7]
 8000812:	460b      	mov	r3, r1
 8000814:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000816:	2200      	movs	r2, #0
 8000818:	2110      	movs	r1, #16
 800081a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800081e:	f000 fe17 	bl	8001450 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8000822:	2002      	movs	r0, #2
 8000824:	f000 f892 	bl	800094c <SPI_Tx>
  SPI_Tx(startAddress);
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	4618      	mov	r0, r3
 800082c:	f000 f88e 	bl	800094c <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8000830:	79ba      	ldrb	r2, [r7, #6]
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	3301      	adds	r3, #1
 800083a:	b2db      	uxtb	r3, r3
 800083c:	4619      	mov	r1, r3
 800083e:	6838      	ldr	r0, [r7, #0]
 8000840:	f000 f896 	bl	8000970 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8000844:	2201      	movs	r2, #1
 8000846:	2110      	movs	r1, #16
 8000848:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800084c:	f000 fe00 	bl	8001450 <HAL_GPIO_WritePin>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <MCP2515_LoadTxSequence>:

/* TxBuffer에 Sequential Bytes 쓰기 */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4603      	mov	r3, r0
 8000864:	73fb      	strb	r3, [r7, #15]
 8000866:	4613      	mov	r3, r2
 8000868:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 800086a:	2200      	movs	r2, #0
 800086c:	2110      	movs	r1, #16
 800086e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000872:	f000 fded 	bl	8001450 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	4618      	mov	r0, r3
 800087a:	f000 f867 	bl	800094c <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 800087e:	2104      	movs	r1, #4
 8000880:	68b8      	ldr	r0, [r7, #8]
 8000882:	f000 f875 	bl	8000970 <SPI_TxBuffer>
  SPI_Tx(dlc);
 8000886:	7bbb      	ldrb	r3, [r7, #14]
 8000888:	4618      	mov	r0, r3
 800088a:	f000 f85f 	bl	800094c <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 800088e:	7bbb      	ldrb	r3, [r7, #14]
 8000890:	4619      	mov	r1, r3
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f000 f86c 	bl	8000970 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8000898:	2201      	movs	r2, #1
 800089a:	2110      	movs	r1, #16
 800089c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a0:	f000 fdd6 	bl	8001450 <HAL_GPIO_WritePin>
}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* RTS 명령을 통해서 TxBuffer 전송 */
void MCP2515_RequestToSend(uint8_t instruction)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 80008b6:	2200      	movs	r2, #0
 80008b8:	2110      	movs	r1, #16
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008be:	f000 fdc7 	bl	8001450 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 f841 	bl	800094c <SPI_Tx>

  MCP2515_CS_HIGH();
 80008ca:	2201      	movs	r2, #1
 80008cc:	2110      	movs	r1, #16
 80008ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d2:	f000 fdbd 	bl	8001450 <HAL_GPIO_WritePin>
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <MCP2515_ReadStatus>:

/* MCP2515 Status 확인 */
uint8_t MCP2515_ReadStatus(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 80008e4:	2200      	movs	r2, #0
 80008e6:	2110      	movs	r1, #16
 80008e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ec:	f000 fdb0 	bl	8001450 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ_STATUS);
 80008f0:	20a0      	movs	r0, #160	@ 0xa0
 80008f2:	f000 f82b 	bl	800094c <SPI_Tx>
  retVal = SPI_Rx();
 80008f6:	f000 f84f 	bl	8000998 <SPI_Rx>
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 80008fe:	2201      	movs	r2, #1
 8000900:	2110      	movs	r1, #16
 8000902:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000906:	f000 fda3 	bl	8001450 <HAL_GPIO_WritePin>

  return retVal;
 800090a:	79fb      	ldrb	r3, [r7, #7]
}
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <MCP2515_GetRxStatus>:

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 800091a:	2200      	movs	r2, #0
 800091c:	2110      	movs	r1, #16
 800091e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000922:	f000 fd95 	bl	8001450 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 8000926:	20b0      	movs	r0, #176	@ 0xb0
 8000928:	f000 f810 	bl	800094c <SPI_Tx>
  retVal = SPI_Rx();
 800092c:	f000 f834 	bl	8000998 <SPI_Rx>
 8000930:	4603      	mov	r3, r0
 8000932:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8000934:	2201      	movs	r2, #1
 8000936:	2110      	movs	r1, #16
 8000938:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800093c:	f000 fd88 	bl	8001450 <HAL_GPIO_WritePin>

  return retVal;
 8000940:	79fb      	ldrb	r3, [r7, #7]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8000956:	1df9      	adds	r1, r7, #7
 8000958:	230a      	movs	r3, #10
 800095a:	2201      	movs	r2, #1
 800095c:	4803      	ldr	r0, [pc, #12]	@ (800096c <SPI_Tx+0x20>)
 800095e:	f002 f874 	bl	8002a4a <HAL_SPI_Transmit>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	2000005c 	.word	0x2000005c

08000970 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	460b      	mov	r3, r1
 800097a:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 800097c:	78fb      	ldrb	r3, [r7, #3]
 800097e:	b29a      	uxth	r2, r3
 8000980:	230a      	movs	r3, #10
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	4803      	ldr	r0, [pc, #12]	@ (8000994 <SPI_TxBuffer+0x24>)
 8000986:	f002 f860 	bl	8002a4a <HAL_SPI_Transmit>
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	2000005c 	.word	0x2000005c

08000998 <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 800099e:	1df9      	adds	r1, r7, #7
 80009a0:	230a      	movs	r3, #10
 80009a2:	2201      	movs	r2, #1
 80009a4:	4803      	ldr	r0, [pc, #12]	@ (80009b4 <SPI_Rx+0x1c>)
 80009a6:	f002 f9c5 	bl	8002d34 <HAL_SPI_Receive>
  return retVal;
 80009aa:	79fb      	ldrb	r3, [r7, #7]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	2000005c 	.word	0x2000005c

080009b8 <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 80009c4:	78fb      	ldrb	r3, [r7, #3]
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	230a      	movs	r3, #10
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	4803      	ldr	r0, [pc, #12]	@ (80009dc <SPI_RxBuffer+0x24>)
 80009ce:	f002 f9b1 	bl	8002d34 <HAL_SPI_Receive>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2000005c 	.word	0x2000005c

080009e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e4:	f000 fa3a 	bl	8000e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e8:	f000 f876 	bl	8000ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ec:	f000 f8f6 	bl	8000bdc <MX_GPIO_Init>
  MX_SPI1_Init();
 80009f0:	f000 f8b6 	bl	8000b60 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  CANSPI_Initialize();
 80009f4:	f7ff fbee 	bl	80001d4 <CANSPI_Initialize>

  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2120      	movs	r1, #32
 80009fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a00:	f000 fd26 	bl	8001450 <HAL_GPIO_WritePin>

  spi_status = HAL_SPI_GetState(SPI_CAN);
 8000a04:	482f      	ldr	r0, [pc, #188]	@ (8000ac4 <main+0xe4>)
 8000a06:	f002 fcee 	bl	80033e6 <HAL_SPI_GetState>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ac8 <main+0xe8>)
 8000a10:	701a      	strb	r2, [r3, #0]

  if(spi_status != HAL_SPI_STATE_READY)
 8000a12:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac8 <main+0xe8>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d007      	beq.n	8000a2a <main+0x4a>
  {
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a22:	f000 fd15 	bl	8001450 <HAL_GPIO_WritePin>
	  while(1){};
 8000a26:	bf00      	nop
 8000a28:	e7fd      	b.n	8000a26 <main+0x46>
  }

  if(spi_status == HAL_SPI_STATE_READY)
 8000a2a:	4b27      	ldr	r3, [pc, #156]	@ (8000ac8 <main+0xe8>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d105      	bne.n	8000a3e <main+0x5e>
  {
	  controlVal++;
 8000a32:	4b26      	ldr	r3, [pc, #152]	@ (8000acc <main+0xec>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	3301      	adds	r3, #1
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4b24      	ldr	r3, [pc, #144]	@ (8000acc <main+0xec>)
 8000a3c:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(CANSPI_Receive(&rxMessage)){
 8000a3e:	4824      	ldr	r0, [pc, #144]	@ (8000ad0 <main+0xf0>)
 8000a40:	f7ff fcf4 	bl	800042c <CANSPI_Receive>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d0f9      	beq.n	8000a3e <main+0x5e>
	  	  if(rxMessage.frame.id == 0x0A){
 8000a4a:	4b21      	ldr	r3, [pc, #132]	@ (8000ad0 <main+0xf0>)
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	2b0a      	cmp	r3, #10
 8000a50:	d110      	bne.n	8000a74 <main+0x94>
	  		  if(rxMessage.frame.data0 == 0){
 8000a52:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad0 <main+0xf0>)
 8000a54:	7a5b      	ldrb	r3, [r3, #9]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d106      	bne.n	8000a68 <main+0x88>
	  			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2120      	movs	r1, #32
 8000a5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a62:	f000 fcf5 	bl	8001450 <HAL_GPIO_WritePin>
 8000a66:	e005      	b.n	8000a74 <main+0x94>
	  		  }else{
	  			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2120      	movs	r1, #32
 8000a6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a70:	f000 fcee 	bl	8001450 <HAL_GPIO_WritePin>
	  		  }
	  	  }

	  	  	HAL_Delay(100);
 8000a74:	2064      	movs	r0, #100	@ 0x64
 8000a76:	f000 fa57 	bl	8000f28 <HAL_Delay>
	  		txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8000a7a:	4b16      	ldr	r3, [pc, #88]	@ (8000ad4 <main+0xf4>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]
	  		txMessage.frame.id = 0x36;
 8000a80:	4b14      	ldr	r3, [pc, #80]	@ (8000ad4 <main+0xf4>)
 8000a82:	2236      	movs	r2, #54	@ 0x36
 8000a84:	605a      	str	r2, [r3, #4]
	  		txMessage.frame.dlc = 8;
 8000a86:	4b13      	ldr	r3, [pc, #76]	@ (8000ad4 <main+0xf4>)
 8000a88:	2208      	movs	r2, #8
 8000a8a:	721a      	strb	r2, [r3, #8]
	  		txMessage.frame.data0 = 0;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <main+0xf4>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	725a      	strb	r2, [r3, #9]
	  		txMessage.frame.data1 = 1;
 8000a92:	4b10      	ldr	r3, [pc, #64]	@ (8000ad4 <main+0xf4>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	729a      	strb	r2, [r3, #10]
	  		txMessage.frame.data2 = 2;
 8000a98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <main+0xf4>)
 8000a9a:	2202      	movs	r2, #2
 8000a9c:	72da      	strb	r2, [r3, #11]
	  		txMessage.frame.data3 = 3;
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad4 <main+0xf4>)
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	731a      	strb	r2, [r3, #12]
	  		txMessage.frame.data4 = 4;
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad4 <main+0xf4>)
 8000aa6:	2204      	movs	r2, #4
 8000aa8:	735a      	strb	r2, [r3, #13]
	  		txMessage.frame.data5 = 5;
 8000aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad4 <main+0xf4>)
 8000aac:	2205      	movs	r2, #5
 8000aae:	739a      	strb	r2, [r3, #14]
	  		txMessage.frame.data6 = 6;
 8000ab0:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <main+0xf4>)
 8000ab2:	2206      	movs	r2, #6
 8000ab4:	73da      	strb	r2, [r3, #15]
	  		txMessage.frame.data7 = 7;
 8000ab6:	4b07      	ldr	r3, [pc, #28]	@ (8000ad4 <main+0xf4>)
 8000ab8:	2207      	movs	r2, #7
 8000aba:	741a      	strb	r2, [r3, #16]
	  		CANSPI_Transmit(&txMessage);
 8000abc:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <main+0xf4>)
 8000abe:	f7ff fc3d 	bl	800033c <CANSPI_Transmit>
	  if(CANSPI_Receive(&rxMessage)){
 8000ac2:	e7bc      	b.n	8000a3e <main+0x5e>
 8000ac4:	2000005c 	.word	0x2000005c
 8000ac8:	20000030 	.word	0x20000030
 8000acc:	20000031 	.word	0x20000031
 8000ad0:	20000048 	.word	0x20000048
 8000ad4:	20000034 	.word	0x20000034

08000ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b090      	sub	sp, #64	@ 0x40
 8000adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ade:	f107 0318 	add.w	r3, r7, #24
 8000ae2:	2228      	movs	r2, #40	@ 0x28
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 fe48 	bl	800377c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000afe:	2301      	movs	r3, #1
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b02:	2310      	movs	r3, #16
 8000b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b06:	2302      	movs	r3, #2
 8000b08:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b0e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b10:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1a:	f107 0318 	add.w	r3, r7, #24
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 fcae 	bl	8001480 <HAL_RCC_OscConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000b2a:	f000 f8a1 	bl	8000c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2e:	230f      	movs	r3, #15
 8000b30:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b32:	2302      	movs	r3, #2
 8000b34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	2102      	movs	r1, #2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 fced 	bl	8002528 <HAL_RCC_ClockConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000b54:	f000 f88c 	bl	8000c70 <Error_Handler>
  }
}
 8000b58:	bf00      	nop
 8000b5a:	3740      	adds	r7, #64	@ 0x40
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b64:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd4 <MX_SPI1_Init+0x74>)
 8000b66:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd8 <MX_SPI1_Init+0x78>)
 8000b68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd4 <MX_SPI1_Init+0x74>)
 8000b6c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b72:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <MX_SPI1_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b78:	4b16      	ldr	r3, [pc, #88]	@ (8000bd4 <MX_SPI1_Init+0x74>)
 8000b7a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000b7e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b80:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <MX_SPI1_Init+0x74>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b86:	4b13      	ldr	r3, [pc, #76]	@ (8000bd4 <MX_SPI1_Init+0x74>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <MX_SPI1_Init+0x74>)
 8000b8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b92:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <MX_SPI1_Init+0x74>)
 8000b96:	2208      	movs	r2, #8
 8000b98:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <MX_SPI1_Init+0x74>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <MX_SPI1_Init+0x74>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd4 <MX_SPI1_Init+0x74>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000bac:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <MX_SPI1_Init+0x74>)
 8000bae:	2207      	movs	r2, #7
 8000bb0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <MX_SPI1_Init+0x74>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <MX_SPI1_Init+0x74>)
 8000bba:	2208      	movs	r2, #8
 8000bbc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bbe:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <MX_SPI1_Init+0x74>)
 8000bc0:	f001 fe98 	bl	80028f4 <HAL_SPI_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000bca:	f000 f851 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	2000005c 	.word	0x2000005c
 8000bd8:	40013000 	.word	0x40013000

08000bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c6c <MX_GPIO_Init+0x90>)
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	4a1d      	ldr	r2, [pc, #116]	@ (8000c6c <MX_GPIO_Init+0x90>)
 8000bf8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bfc:	6153      	str	r3, [r2, #20]
 8000bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8000c6c <MX_GPIO_Init+0x90>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	4b18      	ldr	r3, [pc, #96]	@ (8000c6c <MX_GPIO_Init+0x90>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	4a17      	ldr	r2, [pc, #92]	@ (8000c6c <MX_GPIO_Init+0x90>)
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c14:	6153      	str	r3, [r2, #20]
 8000c16:	4b15      	ldr	r3, [pc, #84]	@ (8000c6c <MX_GPIO_Init+0x90>)
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <MX_GPIO_Init+0x90>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	4a11      	ldr	r2, [pc, #68]	@ (8000c6c <MX_GPIO_Init+0x90>)
 8000c28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c2c:	6153      	str	r3, [r2, #20]
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <MX_GPIO_Init+0x90>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|LED_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2130      	movs	r1, #48	@ 0x30
 8000c3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c42:	f000 fc05 	bl	8001450 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_CS_Pin LED_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|LED_Pin;
 8000c46:	2330      	movs	r3, #48	@ 0x30
 8000c48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c60:	f000 fa6c 	bl	800113c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c64:	bf00      	nop
 8000c66:	3720      	adds	r7, #32
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40021000 	.word	0x40021000

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <Error_Handler+0x8>

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <HAL_MspInit+0x44>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	4a0e      	ldr	r2, [pc, #56]	@ (8000cc0 <HAL_MspInit+0x44>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6193      	str	r3, [r2, #24]
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <HAL_MspInit+0x44>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <HAL_MspInit+0x44>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	4a08      	ldr	r2, [pc, #32]	@ (8000cc0 <HAL_MspInit+0x44>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ca4:	61d3      	str	r3, [r2, #28]
 8000ca6:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <HAL_MspInit+0x44>)
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	@ 0x28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a25      	ldr	r2, [pc, #148]	@ (8000d78 <HAL_SPI_MspInit+0xb4>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d144      	bne.n	8000d70 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ce6:	4b25      	ldr	r3, [pc, #148]	@ (8000d7c <HAL_SPI_MspInit+0xb8>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	4a24      	ldr	r2, [pc, #144]	@ (8000d7c <HAL_SPI_MspInit+0xb8>)
 8000cec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cf0:	6193      	str	r3, [r2, #24]
 8000cf2:	4b22      	ldr	r3, [pc, #136]	@ (8000d7c <HAL_SPI_MspInit+0xb8>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8000d7c <HAL_SPI_MspInit+0xb8>)
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	4a1e      	ldr	r2, [pc, #120]	@ (8000d7c <HAL_SPI_MspInit+0xb8>)
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d08:	6153      	str	r3, [r2, #20]
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <HAL_SPI_MspInit+0xb8>)
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <HAL_SPI_MspInit+0xb8>)
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	4a18      	ldr	r2, [pc, #96]	@ (8000d7c <HAL_SPI_MspInit+0xb8>)
 8000d1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d20:	6153      	str	r3, [r2, #20]
 8000d22:	4b16      	ldr	r3, [pc, #88]	@ (8000d7c <HAL_SPI_MspInit+0xb8>)
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d2e:	23c0      	movs	r3, #192	@ 0xc0
 8000d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d3e:	2305      	movs	r3, #5
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d4c:	f000 f9f6 	bl	800113c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d50:	2308      	movs	r3, #8
 8000d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d60:	2305      	movs	r3, #5
 8000d62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <HAL_SPI_MspInit+0xbc>)
 8000d6c:	f000 f9e6 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d70:	bf00      	nop
 8000d72:	3728      	adds	r7, #40	@ 0x28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40013000 	.word	0x40013000
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	48000400 	.word	0x48000400

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <NMI_Handler+0x4>

08000d8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <UsageFault_Handler+0x4>

08000dac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dda:	f000 f885 	bl	8000ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <SystemInit+0x20>)
 8000dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dee:	4a05      	ldr	r2, [pc, #20]	@ (8000e04 <SystemInit+0x20>)
 8000df0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000df4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e40 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e0c:	f7ff ffea 	bl	8000de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e10:	480c      	ldr	r0, [pc, #48]	@ (8000e44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e12:	490d      	ldr	r1, [pc, #52]	@ (8000e48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e14:	4a0d      	ldr	r2, [pc, #52]	@ (8000e4c <LoopForever+0xe>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e18:	e002      	b.n	8000e20 <LoopCopyDataInit>

08000e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1e:	3304      	adds	r3, #4

08000e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e24:	d3f9      	bcc.n	8000e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e26:	4a0a      	ldr	r2, [pc, #40]	@ (8000e50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e28:	4c0a      	ldr	r4, [pc, #40]	@ (8000e54 <LoopForever+0x16>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e2c:	e001      	b.n	8000e32 <LoopFillZerobss>

08000e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e30:	3204      	adds	r2, #4

08000e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e34:	d3fb      	bcc.n	8000e2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e36:	f002 fca9 	bl	800378c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e3a:	f7ff fdd1 	bl	80009e0 <main>

08000e3e <LoopForever>:

LoopForever:
    b LoopForever
 8000e3e:	e7fe      	b.n	8000e3e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e40:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e4c:	08003824 	.word	0x08003824
  ldr r2, =_sbss
 8000e50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e54:	200000c4 	.word	0x200000c4

08000e58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e58:	e7fe      	b.n	8000e58 <ADC1_2_IRQHandler>
	...

08000e5c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e60:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <HAL_Init+0x28>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a07      	ldr	r2, [pc, #28]	@ (8000e84 <HAL_Init+0x28>)
 8000e66:	f043 0310 	orr.w	r3, r3, #16
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	f000 f931 	bl	80010d4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e72:	200f      	movs	r0, #15
 8000e74:	f000 f808 	bl	8000e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e78:	f7ff ff00 	bl	8000c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40022000 	.word	0x40022000

08000e88 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <HAL_InitTick+0x54>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <HAL_InitTick+0x58>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f93b 	bl	8001122 <HAL_SYSTICK_Config>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00e      	b.n	8000ed4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b0f      	cmp	r3, #15
 8000eba:	d80a      	bhi.n	8000ed2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f000 f911 	bl	80010ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec8:	4a06      	ldr	r2, [pc, #24]	@ (8000ee4 <HAL_InitTick+0x5c>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e000      	b.n	8000ed4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <HAL_IncTick+0x20>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <HAL_IncTick+0x24>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a04      	ldr	r2, [pc, #16]	@ (8000f0c <HAL_IncTick+0x24>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	200000c0 	.word	0x200000c0

08000f10 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f14:	4b03      	ldr	r3, [pc, #12]	@ (8000f24 <HAL_GetTick+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	200000c0 	.word	0x200000c0

08000f28 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f30:	f7ff ffee 	bl	8000f10 <HAL_GetTick>
 8000f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f40:	d005      	beq.n	8000f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f42:	4b0a      	ldr	r3, [pc, #40]	@ (8000f6c <HAL_Delay+0x44>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f4e:	bf00      	nop
 8000f50:	f7ff ffde 	bl	8000f10 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d8f7      	bhi.n	8000f50 <HAL_Delay+0x28>
  {
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	@ (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	db0a      	blt.n	8000ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	490c      	ldr	r1, [pc, #48]	@ (8001020 <__NVIC_SetPriority+0x4c>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ffc:	e00a      	b.n	8001014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4908      	ldr	r1, [pc, #32]	@ (8001024 <__NVIC_SetPriority+0x50>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	3b04      	subs	r3, #4
 800100c:	0112      	lsls	r2, r2, #4
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	440b      	add	r3, r1
 8001012:	761a      	strb	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	@ 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f1c3 0307 	rsb	r3, r3, #7
 8001042:	2b04      	cmp	r3, #4
 8001044:	bf28      	it	cs
 8001046:	2304      	movcs	r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3304      	adds	r3, #4
 800104e:	2b06      	cmp	r3, #6
 8001050:	d902      	bls.n	8001058 <NVIC_EncodePriority+0x30>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3b03      	subs	r3, #3
 8001056:	e000      	b.n	800105a <NVIC_EncodePriority+0x32>
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	f04f 32ff 	mov.w	r2, #4294967295
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43da      	mvns	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	401a      	ands	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001070:	f04f 31ff 	mov.w	r1, #4294967295
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43d9      	mvns	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	4313      	orrs	r3, r2
         );
}
 8001082:	4618      	mov	r0, r3
 8001084:	3724      	adds	r7, #36	@ 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010a0:	d301      	bcc.n	80010a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00f      	b.n	80010c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a6:	4a0a      	ldr	r2, [pc, #40]	@ (80010d0 <SysTick_Config+0x40>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ae:	210f      	movs	r1, #15
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f7ff ff8e 	bl	8000fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b8:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <SysTick_Config+0x40>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010be:	4b04      	ldr	r3, [pc, #16]	@ (80010d0 <SysTick_Config+0x40>)
 80010c0:	2207      	movs	r2, #7
 80010c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	e000e010 	.word	0xe000e010

080010d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff47 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010fc:	f7ff ff5c 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 8001100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	6978      	ldr	r0, [r7, #20]
 8001108:	f7ff ff8e 	bl	8001028 <NVIC_EncodePriority>
 800110c:	4602      	mov	r2, r0
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff5d 	bl	8000fd4 <__NVIC_SetPriority>
}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffb0 	bl	8001090 <SysTick_Config>
 8001130:	4603      	mov	r3, r0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b087      	sub	sp, #28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114a:	e160      	b.n	800140e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	2101      	movs	r1, #1
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	fa01 f303 	lsl.w	r3, r1, r3
 8001158:	4013      	ands	r3, r2
 800115a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	f000 8152 	beq.w	8001408 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b01      	cmp	r3, #1
 800116e:	d005      	beq.n	800117c <HAL_GPIO_Init+0x40>
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d130      	bne.n	80011de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	68da      	ldr	r2, [r3, #12]
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b2:	2201      	movs	r2, #1
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	091b      	lsrs	r3, r3, #4
 80011c8:	f003 0201 	and.w	r2, r3, #1
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d017      	beq.n	800121a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d123      	bne.n	800126e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	08da      	lsrs	r2, r3, #3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3208      	adds	r2, #8
 800122e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001232:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	220f      	movs	r2, #15
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	691a      	ldr	r2, [r3, #16]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f003 0307 	and.w	r3, r3, #7
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	08da      	lsrs	r2, r3, #3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3208      	adds	r2, #8
 8001268:	6939      	ldr	r1, [r7, #16]
 800126a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	2203      	movs	r2, #3
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 0203 	and.w	r2, r3, #3
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 80ac 	beq.w	8001408 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b0:	4b5e      	ldr	r3, [pc, #376]	@ (800142c <HAL_GPIO_Init+0x2f0>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a5d      	ldr	r2, [pc, #372]	@ (800142c <HAL_GPIO_Init+0x2f0>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b5b      	ldr	r3, [pc, #364]	@ (800142c <HAL_GPIO_Init+0x2f0>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012c8:	4a59      	ldr	r2, [pc, #356]	@ (8001430 <HAL_GPIO_Init+0x2f4>)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	3302      	adds	r3, #2
 80012d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	220f      	movs	r2, #15
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012f2:	d025      	beq.n	8001340 <HAL_GPIO_Init+0x204>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a4f      	ldr	r2, [pc, #316]	@ (8001434 <HAL_GPIO_Init+0x2f8>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d01f      	beq.n	800133c <HAL_GPIO_Init+0x200>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a4e      	ldr	r2, [pc, #312]	@ (8001438 <HAL_GPIO_Init+0x2fc>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d019      	beq.n	8001338 <HAL_GPIO_Init+0x1fc>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a4d      	ldr	r2, [pc, #308]	@ (800143c <HAL_GPIO_Init+0x300>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d013      	beq.n	8001334 <HAL_GPIO_Init+0x1f8>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a4c      	ldr	r2, [pc, #304]	@ (8001440 <HAL_GPIO_Init+0x304>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d00d      	beq.n	8001330 <HAL_GPIO_Init+0x1f4>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a4b      	ldr	r2, [pc, #300]	@ (8001444 <HAL_GPIO_Init+0x308>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d007      	beq.n	800132c <HAL_GPIO_Init+0x1f0>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a4a      	ldr	r2, [pc, #296]	@ (8001448 <HAL_GPIO_Init+0x30c>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d101      	bne.n	8001328 <HAL_GPIO_Init+0x1ec>
 8001324:	2306      	movs	r3, #6
 8001326:	e00c      	b.n	8001342 <HAL_GPIO_Init+0x206>
 8001328:	2307      	movs	r3, #7
 800132a:	e00a      	b.n	8001342 <HAL_GPIO_Init+0x206>
 800132c:	2305      	movs	r3, #5
 800132e:	e008      	b.n	8001342 <HAL_GPIO_Init+0x206>
 8001330:	2304      	movs	r3, #4
 8001332:	e006      	b.n	8001342 <HAL_GPIO_Init+0x206>
 8001334:	2303      	movs	r3, #3
 8001336:	e004      	b.n	8001342 <HAL_GPIO_Init+0x206>
 8001338:	2302      	movs	r3, #2
 800133a:	e002      	b.n	8001342 <HAL_GPIO_Init+0x206>
 800133c:	2301      	movs	r3, #1
 800133e:	e000      	b.n	8001342 <HAL_GPIO_Init+0x206>
 8001340:	2300      	movs	r3, #0
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	f002 0203 	and.w	r2, r2, #3
 8001348:	0092      	lsls	r2, r2, #2
 800134a:	4093      	lsls	r3, r2
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001352:	4937      	ldr	r1, [pc, #220]	@ (8001430 <HAL_GPIO_Init+0x2f4>)
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	089b      	lsrs	r3, r3, #2
 8001358:	3302      	adds	r3, #2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001360:	4b3a      	ldr	r3, [pc, #232]	@ (800144c <HAL_GPIO_Init+0x310>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	43db      	mvns	r3, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001384:	4a31      	ldr	r2, [pc, #196]	@ (800144c <HAL_GPIO_Init+0x310>)
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800138a:	4b30      	ldr	r3, [pc, #192]	@ (800144c <HAL_GPIO_Init+0x310>)
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013ae:	4a27      	ldr	r2, [pc, #156]	@ (800144c <HAL_GPIO_Init+0x310>)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013b4:	4b25      	ldr	r3, [pc, #148]	@ (800144c <HAL_GPIO_Init+0x310>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	43db      	mvns	r3, r3
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013d8:	4a1c      	ldr	r2, [pc, #112]	@ (800144c <HAL_GPIO_Init+0x310>)
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013de:	4b1b      	ldr	r3, [pc, #108]	@ (800144c <HAL_GPIO_Init+0x310>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001402:	4a12      	ldr	r2, [pc, #72]	@ (800144c <HAL_GPIO_Init+0x310>)
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	3301      	adds	r3, #1
 800140c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	fa22 f303 	lsr.w	r3, r2, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	f47f ae97 	bne.w	800114c <HAL_GPIO_Init+0x10>
  }
}
 800141e:	bf00      	nop
 8001420:	bf00      	nop
 8001422:	371c      	adds	r7, #28
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	40021000 	.word	0x40021000
 8001430:	40010000 	.word	0x40010000
 8001434:	48000400 	.word	0x48000400
 8001438:	48000800 	.word	0x48000800
 800143c:	48000c00 	.word	0x48000c00
 8001440:	48001000 	.word	0x48001000
 8001444:	48001400 	.word	0x48001400
 8001448:	48001800 	.word	0x48001800
 800144c:	40010400 	.word	0x40010400

08001450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	807b      	strh	r3, [r7, #2]
 800145c:	4613      	mov	r3, r2
 800145e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001460:	787b      	ldrb	r3, [r7, #1]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001466:	887a      	ldrh	r2, [r7, #2]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800146c:	e002      	b.n	8001474 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800146e:	887a      	ldrh	r2, [r7, #2]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001486:	af00      	add	r7, sp, #0
 8001488:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800148c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001490:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001492:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001496:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	f001 b83a 	b.w	800251a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014aa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 816f 	beq.w	800179a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014bc:	4bb5      	ldr	r3, [pc, #724]	@ (8001794 <HAL_RCC_OscConfig+0x314>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 030c 	and.w	r3, r3, #12
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	d00c      	beq.n	80014e2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014c8:	4bb2      	ldr	r3, [pc, #712]	@ (8001794 <HAL_RCC_OscConfig+0x314>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 030c 	and.w	r3, r3, #12
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d15c      	bne.n	800158e <HAL_RCC_OscConfig+0x10e>
 80014d4:	4baf      	ldr	r3, [pc, #700]	@ (8001794 <HAL_RCC_OscConfig+0x314>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80014dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014e0:	d155      	bne.n	800158e <HAL_RCC_OscConfig+0x10e>
 80014e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014e6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80014ee:	fa93 f3a3 	rbit	r3, r3
 80014f2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014f6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fa:	fab3 f383 	clz	r3, r3
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	095b      	lsrs	r3, r3, #5
 8001502:	b2db      	uxtb	r3, r3
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b01      	cmp	r3, #1
 800150c:	d102      	bne.n	8001514 <HAL_RCC_OscConfig+0x94>
 800150e:	4ba1      	ldr	r3, [pc, #644]	@ (8001794 <HAL_RCC_OscConfig+0x314>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	e015      	b.n	8001540 <HAL_RCC_OscConfig+0xc0>
 8001514:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001518:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001520:	fa93 f3a3 	rbit	r3, r3
 8001524:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001528:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800152c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001530:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001534:	fa93 f3a3 	rbit	r3, r3
 8001538:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800153c:	4b95      	ldr	r3, [pc, #596]	@ (8001794 <HAL_RCC_OscConfig+0x314>)
 800153e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001540:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001544:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001548:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800154c:	fa92 f2a2 	rbit	r2, r2
 8001550:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001554:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001558:	fab2 f282 	clz	r2, r2
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	f042 0220 	orr.w	r2, r2, #32
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	f002 021f 	and.w	r2, r2, #31
 8001568:	2101      	movs	r1, #1
 800156a:	fa01 f202 	lsl.w	r2, r1, r2
 800156e:	4013      	ands	r3, r2
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 8111 	beq.w	8001798 <HAL_RCC_OscConfig+0x318>
 8001576:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800157a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f040 8108 	bne.w	8001798 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	f000 bfc6 	b.w	800251a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800158e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001592:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800159e:	d106      	bne.n	80015ae <HAL_RCC_OscConfig+0x12e>
 80015a0:	4b7c      	ldr	r3, [pc, #496]	@ (8001794 <HAL_RCC_OscConfig+0x314>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a7b      	ldr	r2, [pc, #492]	@ (8001794 <HAL_RCC_OscConfig+0x314>)
 80015a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	e036      	b.n	800161c <HAL_RCC_OscConfig+0x19c>
 80015ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x158>
 80015be:	4b75      	ldr	r3, [pc, #468]	@ (8001794 <HAL_RCC_OscConfig+0x314>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a74      	ldr	r2, [pc, #464]	@ (8001794 <HAL_RCC_OscConfig+0x314>)
 80015c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	4b72      	ldr	r3, [pc, #456]	@ (8001794 <HAL_RCC_OscConfig+0x314>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a71      	ldr	r2, [pc, #452]	@ (8001794 <HAL_RCC_OscConfig+0x314>)
 80015d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	e021      	b.n	800161c <HAL_RCC_OscConfig+0x19c>
 80015d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015e8:	d10c      	bne.n	8001604 <HAL_RCC_OscConfig+0x184>
 80015ea:	4b6a      	ldr	r3, [pc, #424]	@ (8001794 <HAL_RCC_OscConfig+0x314>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a69      	ldr	r2, [pc, #420]	@ (8001794 <HAL_RCC_OscConfig+0x314>)
 80015f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	4b67      	ldr	r3, [pc, #412]	@ (8001794 <HAL_RCC_OscConfig+0x314>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a66      	ldr	r2, [pc, #408]	@ (8001794 <HAL_RCC_OscConfig+0x314>)
 80015fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	e00b      	b.n	800161c <HAL_RCC_OscConfig+0x19c>
 8001604:	4b63      	ldr	r3, [pc, #396]	@ (8001794 <HAL_RCC_OscConfig+0x314>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a62      	ldr	r2, [pc, #392]	@ (8001794 <HAL_RCC_OscConfig+0x314>)
 800160a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	4b60      	ldr	r3, [pc, #384]	@ (8001794 <HAL_RCC_OscConfig+0x314>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a5f      	ldr	r2, [pc, #380]	@ (8001794 <HAL_RCC_OscConfig+0x314>)
 8001616:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800161a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800161c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001620:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d059      	beq.n	80016e0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fc70 	bl	8000f10 <HAL_GetTick>
 8001630:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001634:	e00a      	b.n	800164c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001636:	f7ff fc6b 	bl	8000f10 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b64      	cmp	r3, #100	@ 0x64
 8001644:	d902      	bls.n	800164c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	f000 bf67 	b.w	800251a <HAL_RCC_OscConfig+0x109a>
 800164c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001650:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001654:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001658:	fa93 f3a3 	rbit	r3, r3
 800165c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001660:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001664:	fab3 f383 	clz	r3, r3
 8001668:	b2db      	uxtb	r3, r3
 800166a:	095b      	lsrs	r3, r3, #5
 800166c:	b2db      	uxtb	r3, r3
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b01      	cmp	r3, #1
 8001676:	d102      	bne.n	800167e <HAL_RCC_OscConfig+0x1fe>
 8001678:	4b46      	ldr	r3, [pc, #280]	@ (8001794 <HAL_RCC_OscConfig+0x314>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	e015      	b.n	80016aa <HAL_RCC_OscConfig+0x22a>
 800167e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001682:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001686:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800168a:	fa93 f3a3 	rbit	r3, r3
 800168e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001692:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001696:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800169a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800169e:	fa93 f3a3 	rbit	r3, r3
 80016a2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80016a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001794 <HAL_RCC_OscConfig+0x314>)
 80016a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016aa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016ae:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80016b2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80016b6:	fa92 f2a2 	rbit	r2, r2
 80016ba:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80016be:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80016c2:	fab2 f282 	clz	r2, r2
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	f042 0220 	orr.w	r2, r2, #32
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	f002 021f 	and.w	r2, r2, #31
 80016d2:	2101      	movs	r1, #1
 80016d4:	fa01 f202 	lsl.w	r2, r1, r2
 80016d8:	4013      	ands	r3, r2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0ab      	beq.n	8001636 <HAL_RCC_OscConfig+0x1b6>
 80016de:	e05c      	b.n	800179a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fc16 	bl	8000f10 <HAL_GetTick>
 80016e4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e8:	e00a      	b.n	8001700 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ea:	f7ff fc11 	bl	8000f10 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b64      	cmp	r3, #100	@ 0x64
 80016f8:	d902      	bls.n	8001700 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	f000 bf0d 	b.w	800251a <HAL_RCC_OscConfig+0x109a>
 8001700:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001704:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001708:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800170c:	fa93 f3a3 	rbit	r3, r3
 8001710:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001714:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001718:	fab3 f383 	clz	r3, r3
 800171c:	b2db      	uxtb	r3, r3
 800171e:	095b      	lsrs	r3, r3, #5
 8001720:	b2db      	uxtb	r3, r3
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b01      	cmp	r3, #1
 800172a:	d102      	bne.n	8001732 <HAL_RCC_OscConfig+0x2b2>
 800172c:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <HAL_RCC_OscConfig+0x314>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	e015      	b.n	800175e <HAL_RCC_OscConfig+0x2de>
 8001732:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001736:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800173e:	fa93 f3a3 	rbit	r3, r3
 8001742:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001746:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800174a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800174e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001752:	fa93 f3a3 	rbit	r3, r3
 8001756:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800175a:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <HAL_RCC_OscConfig+0x314>)
 800175c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001762:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001766:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800176a:	fa92 f2a2 	rbit	r2, r2
 800176e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001772:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001776:	fab2 f282 	clz	r2, r2
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	f042 0220 	orr.w	r2, r2, #32
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	f002 021f 	and.w	r2, r2, #31
 8001786:	2101      	movs	r1, #1
 8001788:	fa01 f202 	lsl.w	r2, r1, r2
 800178c:	4013      	ands	r3, r2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1ab      	bne.n	80016ea <HAL_RCC_OscConfig+0x26a>
 8001792:	e002      	b.n	800179a <HAL_RCC_OscConfig+0x31a>
 8001794:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800179a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800179e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 817f 	beq.w	8001aae <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017b0:	4ba7      	ldr	r3, [pc, #668]	@ (8001a50 <HAL_RCC_OscConfig+0x5d0>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 030c 	and.w	r3, r3, #12
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00c      	beq.n	80017d6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017bc:	4ba4      	ldr	r3, [pc, #656]	@ (8001a50 <HAL_RCC_OscConfig+0x5d0>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d173      	bne.n	80018b0 <HAL_RCC_OscConfig+0x430>
 80017c8:	4ba1      	ldr	r3, [pc, #644]	@ (8001a50 <HAL_RCC_OscConfig+0x5d0>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80017d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80017d4:	d16c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x430>
 80017d6:	2302      	movs	r3, #2
 80017d8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017dc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80017e0:	fa93 f3a3 	rbit	r3, r3
 80017e4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80017e8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ec:	fab3 f383 	clz	r3, r3
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	095b      	lsrs	r3, r3, #5
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d102      	bne.n	8001806 <HAL_RCC_OscConfig+0x386>
 8001800:	4b93      	ldr	r3, [pc, #588]	@ (8001a50 <HAL_RCC_OscConfig+0x5d0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	e013      	b.n	800182e <HAL_RCC_OscConfig+0x3ae>
 8001806:	2302      	movs	r3, #2
 8001808:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001810:	fa93 f3a3 	rbit	r3, r3
 8001814:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001818:	2302      	movs	r3, #2
 800181a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800181e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001822:	fa93 f3a3 	rbit	r3, r3
 8001826:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800182a:	4b89      	ldr	r3, [pc, #548]	@ (8001a50 <HAL_RCC_OscConfig+0x5d0>)
 800182c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182e:	2202      	movs	r2, #2
 8001830:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001834:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001838:	fa92 f2a2 	rbit	r2, r2
 800183c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001840:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001844:	fab2 f282 	clz	r2, r2
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	f042 0220 	orr.w	r2, r2, #32
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	f002 021f 	and.w	r2, r2, #31
 8001854:	2101      	movs	r1, #1
 8001856:	fa01 f202 	lsl.w	r2, r1, r2
 800185a:	4013      	ands	r3, r2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00a      	beq.n	8001876 <HAL_RCC_OscConfig+0x3f6>
 8001860:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001864:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d002      	beq.n	8001876 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	f000 be52 	b.w	800251a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001876:	4b76      	ldr	r3, [pc, #472]	@ (8001a50 <HAL_RCC_OscConfig+0x5d0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800187e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001882:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	21f8      	movs	r1, #248	@ 0xf8
 800188c:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001894:	fa91 f1a1 	rbit	r1, r1
 8001898:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800189c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80018a0:	fab1 f181 	clz	r1, r1
 80018a4:	b2c9      	uxtb	r1, r1
 80018a6:	408b      	lsls	r3, r1
 80018a8:	4969      	ldr	r1, [pc, #420]	@ (8001a50 <HAL_RCC_OscConfig+0x5d0>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ae:	e0fe      	b.n	8001aae <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 8088 	beq.w	80019d2 <HAL_RCC_OscConfig+0x552>
 80018c2:	2301      	movs	r3, #1
 80018c4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80018cc:	fa93 f3a3 	rbit	r3, r3
 80018d0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80018d4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d8:	fab3 f383 	clz	r3, r3
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018e2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	461a      	mov	r2, r3
 80018ea:	2301      	movs	r3, #1
 80018ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ee:	f7ff fb0f 	bl	8000f10 <HAL_GetTick>
 80018f2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f6:	e00a      	b.n	800190e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f8:	f7ff fb0a 	bl	8000f10 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d902      	bls.n	800190e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	f000 be06 	b.w	800251a <HAL_RCC_OscConfig+0x109a>
 800190e:	2302      	movs	r3, #2
 8001910:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001914:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001918:	fa93 f3a3 	rbit	r3, r3
 800191c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001920:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001924:	fab3 f383 	clz	r3, r3
 8001928:	b2db      	uxtb	r3, r3
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	b2db      	uxtb	r3, r3
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b01      	cmp	r3, #1
 8001936:	d102      	bne.n	800193e <HAL_RCC_OscConfig+0x4be>
 8001938:	4b45      	ldr	r3, [pc, #276]	@ (8001a50 <HAL_RCC_OscConfig+0x5d0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	e013      	b.n	8001966 <HAL_RCC_OscConfig+0x4e6>
 800193e:	2302      	movs	r3, #2
 8001940:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001944:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001948:	fa93 f3a3 	rbit	r3, r3
 800194c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001950:	2302      	movs	r3, #2
 8001952:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001956:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800195a:	fa93 f3a3 	rbit	r3, r3
 800195e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001962:	4b3b      	ldr	r3, [pc, #236]	@ (8001a50 <HAL_RCC_OscConfig+0x5d0>)
 8001964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001966:	2202      	movs	r2, #2
 8001968:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800196c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001970:	fa92 f2a2 	rbit	r2, r2
 8001974:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001978:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800197c:	fab2 f282 	clz	r2, r2
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	f042 0220 	orr.w	r2, r2, #32
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	f002 021f 	and.w	r2, r2, #31
 800198c:	2101      	movs	r1, #1
 800198e:	fa01 f202 	lsl.w	r2, r1, r2
 8001992:	4013      	ands	r3, r2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0af      	beq.n	80018f8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001998:	4b2d      	ldr	r3, [pc, #180]	@ (8001a50 <HAL_RCC_OscConfig+0x5d0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	21f8      	movs	r1, #248	@ 0xf8
 80019ae:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80019b6:	fa91 f1a1 	rbit	r1, r1
 80019ba:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80019be:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80019c2:	fab1 f181 	clz	r1, r1
 80019c6:	b2c9      	uxtb	r1, r1
 80019c8:	408b      	lsls	r3, r1
 80019ca:	4921      	ldr	r1, [pc, #132]	@ (8001a50 <HAL_RCC_OscConfig+0x5d0>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	600b      	str	r3, [r1, #0]
 80019d0:	e06d      	b.n	8001aae <HAL_RCC_OscConfig+0x62e>
 80019d2:	2301      	movs	r3, #1
 80019d4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80019dc:	fa93 f3a3 	rbit	r3, r3
 80019e0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80019e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e8:	fab3 f383 	clz	r3, r3
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80019f2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	461a      	mov	r2, r3
 80019fa:	2300      	movs	r3, #0
 80019fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fe:	f7ff fa87 	bl	8000f10 <HAL_GetTick>
 8001a02:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a06:	e00a      	b.n	8001a1e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a08:	f7ff fa82 	bl	8000f10 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d902      	bls.n	8001a1e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	f000 bd7e 	b.w	800251a <HAL_RCC_OscConfig+0x109a>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001a28:	fa93 f3a3 	rbit	r3, r3
 8001a2c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001a30:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a34:	fab3 f383 	clz	r3, r3
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d105      	bne.n	8001a54 <HAL_RCC_OscConfig+0x5d4>
 8001a48:	4b01      	ldr	r3, [pc, #4]	@ (8001a50 <HAL_RCC_OscConfig+0x5d0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	e016      	b.n	8001a7c <HAL_RCC_OscConfig+0x5fc>
 8001a4e:	bf00      	nop
 8001a50:	40021000 	.word	0x40021000
 8001a54:	2302      	movs	r3, #2
 8001a56:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001a5e:	fa93 f3a3 	rbit	r3, r3
 8001a62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001a66:	2302      	movs	r3, #2
 8001a68:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001a6c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001a70:	fa93 f3a3 	rbit	r3, r3
 8001a74:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001a78:	4bbf      	ldr	r3, [pc, #764]	@ (8001d78 <HAL_RCC_OscConfig+0x8f8>)
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001a82:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001a86:	fa92 f2a2 	rbit	r2, r2
 8001a8a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001a8e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001a92:	fab2 f282 	clz	r2, r2
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	f042 0220 	orr.w	r2, r2, #32
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	f002 021f 	and.w	r2, r2, #31
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1ac      	bne.n	8001a08 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ab2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 8113 	beq.w	8001cea <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ac4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d07c      	beq.n	8001bce <HAL_RCC_OscConfig+0x74e>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001ade:	fa93 f3a3 	rbit	r3, r3
 8001ae2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001ae6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aea:	fab3 f383 	clz	r3, r3
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	461a      	mov	r2, r3
 8001af2:	4ba2      	ldr	r3, [pc, #648]	@ (8001d7c <HAL_RCC_OscConfig+0x8fc>)
 8001af4:	4413      	add	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	461a      	mov	r2, r3
 8001afa:	2301      	movs	r3, #1
 8001afc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afe:	f7ff fa07 	bl	8000f10 <HAL_GetTick>
 8001b02:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b06:	e00a      	b.n	8001b1e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b08:	f7ff fa02 	bl	8000f10 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d902      	bls.n	8001b1e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	f000 bcfe 	b.w	800251a <HAL_RCC_OscConfig+0x109a>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001b28:	fa93 f2a3 	rbit	r2, r3
 8001b2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b30:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b3e:	2202      	movs	r2, #2
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	fa93 f2a3 	rbit	r2, r3
 8001b50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b5e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b62:	2202      	movs	r2, #2
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b6a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	fa93 f2a3 	rbit	r2, r3
 8001b74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b78:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001b7c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7e:	4b7e      	ldr	r3, [pc, #504]	@ (8001d78 <HAL_RCC_OscConfig+0x8f8>)
 8001b80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b86:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b8a:	2102      	movs	r1, #2
 8001b8c:	6019      	str	r1, [r3, #0]
 8001b8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b92:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	fa93 f1a3 	rbit	r1, r3
 8001b9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ba0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ba4:	6019      	str	r1, [r3, #0]
  return result;
 8001ba6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001baa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	fab3 f383 	clz	r3, r3
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	f003 031f 	and.w	r3, r3, #31
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d09d      	beq.n	8001b08 <HAL_RCC_OscConfig+0x688>
 8001bcc:	e08d      	b.n	8001cea <HAL_RCC_OscConfig+0x86a>
 8001bce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bde:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	fa93 f2a3 	rbit	r2, r3
 8001be8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bec:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001bf0:	601a      	str	r2, [r3, #0]
  return result;
 8001bf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bf6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001bfa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bfc:	fab3 f383 	clz	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	461a      	mov	r2, r3
 8001c04:	4b5d      	ldr	r3, [pc, #372]	@ (8001d7c <HAL_RCC_OscConfig+0x8fc>)
 8001c06:	4413      	add	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c10:	f7ff f97e 	bl	8000f10 <HAL_GetTick>
 8001c14:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c18:	e00a      	b.n	8001c30 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c1a:	f7ff f979 	bl	8000f10 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d902      	bls.n	8001c30 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	f000 bc75 	b.w	800251a <HAL_RCC_OscConfig+0x109a>
 8001c30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c34:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001c38:	2202      	movs	r2, #2
 8001c3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c40:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	fa93 f2a3 	rbit	r2, r3
 8001c4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c4e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c58:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	fa93 f2a3 	rbit	r2, r3
 8001c6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c72:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c7c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001c80:	2202      	movs	r2, #2
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c88:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	fa93 f2a3 	rbit	r2, r3
 8001c92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c96:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001c9a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c9c:	4b36      	ldr	r3, [pc, #216]	@ (8001d78 <HAL_RCC_OscConfig+0x8f8>)
 8001c9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ca0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001ca8:	2102      	movs	r1, #2
 8001caa:	6019      	str	r1, [r3, #0]
 8001cac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	fa93 f1a3 	rbit	r1, r3
 8001cba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cbe:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001cc2:	6019      	str	r1, [r3, #0]
  return result;
 8001cc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cc8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	fab3 f383 	clz	r3, r3
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	f003 031f 	and.w	r3, r3, #31
 8001cde:	2101      	movs	r1, #1
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d197      	bne.n	8001c1a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 81a5 	beq.w	800204a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d06:	4b1c      	ldr	r3, [pc, #112]	@ (8001d78 <HAL_RCC_OscConfig+0x8f8>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d116      	bne.n	8001d40 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d12:	4b19      	ldr	r3, [pc, #100]	@ (8001d78 <HAL_RCC_OscConfig+0x8f8>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	4a18      	ldr	r2, [pc, #96]	@ (8001d78 <HAL_RCC_OscConfig+0x8f8>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d1c:	61d3      	str	r3, [r2, #28]
 8001d1e:	4b16      	ldr	r3, [pc, #88]	@ (8001d78 <HAL_RCC_OscConfig+0x8f8>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001d26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d38:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	4b0f      	ldr	r3, [pc, #60]	@ (8001d80 <HAL_RCC_OscConfig+0x900>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d121      	bne.n	8001d90 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d80 <HAL_RCC_OscConfig+0x900>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0b      	ldr	r2, [pc, #44]	@ (8001d80 <HAL_RCC_OscConfig+0x900>)
 8001d52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d56:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d58:	f7ff f8da 	bl	8000f10 <HAL_GetTick>
 8001d5c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d60:	e010      	b.n	8001d84 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d62:	f7ff f8d5 	bl	8000f10 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	@ 0x64
 8001d70:	d908      	bls.n	8001d84 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e3d1      	b.n	800251a <HAL_RCC_OscConfig+0x109a>
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	10908120 	.word	0x10908120
 8001d80:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d84:	4b8d      	ldr	r3, [pc, #564]	@ (8001fbc <HAL_RCC_OscConfig+0xb3c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0e8      	beq.n	8001d62 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d94:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d106      	bne.n	8001dae <HAL_RCC_OscConfig+0x92e>
 8001da0:	4b87      	ldr	r3, [pc, #540]	@ (8001fc0 <HAL_RCC_OscConfig+0xb40>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4a86      	ldr	r2, [pc, #536]	@ (8001fc0 <HAL_RCC_OscConfig+0xb40>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6213      	str	r3, [r2, #32]
 8001dac:	e035      	b.n	8001e1a <HAL_RCC_OscConfig+0x99a>
 8001dae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001db2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x958>
 8001dbe:	4b80      	ldr	r3, [pc, #512]	@ (8001fc0 <HAL_RCC_OscConfig+0xb40>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4a7f      	ldr	r2, [pc, #508]	@ (8001fc0 <HAL_RCC_OscConfig+0xb40>)
 8001dc4:	f023 0301 	bic.w	r3, r3, #1
 8001dc8:	6213      	str	r3, [r2, #32]
 8001dca:	4b7d      	ldr	r3, [pc, #500]	@ (8001fc0 <HAL_RCC_OscConfig+0xb40>)
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	4a7c      	ldr	r2, [pc, #496]	@ (8001fc0 <HAL_RCC_OscConfig+0xb40>)
 8001dd0:	f023 0304 	bic.w	r3, r3, #4
 8001dd4:	6213      	str	r3, [r2, #32]
 8001dd6:	e020      	b.n	8001e1a <HAL_RCC_OscConfig+0x99a>
 8001dd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ddc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b05      	cmp	r3, #5
 8001de6:	d10c      	bne.n	8001e02 <HAL_RCC_OscConfig+0x982>
 8001de8:	4b75      	ldr	r3, [pc, #468]	@ (8001fc0 <HAL_RCC_OscConfig+0xb40>)
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	4a74      	ldr	r2, [pc, #464]	@ (8001fc0 <HAL_RCC_OscConfig+0xb40>)
 8001dee:	f043 0304 	orr.w	r3, r3, #4
 8001df2:	6213      	str	r3, [r2, #32]
 8001df4:	4b72      	ldr	r3, [pc, #456]	@ (8001fc0 <HAL_RCC_OscConfig+0xb40>)
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	4a71      	ldr	r2, [pc, #452]	@ (8001fc0 <HAL_RCC_OscConfig+0xb40>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	6213      	str	r3, [r2, #32]
 8001e00:	e00b      	b.n	8001e1a <HAL_RCC_OscConfig+0x99a>
 8001e02:	4b6f      	ldr	r3, [pc, #444]	@ (8001fc0 <HAL_RCC_OscConfig+0xb40>)
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	4a6e      	ldr	r2, [pc, #440]	@ (8001fc0 <HAL_RCC_OscConfig+0xb40>)
 8001e08:	f023 0301 	bic.w	r3, r3, #1
 8001e0c:	6213      	str	r3, [r2, #32]
 8001e0e:	4b6c      	ldr	r3, [pc, #432]	@ (8001fc0 <HAL_RCC_OscConfig+0xb40>)
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	4a6b      	ldr	r2, [pc, #428]	@ (8001fc0 <HAL_RCC_OscConfig+0xb40>)
 8001e14:	f023 0304 	bic.w	r3, r3, #4
 8001e18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e1e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 8081 	beq.w	8001f2e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2c:	f7ff f870 	bl	8000f10 <HAL_GetTick>
 8001e30:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e34:	e00b      	b.n	8001e4e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e36:	f7ff f86b 	bl	8000f10 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e365      	b.n	800251a <HAL_RCC_OscConfig+0x109a>
 8001e4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e52:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001e56:	2202      	movs	r2, #2
 8001e58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e5e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	fa93 f2a3 	rbit	r2, r3
 8001e68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e6c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e76:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e82:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	fa93 f2a3 	rbit	r2, r3
 8001e8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e90:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001e94:	601a      	str	r2, [r3, #0]
  return result;
 8001e96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e9a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001e9e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea0:	fab3 f383 	clz	r3, r3
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	f043 0302 	orr.w	r3, r3, #2
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d102      	bne.n	8001eba <HAL_RCC_OscConfig+0xa3a>
 8001eb4:	4b42      	ldr	r3, [pc, #264]	@ (8001fc0 <HAL_RCC_OscConfig+0xb40>)
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	e013      	b.n	8001ee2 <HAL_RCC_OscConfig+0xa62>
 8001eba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ebe:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eca:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	fa93 f2a3 	rbit	r2, r3
 8001ed4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ed8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	4b38      	ldr	r3, [pc, #224]	@ (8001fc0 <HAL_RCC_OscConfig+0xb40>)
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ee6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001eea:	2102      	movs	r1, #2
 8001eec:	6011      	str	r1, [r2, #0]
 8001eee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ef2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	fa92 f1a2 	rbit	r1, r2
 8001efc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f00:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001f04:	6011      	str	r1, [r2, #0]
  return result;
 8001f06:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f0a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	fab2 f282 	clz	r2, r2
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	f002 021f 	and.w	r2, r2, #31
 8001f20:	2101      	movs	r1, #1
 8001f22:	fa01 f202 	lsl.w	r2, r1, r2
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d084      	beq.n	8001e36 <HAL_RCC_OscConfig+0x9b6>
 8001f2c:	e083      	b.n	8002036 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2e:	f7fe ffef 	bl	8000f10 <HAL_GetTick>
 8001f32:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f36:	e00b      	b.n	8001f50 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f38:	f7fe ffea 	bl	8000f10 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e2e4      	b.n	800251a <HAL_RCC_OscConfig+0x109a>
 8001f50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f54:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001f58:	2202      	movs	r2, #2
 8001f5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f60:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	fa93 f2a3 	rbit	r2, r3
 8001f6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f6e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f78:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f84:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	fa93 f2a3 	rbit	r2, r3
 8001f8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f92:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001f96:	601a      	str	r2, [r3, #0]
  return result;
 8001f98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f9c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001fa0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa2:	fab3 f383 	clz	r3, r3
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	095b      	lsrs	r3, r3, #5
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	f043 0302 	orr.w	r3, r3, #2
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d106      	bne.n	8001fc4 <HAL_RCC_OscConfig+0xb44>
 8001fb6:	4b02      	ldr	r3, [pc, #8]	@ (8001fc0 <HAL_RCC_OscConfig+0xb40>)
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	e017      	b.n	8001fec <HAL_RCC_OscConfig+0xb6c>
 8001fbc:	40007000 	.word	0x40007000
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fc8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001fcc:	2202      	movs	r2, #2
 8001fce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	fa93 f2a3 	rbit	r2, r3
 8001fde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fe2:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	4bb3      	ldr	r3, [pc, #716]	@ (80022b8 <HAL_RCC_OscConfig+0xe38>)
 8001fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ff0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001ff4:	2102      	movs	r1, #2
 8001ff6:	6011      	str	r1, [r2, #0]
 8001ff8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ffc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002000:	6812      	ldr	r2, [r2, #0]
 8002002:	fa92 f1a2 	rbit	r1, r2
 8002006:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800200a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800200e:	6011      	str	r1, [r2, #0]
  return result;
 8002010:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002014:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002018:	6812      	ldr	r2, [r2, #0]
 800201a:	fab2 f282 	clz	r2, r2
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	f002 021f 	and.w	r2, r2, #31
 800202a:	2101      	movs	r1, #1
 800202c:	fa01 f202 	lsl.w	r2, r1, r2
 8002030:	4013      	ands	r3, r2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d180      	bne.n	8001f38 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002036:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800203a:	2b01      	cmp	r3, #1
 800203c:	d105      	bne.n	800204a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800203e:	4b9e      	ldr	r3, [pc, #632]	@ (80022b8 <HAL_RCC_OscConfig+0xe38>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	4a9d      	ldr	r2, [pc, #628]	@ (80022b8 <HAL_RCC_OscConfig+0xe38>)
 8002044:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002048:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800204a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800204e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 825e 	beq.w	8002518 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800205c:	4b96      	ldr	r3, [pc, #600]	@ (80022b8 <HAL_RCC_OscConfig+0xe38>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b08      	cmp	r3, #8
 8002066:	f000 821f 	beq.w	80024a8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800206a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800206e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	2b02      	cmp	r3, #2
 8002078:	f040 8170 	bne.w	800235c <HAL_RCC_OscConfig+0xedc>
 800207c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002080:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002084:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002088:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800208e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	fa93 f2a3 	rbit	r2, r3
 8002098:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800209c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80020a0:	601a      	str	r2, [r3, #0]
  return result;
 80020a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020a6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80020aa:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ac:	fab3 f383 	clz	r3, r3
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80020b6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	461a      	mov	r2, r3
 80020be:	2300      	movs	r3, #0
 80020c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c2:	f7fe ff25 	bl	8000f10 <HAL_GetTick>
 80020c6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ca:	e009      	b.n	80020e0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020cc:	f7fe ff20 	bl	8000f10 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e21c      	b.n	800251a <HAL_RCC_OscConfig+0x109a>
 80020e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020e4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80020e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020f2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	fa93 f2a3 	rbit	r2, r3
 80020fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002100:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002104:	601a      	str	r2, [r3, #0]
  return result;
 8002106:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800210a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800210e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002110:	fab3 f383 	clz	r3, r3
 8002114:	b2db      	uxtb	r3, r3
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	b2db      	uxtb	r3, r3
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b01      	cmp	r3, #1
 8002122:	d102      	bne.n	800212a <HAL_RCC_OscConfig+0xcaa>
 8002124:	4b64      	ldr	r3, [pc, #400]	@ (80022b8 <HAL_RCC_OscConfig+0xe38>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	e027      	b.n	800217a <HAL_RCC_OscConfig+0xcfa>
 800212a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800212e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002132:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002136:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002138:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800213c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	fa93 f2a3 	rbit	r2, r3
 8002146:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800214a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002154:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002158:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002162:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	fa93 f2a3 	rbit	r2, r3
 800216c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002170:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	4b50      	ldr	r3, [pc, #320]	@ (80022b8 <HAL_RCC_OscConfig+0xe38>)
 8002178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800217e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002182:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002186:	6011      	str	r1, [r2, #0]
 8002188:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800218c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002190:	6812      	ldr	r2, [r2, #0]
 8002192:	fa92 f1a2 	rbit	r1, r2
 8002196:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800219a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800219e:	6011      	str	r1, [r2, #0]
  return result;
 80021a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021a4:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	fab2 f282 	clz	r2, r2
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	f042 0220 	orr.w	r2, r2, #32
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	f002 021f 	and.w	r2, r2, #31
 80021ba:	2101      	movs	r1, #1
 80021bc:	fa01 f202 	lsl.w	r2, r1, r2
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d182      	bne.n	80020cc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c6:	4b3c      	ldr	r3, [pc, #240]	@ (80022b8 <HAL_RCC_OscConfig+0xe38>)
 80021c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ca:	f023 020f 	bic.w	r2, r3, #15
 80021ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021da:	4937      	ldr	r1, [pc, #220]	@ (80022b8 <HAL_RCC_OscConfig+0xe38>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80021e0:	4b35      	ldr	r3, [pc, #212]	@ (80022b8 <HAL_RCC_OscConfig+0xe38>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80021e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6a19      	ldr	r1, [r3, #32]
 80021f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	430b      	orrs	r3, r1
 8002202:	492d      	ldr	r1, [pc, #180]	@ (80022b8 <HAL_RCC_OscConfig+0xe38>)
 8002204:	4313      	orrs	r3, r2
 8002206:	604b      	str	r3, [r1, #4]
 8002208:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800220c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002210:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002214:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800221a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	fa93 f2a3 	rbit	r2, r3
 8002224:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002228:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800222c:	601a      	str	r2, [r3, #0]
  return result;
 800222e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002232:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002236:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002238:	fab3 f383 	clz	r3, r3
 800223c:	b2db      	uxtb	r3, r3
 800223e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002242:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	461a      	mov	r2, r3
 800224a:	2301      	movs	r3, #1
 800224c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224e:	f7fe fe5f 	bl	8000f10 <HAL_GetTick>
 8002252:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002256:	e009      	b.n	800226c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002258:	f7fe fe5a 	bl	8000f10 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e156      	b.n	800251a <HAL_RCC_OscConfig+0x109a>
 800226c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002270:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002274:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800227e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	fa93 f2a3 	rbit	r2, r3
 8002288:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800228c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002290:	601a      	str	r2, [r3, #0]
  return result;
 8002292:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002296:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800229a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800229c:	fab3 f383 	clz	r3, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	f043 0301 	orr.w	r3, r3, #1
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d105      	bne.n	80022bc <HAL_RCC_OscConfig+0xe3c>
 80022b0:	4b01      	ldr	r3, [pc, #4]	@ (80022b8 <HAL_RCC_OscConfig+0xe38>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	e02a      	b.n	800230c <HAL_RCC_OscConfig+0xe8c>
 80022b6:	bf00      	nop
 80022b8:	40021000 	.word	0x40021000
 80022bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022c0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80022c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ce:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	fa93 f2a3 	rbit	r2, r3
 80022d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022dc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80022ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	fa93 f2a3 	rbit	r2, r3
 80022fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002302:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	4b86      	ldr	r3, [pc, #536]	@ (8002524 <HAL_RCC_OscConfig+0x10a4>)
 800230a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002310:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002314:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002318:	6011      	str	r1, [r2, #0]
 800231a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800231e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	fa92 f1a2 	rbit	r1, r2
 8002328:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800232c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002330:	6011      	str	r1, [r2, #0]
  return result;
 8002332:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002336:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	fab2 f282 	clz	r2, r2
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	f042 0220 	orr.w	r2, r2, #32
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	f002 021f 	and.w	r2, r2, #31
 800234c:	2101      	movs	r1, #1
 800234e:	fa01 f202 	lsl.w	r2, r1, r2
 8002352:	4013      	ands	r3, r2
 8002354:	2b00      	cmp	r3, #0
 8002356:	f43f af7f 	beq.w	8002258 <HAL_RCC_OscConfig+0xdd8>
 800235a:	e0dd      	b.n	8002518 <HAL_RCC_OscConfig+0x1098>
 800235c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002360:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002364:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002368:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800236e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	fa93 f2a3 	rbit	r2, r3
 8002378:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800237c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002380:	601a      	str	r2, [r3, #0]
  return result;
 8002382:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002386:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800238a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238c:	fab3 f383 	clz	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002396:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	461a      	mov	r2, r3
 800239e:	2300      	movs	r3, #0
 80023a0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a2:	f7fe fdb5 	bl	8000f10 <HAL_GetTick>
 80023a6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023aa:	e009      	b.n	80023c0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ac:	f7fe fdb0 	bl	8000f10 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e0ac      	b.n	800251a <HAL_RCC_OscConfig+0x109a>
 80023c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023c4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80023c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023d2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	fa93 f2a3 	rbit	r2, r3
 80023dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023e0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80023e4:	601a      	str	r2, [r3, #0]
  return result;
 80023e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ea:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80023ee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b01      	cmp	r3, #1
 8002402:	d102      	bne.n	800240a <HAL_RCC_OscConfig+0xf8a>
 8002404:	4b47      	ldr	r3, [pc, #284]	@ (8002524 <HAL_RCC_OscConfig+0x10a4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	e027      	b.n	800245a <HAL_RCC_OscConfig+0xfda>
 800240a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800240e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002412:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002416:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800241c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	fa93 f2a3 	rbit	r2, r3
 8002426:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800242a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002434:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002438:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002442:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	fa93 f2a3 	rbit	r2, r3
 800244c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002450:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	4b33      	ldr	r3, [pc, #204]	@ (8002524 <HAL_RCC_OscConfig+0x10a4>)
 8002458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800245e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002462:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002466:	6011      	str	r1, [r2, #0]
 8002468:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800246c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	fa92 f1a2 	rbit	r1, r2
 8002476:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800247a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800247e:	6011      	str	r1, [r2, #0]
  return result;
 8002480:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002484:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002488:	6812      	ldr	r2, [r2, #0]
 800248a:	fab2 f282 	clz	r2, r2
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	f042 0220 	orr.w	r2, r2, #32
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	f002 021f 	and.w	r2, r2, #31
 800249a:	2101      	movs	r1, #1
 800249c:	fa01 f202 	lsl.w	r2, r1, r2
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d182      	bne.n	80023ac <HAL_RCC_OscConfig+0xf2c>
 80024a6:	e037      	b.n	8002518 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e02e      	b.n	800251a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024bc:	4b19      	ldr	r3, [pc, #100]	@ (8002524 <HAL_RCC_OscConfig+0x10a4>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80024c4:	4b17      	ldr	r3, [pc, #92]	@ (8002524 <HAL_RCC_OscConfig+0x10a4>)
 80024c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80024d0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80024d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024d8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d117      	bne.n	8002514 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80024e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80024e8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80024ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d10b      	bne.n	8002514 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80024fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002500:	f003 020f 	and.w	r2, r3, #15
 8002504:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002508:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40021000 	.word	0x40021000

08002528 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b09e      	sub	sp, #120	@ 0x78
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e162      	b.n	8002806 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002540:	4b90      	ldr	r3, [pc, #576]	@ (8002784 <HAL_RCC_ClockConfig+0x25c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d910      	bls.n	8002570 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b8d      	ldr	r3, [pc, #564]	@ (8002784 <HAL_RCC_ClockConfig+0x25c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 0207 	bic.w	r2, r3, #7
 8002556:	498b      	ldr	r1, [pc, #556]	@ (8002784 <HAL_RCC_ClockConfig+0x25c>)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	4b89      	ldr	r3, [pc, #548]	@ (8002784 <HAL_RCC_ClockConfig+0x25c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e14a      	b.n	8002806 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800257c:	4b82      	ldr	r3, [pc, #520]	@ (8002788 <HAL_RCC_ClockConfig+0x260>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	497f      	ldr	r1, [pc, #508]	@ (8002788 <HAL_RCC_ClockConfig+0x260>)
 800258a:	4313      	orrs	r3, r2
 800258c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 80dc 	beq.w	8002754 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d13c      	bne.n	800261e <HAL_RCC_ClockConfig+0xf6>
 80025a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025a8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80025b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b4:	fab3 f383 	clz	r3, r3
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d102      	bne.n	80025ce <HAL_RCC_ClockConfig+0xa6>
 80025c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002788 <HAL_RCC_ClockConfig+0x260>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	e00f      	b.n	80025ee <HAL_RCC_ClockConfig+0xc6>
 80025ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025d6:	fa93 f3a3 	rbit	r3, r3
 80025da:	667b      	str	r3, [r7, #100]	@ 0x64
 80025dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80025e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025ea:	4b67      	ldr	r3, [pc, #412]	@ (8002788 <HAL_RCC_ClockConfig+0x260>)
 80025ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025f2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80025f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80025f6:	fa92 f2a2 	rbit	r2, r2
 80025fa:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80025fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80025fe:	fab2 f282 	clz	r2, r2
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	f042 0220 	orr.w	r2, r2, #32
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	f002 021f 	and.w	r2, r2, #31
 800260e:	2101      	movs	r1, #1
 8002610:	fa01 f202 	lsl.w	r2, r1, r2
 8002614:	4013      	ands	r3, r2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d17b      	bne.n	8002712 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e0f3      	b.n	8002806 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d13c      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x178>
 8002626:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800262a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800262e:	fa93 f3a3 	rbit	r3, r3
 8002632:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002634:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002636:	fab3 f383 	clz	r3, r3
 800263a:	b2db      	uxtb	r3, r3
 800263c:	095b      	lsrs	r3, r3, #5
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b01      	cmp	r3, #1
 8002648:	d102      	bne.n	8002650 <HAL_RCC_ClockConfig+0x128>
 800264a:	4b4f      	ldr	r3, [pc, #316]	@ (8002788 <HAL_RCC_ClockConfig+0x260>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	e00f      	b.n	8002670 <HAL_RCC_ClockConfig+0x148>
 8002650:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002654:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002658:	fa93 f3a3 	rbit	r3, r3
 800265c:	647b      	str	r3, [r7, #68]	@ 0x44
 800265e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002662:	643b      	str	r3, [r7, #64]	@ 0x40
 8002664:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800266c:	4b46      	ldr	r3, [pc, #280]	@ (8002788 <HAL_RCC_ClockConfig+0x260>)
 800266e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002670:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002674:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002676:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002678:	fa92 f2a2 	rbit	r2, r2
 800267c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800267e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002680:	fab2 f282 	clz	r2, r2
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	f042 0220 	orr.w	r2, r2, #32
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	f002 021f 	and.w	r2, r2, #31
 8002690:	2101      	movs	r1, #1
 8002692:	fa01 f202 	lsl.w	r2, r1, r2
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d13a      	bne.n	8002712 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0b2      	b.n	8002806 <HAL_RCC_ClockConfig+0x2de>
 80026a0:	2302      	movs	r3, #2
 80026a2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a6:	fa93 f3a3 	rbit	r3, r3
 80026aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80026ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	095b      	lsrs	r3, r3, #5
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d102      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x1a0>
 80026c2:	4b31      	ldr	r3, [pc, #196]	@ (8002788 <HAL_RCC_ClockConfig+0x260>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	e00d      	b.n	80026e4 <HAL_RCC_ClockConfig+0x1bc>
 80026c8:	2302      	movs	r3, #2
 80026ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80026d4:	2302      	movs	r3, #2
 80026d6:	623b      	str	r3, [r7, #32]
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	61fb      	str	r3, [r7, #28]
 80026e0:	4b29      	ldr	r3, [pc, #164]	@ (8002788 <HAL_RCC_ClockConfig+0x260>)
 80026e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e4:	2202      	movs	r2, #2
 80026e6:	61ba      	str	r2, [r7, #24]
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	fa92 f2a2 	rbit	r2, r2
 80026ee:	617a      	str	r2, [r7, #20]
  return result;
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	fab2 f282 	clz	r2, r2
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	f042 0220 	orr.w	r2, r2, #32
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	f002 021f 	and.w	r2, r2, #31
 8002702:	2101      	movs	r1, #1
 8002704:	fa01 f202 	lsl.w	r2, r1, r2
 8002708:	4013      	ands	r3, r2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e079      	b.n	8002806 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002712:	4b1d      	ldr	r3, [pc, #116]	@ (8002788 <HAL_RCC_ClockConfig+0x260>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f023 0203 	bic.w	r2, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	491a      	ldr	r1, [pc, #104]	@ (8002788 <HAL_RCC_ClockConfig+0x260>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002724:	f7fe fbf4 	bl	8000f10 <HAL_GetTick>
 8002728:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272a:	e00a      	b.n	8002742 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800272c:	f7fe fbf0 	bl	8000f10 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e061      	b.n	8002806 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002742:	4b11      	ldr	r3, [pc, #68]	@ (8002788 <HAL_RCC_ClockConfig+0x260>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 020c 	and.w	r2, r3, #12
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	429a      	cmp	r2, r3
 8002752:	d1eb      	bne.n	800272c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002754:	4b0b      	ldr	r3, [pc, #44]	@ (8002784 <HAL_RCC_ClockConfig+0x25c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d214      	bcs.n	800278c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002762:	4b08      	ldr	r3, [pc, #32]	@ (8002784 <HAL_RCC_ClockConfig+0x25c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 0207 	bic.w	r2, r3, #7
 800276a:	4906      	ldr	r1, [pc, #24]	@ (8002784 <HAL_RCC_ClockConfig+0x25c>)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	4b04      	ldr	r3, [pc, #16]	@ (8002784 <HAL_RCC_ClockConfig+0x25c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d005      	beq.n	800278c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e040      	b.n	8002806 <HAL_RCC_ClockConfig+0x2de>
 8002784:	40022000 	.word	0x40022000
 8002788:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002798:	4b1d      	ldr	r3, [pc, #116]	@ (8002810 <HAL_RCC_ClockConfig+0x2e8>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	491a      	ldr	r1, [pc, #104]	@ (8002810 <HAL_RCC_ClockConfig+0x2e8>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d009      	beq.n	80027ca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027b6:	4b16      	ldr	r3, [pc, #88]	@ (8002810 <HAL_RCC_ClockConfig+0x2e8>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	4912      	ldr	r1, [pc, #72]	@ (8002810 <HAL_RCC_ClockConfig+0x2e8>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027ca:	f000 f829 	bl	8002820 <HAL_RCC_GetSysClockFreq>
 80027ce:	4601      	mov	r1, r0
 80027d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002810 <HAL_RCC_ClockConfig+0x2e8>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027d8:	22f0      	movs	r2, #240	@ 0xf0
 80027da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	fa92 f2a2 	rbit	r2, r2
 80027e2:	60fa      	str	r2, [r7, #12]
  return result;
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	fab2 f282 	clz	r2, r2
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	40d3      	lsrs	r3, r2
 80027ee:	4a09      	ldr	r2, [pc, #36]	@ (8002814 <HAL_RCC_ClockConfig+0x2ec>)
 80027f0:	5cd3      	ldrb	r3, [r2, r3]
 80027f2:	fa21 f303 	lsr.w	r3, r1, r3
 80027f6:	4a08      	ldr	r2, [pc, #32]	@ (8002818 <HAL_RCC_ClockConfig+0x2f0>)
 80027f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80027fa:	4b08      	ldr	r3, [pc, #32]	@ (800281c <HAL_RCC_ClockConfig+0x2f4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fe fb42 	bl	8000e88 <HAL_InitTick>
  
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3778      	adds	r7, #120	@ 0x78
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40021000 	.word	0x40021000
 8002814:	080037ec 	.word	0x080037ec
 8002818:	20000000 	.word	0x20000000
 800281c:	20000004 	.word	0x20000004

08002820 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002820:	b480      	push	{r7}
 8002822:	b08b      	sub	sp, #44	@ 0x2c
 8002824:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	2300      	movs	r3, #0
 8002830:	627b      	str	r3, [r7, #36]	@ 0x24
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800283a:	4b2a      	ldr	r3, [pc, #168]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b04      	cmp	r3, #4
 8002848:	d002      	beq.n	8002850 <HAL_RCC_GetSysClockFreq+0x30>
 800284a:	2b08      	cmp	r3, #8
 800284c:	d003      	beq.n	8002856 <HAL_RCC_GetSysClockFreq+0x36>
 800284e:	e03f      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002850:	4b25      	ldr	r3, [pc, #148]	@ (80028e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002852:	623b      	str	r3, [r7, #32]
      break;
 8002854:	e03f      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800285c:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002860:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	fa92 f2a2 	rbit	r2, r2
 8002868:	607a      	str	r2, [r7, #4]
  return result;
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	fab2 f282 	clz	r2, r2
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	40d3      	lsrs	r3, r2
 8002874:	4a1d      	ldr	r2, [pc, #116]	@ (80028ec <HAL_RCC_GetSysClockFreq+0xcc>)
 8002876:	5cd3      	ldrb	r3, [r2, r3]
 8002878:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800287a:	4b1a      	ldr	r3, [pc, #104]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800287c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	220f      	movs	r2, #15
 8002884:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	fa92 f2a2 	rbit	r2, r2
 800288c:	60fa      	str	r2, [r7, #12]
  return result;
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	fab2 f282 	clz	r2, r2
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	40d3      	lsrs	r3, r2
 8002898:	4a15      	ldr	r2, [pc, #84]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800289a:	5cd3      	ldrb	r3, [r2, r3]
 800289c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d008      	beq.n	80028ba <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028a8:	4a0f      	ldr	r2, [pc, #60]	@ (80028e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	fb02 f303 	mul.w	r3, r2, r3
 80028b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028b8:	e007      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028ba:	4a0b      	ldr	r2, [pc, #44]	@ (80028e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	fbb2 f2f3 	udiv	r2, r2, r3
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	fb02 f303 	mul.w	r3, r2, r3
 80028c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80028ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028cc:	623b      	str	r3, [r7, #32]
      break;
 80028ce:	e002      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028d0:	4b05      	ldr	r3, [pc, #20]	@ (80028e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80028d2:	623b      	str	r3, [r7, #32]
      break;
 80028d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028d6:	6a3b      	ldr	r3, [r7, #32]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	372c      	adds	r7, #44	@ 0x2c
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	40021000 	.word	0x40021000
 80028e8:	007a1200 	.word	0x007a1200
 80028ec:	080037fc 	.word	0x080037fc
 80028f0:	0800380c 	.word	0x0800380c

080028f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e09d      	b.n	8002a42 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290a:	2b00      	cmp	r3, #0
 800290c:	d108      	bne.n	8002920 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002916:	d009      	beq.n	800292c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	61da      	str	r2, [r3, #28]
 800291e:	e005      	b.n	800292c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fe f9bc 	bl	8000cc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002962:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800296c:	d902      	bls.n	8002974 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	e002      	b.n	800297a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002974:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002978:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002982:	d007      	beq.n	8002994 <HAL_SPI_Init+0xa0>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800298c:	d002      	beq.n	8002994 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80029a4:	431a      	orrs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	431a      	orrs	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d6:	ea42 0103 	orr.w	r1, r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029de:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	0c1b      	lsrs	r3, r3, #16
 80029f0:	f003 0204 	and.w	r2, r3, #4
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002a10:	ea42 0103 	orr.w	r1, r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	69da      	ldr	r2, [r3, #28]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b088      	sub	sp, #32
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	603b      	str	r3, [r7, #0]
 8002a56:	4613      	mov	r3, r2
 8002a58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_SPI_Transmit+0x22>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e15f      	b.n	8002d2c <HAL_SPI_Transmit+0x2e2>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a74:	f7fe fa4c 	bl	8000f10 <HAL_GetTick>
 8002a78:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a7a:	88fb      	ldrh	r3, [r7, #6]
 8002a7c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d002      	beq.n	8002a90 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a8e:	e148      	b.n	8002d22 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <HAL_SPI_Transmit+0x52>
 8002a96:	88fb      	ldrh	r3, [r7, #6]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d102      	bne.n	8002aa2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002aa0:	e13f      	b.n	8002d22 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	88fa      	ldrh	r2, [r7, #6]
 8002aba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	88fa      	ldrh	r2, [r7, #6]
 8002ac0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002aec:	d10f      	bne.n	8002b0e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002afc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b18:	2b40      	cmp	r3, #64	@ 0x40
 8002b1a:	d007      	beq.n	8002b2c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b34:	d94f      	bls.n	8002bd6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <HAL_SPI_Transmit+0xfa>
 8002b3e:	8afb      	ldrh	r3, [r7, #22]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d142      	bne.n	8002bca <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b48:	881a      	ldrh	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b54:	1c9a      	adds	r2, r3, #2
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b68:	e02f      	b.n	8002bca <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d112      	bne.n	8002b9e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b7c:	881a      	ldrh	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b88:	1c9a      	adds	r2, r3, #2
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002b9c:	e015      	b.n	8002bca <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b9e:	f7fe f9b7 	bl	8000f10 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d803      	bhi.n	8002bb6 <HAL_SPI_Transmit+0x16c>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb4:	d102      	bne.n	8002bbc <HAL_SPI_Transmit+0x172>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d106      	bne.n	8002bca <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002bc8:	e0ab      	b.n	8002d22 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1ca      	bne.n	8002b6a <HAL_SPI_Transmit+0x120>
 8002bd4:	e080      	b.n	8002cd8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <HAL_SPI_Transmit+0x19a>
 8002bde:	8afb      	ldrh	r3, [r7, #22]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d174      	bne.n	8002cce <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d912      	bls.n	8002c14 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf2:	881a      	ldrh	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bfe:	1c9a      	adds	r2, r3, #2
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	3b02      	subs	r3, #2
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c12:	e05c      	b.n	8002cce <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	330c      	adds	r3, #12
 8002c1e:	7812      	ldrb	r2, [r2, #0]
 8002c20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002c3a:	e048      	b.n	8002cce <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d12b      	bne.n	8002ca2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d912      	bls.n	8002c7a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c58:	881a      	ldrh	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c64:	1c9a      	adds	r2, r3, #2
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3b02      	subs	r3, #2
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c78:	e029      	b.n	8002cce <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	330c      	adds	r3, #12
 8002c84:	7812      	ldrb	r2, [r2, #0]
 8002c86:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ca0:	e015      	b.n	8002cce <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ca2:	f7fe f935 	bl	8000f10 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d803      	bhi.n	8002cba <HAL_SPI_Transmit+0x270>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb8:	d102      	bne.n	8002cc0 <HAL_SPI_Transmit+0x276>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d106      	bne.n	8002cce <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002ccc:	e029      	b.n	8002d22 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1b1      	bne.n	8002c3c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	6839      	ldr	r1, [r7, #0]
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 fd07 	bl	80036f0 <SPI_EndRxTxTransaction>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2220      	movs	r2, #32
 8002cec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10a      	bne.n	8002d0c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	77fb      	strb	r3, [r7, #31]
 8002d18:	e003      	b.n	8002d22 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002d2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3720      	adds	r7, #32
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	4613      	mov	r3, r2
 8002d42:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d002      	beq.n	8002d5a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002d54:	2302      	movs	r3, #2
 8002d56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d58:	e11a      	b.n	8002f90 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d62:	d112      	bne.n	8002d8a <HAL_SPI_Receive+0x56>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10e      	bne.n	8002d8a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2204      	movs	r2, #4
 8002d70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002d74:	88fa      	ldrh	r2, [r7, #6]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 f90e 	bl	8002fa2 <HAL_SPI_TransmitReceive>
 8002d86:	4603      	mov	r3, r0
 8002d88:	e107      	b.n	8002f9a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_SPI_Receive+0x64>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e100      	b.n	8002f9a <HAL_SPI_Receive+0x266>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002da0:	f7fe f8b6 	bl	8000f10 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <HAL_SPI_Receive+0x7e>
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d102      	bne.n	8002db8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002db6:	e0eb      	b.n	8002f90 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2204      	movs	r2, #4
 8002dbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	88fa      	ldrh	r2, [r7, #6]
 8002dd0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	88fa      	ldrh	r2, [r7, #6]
 8002dd8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e02:	d908      	bls.n	8002e16 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e12:	605a      	str	r2, [r3, #4]
 8002e14:	e007      	b.n	8002e26 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e24:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e2e:	d10f      	bne.n	8002e50 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e4e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e5a:	2b40      	cmp	r3, #64	@ 0x40
 8002e5c:	d007      	beq.n	8002e6e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e6c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e76:	d86f      	bhi.n	8002f58 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002e78:	e034      	b.n	8002ee4 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d117      	bne.n	8002eb8 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f103 020c 	add.w	r2, r3, #12
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e94:	7812      	ldrb	r2, [r2, #0]
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002eb6:	e015      	b.n	8002ee4 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eb8:	f7fe f82a 	bl	8000f10 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d803      	bhi.n	8002ed0 <HAL_SPI_Receive+0x19c>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ece:	d102      	bne.n	8002ed6 <HAL_SPI_Receive+0x1a2>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002ee2:	e055      	b.n	8002f90 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1c4      	bne.n	8002e7a <HAL_SPI_Receive+0x146>
 8002ef0:	e038      	b.n	8002f64 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d115      	bne.n	8002f2c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	b292      	uxth	r2, r2
 8002f0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	1c9a      	adds	r2, r3, #2
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002f2a:	e015      	b.n	8002f58 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f2c:	f7fd fff0 	bl	8000f10 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d803      	bhi.n	8002f44 <HAL_SPI_Receive+0x210>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f42:	d102      	bne.n	8002f4a <HAL_SPI_Receive+0x216>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002f56:	e01b      	b.n	8002f90 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1c6      	bne.n	8002ef2 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	6839      	ldr	r1, [r7, #0]
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 fb69 	bl	8003640 <SPI_EndRxTransaction>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2220      	movs	r2, #32
 8002f78:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	75fb      	strb	r3, [r7, #23]
 8002f86:	e003      	b.n	8002f90 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b08a      	sub	sp, #40	@ 0x28
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	607a      	str	r2, [r7, #4]
 8002fae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_SPI_TransmitReceive+0x26>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e20a      	b.n	80033de <HAL_SPI_TransmitReceive+0x43c>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fd0:	f7fd ff9e 	bl	8000f10 <HAL_GetTick>
 8002fd4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002fdc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002fe4:	887b      	ldrh	r3, [r7, #2]
 8002fe6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002fe8:	887b      	ldrh	r3, [r7, #2]
 8002fea:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002fec:	7efb      	ldrb	r3, [r7, #27]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d00e      	beq.n	8003010 <HAL_SPI_TransmitReceive+0x6e>
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ff8:	d106      	bne.n	8003008 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d102      	bne.n	8003008 <HAL_SPI_TransmitReceive+0x66>
 8003002:	7efb      	ldrb	r3, [r7, #27]
 8003004:	2b04      	cmp	r3, #4
 8003006:	d003      	beq.n	8003010 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003008:	2302      	movs	r3, #2
 800300a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800300e:	e1e0      	b.n	80033d2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_SPI_TransmitReceive+0x80>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <HAL_SPI_TransmitReceive+0x80>
 800301c:	887b      	ldrh	r3, [r7, #2]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d103      	bne.n	800302a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003028:	e1d3      	b.n	80033d2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b04      	cmp	r3, #4
 8003034:	d003      	beq.n	800303e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2205      	movs	r2, #5
 800303a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	887a      	ldrh	r2, [r7, #2]
 800304e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	887a      	ldrh	r2, [r7, #2]
 8003056:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	887a      	ldrh	r2, [r7, #2]
 8003064:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	887a      	ldrh	r2, [r7, #2]
 800306a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003080:	d802      	bhi.n	8003088 <HAL_SPI_TransmitReceive+0xe6>
 8003082:	8a3b      	ldrh	r3, [r7, #16]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d908      	bls.n	800309a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003096:	605a      	str	r2, [r3, #4]
 8003098:	e007      	b.n	80030aa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80030a8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b4:	2b40      	cmp	r3, #64	@ 0x40
 80030b6:	d007      	beq.n	80030c8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030d0:	f240 8081 	bls.w	80031d6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <HAL_SPI_TransmitReceive+0x140>
 80030dc:	8a7b      	ldrh	r3, [r7, #18]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d16d      	bne.n	80031be <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e6:	881a      	ldrh	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f2:	1c9a      	adds	r2, r3, #2
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003106:	e05a      	b.n	80031be <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b02      	cmp	r3, #2
 8003114:	d11b      	bne.n	800314e <HAL_SPI_TransmitReceive+0x1ac>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800311a:	b29b      	uxth	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d016      	beq.n	800314e <HAL_SPI_TransmitReceive+0x1ac>
 8003120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003122:	2b01      	cmp	r3, #1
 8003124:	d113      	bne.n	800314e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800312a:	881a      	ldrh	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003136:	1c9a      	adds	r2, r3, #2
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b01      	cmp	r3, #1
 800315a:	d11c      	bne.n	8003196 <HAL_SPI_TransmitReceive+0x1f4>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003162:	b29b      	uxth	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d016      	beq.n	8003196 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003172:	b292      	uxth	r2, r2
 8003174:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317a:	1c9a      	adds	r2, r3, #2
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003186:	b29b      	uxth	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003192:	2301      	movs	r3, #1
 8003194:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003196:	f7fd febb 	bl	8000f10 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d80b      	bhi.n	80031be <HAL_SPI_TransmitReceive+0x21c>
 80031a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ac:	d007      	beq.n	80031be <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80031bc:	e109      	b.n	80033d2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d19f      	bne.n	8003108 <HAL_SPI_TransmitReceive+0x166>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d199      	bne.n	8003108 <HAL_SPI_TransmitReceive+0x166>
 80031d4:	e0e3      	b.n	800339e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_SPI_TransmitReceive+0x244>
 80031de:	8a7b      	ldrh	r3, [r7, #18]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	f040 80cf 	bne.w	8003384 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d912      	bls.n	8003216 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f4:	881a      	ldrh	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003200:	1c9a      	adds	r2, r3, #2
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b02      	subs	r3, #2
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003214:	e0b6      	b.n	8003384 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	330c      	adds	r3, #12
 8003220:	7812      	ldrb	r2, [r2, #0]
 8003222:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003232:	b29b      	uxth	r3, r3
 8003234:	3b01      	subs	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800323c:	e0a2      	b.n	8003384 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b02      	cmp	r3, #2
 800324a:	d134      	bne.n	80032b6 <HAL_SPI_TransmitReceive+0x314>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d02f      	beq.n	80032b6 <HAL_SPI_TransmitReceive+0x314>
 8003256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003258:	2b01      	cmp	r3, #1
 800325a:	d12c      	bne.n	80032b6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b01      	cmp	r3, #1
 8003264:	d912      	bls.n	800328c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800326a:	881a      	ldrh	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003276:	1c9a      	adds	r2, r3, #2
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003280:	b29b      	uxth	r3, r3
 8003282:	3b02      	subs	r3, #2
 8003284:	b29a      	uxth	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800328a:	e012      	b.n	80032b2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	330c      	adds	r3, #12
 8003296:	7812      	ldrb	r2, [r2, #0]
 8003298:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d148      	bne.n	8003356 <HAL_SPI_TransmitReceive+0x3b4>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d042      	beq.n	8003356 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d923      	bls.n	8003324 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e6:	b292      	uxth	r2, r2
 80032e8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	1c9a      	adds	r2, r3, #2
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b02      	subs	r3, #2
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b01      	cmp	r3, #1
 8003310:	d81f      	bhi.n	8003352 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	e016      	b.n	8003352 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f103 020c 	add.w	r2, r3, #12
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	7812      	ldrb	r2, [r2, #0]
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003352:	2301      	movs	r3, #1
 8003354:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003356:	f7fd fddb 	bl	8000f10 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003362:	429a      	cmp	r2, r3
 8003364:	d803      	bhi.n	800336e <HAL_SPI_TransmitReceive+0x3cc>
 8003366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336c:	d102      	bne.n	8003374 <HAL_SPI_TransmitReceive+0x3d2>
 800336e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003370:	2b00      	cmp	r3, #0
 8003372:	d107      	bne.n	8003384 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003382:	e026      	b.n	80033d2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	f47f af57 	bne.w	800323e <HAL_SPI_TransmitReceive+0x29c>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	f47f af50 	bne.w	800323e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800339e:	69fa      	ldr	r2, [r7, #28]
 80033a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f9a4 	bl	80036f0 <SPI_EndRxTxTransaction>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d005      	beq.n	80033ba <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033c8:	e003      	b.n	80033d2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80033da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3728      	adds	r7, #40	@ 0x28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80033f4:	b2db      	uxtb	r3, r3
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	4613      	mov	r3, r2
 8003412:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003414:	f7fd fd7c 	bl	8000f10 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	4413      	add	r3, r2
 8003422:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003424:	f7fd fd74 	bl	8000f10 <HAL_GetTick>
 8003428:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800342a:	4b39      	ldr	r3, [pc, #228]	@ (8003510 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	015b      	lsls	r3, r3, #5
 8003430:	0d1b      	lsrs	r3, r3, #20
 8003432:	69fa      	ldr	r2, [r7, #28]
 8003434:	fb02 f303 	mul.w	r3, r2, r3
 8003438:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800343a:	e054      	b.n	80034e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003442:	d050      	beq.n	80034e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003444:	f7fd fd64 	bl	8000f10 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	69fa      	ldr	r2, [r7, #28]
 8003450:	429a      	cmp	r2, r3
 8003452:	d902      	bls.n	800345a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d13d      	bne.n	80034d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003468:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003472:	d111      	bne.n	8003498 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800347c:	d004      	beq.n	8003488 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003486:	d107      	bne.n	8003498 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003496:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034a0:	d10f      	bne.n	80034c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e017      	b.n	8003506 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4013      	ands	r3, r2
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	bf0c      	ite	eq
 80034f6:	2301      	moveq	r3, #1
 80034f8:	2300      	movne	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	461a      	mov	r2, r3
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	429a      	cmp	r2, r3
 8003502:	d19b      	bne.n	800343c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3720      	adds	r7, #32
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000000 	.word	0x20000000

08003514 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08a      	sub	sp, #40	@ 0x28
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003522:	2300      	movs	r3, #0
 8003524:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003526:	f7fd fcf3 	bl	8000f10 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352e:	1a9b      	subs	r3, r3, r2
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	4413      	add	r3, r2
 8003534:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003536:	f7fd fceb 	bl	8000f10 <HAL_GetTick>
 800353a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	330c      	adds	r3, #12
 8003542:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003544:	4b3d      	ldr	r3, [pc, #244]	@ (800363c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	00da      	lsls	r2, r3, #3
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	0d1b      	lsrs	r3, r3, #20
 8003554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003556:	fb02 f303 	mul.w	r3, r2, r3
 800355a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800355c:	e060      	b.n	8003620 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003564:	d107      	bne.n	8003576 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d104      	bne.n	8003576 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003574:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357c:	d050      	beq.n	8003620 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800357e:	f7fd fcc7 	bl	8000f10 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800358a:	429a      	cmp	r2, r3
 800358c:	d902      	bls.n	8003594 <SPI_WaitFifoStateUntilTimeout+0x80>
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003590:	2b00      	cmp	r3, #0
 8003592:	d13d      	bne.n	8003610 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035ac:	d111      	bne.n	80035d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035b6:	d004      	beq.n	80035c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035c0:	d107      	bne.n	80035d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035da:	d10f      	bne.n	80035fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e010      	b.n	8003632 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003616:	2300      	movs	r3, #0
 8003618:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	3b01      	subs	r3, #1
 800361e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4013      	ands	r3, r2
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	429a      	cmp	r2, r3
 800362e:	d196      	bne.n	800355e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3728      	adds	r7, #40	@ 0x28
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	20000000 	.word	0x20000000

08003640 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af02      	add	r7, sp, #8
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003654:	d111      	bne.n	800367a <SPI_EndRxTransaction+0x3a>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800365e:	d004      	beq.n	800366a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003668:	d107      	bne.n	800367a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003678:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2200      	movs	r2, #0
 8003682:	2180      	movs	r1, #128	@ 0x80
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff febd 	bl	8003404 <SPI_WaitFlagStateUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d007      	beq.n	80036a0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003694:	f043 0220 	orr.w	r2, r3, #32
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e023      	b.n	80036e8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036a8:	d11d      	bne.n	80036e6 <SPI_EndRxTransaction+0xa6>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036b2:	d004      	beq.n	80036be <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036bc:	d113      	bne.n	80036e6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f7ff ff22 	bl	8003514 <SPI_WaitFifoStateUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d007      	beq.n	80036e6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036da:	f043 0220 	orr.w	r2, r3, #32
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e000      	b.n	80036e8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2200      	movs	r2, #0
 8003704:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f7ff ff03 	bl	8003514 <SPI_WaitFifoStateUntilTimeout>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d007      	beq.n	8003724 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003718:	f043 0220 	orr.w	r2, r3, #32
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e027      	b.n	8003774 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2200      	movs	r2, #0
 800372c:	2180      	movs	r1, #128	@ 0x80
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f7ff fe68 	bl	8003404 <SPI_WaitFlagStateUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d007      	beq.n	800374a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800373e:	f043 0220 	orr.w	r2, r3, #32
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e014      	b.n	8003774 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2200      	movs	r2, #0
 8003752:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f7ff fedc 	bl	8003514 <SPI_WaitFifoStateUntilTimeout>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d007      	beq.n	8003772 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003766:	f043 0220 	orr.w	r2, r3, #32
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e000      	b.n	8003774 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <memset>:
 800377c:	4402      	add	r2, r0
 800377e:	4603      	mov	r3, r0
 8003780:	4293      	cmp	r3, r2
 8003782:	d100      	bne.n	8003786 <memset+0xa>
 8003784:	4770      	bx	lr
 8003786:	f803 1b01 	strb.w	r1, [r3], #1
 800378a:	e7f9      	b.n	8003780 <memset+0x4>

0800378c <__libc_init_array>:
 800378c:	b570      	push	{r4, r5, r6, lr}
 800378e:	4d0d      	ldr	r5, [pc, #52]	@ (80037c4 <__libc_init_array+0x38>)
 8003790:	4c0d      	ldr	r4, [pc, #52]	@ (80037c8 <__libc_init_array+0x3c>)
 8003792:	1b64      	subs	r4, r4, r5
 8003794:	10a4      	asrs	r4, r4, #2
 8003796:	2600      	movs	r6, #0
 8003798:	42a6      	cmp	r6, r4
 800379a:	d109      	bne.n	80037b0 <__libc_init_array+0x24>
 800379c:	4d0b      	ldr	r5, [pc, #44]	@ (80037cc <__libc_init_array+0x40>)
 800379e:	4c0c      	ldr	r4, [pc, #48]	@ (80037d0 <__libc_init_array+0x44>)
 80037a0:	f000 f818 	bl	80037d4 <_init>
 80037a4:	1b64      	subs	r4, r4, r5
 80037a6:	10a4      	asrs	r4, r4, #2
 80037a8:	2600      	movs	r6, #0
 80037aa:	42a6      	cmp	r6, r4
 80037ac:	d105      	bne.n	80037ba <__libc_init_array+0x2e>
 80037ae:	bd70      	pop	{r4, r5, r6, pc}
 80037b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037b4:	4798      	blx	r3
 80037b6:	3601      	adds	r6, #1
 80037b8:	e7ee      	b.n	8003798 <__libc_init_array+0xc>
 80037ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80037be:	4798      	blx	r3
 80037c0:	3601      	adds	r6, #1
 80037c2:	e7f2      	b.n	80037aa <__libc_init_array+0x1e>
 80037c4:	0800381c 	.word	0x0800381c
 80037c8:	0800381c 	.word	0x0800381c
 80037cc:	0800381c 	.word	0x0800381c
 80037d0:	08003820 	.word	0x08003820

080037d4 <_init>:
 80037d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d6:	bf00      	nop
 80037d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037da:	bc08      	pop	{r3}
 80037dc:	469e      	mov	lr, r3
 80037de:	4770      	bx	lr

080037e0 <_fini>:
 80037e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e2:	bf00      	nop
 80037e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e6:	bc08      	pop	{r3}
 80037e8:	469e      	mov	lr, r3
 80037ea:	4770      	bx	lr
