
MFK_HAL_SPI_002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061e0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  08006368  08006368  00016368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006824  08006824  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08006824  08006824  00016824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800682c  0800682c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800682c  0800682c  0001682c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006830  08006830  00016830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          00002738  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000275c  2000275c  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a03c  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001ec4  00000000  00000000  0002a0d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009d8  00000000  00000000  0002bf98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000762  00000000  00000000  0002c970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000218b3  00000000  00000000  0002d0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ea5c  00000000  00000000  0004e985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c2db6  00000000  00000000  0005d3e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000027a8  00000000  00000000  00120198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00122940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006350 	.word	0x08006350

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08006350 	.word	0x08006350

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_uldivmod>:
 80007d4:	b953      	cbnz	r3, 80007ec <__aeabi_uldivmod+0x18>
 80007d6:	b94a      	cbnz	r2, 80007ec <__aeabi_uldivmod+0x18>
 80007d8:	2900      	cmp	r1, #0
 80007da:	bf08      	it	eq
 80007dc:	2800      	cmpeq	r0, #0
 80007de:	bf1c      	itt	ne
 80007e0:	f04f 31ff 	movne.w	r1, #4294967295
 80007e4:	f04f 30ff 	movne.w	r0, #4294967295
 80007e8:	f000 b970 	b.w	8000acc <__aeabi_idiv0>
 80007ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f4:	f000 f806 	bl	8000804 <__udivmoddi4>
 80007f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr

08000804 <__udivmoddi4>:
 8000804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000808:	9e08      	ldr	r6, [sp, #32]
 800080a:	460d      	mov	r5, r1
 800080c:	4604      	mov	r4, r0
 800080e:	460f      	mov	r7, r1
 8000810:	2b00      	cmp	r3, #0
 8000812:	d14a      	bne.n	80008aa <__udivmoddi4+0xa6>
 8000814:	428a      	cmp	r2, r1
 8000816:	4694      	mov	ip, r2
 8000818:	d965      	bls.n	80008e6 <__udivmoddi4+0xe2>
 800081a:	fab2 f382 	clz	r3, r2
 800081e:	b143      	cbz	r3, 8000832 <__udivmoddi4+0x2e>
 8000820:	fa02 fc03 	lsl.w	ip, r2, r3
 8000824:	f1c3 0220 	rsb	r2, r3, #32
 8000828:	409f      	lsls	r7, r3
 800082a:	fa20 f202 	lsr.w	r2, r0, r2
 800082e:	4317      	orrs	r7, r2
 8000830:	409c      	lsls	r4, r3
 8000832:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000836:	fa1f f58c 	uxth.w	r5, ip
 800083a:	fbb7 f1fe 	udiv	r1, r7, lr
 800083e:	0c22      	lsrs	r2, r4, #16
 8000840:	fb0e 7711 	mls	r7, lr, r1, r7
 8000844:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000848:	fb01 f005 	mul.w	r0, r1, r5
 800084c:	4290      	cmp	r0, r2
 800084e:	d90a      	bls.n	8000866 <__udivmoddi4+0x62>
 8000850:	eb1c 0202 	adds.w	r2, ip, r2
 8000854:	f101 37ff 	add.w	r7, r1, #4294967295
 8000858:	f080 811c 	bcs.w	8000a94 <__udivmoddi4+0x290>
 800085c:	4290      	cmp	r0, r2
 800085e:	f240 8119 	bls.w	8000a94 <__udivmoddi4+0x290>
 8000862:	3902      	subs	r1, #2
 8000864:	4462      	add	r2, ip
 8000866:	1a12      	subs	r2, r2, r0
 8000868:	b2a4      	uxth	r4, r4
 800086a:	fbb2 f0fe 	udiv	r0, r2, lr
 800086e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000872:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000876:	fb00 f505 	mul.w	r5, r0, r5
 800087a:	42a5      	cmp	r5, r4
 800087c:	d90a      	bls.n	8000894 <__udivmoddi4+0x90>
 800087e:	eb1c 0404 	adds.w	r4, ip, r4
 8000882:	f100 32ff 	add.w	r2, r0, #4294967295
 8000886:	f080 8107 	bcs.w	8000a98 <__udivmoddi4+0x294>
 800088a:	42a5      	cmp	r5, r4
 800088c:	f240 8104 	bls.w	8000a98 <__udivmoddi4+0x294>
 8000890:	4464      	add	r4, ip
 8000892:	3802      	subs	r0, #2
 8000894:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000898:	1b64      	subs	r4, r4, r5
 800089a:	2100      	movs	r1, #0
 800089c:	b11e      	cbz	r6, 80008a6 <__udivmoddi4+0xa2>
 800089e:	40dc      	lsrs	r4, r3
 80008a0:	2300      	movs	r3, #0
 80008a2:	e9c6 4300 	strd	r4, r3, [r6]
 80008a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008aa:	428b      	cmp	r3, r1
 80008ac:	d908      	bls.n	80008c0 <__udivmoddi4+0xbc>
 80008ae:	2e00      	cmp	r6, #0
 80008b0:	f000 80ed 	beq.w	8000a8e <__udivmoddi4+0x28a>
 80008b4:	2100      	movs	r1, #0
 80008b6:	e9c6 0500 	strd	r0, r5, [r6]
 80008ba:	4608      	mov	r0, r1
 80008bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c0:	fab3 f183 	clz	r1, r3
 80008c4:	2900      	cmp	r1, #0
 80008c6:	d149      	bne.n	800095c <__udivmoddi4+0x158>
 80008c8:	42ab      	cmp	r3, r5
 80008ca:	d302      	bcc.n	80008d2 <__udivmoddi4+0xce>
 80008cc:	4282      	cmp	r2, r0
 80008ce:	f200 80f8 	bhi.w	8000ac2 <__udivmoddi4+0x2be>
 80008d2:	1a84      	subs	r4, r0, r2
 80008d4:	eb65 0203 	sbc.w	r2, r5, r3
 80008d8:	2001      	movs	r0, #1
 80008da:	4617      	mov	r7, r2
 80008dc:	2e00      	cmp	r6, #0
 80008de:	d0e2      	beq.n	80008a6 <__udivmoddi4+0xa2>
 80008e0:	e9c6 4700 	strd	r4, r7, [r6]
 80008e4:	e7df      	b.n	80008a6 <__udivmoddi4+0xa2>
 80008e6:	b902      	cbnz	r2, 80008ea <__udivmoddi4+0xe6>
 80008e8:	deff      	udf	#255	; 0xff
 80008ea:	fab2 f382 	clz	r3, r2
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	f040 8090 	bne.w	8000a14 <__udivmoddi4+0x210>
 80008f4:	1a8a      	subs	r2, r1, r2
 80008f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008fa:	fa1f fe8c 	uxth.w	lr, ip
 80008fe:	2101      	movs	r1, #1
 8000900:	fbb2 f5f7 	udiv	r5, r2, r7
 8000904:	fb07 2015 	mls	r0, r7, r5, r2
 8000908:	0c22      	lsrs	r2, r4, #16
 800090a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800090e:	fb0e f005 	mul.w	r0, lr, r5
 8000912:	4290      	cmp	r0, r2
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x124>
 8000916:	eb1c 0202 	adds.w	r2, ip, r2
 800091a:	f105 38ff 	add.w	r8, r5, #4294967295
 800091e:	d202      	bcs.n	8000926 <__udivmoddi4+0x122>
 8000920:	4290      	cmp	r0, r2
 8000922:	f200 80cb 	bhi.w	8000abc <__udivmoddi4+0x2b8>
 8000926:	4645      	mov	r5, r8
 8000928:	1a12      	subs	r2, r2, r0
 800092a:	b2a4      	uxth	r4, r4
 800092c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000930:	fb07 2210 	mls	r2, r7, r0, r2
 8000934:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000938:	fb0e fe00 	mul.w	lr, lr, r0
 800093c:	45a6      	cmp	lr, r4
 800093e:	d908      	bls.n	8000952 <__udivmoddi4+0x14e>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f100 32ff 	add.w	r2, r0, #4294967295
 8000948:	d202      	bcs.n	8000950 <__udivmoddi4+0x14c>
 800094a:	45a6      	cmp	lr, r4
 800094c:	f200 80bb 	bhi.w	8000ac6 <__udivmoddi4+0x2c2>
 8000950:	4610      	mov	r0, r2
 8000952:	eba4 040e 	sub.w	r4, r4, lr
 8000956:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800095a:	e79f      	b.n	800089c <__udivmoddi4+0x98>
 800095c:	f1c1 0720 	rsb	r7, r1, #32
 8000960:	408b      	lsls	r3, r1
 8000962:	fa22 fc07 	lsr.w	ip, r2, r7
 8000966:	ea4c 0c03 	orr.w	ip, ip, r3
 800096a:	fa05 f401 	lsl.w	r4, r5, r1
 800096e:	fa20 f307 	lsr.w	r3, r0, r7
 8000972:	40fd      	lsrs	r5, r7
 8000974:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000978:	4323      	orrs	r3, r4
 800097a:	fbb5 f8f9 	udiv	r8, r5, r9
 800097e:	fa1f fe8c 	uxth.w	lr, ip
 8000982:	fb09 5518 	mls	r5, r9, r8, r5
 8000986:	0c1c      	lsrs	r4, r3, #16
 8000988:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800098c:	fb08 f50e 	mul.w	r5, r8, lr
 8000990:	42a5      	cmp	r5, r4
 8000992:	fa02 f201 	lsl.w	r2, r2, r1
 8000996:	fa00 f001 	lsl.w	r0, r0, r1
 800099a:	d90b      	bls.n	80009b4 <__udivmoddi4+0x1b0>
 800099c:	eb1c 0404 	adds.w	r4, ip, r4
 80009a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80009a4:	f080 8088 	bcs.w	8000ab8 <__udivmoddi4+0x2b4>
 80009a8:	42a5      	cmp	r5, r4
 80009aa:	f240 8085 	bls.w	8000ab8 <__udivmoddi4+0x2b4>
 80009ae:	f1a8 0802 	sub.w	r8, r8, #2
 80009b2:	4464      	add	r4, ip
 80009b4:	1b64      	subs	r4, r4, r5
 80009b6:	b29d      	uxth	r5, r3
 80009b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80009bc:	fb09 4413 	mls	r4, r9, r3, r4
 80009c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80009c8:	45a6      	cmp	lr, r4
 80009ca:	d908      	bls.n	80009de <__udivmoddi4+0x1da>
 80009cc:	eb1c 0404 	adds.w	r4, ip, r4
 80009d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80009d4:	d26c      	bcs.n	8000ab0 <__udivmoddi4+0x2ac>
 80009d6:	45a6      	cmp	lr, r4
 80009d8:	d96a      	bls.n	8000ab0 <__udivmoddi4+0x2ac>
 80009da:	3b02      	subs	r3, #2
 80009dc:	4464      	add	r4, ip
 80009de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009e2:	fba3 9502 	umull	r9, r5, r3, r2
 80009e6:	eba4 040e 	sub.w	r4, r4, lr
 80009ea:	42ac      	cmp	r4, r5
 80009ec:	46c8      	mov	r8, r9
 80009ee:	46ae      	mov	lr, r5
 80009f0:	d356      	bcc.n	8000aa0 <__udivmoddi4+0x29c>
 80009f2:	d053      	beq.n	8000a9c <__udivmoddi4+0x298>
 80009f4:	b156      	cbz	r6, 8000a0c <__udivmoddi4+0x208>
 80009f6:	ebb0 0208 	subs.w	r2, r0, r8
 80009fa:	eb64 040e 	sbc.w	r4, r4, lr
 80009fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000a02:	40ca      	lsrs	r2, r1
 8000a04:	40cc      	lsrs	r4, r1
 8000a06:	4317      	orrs	r7, r2
 8000a08:	e9c6 7400 	strd	r7, r4, [r6]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	2100      	movs	r1, #0
 8000a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a14:	f1c3 0120 	rsb	r1, r3, #32
 8000a18:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a1c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a20:	fa25 f101 	lsr.w	r1, r5, r1
 8000a24:	409d      	lsls	r5, r3
 8000a26:	432a      	orrs	r2, r5
 8000a28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a2c:	fa1f fe8c 	uxth.w	lr, ip
 8000a30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a34:	fb07 1510 	mls	r5, r7, r0, r1
 8000a38:	0c11      	lsrs	r1, r2, #16
 8000a3a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a3e:	fb00 f50e 	mul.w	r5, r0, lr
 8000a42:	428d      	cmp	r5, r1
 8000a44:	fa04 f403 	lsl.w	r4, r4, r3
 8000a48:	d908      	bls.n	8000a5c <__udivmoddi4+0x258>
 8000a4a:	eb1c 0101 	adds.w	r1, ip, r1
 8000a4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a52:	d22f      	bcs.n	8000ab4 <__udivmoddi4+0x2b0>
 8000a54:	428d      	cmp	r5, r1
 8000a56:	d92d      	bls.n	8000ab4 <__udivmoddi4+0x2b0>
 8000a58:	3802      	subs	r0, #2
 8000a5a:	4461      	add	r1, ip
 8000a5c:	1b49      	subs	r1, r1, r5
 8000a5e:	b292      	uxth	r2, r2
 8000a60:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a64:	fb07 1115 	mls	r1, r7, r5, r1
 8000a68:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a6c:	fb05 f10e 	mul.w	r1, r5, lr
 8000a70:	4291      	cmp	r1, r2
 8000a72:	d908      	bls.n	8000a86 <__udivmoddi4+0x282>
 8000a74:	eb1c 0202 	adds.w	r2, ip, r2
 8000a78:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a7c:	d216      	bcs.n	8000aac <__udivmoddi4+0x2a8>
 8000a7e:	4291      	cmp	r1, r2
 8000a80:	d914      	bls.n	8000aac <__udivmoddi4+0x2a8>
 8000a82:	3d02      	subs	r5, #2
 8000a84:	4462      	add	r2, ip
 8000a86:	1a52      	subs	r2, r2, r1
 8000a88:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a8c:	e738      	b.n	8000900 <__udivmoddi4+0xfc>
 8000a8e:	4631      	mov	r1, r6
 8000a90:	4630      	mov	r0, r6
 8000a92:	e708      	b.n	80008a6 <__udivmoddi4+0xa2>
 8000a94:	4639      	mov	r1, r7
 8000a96:	e6e6      	b.n	8000866 <__udivmoddi4+0x62>
 8000a98:	4610      	mov	r0, r2
 8000a9a:	e6fb      	b.n	8000894 <__udivmoddi4+0x90>
 8000a9c:	4548      	cmp	r0, r9
 8000a9e:	d2a9      	bcs.n	80009f4 <__udivmoddi4+0x1f0>
 8000aa0:	ebb9 0802 	subs.w	r8, r9, r2
 8000aa4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	e7a3      	b.n	80009f4 <__udivmoddi4+0x1f0>
 8000aac:	4645      	mov	r5, r8
 8000aae:	e7ea      	b.n	8000a86 <__udivmoddi4+0x282>
 8000ab0:	462b      	mov	r3, r5
 8000ab2:	e794      	b.n	80009de <__udivmoddi4+0x1da>
 8000ab4:	4640      	mov	r0, r8
 8000ab6:	e7d1      	b.n	8000a5c <__udivmoddi4+0x258>
 8000ab8:	46d0      	mov	r8, sl
 8000aba:	e77b      	b.n	80009b4 <__udivmoddi4+0x1b0>
 8000abc:	3d02      	subs	r5, #2
 8000abe:	4462      	add	r2, ip
 8000ac0:	e732      	b.n	8000928 <__udivmoddi4+0x124>
 8000ac2:	4608      	mov	r0, r1
 8000ac4:	e70a      	b.n	80008dc <__udivmoddi4+0xd8>
 8000ac6:	4464      	add	r4, ip
 8000ac8:	3802      	subs	r0, #2
 8000aca:	e742      	b.n	8000952 <__udivmoddi4+0x14e>

08000acc <__aeabi_idiv0>:
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_0

/* SPI Chip Select */
static void SELECT(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <SELECT+0x14>)
 8000ada:	f001 fa45 	bl	8001f68 <HAL_GPIO_WritePin>
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40020400 	.word	0x40020400

08000ae8 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2101      	movs	r1, #1
 8000af0:	4802      	ldr	r0, [pc, #8]	; (8000afc <DESELECT+0x14>)
 8000af2:	f001 fa39 	bl	8001f68 <HAL_GPIO_WritePin>
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40020400 	.word	0x40020400

08000b00 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000b0a:	bf00      	nop
 8000b0c:	4808      	ldr	r0, [pc, #32]	; (8000b30 <SPI_TxByte+0x30>)
 8000b0e:	f002 fa10 	bl	8002f32 <HAL_SPI_GetState>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d1f9      	bne.n	8000b0c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000b18:	1df9      	adds	r1, r7, #7
 8000b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b1e:	2201      	movs	r2, #1
 8000b20:	4803      	ldr	r0, [pc, #12]	; (8000b30 <SPI_TxByte+0x30>)
 8000b22:	f001 ff28 	bl	8002976 <HAL_SPI_Transmit>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000044 	.word	0x20000044

08000b34 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000b3a:	23ff      	movs	r3, #255	; 0xff
 8000b3c:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000b42:	bf00      	nop
 8000b44:	4809      	ldr	r0, [pc, #36]	; (8000b6c <SPI_RxByte+0x38>)
 8000b46:	f002 f9f4 	bl	8002f32 <HAL_SPI_GetState>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d1f9      	bne.n	8000b44 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000b50:	1dba      	adds	r2, r7, #6
 8000b52:	1df9      	adds	r1, r7, #7
 8000b54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	4803      	ldr	r0, [pc, #12]	; (8000b6c <SPI_RxByte+0x38>)
 8000b5e:	f002 f846 	bl	8002bee <HAL_SPI_TransmitReceive>

  return data;
 8000b62:	79bb      	ldrb	r3, [r7, #6]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000044 	.word	0x20000044

08000b70 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000b78:	f7ff ffdc 	bl	8000b34 <SPI_RxByte>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	461a      	mov	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	701a      	strb	r2, [r3, #0]
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <SD_ReadyWait+0x34>)
 8000b94:	2232      	movs	r2, #50	; 0x32
 8000b96:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000b98:	f7ff ffcc 	bl	8000b34 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000b9c:	f7ff ffca 	bl	8000b34 <SPI_RxByte>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	2bff      	cmp	r3, #255	; 0xff
 8000ba8:	d004      	beq.n	8000bb4 <SD_ReadyWait+0x28>
 8000baa:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <SD_ReadyWait+0x34>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1f3      	bne.n	8000b9c <SD_ReadyWait+0x10>

  return res;
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20002519 	.word	0x20002519

08000bc4 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000bca:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000bce:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000bd0:	f7ff ff8a 	bl	8000ae8 <DESELECT>

  for(int i = 0; i < 10; i++)
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	e005      	b.n	8000be6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000bda:	20ff      	movs	r0, #255	; 0xff
 8000bdc:	f7ff ff90 	bl	8000b00 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	3301      	adds	r3, #1
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	2b09      	cmp	r3, #9
 8000bea:	ddf6      	ble.n	8000bda <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000bec:	f7ff ff70 	bl	8000ad0 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000bf0:	2340      	movs	r3, #64	; 0x40
 8000bf2:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000c04:	2395      	movs	r3, #149	; 0x95
 8000c06:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	e009      	b.n	8000c22 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000c0e:	1d3a      	adds	r2, r7, #4
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4413      	add	r3, r2
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ff72 	bl	8000b00 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	2b05      	cmp	r3, #5
 8000c26:	ddf2      	ble.n	8000c0e <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000c28:	e002      	b.n	8000c30 <SD_PowerOn+0x6c>
  {
    Count--;
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000c30:	f7ff ff80 	bl	8000b34 <SPI_RxByte>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d002      	beq.n	8000c40 <SD_PowerOn+0x7c>
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1f4      	bne.n	8000c2a <SD_PowerOn+0x66>
  }

  DESELECT();
 8000c40:	f7ff ff52 	bl	8000ae8 <DESELECT>
  SPI_TxByte(0XFF);
 8000c44:	20ff      	movs	r0, #255	; 0xff
 8000c46:	f7ff ff5b 	bl	8000b00 <SPI_TxByte>

  PowerFlag = 1;
 8000c4a:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <SD_PowerOn+0x94>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	701a      	strb	r2, [r3, #0]
}
 8000c50:	bf00      	nop
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000041 	.word	0x20000041

08000c5c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <SD_PowerOff+0x14>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	20000041 	.word	0x20000041

08000c74 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <SD_CheckPower+0x14>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000041 	.word	0x20000041

08000c8c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000c96:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <SD_RxDataBlock+0x68>)
 8000c98:	220a      	movs	r2, #10
 8000c9a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000c9c:	f7ff ff4a 	bl	8000b34 <SPI_RxByte>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	2bff      	cmp	r3, #255	; 0xff
 8000ca8:	d104      	bne.n	8000cb4 <SD_RxDataBlock+0x28>
 8000caa:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <SD_RxDataBlock+0x68>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d1f3      	bne.n	8000c9c <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	2bfe      	cmp	r3, #254	; 0xfe
 8000cb8:	d001      	beq.n	8000cbe <SD_RxDataBlock+0x32>
    return FALSE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e016      	b.n	8000cec <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	1c5a      	adds	r2, r3, #1
 8000cc2:	607a      	str	r2, [r7, #4]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff53 	bl	8000b70 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	1c5a      	adds	r2, r3, #1
 8000cce:	607a      	str	r2, [r7, #4]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff4d 	bl	8000b70 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	3b02      	subs	r3, #2
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1ed      	bne.n	8000cbe <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000ce2:	f7ff ff27 	bl	8000b34 <SPI_RxByte>
  SPI_RxByte();
 8000ce6:	f7ff ff25 	bl	8000b34 <SPI_RxByte>

  return TRUE;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20002518 	.word	0x20002518

08000cf8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	460b      	mov	r3, r1
 8000d02:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000d08:	f7ff ff40 	bl	8000b8c <SD_ReadyWait>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2bff      	cmp	r3, #255	; 0xff
 8000d10:	d001      	beq.n	8000d16 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	e040      	b.n	8000d98 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8000d16:	78fb      	ldrb	r3, [r7, #3]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fef1 	bl	8000b00 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000d1e:	78fb      	ldrb	r3, [r7, #3]
 8000d20:	2bfd      	cmp	r3, #253	; 0xfd
 8000d22:	d031      	beq.n	8000d88 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	1c5a      	adds	r2, r3, #1
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fee5 	bl	8000b00 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	1c5a      	adds	r2, r3, #1
 8000d3a:	607a      	str	r2, [r7, #4]
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fede 	bl	8000b00 <SPI_TxByte>
    } while (--wc);
 8000d44:	7bbb      	ldrb	r3, [r7, #14]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	73bb      	strb	r3, [r7, #14]
 8000d4a:	7bbb      	ldrb	r3, [r7, #14]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1eb      	bne.n	8000d28 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000d50:	f7ff fef0 	bl	8000b34 <SPI_RxByte>
    SPI_RxByte();
 8000d54:	f7ff feee 	bl	8000b34 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000d58:	e00b      	b.n	8000d72 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000d5a:	f7ff feeb 	bl	8000b34 <SPI_RxByte>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
 8000d64:	f003 031f 	and.w	r3, r3, #31
 8000d68:	2b05      	cmp	r3, #5
 8000d6a:	d006      	beq.n	8000d7a <SD_TxDataBlock+0x82>
        break;

      i++;
 8000d6c:	7b7b      	ldrb	r3, [r7, #13]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000d72:	7b7b      	ldrb	r3, [r7, #13]
 8000d74:	2b40      	cmp	r3, #64	; 0x40
 8000d76:	d9f0      	bls.n	8000d5a <SD_TxDataBlock+0x62>
 8000d78:	e000      	b.n	8000d7c <SD_TxDataBlock+0x84>
        break;
 8000d7a:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000d7c:	bf00      	nop
 8000d7e:	f7ff fed9 	bl	8000b34 <SPI_RxByte>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d0fa      	beq.n	8000d7e <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	f003 031f 	and.w	r3, r3, #31
 8000d8e:	2b05      	cmp	r3, #5
 8000d90:	d101      	bne.n	8000d96 <SD_TxDataBlock+0x9e>
    return TRUE;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e000      	b.n	8000d98 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000dac:	f7ff feee 	bl	8000b8c <SD_ReadyWait>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2bff      	cmp	r3, #255	; 0xff
 8000db4:	d001      	beq.n	8000dba <SD_SendCmd+0x1a>
    return 0xFF;
 8000db6:	23ff      	movs	r3, #255	; 0xff
 8000db8:	e040      	b.n	8000e3c <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fe9f 	bl	8000b00 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	0e1b      	lsrs	r3, r3, #24
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fe99 	bl	8000b00 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	0c1b      	lsrs	r3, r3, #16
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fe93 	bl	8000b00 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fe8d 	bl	8000b00 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fe88 	bl	8000b00 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	2b40      	cmp	r3, #64	; 0x40
 8000df8:	d101      	bne.n	8000dfe <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000dfa:	2395      	movs	r3, #149	; 0x95
 8000dfc:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	2b48      	cmp	r3, #72	; 0x48
 8000e02:	d101      	bne.n	8000e08 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000e04:	2387      	movs	r3, #135	; 0x87
 8000e06:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fe78 	bl	8000b00 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	2b4c      	cmp	r3, #76	; 0x4c
 8000e14:	d101      	bne.n	8000e1a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000e16:	f7ff fe8d 	bl	8000b34 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000e1a:	230a      	movs	r3, #10
 8000e1c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000e1e:	f7ff fe89 	bl	8000b34 <SPI_RxByte>
 8000e22:	4603      	mov	r3, r0
 8000e24:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000e26:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	da05      	bge.n	8000e3a <SD_SendCmd+0x9a>
 8000e2e:	7bbb      	ldrb	r3, [r7, #14]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	73bb      	strb	r3, [r7, #14]
 8000e34:	7bbb      	ldrb	r3, [r7, #14]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f1      	bne.n	8000e1e <SD_SendCmd+0x7e>

  return res;
 8000e3a:	7b7b      	ldrb	r3, [r7, #13]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e0d5      	b.n	8001004 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000e58:	4b6c      	ldr	r3, [pc, #432]	; (800100c <SD_disk_initialize+0x1c8>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <SD_disk_initialize+0x2a>
    return Stat;
 8000e66:	4b69      	ldr	r3, [pc, #420]	; (800100c <SD_disk_initialize+0x1c8>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	e0ca      	b.n	8001004 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000e6e:	f7ff fea9 	bl	8000bc4 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000e72:	f7ff fe2d 	bl	8000ad0 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	2040      	movs	r0, #64	; 0x40
 8000e7e:	f7ff ff8f 	bl	8000da0 <SD_SendCmd>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	f040 80a5 	bne.w	8000fd4 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000e8a:	4b61      	ldr	r3, [pc, #388]	; (8001010 <SD_disk_initialize+0x1cc>)
 8000e8c:	2264      	movs	r2, #100	; 0x64
 8000e8e:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000e90:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000e94:	2048      	movs	r0, #72	; 0x48
 8000e96:	f7ff ff83 	bl	8000da0 <SD_SendCmd>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d158      	bne.n	8000f52 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	73fb      	strb	r3, [r7, #15]
 8000ea4:	e00c      	b.n	8000ec0 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000ea6:	7bfc      	ldrb	r4, [r7, #15]
 8000ea8:	f7ff fe44 	bl	8000b34 <SPI_RxByte>
 8000eac:	4603      	mov	r3, r0
 8000eae:	461a      	mov	r2, r3
 8000eb0:	f104 0310 	add.w	r3, r4, #16
 8000eb4:	443b      	add	r3, r7
 8000eb6:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	73fb      	strb	r3, [r7, #15]
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d9ef      	bls.n	8000ea6 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000ec6:	7abb      	ldrb	r3, [r7, #10]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	f040 8083 	bne.w	8000fd4 <SD_disk_initialize+0x190>
 8000ece:	7afb      	ldrb	r3, [r7, #11]
 8000ed0:	2baa      	cmp	r3, #170	; 0xaa
 8000ed2:	d17f      	bne.n	8000fd4 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2077      	movs	r0, #119	; 0x77
 8000ed8:	f7ff ff62 	bl	8000da0 <SD_SendCmd>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d807      	bhi.n	8000ef2 <SD_disk_initialize+0xae>
 8000ee2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000ee6:	2069      	movs	r0, #105	; 0x69
 8000ee8:	f7ff ff5a 	bl	8000da0 <SD_SendCmd>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d005      	beq.n	8000efe <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000ef2:	4b47      	ldr	r3, [pc, #284]	; (8001010 <SD_disk_initialize+0x1cc>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1eb      	bne.n	8000ed4 <SD_disk_initialize+0x90>
 8000efc:	e000      	b.n	8000f00 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000efe:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000f00:	4b43      	ldr	r3, [pc, #268]	; (8001010 <SD_disk_initialize+0x1cc>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d064      	beq.n	8000fd4 <SD_disk_initialize+0x190>
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	207a      	movs	r0, #122	; 0x7a
 8000f0e:	f7ff ff47 	bl	8000da0 <SD_SendCmd>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d15d      	bne.n	8000fd4 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	e00c      	b.n	8000f38 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000f1e:	7bfc      	ldrb	r4, [r7, #15]
 8000f20:	f7ff fe08 	bl	8000b34 <SPI_RxByte>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	f104 0310 	add.w	r3, r4, #16
 8000f2c:	443b      	add	r3, r7
 8000f2e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	3301      	adds	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d9ef      	bls.n	8000f1e <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000f3e:	7a3b      	ldrb	r3, [r7, #8]
 8000f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <SD_disk_initialize+0x108>
 8000f48:	2306      	movs	r3, #6
 8000f4a:	e000      	b.n	8000f4e <SD_disk_initialize+0x10a>
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	73bb      	strb	r3, [r7, #14]
 8000f50:	e040      	b.n	8000fd4 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000f52:	2100      	movs	r1, #0
 8000f54:	2077      	movs	r0, #119	; 0x77
 8000f56:	f7ff ff23 	bl	8000da0 <SD_SendCmd>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d808      	bhi.n	8000f72 <SD_disk_initialize+0x12e>
 8000f60:	2100      	movs	r1, #0
 8000f62:	2069      	movs	r0, #105	; 0x69
 8000f64:	f7ff ff1c 	bl	8000da0 <SD_SendCmd>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d801      	bhi.n	8000f72 <SD_disk_initialize+0x12e>
 8000f6e:	2302      	movs	r3, #2
 8000f70:	e000      	b.n	8000f74 <SD_disk_initialize+0x130>
 8000f72:	2301      	movs	r3, #1
 8000f74:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000f76:	7bbb      	ldrb	r3, [r7, #14]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d10e      	bne.n	8000f9a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2077      	movs	r0, #119	; 0x77
 8000f80:	f7ff ff0e 	bl	8000da0 <SD_SendCmd>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d80e      	bhi.n	8000fa8 <SD_disk_initialize+0x164>
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	2069      	movs	r0, #105	; 0x69
 8000f8e:	f7ff ff07 	bl	8000da0 <SD_SendCmd>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d107      	bne.n	8000fa8 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000f98:	e00d      	b.n	8000fb6 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2041      	movs	r0, #65	; 0x41
 8000f9e:	f7ff feff 	bl	8000da0 <SD_SendCmd>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d005      	beq.n	8000fb4 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <SD_disk_initialize+0x1cc>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1e1      	bne.n	8000f76 <SD_disk_initialize+0x132>
 8000fb2:	e000      	b.n	8000fb6 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000fb4:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000fb6:	4b16      	ldr	r3, [pc, #88]	; (8001010 <SD_disk_initialize+0x1cc>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d007      	beq.n	8000fd0 <SD_disk_initialize+0x18c>
 8000fc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc4:	2050      	movs	r0, #80	; 0x50
 8000fc6:	f7ff feeb 	bl	8000da0 <SD_SendCmd>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000fd4:	4a0f      	ldr	r2, [pc, #60]	; (8001014 <SD_disk_initialize+0x1d0>)
 8000fd6:	7bbb      	ldrb	r3, [r7, #14]
 8000fd8:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000fda:	f7ff fd85 	bl	8000ae8 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000fde:	f7ff fda9 	bl	8000b34 <SPI_RxByte>

  if (type)
 8000fe2:	7bbb      	ldrb	r3, [r7, #14]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d008      	beq.n	8000ffa <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <SD_disk_initialize+0x1c8>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	f023 0301 	bic.w	r3, r3, #1
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <SD_disk_initialize+0x1c8>)
 8000ff6:	701a      	strb	r2, [r3, #0]
 8000ff8:	e001      	b.n	8000ffe <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000ffa:	f7ff fe2f 	bl	8000c5c <SD_PowerOff>
  }

  return Stat;
 8000ffe:	4b03      	ldr	r3, [pc, #12]	; (800100c <SD_disk_initialize+0x1c8>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	b2db      	uxtb	r3, r3
}
 8001004:	4618      	mov	r0, r3
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	bd90      	pop	{r4, r7, pc}
 800100c:	20000000 	.word	0x20000000
 8001010:	20002518 	.word	0x20002518
 8001014:	20000040 	.word	0x20000040

08001018 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SD_disk_status+0x14>
    return STA_NOINIT;
 8001028:	2301      	movs	r3, #1
 800102a:	e002      	b.n	8001032 <SD_disk_status+0x1a>

  return Stat;
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <SD_disk_status+0x28>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b2db      	uxtb	r3, r3
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000000 	.word	0x20000000

08001044 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	4603      	mov	r3, r0
 8001052:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d102      	bne.n	8001060 <SD_disk_read+0x1c>
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d101      	bne.n	8001064 <SD_disk_read+0x20>
    return RES_PARERR;
 8001060:	2304      	movs	r3, #4
 8001062:	e051      	b.n	8001108 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001064:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <SD_disk_read+0xcc>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001072:	2303      	movs	r3, #3
 8001074:	e048      	b.n	8001108 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001076:	4b27      	ldr	r3, [pc, #156]	; (8001114 <SD_disk_read+0xd0>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	2b00      	cmp	r3, #0
 8001080:	d102      	bne.n	8001088 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	025b      	lsls	r3, r3, #9
 8001086:	607b      	str	r3, [r7, #4]

  SELECT();
 8001088:	f7ff fd22 	bl	8000ad0 <SELECT>

  if (count == 1)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d111      	bne.n	80010b6 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	2051      	movs	r0, #81	; 0x51
 8001096:	f7ff fe83 	bl	8000da0 <SD_SendCmd>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d129      	bne.n	80010f4 <SD_disk_read+0xb0>
 80010a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a4:	68b8      	ldr	r0, [r7, #8]
 80010a6:	f7ff fdf1 	bl	8000c8c <SD_RxDataBlock>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d021      	beq.n	80010f4 <SD_disk_read+0xb0>
      count = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	e01e      	b.n	80010f4 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	2052      	movs	r0, #82	; 0x52
 80010ba:	f7ff fe71 	bl	8000da0 <SD_SendCmd>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d117      	bne.n	80010f4 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 80010c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c8:	68b8      	ldr	r0, [r7, #8]
 80010ca:	f7ff fddf 	bl	8000c8c <SD_RxDataBlock>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00a      	beq.n	80010ea <SD_disk_read+0xa6>
          break;

        buff += 512;
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80010da:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	3b01      	subs	r3, #1
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1ed      	bne.n	80010c4 <SD_disk_read+0x80>
 80010e8:	e000      	b.n	80010ec <SD_disk_read+0xa8>
          break;
 80010ea:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 80010ec:	2100      	movs	r1, #0
 80010ee:	204c      	movs	r0, #76	; 0x4c
 80010f0:	f7ff fe56 	bl	8000da0 <SD_SendCmd>
    }
  }

  DESELECT();
 80010f4:	f7ff fcf8 	bl	8000ae8 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80010f8:	f7ff fd1c 	bl	8000b34 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	bf14      	ite	ne
 8001102:	2301      	movne	r3, #1
 8001104:	2300      	moveq	r3, #0
 8001106:	b2db      	uxtb	r3, r3
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000000 	.word	0x20000000
 8001114:	20000040 	.word	0x20000040

08001118 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	4603      	mov	r3, r0
 8001126:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d102      	bne.n	8001134 <SD_disk_write+0x1c>
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <SD_disk_write+0x20>
    return RES_PARERR;
 8001134:	2304      	movs	r3, #4
 8001136:	e06b      	b.n	8001210 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001138:	4b37      	ldr	r3, [pc, #220]	; (8001218 <SD_disk_write+0x100>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001146:	2303      	movs	r3, #3
 8001148:	e062      	b.n	8001210 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 800114a:	4b33      	ldr	r3, [pc, #204]	; (8001218 <SD_disk_write+0x100>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SD_disk_write+0x44>
    return RES_WRPRT;
 8001158:	2302      	movs	r3, #2
 800115a:	e059      	b.n	8001210 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 800115c:	4b2f      	ldr	r3, [pc, #188]	; (800121c <SD_disk_write+0x104>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	2b00      	cmp	r3, #0
 8001166:	d102      	bne.n	800116e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	025b      	lsls	r3, r3, #9
 800116c:	607b      	str	r3, [r7, #4]

  SELECT();
 800116e:	f7ff fcaf 	bl	8000ad0 <SELECT>

  if (count == 1)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d110      	bne.n	800119a <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	2058      	movs	r0, #88	; 0x58
 800117c:	f7ff fe10 	bl	8000da0 <SD_SendCmd>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d13a      	bne.n	80011fc <SD_disk_write+0xe4>
 8001186:	21fe      	movs	r1, #254	; 0xfe
 8001188:	68b8      	ldr	r0, [r7, #8]
 800118a:	f7ff fdb5 	bl	8000cf8 <SD_TxDataBlock>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d033      	beq.n	80011fc <SD_disk_write+0xe4>
      count = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	e030      	b.n	80011fc <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 800119a:	4b20      	ldr	r3, [pc, #128]	; (800121c <SD_disk_write+0x104>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d007      	beq.n	80011b6 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80011a6:	2100      	movs	r1, #0
 80011a8:	2077      	movs	r0, #119	; 0x77
 80011aa:	f7ff fdf9 	bl	8000da0 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80011ae:	6839      	ldr	r1, [r7, #0]
 80011b0:	2057      	movs	r0, #87	; 0x57
 80011b2:	f7ff fdf5 	bl	8000da0 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	2059      	movs	r0, #89	; 0x59
 80011ba:	f7ff fdf1 	bl	8000da0 <SD_SendCmd>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d11b      	bne.n	80011fc <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80011c4:	21fc      	movs	r1, #252	; 0xfc
 80011c6:	68b8      	ldr	r0, [r7, #8]
 80011c8:	f7ff fd96 	bl	8000cf8 <SD_TxDataBlock>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00a      	beq.n	80011e8 <SD_disk_write+0xd0>
          break;

        buff += 512;
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80011d8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	3b01      	subs	r3, #1
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1ee      	bne.n	80011c4 <SD_disk_write+0xac>
 80011e6:	e000      	b.n	80011ea <SD_disk_write+0xd2>
          break;
 80011e8:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 80011ea:	21fd      	movs	r1, #253	; 0xfd
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff fd83 	bl	8000cf8 <SD_TxDataBlock>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d101      	bne.n	80011fc <SD_disk_write+0xe4>
      {
        count = 1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80011fc:	f7ff fc74 	bl	8000ae8 <DESELECT>
  SPI_RxByte();
 8001200:	f7ff fc98 	bl	8000b34 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	bf14      	ite	ne
 800120a:	2301      	movne	r3, #1
 800120c:	2300      	moveq	r3, #0
 800120e:	b2db      	uxtb	r3, r3
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000000 	.word	0x20000000
 800121c:	20000040 	.word	0x20000040

08001220 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b08b      	sub	sp, #44	; 0x2c
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	603a      	str	r2, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
 800122c:	460b      	mov	r3, r1
 800122e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800123a:	2304      	movs	r3, #4
 800123c:	e11b      	b.n	8001476 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001244:	79bb      	ldrb	r3, [r7, #6]
 8001246:	2b05      	cmp	r3, #5
 8001248:	d129      	bne.n	800129e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 800124a:	6a3b      	ldr	r3, [r7, #32]
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d017      	beq.n	8001282 <SD_disk_ioctl+0x62>
 8001252:	2b02      	cmp	r3, #2
 8001254:	dc1f      	bgt.n	8001296 <SD_disk_ioctl+0x76>
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <SD_disk_ioctl+0x40>
 800125a:	2b01      	cmp	r3, #1
 800125c:	d00b      	beq.n	8001276 <SD_disk_ioctl+0x56>
 800125e:	e01a      	b.n	8001296 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001260:	f7ff fd08 	bl	8000c74 <SD_CheckPower>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800126a:	f7ff fcf7 	bl	8000c5c <SD_PowerOff>
      res = RES_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001274:	e0fd      	b.n	8001472 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001276:	f7ff fca5 	bl	8000bc4 <SD_PowerOn>
      res = RES_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001280:	e0f7      	b.n	8001472 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	1c5c      	adds	r4, r3, #1
 8001286:	f7ff fcf5 	bl	8000c74 <SD_CheckPower>
 800128a:	4603      	mov	r3, r0
 800128c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800128e:	2300      	movs	r3, #0
 8001290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001294:	e0ed      	b.n	8001472 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001296:	2304      	movs	r3, #4
 8001298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800129c:	e0e9      	b.n	8001472 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800129e:	4b78      	ldr	r3, [pc, #480]	; (8001480 <SD_disk_ioctl+0x260>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e0e2      	b.n	8001476 <SD_disk_ioctl+0x256>

    SELECT();
 80012b0:	f7ff fc0e 	bl	8000ad0 <SELECT>

    switch (ctrl)
 80012b4:	79bb      	ldrb	r3, [r7, #6]
 80012b6:	2b0d      	cmp	r3, #13
 80012b8:	f200 80cc 	bhi.w	8001454 <SD_disk_ioctl+0x234>
 80012bc:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <SD_disk_ioctl+0xa4>)
 80012be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c2:	bf00      	nop
 80012c4:	080013bf 	.word	0x080013bf
 80012c8:	080012fd 	.word	0x080012fd
 80012cc:	080013af 	.word	0x080013af
 80012d0:	08001455 	.word	0x08001455
 80012d4:	08001455 	.word	0x08001455
 80012d8:	08001455 	.word	0x08001455
 80012dc:	08001455 	.word	0x08001455
 80012e0:	08001455 	.word	0x08001455
 80012e4:	08001455 	.word	0x08001455
 80012e8:	08001455 	.word	0x08001455
 80012ec:	08001455 	.word	0x08001455
 80012f0:	080013d1 	.word	0x080013d1
 80012f4:	080013f5 	.word	0x080013f5
 80012f8:	08001419 	.word	0x08001419
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80012fc:	2100      	movs	r1, #0
 80012fe:	2049      	movs	r0, #73	; 0x49
 8001300:	f7ff fd4e 	bl	8000da0 <SD_SendCmd>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	f040 80a8 	bne.w	800145c <SD_disk_ioctl+0x23c>
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	2110      	movs	r1, #16
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fcba 	bl	8000c8c <SD_RxDataBlock>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 809e 	beq.w	800145c <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8001320:	7b3b      	ldrb	r3, [r7, #12]
 8001322:	099b      	lsrs	r3, r3, #6
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b01      	cmp	r3, #1
 8001328:	d10e      	bne.n	8001348 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800132a:	7d7b      	ldrb	r3, [r7, #21]
 800132c:	b29a      	uxth	r2, r3
 800132e:	7d3b      	ldrb	r3, [r7, #20]
 8001330:	b29b      	uxth	r3, r3
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	b29b      	uxth	r3, r3
 8001336:	4413      	add	r3, r2
 8001338:	b29b      	uxth	r3, r3
 800133a:	3301      	adds	r3, #1
 800133c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800133e:	8bfb      	ldrh	r3, [r7, #30]
 8001340:	029a      	lsls	r2, r3, #10
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	e02e      	b.n	80013a6 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001348:	7c7b      	ldrb	r3, [r7, #17]
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	b2da      	uxtb	r2, r3
 8001350:	7dbb      	ldrb	r3, [r7, #22]
 8001352:	09db      	lsrs	r3, r3, #7
 8001354:	b2db      	uxtb	r3, r3
 8001356:	4413      	add	r3, r2
 8001358:	b2da      	uxtb	r2, r3
 800135a:	7d7b      	ldrb	r3, [r7, #21]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	b2db      	uxtb	r3, r3
 8001360:	f003 0306 	and.w	r3, r3, #6
 8001364:	b2db      	uxtb	r3, r3
 8001366:	4413      	add	r3, r2
 8001368:	b2db      	uxtb	r3, r3
 800136a:	3302      	adds	r3, #2
 800136c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001370:	7d3b      	ldrb	r3, [r7, #20]
 8001372:	099b      	lsrs	r3, r3, #6
 8001374:	b2db      	uxtb	r3, r3
 8001376:	b29a      	uxth	r2, r3
 8001378:	7cfb      	ldrb	r3, [r7, #19]
 800137a:	b29b      	uxth	r3, r3
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	b29b      	uxth	r3, r3
 8001380:	4413      	add	r3, r2
 8001382:	b29a      	uxth	r2, r3
 8001384:	7cbb      	ldrb	r3, [r7, #18]
 8001386:	029b      	lsls	r3, r3, #10
 8001388:	b29b      	uxth	r3, r3
 800138a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800138e:	b29b      	uxth	r3, r3
 8001390:	4413      	add	r3, r2
 8001392:	b29b      	uxth	r3, r3
 8001394:	3301      	adds	r3, #1
 8001396:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001398:	8bfa      	ldrh	r2, [r7, #30]
 800139a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800139e:	3b09      	subs	r3, #9
 80013a0:	409a      	lsls	r2, r3
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80013ac:	e056      	b.n	800145c <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80013bc:	e055      	b.n	800146a <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80013be:	f7ff fbe5 	bl	8000b8c <SD_ReadyWait>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2bff      	cmp	r3, #255	; 0xff
 80013c6:	d14b      	bne.n	8001460 <SD_disk_ioctl+0x240>
        res = RES_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80013ce:	e047      	b.n	8001460 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80013d0:	2100      	movs	r1, #0
 80013d2:	2049      	movs	r0, #73	; 0x49
 80013d4:	f7ff fce4 	bl	8000da0 <SD_SendCmd>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d142      	bne.n	8001464 <SD_disk_ioctl+0x244>
 80013de:	2110      	movs	r1, #16
 80013e0:	6a38      	ldr	r0, [r7, #32]
 80013e2:	f7ff fc53 	bl	8000c8c <SD_RxDataBlock>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d03b      	beq.n	8001464 <SD_disk_ioctl+0x244>
        res = RES_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80013f2:	e037      	b.n	8001464 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80013f4:	2100      	movs	r1, #0
 80013f6:	204a      	movs	r0, #74	; 0x4a
 80013f8:	f7ff fcd2 	bl	8000da0 <SD_SendCmd>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d132      	bne.n	8001468 <SD_disk_ioctl+0x248>
 8001402:	2110      	movs	r1, #16
 8001404:	6a38      	ldr	r0, [r7, #32]
 8001406:	f7ff fc41 	bl	8000c8c <SD_RxDataBlock>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d02b      	beq.n	8001468 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001416:	e027      	b.n	8001468 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001418:	2100      	movs	r1, #0
 800141a:	207a      	movs	r0, #122	; 0x7a
 800141c:	f7ff fcc0 	bl	8000da0 <SD_SendCmd>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d116      	bne.n	8001454 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8001426:	2300      	movs	r3, #0
 8001428:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800142c:	e00b      	b.n	8001446 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 800142e:	6a3c      	ldr	r4, [r7, #32]
 8001430:	1c63      	adds	r3, r4, #1
 8001432:	623b      	str	r3, [r7, #32]
 8001434:	f7ff fb7e 	bl	8000b34 <SPI_RxByte>
 8001438:	4603      	mov	r3, r0
 800143a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800143c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001440:	3301      	adds	r3, #1
 8001442:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001446:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800144a:	2b03      	cmp	r3, #3
 800144c:	d9ef      	bls.n	800142e <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001454:	2304      	movs	r3, #4
 8001456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800145a:	e006      	b.n	800146a <SD_disk_ioctl+0x24a>
      break;
 800145c:	bf00      	nop
 800145e:	e004      	b.n	800146a <SD_disk_ioctl+0x24a>
      break;
 8001460:	bf00      	nop
 8001462:	e002      	b.n	800146a <SD_disk_ioctl+0x24a>
      break;
 8001464:	bf00      	nop
 8001466:	e000      	b.n	800146a <SD_disk_ioctl+0x24a>
      break;
 8001468:	bf00      	nop
    }

    DESELECT();
 800146a:	f7ff fb3d 	bl	8000ae8 <DESELECT>
    SPI_RxByte();
 800146e:	f7ff fb61 	bl	8000b34 <SPI_RxByte>
  }

  return res;
 8001472:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001476:	4618      	mov	r0, r3
 8001478:	372c      	adds	r7, #44	; 0x2c
 800147a:	46bd      	mov	sp, r7
 800147c:	bd90      	pop	{r4, r7, pc}
 800147e:	bf00      	nop
 8001480:	20000000 	.word	0x20000000

08001484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001488:	f000 fa7a 	bl	8001980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800148c:	f000 f874 	bl	8001578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001490:	f000 f912 	bl	80016b8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001494:	f000 f8da 	bl	800164c <MX_SPI1_Init>
  MX_FATFS_Init();
 8001498:	f001 fe24 	bl	80030e4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  fresult = f_mount(&fs,"",0);
 800149c:	2200      	movs	r2, #0
 800149e:	492a      	ldr	r1, [pc, #168]	; (8001548 <main+0xc4>)
 80014a0:	482a      	ldr	r0, [pc, #168]	; (800154c <main+0xc8>)
 80014a2:	f004 f869 	bl	8005578 <f_mount>
 80014a6:	4603      	mov	r3, r0
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b29      	ldr	r3, [pc, #164]	; (8001550 <main+0xcc>)
 80014ac:	701a      	strb	r2, [r3, #0]

  f_getfree(buffer, &fre_clust, &pfs);
 80014ae:	4a29      	ldr	r2, [pc, #164]	; (8001554 <main+0xd0>)
 80014b0:	4929      	ldr	r1, [pc, #164]	; (8001558 <main+0xd4>)
 80014b2:	482a      	ldr	r0, [pc, #168]	; (800155c <main+0xd8>)
 80014b4:	f004 fcae 	bl	8005e14 <f_getfree>

  total = (uint32_t)((pfs->n_fatent -2) * pfs->csize * 0.5);
 80014b8:	4b26      	ldr	r3, [pc, #152]	; (8001554 <main+0xd0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	3b02      	subs	r3, #2
 80014c0:	4a24      	ldr	r2, [pc, #144]	; (8001554 <main+0xd0>)
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	8952      	ldrh	r2, [r2, #10]
 80014c6:	fb02 f303 	mul.w	r3, r2, r3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff f8e8 	bl	80006a0 <__aeabi_ui2d>
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	4b22      	ldr	r3, [pc, #136]	; (8001560 <main+0xdc>)
 80014d6:	f7fe fe77 	bl	80001c8 <__aeabi_dmul>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	f7ff f957 	bl	8000794 <__aeabi_d2uiz>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4a1e      	ldr	r2, [pc, #120]	; (8001564 <main+0xe0>)
 80014ea:	6013      	str	r3, [r2, #0]

  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <main+0xd0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	895b      	ldrh	r3, [r3, #10]
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b18      	ldr	r3, [pc, #96]	; (8001558 <main+0xd4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	fb02 f303 	mul.w	r3, r2, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f8cf 	bl	80006a0 <__aeabi_ui2d>
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <main+0xdc>)
 8001508:	f7fe fe5e 	bl	80001c8 <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff f93e 	bl	8000794 <__aeabi_d2uiz>
 8001518:	4603      	mov	r3, r0
 800151a:	4a13      	ldr	r2, [pc, #76]	; (8001568 <main+0xe4>)
 800151c:	6013      	str	r3, [r2, #0]

  fresult = f_open(&file, "myFirstFile.txt", FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 800151e:	220b      	movs	r2, #11
 8001520:	4912      	ldr	r1, [pc, #72]	; (800156c <main+0xe8>)
 8001522:	4813      	ldr	r0, [pc, #76]	; (8001570 <main+0xec>)
 8001524:	f004 f86e 	bl	8005604 <f_open>
 8001528:	4603      	mov	r3, r0
 800152a:	461a      	mov	r2, r3
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <main+0xcc>)
 800152e:	701a      	strb	r2, [r3, #0]

  f_puts("Merhaba Dunya.", &file);
 8001530:	490f      	ldr	r1, [pc, #60]	; (8001570 <main+0xec>)
 8001532:	4810      	ldr	r0, [pc, #64]	; (8001574 <main+0xf0>)
 8001534:	f004 fd9a 	bl	800606c <f_puts>

  fresult = f_close(&file);
 8001538:	480d      	ldr	r0, [pc, #52]	; (8001570 <main+0xec>)
 800153a:	f004 fc41 	bl	8005dc0 <f_close>
 800153e:	4603      	mov	r3, r0
 8001540:	461a      	mov	r2, r3
 8001542:	4b03      	ldr	r3, [pc, #12]	; (8001550 <main+0xcc>)
 8001544:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001546:	e7fe      	b.n	8001546 <main+0xc2>
 8001548:	08006368 	.word	0x08006368
 800154c:	2000009c 	.word	0x2000009c
 8001550:	20002104 	.word	0x20002104
 8001554:	20002508 	.word	0x20002508
 8001558:	2000250c 	.word	0x2000250c
 800155c:	20002108 	.word	0x20002108
 8001560:	3fe00000 	.word	0x3fe00000
 8001564:	20002510 	.word	0x20002510
 8001568:	20002514 	.word	0x20002514
 800156c:	0800636c 	.word	0x0800636c
 8001570:	200010d4 	.word	0x200010d4
 8001574:	0800637c 	.word	0x0800637c

08001578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b094      	sub	sp, #80	; 0x50
 800157c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157e:	f107 0320 	add.w	r3, r7, #32
 8001582:	2230      	movs	r2, #48	; 0x30
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f004 feb6 	bl	80062f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800159c:	2300      	movs	r3, #0
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	4b28      	ldr	r3, [pc, #160]	; (8001644 <SystemClock_Config+0xcc>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	4a27      	ldr	r2, [pc, #156]	; (8001644 <SystemClock_Config+0xcc>)
 80015a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015aa:	6413      	str	r3, [r2, #64]	; 0x40
 80015ac:	4b25      	ldr	r3, [pc, #148]	; (8001644 <SystemClock_Config+0xcc>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015b8:	2300      	movs	r3, #0
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	4b22      	ldr	r3, [pc, #136]	; (8001648 <SystemClock_Config+0xd0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a21      	ldr	r2, [pc, #132]	; (8001648 <SystemClock_Config+0xd0>)
 80015c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <SystemClock_Config+0xd0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015d4:	2301      	movs	r3, #1
 80015d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015de:	2302      	movs	r3, #2
 80015e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015e8:	2304      	movs	r3, #4
 80015ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015ec:	23a8      	movs	r3, #168	; 0xa8
 80015ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015f0:	2302      	movs	r3, #2
 80015f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015f4:	2304      	movs	r3, #4
 80015f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f8:	f107 0320 	add.w	r3, r7, #32
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 fccd 	bl	8001f9c <HAL_RCC_OscConfig>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001608:	f000 f8a6 	bl	8001758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800160c:	230f      	movs	r3, #15
 800160e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001610:	2302      	movs	r3, #2
 8001612:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001618:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800161c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800161e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001622:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	2105      	movs	r1, #5
 800162a:	4618      	mov	r0, r3
 800162c:	f000 ff2e 	bl	800248c <HAL_RCC_ClockConfig>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001636:	f000 f88f 	bl	8001758 <Error_Handler>
  }
}
 800163a:	bf00      	nop
 800163c:	3750      	adds	r7, #80	; 0x50
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800
 8001648:	40007000 	.word	0x40007000

0800164c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001650:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <MX_SPI1_Init+0x64>)
 8001652:	4a18      	ldr	r2, [pc, #96]	; (80016b4 <MX_SPI1_Init+0x68>)
 8001654:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001656:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <MX_SPI1_Init+0x64>)
 8001658:	f44f 7282 	mov.w	r2, #260	; 0x104
 800165c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800165e:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <MX_SPI1_Init+0x64>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <MX_SPI1_Init+0x64>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_SPI1_Init+0x64>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <MX_SPI1_Init+0x64>)
 8001672:	2200      	movs	r2, #0
 8001674:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_SPI1_Init+0x64>)
 8001678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800167c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800167e:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_SPI1_Init+0x64>)
 8001680:	2228      	movs	r2, #40	; 0x28
 8001682:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <MX_SPI1_Init+0x64>)
 8001686:	2200      	movs	r2, #0
 8001688:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_SPI1_Init+0x64>)
 800168c:	2200      	movs	r2, #0
 800168e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <MX_SPI1_Init+0x64>)
 8001692:	2200      	movs	r2, #0
 8001694:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_SPI1_Init+0x64>)
 8001698:	220a      	movs	r2, #10
 800169a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800169c:	4804      	ldr	r0, [pc, #16]	; (80016b0 <MX_SPI1_Init+0x64>)
 800169e:	f001 f8e1 	bl	8002864 <HAL_SPI_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016a8:	f000 f856 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000044 	.word	0x20000044
 80016b4:	40013000 	.word	0x40013000

080016b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <MX_GPIO_Init+0x98>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a1e      	ldr	r2, [pc, #120]	; (8001750 <MX_GPIO_Init+0x98>)
 80016d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <MX_GPIO_Init+0x98>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	4b18      	ldr	r3, [pc, #96]	; (8001750 <MX_GPIO_Init+0x98>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a17      	ldr	r2, [pc, #92]	; (8001750 <MX_GPIO_Init+0x98>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <MX_GPIO_Init+0x98>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	603b      	str	r3, [r7, #0]
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_GPIO_Init+0x98>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a10      	ldr	r2, [pc, #64]	; (8001750 <MX_GPIO_Init+0x98>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <MX_GPIO_Init+0x98>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	2110      	movs	r1, #16
 8001726:	480b      	ldr	r0, [pc, #44]	; (8001754 <MX_GPIO_Init+0x9c>)
 8001728:	f000 fc1e 	bl	8001f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800172c:	2310      	movs	r3, #16
 800172e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001730:	2301      	movs	r3, #1
 8001732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	4619      	mov	r1, r3
 8001742:	4804      	ldr	r0, [pc, #16]	; (8001754 <MX_GPIO_Init+0x9c>)
 8001744:	f000 fa74 	bl	8001c30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001748:	bf00      	nop
 800174a:	3720      	adds	r7, #32
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40023800 	.word	0x40023800
 8001754:	40020800 	.word	0x40020800

08001758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800175c:	b672      	cpsid	i
}
 800175e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001760:	e7fe      	b.n	8001760 <Error_Handler+0x8>
	...

08001764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <HAL_MspInit+0x4c>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <HAL_MspInit+0x4c>)
 8001774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001778:	6453      	str	r3, [r2, #68]	; 0x44
 800177a:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <HAL_MspInit+0x4c>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	603b      	str	r3, [r7, #0]
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_MspInit+0x4c>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a08      	ldr	r2, [pc, #32]	; (80017b0 <HAL_MspInit+0x4c>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_MspInit+0x4c>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800

080017b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a19      	ldr	r2, [pc, #100]	; (8001838 <HAL_SPI_MspInit+0x84>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d12b      	bne.n	800182e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <HAL_SPI_MspInit+0x88>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	4a17      	ldr	r2, [pc, #92]	; (800183c <HAL_SPI_MspInit+0x88>)
 80017e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017e4:	6453      	str	r3, [r2, #68]	; 0x44
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_SPI_MspInit+0x88>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <HAL_SPI_MspInit+0x88>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a10      	ldr	r2, [pc, #64]	; (800183c <HAL_SPI_MspInit+0x88>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <HAL_SPI_MspInit+0x88>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800180e:	23e0      	movs	r3, #224	; 0xe0
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800181e:	2305      	movs	r3, #5
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	4805      	ldr	r0, [pc, #20]	; (8001840 <HAL_SPI_MspInit+0x8c>)
 800182a:	f000 fa01 	bl	8001c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800182e:	bf00      	nop
 8001830:	3728      	adds	r7, #40	; 0x28
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40013000 	.word	0x40013000
 800183c:	40023800 	.word	0x40023800
 8001840:	40020000 	.word	0x40020000

08001844 <SDTimer_Handler>:

volatile uint8_t Timer1, Timer2;
volatile uint8_t FatFsCnt = 0;

void SDTimer_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8001848:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <SDTimer_Handler+0x40>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d006      	beq.n	8001860 <SDTimer_Handler+0x1c>
		Timer1--;
 8001852:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <SDTimer_Handler+0x40>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	3b01      	subs	r3, #1
 800185a:	b2da      	uxtb	r2, r3
 800185c:	4b09      	ldr	r3, [pc, #36]	; (8001884 <SDTimer_Handler+0x40>)
 800185e:	701a      	strb	r2, [r3, #0]

	if(Timer2 > 0)
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <SDTimer_Handler+0x44>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d006      	beq.n	8001878 <SDTimer_Handler+0x34>
		Timer2--;
 800186a:	4b07      	ldr	r3, [pc, #28]	; (8001888 <SDTimer_Handler+0x44>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	3b01      	subs	r3, #1
 8001872:	b2da      	uxtb	r2, r3
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <SDTimer_Handler+0x44>)
 8001876:	701a      	strb	r2, [r3, #0]


}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20002518 	.word	0x20002518
 8001888:	20002519 	.word	0x20002519

0800188c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <NMI_Handler+0x4>

08001892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001896:	e7fe      	b.n	8001896 <HardFault_Handler+0x4>

08001898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <MemManage_Handler+0x4>

0800189e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <BusFault_Handler+0x4>

080018a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <UsageFault_Handler+0x4>

080018aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 80018d8:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <SysTick_Handler+0x30>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	3301      	adds	r3, #1
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <SysTick_Handler+0x30>)
 80018e4:	701a      	strb	r2, [r3, #0]

	if(FatFsCnt == 10)
 80018e6:	4b07      	ldr	r3, [pc, #28]	; (8001904 <SysTick_Handler+0x30>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2b0a      	cmp	r3, #10
 80018ee:	d104      	bne.n	80018fa <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <SysTick_Handler+0x30>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80018f6:	f7ff ffa5 	bl	8001844 <SDTimer_Handler>
	}


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018fa:	f000 f893 	bl	8001a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	2000251a 	.word	0x2000251a

08001908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <SystemInit+0x20>)
 800190e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001912:	4a05      	ldr	r2, [pc, #20]	; (8001928 <SystemInit+0x20>)
 8001914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800192c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001964 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001930:	480d      	ldr	r0, [pc, #52]	; (8001968 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001932:	490e      	ldr	r1, [pc, #56]	; (800196c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001934:	4a0e      	ldr	r2, [pc, #56]	; (8001970 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001938:	e002      	b.n	8001940 <LoopCopyDataInit>

0800193a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800193a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800193c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193e:	3304      	adds	r3, #4

08001940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001944:	d3f9      	bcc.n	800193a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001946:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001948:	4c0b      	ldr	r4, [pc, #44]	; (8001978 <LoopFillZerobss+0x26>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800194c:	e001      	b.n	8001952 <LoopFillZerobss>

0800194e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001950:	3204      	adds	r2, #4

08001952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001954:	d3fb      	bcc.n	800194e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001956:	f7ff ffd7 	bl	8001908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800195a:	f004 fcd5 	bl	8006308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800195e:	f7ff fd91 	bl	8001484 <main>
  bx  lr    
 8001962:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001964:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800196c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001970:	08006834 	.word	0x08006834
  ldr r2, =_sbss
 8001974:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001978:	2000275c 	.word	0x2000275c

0800197c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800197c:	e7fe      	b.n	800197c <ADC_IRQHandler>
	...

08001980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001984:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <HAL_Init+0x40>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0d      	ldr	r2, [pc, #52]	; (80019c0 <HAL_Init+0x40>)
 800198a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800198e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_Init+0x40>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <HAL_Init+0x40>)
 8001996:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800199a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <HAL_Init+0x40>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a07      	ldr	r2, [pc, #28]	; (80019c0 <HAL_Init+0x40>)
 80019a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a8:	2003      	movs	r0, #3
 80019aa:	f000 f90d 	bl	8001bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ae:	200f      	movs	r0, #15
 80019b0:	f000 f808 	bl	80019c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b4:	f7ff fed6 	bl	8001764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023c00 	.word	0x40023c00

080019c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_InitTick+0x54>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_InitTick+0x58>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	4619      	mov	r1, r3
 80019d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019da:	fbb3 f3f1 	udiv	r3, r3, r1
 80019de:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f917 	bl	8001c16 <HAL_SYSTICK_Config>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00e      	b.n	8001a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b0f      	cmp	r3, #15
 80019f6:	d80a      	bhi.n	8001a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f8:	2200      	movs	r2, #0
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	f000 f8ed 	bl	8001bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a04:	4a06      	ldr	r2, [pc, #24]	; (8001a20 <HAL_InitTick+0x5c>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e000      	b.n	8001a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000004 	.word	0x20000004
 8001a1c:	2000000c 	.word	0x2000000c
 8001a20:	20000008 	.word	0x20000008

08001a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_IncTick+0x20>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_IncTick+0x24>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <HAL_IncTick+0x24>)
 8001a36:	6013      	str	r3, [r2, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	2000000c 	.word	0x2000000c
 8001a48:	2000251c 	.word	0x2000251c

08001a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a50:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <HAL_GetTick+0x14>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	2000251c 	.word	0x2000251c

08001a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a80:	4013      	ands	r3, r2
 8001a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a96:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	60d3      	str	r3, [r2, #12]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	0a1b      	lsrs	r3, r3, #8
 8001ab6:	f003 0307 	and.w	r3, r3, #7
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	6039      	str	r1, [r7, #0]
 8001ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	db0a      	blt.n	8001af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	490c      	ldr	r1, [pc, #48]	; (8001b14 <__NVIC_SetPriority+0x4c>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	0112      	lsls	r2, r2, #4
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	440b      	add	r3, r1
 8001aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af0:	e00a      	b.n	8001b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4908      	ldr	r1, [pc, #32]	; (8001b18 <__NVIC_SetPriority+0x50>)
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	3b04      	subs	r3, #4
 8001b00:	0112      	lsls	r2, r2, #4
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	440b      	add	r3, r1
 8001b06:	761a      	strb	r2, [r3, #24]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000e100 	.word	0xe000e100
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b089      	sub	sp, #36	; 0x24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f1c3 0307 	rsb	r3, r3, #7
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	bf28      	it	cs
 8001b3a:	2304      	movcs	r3, #4
 8001b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3304      	adds	r3, #4
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d902      	bls.n	8001b4c <NVIC_EncodePriority+0x30>
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3b03      	subs	r3, #3
 8001b4a:	e000      	b.n	8001b4e <NVIC_EncodePriority+0x32>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	f04f 32ff 	mov.w	r2, #4294967295
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	401a      	ands	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6e:	43d9      	mvns	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	4313      	orrs	r3, r2
         );
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3724      	adds	r7, #36	; 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b94:	d301      	bcc.n	8001b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00f      	b.n	8001bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <SysTick_Config+0x40>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba2:	210f      	movs	r1, #15
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	f7ff ff8e 	bl	8001ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <SysTick_Config+0x40>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <SysTick_Config+0x40>)
 8001bb4:	2207      	movs	r2, #7
 8001bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	e000e010 	.word	0xe000e010

08001bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff ff47 	bl	8001a64 <__NVIC_SetPriorityGrouping>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf0:	f7ff ff5c 	bl	8001aac <__NVIC_GetPriorityGrouping>
 8001bf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	68b9      	ldr	r1, [r7, #8]
 8001bfa:	6978      	ldr	r0, [r7, #20]
 8001bfc:	f7ff ff8e 	bl	8001b1c <NVIC_EncodePriority>
 8001c00:	4602      	mov	r2, r0
 8001c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c06:	4611      	mov	r1, r2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff5d 	bl	8001ac8 <__NVIC_SetPriority>
}
 8001c0e:	bf00      	nop
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff ffb0 	bl	8001b84 <SysTick_Config>
 8001c24:	4603      	mov	r3, r0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b089      	sub	sp, #36	; 0x24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	e16b      	b.n	8001f24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	f040 815a 	bne.w	8001f1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d005      	beq.n	8001c82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d130      	bne.n	8001ce4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb8:	2201      	movs	r2, #1
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	091b      	lsrs	r3, r3, #4
 8001cce:	f003 0201 	and.w	r2, r3, #1
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d017      	beq.n	8001d20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d123      	bne.n	8001d74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	08da      	lsrs	r2, r3, #3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3208      	adds	r2, #8
 8001d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	220f      	movs	r2, #15
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	691a      	ldr	r2, [r3, #16]
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	08da      	lsrs	r2, r3, #3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	3208      	adds	r2, #8
 8001d6e:	69b9      	ldr	r1, [r7, #24]
 8001d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	2203      	movs	r2, #3
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0203 	and.w	r2, r3, #3
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 80b4 	beq.w	8001f1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	4b60      	ldr	r3, [pc, #384]	; (8001f3c <HAL_GPIO_Init+0x30c>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	4a5f      	ldr	r2, [pc, #380]	; (8001f3c <HAL_GPIO_Init+0x30c>)
 8001dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc6:	4b5d      	ldr	r3, [pc, #372]	; (8001f3c <HAL_GPIO_Init+0x30c>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dd2:	4a5b      	ldr	r2, [pc, #364]	; (8001f40 <HAL_GPIO_Init+0x310>)
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	3302      	adds	r3, #2
 8001dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	220f      	movs	r2, #15
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a52      	ldr	r2, [pc, #328]	; (8001f44 <HAL_GPIO_Init+0x314>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d02b      	beq.n	8001e56 <HAL_GPIO_Init+0x226>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a51      	ldr	r2, [pc, #324]	; (8001f48 <HAL_GPIO_Init+0x318>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d025      	beq.n	8001e52 <HAL_GPIO_Init+0x222>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a50      	ldr	r2, [pc, #320]	; (8001f4c <HAL_GPIO_Init+0x31c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d01f      	beq.n	8001e4e <HAL_GPIO_Init+0x21e>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a4f      	ldr	r2, [pc, #316]	; (8001f50 <HAL_GPIO_Init+0x320>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d019      	beq.n	8001e4a <HAL_GPIO_Init+0x21a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a4e      	ldr	r2, [pc, #312]	; (8001f54 <HAL_GPIO_Init+0x324>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d013      	beq.n	8001e46 <HAL_GPIO_Init+0x216>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a4d      	ldr	r2, [pc, #308]	; (8001f58 <HAL_GPIO_Init+0x328>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00d      	beq.n	8001e42 <HAL_GPIO_Init+0x212>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a4c      	ldr	r2, [pc, #304]	; (8001f5c <HAL_GPIO_Init+0x32c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d007      	beq.n	8001e3e <HAL_GPIO_Init+0x20e>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a4b      	ldr	r2, [pc, #300]	; (8001f60 <HAL_GPIO_Init+0x330>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d101      	bne.n	8001e3a <HAL_GPIO_Init+0x20a>
 8001e36:	2307      	movs	r3, #7
 8001e38:	e00e      	b.n	8001e58 <HAL_GPIO_Init+0x228>
 8001e3a:	2308      	movs	r3, #8
 8001e3c:	e00c      	b.n	8001e58 <HAL_GPIO_Init+0x228>
 8001e3e:	2306      	movs	r3, #6
 8001e40:	e00a      	b.n	8001e58 <HAL_GPIO_Init+0x228>
 8001e42:	2305      	movs	r3, #5
 8001e44:	e008      	b.n	8001e58 <HAL_GPIO_Init+0x228>
 8001e46:	2304      	movs	r3, #4
 8001e48:	e006      	b.n	8001e58 <HAL_GPIO_Init+0x228>
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e004      	b.n	8001e58 <HAL_GPIO_Init+0x228>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e002      	b.n	8001e58 <HAL_GPIO_Init+0x228>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <HAL_GPIO_Init+0x228>
 8001e56:	2300      	movs	r3, #0
 8001e58:	69fa      	ldr	r2, [r7, #28]
 8001e5a:	f002 0203 	and.w	r2, r2, #3
 8001e5e:	0092      	lsls	r2, r2, #2
 8001e60:	4093      	lsls	r3, r2
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e68:	4935      	ldr	r1, [pc, #212]	; (8001f40 <HAL_GPIO_Init+0x310>)
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	3302      	adds	r3, #2
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e76:	4b3b      	ldr	r3, [pc, #236]	; (8001f64 <HAL_GPIO_Init+0x334>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e9a:	4a32      	ldr	r2, [pc, #200]	; (8001f64 <HAL_GPIO_Init+0x334>)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ea0:	4b30      	ldr	r3, [pc, #192]	; (8001f64 <HAL_GPIO_Init+0x334>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ec4:	4a27      	ldr	r2, [pc, #156]	; (8001f64 <HAL_GPIO_Init+0x334>)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eca:	4b26      	ldr	r3, [pc, #152]	; (8001f64 <HAL_GPIO_Init+0x334>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eee:	4a1d      	ldr	r2, [pc, #116]	; (8001f64 <HAL_GPIO_Init+0x334>)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <HAL_GPIO_Init+0x334>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f18:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <HAL_GPIO_Init+0x334>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3301      	adds	r3, #1
 8001f22:	61fb      	str	r3, [r7, #28]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	2b0f      	cmp	r3, #15
 8001f28:	f67f ae90 	bls.w	8001c4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	bf00      	nop
 8001f30:	3724      	adds	r7, #36	; 0x24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40013800 	.word	0x40013800
 8001f44:	40020000 	.word	0x40020000
 8001f48:	40020400 	.word	0x40020400
 8001f4c:	40020800 	.word	0x40020800
 8001f50:	40020c00 	.word	0x40020c00
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40021400 	.word	0x40021400
 8001f5c:	40021800 	.word	0x40021800
 8001f60:	40021c00 	.word	0x40021c00
 8001f64:	40013c00 	.word	0x40013c00

08001f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	807b      	strh	r3, [r7, #2]
 8001f74:	4613      	mov	r3, r2
 8001f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f78:	787b      	ldrb	r3, [r7, #1]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f7e:	887a      	ldrh	r2, [r7, #2]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f84:	e003      	b.n	8001f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f86:	887b      	ldrh	r3, [r7, #2]
 8001f88:	041a      	lsls	r2, r3, #16
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	619a      	str	r2, [r3, #24]
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e267      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d075      	beq.n	80020a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fba:	4b88      	ldr	r3, [pc, #544]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d00c      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fc6:	4b85      	ldr	r3, [pc, #532]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d112      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fd2:	4b82      	ldr	r3, [pc, #520]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fde:	d10b      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe0:	4b7e      	ldr	r3, [pc, #504]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d05b      	beq.n	80020a4 <HAL_RCC_OscConfig+0x108>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d157      	bne.n	80020a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e242      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002000:	d106      	bne.n	8002010 <HAL_RCC_OscConfig+0x74>
 8002002:	4b76      	ldr	r3, [pc, #472]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a75      	ldr	r2, [pc, #468]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	e01d      	b.n	800204c <HAL_RCC_OscConfig+0xb0>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002018:	d10c      	bne.n	8002034 <HAL_RCC_OscConfig+0x98>
 800201a:	4b70      	ldr	r3, [pc, #448]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a6f      	ldr	r2, [pc, #444]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	4b6d      	ldr	r3, [pc, #436]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a6c      	ldr	r2, [pc, #432]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 800202c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	e00b      	b.n	800204c <HAL_RCC_OscConfig+0xb0>
 8002034:	4b69      	ldr	r3, [pc, #420]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a68      	ldr	r2, [pc, #416]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 800203a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	4b66      	ldr	r3, [pc, #408]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a65      	ldr	r2, [pc, #404]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800204a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d013      	beq.n	800207c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7ff fcfa 	bl	8001a4c <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800205c:	f7ff fcf6 	bl	8001a4c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	; 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e207      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206e:	4b5b      	ldr	r3, [pc, #364]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0xc0>
 800207a:	e014      	b.n	80020a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7ff fce6 	bl	8001a4c <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002084:	f7ff fce2 	bl	8001a4c <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b64      	cmp	r3, #100	; 0x64
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e1f3      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002096:	4b51      	ldr	r3, [pc, #324]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0xe8>
 80020a2:	e000      	b.n	80020a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d063      	beq.n	800217a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020b2:	4b4a      	ldr	r3, [pc, #296]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00b      	beq.n	80020d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020be:	4b47      	ldr	r3, [pc, #284]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d11c      	bne.n	8002104 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ca:	4b44      	ldr	r3, [pc, #272]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d116      	bne.n	8002104 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d6:	4b41      	ldr	r3, [pc, #260]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d005      	beq.n	80020ee <HAL_RCC_OscConfig+0x152>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d001      	beq.n	80020ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e1c7      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ee:	4b3b      	ldr	r3, [pc, #236]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4937      	ldr	r1, [pc, #220]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002102:	e03a      	b.n	800217a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d020      	beq.n	800214e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800210c:	4b34      	ldr	r3, [pc, #208]	; (80021e0 <HAL_RCC_OscConfig+0x244>)
 800210e:	2201      	movs	r2, #1
 8002110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002112:	f7ff fc9b 	bl	8001a4c <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800211a:	f7ff fc97 	bl	8001a4c <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e1a8      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002138:	4b28      	ldr	r3, [pc, #160]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4925      	ldr	r1, [pc, #148]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002148:	4313      	orrs	r3, r2
 800214a:	600b      	str	r3, [r1, #0]
 800214c:	e015      	b.n	800217a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <HAL_RCC_OscConfig+0x244>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002154:	f7ff fc7a 	bl	8001a4c <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800215c:	f7ff fc76 	bl	8001a4c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e187      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216e:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d036      	beq.n	80021f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d016      	beq.n	80021bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <HAL_RCC_OscConfig+0x248>)
 8002190:	2201      	movs	r2, #1
 8002192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002194:	f7ff fc5a 	bl	8001a4c <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800219c:	f7ff fc56 	bl	8001a4c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e167      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ae:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 80021b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x200>
 80021ba:	e01b      	b.n	80021f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021bc:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <HAL_RCC_OscConfig+0x248>)
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c2:	f7ff fc43 	bl	8001a4c <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c8:	e00e      	b.n	80021e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ca:	f7ff fc3f 	bl	8001a4c <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d907      	bls.n	80021e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e150      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
 80021dc:	40023800 	.word	0x40023800
 80021e0:	42470000 	.word	0x42470000
 80021e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e8:	4b88      	ldr	r3, [pc, #544]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80021ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1ea      	bne.n	80021ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 8097 	beq.w	8002330 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002202:	2300      	movs	r3, #0
 8002204:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002206:	4b81      	ldr	r3, [pc, #516]	; (800240c <HAL_RCC_OscConfig+0x470>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10f      	bne.n	8002232 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	4b7d      	ldr	r3, [pc, #500]	; (800240c <HAL_RCC_OscConfig+0x470>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	4a7c      	ldr	r2, [pc, #496]	; (800240c <HAL_RCC_OscConfig+0x470>)
 800221c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002220:	6413      	str	r3, [r2, #64]	; 0x40
 8002222:	4b7a      	ldr	r3, [pc, #488]	; (800240c <HAL_RCC_OscConfig+0x470>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800222e:	2301      	movs	r3, #1
 8002230:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002232:	4b77      	ldr	r3, [pc, #476]	; (8002410 <HAL_RCC_OscConfig+0x474>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223a:	2b00      	cmp	r3, #0
 800223c:	d118      	bne.n	8002270 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800223e:	4b74      	ldr	r3, [pc, #464]	; (8002410 <HAL_RCC_OscConfig+0x474>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a73      	ldr	r2, [pc, #460]	; (8002410 <HAL_RCC_OscConfig+0x474>)
 8002244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224a:	f7ff fbff 	bl	8001a4c <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002252:	f7ff fbfb 	bl	8001a4c <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e10c      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	4b6a      	ldr	r3, [pc, #424]	; (8002410 <HAL_RCC_OscConfig+0x474>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f0      	beq.n	8002252 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d106      	bne.n	8002286 <HAL_RCC_OscConfig+0x2ea>
 8002278:	4b64      	ldr	r3, [pc, #400]	; (800240c <HAL_RCC_OscConfig+0x470>)
 800227a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227c:	4a63      	ldr	r2, [pc, #396]	; (800240c <HAL_RCC_OscConfig+0x470>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6713      	str	r3, [r2, #112]	; 0x70
 8002284:	e01c      	b.n	80022c0 <HAL_RCC_OscConfig+0x324>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2b05      	cmp	r3, #5
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x30c>
 800228e:	4b5f      	ldr	r3, [pc, #380]	; (800240c <HAL_RCC_OscConfig+0x470>)
 8002290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002292:	4a5e      	ldr	r2, [pc, #376]	; (800240c <HAL_RCC_OscConfig+0x470>)
 8002294:	f043 0304 	orr.w	r3, r3, #4
 8002298:	6713      	str	r3, [r2, #112]	; 0x70
 800229a:	4b5c      	ldr	r3, [pc, #368]	; (800240c <HAL_RCC_OscConfig+0x470>)
 800229c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229e:	4a5b      	ldr	r2, [pc, #364]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6713      	str	r3, [r2, #112]	; 0x70
 80022a6:	e00b      	b.n	80022c0 <HAL_RCC_OscConfig+0x324>
 80022a8:	4b58      	ldr	r3, [pc, #352]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80022aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ac:	4a57      	ldr	r2, [pc, #348]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80022ae:	f023 0301 	bic.w	r3, r3, #1
 80022b2:	6713      	str	r3, [r2, #112]	; 0x70
 80022b4:	4b55      	ldr	r3, [pc, #340]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80022b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b8:	4a54      	ldr	r2, [pc, #336]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80022ba:	f023 0304 	bic.w	r3, r3, #4
 80022be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d015      	beq.n	80022f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c8:	f7ff fbc0 	bl	8001a4c <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ce:	e00a      	b.n	80022e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d0:	f7ff fbbc 	bl	8001a4c <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3288 	movw	r2, #5000	; 0x1388
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e0cb      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e6:	4b49      	ldr	r3, [pc, #292]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0ee      	beq.n	80022d0 <HAL_RCC_OscConfig+0x334>
 80022f2:	e014      	b.n	800231e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f4:	f7ff fbaa 	bl	8001a4c <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022fa:	e00a      	b.n	8002312 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022fc:	f7ff fba6 	bl	8001a4c <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	f241 3288 	movw	r2, #5000	; 0x1388
 800230a:	4293      	cmp	r3, r2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e0b5      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002312:	4b3e      	ldr	r3, [pc, #248]	; (800240c <HAL_RCC_OscConfig+0x470>)
 8002314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1ee      	bne.n	80022fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800231e:	7dfb      	ldrb	r3, [r7, #23]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d105      	bne.n	8002330 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002324:	4b39      	ldr	r3, [pc, #228]	; (800240c <HAL_RCC_OscConfig+0x470>)
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	4a38      	ldr	r2, [pc, #224]	; (800240c <HAL_RCC_OscConfig+0x470>)
 800232a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800232e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80a1 	beq.w	800247c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800233a:	4b34      	ldr	r3, [pc, #208]	; (800240c <HAL_RCC_OscConfig+0x470>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b08      	cmp	r3, #8
 8002344:	d05c      	beq.n	8002400 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d141      	bne.n	80023d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234e:	4b31      	ldr	r3, [pc, #196]	; (8002414 <HAL_RCC_OscConfig+0x478>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002354:	f7ff fb7a 	bl	8001a4c <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800235c:	f7ff fb76 	bl	8001a4c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e087      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236e:	4b27      	ldr	r3, [pc, #156]	; (800240c <HAL_RCC_OscConfig+0x470>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69da      	ldr	r2, [r3, #28]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	019b      	lsls	r3, r3, #6
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	085b      	lsrs	r3, r3, #1
 8002392:	3b01      	subs	r3, #1
 8002394:	041b      	lsls	r3, r3, #16
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	061b      	lsls	r3, r3, #24
 800239e:	491b      	ldr	r1, [pc, #108]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023a4:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <HAL_RCC_OscConfig+0x478>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7ff fb4f 	bl	8001a4c <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b2:	f7ff fb4b 	bl	8001a4c <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e05c      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x416>
 80023d0:	e054      	b.n	800247c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <HAL_RCC_OscConfig+0x478>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7ff fb38 	bl	8001a4c <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e0:	f7ff fb34 	bl	8001a4c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e045      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x444>
 80023fe:	e03d      	b.n	800247c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d107      	bne.n	8002418 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e038      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
 800240c:	40023800 	.word	0x40023800
 8002410:	40007000 	.word	0x40007000
 8002414:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002418:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <HAL_RCC_OscConfig+0x4ec>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d028      	beq.n	8002478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002430:	429a      	cmp	r2, r3
 8002432:	d121      	bne.n	8002478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d11a      	bne.n	8002478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002448:	4013      	ands	r3, r2
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800244e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002450:	4293      	cmp	r3, r2
 8002452:	d111      	bne.n	8002478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245e:	085b      	lsrs	r3, r3, #1
 8002460:	3b01      	subs	r3, #1
 8002462:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002464:	429a      	cmp	r2, r3
 8002466:	d107      	bne.n	8002478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002472:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002474:	429a      	cmp	r2, r3
 8002476:	d001      	beq.n	800247c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800

0800248c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0cc      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024a0:	4b68      	ldr	r3, [pc, #416]	; (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d90c      	bls.n	80024c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ae:	4b65      	ldr	r3, [pc, #404]	; (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b6:	4b63      	ldr	r3, [pc, #396]	; (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0b8      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d020      	beq.n	8002516 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e0:	4b59      	ldr	r3, [pc, #356]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	4a58      	ldr	r2, [pc, #352]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024f8:	4b53      	ldr	r3, [pc, #332]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	4a52      	ldr	r2, [pc, #328]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002502:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002504:	4b50      	ldr	r3, [pc, #320]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	494d      	ldr	r1, [pc, #308]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d044      	beq.n	80025ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252a:	4b47      	ldr	r3, [pc, #284]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d119      	bne.n	800256a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e07f      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d003      	beq.n	800254a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002546:	2b03      	cmp	r3, #3
 8002548:	d107      	bne.n	800255a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254a:	4b3f      	ldr	r3, [pc, #252]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d109      	bne.n	800256a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e06f      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255a:	4b3b      	ldr	r3, [pc, #236]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e067      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800256a:	4b37      	ldr	r3, [pc, #220]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f023 0203 	bic.w	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	4934      	ldr	r1, [pc, #208]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 8002578:	4313      	orrs	r3, r2
 800257a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800257c:	f7ff fa66 	bl	8001a4c <HAL_GetTick>
 8002580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002582:	e00a      	b.n	800259a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002584:	f7ff fa62 	bl	8001a4c <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002592:	4293      	cmp	r3, r2
 8002594:	d901      	bls.n	800259a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e04f      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259a:	4b2b      	ldr	r3, [pc, #172]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 020c 	and.w	r2, r3, #12
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d1eb      	bne.n	8002584 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025ac:	4b25      	ldr	r3, [pc, #148]	; (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d20c      	bcs.n	80025d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ba:	4b22      	ldr	r3, [pc, #136]	; (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c2:	4b20      	ldr	r3, [pc, #128]	; (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d001      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e032      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d008      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4916      	ldr	r1, [pc, #88]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d009      	beq.n	8002612 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	490e      	ldr	r1, [pc, #56]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	4313      	orrs	r3, r2
 8002610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002612:	f000 f821 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 8002616:	4602      	mov	r2, r0
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	490a      	ldr	r1, [pc, #40]	; (800264c <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	5ccb      	ldrb	r3, [r1, r3]
 8002626:	fa22 f303 	lsr.w	r3, r2, r3
 800262a:	4a09      	ldr	r2, [pc, #36]	; (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800262e:	4b09      	ldr	r3, [pc, #36]	; (8002654 <HAL_RCC_ClockConfig+0x1c8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff f9c6 	bl	80019c4 <HAL_InitTick>

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40023c00 	.word	0x40023c00
 8002648:	40023800 	.word	0x40023800
 800264c:	080063d4 	.word	0x080063d4
 8002650:	20000004 	.word	0x20000004
 8002654:	20000008 	.word	0x20000008

08002658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800265c:	b094      	sub	sp, #80	; 0x50
 800265e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	647b      	str	r3, [r7, #68]	; 0x44
 8002664:	2300      	movs	r3, #0
 8002666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002668:	2300      	movs	r3, #0
 800266a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002670:	4b79      	ldr	r3, [pc, #484]	; (8002858 <HAL_RCC_GetSysClockFreq+0x200>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 030c 	and.w	r3, r3, #12
 8002678:	2b08      	cmp	r3, #8
 800267a:	d00d      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0x40>
 800267c:	2b08      	cmp	r3, #8
 800267e:	f200 80e1 	bhi.w	8002844 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0x34>
 8002686:	2b04      	cmp	r3, #4
 8002688:	d003      	beq.n	8002692 <HAL_RCC_GetSysClockFreq+0x3a>
 800268a:	e0db      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800268c:	4b73      	ldr	r3, [pc, #460]	; (800285c <HAL_RCC_GetSysClockFreq+0x204>)
 800268e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002690:	e0db      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002692:	4b73      	ldr	r3, [pc, #460]	; (8002860 <HAL_RCC_GetSysClockFreq+0x208>)
 8002694:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002696:	e0d8      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002698:	4b6f      	ldr	r3, [pc, #444]	; (8002858 <HAL_RCC_GetSysClockFreq+0x200>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026a2:	4b6d      	ldr	r3, [pc, #436]	; (8002858 <HAL_RCC_GetSysClockFreq+0x200>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d063      	beq.n	8002776 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ae:	4b6a      	ldr	r3, [pc, #424]	; (8002858 <HAL_RCC_GetSysClockFreq+0x200>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	099b      	lsrs	r3, r3, #6
 80026b4:	2200      	movs	r2, #0
 80026b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80026b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026c0:	633b      	str	r3, [r7, #48]	; 0x30
 80026c2:	2300      	movs	r3, #0
 80026c4:	637b      	str	r3, [r7, #52]	; 0x34
 80026c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026ca:	4622      	mov	r2, r4
 80026cc:	462b      	mov	r3, r5
 80026ce:	f04f 0000 	mov.w	r0, #0
 80026d2:	f04f 0100 	mov.w	r1, #0
 80026d6:	0159      	lsls	r1, r3, #5
 80026d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026dc:	0150      	lsls	r0, r2, #5
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4621      	mov	r1, r4
 80026e4:	1a51      	subs	r1, r2, r1
 80026e6:	6139      	str	r1, [r7, #16]
 80026e8:	4629      	mov	r1, r5
 80026ea:	eb63 0301 	sbc.w	r3, r3, r1
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026fc:	4659      	mov	r1, fp
 80026fe:	018b      	lsls	r3, r1, #6
 8002700:	4651      	mov	r1, sl
 8002702:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002706:	4651      	mov	r1, sl
 8002708:	018a      	lsls	r2, r1, #6
 800270a:	4651      	mov	r1, sl
 800270c:	ebb2 0801 	subs.w	r8, r2, r1
 8002710:	4659      	mov	r1, fp
 8002712:	eb63 0901 	sbc.w	r9, r3, r1
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002722:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002726:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800272a:	4690      	mov	r8, r2
 800272c:	4699      	mov	r9, r3
 800272e:	4623      	mov	r3, r4
 8002730:	eb18 0303 	adds.w	r3, r8, r3
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	462b      	mov	r3, r5
 8002738:	eb49 0303 	adc.w	r3, r9, r3
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800274a:	4629      	mov	r1, r5
 800274c:	024b      	lsls	r3, r1, #9
 800274e:	4621      	mov	r1, r4
 8002750:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002754:	4621      	mov	r1, r4
 8002756:	024a      	lsls	r2, r1, #9
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800275e:	2200      	movs	r2, #0
 8002760:	62bb      	str	r3, [r7, #40]	; 0x28
 8002762:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002764:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002768:	f7fe f834 	bl	80007d4 <__aeabi_uldivmod>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4613      	mov	r3, r2
 8002772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002774:	e058      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002776:	4b38      	ldr	r3, [pc, #224]	; (8002858 <HAL_RCC_GetSysClockFreq+0x200>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	099b      	lsrs	r3, r3, #6
 800277c:	2200      	movs	r2, #0
 800277e:	4618      	mov	r0, r3
 8002780:	4611      	mov	r1, r2
 8002782:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002786:	623b      	str	r3, [r7, #32]
 8002788:	2300      	movs	r3, #0
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
 800278c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002790:	4642      	mov	r2, r8
 8002792:	464b      	mov	r3, r9
 8002794:	f04f 0000 	mov.w	r0, #0
 8002798:	f04f 0100 	mov.w	r1, #0
 800279c:	0159      	lsls	r1, r3, #5
 800279e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027a2:	0150      	lsls	r0, r2, #5
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4641      	mov	r1, r8
 80027aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80027ae:	4649      	mov	r1, r9
 80027b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027c8:	ebb2 040a 	subs.w	r4, r2, sl
 80027cc:	eb63 050b 	sbc.w	r5, r3, fp
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	00eb      	lsls	r3, r5, #3
 80027da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027de:	00e2      	lsls	r2, r4, #3
 80027e0:	4614      	mov	r4, r2
 80027e2:	461d      	mov	r5, r3
 80027e4:	4643      	mov	r3, r8
 80027e6:	18e3      	adds	r3, r4, r3
 80027e8:	603b      	str	r3, [r7, #0]
 80027ea:	464b      	mov	r3, r9
 80027ec:	eb45 0303 	adc.w	r3, r5, r3
 80027f0:	607b      	str	r3, [r7, #4]
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027fe:	4629      	mov	r1, r5
 8002800:	028b      	lsls	r3, r1, #10
 8002802:	4621      	mov	r1, r4
 8002804:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002808:	4621      	mov	r1, r4
 800280a:	028a      	lsls	r2, r1, #10
 800280c:	4610      	mov	r0, r2
 800280e:	4619      	mov	r1, r3
 8002810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002812:	2200      	movs	r2, #0
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	61fa      	str	r2, [r7, #28]
 8002818:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800281c:	f7fd ffda 	bl	80007d4 <__aeabi_uldivmod>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4613      	mov	r3, r2
 8002826:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <HAL_RCC_GetSysClockFreq+0x200>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	0c1b      	lsrs	r3, r3, #16
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	3301      	adds	r3, #1
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002838:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800283a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800283c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002840:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002842:	e002      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_RCC_GetSysClockFreq+0x204>)
 8002846:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002848:	bf00      	nop
    }
  }
  return sysclockfreq;
 800284a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800284c:	4618      	mov	r0, r3
 800284e:	3750      	adds	r7, #80	; 0x50
 8002850:	46bd      	mov	sp, r7
 8002852:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800
 800285c:	00f42400 	.word	0x00f42400
 8002860:	007a1200 	.word	0x007a1200

08002864 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e07b      	b.n	800296e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	2b00      	cmp	r3, #0
 800287c:	d108      	bne.n	8002890 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002886:	d009      	beq.n	800289c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	61da      	str	r2, [r3, #28]
 800288e:	e005      	b.n	800289c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7fe ff7c 	bl	80017b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002920:	ea42 0103 	orr.w	r1, r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002928:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	0c1b      	lsrs	r3, r3, #16
 800293a:	f003 0104 	and.w	r1, r3, #4
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	f003 0210 	and.w	r2, r3, #16
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	69da      	ldr	r2, [r3, #28]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800295c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b088      	sub	sp, #32
 800297a:	af00      	add	r7, sp, #0
 800297c:	60f8      	str	r0, [r7, #12]
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	603b      	str	r3, [r7, #0]
 8002982:	4613      	mov	r3, r2
 8002984:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_SPI_Transmit+0x22>
 8002994:	2302      	movs	r3, #2
 8002996:	e126      	b.n	8002be6 <HAL_SPI_Transmit+0x270>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029a0:	f7ff f854 	bl	8001a4c <HAL_GetTick>
 80029a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d002      	beq.n	80029bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80029b6:	2302      	movs	r3, #2
 80029b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029ba:	e10b      	b.n	8002bd4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <HAL_SPI_Transmit+0x52>
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d102      	bne.n	80029ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029cc:	e102      	b.n	8002bd4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2203      	movs	r2, #3
 80029d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	88fa      	ldrh	r2, [r7, #6]
 80029e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	88fa      	ldrh	r2, [r7, #6]
 80029ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a14:	d10f      	bne.n	8002a36 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a40:	2b40      	cmp	r3, #64	; 0x40
 8002a42:	d007      	beq.n	8002a54 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a5c:	d14b      	bne.n	8002af6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <HAL_SPI_Transmit+0xf6>
 8002a66:	8afb      	ldrh	r3, [r7, #22]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d13e      	bne.n	8002aea <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	881a      	ldrh	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	1c9a      	adds	r2, r3, #2
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a90:	e02b      	b.n	8002aea <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d112      	bne.n	8002ac6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa4:	881a      	ldrh	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	1c9a      	adds	r2, r3, #2
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ac4:	e011      	b.n	8002aea <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ac6:	f7fe ffc1 	bl	8001a4c <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d803      	bhi.n	8002ade <HAL_SPI_Transmit+0x168>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002adc:	d102      	bne.n	8002ae4 <HAL_SPI_Transmit+0x16e>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d102      	bne.n	8002aea <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ae8:	e074      	b.n	8002bd4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1ce      	bne.n	8002a92 <HAL_SPI_Transmit+0x11c>
 8002af4:	e04c      	b.n	8002b90 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <HAL_SPI_Transmit+0x18e>
 8002afe:	8afb      	ldrh	r3, [r7, #22]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d140      	bne.n	8002b86 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	330c      	adds	r3, #12
 8002b0e:	7812      	ldrb	r2, [r2, #0]
 8002b10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b2a:	e02c      	b.n	8002b86 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d113      	bne.n	8002b62 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	330c      	adds	r3, #12
 8002b44:	7812      	ldrb	r2, [r2, #0]
 8002b46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b60:	e011      	b.n	8002b86 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b62:	f7fe ff73 	bl	8001a4c <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d803      	bhi.n	8002b7a <HAL_SPI_Transmit+0x204>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b78:	d102      	bne.n	8002b80 <HAL_SPI_Transmit+0x20a>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d102      	bne.n	8002b86 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b84:	e026      	b.n	8002bd4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1cd      	bne.n	8002b2c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	6839      	ldr	r1, [r7, #0]
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 fa63 	bl	8003060 <SPI_EndRxTxTransaction>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10a      	bne.n	8002bc4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bae:	2300      	movs	r3, #0
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	77fb      	strb	r3, [r7, #31]
 8002bd0:	e000      	b.n	8002bd4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002bd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002be4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3720      	adds	r7, #32
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b08c      	sub	sp, #48	; 0x30
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
 8002bfa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_SPI_TransmitReceive+0x26>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e18a      	b.n	8002f2a <HAL_SPI_TransmitReceive+0x33c>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c1c:	f7fe ff16 	bl	8001a4c <HAL_GetTick>
 8002c20:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002c32:	887b      	ldrh	r3, [r7, #2]
 8002c34:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d00f      	beq.n	8002c5e <HAL_SPI_TransmitReceive+0x70>
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c44:	d107      	bne.n	8002c56 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d103      	bne.n	8002c56 <HAL_SPI_TransmitReceive+0x68>
 8002c4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d003      	beq.n	8002c5e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002c56:	2302      	movs	r3, #2
 8002c58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c5c:	e15b      	b.n	8002f16 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_SPI_TransmitReceive+0x82>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_SPI_TransmitReceive+0x82>
 8002c6a:	887b      	ldrh	r3, [r7, #2]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d103      	bne.n	8002c78 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c76:	e14e      	b.n	8002f16 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d003      	beq.n	8002c8c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2205      	movs	r2, #5
 8002c88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	887a      	ldrh	r2, [r7, #2]
 8002c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	887a      	ldrh	r2, [r7, #2]
 8002ca2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	887a      	ldrh	r2, [r7, #2]
 8002cae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	887a      	ldrh	r2, [r7, #2]
 8002cb4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ccc:	2b40      	cmp	r3, #64	; 0x40
 8002cce:	d007      	beq.n	8002ce0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ce8:	d178      	bne.n	8002ddc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <HAL_SPI_TransmitReceive+0x10a>
 8002cf2:	8b7b      	ldrh	r3, [r7, #26]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d166      	bne.n	8002dc6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	881a      	ldrh	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	1c9a      	adds	r2, r3, #2
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d1c:	e053      	b.n	8002dc6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d11b      	bne.n	8002d64 <HAL_SPI_TransmitReceive+0x176>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d016      	beq.n	8002d64 <HAL_SPI_TransmitReceive+0x176>
 8002d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d113      	bne.n	8002d64 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	881a      	ldrh	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	1c9a      	adds	r2, r3, #2
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d119      	bne.n	8002da6 <HAL_SPI_TransmitReceive+0x1b8>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d014      	beq.n	8002da6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d86:	b292      	uxth	r2, r2
 8002d88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8e:	1c9a      	adds	r2, r3, #2
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002da2:	2301      	movs	r3, #1
 8002da4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002da6:	f7fe fe51 	bl	8001a4c <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d807      	bhi.n	8002dc6 <HAL_SPI_TransmitReceive+0x1d8>
 8002db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbc:	d003      	beq.n	8002dc6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002dc4:	e0a7      	b.n	8002f16 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1a6      	bne.n	8002d1e <HAL_SPI_TransmitReceive+0x130>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1a1      	bne.n	8002d1e <HAL_SPI_TransmitReceive+0x130>
 8002dda:	e07c      	b.n	8002ed6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <HAL_SPI_TransmitReceive+0x1fc>
 8002de4:	8b7b      	ldrh	r3, [r7, #26]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d16b      	bne.n	8002ec2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	330c      	adds	r3, #12
 8002df4:	7812      	ldrb	r2, [r2, #0]
 8002df6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e10:	e057      	b.n	8002ec2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d11c      	bne.n	8002e5a <HAL_SPI_TransmitReceive+0x26c>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d017      	beq.n	8002e5a <HAL_SPI_TransmitReceive+0x26c>
 8002e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d114      	bne.n	8002e5a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	330c      	adds	r3, #12
 8002e3a:	7812      	ldrb	r2, [r2, #0]
 8002e3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	1c5a      	adds	r2, r3, #1
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d119      	bne.n	8002e9c <HAL_SPI_TransmitReceive+0x2ae>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d014      	beq.n	8002e9c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e9c:	f7fe fdd6 	bl	8001a4c <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d803      	bhi.n	8002eb4 <HAL_SPI_TransmitReceive+0x2c6>
 8002eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb2:	d102      	bne.n	8002eba <HAL_SPI_TransmitReceive+0x2cc>
 8002eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d103      	bne.n	8002ec2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ec0:	e029      	b.n	8002f16 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1a2      	bne.n	8002e12 <HAL_SPI_TransmitReceive+0x224>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d19d      	bne.n	8002e12 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 f8c0 	bl	8003060 <SPI_EndRxTxTransaction>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d006      	beq.n	8002ef4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002ef2:	e010      	b.n	8002f16 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10b      	bne.n	8002f14 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	e000      	b.n	8002f16 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002f14:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3730      	adds	r7, #48	; 0x30
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f40:	b2db      	uxtb	r3, r3
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f60:	f7fe fd74 	bl	8001a4c <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f70:	f7fe fd6c 	bl	8001a4c <HAL_GetTick>
 8002f74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f76:	4b39      	ldr	r3, [pc, #228]	; (800305c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	015b      	lsls	r3, r3, #5
 8002f7c:	0d1b      	lsrs	r3, r3, #20
 8002f7e:	69fa      	ldr	r2, [r7, #28]
 8002f80:	fb02 f303 	mul.w	r3, r2, r3
 8002f84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f86:	e054      	b.n	8003032 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8e:	d050      	beq.n	8003032 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f90:	f7fe fd5c 	bl	8001a4c <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	69fa      	ldr	r2, [r7, #28]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d902      	bls.n	8002fa6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d13d      	bne.n	8003022 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002fb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fbe:	d111      	bne.n	8002fe4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fc8:	d004      	beq.n	8002fd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd2:	d107      	bne.n	8002fe4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fe2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fec:	d10f      	bne.n	800300e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800300c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e017      	b.n	8003052 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	3b01      	subs	r3, #1
 8003030:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	4013      	ands	r3, r2
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	429a      	cmp	r2, r3
 8003040:	bf0c      	ite	eq
 8003042:	2301      	moveq	r3, #1
 8003044:	2300      	movne	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	461a      	mov	r2, r3
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	429a      	cmp	r2, r3
 800304e:	d19b      	bne.n	8002f88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3720      	adds	r7, #32
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20000004 	.word	0x20000004

08003060 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af02      	add	r7, sp, #8
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800306c:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <SPI_EndRxTxTransaction+0x7c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a1b      	ldr	r2, [pc, #108]	; (80030e0 <SPI_EndRxTxTransaction+0x80>)
 8003072:	fba2 2303 	umull	r2, r3, r2, r3
 8003076:	0d5b      	lsrs	r3, r3, #21
 8003078:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800307c:	fb02 f303 	mul.w	r3, r2, r3
 8003080:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800308a:	d112      	bne.n	80030b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2200      	movs	r2, #0
 8003094:	2180      	movs	r1, #128	; 0x80
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f7ff ff5a 	bl	8002f50 <SPI_WaitFlagStateUntilTimeout>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d016      	beq.n	80030d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a6:	f043 0220 	orr.w	r2, r3, #32
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e00f      	b.n	80030d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c8:	2b80      	cmp	r3, #128	; 0x80
 80030ca:	d0f2      	beq.n	80030b2 <SPI_EndRxTxTransaction+0x52>
 80030cc:	e000      	b.n	80030d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80030ce:	bf00      	nop
  }

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000004 	.word	0x20000004
 80030e0:	165e9f81 	.word	0x165e9f81

080030e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80030e8:	4904      	ldr	r1, [pc, #16]	; (80030fc <MX_FATFS_Init+0x18>)
 80030ea:	4805      	ldr	r0, [pc, #20]	; (8003100 <MX_FATFS_Init+0x1c>)
 80030ec:	f003 f82e 	bl	800614c <FATFS_LinkDriver>
 80030f0:	4603      	mov	r3, r0
 80030f2:	461a      	mov	r2, r3
 80030f4:	4b03      	ldr	r3, [pc, #12]	; (8003104 <MX_FATFS_Init+0x20>)
 80030f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80030f8:	bf00      	nop
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20002524 	.word	0x20002524
 8003100:	20000010 	.word	0x20000010
 8003104:	20002520 	.word	0x20002520

08003108 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800310c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800310e:	4618      	mov	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	4618      	mov	r0, r3
 8003126:	f7fd fe8d 	bl	8000e44 <SD_disk_initialize>
 800312a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800312c:	4618      	mov	r0, r3
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

    return SD_disk_status(pdrv);
 800313e:	79fb      	ldrb	r3, [r7, #7]
 8003140:	4618      	mov	r0, r3
 8003142:	f7fd ff69 	bl	8001018 <SD_disk_status>
 8003146:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	607a      	str	r2, [r7, #4]
 800315a:	603b      	str	r3, [r7, #0]
 800315c:	4603      	mov	r3, r0
 800315e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8003160:	7bf8      	ldrb	r0, [r7, #15]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	68b9      	ldr	r1, [r7, #8]
 8003168:	f7fd ff6c 	bl	8001044 <SD_disk_read>
 800316c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
 8003182:	4603      	mov	r3, r0
 8003184:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8003186:	7bf8      	ldrb	r0, [r7, #15]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68b9      	ldr	r1, [r7, #8]
 800318e:	f7fd ffc3 	bl	8001118 <SD_disk_write>
 8003192:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	603a      	str	r2, [r7, #0]
 80031a6:	71fb      	strb	r3, [r7, #7]
 80031a8:	460b      	mov	r3, r1
 80031aa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	73fb      	strb	r3, [r7, #15]
    return SD_disk_ioctl(pdrv,cmd,buff);
 80031b0:	79b9      	ldrb	r1, [r7, #6]
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fe f832 	bl	8001220 <SD_disk_ioctl>
 80031bc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80031d2:	79fb      	ldrb	r3, [r7, #7]
 80031d4:	4a08      	ldr	r2, [pc, #32]	; (80031f8 <disk_status+0x30>)
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	79fa      	ldrb	r2, [r7, #7]
 80031e0:	4905      	ldr	r1, [pc, #20]	; (80031f8 <disk_status+0x30>)
 80031e2:	440a      	add	r2, r1
 80031e4:	7a12      	ldrb	r2, [r2, #8]
 80031e6:	4610      	mov	r0, r2
 80031e8:	4798      	blx	r3
 80031ea:	4603      	mov	r3, r0
 80031ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	20002750 	.word	0x20002750

080031fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	4a0d      	ldr	r2, [pc, #52]	; (8003244 <disk_initialize+0x48>)
 800320e:	5cd3      	ldrb	r3, [r2, r3]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d111      	bne.n	8003238 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	4a0b      	ldr	r2, [pc, #44]	; (8003244 <disk_initialize+0x48>)
 8003218:	2101      	movs	r1, #1
 800321a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800321c:	79fb      	ldrb	r3, [r7, #7]
 800321e:	4a09      	ldr	r2, [pc, #36]	; (8003244 <disk_initialize+0x48>)
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	79fa      	ldrb	r2, [r7, #7]
 800322a:	4906      	ldr	r1, [pc, #24]	; (8003244 <disk_initialize+0x48>)
 800322c:	440a      	add	r2, r1
 800322e:	7a12      	ldrb	r2, [r2, #8]
 8003230:	4610      	mov	r0, r2
 8003232:	4798      	blx	r3
 8003234:	4603      	mov	r3, r0
 8003236:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003238:	7bfb      	ldrb	r3, [r7, #15]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20002750 	.word	0x20002750

08003248 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003248:	b590      	push	{r4, r7, lr}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	607a      	str	r2, [r7, #4]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	4603      	mov	r3, r0
 8003256:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	4a0a      	ldr	r2, [pc, #40]	; (8003284 <disk_read+0x3c>)
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	689c      	ldr	r4, [r3, #8]
 8003264:	7bfb      	ldrb	r3, [r7, #15]
 8003266:	4a07      	ldr	r2, [pc, #28]	; (8003284 <disk_read+0x3c>)
 8003268:	4413      	add	r3, r2
 800326a:	7a18      	ldrb	r0, [r3, #8]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	47a0      	blx	r4
 8003274:	4603      	mov	r3, r0
 8003276:	75fb      	strb	r3, [r7, #23]
  return res;
 8003278:	7dfb      	ldrb	r3, [r7, #23]
}
 800327a:	4618      	mov	r0, r3
 800327c:	371c      	adds	r7, #28
 800327e:	46bd      	mov	sp, r7
 8003280:	bd90      	pop	{r4, r7, pc}
 8003282:	bf00      	nop
 8003284:	20002750 	.word	0x20002750

08003288 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	4603      	mov	r3, r0
 8003296:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	4a0a      	ldr	r2, [pc, #40]	; (80032c4 <disk_write+0x3c>)
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	68dc      	ldr	r4, [r3, #12]
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
 80032a6:	4a07      	ldr	r2, [pc, #28]	; (80032c4 <disk_write+0x3c>)
 80032a8:	4413      	add	r3, r2
 80032aa:	7a18      	ldrb	r0, [r3, #8]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	47a0      	blx	r4
 80032b4:	4603      	mov	r3, r0
 80032b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	371c      	adds	r7, #28
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd90      	pop	{r4, r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20002750 	.word	0x20002750

080032c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	603a      	str	r2, [r7, #0]
 80032d2:	71fb      	strb	r3, [r7, #7]
 80032d4:	460b      	mov	r3, r1
 80032d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	4a09      	ldr	r2, [pc, #36]	; (8003300 <disk_ioctl+0x38>)
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	79fa      	ldrb	r2, [r7, #7]
 80032e6:	4906      	ldr	r1, [pc, #24]	; (8003300 <disk_ioctl+0x38>)
 80032e8:	440a      	add	r2, r1
 80032ea:	7a10      	ldrb	r0, [r2, #8]
 80032ec:	79b9      	ldrb	r1, [r7, #6]
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	4798      	blx	r3
 80032f2:	4603      	mov	r3, r0
 80032f4:	73fb      	strb	r3, [r7, #15]
  return res;
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20002750 	.word	0x20002750

08003304 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3301      	adds	r3, #1
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003314:	89fb      	ldrh	r3, [r7, #14]
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	b21a      	sxth	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	b21b      	sxth	r3, r3
 8003320:	4313      	orrs	r3, r2
 8003322:	b21b      	sxth	r3, r3
 8003324:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003326:	89fb      	ldrh	r3, [r7, #14]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3303      	adds	r3, #3
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	3202      	adds	r2, #2
 800334c:	7812      	ldrb	r2, [r2, #0]
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	021b      	lsls	r3, r3, #8
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	3201      	adds	r2, #1
 800335a:	7812      	ldrb	r2, [r2, #0]
 800335c:	4313      	orrs	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	021b      	lsls	r3, r3, #8
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	7812      	ldrb	r2, [r2, #0]
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]
	return rv;
 800336c:	68fb      	ldr	r3, [r7, #12]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	460b      	mov	r3, r1
 8003384:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	887a      	ldrh	r2, [r7, #2]
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	887b      	ldrh	r3, [r7, #2]
 8003394:	0a1b      	lsrs	r3, r3, #8
 8003396:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	607a      	str	r2, [r7, #4]
 800339e:	887a      	ldrh	r2, [r7, #2]
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	701a      	strb	r2, [r3, #0]
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	0a1b      	lsrs	r3, r3, #8
 80033ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	1c5a      	adds	r2, r3, #1
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	701a      	strb	r2, [r3, #0]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	0a1b      	lsrs	r3, r3, #8
 80033dc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	607a      	str	r2, [r7, #4]
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	701a      	strb	r2, [r3, #0]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	0a1b      	lsrs	r3, r3, #8
 80033ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	701a      	strb	r2, [r3, #0]
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003408:	b480      	push	{r7}
 800340a:	b087      	sub	sp, #28
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00d      	beq.n	800343e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	1c53      	adds	r3, r2, #1
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	1c59      	adds	r1, r3, #1
 800342c:	6179      	str	r1, [r7, #20]
 800342e:	7812      	ldrb	r2, [r2, #0]
 8003430:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3b01      	subs	r3, #1
 8003436:	607b      	str	r3, [r7, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f1      	bne.n	8003422 <mem_cpy+0x1a>
	}
}
 800343e:	bf00      	nop
 8003440:	371c      	adds	r7, #28
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800344a:	b480      	push	{r7}
 800344c:	b087      	sub	sp, #28
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	617a      	str	r2, [r7, #20]
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3b01      	subs	r3, #1
 800346a:	607b      	str	r3, [r7, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f3      	bne.n	800345a <mem_set+0x10>
}
 8003472:	bf00      	nop
 8003474:	bf00      	nop
 8003476:	371c      	adds	r7, #28
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003480:	b480      	push	{r7}
 8003482:	b089      	sub	sp, #36	; 0x24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	61fb      	str	r3, [r7, #28]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	61fa      	str	r2, [r7, #28]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	4619      	mov	r1, r3
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	61ba      	str	r2, [r7, #24]
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	1acb      	subs	r3, r1, r3
 80034ac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3b01      	subs	r3, #1
 80034b2:	607b      	str	r3, [r7, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <mem_cmp+0x40>
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0eb      	beq.n	8003498 <mem_cmp+0x18>

	return r;
 80034c0:	697b      	ldr	r3, [r7, #20]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3724      	adds	r7, #36	; 0x24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80034d8:	e002      	b.n	80034e0 <chk_chr+0x12>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3301      	adds	r3, #1
 80034de:	607b      	str	r3, [r7, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <chk_chr+0x26>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d1f2      	bne.n	80034da <chk_chr+0xc>
	return *str;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	781b      	ldrb	r3, [r3, #0]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800350e:	2300      	movs	r3, #0
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	e029      	b.n	800356c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003518:	4a27      	ldr	r2, [pc, #156]	; (80035b8 <chk_lock+0xb4>)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	4413      	add	r3, r2
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d01d      	beq.n	8003562 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003526:	4a24      	ldr	r2, [pc, #144]	; (80035b8 <chk_lock+0xb4>)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	4413      	add	r3, r2
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d116      	bne.n	8003566 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003538:	4a1f      	ldr	r2, [pc, #124]	; (80035b8 <chk_lock+0xb4>)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	4413      	add	r3, r2
 8003540:	3304      	adds	r3, #4
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003548:	429a      	cmp	r2, r3
 800354a:	d10c      	bne.n	8003566 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800354c:	4a1a      	ldr	r2, [pc, #104]	; (80035b8 <chk_lock+0xb4>)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	4413      	add	r3, r2
 8003554:	3308      	adds	r3, #8
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800355c:	429a      	cmp	r2, r3
 800355e:	d102      	bne.n	8003566 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003560:	e007      	b.n	8003572 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003562:	2301      	movs	r3, #1
 8003564:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	3301      	adds	r3, #1
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d9d2      	bls.n	8003518 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2b02      	cmp	r3, #2
 8003576:	d109      	bne.n	800358c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d102      	bne.n	8003584 <chk_lock+0x80>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b02      	cmp	r3, #2
 8003582:	d101      	bne.n	8003588 <chk_lock+0x84>
 8003584:	2300      	movs	r3, #0
 8003586:	e010      	b.n	80035aa <chk_lock+0xa6>
 8003588:	2312      	movs	r3, #18
 800358a:	e00e      	b.n	80035aa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d108      	bne.n	80035a4 <chk_lock+0xa0>
 8003592:	4a09      	ldr	r2, [pc, #36]	; (80035b8 <chk_lock+0xb4>)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	4413      	add	r3, r2
 800359a:	330c      	adds	r3, #12
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035a2:	d101      	bne.n	80035a8 <chk_lock+0xa4>
 80035a4:	2310      	movs	r3, #16
 80035a6:	e000      	b.n	80035aa <chk_lock+0xa6>
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	20002530 	.word	0x20002530

080035bc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80035c2:	2300      	movs	r3, #0
 80035c4:	607b      	str	r3, [r7, #4]
 80035c6:	e002      	b.n	80035ce <enq_lock+0x12>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3301      	adds	r3, #1
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d806      	bhi.n	80035e2 <enq_lock+0x26>
 80035d4:	4a09      	ldr	r2, [pc, #36]	; (80035fc <enq_lock+0x40>)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	4413      	add	r3, r2
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f2      	bne.n	80035c8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	bf14      	ite	ne
 80035e8:	2301      	movne	r3, #1
 80035ea:	2300      	moveq	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	20002530 	.word	0x20002530

08003600 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	e01f      	b.n	8003650 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003610:	4a41      	ldr	r2, [pc, #260]	; (8003718 <inc_lock+0x118>)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	4413      	add	r3, r2
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d113      	bne.n	800364a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003622:	4a3d      	ldr	r2, [pc, #244]	; (8003718 <inc_lock+0x118>)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	4413      	add	r3, r2
 800362a:	3304      	adds	r3, #4
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003632:	429a      	cmp	r2, r3
 8003634:	d109      	bne.n	800364a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003636:	4a38      	ldr	r2, [pc, #224]	; (8003718 <inc_lock+0x118>)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	4413      	add	r3, r2
 800363e:	3308      	adds	r3, #8
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003646:	429a      	cmp	r2, r3
 8003648:	d006      	beq.n	8003658 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	3301      	adds	r3, #1
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d9dc      	bls.n	8003610 <inc_lock+0x10>
 8003656:	e000      	b.n	800365a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003658:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d132      	bne.n	80036c6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003660:	2300      	movs	r3, #0
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	e002      	b.n	800366c <inc_lock+0x6c>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	3301      	adds	r3, #1
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d806      	bhi.n	8003680 <inc_lock+0x80>
 8003672:	4a29      	ldr	r2, [pc, #164]	; (8003718 <inc_lock+0x118>)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	4413      	add	r3, r2
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f2      	bne.n	8003666 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d101      	bne.n	800368a <inc_lock+0x8a>
 8003686:	2300      	movs	r3, #0
 8003688:	e040      	b.n	800370c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	4922      	ldr	r1, [pc, #136]	; (8003718 <inc_lock+0x118>)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	440b      	add	r3, r1
 8003696:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	491e      	ldr	r1, [pc, #120]	; (8003718 <inc_lock+0x118>)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	440b      	add	r3, r1
 80036a4:	3304      	adds	r3, #4
 80036a6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	695a      	ldr	r2, [r3, #20]
 80036ac:	491a      	ldr	r1, [pc, #104]	; (8003718 <inc_lock+0x118>)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	440b      	add	r3, r1
 80036b4:	3308      	adds	r3, #8
 80036b6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80036b8:	4a17      	ldr	r2, [pc, #92]	; (8003718 <inc_lock+0x118>)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	4413      	add	r3, r2
 80036c0:	330c      	adds	r3, #12
 80036c2:	2200      	movs	r2, #0
 80036c4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d009      	beq.n	80036e0 <inc_lock+0xe0>
 80036cc:	4a12      	ldr	r2, [pc, #72]	; (8003718 <inc_lock+0x118>)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	4413      	add	r3, r2
 80036d4:	330c      	adds	r3, #12
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <inc_lock+0xe0>
 80036dc:	2300      	movs	r3, #0
 80036de:	e015      	b.n	800370c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d108      	bne.n	80036f8 <inc_lock+0xf8>
 80036e6:	4a0c      	ldr	r2, [pc, #48]	; (8003718 <inc_lock+0x118>)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	4413      	add	r3, r2
 80036ee:	330c      	adds	r3, #12
 80036f0:	881b      	ldrh	r3, [r3, #0]
 80036f2:	3301      	adds	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	e001      	b.n	80036fc <inc_lock+0xfc>
 80036f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036fc:	4906      	ldr	r1, [pc, #24]	; (8003718 <inc_lock+0x118>)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	440b      	add	r3, r1
 8003704:	330c      	adds	r3, #12
 8003706:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	3301      	adds	r3, #1
}
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	20002530 	.word	0x20002530

0800371c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3b01      	subs	r3, #1
 8003728:	607b      	str	r3, [r7, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d825      	bhi.n	800377c <dec_lock+0x60>
		n = Files[i].ctr;
 8003730:	4a17      	ldr	r2, [pc, #92]	; (8003790 <dec_lock+0x74>)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	4413      	add	r3, r2
 8003738:	330c      	adds	r3, #12
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800373e:	89fb      	ldrh	r3, [r7, #14]
 8003740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003744:	d101      	bne.n	800374a <dec_lock+0x2e>
 8003746:	2300      	movs	r3, #0
 8003748:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800374a:	89fb      	ldrh	r3, [r7, #14]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <dec_lock+0x3a>
 8003750:	89fb      	ldrh	r3, [r7, #14]
 8003752:	3b01      	subs	r3, #1
 8003754:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003756:	4a0e      	ldr	r2, [pc, #56]	; (8003790 <dec_lock+0x74>)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	4413      	add	r3, r2
 800375e:	330c      	adds	r3, #12
 8003760:	89fa      	ldrh	r2, [r7, #14]
 8003762:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003764:	89fb      	ldrh	r3, [r7, #14]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d105      	bne.n	8003776 <dec_lock+0x5a>
 800376a:	4a09      	ldr	r2, [pc, #36]	; (8003790 <dec_lock+0x74>)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	4413      	add	r3, r2
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	737b      	strb	r3, [r7, #13]
 800377a:	e001      	b.n	8003780 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800377c:	2302      	movs	r3, #2
 800377e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003780:	7b7b      	ldrb	r3, [r7, #13]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	20002530 	.word	0x20002530

08003794 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	e010      	b.n	80037c4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80037a2:	4a0d      	ldr	r2, [pc, #52]	; (80037d8 <clear_lock+0x44>)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	4413      	add	r3, r2
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d105      	bne.n	80037be <clear_lock+0x2a>
 80037b2:	4a09      	ldr	r2, [pc, #36]	; (80037d8 <clear_lock+0x44>)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	4413      	add	r3, r2
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	3301      	adds	r3, #1
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d9eb      	bls.n	80037a2 <clear_lock+0xe>
	}
}
 80037ca:	bf00      	nop
 80037cc:	bf00      	nop
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	20002530 	.word	0x20002530

080037dc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	78db      	ldrb	r3, [r3, #3]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d034      	beq.n	800385a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	7858      	ldrb	r0, [r3, #1]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003800:	2301      	movs	r3, #1
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	f7ff fd40 	bl	8003288 <disk_write>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <sync_window+0x38>
			res = FR_DISK_ERR;
 800380e:	2301      	movs	r3, #1
 8003810:	73fb      	strb	r3, [r7, #15]
 8003812:	e022      	b.n	800385a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	1ad2      	subs	r2, r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	429a      	cmp	r2, r3
 8003828:	d217      	bcs.n	800385a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	789b      	ldrb	r3, [r3, #2]
 800382e:	613b      	str	r3, [r7, #16]
 8003830:	e010      	b.n	8003854 <sync_window+0x78>
					wsect += fs->fsize;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4413      	add	r3, r2
 800383a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	7858      	ldrb	r0, [r3, #1]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003846:	2301      	movs	r3, #1
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	f7ff fd1d 	bl	8003288 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	3b01      	subs	r3, #1
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d8eb      	bhi.n	8003832 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800385a:	7bfb      	ldrb	r3, [r7, #15]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d01b      	beq.n	80038b4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7ff ffad 	bl	80037dc <sync_window>
 8003882:	4603      	mov	r3, r0
 8003884:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003886:	7bfb      	ldrb	r3, [r7, #15]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d113      	bne.n	80038b4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	7858      	ldrb	r0, [r3, #1]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003896:	2301      	movs	r3, #1
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	f7ff fcd5 	bl	8003248 <disk_read>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d004      	beq.n	80038ae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80038a4:	f04f 33ff 	mov.w	r3, #4294967295
 80038a8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff ff87 	bl	80037dc <sync_window>
 80038ce:	4603      	mov	r3, r0
 80038d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d159      	bne.n	800398c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d149      	bne.n	8003974 <sync_fs+0xb4>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	791b      	ldrb	r3, [r3, #4]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d145      	bne.n	8003974 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	899b      	ldrh	r3, [r3, #12]
 80038f2:	461a      	mov	r2, r3
 80038f4:	2100      	movs	r1, #0
 80038f6:	f7ff fda8 	bl	800344a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3338      	adds	r3, #56	; 0x38
 80038fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003902:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff fd37 	bl	800337a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3338      	adds	r3, #56	; 0x38
 8003910:	4921      	ldr	r1, [pc, #132]	; (8003998 <sync_fs+0xd8>)
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff fd4c 	bl	80033b0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3338      	adds	r3, #56	; 0x38
 800391c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003920:	491e      	ldr	r1, [pc, #120]	; (800399c <sync_fs+0xdc>)
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff fd44 	bl	80033b0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3338      	adds	r3, #56	; 0x38
 800392c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	4619      	mov	r1, r3
 8003936:	4610      	mov	r0, r2
 8003938:	f7ff fd3a 	bl	80033b0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3338      	adds	r3, #56	; 0x38
 8003940:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	4619      	mov	r1, r3
 800394a:	4610      	mov	r0, r2
 800394c:	f7ff fd30 	bl	80033b0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	7858      	ldrb	r0, [r3, #1]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003968:	2301      	movs	r3, #1
 800396a:	f7ff fc8d 	bl	8003288 <disk_write>
			fs->fsi_flag = 0;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	785b      	ldrb	r3, [r3, #1]
 8003978:	2200      	movs	r2, #0
 800397a:	2100      	movs	r1, #0
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff fca3 	bl	80032c8 <disk_ioctl>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <sync_fs+0xcc>
 8003988:	2301      	movs	r3, #1
 800398a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800398c:	7bfb      	ldrb	r3, [r7, #15]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	41615252 	.word	0x41615252
 800399c:	61417272 	.word	0x61417272

080039a0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	3b02      	subs	r3, #2
 80039ae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	3b02      	subs	r3, #2
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d301      	bcc.n	80039c0 <clust2sect+0x20>
 80039bc:	2300      	movs	r3, #0
 80039be:	e008      	b.n	80039d2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	895b      	ldrh	r3, [r3, #10]
 80039c4:	461a      	mov	r2, r3
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	fb03 f202 	mul.w	r2, r3, r2
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d0:	4413      	add	r3, r2
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b086      	sub	sp, #24
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d904      	bls.n	80039fe <get_fat+0x20>
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d302      	bcc.n	8003a04 <get_fat+0x26>
		val = 1;	/* Internal error */
 80039fe:	2301      	movs	r3, #1
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	e0bb      	b.n	8003b7c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003a04:	f04f 33ff 	mov.w	r3, #4294967295
 8003a08:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	f000 8083 	beq.w	8003b1a <get_fat+0x13c>
 8003a14:	2b03      	cmp	r3, #3
 8003a16:	f300 80a7 	bgt.w	8003b68 <get_fat+0x18a>
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d002      	beq.n	8003a24 <get_fat+0x46>
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d056      	beq.n	8003ad0 <get_fat+0xf2>
 8003a22:	e0a1      	b.n	8003b68 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	085b      	lsrs	r3, r3, #1
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	899b      	ldrh	r3, [r3, #12]
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a42:	4413      	add	r3, r2
 8003a44:	4619      	mov	r1, r3
 8003a46:	6938      	ldr	r0, [r7, #16]
 8003a48:	f7ff ff0c 	bl	8003864 <move_window>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f040 808d 	bne.w	8003b6e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	60fa      	str	r2, [r7, #12]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	8992      	ldrh	r2, [r2, #12]
 8003a5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a62:	fb01 f202 	mul.w	r2, r1, r2
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a70:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	899b      	ldrh	r3, [r3, #12]
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a82:	4413      	add	r3, r2
 8003a84:	4619      	mov	r1, r3
 8003a86:	6938      	ldr	r0, [r7, #16]
 8003a88:	f7ff feec 	bl	8003864 <move_window>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d16f      	bne.n	8003b72 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	899b      	ldrh	r3, [r3, #12]
 8003a96:	461a      	mov	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a9e:	fb01 f202 	mul.w	r2, r1, r2
 8003aa2:	1a9b      	subs	r3, r3, r2
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003aac:	021b      	lsls	r3, r3, #8
 8003aae:	461a      	mov	r2, r3
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <get_fat+0xe8>
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	091b      	lsrs	r3, r3, #4
 8003ac4:	e002      	b.n	8003acc <get_fat+0xee>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003acc:	617b      	str	r3, [r7, #20]
			break;
 8003ace:	e055      	b.n	8003b7c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	899b      	ldrh	r3, [r3, #12]
 8003ad8:	085b      	lsrs	r3, r3, #1
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	4619      	mov	r1, r3
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ae4:	4413      	add	r3, r2
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	6938      	ldr	r0, [r7, #16]
 8003aea:	f7ff febb 	bl	8003864 <move_window>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d140      	bne.n	8003b76 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	8992      	ldrh	r2, [r2, #12]
 8003b02:	fbb3 f0f2 	udiv	r0, r3, r2
 8003b06:	fb00 f202 	mul.w	r2, r0, r2
 8003b0a:	1a9b      	subs	r3, r3, r2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7ff fbf8 	bl	8003304 <ld_word>
 8003b14:	4603      	mov	r3, r0
 8003b16:	617b      	str	r3, [r7, #20]
			break;
 8003b18:	e030      	b.n	8003b7c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	899b      	ldrh	r3, [r3, #12]
 8003b22:	089b      	lsrs	r3, r3, #2
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	4619      	mov	r1, r3
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b2e:	4413      	add	r3, r2
 8003b30:	4619      	mov	r1, r3
 8003b32:	6938      	ldr	r0, [r7, #16]
 8003b34:	f7ff fe96 	bl	8003864 <move_window>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d11d      	bne.n	8003b7a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	8992      	ldrh	r2, [r2, #12]
 8003b4c:	fbb3 f0f2 	udiv	r0, r3, r2
 8003b50:	fb00 f202 	mul.w	r2, r0, r2
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	440b      	add	r3, r1
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff fbeb 	bl	8003334 <ld_dword>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003b64:	617b      	str	r3, [r7, #20]
			break;
 8003b66:	e009      	b.n	8003b7c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003b68:	2301      	movs	r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	e006      	b.n	8003b7c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003b6e:	bf00      	nop
 8003b70:	e004      	b.n	8003b7c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003b72:	bf00      	nop
 8003b74:	e002      	b.n	8003b7c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003b76:	bf00      	nop
 8003b78:	e000      	b.n	8003b7c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003b7a:	bf00      	nop
		}
	}

	return val;
 8003b7c:	697b      	ldr	r3, [r7, #20]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3718      	adds	r7, #24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003b86:	b590      	push	{r4, r7, lr}
 8003b88:	b089      	sub	sp, #36	; 0x24
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003b92:	2302      	movs	r3, #2
 8003b94:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	f240 8109 	bls.w	8003db0 <put_fat+0x22a>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	f080 8103 	bcs.w	8003db0 <put_fat+0x22a>
		switch (fs->fs_type) {
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	f000 80b6 	beq.w	8003d20 <put_fat+0x19a>
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	f300 80fb 	bgt.w	8003db0 <put_fat+0x22a>
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d003      	beq.n	8003bc6 <put_fat+0x40>
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	f000 8083 	beq.w	8003cca <put_fat+0x144>
 8003bc4:	e0f4      	b.n	8003db0 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	085b      	lsrs	r3, r3, #1
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	899b      	ldrh	r3, [r3, #12]
 8003bdc:	4619      	mov	r1, r3
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	fbb3 f3f1 	udiv	r3, r3, r1
 8003be4:	4413      	add	r3, r2
 8003be6:	4619      	mov	r1, r3
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f7ff fe3b 	bl	8003864 <move_window>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003bf2:	7ffb      	ldrb	r3, [r7, #31]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f040 80d4 	bne.w	8003da2 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	61ba      	str	r2, [r7, #24]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	8992      	ldrh	r2, [r2, #12]
 8003c0a:	fbb3 f0f2 	udiv	r0, r3, r2
 8003c0e:	fb00 f202 	mul.w	r2, r0, r2
 8003c12:	1a9b      	subs	r3, r3, r2
 8003c14:	440b      	add	r3, r1
 8003c16:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00d      	beq.n	8003c3e <put_fat+0xb8>
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	b25b      	sxtb	r3, r3
 8003c28:	f003 030f 	and.w	r3, r3, #15
 8003c2c:	b25a      	sxtb	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	b25b      	sxtb	r3, r3
 8003c36:	4313      	orrs	r3, r2
 8003c38:	b25b      	sxtb	r3, r3
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	e001      	b.n	8003c42 <put_fat+0xbc>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	899b      	ldrh	r3, [r3, #12]
 8003c54:	4619      	mov	r1, r3
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c5c:	4413      	add	r3, r2
 8003c5e:	4619      	mov	r1, r3
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f7ff fdff 	bl	8003864 <move_window>
 8003c66:	4603      	mov	r3, r0
 8003c68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003c6a:	7ffb      	ldrb	r3, [r7, #31]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f040 809a 	bne.w	8003da6 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	899b      	ldrh	r3, [r3, #12]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	fbb3 f0f2 	udiv	r0, r3, r2
 8003c84:	fb00 f202 	mul.w	r2, r0, r2
 8003c88:	1a9b      	subs	r3, r3, r2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <put_fat+0x11a>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	091b      	lsrs	r3, r3, #4
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	e00e      	b.n	8003cbe <put_fat+0x138>
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	b25b      	sxtb	r3, r3
 8003ca6:	f023 030f 	bic.w	r3, r3, #15
 8003caa:	b25a      	sxtb	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	0a1b      	lsrs	r3, r3, #8
 8003cb0:	b25b      	sxtb	r3, r3
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	b25b      	sxtb	r3, r3
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	b25b      	sxtb	r3, r3
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	70da      	strb	r2, [r3, #3]
			break;
 8003cc8:	e072      	b.n	8003db0 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	899b      	ldrh	r3, [r3, #12]
 8003cd2:	085b      	lsrs	r3, r3, #1
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cde:	4413      	add	r3, r2
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f7ff fdbe 	bl	8003864 <move_window>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003cec:	7ffb      	ldrb	r3, [r7, #31]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d15b      	bne.n	8003daa <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	8992      	ldrh	r2, [r2, #12]
 8003d00:	fbb3 f0f2 	udiv	r0, r3, r2
 8003d04:	fb00 f202 	mul.w	r2, r0, r2
 8003d08:	1a9b      	subs	r3, r3, r2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	b292      	uxth	r2, r2
 8003d10:	4611      	mov	r1, r2
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff fb31 	bl	800337a <st_word>
			fs->wflag = 1;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	70da      	strb	r2, [r3, #3]
			break;
 8003d1e:	e047      	b.n	8003db0 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	899b      	ldrh	r3, [r3, #12]
 8003d28:	089b      	lsrs	r3, r3, #2
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d34:	4413      	add	r3, r2
 8003d36:	4619      	mov	r1, r3
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f7ff fd93 	bl	8003864 <move_window>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003d42:	7ffb      	ldrb	r3, [r7, #31]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d132      	bne.n	8003dae <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	8992      	ldrh	r2, [r2, #12]
 8003d5c:	fbb3 f0f2 	udiv	r0, r3, r2
 8003d60:	fb00 f202 	mul.w	r2, r0, r2
 8003d64:	1a9b      	subs	r3, r3, r2
 8003d66:	440b      	add	r3, r1
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff fae3 	bl	8003334 <ld_dword>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003d74:	4323      	orrs	r3, r4
 8003d76:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	8992      	ldrh	r2, [r2, #12]
 8003d86:	fbb3 f0f2 	udiv	r0, r3, r2
 8003d8a:	fb00 f202 	mul.w	r2, r0, r2
 8003d8e:	1a9b      	subs	r3, r3, r2
 8003d90:	440b      	add	r3, r1
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff fb0b 	bl	80033b0 <st_dword>
			fs->wflag = 1;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	70da      	strb	r2, [r3, #3]
			break;
 8003da0:	e006      	b.n	8003db0 <put_fat+0x22a>
			if (res != FR_OK) break;
 8003da2:	bf00      	nop
 8003da4:	e004      	b.n	8003db0 <put_fat+0x22a>
			if (res != FR_OK) break;
 8003da6:	bf00      	nop
 8003da8:	e002      	b.n	8003db0 <put_fat+0x22a>
			if (res != FR_OK) break;
 8003daa:	bf00      	nop
 8003dac:	e000      	b.n	8003db0 <put_fat+0x22a>
			if (res != FR_OK) break;
 8003dae:	bf00      	nop
		}
	}
	return res;
 8003db0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3724      	adds	r7, #36	; 0x24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd90      	pop	{r4, r7, pc}

08003dba <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b088      	sub	sp, #32
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	60f8      	str	r0, [r7, #12]
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d904      	bls.n	8003de0 <remove_chain+0x26>
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d301      	bcc.n	8003de4 <remove_chain+0x2a>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e04b      	b.n	8003e7c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00c      	beq.n	8003e04 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003dea:	f04f 32ff 	mov.w	r2, #4294967295
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	69b8      	ldr	r0, [r7, #24]
 8003df2:	f7ff fec8 	bl	8003b86 <put_fat>
 8003df6:	4603      	mov	r3, r0
 8003df8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8003dfa:	7ffb      	ldrb	r3, [r7, #31]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <remove_chain+0x4a>
 8003e00:	7ffb      	ldrb	r3, [r7, #31]
 8003e02:	e03b      	b.n	8003e7c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003e04:	68b9      	ldr	r1, [r7, #8]
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f7ff fde9 	bl	80039de <get_fat>
 8003e0c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d031      	beq.n	8003e78 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <remove_chain+0x64>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	e02e      	b.n	8003e7c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e24:	d101      	bne.n	8003e2a <remove_chain+0x70>
 8003e26:	2301      	movs	r3, #1
 8003e28:	e028      	b.n	8003e7c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	68b9      	ldr	r1, [r7, #8]
 8003e2e:	69b8      	ldr	r0, [r7, #24]
 8003e30:	f7ff fea9 	bl	8003b86 <put_fat>
 8003e34:	4603      	mov	r3, r0
 8003e36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003e38:	7ffb      	ldrb	r3, [r7, #31]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <remove_chain+0x88>
 8003e3e:	7ffb      	ldrb	r3, [r7, #31]
 8003e40:	e01c      	b.n	8003e7c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	699a      	ldr	r2, [r3, #24]
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	3b02      	subs	r3, #2
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d20b      	bcs.n	8003e68 <remove_chain+0xae>
			fs->free_clst++;
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	791b      	ldrb	r3, [r3, #4]
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d3c6      	bcc.n	8003e04 <remove_chain+0x4a>
 8003e76:	e000      	b.n	8003e7a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8003e78:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3720      	adds	r7, #32
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10d      	bne.n	8003eb6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d004      	beq.n	8003eb0 <create_chain+0x2c>
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d31b      	bcc.n	8003ee8 <create_chain+0x64>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	61bb      	str	r3, [r7, #24]
 8003eb4:	e018      	b.n	8003ee8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003eb6:	6839      	ldr	r1, [r7, #0]
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7ff fd90 	bl	80039de <get_fat>
 8003ebe:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d801      	bhi.n	8003eca <create_chain+0x46>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e070      	b.n	8003fac <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed0:	d101      	bne.n	8003ed6 <create_chain+0x52>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	e06a      	b.n	8003fac <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d201      	bcs.n	8003ee4 <create_chain+0x60>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	e063      	b.n	8003fac <create_chain+0x128>
		scl = clst;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d307      	bcc.n	8003f0c <create_chain+0x88>
				ncl = 2;
 8003efc:	2302      	movs	r3, #2
 8003efe:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8003f00:	69fa      	ldr	r2, [r7, #28]
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d901      	bls.n	8003f0c <create_chain+0x88>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	e04f      	b.n	8003fac <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003f0c:	69f9      	ldr	r1, [r7, #28]
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7ff fd65 	bl	80039de <get_fat>
 8003f14:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00e      	beq.n	8003f3a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d003      	beq.n	8003f2a <create_chain+0xa6>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f28:	d101      	bne.n	8003f2e <create_chain+0xaa>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	e03e      	b.n	8003fac <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8003f2e:	69fa      	ldr	r2, [r7, #28]
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d1da      	bne.n	8003eec <create_chain+0x68>
 8003f36:	2300      	movs	r3, #0
 8003f38:	e038      	b.n	8003fac <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8003f3a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f40:	69f9      	ldr	r1, [r7, #28]
 8003f42:	6938      	ldr	r0, [r7, #16]
 8003f44:	f7ff fe1f 	bl	8003b86 <put_fat>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d109      	bne.n	8003f66 <create_chain+0xe2>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d006      	beq.n	8003f66 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003f58:	69fa      	ldr	r2, [r7, #28]
 8003f5a:	6839      	ldr	r1, [r7, #0]
 8003f5c:	6938      	ldr	r0, [r7, #16]
 8003f5e:	f7ff fe12 	bl	8003b86 <put_fat>
 8003f62:	4603      	mov	r3, r0
 8003f64:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003f66:	7dfb      	ldrb	r3, [r7, #23]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d116      	bne.n	8003f9a <create_chain+0x116>
		fs->last_clst = ncl;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	69fa      	ldr	r2, [r7, #28]
 8003f70:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	699a      	ldr	r2, [r3, #24]
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	3b02      	subs	r3, #2
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d804      	bhi.n	8003f8a <create_chain+0x106>
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	1e5a      	subs	r2, r3, #1
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	791b      	ldrb	r3, [r3, #4]
 8003f8e:	f043 0301 	orr.w	r3, r3, #1
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	711a      	strb	r2, [r3, #4]
 8003f98:	e007      	b.n	8003faa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003f9a:	7dfb      	ldrb	r3, [r7, #23]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d102      	bne.n	8003fa6 <create_chain+0x122>
 8003fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa4:	e000      	b.n	8003fa8 <create_chain+0x124>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8003faa:	69fb      	ldr	r3, [r7, #28]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3720      	adds	r7, #32
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	3304      	adds	r3, #4
 8003fca:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	899b      	ldrh	r3, [r3, #12]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	8952      	ldrh	r2, [r2, #10]
 8003fdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1d1a      	adds	r2, r3, #4
 8003fe6:	613a      	str	r2, [r7, #16]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <clmt_clust+0x42>
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	e010      	b.n	8004018 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d307      	bcc.n	800400e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	3304      	adds	r3, #4
 800400a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800400c:	e7e9      	b.n	8003fe2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800400e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	4413      	add	r3, r2
}
 8004018:	4618      	mov	r0, r3
 800401a:	371c      	adds	r7, #28
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800403a:	d204      	bcs.n	8004046 <dir_sdi+0x22>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	f003 031f 	and.w	r3, r3, #31
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <dir_sdi+0x26>
		return FR_INT_ERR;
 8004046:	2302      	movs	r3, #2
 8004048:	e071      	b.n	800412e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d106      	bne.n	800406a <dir_sdi+0x46>
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b02      	cmp	r3, #2
 8004062:	d902      	bls.n	800406a <dir_sdi+0x46>
		clst = fs->dirbase;
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10c      	bne.n	800408a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	8912      	ldrh	r2, [r2, #8]
 8004078:	4293      	cmp	r3, r2
 800407a:	d301      	bcc.n	8004080 <dir_sdi+0x5c>
 800407c:	2302      	movs	r3, #2
 800407e:	e056      	b.n	800412e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	61da      	str	r2, [r3, #28]
 8004088:	e02d      	b.n	80040e6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	895b      	ldrh	r3, [r3, #10]
 800408e:	461a      	mov	r2, r3
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	899b      	ldrh	r3, [r3, #12]
 8004094:	fb02 f303 	mul.w	r3, r2, r3
 8004098:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800409a:	e019      	b.n	80040d0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6979      	ldr	r1, [r7, #20]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff fc9c 	bl	80039de <get_fat>
 80040a6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ae:	d101      	bne.n	80040b4 <dir_sdi+0x90>
 80040b0:	2301      	movs	r3, #1
 80040b2:	e03c      	b.n	800412e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d904      	bls.n	80040c4 <dir_sdi+0xa0>
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d301      	bcc.n	80040c8 <dir_sdi+0xa4>
 80040c4:	2302      	movs	r3, #2
 80040c6:	e032      	b.n	800412e <dir_sdi+0x10a>
			ofs -= csz;
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d2e1      	bcs.n	800409c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80040d8:	6979      	ldr	r1, [r7, #20]
 80040da:	6938      	ldr	r0, [r7, #16]
 80040dc:	f7ff fc60 	bl	80039a0 <clust2sect>
 80040e0:	4602      	mov	r2, r0
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <dir_sdi+0xd4>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e01a      	b.n	800412e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	69da      	ldr	r2, [r3, #28]
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	899b      	ldrh	r3, [r3, #12]
 8004100:	4619      	mov	r1, r3
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	fbb3 f3f1 	udiv	r3, r3, r1
 8004108:	441a      	add	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	899b      	ldrh	r3, [r3, #12]
 8004118:	461a      	mov	r2, r3
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004120:	fb00 f202 	mul.w	r2, r0, r2
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	18ca      	adds	r2, r1, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b086      	sub	sp, #24
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	3320      	adds	r3, #32
 800414c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <dir_next+0x28>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800415c:	d301      	bcc.n	8004162 <dir_next+0x2c>
 800415e:	2304      	movs	r3, #4
 8004160:	e0bb      	b.n	80042da <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	899b      	ldrh	r3, [r3, #12]
 8004166:	461a      	mov	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	fbb3 f1f2 	udiv	r1, r3, r2
 800416e:	fb01 f202 	mul.w	r2, r1, r2
 8004172:	1a9b      	subs	r3, r3, r2
 8004174:	2b00      	cmp	r3, #0
 8004176:	f040 809d 	bne.w	80042b4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10b      	bne.n	80041a4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	095b      	lsrs	r3, r3, #5
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	8912      	ldrh	r2, [r2, #8]
 8004194:	4293      	cmp	r3, r2
 8004196:	f0c0 808d 	bcc.w	80042b4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	61da      	str	r2, [r3, #28]
 80041a0:	2304      	movs	r3, #4
 80041a2:	e09a      	b.n	80042da <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	899b      	ldrh	r3, [r3, #12]
 80041a8:	461a      	mov	r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	8952      	ldrh	r2, [r2, #10]
 80041b4:	3a01      	subs	r2, #1
 80041b6:	4013      	ands	r3, r2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d17b      	bne.n	80042b4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	4619      	mov	r1, r3
 80041c4:	4610      	mov	r0, r2
 80041c6:	f7ff fc0a 	bl	80039de <get_fat>
 80041ca:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d801      	bhi.n	80041d6 <dir_next+0xa0>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e081      	b.n	80042da <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041dc:	d101      	bne.n	80041e2 <dir_next+0xac>
 80041de:	2301      	movs	r3, #1
 80041e0:	e07b      	b.n	80042da <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d359      	bcc.n	80042a0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d104      	bne.n	80041fc <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	61da      	str	r2, [r3, #28]
 80041f8:	2304      	movs	r3, #4
 80041fa:	e06e      	b.n	80042da <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	4619      	mov	r1, r3
 8004204:	4610      	mov	r0, r2
 8004206:	f7ff fe3d 	bl	8003e84 <create_chain>
 800420a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <dir_next+0xe0>
 8004212:	2307      	movs	r3, #7
 8004214:	e061      	b.n	80042da <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <dir_next+0xea>
 800421c:	2302      	movs	r3, #2
 800421e:	e05c      	b.n	80042da <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004226:	d101      	bne.n	800422c <dir_next+0xf6>
 8004228:	2301      	movs	r3, #1
 800422a:	e056      	b.n	80042da <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f7ff fad5 	bl	80037dc <sync_window>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <dir_next+0x106>
 8004238:	2301      	movs	r3, #1
 800423a:	e04e      	b.n	80042da <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	899b      	ldrh	r3, [r3, #12]
 8004246:	461a      	mov	r2, r3
 8004248:	2100      	movs	r1, #0
 800424a:	f7ff f8fe 	bl	800344a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800424e:	2300      	movs	r3, #0
 8004250:	613b      	str	r3, [r7, #16]
 8004252:	6979      	ldr	r1, [r7, #20]
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f7ff fba3 	bl	80039a0 <clust2sect>
 800425a:	4602      	mov	r2, r0
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	635a      	str	r2, [r3, #52]	; 0x34
 8004260:	e012      	b.n	8004288 <dir_next+0x152>
						fs->wflag = 1;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2201      	movs	r2, #1
 8004266:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f7ff fab7 	bl	80037dc <sync_window>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <dir_next+0x142>
 8004274:	2301      	movs	r3, #1
 8004276:	e030      	b.n	80042da <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	3301      	adds	r3, #1
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	635a      	str	r2, [r3, #52]	; 0x34
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	895b      	ldrh	r3, [r3, #10]
 800428c:	461a      	mov	r2, r3
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	4293      	cmp	r3, r2
 8004292:	d3e6      	bcc.n	8004262 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad2      	subs	r2, r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80042a6:	6979      	ldr	r1, [r7, #20]
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f7ff fb79 	bl	80039a0 <clust2sect>
 80042ae:	4602      	mov	r2, r0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	899b      	ldrh	r3, [r3, #12]
 80042c4:	461a      	mov	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80042cc:	fb00 f202 	mul.w	r2, r0, r2
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	18ca      	adds	r2, r1, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b086      	sub	sp, #24
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80042f2:	2100      	movs	r1, #0
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff fe95 	bl	8004024 <dir_sdi>
 80042fa:	4603      	mov	r3, r0
 80042fc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80042fe:	7dfb      	ldrb	r3, [r7, #23]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d12b      	bne.n	800435c <dir_alloc+0x7a>
		n = 0;
 8004304:	2300      	movs	r3, #0
 8004306:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	4619      	mov	r1, r3
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f7ff faa8 	bl	8003864 <move_window>
 8004314:	4603      	mov	r3, r0
 8004316:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004318:	7dfb      	ldrb	r3, [r7, #23]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d11d      	bne.n	800435a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2be5      	cmp	r3, #229	; 0xe5
 8004326:	d004      	beq.n	8004332 <dir_alloc+0x50>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d107      	bne.n	8004342 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	3301      	adds	r3, #1
 8004336:	613b      	str	r3, [r7, #16]
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	429a      	cmp	r2, r3
 800433e:	d102      	bne.n	8004346 <dir_alloc+0x64>
 8004340:	e00c      	b.n	800435c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004342:	2300      	movs	r3, #0
 8004344:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004346:	2101      	movs	r1, #1
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff fef4 	bl	8004136 <dir_next>
 800434e:	4603      	mov	r3, r0
 8004350:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004352:	7dfb      	ldrb	r3, [r7, #23]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0d7      	beq.n	8004308 <dir_alloc+0x26>
 8004358:	e000      	b.n	800435c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800435a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800435c:	7dfb      	ldrb	r3, [r7, #23]
 800435e:	2b04      	cmp	r3, #4
 8004360:	d101      	bne.n	8004366 <dir_alloc+0x84>
 8004362:	2307      	movs	r3, #7
 8004364:	75fb      	strb	r3, [r7, #23]
	return res;
 8004366:	7dfb      	ldrb	r3, [r7, #23]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	331a      	adds	r3, #26
 800437e:	4618      	mov	r0, r3
 8004380:	f7fe ffc0 	bl	8003304 <ld_word>
 8004384:	4603      	mov	r3, r0
 8004386:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b03      	cmp	r3, #3
 800438e:	d109      	bne.n	80043a4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	3314      	adds	r3, #20
 8004394:	4618      	mov	r0, r3
 8004396:	f7fe ffb5 	bl	8003304 <ld_word>
 800439a:	4603      	mov	r3, r0
 800439c:	041b      	lsls	r3, r3, #16
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80043a4:	68fb      	ldr	r3, [r7, #12]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b084      	sub	sp, #16
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	331a      	adds	r3, #26
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	b292      	uxth	r2, r2
 80043c2:	4611      	mov	r1, r2
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7fe ffd8 	bl	800337a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	d109      	bne.n	80043e6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f103 0214 	add.w	r2, r3, #20
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	0c1b      	lsrs	r3, r3, #16
 80043dc:	b29b      	uxth	r3, r3
 80043de:	4619      	mov	r1, r3
 80043e0:	4610      	mov	r0, r2
 80043e2:	f7fe ffca 	bl	800337a <st_word>
	}
}
 80043e6:	bf00      	nop
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
	...

080043f0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80043f0:	b590      	push	{r4, r7, lr}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	331a      	adds	r3, #26
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fe ff80 	bl	8003304 <ld_word>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <cmp_lfn+0x1e>
 800440a:	2300      	movs	r3, #0
 800440c:	e059      	b.n	80044c2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004416:	1e5a      	subs	r2, r3, #1
 8004418:	4613      	mov	r3, r2
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004424:	2301      	movs	r3, #1
 8004426:	81fb      	strh	r3, [r7, #14]
 8004428:	2300      	movs	r3, #0
 800442a:	613b      	str	r3, [r7, #16]
 800442c:	e033      	b.n	8004496 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800442e:	4a27      	ldr	r2, [pc, #156]	; (80044cc <cmp_lfn+0xdc>)
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	4413      	add	r3, r2
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	4413      	add	r3, r2
 800443c:	4618      	mov	r0, r3
 800443e:	f7fe ff61 	bl	8003304 <ld_word>
 8004442:	4603      	mov	r3, r0
 8004444:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8004446:	89fb      	ldrh	r3, [r7, #14]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d01a      	beq.n	8004482 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	2bfe      	cmp	r3, #254	; 0xfe
 8004450:	d812      	bhi.n	8004478 <cmp_lfn+0x88>
 8004452:	89bb      	ldrh	r3, [r7, #12]
 8004454:	4618      	mov	r0, r3
 8004456:	f001 fec5 	bl	80061e4 <ff_wtoupper>
 800445a:	4603      	mov	r3, r0
 800445c:	461c      	mov	r4, r3
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	617a      	str	r2, [r7, #20]
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	4413      	add	r3, r2
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f001 feb9 	bl	80061e4 <ff_wtoupper>
 8004472:	4603      	mov	r3, r0
 8004474:	429c      	cmp	r4, r3
 8004476:	d001      	beq.n	800447c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8004478:	2300      	movs	r3, #0
 800447a:	e022      	b.n	80044c2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800447c:	89bb      	ldrh	r3, [r7, #12]
 800447e:	81fb      	strh	r3, [r7, #14]
 8004480:	e006      	b.n	8004490 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004482:	89bb      	ldrh	r3, [r7, #12]
 8004484:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004488:	4293      	cmp	r3, r2
 800448a:	d001      	beq.n	8004490 <cmp_lfn+0xa0>
 800448c:	2300      	movs	r3, #0
 800448e:	e018      	b.n	80044c2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	3301      	adds	r3, #1
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	2b0c      	cmp	r3, #12
 800449a:	d9c8      	bls.n	800442e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00b      	beq.n	80044c0 <cmp_lfn+0xd0>
 80044a8:	89fb      	ldrh	r3, [r7, #14]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d008      	beq.n	80044c0 <cmp_lfn+0xd0>
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	4413      	add	r3, r2
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <cmp_lfn+0xd0>
 80044bc:	2300      	movs	r3, #0
 80044be:	e000      	b.n	80044c2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80044c0:	2301      	movs	r3, #1
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	371c      	adds	r7, #28
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd90      	pop	{r4, r7, pc}
 80044ca:	bf00      	nop
 80044cc:	08006464 	.word	0x08006464

080044d0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b088      	sub	sp, #32
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	4611      	mov	r1, r2
 80044dc:	461a      	mov	r2, r3
 80044de:	460b      	mov	r3, r1
 80044e0:	71fb      	strb	r3, [r7, #7]
 80044e2:	4613      	mov	r3, r2
 80044e4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	330d      	adds	r3, #13
 80044ea:	79ba      	ldrb	r2, [r7, #6]
 80044ec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	330b      	adds	r3, #11
 80044f2:	220f      	movs	r2, #15
 80044f4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	330c      	adds	r3, #12
 80044fa:	2200      	movs	r2, #0
 80044fc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	331a      	adds	r3, #26
 8004502:	2100      	movs	r1, #0
 8004504:	4618      	mov	r0, r3
 8004506:	f7fe ff38 	bl	800337a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	1e5a      	subs	r2, r3, #1
 800450e:	4613      	mov	r3, r2
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	4413      	add	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800451a:	2300      	movs	r3, #0
 800451c:	82fb      	strh	r3, [r7, #22]
 800451e:	2300      	movs	r3, #0
 8004520:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8004522:	8afb      	ldrh	r3, [r7, #22]
 8004524:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004528:	4293      	cmp	r3, r2
 800452a:	d007      	beq.n	800453c <put_lfn+0x6c>
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	1c5a      	adds	r2, r3, #1
 8004530:	61fa      	str	r2, [r7, #28]
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	4413      	add	r3, r2
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800453c:	4a17      	ldr	r2, [pc, #92]	; (800459c <put_lfn+0xcc>)
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	4413      	add	r3, r2
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	4413      	add	r3, r2
 800454a:	8afa      	ldrh	r2, [r7, #22]
 800454c:	4611      	mov	r1, r2
 800454e:	4618      	mov	r0, r3
 8004550:	f7fe ff13 	bl	800337a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8004554:	8afb      	ldrh	r3, [r7, #22]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d102      	bne.n	8004560 <put_lfn+0x90>
 800455a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800455e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	3301      	adds	r3, #1
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b0c      	cmp	r3, #12
 800456a:	d9da      	bls.n	8004522 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800456c:	8afb      	ldrh	r3, [r7, #22]
 800456e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004572:	4293      	cmp	r3, r2
 8004574:	d006      	beq.n	8004584 <put_lfn+0xb4>
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4413      	add	r3, r2
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d103      	bne.n	800458c <put_lfn+0xbc>
 8004584:	79fb      	ldrb	r3, [r7, #7]
 8004586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800458a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	79fa      	ldrb	r2, [r7, #7]
 8004590:	701a      	strb	r2, [r3, #0]
}
 8004592:	bf00      	nop
 8004594:	3720      	adds	r7, #32
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	08006464 	.word	0x08006464

080045a0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08c      	sub	sp, #48	; 0x30
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80045ae:	220b      	movs	r2, #11
 80045b0:	68b9      	ldr	r1, [r7, #8]
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f7fe ff28 	bl	8003408 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	2b05      	cmp	r3, #5
 80045bc:	d92b      	bls.n	8004616 <gen_numname+0x76>
		sr = seq;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80045c2:	e022      	b.n	800460a <gen_numname+0x6a>
			wc = *lfn++;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	1c9a      	adds	r2, r3, #2
 80045c8:	607a      	str	r2, [r7, #4]
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80045ce:	2300      	movs	r3, #0
 80045d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80045d2:	e017      	b.n	8004604 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	005a      	lsls	r2, r3, #1
 80045d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	4413      	add	r3, r2
 80045e0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80045e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045e4:	085b      	lsrs	r3, r3, #1
 80045e6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d005      	beq.n	80045fe <gen_numname+0x5e>
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80045f8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80045fc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80045fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004600:	3301      	adds	r3, #1
 8004602:	62bb      	str	r3, [r7, #40]	; 0x28
 8004604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004606:	2b0f      	cmp	r3, #15
 8004608:	d9e4      	bls.n	80045d4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1d8      	bne.n	80045c4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8004616:	2307      	movs	r3, #7
 8004618:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	f003 030f 	and.w	r3, r3, #15
 8004622:	b2db      	uxtb	r3, r3
 8004624:	3330      	adds	r3, #48	; 0x30
 8004626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800462a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800462e:	2b39      	cmp	r3, #57	; 0x39
 8004630:	d904      	bls.n	800463c <gen_numname+0x9c>
 8004632:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004636:	3307      	adds	r3, #7
 8004638:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800463c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463e:	1e5a      	subs	r2, r3, #1
 8004640:	62ba      	str	r2, [r7, #40]	; 0x28
 8004642:	3330      	adds	r3, #48	; 0x30
 8004644:	443b      	add	r3, r7
 8004646:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800464a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	091b      	lsrs	r3, r3, #4
 8004652:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1df      	bne.n	800461a <gen_numname+0x7a>
	ns[i] = '~';
 800465a:	f107 0214 	add.w	r2, r7, #20
 800465e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004660:	4413      	add	r3, r2
 8004662:	227e      	movs	r2, #126	; 0x7e
 8004664:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004666:	2300      	movs	r3, #0
 8004668:	627b      	str	r3, [r7, #36]	; 0x24
 800466a:	e002      	b.n	8004672 <gen_numname+0xd2>
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	3301      	adds	r3, #1
 8004670:	627b      	str	r3, [r7, #36]	; 0x24
 8004672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004676:	429a      	cmp	r2, r3
 8004678:	d205      	bcs.n	8004686 <gen_numname+0xe6>
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	4413      	add	r3, r2
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b20      	cmp	r3, #32
 8004684:	d1f2      	bne.n	800466c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004688:	2b07      	cmp	r3, #7
 800468a:	d807      	bhi.n	800469c <gen_numname+0xfc>
 800468c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	62ba      	str	r2, [r7, #40]	; 0x28
 8004692:	3330      	adds	r3, #48	; 0x30
 8004694:	443b      	add	r3, r7
 8004696:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800469a:	e000      	b.n	800469e <gen_numname+0xfe>
 800469c:	2120      	movs	r1, #32
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	627a      	str	r2, [r7, #36]	; 0x24
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4413      	add	r3, r2
 80046a8:	460a      	mov	r2, r1
 80046aa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	2b07      	cmp	r3, #7
 80046b0:	d9e9      	bls.n	8004686 <gen_numname+0xe6>
}
 80046b2:	bf00      	nop
 80046b4:	bf00      	nop
 80046b6:	3730      	adds	r7, #48	; 0x30
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80046c4:	2300      	movs	r3, #0
 80046c6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80046c8:	230b      	movs	r3, #11
 80046ca:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80046cc:	7bfb      	ldrb	r3, [r7, #15]
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	0852      	lsrs	r2, r2, #1
 80046d2:	01db      	lsls	r3, r3, #7
 80046d4:	4313      	orrs	r3, r2
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	1c59      	adds	r1, r3, #1
 80046dc:	6079      	str	r1, [r7, #4]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	4413      	add	r3, r2
 80046e2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	60bb      	str	r3, [r7, #8]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1ed      	bne.n	80046cc <sum_sfn+0x10>
	return sum;
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b086      	sub	sp, #24
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800470c:	2100      	movs	r1, #0
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7ff fc88 	bl	8004024 <dir_sdi>
 8004714:	4603      	mov	r3, r0
 8004716:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004718:	7dfb      	ldrb	r3, [r7, #23]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <dir_find+0x24>
 800471e:	7dfb      	ldrb	r3, [r7, #23]
 8004720:	e0a9      	b.n	8004876 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004722:	23ff      	movs	r3, #255	; 0xff
 8004724:	753b      	strb	r3, [r7, #20]
 8004726:	7d3b      	ldrb	r3, [r7, #20]
 8004728:	757b      	strb	r3, [r7, #21]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f04f 32ff 	mov.w	r2, #4294967295
 8004730:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	4619      	mov	r1, r3
 8004738:	6938      	ldr	r0, [r7, #16]
 800473a:	f7ff f893 	bl	8003864 <move_window>
 800473e:	4603      	mov	r3, r0
 8004740:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004742:	7dfb      	ldrb	r3, [r7, #23]
 8004744:	2b00      	cmp	r3, #0
 8004746:	f040 8090 	bne.w	800486a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004752:	7dbb      	ldrb	r3, [r7, #22]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d102      	bne.n	800475e <dir_find+0x60>
 8004758:	2304      	movs	r3, #4
 800475a:	75fb      	strb	r3, [r7, #23]
 800475c:	e08a      	b.n	8004874 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	330b      	adds	r3, #11
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800476a:	73fb      	strb	r3, [r7, #15]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	7bfa      	ldrb	r2, [r7, #15]
 8004770:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004772:	7dbb      	ldrb	r3, [r7, #22]
 8004774:	2be5      	cmp	r3, #229	; 0xe5
 8004776:	d007      	beq.n	8004788 <dir_find+0x8a>
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	2b00      	cmp	r3, #0
 8004780:	d009      	beq.n	8004796 <dir_find+0x98>
 8004782:	7bfb      	ldrb	r3, [r7, #15]
 8004784:	2b0f      	cmp	r3, #15
 8004786:	d006      	beq.n	8004796 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004788:	23ff      	movs	r3, #255	; 0xff
 800478a:	757b      	strb	r3, [r7, #21]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f04f 32ff 	mov.w	r2, #4294967295
 8004792:	631a      	str	r2, [r3, #48]	; 0x30
 8004794:	e05e      	b.n	8004854 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004796:	7bfb      	ldrb	r3, [r7, #15]
 8004798:	2b0f      	cmp	r3, #15
 800479a:	d136      	bne.n	800480a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80047a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d154      	bne.n	8004854 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80047aa:	7dbb      	ldrb	r3, [r7, #22]
 80047ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00d      	beq.n	80047d0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	7b5b      	ldrb	r3, [r3, #13]
 80047ba:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80047bc:	7dbb      	ldrb	r3, [r7, #22]
 80047be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047c2:	75bb      	strb	r3, [r7, #22]
 80047c4:	7dbb      	ldrb	r3, [r7, #22]
 80047c6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	695a      	ldr	r2, [r3, #20]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80047d0:	7dba      	ldrb	r2, [r7, #22]
 80047d2:	7d7b      	ldrb	r3, [r7, #21]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d115      	bne.n	8004804 <dir_find+0x106>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	330d      	adds	r3, #13
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	7d3a      	ldrb	r2, [r7, #20]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d10e      	bne.n	8004804 <dir_find+0x106>
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	4619      	mov	r1, r3
 80047f0:	4610      	mov	r0, r2
 80047f2:	f7ff fdfd 	bl	80043f0 <cmp_lfn>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <dir_find+0x106>
 80047fc:	7d7b      	ldrb	r3, [r7, #21]
 80047fe:	3b01      	subs	r3, #1
 8004800:	b2db      	uxtb	r3, r3
 8004802:	e000      	b.n	8004806 <dir_find+0x108>
 8004804:	23ff      	movs	r3, #255	; 0xff
 8004806:	757b      	strb	r3, [r7, #21]
 8004808:	e024      	b.n	8004854 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800480a:	7d7b      	ldrb	r3, [r7, #21]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d109      	bne.n	8004824 <dir_find+0x126>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff ff51 	bl	80046bc <sum_sfn>
 800481a:	4603      	mov	r3, r0
 800481c:	461a      	mov	r2, r3
 800481e:	7d3b      	ldrb	r3, [r7, #20]
 8004820:	4293      	cmp	r3, r2
 8004822:	d024      	beq.n	800486e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10a      	bne.n	8004848 <dir_find+0x14a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a18      	ldr	r0, [r3, #32]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	3324      	adds	r3, #36	; 0x24
 800483a:	220b      	movs	r2, #11
 800483c:	4619      	mov	r1, r3
 800483e:	f7fe fe1f 	bl	8003480 <mem_cmp>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d014      	beq.n	8004872 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004848:	23ff      	movs	r3, #255	; 0xff
 800484a:	757b      	strb	r3, [r7, #21]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f04f 32ff 	mov.w	r2, #4294967295
 8004852:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004854:	2100      	movs	r1, #0
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7ff fc6d 	bl	8004136 <dir_next>
 800485c:	4603      	mov	r3, r0
 800485e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004860:	7dfb      	ldrb	r3, [r7, #23]
 8004862:	2b00      	cmp	r3, #0
 8004864:	f43f af65 	beq.w	8004732 <dir_find+0x34>
 8004868:	e004      	b.n	8004874 <dir_find+0x176>
		if (res != FR_OK) break;
 800486a:	bf00      	nop
 800486c:	e002      	b.n	8004874 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800486e:	bf00      	nop
 8004870:	e000      	b.n	8004874 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004872:	bf00      	nop

	return res;
 8004874:	7dfb      	ldrb	r3, [r7, #23]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b08c      	sub	sp, #48	; 0x30
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004894:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <dir_register+0x20>
 800489c:	2306      	movs	r3, #6
 800489e:	e0e0      	b.n	8004a62 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80048a0:	2300      	movs	r3, #0
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24
 80048a4:	e002      	b.n	80048ac <dir_register+0x2c>
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	3301      	adds	r3, #1
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	691a      	ldr	r2, [r3, #16]
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	4413      	add	r3, r2
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1f4      	bne.n	80048a6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80048c2:	f107 030c 	add.w	r3, r7, #12
 80048c6:	220c      	movs	r2, #12
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7fe fd9d 	bl	8003408 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80048ce:	7dfb      	ldrb	r3, [r7, #23]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d032      	beq.n	800493e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2240      	movs	r2, #64	; 0x40
 80048dc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80048e0:	2301      	movs	r3, #1
 80048e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80048e4:	e016      	b.n	8004914 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	691a      	ldr	r2, [r3, #16]
 80048f0:	f107 010c 	add.w	r1, r7, #12
 80048f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f6:	f7ff fe53 	bl	80045a0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff feff 	bl	80046fe <dir_find>
 8004900:	4603      	mov	r3, r0
 8004902:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8004906:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800490a:	2b00      	cmp	r3, #0
 800490c:	d106      	bne.n	800491c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	3301      	adds	r3, #1
 8004912:	62bb      	str	r3, [r7, #40]	; 0x28
 8004914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004916:	2b63      	cmp	r3, #99	; 0x63
 8004918:	d9e5      	bls.n	80048e6 <dir_register+0x66>
 800491a:	e000      	b.n	800491e <dir_register+0x9e>
			if (res != FR_OK) break;
 800491c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800491e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004920:	2b64      	cmp	r3, #100	; 0x64
 8004922:	d101      	bne.n	8004928 <dir_register+0xa8>
 8004924:	2307      	movs	r3, #7
 8004926:	e09c      	b.n	8004a62 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004928:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800492c:	2b04      	cmp	r3, #4
 800492e:	d002      	beq.n	8004936 <dir_register+0xb6>
 8004930:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004934:	e095      	b.n	8004a62 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8004936:	7dfa      	ldrb	r2, [r7, #23]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800493e:	7dfb      	ldrb	r3, [r7, #23]
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d007      	beq.n	8004958 <dir_register+0xd8>
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	330c      	adds	r3, #12
 800494c:	4a47      	ldr	r2, [pc, #284]	; (8004a6c <dir_register+0x1ec>)
 800494e:	fba2 2303 	umull	r2, r3, r2, r3
 8004952:	089b      	lsrs	r3, r3, #2
 8004954:	3301      	adds	r3, #1
 8004956:	e000      	b.n	800495a <dir_register+0xda>
 8004958:	2301      	movs	r3, #1
 800495a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800495c:	6a39      	ldr	r1, [r7, #32]
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7ff fcbf 	bl	80042e2 <dir_alloc>
 8004964:	4603      	mov	r3, r0
 8004966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800496a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800496e:	2b00      	cmp	r3, #0
 8004970:	d148      	bne.n	8004a04 <dir_register+0x184>
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	3b01      	subs	r3, #1
 8004976:	623b      	str	r3, [r7, #32]
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d042      	beq.n	8004a04 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	695a      	ldr	r2, [r3, #20]
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	015b      	lsls	r3, r3, #5
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	4619      	mov	r1, r3
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7ff fb4a 	bl	8004024 <dir_sdi>
 8004990:	4603      	mov	r3, r0
 8004992:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004996:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800499a:	2b00      	cmp	r3, #0
 800499c:	d132      	bne.n	8004a04 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	3324      	adds	r3, #36	; 0x24
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff fe8a 	bl	80046bc <sum_sfn>
 80049a8:	4603      	mov	r3, r0
 80049aa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	4619      	mov	r1, r3
 80049b2:	69f8      	ldr	r0, [r7, #28]
 80049b4:	f7fe ff56 	bl	8003864 <move_window>
 80049b8:	4603      	mov	r3, r0
 80049ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80049be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d11d      	bne.n	8004a02 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	6918      	ldr	r0, [r3, #16]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a19      	ldr	r1, [r3, #32]
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	7efb      	ldrb	r3, [r7, #27]
 80049d4:	f7ff fd7c 	bl	80044d0 <put_lfn>
				fs->wflag = 1;
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	2201      	movs	r2, #1
 80049dc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80049de:	2100      	movs	r1, #0
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff fba8 	bl	8004136 <dir_next>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80049ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d107      	bne.n	8004a04 <dir_register+0x184>
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	623b      	str	r3, [r7, #32]
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1d5      	bne.n	80049ac <dir_register+0x12c>
 8004a00:	e000      	b.n	8004a04 <dir_register+0x184>
				if (res != FR_OK) break;
 8004a02:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004a04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d128      	bne.n	8004a5e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	4619      	mov	r1, r3
 8004a12:	69f8      	ldr	r0, [r7, #28]
 8004a14:	f7fe ff26 	bl	8003864 <move_window>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004a1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d11b      	bne.n	8004a5e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fe fd0b 	bl	800344a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a18      	ldr	r0, [r3, #32]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3324      	adds	r3, #36	; 0x24
 8004a3c:	220b      	movs	r2, #11
 8004a3e:	4619      	mov	r1, r3
 8004a40:	f7fe fce2 	bl	8003408 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	330c      	adds	r3, #12
 8004a50:	f002 0218 	and.w	r2, r2, #24
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004a5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3730      	adds	r7, #48	; 0x30
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	4ec4ec4f 	.word	0x4ec4ec4f

08004a70 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08a      	sub	sp, #40	; 0x28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	613b      	str	r3, [r7, #16]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	61ba      	str	r2, [r7, #24]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4413      	add	r3, r2
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8004a9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004aa0:	2b1f      	cmp	r3, #31
 8004aa2:	d940      	bls.n	8004b26 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8004aa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004aa6:	2b2f      	cmp	r3, #47	; 0x2f
 8004aa8:	d006      	beq.n	8004ab8 <create_name+0x48>
 8004aaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004aac:	2b5c      	cmp	r3, #92	; 0x5c
 8004aae:	d110      	bne.n	8004ad2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004ab0:	e002      	b.n	8004ab8 <create_name+0x48>
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	61bb      	str	r3, [r7, #24]
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	4413      	add	r3, r2
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2b2f      	cmp	r3, #47	; 0x2f
 8004ac2:	d0f6      	beq.n	8004ab2 <create_name+0x42>
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	4413      	add	r3, r2
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b5c      	cmp	r3, #92	; 0x5c
 8004ace:	d0f0      	beq.n	8004ab2 <create_name+0x42>
			break;
 8004ad0:	e02a      	b.n	8004b28 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2bfe      	cmp	r3, #254	; 0xfe
 8004ad6:	d901      	bls.n	8004adc <create_name+0x6c>
 8004ad8:	2306      	movs	r3, #6
 8004ada:	e17d      	b.n	8004dd8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004adc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004ae2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f001 fb40 	bl	800616c <ff_convert>
 8004aec:	4603      	mov	r3, r0
 8004aee:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004af0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <create_name+0x8a>
 8004af6:	2306      	movs	r3, #6
 8004af8:	e16e      	b.n	8004dd8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8004afa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004afc:	2b7f      	cmp	r3, #127	; 0x7f
 8004afe:	d809      	bhi.n	8004b14 <create_name+0xa4>
 8004b00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b02:	4619      	mov	r1, r3
 8004b04:	488d      	ldr	r0, [pc, #564]	; (8004d3c <create_name+0x2cc>)
 8004b06:	f7fe fce2 	bl	80034ce <chk_chr>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <create_name+0xa4>
 8004b10:	2306      	movs	r3, #6
 8004b12:	e161      	b.n	8004dd8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	617a      	str	r2, [r7, #20]
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	4413      	add	r3, r2
 8004b20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b22:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004b24:	e7b4      	b.n	8004a90 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8004b26:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	441a      	add	r2, r3
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004b32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b34:	2b1f      	cmp	r3, #31
 8004b36:	d801      	bhi.n	8004b3c <create_name+0xcc>
 8004b38:	2304      	movs	r3, #4
 8004b3a:	e000      	b.n	8004b3e <create_name+0xce>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004b42:	e011      	b.n	8004b68 <create_name+0xf8>
		w = lfn[di - 1];
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4413      	add	r3, r2
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8004b56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d002      	beq.n	8004b62 <create_name+0xf2>
 8004b5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b5e:	2b2e      	cmp	r3, #46	; 0x2e
 8004b60:	d106      	bne.n	8004b70 <create_name+0x100>
		di--;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	3b01      	subs	r3, #1
 8004b66:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1ea      	bne.n	8004b44 <create_name+0xd4>
 8004b6e:	e000      	b.n	8004b72 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8004b70:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	4413      	add	r3, r2
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <create_name+0x118>
 8004b84:	2306      	movs	r3, #6
 8004b86:	e127      	b.n	8004dd8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3324      	adds	r3, #36	; 0x24
 8004b8c:	220b      	movs	r2, #11
 8004b8e:	2120      	movs	r1, #32
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fe fc5a 	bl	800344a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004b96:	2300      	movs	r3, #0
 8004b98:	61bb      	str	r3, [r7, #24]
 8004b9a:	e002      	b.n	8004ba2 <create_name+0x132>
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	61bb      	str	r3, [r7, #24]
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4413      	add	r3, r2
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	d0f5      	beq.n	8004b9c <create_name+0x12c>
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	2b2e      	cmp	r3, #46	; 0x2e
 8004bbc:	d0ee      	beq.n	8004b9c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d009      	beq.n	8004bd8 <create_name+0x168>
 8004bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bc8:	f043 0303 	orr.w	r3, r3, #3
 8004bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004bd0:	e002      	b.n	8004bd8 <create_name+0x168>
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d009      	beq.n	8004bf2 <create_name+0x182>
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004be4:	3b01      	subs	r3, #1
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	4413      	add	r3, r2
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	2b2e      	cmp	r3, #46	; 0x2e
 8004bf0:	d1ef      	bne.n	8004bd2 <create_name+0x162>

	i = b = 0; ni = 8;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	623b      	str	r3, [r7, #32]
 8004bfc:	2308      	movs	r3, #8
 8004bfe:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	61ba      	str	r2, [r7, #24]
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8004c10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 8090 	beq.w	8004d38 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004c18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c1a:	2b20      	cmp	r3, #32
 8004c1c:	d006      	beq.n	8004c2c <create_name+0x1bc>
 8004c1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c20:	2b2e      	cmp	r3, #46	; 0x2e
 8004c22:	d10a      	bne.n	8004c3a <create_name+0x1ca>
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d006      	beq.n	8004c3a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8004c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c30:	f043 0303 	orr.w	r3, r3, #3
 8004c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004c38:	e07d      	b.n	8004d36 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004c3a:	6a3a      	ldr	r2, [r7, #32]
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d203      	bcs.n	8004c4a <create_name+0x1da>
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d123      	bne.n	8004c92 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	2b0b      	cmp	r3, #11
 8004c4e:	d106      	bne.n	8004c5e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8004c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c54:	f043 0303 	orr.w	r3, r3, #3
 8004c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004c5c:	e075      	b.n	8004d4a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d005      	beq.n	8004c72 <create_name+0x202>
 8004c66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c6a:	f043 0303 	orr.w	r3, r3, #3
 8004c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d866      	bhi.n	8004d48 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	61bb      	str	r3, [r7, #24]
 8004c7e:	2308      	movs	r3, #8
 8004c80:	623b      	str	r3, [r7, #32]
 8004c82:	230b      	movs	r3, #11
 8004c84:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004c86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004c90:	e051      	b.n	8004d36 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8004c92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c94:	2b7f      	cmp	r3, #127	; 0x7f
 8004c96:	d914      	bls.n	8004cc2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004c98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f001 fa65 	bl	800616c <ff_convert>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004ca6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d004      	beq.n	8004cb6 <create_name+0x246>
 8004cac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cae:	3b80      	subs	r3, #128	; 0x80
 8004cb0:	4a23      	ldr	r2, [pc, #140]	; (8004d40 <create_name+0x2d0>)
 8004cb2:	5cd3      	ldrb	r3, [r2, r3]
 8004cb4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8004cb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cba:	f043 0302 	orr.w	r3, r3, #2
 8004cbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8004cc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d007      	beq.n	8004cd8 <create_name+0x268>
 8004cc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cca:	4619      	mov	r1, r3
 8004ccc:	481d      	ldr	r0, [pc, #116]	; (8004d44 <create_name+0x2d4>)
 8004cce:	f7fe fbfe 	bl	80034ce <chk_chr>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d008      	beq.n	8004cea <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004cd8:	235f      	movs	r3, #95	; 0x5f
 8004cda:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ce0:	f043 0303 	orr.w	r3, r3, #3
 8004ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004ce8:	e01b      	b.n	8004d22 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8004cea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cec:	2b40      	cmp	r3, #64	; 0x40
 8004cee:	d909      	bls.n	8004d04 <create_name+0x294>
 8004cf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cf2:	2b5a      	cmp	r3, #90	; 0x5a
 8004cf4:	d806      	bhi.n	8004d04 <create_name+0x294>
					b |= 2;
 8004cf6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004cfa:	f043 0302 	orr.w	r3, r3, #2
 8004cfe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004d02:	e00e      	b.n	8004d22 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8004d04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d06:	2b60      	cmp	r3, #96	; 0x60
 8004d08:	d90b      	bls.n	8004d22 <create_name+0x2b2>
 8004d0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d0c:	2b7a      	cmp	r3, #122	; 0x7a
 8004d0e:	d808      	bhi.n	8004d22 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8004d10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d14:	f043 0301 	orr.w	r3, r3, #1
 8004d18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004d1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d1e:	3b20      	subs	r3, #32
 8004d20:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	623a      	str	r2, [r7, #32]
 8004d28:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d2a:	b2d1      	uxtb	r1, r2
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	4413      	add	r3, r2
 8004d30:	460a      	mov	r2, r1
 8004d32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8004d36:	e763      	b.n	8004c00 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8004d38:	bf00      	nop
 8004d3a:	e006      	b.n	8004d4a <create_name+0x2da>
 8004d3c:	0800638c 	.word	0x0800638c
 8004d40:	080063e4 	.word	0x080063e4
 8004d44:	08006398 	.word	0x08006398
			if (si > di) break;			/* No extension */
 8004d48:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d50:	2be5      	cmp	r3, #229	; 0xe5
 8004d52:	d103      	bne.n	8004d5c <create_name+0x2ec>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2205      	movs	r2, #5
 8004d58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	2b08      	cmp	r3, #8
 8004d60:	d104      	bne.n	8004d6c <create_name+0x2fc>
 8004d62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8004d6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d70:	f003 030c 	and.w	r3, r3, #12
 8004d74:	2b0c      	cmp	r3, #12
 8004d76:	d005      	beq.n	8004d84 <create_name+0x314>
 8004d78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d7c:	f003 0303 	and.w	r3, r3, #3
 8004d80:	2b03      	cmp	r3, #3
 8004d82:	d105      	bne.n	8004d90 <create_name+0x320>
 8004d84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d88:	f043 0302 	orr.w	r3, r3, #2
 8004d8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d117      	bne.n	8004dcc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8004d9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004da0:	f003 0303 	and.w	r3, r3, #3
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d105      	bne.n	8004db4 <create_name+0x344>
 8004da8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dac:	f043 0310 	orr.w	r3, r3, #16
 8004db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8004db4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004db8:	f003 030c 	and.w	r3, r3, #12
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d105      	bne.n	8004dcc <create_name+0x35c>
 8004dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dc4:	f043 0308 	orr.w	r3, r3, #8
 8004dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004dd2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8004dd6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3728      	adds	r7, #40	; 0x28
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004df4:	e002      	b.n	8004dfc <follow_path+0x1c>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	603b      	str	r3, [r7, #0]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b2f      	cmp	r3, #47	; 0x2f
 8004e02:	d0f8      	beq.n	8004df6 <follow_path+0x16>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2b5c      	cmp	r3, #92	; 0x5c
 8004e0a:	d0f4      	beq.n	8004df6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b1f      	cmp	r3, #31
 8004e18:	d80a      	bhi.n	8004e30 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2280      	movs	r2, #128	; 0x80
 8004e1e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004e22:	2100      	movs	r1, #0
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff f8fd 	bl	8004024 <dir_sdi>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	75fb      	strb	r3, [r7, #23]
 8004e2e:	e048      	b.n	8004ec2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004e30:	463b      	mov	r3, r7
 8004e32:	4619      	mov	r1, r3
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff fe1b 	bl	8004a70 <create_name>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004e3e:	7dfb      	ldrb	r3, [r7, #23]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d139      	bne.n	8004eb8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7ff fc5a 	bl	80046fe <dir_find>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004e54:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004e56:	7dfb      	ldrb	r3, [r7, #23]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00a      	beq.n	8004e72 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004e5c:	7dfb      	ldrb	r3, [r7, #23]
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d12c      	bne.n	8004ebc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004e62:	7afb      	ldrb	r3, [r7, #11]
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d127      	bne.n	8004ebc <follow_path+0xdc>
 8004e6c:	2305      	movs	r3, #5
 8004e6e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004e70:	e024      	b.n	8004ebc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004e72:	7afb      	ldrb	r3, [r7, #11]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d121      	bne.n	8004ec0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	799b      	ldrb	r3, [r3, #6]
 8004e80:	f003 0310 	and.w	r3, r3, #16
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d102      	bne.n	8004e8e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004e88:	2305      	movs	r3, #5
 8004e8a:	75fb      	strb	r3, [r7, #23]
 8004e8c:	e019      	b.n	8004ec2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	8992      	ldrh	r2, [r2, #12]
 8004e9c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004ea0:	fb00 f202 	mul.w	r2, r0, r2
 8004ea4:	1a9b      	subs	r3, r3, r2
 8004ea6:	440b      	add	r3, r1
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f7ff fa60 	bl	8004370 <ld_clust>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004eb6:	e7bb      	b.n	8004e30 <follow_path+0x50>
			if (res != FR_OK) break;
 8004eb8:	bf00      	nop
 8004eba:	e002      	b.n	8004ec2 <follow_path+0xe2>
				break;
 8004ebc:	bf00      	nop
 8004ebe:	e000      	b.n	8004ec2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004ec0:	bf00      	nop
			}
		}
	}

	return res;
 8004ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ed8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d031      	beq.n	8004f46 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	e002      	b.n	8004ef0 <get_ldnumber+0x24>
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	3301      	adds	r3, #1
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	2b1f      	cmp	r3, #31
 8004ef6:	d903      	bls.n	8004f00 <get_ldnumber+0x34>
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	2b3a      	cmp	r3, #58	; 0x3a
 8004efe:	d1f4      	bne.n	8004eea <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	2b3a      	cmp	r3, #58	; 0x3a
 8004f06:	d11c      	bne.n	8004f42 <get_ldnumber+0x76>
			tp = *path;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	60fa      	str	r2, [r7, #12]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	3b30      	subs	r3, #48	; 0x30
 8004f18:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2b09      	cmp	r3, #9
 8004f1e:	d80e      	bhi.n	8004f3e <get_ldnumber+0x72>
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d10a      	bne.n	8004f3e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d107      	bne.n	8004f3e <get_ldnumber+0x72>
					vol = (int)i;
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	3301      	adds	r3, #1
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	e002      	b.n	8004f48 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004f42:	2300      	movs	r3, #0
 8004f44:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004f46:	693b      	ldr	r3, [r7, #16]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	371c      	adds	r7, #28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	70da      	strb	r2, [r3, #3]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f04f 32ff 	mov.w	r2, #4294967295
 8004f6a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004f6c:	6839      	ldr	r1, [r7, #0]
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fe fc78 	bl	8003864 <move_window>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <check_fs+0x2a>
 8004f7a:	2304      	movs	r3, #4
 8004f7c:	e038      	b.n	8004ff0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3338      	adds	r3, #56	; 0x38
 8004f82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7fe f9bc 	bl	8003304 <ld_word>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d001      	beq.n	8004f9c <check_fs+0x48>
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e029      	b.n	8004ff0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fa2:	2be9      	cmp	r3, #233	; 0xe9
 8004fa4:	d009      	beq.n	8004fba <check_fs+0x66>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fac:	2beb      	cmp	r3, #235	; 0xeb
 8004fae:	d11e      	bne.n	8004fee <check_fs+0x9a>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004fb6:	2b90      	cmp	r3, #144	; 0x90
 8004fb8:	d119      	bne.n	8004fee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	3338      	adds	r3, #56	; 0x38
 8004fbe:	3336      	adds	r3, #54	; 0x36
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fe f9b7 	bl	8003334 <ld_dword>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004fcc:	4a0a      	ldr	r2, [pc, #40]	; (8004ff8 <check_fs+0xa4>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d101      	bne.n	8004fd6 <check_fs+0x82>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	e00c      	b.n	8004ff0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3338      	adds	r3, #56	; 0x38
 8004fda:	3352      	adds	r3, #82	; 0x52
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7fe f9a9 	bl	8003334 <ld_dword>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	4a05      	ldr	r2, [pc, #20]	; (8004ffc <check_fs+0xa8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d101      	bne.n	8004fee <check_fs+0x9a>
 8004fea:	2300      	movs	r3, #0
 8004fec:	e000      	b.n	8004ff0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004fee:	2302      	movs	r3, #2
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	00544146 	.word	0x00544146
 8004ffc:	33544146 	.word	0x33544146

08005000 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b096      	sub	sp, #88	; 0x58
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	4613      	mov	r3, r2
 800500c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f7ff ff59 	bl	8004ecc <get_ldnumber>
 800501a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800501c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800501e:	2b00      	cmp	r3, #0
 8005020:	da01      	bge.n	8005026 <find_volume+0x26>
 8005022:	230b      	movs	r3, #11
 8005024:	e265      	b.n	80054f2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005026:	4a9f      	ldr	r2, [pc, #636]	; (80052a4 <find_volume+0x2a4>)
 8005028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800502a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800502e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <find_volume+0x3a>
 8005036:	230c      	movs	r3, #12
 8005038:	e25b      	b.n	80054f2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800503e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005040:	79fb      	ldrb	r3, [r7, #7]
 8005042:	f023 0301 	bic.w	r3, r3, #1
 8005046:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01a      	beq.n	8005086 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005052:	785b      	ldrb	r3, [r3, #1]
 8005054:	4618      	mov	r0, r3
 8005056:	f7fe f8b7 	bl	80031c8 <disk_status>
 800505a:	4603      	mov	r3, r0
 800505c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005060:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10c      	bne.n	8005086 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800506c:	79fb      	ldrb	r3, [r7, #7]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d007      	beq.n	8005082 <find_volume+0x82>
 8005072:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005076:	f003 0304 	and.w	r3, r3, #4
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800507e:	230a      	movs	r3, #10
 8005080:	e237      	b.n	80054f2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005082:	2300      	movs	r3, #0
 8005084:	e235      	b.n	80054f2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005088:	2200      	movs	r2, #0
 800508a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800508c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800508e:	b2da      	uxtb	r2, r3
 8005090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005092:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005096:	785b      	ldrb	r3, [r3, #1]
 8005098:	4618      	mov	r0, r3
 800509a:	f7fe f8af 	bl	80031fc <disk_initialize>
 800509e:	4603      	mov	r3, r0
 80050a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80050a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80050b0:	2303      	movs	r3, #3
 80050b2:	e21e      	b.n	80054f2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80050b4:	79fb      	ldrb	r3, [r7, #7]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d007      	beq.n	80050ca <find_volume+0xca>
 80050ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80050c6:	230a      	movs	r3, #10
 80050c8:	e213      	b.n	80054f2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80050ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050cc:	7858      	ldrb	r0, [r3, #1]
 80050ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d0:	330c      	adds	r3, #12
 80050d2:	461a      	mov	r2, r3
 80050d4:	2102      	movs	r1, #2
 80050d6:	f7fe f8f7 	bl	80032c8 <disk_ioctl>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d001      	beq.n	80050e4 <find_volume+0xe4>
 80050e0:	2301      	movs	r3, #1
 80050e2:	e206      	b.n	80054f2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80050e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e6:	899b      	ldrh	r3, [r3, #12]
 80050e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ec:	d80d      	bhi.n	800510a <find_volume+0x10a>
 80050ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f0:	899b      	ldrh	r3, [r3, #12]
 80050f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050f6:	d308      	bcc.n	800510a <find_volume+0x10a>
 80050f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fa:	899b      	ldrh	r3, [r3, #12]
 80050fc:	461a      	mov	r2, r3
 80050fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005100:	899b      	ldrh	r3, [r3, #12]
 8005102:	3b01      	subs	r3, #1
 8005104:	4013      	ands	r3, r2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <find_volume+0x10e>
 800510a:	2301      	movs	r3, #1
 800510c:	e1f1      	b.n	80054f2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800510e:	2300      	movs	r3, #0
 8005110:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005112:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005114:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005116:	f7ff ff1d 	bl	8004f54 <check_fs>
 800511a:	4603      	mov	r3, r0
 800511c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005120:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005124:	2b02      	cmp	r3, #2
 8005126:	d149      	bne.n	80051bc <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005128:	2300      	movs	r3, #0
 800512a:	643b      	str	r3, [r7, #64]	; 0x40
 800512c:	e01e      	b.n	800516c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800512e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005130:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800513c:	4413      	add	r3, r2
 800513e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005142:	3304      	adds	r3, #4
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d006      	beq.n	8005158 <find_volume+0x158>
 800514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514c:	3308      	adds	r3, #8
 800514e:	4618      	mov	r0, r3
 8005150:	f7fe f8f0 	bl	8003334 <ld_dword>
 8005154:	4602      	mov	r2, r0
 8005156:	e000      	b.n	800515a <find_volume+0x15a>
 8005158:	2200      	movs	r2, #0
 800515a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	3358      	adds	r3, #88	; 0x58
 8005160:	443b      	add	r3, r7
 8005162:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005168:	3301      	adds	r3, #1
 800516a:	643b      	str	r3, [r7, #64]	; 0x40
 800516c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800516e:	2b03      	cmp	r3, #3
 8005170:	d9dd      	bls.n	800512e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005172:	2300      	movs	r3, #0
 8005174:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <find_volume+0x182>
 800517c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800517e:	3b01      	subs	r3, #1
 8005180:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	3358      	adds	r3, #88	; 0x58
 8005188:	443b      	add	r3, r7
 800518a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800518e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005192:	2b00      	cmp	r3, #0
 8005194:	d005      	beq.n	80051a2 <find_volume+0x1a2>
 8005196:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005198:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800519a:	f7ff fedb 	bl	8004f54 <check_fs>
 800519e:	4603      	mov	r3, r0
 80051a0:	e000      	b.n	80051a4 <find_volume+0x1a4>
 80051a2:	2303      	movs	r3, #3
 80051a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80051a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d905      	bls.n	80051bc <find_volume+0x1bc>
 80051b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051b2:	3301      	adds	r3, #1
 80051b4:	643b      	str	r3, [r7, #64]	; 0x40
 80051b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051b8:	2b03      	cmp	r3, #3
 80051ba:	d9e2      	bls.n	8005182 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80051bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051c0:	2b04      	cmp	r3, #4
 80051c2:	d101      	bne.n	80051c8 <find_volume+0x1c8>
 80051c4:	2301      	movs	r3, #1
 80051c6:	e194      	b.n	80054f2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80051c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d901      	bls.n	80051d4 <find_volume+0x1d4>
 80051d0:	230d      	movs	r3, #13
 80051d2:	e18e      	b.n	80054f2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80051d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d6:	3338      	adds	r3, #56	; 0x38
 80051d8:	330b      	adds	r3, #11
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fe f892 	bl	8003304 <ld_word>
 80051e0:	4603      	mov	r3, r0
 80051e2:	461a      	mov	r2, r3
 80051e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e6:	899b      	ldrh	r3, [r3, #12]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d001      	beq.n	80051f0 <find_volume+0x1f0>
 80051ec:	230d      	movs	r3, #13
 80051ee:	e180      	b.n	80054f2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80051f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f2:	3338      	adds	r3, #56	; 0x38
 80051f4:	3316      	adds	r3, #22
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fe f884 	bl	8003304 <ld_word>
 80051fc:	4603      	mov	r3, r0
 80051fe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005202:	2b00      	cmp	r3, #0
 8005204:	d106      	bne.n	8005214 <find_volume+0x214>
 8005206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005208:	3338      	adds	r3, #56	; 0x38
 800520a:	3324      	adds	r3, #36	; 0x24
 800520c:	4618      	mov	r0, r3
 800520e:	f7fe f891 	bl	8003334 <ld_dword>
 8005212:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005216:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005218:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800521a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005222:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005226:	789b      	ldrb	r3, [r3, #2]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d005      	beq.n	8005238 <find_volume+0x238>
 800522c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522e:	789b      	ldrb	r3, [r3, #2]
 8005230:	2b02      	cmp	r3, #2
 8005232:	d001      	beq.n	8005238 <find_volume+0x238>
 8005234:	230d      	movs	r3, #13
 8005236:	e15c      	b.n	80054f2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523a:	789b      	ldrb	r3, [r3, #2]
 800523c:	461a      	mov	r2, r3
 800523e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005240:	fb02 f303 	mul.w	r3, r2, r3
 8005244:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005248:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800524c:	b29a      	uxth	r2, r3
 800524e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005250:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005254:	895b      	ldrh	r3, [r3, #10]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d008      	beq.n	800526c <find_volume+0x26c>
 800525a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525c:	895b      	ldrh	r3, [r3, #10]
 800525e:	461a      	mov	r2, r3
 8005260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005262:	895b      	ldrh	r3, [r3, #10]
 8005264:	3b01      	subs	r3, #1
 8005266:	4013      	ands	r3, r2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <find_volume+0x270>
 800526c:	230d      	movs	r3, #13
 800526e:	e140      	b.n	80054f2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005272:	3338      	adds	r3, #56	; 0x38
 8005274:	3311      	adds	r3, #17
 8005276:	4618      	mov	r0, r3
 8005278:	f7fe f844 	bl	8003304 <ld_word>
 800527c:	4603      	mov	r3, r0
 800527e:	461a      	mov	r2, r3
 8005280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005282:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005286:	891b      	ldrh	r3, [r3, #8]
 8005288:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800528a:	8992      	ldrh	r2, [r2, #12]
 800528c:	0952      	lsrs	r2, r2, #5
 800528e:	b292      	uxth	r2, r2
 8005290:	fbb3 f1f2 	udiv	r1, r3, r2
 8005294:	fb01 f202 	mul.w	r2, r1, r2
 8005298:	1a9b      	subs	r3, r3, r2
 800529a:	b29b      	uxth	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <find_volume+0x2a8>
 80052a0:	230d      	movs	r3, #13
 80052a2:	e126      	b.n	80054f2 <find_volume+0x4f2>
 80052a4:	20002528 	.word	0x20002528

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80052a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052aa:	3338      	adds	r3, #56	; 0x38
 80052ac:	3313      	adds	r3, #19
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fe f828 	bl	8003304 <ld_word>
 80052b4:	4603      	mov	r3, r0
 80052b6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80052b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d106      	bne.n	80052cc <find_volume+0x2cc>
 80052be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c0:	3338      	adds	r3, #56	; 0x38
 80052c2:	3320      	adds	r3, #32
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7fe f835 	bl	8003334 <ld_dword>
 80052ca:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80052cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ce:	3338      	adds	r3, #56	; 0x38
 80052d0:	330e      	adds	r3, #14
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fe f816 	bl	8003304 <ld_word>
 80052d8:	4603      	mov	r3, r0
 80052da:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80052dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <find_volume+0x2e6>
 80052e2:	230d      	movs	r3, #13
 80052e4:	e105      	b.n	80054f2 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80052e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80052e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ea:	4413      	add	r3, r2
 80052ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052ee:	8911      	ldrh	r1, [r2, #8]
 80052f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052f2:	8992      	ldrh	r2, [r2, #12]
 80052f4:	0952      	lsrs	r2, r2, #5
 80052f6:	b292      	uxth	r2, r2
 80052f8:	fbb1 f2f2 	udiv	r2, r1, r2
 80052fc:	b292      	uxth	r2, r2
 80052fe:	4413      	add	r3, r2
 8005300:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005302:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005306:	429a      	cmp	r2, r3
 8005308:	d201      	bcs.n	800530e <find_volume+0x30e>
 800530a:	230d      	movs	r3, #13
 800530c:	e0f1      	b.n	80054f2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800530e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005316:	8952      	ldrh	r2, [r2, #10]
 8005318:	fbb3 f3f2 	udiv	r3, r3, r2
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <find_volume+0x328>
 8005324:	230d      	movs	r3, #13
 8005326:	e0e4      	b.n	80054f2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8005328:	2303      	movs	r3, #3
 800532a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005334:	4293      	cmp	r3, r2
 8005336:	d802      	bhi.n	800533e <find_volume+0x33e>
 8005338:	2302      	movs	r3, #2
 800533a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005344:	4293      	cmp	r3, r2
 8005346:	d802      	bhi.n	800534e <find_volume+0x34e>
 8005348:	2301      	movs	r3, #1
 800534a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	1c9a      	adds	r2, r3, #2
 8005352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005354:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8005356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005358:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800535a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800535c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800535e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005360:	441a      	add	r2, r3
 8005362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005364:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8005366:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536a:	441a      	add	r2, r3
 800536c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8005370:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005374:	2b03      	cmp	r3, #3
 8005376:	d11e      	bne.n	80053b6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537a:	3338      	adds	r3, #56	; 0x38
 800537c:	332a      	adds	r3, #42	; 0x2a
 800537e:	4618      	mov	r0, r3
 8005380:	f7fd ffc0 	bl	8003304 <ld_word>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <find_volume+0x38e>
 800538a:	230d      	movs	r3, #13
 800538c:	e0b1      	b.n	80054f2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800538e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005390:	891b      	ldrh	r3, [r3, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <find_volume+0x39a>
 8005396:	230d      	movs	r3, #13
 8005398:	e0ab      	b.n	80054f2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800539a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539c:	3338      	adds	r3, #56	; 0x38
 800539e:	332c      	adds	r3, #44	; 0x2c
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7fd ffc7 	bl	8003334 <ld_dword>
 80053a6:	4602      	mov	r2, r0
 80053a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053aa:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80053ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	647b      	str	r3, [r7, #68]	; 0x44
 80053b4:	e01f      	b.n	80053f6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80053b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b8:	891b      	ldrh	r3, [r3, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <find_volume+0x3c2>
 80053be:	230d      	movs	r3, #13
 80053c0:	e097      	b.n	80054f2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80053c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c8:	441a      	add	r2, r3
 80053ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053cc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80053ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d103      	bne.n	80053de <find_volume+0x3de>
 80053d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	e00a      	b.n	80053f4 <find_volume+0x3f4>
 80053de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e0:	69da      	ldr	r2, [r3, #28]
 80053e2:	4613      	mov	r3, r2
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	4413      	add	r3, r2
 80053e8:	085a      	lsrs	r2, r3, #1
 80053ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80053f4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80053f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f8:	6a1a      	ldr	r2, [r3, #32]
 80053fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fc:	899b      	ldrh	r3, [r3, #12]
 80053fe:	4619      	mov	r1, r3
 8005400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005402:	440b      	add	r3, r1
 8005404:	3b01      	subs	r3, #1
 8005406:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005408:	8989      	ldrh	r1, [r1, #12]
 800540a:	fbb3 f3f1 	udiv	r3, r3, r1
 800540e:	429a      	cmp	r2, r3
 8005410:	d201      	bcs.n	8005416 <find_volume+0x416>
 8005412:	230d      	movs	r3, #13
 8005414:	e06d      	b.n	80054f2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005418:	f04f 32ff 	mov.w	r2, #4294967295
 800541c:	619a      	str	r2, [r3, #24]
 800541e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005420:	699a      	ldr	r2, [r3, #24]
 8005422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005424:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8005426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005428:	2280      	movs	r2, #128	; 0x80
 800542a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800542c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005430:	2b03      	cmp	r3, #3
 8005432:	d149      	bne.n	80054c8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005436:	3338      	adds	r3, #56	; 0x38
 8005438:	3330      	adds	r3, #48	; 0x30
 800543a:	4618      	mov	r0, r3
 800543c:	f7fd ff62 	bl	8003304 <ld_word>
 8005440:	4603      	mov	r3, r0
 8005442:	2b01      	cmp	r3, #1
 8005444:	d140      	bne.n	80054c8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005448:	3301      	adds	r3, #1
 800544a:	4619      	mov	r1, r3
 800544c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800544e:	f7fe fa09 	bl	8003864 <move_window>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d137      	bne.n	80054c8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8005458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545a:	2200      	movs	r2, #0
 800545c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800545e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005460:	3338      	adds	r3, #56	; 0x38
 8005462:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005466:	4618      	mov	r0, r3
 8005468:	f7fd ff4c 	bl	8003304 <ld_word>
 800546c:	4603      	mov	r3, r0
 800546e:	461a      	mov	r2, r3
 8005470:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005474:	429a      	cmp	r2, r3
 8005476:	d127      	bne.n	80054c8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547a:	3338      	adds	r3, #56	; 0x38
 800547c:	4618      	mov	r0, r3
 800547e:	f7fd ff59 	bl	8003334 <ld_dword>
 8005482:	4603      	mov	r3, r0
 8005484:	4a1d      	ldr	r2, [pc, #116]	; (80054fc <find_volume+0x4fc>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d11e      	bne.n	80054c8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548c:	3338      	adds	r3, #56	; 0x38
 800548e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005492:	4618      	mov	r0, r3
 8005494:	f7fd ff4e 	bl	8003334 <ld_dword>
 8005498:	4603      	mov	r3, r0
 800549a:	4a19      	ldr	r2, [pc, #100]	; (8005500 <find_volume+0x500>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d113      	bne.n	80054c8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80054a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a2:	3338      	adds	r3, #56	; 0x38
 80054a4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7fd ff43 	bl	8003334 <ld_dword>
 80054ae:	4602      	mov	r2, r0
 80054b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80054b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b6:	3338      	adds	r3, #56	; 0x38
 80054b8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80054bc:	4618      	mov	r0, r3
 80054be:	f7fd ff39 	bl	8003334 <ld_dword>
 80054c2:	4602      	mov	r2, r0
 80054c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80054c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ca:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80054ce:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80054d0:	4b0c      	ldr	r3, [pc, #48]	; (8005504 <find_volume+0x504>)
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	3301      	adds	r3, #1
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	4b0a      	ldr	r3, [pc, #40]	; (8005504 <find_volume+0x504>)
 80054da:	801a      	strh	r2, [r3, #0]
 80054dc:	4b09      	ldr	r3, [pc, #36]	; (8005504 <find_volume+0x504>)
 80054de:	881a      	ldrh	r2, [r3, #0]
 80054e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80054e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e6:	4a08      	ldr	r2, [pc, #32]	; (8005508 <find_volume+0x508>)
 80054e8:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80054ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054ec:	f7fe f952 	bl	8003794 <clear_lock>
#endif
	return FR_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3758      	adds	r7, #88	; 0x58
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	41615252 	.word	0x41615252
 8005500:	61417272 	.word	0x61417272
 8005504:	2000252c 	.word	0x2000252c
 8005508:	20002550 	.word	0x20002550

0800550c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005516:	2309      	movs	r3, #9
 8005518:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d01c      	beq.n	800555a <validate+0x4e>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d018      	beq.n	800555a <validate+0x4e>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d013      	beq.n	800555a <validate+0x4e>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	889a      	ldrh	r2, [r3, #4]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	88db      	ldrh	r3, [r3, #6]
 800553c:	429a      	cmp	r2, r3
 800553e:	d10c      	bne.n	800555a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	785b      	ldrb	r3, [r3, #1]
 8005546:	4618      	mov	r0, r3
 8005548:	f7fd fe3e 	bl	80031c8 <disk_status>
 800554c:	4603      	mov	r3, r0
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <validate+0x4e>
			res = FR_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800555a:	7bfb      	ldrb	r3, [r7, #15]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d102      	bne.n	8005566 <validate+0x5a>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	e000      	b.n	8005568 <validate+0x5c>
 8005566:	2300      	movs	r3, #0
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	6013      	str	r3, [r2, #0]
	return res;
 800556c:	7bfb      	ldrb	r3, [r7, #15]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
	...

08005578 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b088      	sub	sp, #32
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	4613      	mov	r3, r2
 8005584:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800558a:	f107 0310 	add.w	r3, r7, #16
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff fc9c 	bl	8004ecc <get_ldnumber>
 8005594:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	2b00      	cmp	r3, #0
 800559a:	da01      	bge.n	80055a0 <f_mount+0x28>
 800559c:	230b      	movs	r3, #11
 800559e:	e02b      	b.n	80055f8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80055a0:	4a17      	ldr	r2, [pc, #92]	; (8005600 <f_mount+0x88>)
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055a8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d005      	beq.n	80055bc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80055b0:	69b8      	ldr	r0, [r7, #24]
 80055b2:	f7fe f8ef 	bl	8003794 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	2200      	movs	r2, #0
 80055ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	490d      	ldr	r1, [pc, #52]	; (8005600 <f_mount+0x88>)
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <f_mount+0x66>
 80055d8:	79fb      	ldrb	r3, [r7, #7]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d001      	beq.n	80055e2 <f_mount+0x6a>
 80055de:	2300      	movs	r3, #0
 80055e0:	e00a      	b.n	80055f8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80055e2:	f107 010c 	add.w	r1, r7, #12
 80055e6:	f107 0308 	add.w	r3, r7, #8
 80055ea:	2200      	movs	r2, #0
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7ff fd07 	bl	8005000 <find_volume>
 80055f2:	4603      	mov	r3, r0
 80055f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80055f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3720      	adds	r7, #32
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	20002528 	.word	0x20002528

08005604 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b09a      	sub	sp, #104	; 0x68
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	4613      	mov	r3, r2
 8005610:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <f_open+0x18>
 8005618:	2309      	movs	r3, #9
 800561a:	e1bb      	b.n	8005994 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800561c:	79fb      	ldrb	r3, [r7, #7]
 800561e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005622:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005624:	79fa      	ldrb	r2, [r7, #7]
 8005626:	f107 0114 	add.w	r1, r7, #20
 800562a:	f107 0308 	add.w	r3, r7, #8
 800562e:	4618      	mov	r0, r3
 8005630:	f7ff fce6 	bl	8005000 <find_volume>
 8005634:	4603      	mov	r3, r0
 8005636:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800563a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800563e:	2b00      	cmp	r3, #0
 8005640:	f040 819f 	bne.w	8005982 <f_open+0x37e>
		dj.obj.fs = fs;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	f107 0318 	add.w	r3, r7, #24
 800564e:	4611      	mov	r1, r2
 8005650:	4618      	mov	r0, r3
 8005652:	f7ff fbc5 	bl	8004de0 <follow_path>
 8005656:	4603      	mov	r3, r0
 8005658:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800565c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005660:	2b00      	cmp	r3, #0
 8005662:	d11a      	bne.n	800569a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005664:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005668:	b25b      	sxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	da03      	bge.n	8005676 <f_open+0x72>
				res = FR_INVALID_NAME;
 800566e:	2306      	movs	r3, #6
 8005670:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005674:	e011      	b.n	800569a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005676:	79fb      	ldrb	r3, [r7, #7]
 8005678:	f023 0301 	bic.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	bf14      	ite	ne
 8005680:	2301      	movne	r3, #1
 8005682:	2300      	moveq	r3, #0
 8005684:	b2db      	uxtb	r3, r3
 8005686:	461a      	mov	r2, r3
 8005688:	f107 0318 	add.w	r3, r7, #24
 800568c:	4611      	mov	r1, r2
 800568e:	4618      	mov	r0, r3
 8005690:	f7fd ff38 	bl	8003504 <chk_lock>
 8005694:	4603      	mov	r3, r0
 8005696:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	f003 031c 	and.w	r3, r3, #28
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d07f      	beq.n	80057a4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80056a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d017      	beq.n	80056dc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80056ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	d10e      	bne.n	80056d2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80056b4:	f7fd ff82 	bl	80035bc <enq_lock>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d006      	beq.n	80056cc <f_open+0xc8>
 80056be:	f107 0318 	add.w	r3, r7, #24
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7ff f8dc 	bl	8004880 <dir_register>
 80056c8:	4603      	mov	r3, r0
 80056ca:	e000      	b.n	80056ce <f_open+0xca>
 80056cc:	2312      	movs	r3, #18
 80056ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80056d2:	79fb      	ldrb	r3, [r7, #7]
 80056d4:	f043 0308 	orr.w	r3, r3, #8
 80056d8:	71fb      	strb	r3, [r7, #7]
 80056da:	e010      	b.n	80056fe <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80056dc:	7fbb      	ldrb	r3, [r7, #30]
 80056de:	f003 0311 	and.w	r3, r3, #17
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <f_open+0xea>
					res = FR_DENIED;
 80056e6:	2307      	movs	r3, #7
 80056e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80056ec:	e007      	b.n	80056fe <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80056ee:	79fb      	ldrb	r3, [r7, #7]
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <f_open+0xfa>
 80056f8:	2308      	movs	r3, #8
 80056fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80056fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005702:	2b00      	cmp	r3, #0
 8005704:	d168      	bne.n	80057d8 <f_open+0x1d4>
 8005706:	79fb      	ldrb	r3, [r7, #7]
 8005708:	f003 0308 	and.w	r3, r3, #8
 800570c:	2b00      	cmp	r3, #0
 800570e:	d063      	beq.n	80057d8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8005710:	f7fd fcfa 	bl	8003108 <get_fattime>
 8005714:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005718:	330e      	adds	r3, #14
 800571a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800571c:	4618      	mov	r0, r3
 800571e:	f7fd fe47 	bl	80033b0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005724:	3316      	adds	r3, #22
 8005726:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005728:	4618      	mov	r0, r3
 800572a:	f7fd fe41 	bl	80033b0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800572e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005730:	330b      	adds	r3, #11
 8005732:	2220      	movs	r2, #32
 8005734:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800573a:	4611      	mov	r1, r2
 800573c:	4618      	mov	r0, r3
 800573e:	f7fe fe17 	bl	8004370 <ld_clust>
 8005742:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005748:	2200      	movs	r2, #0
 800574a:	4618      	mov	r0, r3
 800574c:	f7fe fe2f 	bl	80043ae <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005752:	331c      	adds	r3, #28
 8005754:	2100      	movs	r1, #0
 8005756:	4618      	mov	r0, r3
 8005758:	f7fd fe2a 	bl	80033b0 <st_dword>
					fs->wflag = 1;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	2201      	movs	r2, #1
 8005760:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005764:	2b00      	cmp	r3, #0
 8005766:	d037      	beq.n	80057d8 <f_open+0x1d4>
						dw = fs->winsect;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800576e:	f107 0318 	add.w	r3, r7, #24
 8005772:	2200      	movs	r2, #0
 8005774:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005776:	4618      	mov	r0, r3
 8005778:	f7fe fb1f 	bl	8003dba <remove_chain>
 800577c:	4603      	mov	r3, r0
 800577e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8005782:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005786:	2b00      	cmp	r3, #0
 8005788:	d126      	bne.n	80057d8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800578e:	4618      	mov	r0, r3
 8005790:	f7fe f868 	bl	8003864 <move_window>
 8005794:	4603      	mov	r3, r0
 8005796:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800579e:	3a01      	subs	r2, #1
 80057a0:	615a      	str	r2, [r3, #20]
 80057a2:	e019      	b.n	80057d8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80057a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d115      	bne.n	80057d8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80057ac:	7fbb      	ldrb	r3, [r7, #30]
 80057ae:	f003 0310 	and.w	r3, r3, #16
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <f_open+0x1ba>
					res = FR_NO_FILE;
 80057b6:	2304      	movs	r3, #4
 80057b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80057bc:	e00c      	b.n	80057d8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80057be:	79fb      	ldrb	r3, [r7, #7]
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d007      	beq.n	80057d8 <f_open+0x1d4>
 80057c8:	7fbb      	ldrb	r3, [r7, #30]
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d002      	beq.n	80057d8 <f_open+0x1d4>
						res = FR_DENIED;
 80057d2:	2307      	movs	r3, #7
 80057d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80057d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d128      	bne.n	8005832 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80057e0:	79fb      	ldrb	r3, [r7, #7]
 80057e2:	f003 0308 	and.w	r3, r3, #8
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80057ea:	79fb      	ldrb	r3, [r7, #7]
 80057ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057f0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80057fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005800:	79fb      	ldrb	r3, [r7, #7]
 8005802:	f023 0301 	bic.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	bf14      	ite	ne
 800580a:	2301      	movne	r3, #1
 800580c:	2300      	moveq	r3, #0
 800580e:	b2db      	uxtb	r3, r3
 8005810:	461a      	mov	r2, r3
 8005812:	f107 0318 	add.w	r3, r7, #24
 8005816:	4611      	mov	r1, r2
 8005818:	4618      	mov	r0, r3
 800581a:	f7fd fef1 	bl	8003600 <inc_lock>
 800581e:	4602      	mov	r2, r0
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d102      	bne.n	8005832 <f_open+0x22e>
 800582c:	2302      	movs	r3, #2
 800582e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005832:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005836:	2b00      	cmp	r3, #0
 8005838:	f040 80a3 	bne.w	8005982 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005840:	4611      	mov	r1, r2
 8005842:	4618      	mov	r0, r3
 8005844:	f7fe fd94 	bl	8004370 <ld_clust>
 8005848:	4602      	mov	r2, r0
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800584e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005850:	331c      	adds	r3, #28
 8005852:	4618      	mov	r0, r3
 8005854:	f7fd fd6e 	bl	8003334 <ld_dword>
 8005858:	4602      	mov	r2, r0
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	88da      	ldrh	r2, [r3, #6]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	79fa      	ldrb	r2, [r7, #7]
 8005876:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3330      	adds	r3, #48	; 0x30
 800588e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005892:	2100      	movs	r1, #0
 8005894:	4618      	mov	r0, r3
 8005896:	f7fd fdd8 	bl	800344a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800589a:	79fb      	ldrb	r3, [r7, #7]
 800589c:	f003 0320 	and.w	r3, r3, #32
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d06e      	beq.n	8005982 <f_open+0x37e>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d06a      	beq.n	8005982 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	895b      	ldrh	r3, [r3, #10]
 80058b8:	461a      	mov	r2, r3
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	899b      	ldrh	r3, [r3, #12]
 80058be:	fb02 f303 	mul.w	r3, r2, r3
 80058c2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058d0:	e016      	b.n	8005900 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fe f881 	bl	80039de <get_fat>
 80058dc:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80058de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d802      	bhi.n	80058ea <f_open+0x2e6>
 80058e4:	2302      	movs	r3, #2
 80058e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80058ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f0:	d102      	bne.n	80058f8 <f_open+0x2f4>
 80058f2:	2301      	movs	r3, #1
 80058f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80058f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80058fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005900:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005904:	2b00      	cmp	r3, #0
 8005906:	d103      	bne.n	8005910 <f_open+0x30c>
 8005908:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800590a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800590c:	429a      	cmp	r2, r3
 800590e:	d8e0      	bhi.n	80058d2 <f_open+0x2ce>
				}
				fp->clust = clst;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005914:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005916:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800591a:	2b00      	cmp	r3, #0
 800591c:	d131      	bne.n	8005982 <f_open+0x37e>
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	899b      	ldrh	r3, [r3, #12]
 8005922:	461a      	mov	r2, r3
 8005924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005926:	fbb3 f1f2 	udiv	r1, r3, r2
 800592a:	fb01 f202 	mul.w	r2, r1, r2
 800592e:	1a9b      	subs	r3, r3, r2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d026      	beq.n	8005982 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005938:	4618      	mov	r0, r3
 800593a:	f7fe f831 	bl	80039a0 <clust2sect>
 800593e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005942:	2b00      	cmp	r3, #0
 8005944:	d103      	bne.n	800594e <f_open+0x34a>
						res = FR_INT_ERR;
 8005946:	2302      	movs	r3, #2
 8005948:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800594c:	e019      	b.n	8005982 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	899b      	ldrh	r3, [r3, #12]
 8005952:	461a      	mov	r2, r3
 8005954:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005956:	fbb3 f2f2 	udiv	r2, r3, r2
 800595a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800595c:	441a      	add	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	7858      	ldrb	r0, [r3, #1]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6a1a      	ldr	r2, [r3, #32]
 8005970:	2301      	movs	r3, #1
 8005972:	f7fd fc69 	bl	8003248 <disk_read>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <f_open+0x37e>
 800597c:	2301      	movs	r3, #1
 800597e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005982:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005986:	2b00      	cmp	r3, #0
 8005988:	d002      	beq.n	8005990 <f_open+0x38c>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005990:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005994:	4618      	mov	r0, r3
 8005996:	3768      	adds	r7, #104	; 0x68
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b08c      	sub	sp, #48	; 0x30
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
 80059a8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2200      	movs	r2, #0
 80059b2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f107 0210 	add.w	r2, r7, #16
 80059ba:	4611      	mov	r1, r2
 80059bc:	4618      	mov	r0, r3
 80059be:	f7ff fda5 	bl	800550c <validate>
 80059c2:	4603      	mov	r3, r0
 80059c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80059c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d107      	bne.n	80059e0 <f_write+0x44>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	7d5b      	ldrb	r3, [r3, #21]
 80059d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80059d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <f_write+0x4a>
 80059e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80059e4:	e16a      	b.n	8005cbc <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	7d1b      	ldrb	r3, [r3, #20]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <f_write+0x5a>
 80059f2:	2307      	movs	r3, #7
 80059f4:	e162      	b.n	8005cbc <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	699a      	ldr	r2, [r3, #24]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	441a      	add	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	f080 814c 	bcs.w	8005ca0 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	43db      	mvns	r3, r3
 8005a0e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005a10:	e146      	b.n	8005ca0 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	8992      	ldrh	r2, [r2, #12]
 8005a1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a1e:	fb01 f202 	mul.w	r2, r1, r2
 8005a22:	1a9b      	subs	r3, r3, r2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f040 80f1 	bne.w	8005c0c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	8992      	ldrh	r2, [r2, #12]
 8005a32:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	8952      	ldrh	r2, [r2, #10]
 8005a3a:	3a01      	subs	r2, #1
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d143      	bne.n	8005ace <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10c      	bne.n	8005a68 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d11a      	bne.n	8005a90 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fe fa10 	bl	8003e84 <create_chain>
 8005a64:	62b8      	str	r0, [r7, #40]	; 0x28
 8005a66:	e013      	b.n	8005a90 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d007      	beq.n	8005a80 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	4619      	mov	r1, r3
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f7fe fa9c 	bl	8003fb4 <clmt_clust>
 8005a7c:	62b8      	str	r0, [r7, #40]	; 0x28
 8005a7e:	e007      	b.n	8005a90 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	4619      	mov	r1, r3
 8005a88:	4610      	mov	r0, r2
 8005a8a:	f7fe f9fb 	bl	8003e84 <create_chain>
 8005a8e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 8109 	beq.w	8005caa <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d104      	bne.n	8005aa8 <f_write+0x10c>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	755a      	strb	r2, [r3, #21]
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	e109      	b.n	8005cbc <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aae:	d104      	bne.n	8005aba <f_write+0x11e>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	755a      	strb	r2, [r3, #21]
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e100      	b.n	8005cbc <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005abe:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d102      	bne.n	8005ace <f_write+0x132>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005acc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	7d1b      	ldrb	r3, [r3, #20]
 8005ad2:	b25b      	sxtb	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	da18      	bge.n	8005b0a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	7858      	ldrb	r0, [r3, #1]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6a1a      	ldr	r2, [r3, #32]
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	f7fd fbce 	bl	8003288 <disk_write>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d004      	beq.n	8005afc <f_write+0x160>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2201      	movs	r2, #1
 8005af6:	755a      	strb	r2, [r3, #21]
 8005af8:	2301      	movs	r3, #1
 8005afa:	e0df      	b.n	8005cbc <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	7d1b      	ldrb	r3, [r3, #20]
 8005b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	4619      	mov	r1, r3
 8005b12:	4610      	mov	r0, r2
 8005b14:	f7fd ff44 	bl	80039a0 <clust2sect>
 8005b18:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d104      	bne.n	8005b2a <f_write+0x18e>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2202      	movs	r2, #2
 8005b24:	755a      	strb	r2, [r3, #21]
 8005b26:	2302      	movs	r3, #2
 8005b28:	e0c8      	b.n	8005cbc <f_write+0x320>
			sect += csect;
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	4413      	add	r3, r2
 8005b30:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	899b      	ldrh	r3, [r3, #12]
 8005b36:	461a      	mov	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b3e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d043      	beq.n	8005bce <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005b46:	69ba      	ldr	r2, [r7, #24]
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	8952      	ldrh	r2, [r2, #10]
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d905      	bls.n	8005b60 <f_write+0x1c4>
					cc = fs->csize - csect;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	895b      	ldrh	r3, [r3, #10]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	7858      	ldrb	r0, [r3, #1]
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	69f9      	ldr	r1, [r7, #28]
 8005b6a:	f7fd fb8d 	bl	8003288 <disk_write>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d004      	beq.n	8005b7e <f_write+0x1e2>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2201      	movs	r2, #1
 8005b78:	755a      	strb	r2, [r3, #21]
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e09e      	b.n	8005cbc <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a1a      	ldr	r2, [r3, #32]
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	6a3a      	ldr	r2, [r7, #32]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d918      	bls.n	8005bbe <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6a1a      	ldr	r2, [r3, #32]
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	8992      	ldrh	r2, [r2, #12]
 8005b9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	18d1      	adds	r1, r2, r3
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	899b      	ldrh	r3, [r3, #12]
 8005baa:	461a      	mov	r2, r3
 8005bac:	f7fd fc2c 	bl	8003408 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	7d1b      	ldrb	r3, [r3, #20]
 8005bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	899b      	ldrh	r3, [r3, #12]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	fb02 f303 	mul.w	r3, r2, r3
 8005bca:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005bcc:	e04b      	b.n	8005c66 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d016      	beq.n	8005c06 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	699a      	ldr	r2, [r3, #24]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d210      	bcs.n	8005c06 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	7858      	ldrb	r0, [r3, #1]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005bee:	2301      	movs	r3, #1
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	f7fd fb29 	bl	8003248 <disk_read>
 8005bf6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d004      	beq.n	8005c06 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	755a      	strb	r2, [r3, #21]
 8005c02:	2301      	movs	r3, #1
 8005c04:	e05a      	b.n	8005cbc <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	899b      	ldrh	r3, [r3, #12]
 8005c10:	4618      	mov	r0, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	8992      	ldrh	r2, [r2, #12]
 8005c1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c1e:	fb01 f202 	mul.w	r2, r1, r2
 8005c22:	1a9b      	subs	r3, r3, r2
 8005c24:	1ac3      	subs	r3, r0, r3
 8005c26:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d901      	bls.n	8005c34 <f_write+0x298>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	8992      	ldrh	r2, [r2, #12]
 8005c42:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c46:	fb00 f202 	mul.w	r2, r0, r2
 8005c4a:	1a9b      	subs	r3, r3, r2
 8005c4c:	440b      	add	r3, r1
 8005c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c50:	69f9      	ldr	r1, [r7, #28]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fd fbd8 	bl	8003408 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	7d1b      	ldrb	r3, [r3, #20]
 8005c5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005c66:	69fa      	ldr	r2, [r7, #28]
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	4413      	add	r3, r2
 8005c6c:	61fb      	str	r3, [r7, #28]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	699a      	ldr	r2, [r3, #24]
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	441a      	add	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	619a      	str	r2, [r3, #24]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	bf38      	it	cc
 8005c86:	461a      	movcc	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	60da      	str	r2, [r3, #12]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	441a      	add	r2, r3
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f47f aeb5 	bne.w	8005a12 <f_write+0x76>
 8005ca8:	e000      	b.n	8005cac <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005caa:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	7d1b      	ldrb	r3, [r3, #20]
 8005cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3730      	adds	r7, #48	; 0x30
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f107 0208 	add.w	r2, r7, #8
 8005cd2:	4611      	mov	r1, r2
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7ff fc19 	bl	800550c <validate>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005cde:	7dfb      	ldrb	r3, [r7, #23]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d168      	bne.n	8005db6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	7d1b      	ldrb	r3, [r3, #20]
 8005ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d062      	beq.n	8005db6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	7d1b      	ldrb	r3, [r3, #20]
 8005cf4:	b25b      	sxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	da15      	bge.n	8005d26 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	7858      	ldrb	r0, [r3, #1]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a1a      	ldr	r2, [r3, #32]
 8005d08:	2301      	movs	r3, #1
 8005d0a:	f7fd fabd 	bl	8003288 <disk_write>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <f_sync+0x54>
 8005d14:	2301      	movs	r3, #1
 8005d16:	e04f      	b.n	8005db8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	7d1b      	ldrb	r3, [r3, #20]
 8005d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005d26:	f7fd f9ef 	bl	8003108 <get_fattime>
 8005d2a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	4619      	mov	r1, r3
 8005d34:	4610      	mov	r0, r2
 8005d36:	f7fd fd95 	bl	8003864 <move_window>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005d3e:	7dfb      	ldrb	r3, [r7, #23]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d138      	bne.n	8005db6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d48:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	330b      	adds	r3, #11
 8005d4e:	781a      	ldrb	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	330b      	adds	r3, #11
 8005d54:	f042 0220 	orr.w	r2, r2, #32
 8005d58:	b2d2      	uxtb	r2, r2
 8005d5a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6818      	ldr	r0, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	461a      	mov	r2, r3
 8005d66:	68f9      	ldr	r1, [r7, #12]
 8005d68:	f7fe fb21 	bl	80043ae <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f103 021c 	add.w	r2, r3, #28
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	4619      	mov	r1, r3
 8005d78:	4610      	mov	r0, r2
 8005d7a:	f7fd fb19 	bl	80033b0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	3316      	adds	r3, #22
 8005d82:	6939      	ldr	r1, [r7, #16]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7fd fb13 	bl	80033b0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	3312      	adds	r3, #18
 8005d8e:	2100      	movs	r1, #0
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7fd faf2 	bl	800337a <st_word>
					fs->wflag = 1;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fd fd8e 	bl	80038c0 <sync_fs>
 8005da4:	4603      	mov	r3, r0
 8005da6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	7d1b      	ldrb	r3, [r3, #20]
 8005dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3718      	adds	r7, #24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7ff ff7b 	bl	8005cc4 <f_sync>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005dd2:	7bfb      	ldrb	r3, [r7, #15]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d118      	bne.n	8005e0a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f107 0208 	add.w	r2, r7, #8
 8005dde:	4611      	mov	r1, r2
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7ff fb93 	bl	800550c <validate>
 8005de6:	4603      	mov	r3, r0
 8005de8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10c      	bne.n	8005e0a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fd fc91 	bl	800371c <dec_lock>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d102      	bne.n	8005e0a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b092      	sub	sp, #72	; 0x48
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8005e20:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005e24:	f107 030c 	add.w	r3, r7, #12
 8005e28:	2200      	movs	r2, #0
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7ff f8e8 	bl	8005000 <find_volume>
 8005e30:	4603      	mov	r3, r0
 8005e32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8005e36:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f040 8099 	bne.w	8005f72 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8005e40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8005e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e48:	699a      	ldr	r2, [r3, #24]
 8005e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	3b02      	subs	r3, #2
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d804      	bhi.n	8005e5e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8005e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e56:	699a      	ldr	r2, [r3, #24]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	e089      	b.n	8005f72 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8005e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d128      	bne.n	8005ebc <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e70:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8005e72:	f107 0314 	add.w	r3, r7, #20
 8005e76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7fd fdb0 	bl	80039de <get_fat>
 8005e7e:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8005e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e86:	d103      	bne.n	8005e90 <f_getfree+0x7c>
 8005e88:	2301      	movs	r3, #1
 8005e8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005e8e:	e063      	b.n	8005f58 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8005e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d103      	bne.n	8005e9e <f_getfree+0x8a>
 8005e96:	2302      	movs	r3, #2
 8005e98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005e9c:	e05c      	b.n	8005f58 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8005e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d102      	bne.n	8005eaa <f_getfree+0x96>
 8005ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8005eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eac:	3301      	adds	r3, #1
 8005eae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d3db      	bcc.n	8005e72 <f_getfree+0x5e>
 8005eba:	e04d      	b.n	8005f58 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8005ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebe:	69db      	ldr	r3, [r3, #28]
 8005ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec6:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	637b      	str	r3, [r7, #52]	; 0x34
 8005ecc:	2300      	movs	r3, #0
 8005ece:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8005ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d113      	bne.n	8005efe <f_getfree+0xea>
							res = move_window(fs, sect++);
 8005ed6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eda:	1c5a      	adds	r2, r3, #1
 8005edc:	63ba      	str	r2, [r7, #56]	; 0x38
 8005ede:	4619      	mov	r1, r3
 8005ee0:	f7fd fcc0 	bl	8003864 <move_window>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8005eea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d131      	bne.n	8005f56 <f_getfree+0x142>
							p = fs->win;
 8005ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef4:	3338      	adds	r3, #56	; 0x38
 8005ef6:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8005ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efa:	899b      	ldrh	r3, [r3, #12]
 8005efc:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8005efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d10f      	bne.n	8005f26 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8005f06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f08:	f7fd f9fc 	bl	8003304 <ld_word>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d102      	bne.n	8005f18 <f_getfree+0x104>
 8005f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f14:	3301      	adds	r3, #1
 8005f16:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8005f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1a:	3302      	adds	r3, #2
 8005f1c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f20:	3b02      	subs	r3, #2
 8005f22:	637b      	str	r3, [r7, #52]	; 0x34
 8005f24:	e010      	b.n	8005f48 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8005f26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f28:	f7fd fa04 	bl	8003334 <ld_dword>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d102      	bne.n	8005f3c <f_getfree+0x128>
 8005f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f38:	3301      	adds	r3, #1
 8005f3a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	3304      	adds	r3, #4
 8005f40:	633b      	str	r3, [r7, #48]	; 0x30
 8005f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f44:	3b04      	subs	r3, #4
 8005f46:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8005f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1bd      	bne.n	8005ed0 <f_getfree+0xbc>
 8005f54:	e000      	b.n	8005f58 <f_getfree+0x144>
							if (res != FR_OK) break;
 8005f56:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f5c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8005f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f62:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8005f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f66:	791a      	ldrb	r2, [r3, #4]
 8005f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6a:	f042 0201 	orr.w	r2, r2, #1
 8005f6e:	b2d2      	uxtb	r2, r2
 8005f70:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8005f72:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3748      	adds	r7, #72	; 0x48
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	460b      	mov	r3, r1
 8005f88:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8005f8a:	78fb      	ldrb	r3, [r7, #3]
 8005f8c:	2b0a      	cmp	r3, #10
 8005f8e:	d103      	bne.n	8005f98 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8005f90:	210d      	movs	r1, #13
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff fff3 	bl	8005f7e <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	db25      	blt.n	8005ff0 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	60fa      	str	r2, [r7, #12]
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	4413      	add	r3, r2
 8005fae:	78fa      	ldrb	r2, [r7, #3]
 8005fb0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2b3c      	cmp	r3, #60	; 0x3c
 8005fb6:	dd12      	ble.n	8005fde <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6818      	ldr	r0, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f103 010c 	add.w	r1, r3, #12
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	f107 0308 	add.w	r3, r7, #8
 8005fc8:	f7ff fce8 	bl	800599c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d101      	bne.n	8005fd8 <putc_bfd+0x5a>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	e001      	b.n	8005fdc <putc_bfd+0x5e>
 8005fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fdc:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	609a      	str	r2, [r3, #8]
 8005fee:	e000      	b.n	8005ff2 <putc_bfd+0x74>
	if (i < 0) return;
 8005ff0:	bf00      	nop
}
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	db16      	blt.n	8006036 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6818      	ldr	r0, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f103 010c 	add.w	r1, r3, #12
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	461a      	mov	r2, r3
 8006018:	f107 030c 	add.w	r3, r7, #12
 800601c:	f7ff fcbe 	bl	800599c <f_write>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d107      	bne.n	8006036 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	4293      	cmp	r3, r2
 800602e:	d102      	bne.n	8006036 <putc_flush+0x3e>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	e001      	b.n	800603a <putc_flush+0x42>
	return EOF;
 8006036:	f04f 33ff 	mov.w	r3, #4294967295
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	605a      	str	r2, [r3, #4]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	609a      	str	r2, [r3, #8]
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b096      	sub	sp, #88	; 0x58
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8006076:	f107 030c 	add.w	r3, r7, #12
 800607a:	6839      	ldr	r1, [r7, #0]
 800607c:	4618      	mov	r0, r3
 800607e:	f7ff ffe0 	bl	8006042 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8006082:	e009      	b.n	8006098 <f_puts+0x2c>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	607a      	str	r2, [r7, #4]
 800608a:	781a      	ldrb	r2, [r3, #0]
 800608c:	f107 030c 	add.w	r3, r7, #12
 8006090:	4611      	mov	r1, r2
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff ff73 	bl	8005f7e <putc_bfd>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1f1      	bne.n	8006084 <f_puts+0x18>
	return putc_flush(&pb);
 80060a0:	f107 030c 	add.w	r3, r7, #12
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7ff ffa7 	bl	8005ff8 <putc_flush>
 80060aa:	4603      	mov	r3, r0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3758      	adds	r7, #88	; 0x58
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	4613      	mov	r3, r2
 80060c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80060c2:	2301      	movs	r3, #1
 80060c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80060c6:	2300      	movs	r3, #0
 80060c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80060ca:	4b1f      	ldr	r3, [pc, #124]	; (8006148 <FATFS_LinkDriverEx+0x94>)
 80060cc:	7a5b      	ldrb	r3, [r3, #9]
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d131      	bne.n	8006138 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80060d4:	4b1c      	ldr	r3, [pc, #112]	; (8006148 <FATFS_LinkDriverEx+0x94>)
 80060d6:	7a5b      	ldrb	r3, [r3, #9]
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	461a      	mov	r2, r3
 80060dc:	4b1a      	ldr	r3, [pc, #104]	; (8006148 <FATFS_LinkDriverEx+0x94>)
 80060de:	2100      	movs	r1, #0
 80060e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80060e2:	4b19      	ldr	r3, [pc, #100]	; (8006148 <FATFS_LinkDriverEx+0x94>)
 80060e4:	7a5b      	ldrb	r3, [r3, #9]
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	4a17      	ldr	r2, [pc, #92]	; (8006148 <FATFS_LinkDriverEx+0x94>)
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80060f2:	4b15      	ldr	r3, [pc, #84]	; (8006148 <FATFS_LinkDriverEx+0x94>)
 80060f4:	7a5b      	ldrb	r3, [r3, #9]
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	461a      	mov	r2, r3
 80060fa:	4b13      	ldr	r3, [pc, #76]	; (8006148 <FATFS_LinkDriverEx+0x94>)
 80060fc:	4413      	add	r3, r2
 80060fe:	79fa      	ldrb	r2, [r7, #7]
 8006100:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006102:	4b11      	ldr	r3, [pc, #68]	; (8006148 <FATFS_LinkDriverEx+0x94>)
 8006104:	7a5b      	ldrb	r3, [r3, #9]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	b2d1      	uxtb	r1, r2
 800610c:	4a0e      	ldr	r2, [pc, #56]	; (8006148 <FATFS_LinkDriverEx+0x94>)
 800610e:	7251      	strb	r1, [r2, #9]
 8006110:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006112:	7dbb      	ldrb	r3, [r7, #22]
 8006114:	3330      	adds	r3, #48	; 0x30
 8006116:	b2da      	uxtb	r2, r3
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	3301      	adds	r3, #1
 8006120:	223a      	movs	r2, #58	; 0x3a
 8006122:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	3302      	adds	r3, #2
 8006128:	222f      	movs	r2, #47	; 0x2f
 800612a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	3303      	adds	r3, #3
 8006130:	2200      	movs	r2, #0
 8006132:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006134:	2300      	movs	r3, #0
 8006136:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006138:	7dfb      	ldrb	r3, [r7, #23]
}
 800613a:	4618      	mov	r0, r3
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	20002750 	.word	0x20002750

0800614c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006156:	2200      	movs	r2, #0
 8006158:	6839      	ldr	r1, [r7, #0]
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7ff ffaa 	bl	80060b4 <FATFS_LinkDriverEx>
 8006160:	4603      	mov	r3, r0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
	...

0800616c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	4603      	mov	r3, r0
 8006174:	6039      	str	r1, [r7, #0]
 8006176:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006178:	88fb      	ldrh	r3, [r7, #6]
 800617a:	2b7f      	cmp	r3, #127	; 0x7f
 800617c:	d802      	bhi.n	8006184 <ff_convert+0x18>
		c = chr;
 800617e:	88fb      	ldrh	r3, [r7, #6]
 8006180:	81fb      	strh	r3, [r7, #14]
 8006182:	e025      	b.n	80061d0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00b      	beq.n	80061a2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800618a:	88fb      	ldrh	r3, [r7, #6]
 800618c:	2bff      	cmp	r3, #255	; 0xff
 800618e:	d805      	bhi.n	800619c <ff_convert+0x30>
 8006190:	88fb      	ldrh	r3, [r7, #6]
 8006192:	3b80      	subs	r3, #128	; 0x80
 8006194:	4a12      	ldr	r2, [pc, #72]	; (80061e0 <ff_convert+0x74>)
 8006196:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800619a:	e000      	b.n	800619e <ff_convert+0x32>
 800619c:	2300      	movs	r3, #0
 800619e:	81fb      	strh	r3, [r7, #14]
 80061a0:	e016      	b.n	80061d0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80061a2:	2300      	movs	r3, #0
 80061a4:	81fb      	strh	r3, [r7, #14]
 80061a6:	e009      	b.n	80061bc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80061a8:	89fb      	ldrh	r3, [r7, #14]
 80061aa:	4a0d      	ldr	r2, [pc, #52]	; (80061e0 <ff_convert+0x74>)
 80061ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061b0:	88fa      	ldrh	r2, [r7, #6]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d006      	beq.n	80061c4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80061b6:	89fb      	ldrh	r3, [r7, #14]
 80061b8:	3301      	adds	r3, #1
 80061ba:	81fb      	strh	r3, [r7, #14]
 80061bc:	89fb      	ldrh	r3, [r7, #14]
 80061be:	2b7f      	cmp	r3, #127	; 0x7f
 80061c0:	d9f2      	bls.n	80061a8 <ff_convert+0x3c>
 80061c2:	e000      	b.n	80061c6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80061c4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80061c6:	89fb      	ldrh	r3, [r7, #14]
 80061c8:	3380      	adds	r3, #128	; 0x80
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80061d0:	89fb      	ldrh	r3, [r7, #14]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	08006474 	.word	0x08006474

080061e4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b087      	sub	sp, #28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	4603      	mov	r3, r0
 80061ec:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80061ee:	88fb      	ldrh	r3, [r7, #6]
 80061f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061f4:	d201      	bcs.n	80061fa <ff_wtoupper+0x16>
 80061f6:	4b3e      	ldr	r3, [pc, #248]	; (80062f0 <ff_wtoupper+0x10c>)
 80061f8:	e000      	b.n	80061fc <ff_wtoupper+0x18>
 80061fa:	4b3e      	ldr	r3, [pc, #248]	; (80062f4 <ff_wtoupper+0x110>)
 80061fc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	1c9a      	adds	r2, r3, #2
 8006202:	617a      	str	r2, [r7, #20]
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8006208:	8a7b      	ldrh	r3, [r7, #18]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d068      	beq.n	80062e0 <ff_wtoupper+0xfc>
 800620e:	88fa      	ldrh	r2, [r7, #6]
 8006210:	8a7b      	ldrh	r3, [r7, #18]
 8006212:	429a      	cmp	r2, r3
 8006214:	d364      	bcc.n	80062e0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	1c9a      	adds	r2, r3, #2
 800621a:	617a      	str	r2, [r7, #20]
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	823b      	strh	r3, [r7, #16]
 8006220:	8a3b      	ldrh	r3, [r7, #16]
 8006222:	0a1b      	lsrs	r3, r3, #8
 8006224:	81fb      	strh	r3, [r7, #14]
 8006226:	8a3b      	ldrh	r3, [r7, #16]
 8006228:	b2db      	uxtb	r3, r3
 800622a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800622c:	88fa      	ldrh	r2, [r7, #6]
 800622e:	8a79      	ldrh	r1, [r7, #18]
 8006230:	8a3b      	ldrh	r3, [r7, #16]
 8006232:	440b      	add	r3, r1
 8006234:	429a      	cmp	r2, r3
 8006236:	da49      	bge.n	80062cc <ff_wtoupper+0xe8>
			switch (cmd) {
 8006238:	89fb      	ldrh	r3, [r7, #14]
 800623a:	2b08      	cmp	r3, #8
 800623c:	d84f      	bhi.n	80062de <ff_wtoupper+0xfa>
 800623e:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <ff_wtoupper+0x60>)
 8006240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006244:	08006269 	.word	0x08006269
 8006248:	0800627b 	.word	0x0800627b
 800624c:	08006291 	.word	0x08006291
 8006250:	08006299 	.word	0x08006299
 8006254:	080062a1 	.word	0x080062a1
 8006258:	080062a9 	.word	0x080062a9
 800625c:	080062b1 	.word	0x080062b1
 8006260:	080062b9 	.word	0x080062b9
 8006264:	080062c1 	.word	0x080062c1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8006268:	88fa      	ldrh	r2, [r7, #6]
 800626a:	8a7b      	ldrh	r3, [r7, #18]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	005b      	lsls	r3, r3, #1
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	4413      	add	r3, r2
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	80fb      	strh	r3, [r7, #6]
 8006278:	e027      	b.n	80062ca <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800627a:	88fa      	ldrh	r2, [r7, #6]
 800627c:	8a7b      	ldrh	r3, [r7, #18]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	b29b      	uxth	r3, r3
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	b29b      	uxth	r3, r3
 8006288:	88fa      	ldrh	r2, [r7, #6]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	80fb      	strh	r3, [r7, #6]
 800628e:	e01c      	b.n	80062ca <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8006290:	88fb      	ldrh	r3, [r7, #6]
 8006292:	3b10      	subs	r3, #16
 8006294:	80fb      	strh	r3, [r7, #6]
 8006296:	e018      	b.n	80062ca <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8006298:	88fb      	ldrh	r3, [r7, #6]
 800629a:	3b20      	subs	r3, #32
 800629c:	80fb      	strh	r3, [r7, #6]
 800629e:	e014      	b.n	80062ca <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80062a0:	88fb      	ldrh	r3, [r7, #6]
 80062a2:	3b30      	subs	r3, #48	; 0x30
 80062a4:	80fb      	strh	r3, [r7, #6]
 80062a6:	e010      	b.n	80062ca <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80062a8:	88fb      	ldrh	r3, [r7, #6]
 80062aa:	3b1a      	subs	r3, #26
 80062ac:	80fb      	strh	r3, [r7, #6]
 80062ae:	e00c      	b.n	80062ca <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80062b0:	88fb      	ldrh	r3, [r7, #6]
 80062b2:	3308      	adds	r3, #8
 80062b4:	80fb      	strh	r3, [r7, #6]
 80062b6:	e008      	b.n	80062ca <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80062b8:	88fb      	ldrh	r3, [r7, #6]
 80062ba:	3b50      	subs	r3, #80	; 0x50
 80062bc:	80fb      	strh	r3, [r7, #6]
 80062be:	e004      	b.n	80062ca <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80062c0:	88fb      	ldrh	r3, [r7, #6]
 80062c2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80062c6:	80fb      	strh	r3, [r7, #6]
 80062c8:	bf00      	nop
			}
			break;
 80062ca:	e008      	b.n	80062de <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80062cc:	89fb      	ldrh	r3, [r7, #14]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d195      	bne.n	80061fe <ff_wtoupper+0x1a>
 80062d2:	8a3b      	ldrh	r3, [r7, #16]
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	4413      	add	r3, r2
 80062da:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80062dc:	e78f      	b.n	80061fe <ff_wtoupper+0x1a>
			break;
 80062de:	bf00      	nop
	}

	return chr;
 80062e0:	88fb      	ldrh	r3, [r7, #6]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	371c      	adds	r7, #28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	08006574 	.word	0x08006574
 80062f4:	08006768 	.word	0x08006768

080062f8 <memset>:
 80062f8:	4402      	add	r2, r0
 80062fa:	4603      	mov	r3, r0
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d100      	bne.n	8006302 <memset+0xa>
 8006300:	4770      	bx	lr
 8006302:	f803 1b01 	strb.w	r1, [r3], #1
 8006306:	e7f9      	b.n	80062fc <memset+0x4>

08006308 <__libc_init_array>:
 8006308:	b570      	push	{r4, r5, r6, lr}
 800630a:	4d0d      	ldr	r5, [pc, #52]	; (8006340 <__libc_init_array+0x38>)
 800630c:	4c0d      	ldr	r4, [pc, #52]	; (8006344 <__libc_init_array+0x3c>)
 800630e:	1b64      	subs	r4, r4, r5
 8006310:	10a4      	asrs	r4, r4, #2
 8006312:	2600      	movs	r6, #0
 8006314:	42a6      	cmp	r6, r4
 8006316:	d109      	bne.n	800632c <__libc_init_array+0x24>
 8006318:	4d0b      	ldr	r5, [pc, #44]	; (8006348 <__libc_init_array+0x40>)
 800631a:	4c0c      	ldr	r4, [pc, #48]	; (800634c <__libc_init_array+0x44>)
 800631c:	f000 f818 	bl	8006350 <_init>
 8006320:	1b64      	subs	r4, r4, r5
 8006322:	10a4      	asrs	r4, r4, #2
 8006324:	2600      	movs	r6, #0
 8006326:	42a6      	cmp	r6, r4
 8006328:	d105      	bne.n	8006336 <__libc_init_array+0x2e>
 800632a:	bd70      	pop	{r4, r5, r6, pc}
 800632c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006330:	4798      	blx	r3
 8006332:	3601      	adds	r6, #1
 8006334:	e7ee      	b.n	8006314 <__libc_init_array+0xc>
 8006336:	f855 3b04 	ldr.w	r3, [r5], #4
 800633a:	4798      	blx	r3
 800633c:	3601      	adds	r6, #1
 800633e:	e7f2      	b.n	8006326 <__libc_init_array+0x1e>
 8006340:	0800682c 	.word	0x0800682c
 8006344:	0800682c 	.word	0x0800682c
 8006348:	0800682c 	.word	0x0800682c
 800634c:	08006830 	.word	0x08006830

08006350 <_init>:
 8006350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006352:	bf00      	nop
 8006354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006356:	bc08      	pop	{r3}
 8006358:	469e      	mov	lr, r3
 800635a:	4770      	bx	lr

0800635c <_fini>:
 800635c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800635e:	bf00      	nop
 8006360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006362:	bc08      	pop	{r3}
 8006364:	469e      	mov	lr, r3
 8006366:	4770      	bx	lr
