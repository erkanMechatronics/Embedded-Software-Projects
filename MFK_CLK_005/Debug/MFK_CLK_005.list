
MFK_CLK_005.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e08  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08006f90  08006f90  00016f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f9c  08006f9c  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08006f9c  08006f9c  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f9c  08006f9c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f9c  08006f9c  00016f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fa0  08006fa0  00016fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000808  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000898  20000898  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000157d2  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036d5  00000000  00000000  00035892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001110  00000000  00000000  00038f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fa0  00000000  00000000  0003a078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023699  00000000  00000000  0003b018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017210  00000000  00000000  0005e6b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb52c  00000000  00000000  000758c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140ded  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004860  00000000  00000000  00140e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006f78 	.word	0x08006f78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08006f78 	.word	0x08006f78

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fb84 	bl	80008d8 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d0:	f000 f8a0 	bl	8000314 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001d4:	f000 f80a 	bl	80001ec <MX_I2C1_Init>
  MX_I2S3_Init();
 80001d8:	f000 f836 	bl	8000248 <MX_I2S3_Init>
  MX_SPI1_Init();
 80001dc:	f000 f864 	bl	80002a8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80001e0:	f006 fa82 	bl	80066e8 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80001e4:	f006 faa6 	bl	8006734 <MX_USB_HOST_Process>
 80001e8:	e7fc      	b.n	80001e4 <main+0x1c>
	...

080001ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80001f0:	4b12      	ldr	r3, [pc, #72]	; (800023c <MX_I2C1_Init+0x50>)
 80001f2:	4a13      	ldr	r2, [pc, #76]	; (8000240 <MX_I2C1_Init+0x54>)
 80001f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80001f6:	4b11      	ldr	r3, [pc, #68]	; (800023c <MX_I2C1_Init+0x50>)
 80001f8:	4a12      	ldr	r2, [pc, #72]	; (8000244 <MX_I2C1_Init+0x58>)
 80001fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80001fc:	4b0f      	ldr	r3, [pc, #60]	; (800023c <MX_I2C1_Init+0x50>)
 80001fe:	2200      	movs	r2, #0
 8000200:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000202:	4b0e      	ldr	r3, [pc, #56]	; (800023c <MX_I2C1_Init+0x50>)
 8000204:	2200      	movs	r2, #0
 8000206:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000208:	4b0c      	ldr	r3, [pc, #48]	; (800023c <MX_I2C1_Init+0x50>)
 800020a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800020e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000210:	4b0a      	ldr	r3, [pc, #40]	; (800023c <MX_I2C1_Init+0x50>)
 8000212:	2200      	movs	r2, #0
 8000214:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000216:	4b09      	ldr	r3, [pc, #36]	; (800023c <MX_I2C1_Init+0x50>)
 8000218:	2200      	movs	r2, #0
 800021a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800021c:	4b07      	ldr	r3, [pc, #28]	; (800023c <MX_I2C1_Init+0x50>)
 800021e:	2200      	movs	r2, #0
 8000220:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000222:	4b06      	ldr	r3, [pc, #24]	; (800023c <MX_I2C1_Init+0x50>)
 8000224:	2200      	movs	r2, #0
 8000226:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000228:	4804      	ldr	r0, [pc, #16]	; (800023c <MX_I2C1_Init+0x50>)
 800022a:	f002 fabd 	bl	80027a8 <HAL_I2C_Init>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000234:	f000 f96c 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000238:	bf00      	nop
 800023a:	bd80      	pop	{r7, pc}
 800023c:	200000ac 	.word	0x200000ac
 8000240:	40005400 	.word	0x40005400
 8000244:	000186a0 	.word	0x000186a0

08000248 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800024c:	4b13      	ldr	r3, [pc, #76]	; (800029c <MX_I2S3_Init+0x54>)
 800024e:	4a14      	ldr	r2, [pc, #80]	; (80002a0 <MX_I2S3_Init+0x58>)
 8000250:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000252:	4b12      	ldr	r3, [pc, #72]	; (800029c <MX_I2S3_Init+0x54>)
 8000254:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000258:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800025a:	4b10      	ldr	r3, [pc, #64]	; (800029c <MX_I2S3_Init+0x54>)
 800025c:	2200      	movs	r2, #0
 800025e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000260:	4b0e      	ldr	r3, [pc, #56]	; (800029c <MX_I2S3_Init+0x54>)
 8000262:	2200      	movs	r2, #0
 8000264:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000266:	4b0d      	ldr	r3, [pc, #52]	; (800029c <MX_I2S3_Init+0x54>)
 8000268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800026c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800026e:	4b0b      	ldr	r3, [pc, #44]	; (800029c <MX_I2S3_Init+0x54>)
 8000270:	4a0c      	ldr	r2, [pc, #48]	; (80002a4 <MX_I2S3_Init+0x5c>)
 8000272:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000274:	4b09      	ldr	r3, [pc, #36]	; (800029c <MX_I2S3_Init+0x54>)
 8000276:	2200      	movs	r2, #0
 8000278:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800027a:	4b08      	ldr	r3, [pc, #32]	; (800029c <MX_I2S3_Init+0x54>)
 800027c:	2200      	movs	r2, #0
 800027e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <MX_I2S3_Init+0x54>)
 8000282:	2200      	movs	r2, #0
 8000284:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000286:	4805      	ldr	r0, [pc, #20]	; (800029c <MX_I2S3_Init+0x54>)
 8000288:	f002 fbd2 	bl	8002a30 <HAL_I2S_Init>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000292:	f000 f93d 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	20000100 	.word	0x20000100
 80002a0:	40003c00 	.word	0x40003c00
 80002a4:	00017700 	.word	0x00017700

080002a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002ac:	4b17      	ldr	r3, [pc, #92]	; (800030c <MX_SPI1_Init+0x64>)
 80002ae:	4a18      	ldr	r2, [pc, #96]	; (8000310 <MX_SPI1_Init+0x68>)
 80002b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002b2:	4b16      	ldr	r3, [pc, #88]	; (800030c <MX_SPI1_Init+0x64>)
 80002b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002ba:	4b14      	ldr	r3, [pc, #80]	; (800030c <MX_SPI1_Init+0x64>)
 80002bc:	2200      	movs	r2, #0
 80002be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002c0:	4b12      	ldr	r3, [pc, #72]	; (800030c <MX_SPI1_Init+0x64>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002c6:	4b11      	ldr	r3, [pc, #68]	; (800030c <MX_SPI1_Init+0x64>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002cc:	4b0f      	ldr	r3, [pc, #60]	; (800030c <MX_SPI1_Init+0x64>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002d2:	4b0e      	ldr	r3, [pc, #56]	; (800030c <MX_SPI1_Init+0x64>)
 80002d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80002da:	4b0c      	ldr	r3, [pc, #48]	; (800030c <MX_SPI1_Init+0x64>)
 80002dc:	2200      	movs	r2, #0
 80002de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002e0:	4b0a      	ldr	r3, [pc, #40]	; (800030c <MX_SPI1_Init+0x64>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002e6:	4b09      	ldr	r3, [pc, #36]	; (800030c <MX_SPI1_Init+0x64>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002ec:	4b07      	ldr	r3, [pc, #28]	; (800030c <MX_SPI1_Init+0x64>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002f2:	4b06      	ldr	r3, [pc, #24]	; (800030c <MX_SPI1_Init+0x64>)
 80002f4:	220a      	movs	r2, #10
 80002f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002f8:	4804      	ldr	r0, [pc, #16]	; (800030c <MX_SPI1_Init+0x64>)
 80002fa:	f003 f999 	bl	8003630 <HAL_SPI_Init>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000304:	f000 f904 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000148 	.word	0x20000148
 8000310:	40013000 	.word	0x40013000

08000314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b08c      	sub	sp, #48	; 0x30
 8000318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031a:	f107 031c 	add.w	r3, r7, #28
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
 8000328:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800032a:	2300      	movs	r3, #0
 800032c:	61bb      	str	r3, [r7, #24]
 800032e:	4b72      	ldr	r3, [pc, #456]	; (80004f8 <MX_GPIO_Init+0x1e4>)
 8000330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000332:	4a71      	ldr	r2, [pc, #452]	; (80004f8 <MX_GPIO_Init+0x1e4>)
 8000334:	f043 0310 	orr.w	r3, r3, #16
 8000338:	6313      	str	r3, [r2, #48]	; 0x30
 800033a:	4b6f      	ldr	r3, [pc, #444]	; (80004f8 <MX_GPIO_Init+0x1e4>)
 800033c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033e:	f003 0310 	and.w	r3, r3, #16
 8000342:	61bb      	str	r3, [r7, #24]
 8000344:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000346:	2300      	movs	r3, #0
 8000348:	617b      	str	r3, [r7, #20]
 800034a:	4b6b      	ldr	r3, [pc, #428]	; (80004f8 <MX_GPIO_Init+0x1e4>)
 800034c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034e:	4a6a      	ldr	r2, [pc, #424]	; (80004f8 <MX_GPIO_Init+0x1e4>)
 8000350:	f043 0304 	orr.w	r3, r3, #4
 8000354:	6313      	str	r3, [r2, #48]	; 0x30
 8000356:	4b68      	ldr	r3, [pc, #416]	; (80004f8 <MX_GPIO_Init+0x1e4>)
 8000358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035a:	f003 0304 	and.w	r3, r3, #4
 800035e:	617b      	str	r3, [r7, #20]
 8000360:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000362:	2300      	movs	r3, #0
 8000364:	613b      	str	r3, [r7, #16]
 8000366:	4b64      	ldr	r3, [pc, #400]	; (80004f8 <MX_GPIO_Init+0x1e4>)
 8000368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036a:	4a63      	ldr	r2, [pc, #396]	; (80004f8 <MX_GPIO_Init+0x1e4>)
 800036c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000370:	6313      	str	r3, [r2, #48]	; 0x30
 8000372:	4b61      	ldr	r3, [pc, #388]	; (80004f8 <MX_GPIO_Init+0x1e4>)
 8000374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800037a:	613b      	str	r3, [r7, #16]
 800037c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037e:	2300      	movs	r3, #0
 8000380:	60fb      	str	r3, [r7, #12]
 8000382:	4b5d      	ldr	r3, [pc, #372]	; (80004f8 <MX_GPIO_Init+0x1e4>)
 8000384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000386:	4a5c      	ldr	r2, [pc, #368]	; (80004f8 <MX_GPIO_Init+0x1e4>)
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	6313      	str	r3, [r2, #48]	; 0x30
 800038e:	4b5a      	ldr	r3, [pc, #360]	; (80004f8 <MX_GPIO_Init+0x1e4>)
 8000390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000392:	f003 0301 	and.w	r3, r3, #1
 8000396:	60fb      	str	r3, [r7, #12]
 8000398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800039a:	2300      	movs	r3, #0
 800039c:	60bb      	str	r3, [r7, #8]
 800039e:	4b56      	ldr	r3, [pc, #344]	; (80004f8 <MX_GPIO_Init+0x1e4>)
 80003a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a2:	4a55      	ldr	r2, [pc, #340]	; (80004f8 <MX_GPIO_Init+0x1e4>)
 80003a4:	f043 0302 	orr.w	r3, r3, #2
 80003a8:	6313      	str	r3, [r2, #48]	; 0x30
 80003aa:	4b53      	ldr	r3, [pc, #332]	; (80004f8 <MX_GPIO_Init+0x1e4>)
 80003ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ae:	f003 0302 	and.w	r3, r3, #2
 80003b2:	60bb      	str	r3, [r7, #8]
 80003b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003b6:	2300      	movs	r3, #0
 80003b8:	607b      	str	r3, [r7, #4]
 80003ba:	4b4f      	ldr	r3, [pc, #316]	; (80004f8 <MX_GPIO_Init+0x1e4>)
 80003bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003be:	4a4e      	ldr	r2, [pc, #312]	; (80004f8 <MX_GPIO_Init+0x1e4>)
 80003c0:	f043 0308 	orr.w	r3, r3, #8
 80003c4:	6313      	str	r3, [r2, #48]	; 0x30
 80003c6:	4b4c      	ldr	r3, [pc, #304]	; (80004f8 <MX_GPIO_Init+0x1e4>)
 80003c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ca:	f003 0308 	and.w	r3, r3, #8
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80003d2:	2200      	movs	r2, #0
 80003d4:	2108      	movs	r1, #8
 80003d6:	4849      	ldr	r0, [pc, #292]	; (80004fc <MX_GPIO_Init+0x1e8>)
 80003d8:	f000 fdc2 	bl	8000f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	2101      	movs	r1, #1
 80003e0:	4847      	ldr	r0, [pc, #284]	; (8000500 <MX_GPIO_Init+0x1ec>)
 80003e2:	f000 fdbd 	bl	8000f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80003e6:	2200      	movs	r2, #0
 80003e8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80003ec:	4845      	ldr	r0, [pc, #276]	; (8000504 <MX_GPIO_Init+0x1f0>)
 80003ee:	f000 fdb7 	bl	8000f60 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80003f2:	2308      	movs	r3, #8
 80003f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f6:	2301      	movs	r3, #1
 80003f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fa:	2300      	movs	r3, #0
 80003fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fe:	2300      	movs	r3, #0
 8000400:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000402:	f107 031c 	add.w	r3, r7, #28
 8000406:	4619      	mov	r1, r3
 8000408:	483c      	ldr	r0, [pc, #240]	; (80004fc <MX_GPIO_Init+0x1e8>)
 800040a:	f000 fc0d 	bl	8000c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800040e:	2301      	movs	r3, #1
 8000410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000412:	2301      	movs	r3, #1
 8000414:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000416:	2300      	movs	r3, #0
 8000418:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041a:	2300      	movs	r3, #0
 800041c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800041e:	f107 031c 	add.w	r3, r7, #28
 8000422:	4619      	mov	r1, r3
 8000424:	4836      	ldr	r0, [pc, #216]	; (8000500 <MX_GPIO_Init+0x1ec>)
 8000426:	f000 fbff 	bl	8000c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800042a:	2308      	movs	r3, #8
 800042c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800042e:	2302      	movs	r3, #2
 8000430:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000432:	2300      	movs	r3, #0
 8000434:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000436:	2300      	movs	r3, #0
 8000438:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800043a:	2305      	movs	r3, #5
 800043c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800043e:	f107 031c 	add.w	r3, r7, #28
 8000442:	4619      	mov	r1, r3
 8000444:	482e      	ldr	r0, [pc, #184]	; (8000500 <MX_GPIO_Init+0x1ec>)
 8000446:	f000 fbef 	bl	8000c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800044a:	2301      	movs	r3, #1
 800044c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800044e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000452:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000454:	2300      	movs	r3, #0
 8000456:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000458:	f107 031c 	add.w	r3, r7, #28
 800045c:	4619      	mov	r1, r3
 800045e:	482a      	ldr	r0, [pc, #168]	; (8000508 <MX_GPIO_Init+0x1f4>)
 8000460:	f000 fbe2 	bl	8000c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000464:	2304      	movs	r3, #4
 8000466:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000468:	2300      	movs	r3, #0
 800046a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	2300      	movs	r3, #0
 800046e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000470:	f107 031c 	add.w	r3, r7, #28
 8000474:	4619      	mov	r1, r3
 8000476:	4825      	ldr	r0, [pc, #148]	; (800050c <MX_GPIO_Init+0x1f8>)
 8000478:	f000 fbd6 	bl	8000c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800047c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000482:	2302      	movs	r3, #2
 8000484:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000486:	2300      	movs	r3, #0
 8000488:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048a:	2300      	movs	r3, #0
 800048c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800048e:	2305      	movs	r3, #5
 8000490:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000492:	f107 031c 	add.w	r3, r7, #28
 8000496:	4619      	mov	r1, r3
 8000498:	481c      	ldr	r0, [pc, #112]	; (800050c <MX_GPIO_Init+0x1f8>)
 800049a:	f000 fbc5 	bl	8000c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800049e:	f24f 0310 	movw	r3, #61456	; 0xf010
 80004a2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a4:	2301      	movs	r3, #1
 80004a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ac:	2300      	movs	r3, #0
 80004ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004b0:	f107 031c 	add.w	r3, r7, #28
 80004b4:	4619      	mov	r1, r3
 80004b6:	4813      	ldr	r0, [pc, #76]	; (8000504 <MX_GPIO_Init+0x1f0>)
 80004b8:	f000 fbb6 	bl	8000c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80004bc:	2320      	movs	r3, #32
 80004be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c0:	2300      	movs	r3, #0
 80004c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80004c8:	f107 031c 	add.w	r3, r7, #28
 80004cc:	4619      	mov	r1, r3
 80004ce:	480d      	ldr	r0, [pc, #52]	; (8000504 <MX_GPIO_Init+0x1f0>)
 80004d0:	f000 fbaa 	bl	8000c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80004d4:	2302      	movs	r3, #2
 80004d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004d8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80004dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80004e2:	f107 031c 	add.w	r3, r7, #28
 80004e6:	4619      	mov	r1, r3
 80004e8:	4804      	ldr	r0, [pc, #16]	; (80004fc <MX_GPIO_Init+0x1e8>)
 80004ea:	f000 fb9d 	bl	8000c28 <HAL_GPIO_Init>

}
 80004ee:	bf00      	nop
 80004f0:	3730      	adds	r7, #48	; 0x30
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40023800 	.word	0x40023800
 80004fc:	40021000 	.word	0x40021000
 8000500:	40020800 	.word	0x40020800
 8000504:	40020c00 	.word	0x40020c00
 8000508:	40020000 	.word	0x40020000
 800050c:	40020400 	.word	0x40020400

08000510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000514:	b672      	cpsid	i
}
 8000516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000518:	e7fe      	b.n	8000518 <Error_Handler+0x8>
	...

0800051c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	4b10      	ldr	r3, [pc, #64]	; (8000568 <HAL_MspInit+0x4c>)
 8000528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800052a:	4a0f      	ldr	r2, [pc, #60]	; (8000568 <HAL_MspInit+0x4c>)
 800052c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000530:	6453      	str	r3, [r2, #68]	; 0x44
 8000532:	4b0d      	ldr	r3, [pc, #52]	; (8000568 <HAL_MspInit+0x4c>)
 8000534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	603b      	str	r3, [r7, #0]
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <HAL_MspInit+0x4c>)
 8000544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000546:	4a08      	ldr	r2, [pc, #32]	; (8000568 <HAL_MspInit+0x4c>)
 8000548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054c:	6413      	str	r3, [r2, #64]	; 0x40
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <HAL_MspInit+0x4c>)
 8000550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800055a:	2007      	movs	r0, #7
 800055c:	f000 fb22 	bl	8000ba4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40023800 	.word	0x40023800

0800056c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a19      	ldr	r2, [pc, #100]	; (80005f0 <HAL_I2C_MspInit+0x84>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d12c      	bne.n	80005e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <HAL_I2C_MspInit+0x88>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a17      	ldr	r2, [pc, #92]	; (80005f4 <HAL_I2C_MspInit+0x88>)
 8000598:	f043 0302 	orr.w	r3, r3, #2
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <HAL_I2C_MspInit+0x88>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0302 	and.w	r3, r3, #2
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80005aa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80005ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005b0:	2312      	movs	r3, #18
 80005b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b8:	2300      	movs	r3, #0
 80005ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005bc:	2304      	movs	r3, #4
 80005be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4619      	mov	r1, r3
 80005c6:	480c      	ldr	r0, [pc, #48]	; (80005f8 <HAL_I2C_MspInit+0x8c>)
 80005c8:	f000 fb2e 	bl	8000c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <HAL_I2C_MspInit+0x88>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <HAL_I2C_MspInit+0x88>)
 80005d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005da:	6413      	str	r3, [r2, #64]	; 0x40
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <HAL_I2C_MspInit+0x88>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80005e8:	bf00      	nop
 80005ea:	3728      	adds	r7, #40	; 0x28
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40005400 	.word	0x40005400
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40020400 	.word	0x40020400

080005fc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08e      	sub	sp, #56	; 0x38
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a31      	ldr	r2, [pc, #196]	; (80006ec <HAL_I2S_MspInit+0xf0>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d15a      	bne.n	80006e2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800062c:	2301      	movs	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000630:	23c0      	movs	r3, #192	; 0xc0
 8000632:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000634:	2302      	movs	r3, #2
 8000636:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	4618      	mov	r0, r3
 800063e:	f002 feb7 	bl	80033b0 <HAL_RCCEx_PeriphCLKConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000648:	f7ff ff62 	bl	8000510 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <HAL_I2S_MspInit+0xf4>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a26      	ldr	r2, [pc, #152]	; (80006f0 <HAL_I2S_MspInit+0xf4>)
 8000656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <HAL_I2S_MspInit+0xf4>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000664:	613b      	str	r3, [r7, #16]
 8000666:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <HAL_I2S_MspInit+0xf4>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000670:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <HAL_I2S_MspInit+0xf4>)
 8000672:	f043 0301 	orr.w	r3, r3, #1
 8000676:	6313      	str	r3, [r2, #48]	; 0x30
 8000678:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <HAL_I2S_MspInit+0xf4>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067c:	f003 0301 	and.w	r3, r3, #1
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <HAL_I2S_MspInit+0xf4>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068c:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <HAL_I2S_MspInit+0xf4>)
 800068e:	f043 0304 	orr.w	r3, r3, #4
 8000692:	6313      	str	r3, [r2, #48]	; 0x30
 8000694:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <HAL_I2S_MspInit+0xf4>)
 8000696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000698:	f003 0304 	and.w	r3, r3, #4
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80006a0:	2310      	movs	r3, #16
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a4:	2302      	movs	r3, #2
 80006a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	2300      	movs	r3, #0
 80006ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006b0:	2306      	movs	r3, #6
 80006b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80006b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b8:	4619      	mov	r1, r3
 80006ba:	480e      	ldr	r0, [pc, #56]	; (80006f4 <HAL_I2S_MspInit+0xf8>)
 80006bc:	f000 fab4 	bl	8000c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80006c0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c6:	2302      	movs	r3, #2
 80006c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ce:	2300      	movs	r3, #0
 80006d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006d2:	2306      	movs	r3, #6
 80006d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006da:	4619      	mov	r1, r3
 80006dc:	4806      	ldr	r0, [pc, #24]	; (80006f8 <HAL_I2S_MspInit+0xfc>)
 80006de:	f000 faa3 	bl	8000c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80006e2:	bf00      	nop
 80006e4:	3738      	adds	r7, #56	; 0x38
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40003c00 	.word	0x40003c00
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40020000 	.word	0x40020000
 80006f8:	40020800 	.word	0x40020800

080006fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	; 0x28
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a19      	ldr	r2, [pc, #100]	; (8000780 <HAL_SPI_MspInit+0x84>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d12b      	bne.n	8000776 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <HAL_SPI_MspInit+0x88>)
 8000724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000726:	4a17      	ldr	r2, [pc, #92]	; (8000784 <HAL_SPI_MspInit+0x88>)
 8000728:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800072c:	6453      	str	r3, [r2, #68]	; 0x44
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <HAL_SPI_MspInit+0x88>)
 8000730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000732:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <HAL_SPI_MspInit+0x88>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a10      	ldr	r2, [pc, #64]	; (8000784 <HAL_SPI_MspInit+0x88>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <HAL_SPI_MspInit+0x88>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000756:	23e0      	movs	r3, #224	; 0xe0
 8000758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000766:	2305      	movs	r3, #5
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <HAL_SPI_MspInit+0x8c>)
 8000772:	f000 fa59 	bl	8000c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000776:	bf00      	nop
 8000778:	3728      	adds	r7, #40	; 0x28
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40013000 	.word	0x40013000
 8000784:	40023800 	.word	0x40023800
 8000788:	40020000 	.word	0x40020000

0800078c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <NMI_Handler+0x4>

08000792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <HardFault_Handler+0x4>

08000798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <MemManage_Handler+0x4>

0800079e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <BusFault_Handler+0x4>

080007a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <UsageFault_Handler+0x4>

080007aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d8:	f000 f8d0 	bl	800097c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80007e4:	4802      	ldr	r0, [pc, #8]	; (80007f0 <OTG_FS_IRQHandler+0x10>)
 80007e6:	f000 fe3f 	bl	8001468 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000584 	.word	0x20000584

080007f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007fc:	4a14      	ldr	r2, [pc, #80]	; (8000850 <_sbrk+0x5c>)
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <_sbrk+0x60>)
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <_sbrk+0x64>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d102      	bne.n	8000816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <_sbrk+0x64>)
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <_sbrk+0x68>)
 8000814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <_sbrk+0x64>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	693a      	ldr	r2, [r7, #16]
 8000820:	429a      	cmp	r2, r3
 8000822:	d207      	bcs.n	8000834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000824:	f006 fa68 	bl	8006cf8 <__errno>
 8000828:	4603      	mov	r3, r0
 800082a:	220c      	movs	r2, #12
 800082c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800082e:	f04f 33ff 	mov.w	r3, #4294967295
 8000832:	e009      	b.n	8000848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <_sbrk+0x64>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800083a:	4b07      	ldr	r3, [pc, #28]	; (8000858 <_sbrk+0x64>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	4a05      	ldr	r2, [pc, #20]	; (8000858 <_sbrk+0x64>)
 8000844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000846:	68fb      	ldr	r3, [r7, #12]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20020000 	.word	0x20020000
 8000854:	00000400 	.word	0x00000400
 8000858:	200001a0 	.word	0x200001a0
 800085c:	20000898 	.word	0x20000898

08000860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <SystemInit+0x20>)
 8000866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800086a:	4a05      	ldr	r2, [pc, #20]	; (8000880 <SystemInit+0x20>)
 800086c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000888:	480d      	ldr	r0, [pc, #52]	; (80008c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800088a:	490e      	ldr	r1, [pc, #56]	; (80008c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800088c:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000890:	e002      	b.n	8000898 <LoopCopyDataInit>

08000892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000896:	3304      	adds	r3, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800089c:	d3f9      	bcc.n	8000892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089e:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008a0:	4c0b      	ldr	r4, [pc, #44]	; (80008d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a4:	e001      	b.n	80008aa <LoopFillZerobss>

080008a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a8:	3204      	adds	r2, #4

080008aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ac:	d3fb      	bcc.n	80008a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008ae:	f7ff ffd7 	bl	8000860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008b2:	f006 fa27 	bl	8006d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008b6:	f7ff fc87 	bl	80001c8 <main>
  bx  lr    
 80008ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80008c8:	08006fa4 	.word	0x08006fa4
  ldr r2, =_sbss
 80008cc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80008d0:	20000898 	.word	0x20000898

080008d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008d4:	e7fe      	b.n	80008d4 <ADC_IRQHandler>
	...

080008d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <HAL_Init+0x40>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <HAL_Init+0x40>)
 80008e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008e8:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <HAL_Init+0x40>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <HAL_Init+0x40>)
 80008ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <HAL_Init+0x40>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a07      	ldr	r2, [pc, #28]	; (8000918 <HAL_Init+0x40>)
 80008fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000900:	2003      	movs	r0, #3
 8000902:	f000 f94f 	bl	8000ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000906:	2000      	movs	r0, #0
 8000908:	f000 f808 	bl	800091c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800090c:	f7ff fe06 	bl	800051c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023c00 	.word	0x40023c00

0800091c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_InitTick+0x54>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <HAL_InitTick+0x58>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4619      	mov	r1, r3
 800092e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000932:	fbb3 f3f1 	udiv	r3, r3, r1
 8000936:	fbb2 f3f3 	udiv	r3, r2, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f967 	bl	8000c0e <HAL_SYSTICK_Config>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	e00e      	b.n	8000968 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b0f      	cmp	r3, #15
 800094e:	d80a      	bhi.n	8000966 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000950:	2200      	movs	r2, #0
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	f04f 30ff 	mov.w	r0, #4294967295
 8000958:	f000 f92f 	bl	8000bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800095c:	4a06      	ldr	r2, [pc, #24]	; (8000978 <HAL_InitTick+0x5c>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000962:	2300      	movs	r3, #0
 8000964:	e000      	b.n	8000968 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
}
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000000 	.word	0x20000000
 8000974:	20000008 	.word	0x20000008
 8000978:	20000004 	.word	0x20000004

0800097c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_IncTick+0x20>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_IncTick+0x24>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4413      	add	r3, r2
 800098c:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <HAL_IncTick+0x24>)
 800098e:	6013      	str	r3, [r2, #0]
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000008 	.word	0x20000008
 80009a0:	200001a4 	.word	0x200001a4

080009a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return uwTick;
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <HAL_GetTick+0x14>)
 80009aa:	681b      	ldr	r3, [r3, #0]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	200001a4 	.word	0x200001a4

080009bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c4:	f7ff ffee 	bl	80009a4 <HAL_GetTick>
 80009c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d4:	d005      	beq.n	80009e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <HAL_Delay+0x44>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	461a      	mov	r2, r3
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4413      	add	r3, r2
 80009e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009e2:	bf00      	nop
 80009e4:	f7ff ffde 	bl	80009a4 <HAL_GetTick>
 80009e8:	4602      	mov	r2, r0
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d8f7      	bhi.n	80009e4 <HAL_Delay+0x28>
  {
  }
}
 80009f4:	bf00      	nop
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000008 	.word	0x20000008

08000a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a20:	4013      	ands	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a36:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	60d3      	str	r3, [r2, #12]
}
 8000a3c:	bf00      	nop
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <__NVIC_GetPriorityGrouping+0x18>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	f003 0307 	and.w	r3, r3, #7
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	db0b      	blt.n	8000a92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	f003 021f 	and.w	r2, r3, #31
 8000a80:	4907      	ldr	r1, [pc, #28]	; (8000aa0 <__NVIC_EnableIRQ+0x38>)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	095b      	lsrs	r3, r3, #5
 8000a88:	2001      	movs	r0, #1
 8000a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000e100 	.word	0xe000e100

08000aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	6039      	str	r1, [r7, #0]
 8000aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	db0a      	blt.n	8000ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	490c      	ldr	r1, [pc, #48]	; (8000af0 <__NVIC_SetPriority+0x4c>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	0112      	lsls	r2, r2, #4
 8000ac4:	b2d2      	uxtb	r2, r2
 8000ac6:	440b      	add	r3, r1
 8000ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000acc:	e00a      	b.n	8000ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4908      	ldr	r1, [pc, #32]	; (8000af4 <__NVIC_SetPriority+0x50>)
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	f003 030f 	and.w	r3, r3, #15
 8000ada:	3b04      	subs	r3, #4
 8000adc:	0112      	lsls	r2, r2, #4
 8000ade:	b2d2      	uxtb	r2, r2
 8000ae0:	440b      	add	r3, r1
 8000ae2:	761a      	strb	r2, [r3, #24]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000e100 	.word	0xe000e100
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b089      	sub	sp, #36	; 0x24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	f1c3 0307 	rsb	r3, r3, #7
 8000b12:	2b04      	cmp	r3, #4
 8000b14:	bf28      	it	cs
 8000b16:	2304      	movcs	r3, #4
 8000b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	2b06      	cmp	r3, #6
 8000b20:	d902      	bls.n	8000b28 <NVIC_EncodePriority+0x30>
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3b03      	subs	r3, #3
 8000b26:	e000      	b.n	8000b2a <NVIC_EncodePriority+0x32>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43da      	mvns	r2, r3
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b40:	f04f 31ff 	mov.w	r1, #4294967295
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4a:	43d9      	mvns	r1, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	4313      	orrs	r3, r2
         );
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3724      	adds	r7, #36	; 0x24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b70:	d301      	bcc.n	8000b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00f      	b.n	8000b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <SysTick_Config+0x40>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b7e:	210f      	movs	r1, #15
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	f7ff ff8e 	bl	8000aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <SysTick_Config+0x40>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <SysTick_Config+0x40>)
 8000b90:	2207      	movs	r2, #7
 8000b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	e000e010 	.word	0xe000e010

08000ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ff29 	bl	8000a04 <__NVIC_SetPriorityGrouping>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b086      	sub	sp, #24
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bcc:	f7ff ff3e 	bl	8000a4c <__NVIC_GetPriorityGrouping>
 8000bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	68b9      	ldr	r1, [r7, #8]
 8000bd6:	6978      	ldr	r0, [r7, #20]
 8000bd8:	f7ff ff8e 	bl	8000af8 <NVIC_EncodePriority>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be2:	4611      	mov	r1, r2
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff5d 	bl	8000aa4 <__NVIC_SetPriority>
}
 8000bea:	bf00      	nop
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff31 	bl	8000a68 <__NVIC_EnableIRQ>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff ffa2 	bl	8000b60 <SysTick_Config>
 8000c1c:	4603      	mov	r3, r0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	; 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
 8000c42:	e16b      	b.n	8000f1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c44:	2201      	movs	r2, #1
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	f040 815a 	bne.w	8000f16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f003 0303 	and.w	r3, r3, #3
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d005      	beq.n	8000c7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d130      	bne.n	8000cdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	2203      	movs	r2, #3
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	68da      	ldr	r2, [r3, #12]
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	091b      	lsrs	r3, r3, #4
 8000cc6:	f003 0201 	and.w	r2, r3, #1
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 0303 	and.w	r3, r3, #3
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d017      	beq.n	8000d18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	689a      	ldr	r2, [r3, #8]
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d123      	bne.n	8000d6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	08da      	lsrs	r2, r3, #3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3208      	adds	r2, #8
 8000d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	f003 0307 	and.w	r3, r3, #7
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	220f      	movs	r2, #15
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	691a      	ldr	r2, [r3, #16]
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	08da      	lsrs	r2, r3, #3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3208      	adds	r2, #8
 8000d66:	69b9      	ldr	r1, [r7, #24]
 8000d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0203 	and.w	r2, r3, #3
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f000 80b4 	beq.w	8000f16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b60      	ldr	r3, [pc, #384]	; (8000f34 <HAL_GPIO_Init+0x30c>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	4a5f      	ldr	r2, [pc, #380]	; (8000f34 <HAL_GPIO_Init+0x30c>)
 8000db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dbe:	4b5d      	ldr	r3, [pc, #372]	; (8000f34 <HAL_GPIO_Init+0x30c>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dca:	4a5b      	ldr	r2, [pc, #364]	; (8000f38 <HAL_GPIO_Init+0x310>)
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	220f      	movs	r2, #15
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a52      	ldr	r2, [pc, #328]	; (8000f3c <HAL_GPIO_Init+0x314>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d02b      	beq.n	8000e4e <HAL_GPIO_Init+0x226>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a51      	ldr	r2, [pc, #324]	; (8000f40 <HAL_GPIO_Init+0x318>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d025      	beq.n	8000e4a <HAL_GPIO_Init+0x222>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a50      	ldr	r2, [pc, #320]	; (8000f44 <HAL_GPIO_Init+0x31c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d01f      	beq.n	8000e46 <HAL_GPIO_Init+0x21e>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a4f      	ldr	r2, [pc, #316]	; (8000f48 <HAL_GPIO_Init+0x320>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d019      	beq.n	8000e42 <HAL_GPIO_Init+0x21a>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a4e      	ldr	r2, [pc, #312]	; (8000f4c <HAL_GPIO_Init+0x324>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d013      	beq.n	8000e3e <HAL_GPIO_Init+0x216>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a4d      	ldr	r2, [pc, #308]	; (8000f50 <HAL_GPIO_Init+0x328>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d00d      	beq.n	8000e3a <HAL_GPIO_Init+0x212>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a4c      	ldr	r2, [pc, #304]	; (8000f54 <HAL_GPIO_Init+0x32c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d007      	beq.n	8000e36 <HAL_GPIO_Init+0x20e>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a4b      	ldr	r2, [pc, #300]	; (8000f58 <HAL_GPIO_Init+0x330>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d101      	bne.n	8000e32 <HAL_GPIO_Init+0x20a>
 8000e2e:	2307      	movs	r3, #7
 8000e30:	e00e      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e32:	2308      	movs	r3, #8
 8000e34:	e00c      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e36:	2306      	movs	r3, #6
 8000e38:	e00a      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e3a:	2305      	movs	r3, #5
 8000e3c:	e008      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e3e:	2304      	movs	r3, #4
 8000e40:	e006      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e42:	2303      	movs	r3, #3
 8000e44:	e004      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e46:	2302      	movs	r3, #2
 8000e48:	e002      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e000      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e4e:	2300      	movs	r3, #0
 8000e50:	69fa      	ldr	r2, [r7, #28]
 8000e52:	f002 0203 	and.w	r2, r2, #3
 8000e56:	0092      	lsls	r2, r2, #2
 8000e58:	4093      	lsls	r3, r2
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e60:	4935      	ldr	r1, [pc, #212]	; (8000f38 <HAL_GPIO_Init+0x310>)
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	089b      	lsrs	r3, r3, #2
 8000e66:	3302      	adds	r3, #2
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e6e:	4b3b      	ldr	r3, [pc, #236]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e92:	4a32      	ldr	r2, [pc, #200]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e98:	4b30      	ldr	r3, [pc, #192]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ebc:	4a27      	ldr	r2, [pc, #156]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ec2:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ee6:	4a1d      	ldr	r2, [pc, #116]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f10:	4a12      	ldr	r2, [pc, #72]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	61fb      	str	r3, [r7, #28]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2b0f      	cmp	r3, #15
 8000f20:	f67f ae90 	bls.w	8000c44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3724      	adds	r7, #36	; 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40013800 	.word	0x40013800
 8000f3c:	40020000 	.word	0x40020000
 8000f40:	40020400 	.word	0x40020400
 8000f44:	40020800 	.word	0x40020800
 8000f48:	40020c00 	.word	0x40020c00
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40021400 	.word	0x40021400
 8000f54:	40021800 	.word	0x40021800
 8000f58:	40021c00 	.word	0x40021c00
 8000f5c:	40013c00 	.word	0x40013c00

08000f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	807b      	strh	r3, [r7, #2]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f70:	787b      	ldrb	r3, [r7, #1]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f76:	887a      	ldrh	r2, [r7, #2]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f7c:	e003      	b.n	8000f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f7e:	887b      	ldrh	r3, [r7, #2]
 8000f80:	041a      	lsls	r2, r3, #16
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	619a      	str	r2, [r3, #24]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000f92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f94:	b08f      	sub	sp, #60	; 0x3c
 8000f96:	af0a      	add	r7, sp, #40	; 0x28
 8000f98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d101      	bne.n	8000fa4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e054      	b.n	800104e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d106      	bne.n	8000fc4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f005 fbf0 	bl	80067a4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d102      	bne.n	8000fde <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 fc1f 	bl	8003826 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	687e      	ldr	r6, [r7, #4]
 8000ff0:	466d      	mov	r5, sp
 8000ff2:	f106 0410 	add.w	r4, r6, #16
 8000ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ffe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001002:	e885 0003 	stmia.w	r5, {r0, r1}
 8001006:	1d33      	adds	r3, r6, #4
 8001008:	cb0e      	ldmia	r3, {r1, r2, r3}
 800100a:	6838      	ldr	r0, [r7, #0]
 800100c:	f002 fb99 	bl	8003742 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2101      	movs	r1, #1
 8001016:	4618      	mov	r0, r3
 8001018:	f002 fc16 	bl	8003848 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	687e      	ldr	r6, [r7, #4]
 8001024:	466d      	mov	r5, sp
 8001026:	f106 0410 	add.w	r4, r6, #16
 800102a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800102c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800102e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001032:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001036:	e885 0003 	stmia.w	r5, {r0, r1}
 800103a:	1d33      	adds	r3, r6, #4
 800103c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800103e:	6838      	ldr	r0, [r7, #0]
 8001040:	f002 fd9e 	bl	8003b80 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2201      	movs	r2, #1
 8001048:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001056 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001056:	b590      	push	{r4, r7, lr}
 8001058:	b089      	sub	sp, #36	; 0x24
 800105a:	af04      	add	r7, sp, #16
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	4608      	mov	r0, r1
 8001060:	4611      	mov	r1, r2
 8001062:	461a      	mov	r2, r3
 8001064:	4603      	mov	r3, r0
 8001066:	70fb      	strb	r3, [r7, #3]
 8001068:	460b      	mov	r3, r1
 800106a:	70bb      	strb	r3, [r7, #2]
 800106c:	4613      	mov	r3, r2
 800106e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001076:	2b01      	cmp	r3, #1
 8001078:	d101      	bne.n	800107e <HAL_HCD_HC_Init+0x28>
 800107a:	2302      	movs	r3, #2
 800107c:	e076      	b.n	800116c <HAL_HCD_HC_Init+0x116>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2201      	movs	r2, #1
 8001082:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001086:	78fb      	ldrb	r3, [r7, #3]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	212c      	movs	r1, #44	; 0x2c
 800108c:	fb01 f303 	mul.w	r3, r1, r3
 8001090:	4413      	add	r3, r2
 8001092:	333d      	adds	r3, #61	; 0x3d
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001098:	78fb      	ldrb	r3, [r7, #3]
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	212c      	movs	r1, #44	; 0x2c
 800109e:	fb01 f303 	mul.w	r3, r1, r3
 80010a2:	4413      	add	r3, r2
 80010a4:	3338      	adds	r3, #56	; 0x38
 80010a6:	787a      	ldrb	r2, [r7, #1]
 80010a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80010aa:	78fb      	ldrb	r3, [r7, #3]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	212c      	movs	r1, #44	; 0x2c
 80010b0:	fb01 f303 	mul.w	r3, r1, r3
 80010b4:	4413      	add	r3, r2
 80010b6:	3340      	adds	r3, #64	; 0x40
 80010b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80010ba:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80010bc:	78fb      	ldrb	r3, [r7, #3]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	212c      	movs	r1, #44	; 0x2c
 80010c2:	fb01 f303 	mul.w	r3, r1, r3
 80010c6:	4413      	add	r3, r2
 80010c8:	3339      	adds	r3, #57	; 0x39
 80010ca:	78fa      	ldrb	r2, [r7, #3]
 80010cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80010ce:	78fb      	ldrb	r3, [r7, #3]
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	212c      	movs	r1, #44	; 0x2c
 80010d4:	fb01 f303 	mul.w	r3, r1, r3
 80010d8:	4413      	add	r3, r2
 80010da:	333f      	adds	r3, #63	; 0x3f
 80010dc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80010e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	78ba      	ldrb	r2, [r7, #2]
 80010e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010ea:	b2d0      	uxtb	r0, r2
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	212c      	movs	r1, #44	; 0x2c
 80010f0:	fb01 f303 	mul.w	r3, r1, r3
 80010f4:	4413      	add	r3, r2
 80010f6:	333a      	adds	r3, #58	; 0x3a
 80010f8:	4602      	mov	r2, r0
 80010fa:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80010fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001100:	2b00      	cmp	r3, #0
 8001102:	da09      	bge.n	8001118 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	212c      	movs	r1, #44	; 0x2c
 800110a:	fb01 f303 	mul.w	r3, r1, r3
 800110e:	4413      	add	r3, r2
 8001110:	333b      	adds	r3, #59	; 0x3b
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
 8001116:	e008      	b.n	800112a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001118:	78fb      	ldrb	r3, [r7, #3]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	212c      	movs	r1, #44	; 0x2c
 800111e:	fb01 f303 	mul.w	r3, r1, r3
 8001122:	4413      	add	r3, r2
 8001124:	333b      	adds	r3, #59	; 0x3b
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800112a:	78fb      	ldrb	r3, [r7, #3]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	212c      	movs	r1, #44	; 0x2c
 8001130:	fb01 f303 	mul.w	r3, r1, r3
 8001134:	4413      	add	r3, r2
 8001136:	333c      	adds	r3, #60	; 0x3c
 8001138:	f897 2020 	ldrb.w	r2, [r7, #32]
 800113c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	787c      	ldrb	r4, [r7, #1]
 8001144:	78ba      	ldrb	r2, [r7, #2]
 8001146:	78f9      	ldrb	r1, [r7, #3]
 8001148:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800114a:	9302      	str	r3, [sp, #8]
 800114c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	4623      	mov	r3, r4
 800115a:	f002 fe97 	bl	8003e8c <USB_HC_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800116a:	7bfb      	ldrb	r3, [r7, #15]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	bd90      	pop	{r4, r7, pc}

08001174 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001180:	2300      	movs	r3, #0
 8001182:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800118a:	2b01      	cmp	r3, #1
 800118c:	d101      	bne.n	8001192 <HAL_HCD_HC_Halt+0x1e>
 800118e:	2302      	movs	r3, #2
 8001190:	e00f      	b.n	80011b2 <HAL_HCD_HC_Halt+0x3e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2201      	movs	r2, #1
 8001196:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	78fa      	ldrb	r2, [r7, #3]
 80011a0:	4611      	mov	r1, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f003 f8e7 	bl	8004376 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	4608      	mov	r0, r1
 80011c6:	4611      	mov	r1, r2
 80011c8:	461a      	mov	r2, r3
 80011ca:	4603      	mov	r3, r0
 80011cc:	70fb      	strb	r3, [r7, #3]
 80011ce:	460b      	mov	r3, r1
 80011d0:	70bb      	strb	r3, [r7, #2]
 80011d2:	4613      	mov	r3, r2
 80011d4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80011d6:	78fb      	ldrb	r3, [r7, #3]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	212c      	movs	r1, #44	; 0x2c
 80011dc:	fb01 f303 	mul.w	r3, r1, r3
 80011e0:	4413      	add	r3, r2
 80011e2:	333b      	adds	r3, #59	; 0x3b
 80011e4:	78ba      	ldrb	r2, [r7, #2]
 80011e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80011e8:	78fb      	ldrb	r3, [r7, #3]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	212c      	movs	r1, #44	; 0x2c
 80011ee:	fb01 f303 	mul.w	r3, r1, r3
 80011f2:	4413      	add	r3, r2
 80011f4:	333f      	adds	r3, #63	; 0x3f
 80011f6:	787a      	ldrb	r2, [r7, #1]
 80011f8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80011fa:	7c3b      	ldrb	r3, [r7, #16]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d112      	bne.n	8001226 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001200:	78fb      	ldrb	r3, [r7, #3]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	212c      	movs	r1, #44	; 0x2c
 8001206:	fb01 f303 	mul.w	r3, r1, r3
 800120a:	4413      	add	r3, r2
 800120c:	3342      	adds	r3, #66	; 0x42
 800120e:	2203      	movs	r2, #3
 8001210:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001212:	78fb      	ldrb	r3, [r7, #3]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	212c      	movs	r1, #44	; 0x2c
 8001218:	fb01 f303 	mul.w	r3, r1, r3
 800121c:	4413      	add	r3, r2
 800121e:	333d      	adds	r3, #61	; 0x3d
 8001220:	7f3a      	ldrb	r2, [r7, #28]
 8001222:	701a      	strb	r2, [r3, #0]
 8001224:	e008      	b.n	8001238 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001226:	78fb      	ldrb	r3, [r7, #3]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	212c      	movs	r1, #44	; 0x2c
 800122c:	fb01 f303 	mul.w	r3, r1, r3
 8001230:	4413      	add	r3, r2
 8001232:	3342      	adds	r3, #66	; 0x42
 8001234:	2202      	movs	r2, #2
 8001236:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001238:	787b      	ldrb	r3, [r7, #1]
 800123a:	2b03      	cmp	r3, #3
 800123c:	f200 80c6 	bhi.w	80013cc <HAL_HCD_HC_SubmitRequest+0x210>
 8001240:	a201      	add	r2, pc, #4	; (adr r2, 8001248 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001246:	bf00      	nop
 8001248:	08001259 	.word	0x08001259
 800124c:	080013b9 	.word	0x080013b9
 8001250:	080012bd 	.word	0x080012bd
 8001254:	0800133b 	.word	0x0800133b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001258:	7c3b      	ldrb	r3, [r7, #16]
 800125a:	2b01      	cmp	r3, #1
 800125c:	f040 80b8 	bne.w	80013d0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001260:	78bb      	ldrb	r3, [r7, #2]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f040 80b4 	bne.w	80013d0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001268:	8b3b      	ldrh	r3, [r7, #24]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d108      	bne.n	8001280 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800126e:	78fb      	ldrb	r3, [r7, #3]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	212c      	movs	r1, #44	; 0x2c
 8001274:	fb01 f303 	mul.w	r3, r1, r3
 8001278:	4413      	add	r3, r2
 800127a:	3355      	adds	r3, #85	; 0x55
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001280:	78fb      	ldrb	r3, [r7, #3]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	212c      	movs	r1, #44	; 0x2c
 8001286:	fb01 f303 	mul.w	r3, r1, r3
 800128a:	4413      	add	r3, r2
 800128c:	3355      	adds	r3, #85	; 0x55
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d109      	bne.n	80012a8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	212c      	movs	r1, #44	; 0x2c
 800129a:	fb01 f303 	mul.w	r3, r1, r3
 800129e:	4413      	add	r3, r2
 80012a0:	3342      	adds	r3, #66	; 0x42
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80012a6:	e093      	b.n	80013d0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80012a8:	78fb      	ldrb	r3, [r7, #3]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	212c      	movs	r1, #44	; 0x2c
 80012ae:	fb01 f303 	mul.w	r3, r1, r3
 80012b2:	4413      	add	r3, r2
 80012b4:	3342      	adds	r3, #66	; 0x42
 80012b6:	2202      	movs	r2, #2
 80012b8:	701a      	strb	r2, [r3, #0]
      break;
 80012ba:	e089      	b.n	80013d0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80012bc:	78bb      	ldrb	r3, [r7, #2]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d11d      	bne.n	80012fe <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	212c      	movs	r1, #44	; 0x2c
 80012c8:	fb01 f303 	mul.w	r3, r1, r3
 80012cc:	4413      	add	r3, r2
 80012ce:	3355      	adds	r3, #85	; 0x55
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d109      	bne.n	80012ea <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	212c      	movs	r1, #44	; 0x2c
 80012dc:	fb01 f303 	mul.w	r3, r1, r3
 80012e0:	4413      	add	r3, r2
 80012e2:	3342      	adds	r3, #66	; 0x42
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80012e8:	e073      	b.n	80013d2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80012ea:	78fb      	ldrb	r3, [r7, #3]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	212c      	movs	r1, #44	; 0x2c
 80012f0:	fb01 f303 	mul.w	r3, r1, r3
 80012f4:	4413      	add	r3, r2
 80012f6:	3342      	adds	r3, #66	; 0x42
 80012f8:	2202      	movs	r2, #2
 80012fa:	701a      	strb	r2, [r3, #0]
      break;
 80012fc:	e069      	b.n	80013d2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80012fe:	78fb      	ldrb	r3, [r7, #3]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	212c      	movs	r1, #44	; 0x2c
 8001304:	fb01 f303 	mul.w	r3, r1, r3
 8001308:	4413      	add	r3, r2
 800130a:	3354      	adds	r3, #84	; 0x54
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d109      	bne.n	8001326 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001312:	78fb      	ldrb	r3, [r7, #3]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	212c      	movs	r1, #44	; 0x2c
 8001318:	fb01 f303 	mul.w	r3, r1, r3
 800131c:	4413      	add	r3, r2
 800131e:	3342      	adds	r3, #66	; 0x42
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
      break;
 8001324:	e055      	b.n	80013d2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001326:	78fb      	ldrb	r3, [r7, #3]
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	212c      	movs	r1, #44	; 0x2c
 800132c:	fb01 f303 	mul.w	r3, r1, r3
 8001330:	4413      	add	r3, r2
 8001332:	3342      	adds	r3, #66	; 0x42
 8001334:	2202      	movs	r2, #2
 8001336:	701a      	strb	r2, [r3, #0]
      break;
 8001338:	e04b      	b.n	80013d2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800133a:	78bb      	ldrb	r3, [r7, #2]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d11d      	bne.n	800137c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	212c      	movs	r1, #44	; 0x2c
 8001346:	fb01 f303 	mul.w	r3, r1, r3
 800134a:	4413      	add	r3, r2
 800134c:	3355      	adds	r3, #85	; 0x55
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d109      	bne.n	8001368 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001354:	78fb      	ldrb	r3, [r7, #3]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	212c      	movs	r1, #44	; 0x2c
 800135a:	fb01 f303 	mul.w	r3, r1, r3
 800135e:	4413      	add	r3, r2
 8001360:	3342      	adds	r3, #66	; 0x42
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001366:	e034      	b.n	80013d2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001368:	78fb      	ldrb	r3, [r7, #3]
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	212c      	movs	r1, #44	; 0x2c
 800136e:	fb01 f303 	mul.w	r3, r1, r3
 8001372:	4413      	add	r3, r2
 8001374:	3342      	adds	r3, #66	; 0x42
 8001376:	2202      	movs	r2, #2
 8001378:	701a      	strb	r2, [r3, #0]
      break;
 800137a:	e02a      	b.n	80013d2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	212c      	movs	r1, #44	; 0x2c
 8001382:	fb01 f303 	mul.w	r3, r1, r3
 8001386:	4413      	add	r3, r2
 8001388:	3354      	adds	r3, #84	; 0x54
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d109      	bne.n	80013a4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001390:	78fb      	ldrb	r3, [r7, #3]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	212c      	movs	r1, #44	; 0x2c
 8001396:	fb01 f303 	mul.w	r3, r1, r3
 800139a:	4413      	add	r3, r2
 800139c:	3342      	adds	r3, #66	; 0x42
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
      break;
 80013a2:	e016      	b.n	80013d2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013a4:	78fb      	ldrb	r3, [r7, #3]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	212c      	movs	r1, #44	; 0x2c
 80013aa:	fb01 f303 	mul.w	r3, r1, r3
 80013ae:	4413      	add	r3, r2
 80013b0:	3342      	adds	r3, #66	; 0x42
 80013b2:	2202      	movs	r2, #2
 80013b4:	701a      	strb	r2, [r3, #0]
      break;
 80013b6:	e00c      	b.n	80013d2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	212c      	movs	r1, #44	; 0x2c
 80013be:	fb01 f303 	mul.w	r3, r1, r3
 80013c2:	4413      	add	r3, r2
 80013c4:	3342      	adds	r3, #66	; 0x42
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
      break;
 80013ca:	e002      	b.n	80013d2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80013cc:	bf00      	nop
 80013ce:	e000      	b.n	80013d2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80013d0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80013d2:	78fb      	ldrb	r3, [r7, #3]
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	212c      	movs	r1, #44	; 0x2c
 80013d8:	fb01 f303 	mul.w	r3, r1, r3
 80013dc:	4413      	add	r3, r2
 80013de:	3344      	adds	r3, #68	; 0x44
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80013e4:	78fb      	ldrb	r3, [r7, #3]
 80013e6:	8b3a      	ldrh	r2, [r7, #24]
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	202c      	movs	r0, #44	; 0x2c
 80013ec:	fb00 f303 	mul.w	r3, r0, r3
 80013f0:	440b      	add	r3, r1
 80013f2:	334c      	adds	r3, #76	; 0x4c
 80013f4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80013f6:	78fb      	ldrb	r3, [r7, #3]
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	212c      	movs	r1, #44	; 0x2c
 80013fc:	fb01 f303 	mul.w	r3, r1, r3
 8001400:	4413      	add	r3, r2
 8001402:	3360      	adds	r3, #96	; 0x60
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001408:	78fb      	ldrb	r3, [r7, #3]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	212c      	movs	r1, #44	; 0x2c
 800140e:	fb01 f303 	mul.w	r3, r1, r3
 8001412:	4413      	add	r3, r2
 8001414:	3350      	adds	r3, #80	; 0x50
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800141a:	78fb      	ldrb	r3, [r7, #3]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	212c      	movs	r1, #44	; 0x2c
 8001420:	fb01 f303 	mul.w	r3, r1, r3
 8001424:	4413      	add	r3, r2
 8001426:	3339      	adds	r3, #57	; 0x39
 8001428:	78fa      	ldrb	r2, [r7, #3]
 800142a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800142c:	78fb      	ldrb	r3, [r7, #3]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	212c      	movs	r1, #44	; 0x2c
 8001432:	fb01 f303 	mul.w	r3, r1, r3
 8001436:	4413      	add	r3, r2
 8001438:	3361      	adds	r3, #97	; 0x61
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	78fb      	ldrb	r3, [r7, #3]
 8001444:	222c      	movs	r2, #44	; 0x2c
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	3338      	adds	r3, #56	; 0x38
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	18d1      	adds	r1, r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	461a      	mov	r2, r3
 8001458:	f002 fe3a 	bl	80040d0 <USB_HC_StartXfer>
 800145c:	4603      	mov	r3, r0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop

08001468 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f002 fb3b 	bl	8003afa <USB_GetMode>
 8001484:	4603      	mov	r3, r0
 8001486:	2b01      	cmp	r3, #1
 8001488:	f040 80f6 	bne.w	8001678 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f002 fb1f 	bl	8003ad4 <USB_ReadInterrupts>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80ec 	beq.w	8001676 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f002 fb16 	bl	8003ad4 <USB_ReadInterrupts>
 80014a8:	4603      	mov	r3, r0
 80014aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80014b2:	d104      	bne.n	80014be <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 fb06 	bl	8003ad4 <USB_ReadInterrupts>
 80014c8:	4603      	mov	r3, r0
 80014ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014d2:	d104      	bne.n	80014de <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f002 faf6 	bl	8003ad4 <USB_ReadInterrupts>
 80014e8:	4603      	mov	r3, r0
 80014ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80014f2:	d104      	bne.n	80014fe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f002 fae6 	bl	8003ad4 <USB_ReadInterrupts>
 8001508:	4603      	mov	r3, r0
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b02      	cmp	r3, #2
 8001510:	d103      	bne.n	800151a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2202      	movs	r2, #2
 8001518:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f002 fad8 	bl	8003ad4 <USB_ReadInterrupts>
 8001524:	4603      	mov	r3, r0
 8001526:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800152a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800152e:	d11c      	bne.n	800156a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001538:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10f      	bne.n	800156a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800154a:	2110      	movs	r1, #16
 800154c:	6938      	ldr	r0, [r7, #16]
 800154e:	f002 f9c7 	bl	80038e0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001552:	6938      	ldr	r0, [r7, #16]
 8001554:	f002 f9f8 	bl	8003948 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2101      	movs	r1, #1
 800155e:	4618      	mov	r0, r3
 8001560:	f002 fbce 	bl	8003d00 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f005 f99b 	bl	80068a0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f002 fab0 	bl	8003ad4 <USB_ReadInterrupts>
 8001574:	4603      	mov	r3, r0
 8001576:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800157a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800157e:	d102      	bne.n	8001586 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f001 f89e 	bl	80026c2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f002 faa2 	bl	8003ad4 <USB_ReadInterrupts>
 8001590:	4603      	mov	r3, r0
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	2b08      	cmp	r3, #8
 8001598:	d106      	bne.n	80015a8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f005 f964 	bl	8006868 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2208      	movs	r2, #8
 80015a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f002 fa91 	bl	8003ad4 <USB_ReadInterrupts>
 80015b2:	4603      	mov	r3, r0
 80015b4:	f003 0310 	and.w	r3, r3, #16
 80015b8:	2b10      	cmp	r3, #16
 80015ba:	d101      	bne.n	80015c0 <HAL_HCD_IRQHandler+0x158>
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <HAL_HCD_IRQHandler+0x15a>
 80015c0:	2300      	movs	r3, #0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d012      	beq.n	80015ec <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	699a      	ldr	r2, [r3, #24]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 0210 	bic.w	r2, r2, #16
 80015d4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 ffa1 	bl	800251e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	699a      	ldr	r2, [r3, #24]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0210 	orr.w	r2, r2, #16
 80015ea:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f002 fa6f 	bl	8003ad4 <USB_ReadInterrupts>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001600:	d13a      	bne.n	8001678 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f002 fea4 	bl	8004354 <USB_HC_ReadInterrupt>
 800160c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	e025      	b.n	8001660 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	fa22 f303 	lsr.w	r3, r2, r3
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	d018      	beq.n	800165a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	015a      	lsls	r2, r3, #5
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4413      	add	r3, r2
 8001630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800163a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800163e:	d106      	bne.n	800164e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	4619      	mov	r1, r3
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 f8ab 	bl	80017a2 <HCD_HC_IN_IRQHandler>
 800164c:	e005      	b.n	800165a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	4619      	mov	r1, r3
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 fbf9 	bl	8001e4c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3301      	adds	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	429a      	cmp	r2, r3
 8001668:	d3d4      	bcc.n	8001614 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001672:	615a      	str	r2, [r3, #20]
 8001674:	e000      	b.n	8001678 <HAL_HCD_IRQHandler+0x210>
      return;
 8001676:	bf00      	nop
    }
  }
}
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800168c:	2b01      	cmp	r3, #1
 800168e:	d101      	bne.n	8001694 <HAL_HCD_Start+0x16>
 8001690:	2302      	movs	r3, #2
 8001692:	e013      	b.n	80016bc <HAL_HCD_Start+0x3e>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2101      	movs	r1, #1
 80016a2:	4618      	mov	r0, r3
 80016a4:	f002 fb90 	bl	8003dc8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f002 f8a9 	bl	8003804 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d101      	bne.n	80016da <HAL_HCD_Stop+0x16>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e00d      	b.n	80016f6 <HAL_HCD_Stop+0x32>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f002 ff7e 	bl	80045e8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f002 fb32 	bl	8003d74 <USB_ResetPort>
 8001710:	4603      	mov	r3, r0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	460b      	mov	r3, r1
 8001724:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001726:	78fb      	ldrb	r3, [r7, #3]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	212c      	movs	r1, #44	; 0x2c
 800172c:	fb01 f303 	mul.w	r3, r1, r3
 8001730:	4413      	add	r3, r2
 8001732:	3360      	adds	r3, #96	; 0x60
 8001734:	781b      	ldrb	r3, [r3, #0]
}
 8001736:	4618      	mov	r0, r3
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	460b      	mov	r3, r1
 800174c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800174e:	78fb      	ldrb	r3, [r7, #3]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	212c      	movs	r1, #44	; 0x2c
 8001754:	fb01 f303 	mul.w	r3, r1, r3
 8001758:	4413      	add	r3, r2
 800175a:	3350      	adds	r3, #80	; 0x50
 800175c:	681b      	ldr	r3, [r3, #0]
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f002 fb76 	bl	8003e68 <USB_GetCurrentFrame>
 800177c:	4603      	mov	r3, r0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f002 fb51 	bl	8003e3a <USB_GetHostSpeed>
 8001798:	4603      	mov	r3, r0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b086      	sub	sp, #24
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	460b      	mov	r3, r1
 80017ac:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	015a      	lsls	r2, r3, #5
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4413      	add	r3, r2
 80017c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d11a      	bne.n	8001808 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	015a      	lsls	r2, r3, #5
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	4413      	add	r3, r2
 80017da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017de:	461a      	mov	r2, r3
 80017e0:	2304      	movs	r3, #4
 80017e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	212c      	movs	r1, #44	; 0x2c
 80017ea:	fb01 f303 	mul.w	r3, r1, r3
 80017ee:	4413      	add	r3, r2
 80017f0:	3361      	adds	r3, #97	; 0x61
 80017f2:	2206      	movs	r2, #6
 80017f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f002 fdb8 	bl	8004376 <USB_HC_Halt>
 8001806:	e0af      	b.n	8001968 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	015a      	lsls	r2, r3, #5
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4413      	add	r3, r2
 8001810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800181e:	d11b      	bne.n	8001858 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	015a      	lsls	r2, r3, #5
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4413      	add	r3, r2
 8001828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800182c:	461a      	mov	r2, r3
 800182e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001832:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	212c      	movs	r1, #44	; 0x2c
 800183a:	fb01 f303 	mul.w	r3, r1, r3
 800183e:	4413      	add	r3, r2
 8001840:	3361      	adds	r3, #97	; 0x61
 8001842:	2207      	movs	r2, #7
 8001844:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f002 fd90 	bl	8004376 <USB_HC_Halt>
 8001856:	e087      	b.n	8001968 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	015a      	lsls	r2, r3, #5
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	4413      	add	r3, r2
 8001860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 0320 	and.w	r3, r3, #32
 800186a:	2b20      	cmp	r3, #32
 800186c:	d109      	bne.n	8001882 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	015a      	lsls	r2, r3, #5
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4413      	add	r3, r2
 8001876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800187a:	461a      	mov	r2, r3
 800187c:	2320      	movs	r3, #32
 800187e:	6093      	str	r3, [r2, #8]
 8001880:	e072      	b.n	8001968 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	015a      	lsls	r2, r3, #5
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4413      	add	r3, r2
 800188a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	2b08      	cmp	r3, #8
 8001896:	d11a      	bne.n	80018ce <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	015a      	lsls	r2, r3, #5
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4413      	add	r3, r2
 80018a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018a4:	461a      	mov	r2, r3
 80018a6:	2308      	movs	r3, #8
 80018a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	212c      	movs	r1, #44	; 0x2c
 80018b0:	fb01 f303 	mul.w	r3, r1, r3
 80018b4:	4413      	add	r3, r2
 80018b6:	3361      	adds	r3, #97	; 0x61
 80018b8:	2205      	movs	r2, #5
 80018ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	4611      	mov	r1, r2
 80018c6:	4618      	mov	r0, r3
 80018c8:	f002 fd55 	bl	8004376 <USB_HC_Halt>
 80018cc:	e04c      	b.n	8001968 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	015a      	lsls	r2, r3, #5
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4413      	add	r3, r2
 80018d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018e4:	d11b      	bne.n	800191e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	015a      	lsls	r2, r3, #5
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4413      	add	r3, r2
 80018ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018f2:	461a      	mov	r2, r3
 80018f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	212c      	movs	r1, #44	; 0x2c
 8001900:	fb01 f303 	mul.w	r3, r1, r3
 8001904:	4413      	add	r3, r2
 8001906:	3361      	adds	r3, #97	; 0x61
 8001908:	2208      	movs	r2, #8
 800190a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	4611      	mov	r1, r2
 8001916:	4618      	mov	r0, r3
 8001918:	f002 fd2d 	bl	8004376 <USB_HC_Halt>
 800191c:	e024      	b.n	8001968 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	015a      	lsls	r2, r3, #5
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	4413      	add	r3, r2
 8001926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001930:	2b80      	cmp	r3, #128	; 0x80
 8001932:	d119      	bne.n	8001968 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	015a      	lsls	r2, r3, #5
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4413      	add	r3, r2
 800193c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001940:	461a      	mov	r2, r3
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	212c      	movs	r1, #44	; 0x2c
 800194c:	fb01 f303 	mul.w	r3, r1, r3
 8001950:	4413      	add	r3, r2
 8001952:	3361      	adds	r3, #97	; 0x61
 8001954:	2206      	movs	r2, #6
 8001956:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	4611      	mov	r1, r2
 8001962:	4618      	mov	r0, r3
 8001964:	f002 fd07 	bl	8004376 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	015a      	lsls	r2, r3, #5
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4413      	add	r3, r2
 8001970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800197a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800197e:	d112      	bne.n	80019a6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f002 fcf3 	bl	8004376 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	015a      	lsls	r2, r3, #5
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4413      	add	r3, r2
 8001998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800199c:	461a      	mov	r2, r3
 800199e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019a2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80019a4:	e24e      	b.n	8001e44 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	015a      	lsls	r2, r3, #5
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	4413      	add	r3, r2
 80019ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	f040 80df 	bne.w	8001b7c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d019      	beq.n	80019fa <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	212c      	movs	r1, #44	; 0x2c
 80019cc:	fb01 f303 	mul.w	r3, r1, r3
 80019d0:	4413      	add	r3, r2
 80019d2:	3348      	adds	r3, #72	; 0x48
 80019d4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	0159      	lsls	r1, r3, #5
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	440b      	add	r3, r1
 80019de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80019e8:	1ad2      	subs	r2, r2, r3
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	202c      	movs	r0, #44	; 0x2c
 80019f0:	fb00 f303 	mul.w	r3, r0, r3
 80019f4:	440b      	add	r3, r1
 80019f6:	3350      	adds	r3, #80	; 0x50
 80019f8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	212c      	movs	r1, #44	; 0x2c
 8001a00:	fb01 f303 	mul.w	r3, r1, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	3361      	adds	r3, #97	; 0x61
 8001a08:	2201      	movs	r2, #1
 8001a0a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	212c      	movs	r1, #44	; 0x2c
 8001a12:	fb01 f303 	mul.w	r3, r1, r3
 8001a16:	4413      	add	r3, r2
 8001a18:	335c      	adds	r3, #92	; 0x5c
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	015a      	lsls	r2, r3, #5
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	4413      	add	r3, r2
 8001a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	212c      	movs	r1, #44	; 0x2c
 8001a36:	fb01 f303 	mul.w	r3, r1, r3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	333f      	adds	r3, #63	; 0x3f
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d009      	beq.n	8001a58 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	212c      	movs	r1, #44	; 0x2c
 8001a4a:	fb01 f303 	mul.w	r3, r1, r3
 8001a4e:	4413      	add	r3, r2
 8001a50:	333f      	adds	r3, #63	; 0x3f
 8001a52:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d111      	bne.n	8001a7c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f002 fc87 	bl	8004376 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	015a      	lsls	r2, r3, #5
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4413      	add	r3, r2
 8001a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a74:	461a      	mov	r2, r3
 8001a76:	2310      	movs	r3, #16
 8001a78:	6093      	str	r3, [r2, #8]
 8001a7a:	e03a      	b.n	8001af2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	212c      	movs	r1, #44	; 0x2c
 8001a82:	fb01 f303 	mul.w	r3, r1, r3
 8001a86:	4413      	add	r3, r2
 8001a88:	333f      	adds	r3, #63	; 0x3f
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	d009      	beq.n	8001aa4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	212c      	movs	r1, #44	; 0x2c
 8001a96:	fb01 f303 	mul.w	r3, r1, r3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	333f      	adds	r3, #63	; 0x3f
 8001a9e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d126      	bne.n	8001af2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	015a      	lsls	r2, r3, #5
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4413      	add	r3, r2
 8001aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	0151      	lsls	r1, r2, #5
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	440a      	add	r2, r1
 8001aba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001abe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ac2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	212c      	movs	r1, #44	; 0x2c
 8001aca:	fb01 f303 	mul.w	r3, r1, r3
 8001ace:	4413      	add	r3, r2
 8001ad0:	3360      	adds	r3, #96	; 0x60
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	b2d9      	uxtb	r1, r3
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	202c      	movs	r0, #44	; 0x2c
 8001ae0:	fb00 f303 	mul.w	r3, r0, r3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3360      	adds	r3, #96	; 0x60
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	461a      	mov	r2, r3
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f004 fee5 	bl	80068bc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d12b      	bne.n	8001b52 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	212c      	movs	r1, #44	; 0x2c
 8001b00:	fb01 f303 	mul.w	r3, r1, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	3348      	adds	r3, #72	; 0x48
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	202c      	movs	r0, #44	; 0x2c
 8001b10:	fb00 f202 	mul.w	r2, r0, r2
 8001b14:	440a      	add	r2, r1
 8001b16:	3240      	adds	r2, #64	; 0x40
 8001b18:	8812      	ldrh	r2, [r2, #0]
 8001b1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 818e 	beq.w	8001e44 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	212c      	movs	r1, #44	; 0x2c
 8001b2e:	fb01 f303 	mul.w	r3, r1, r3
 8001b32:	4413      	add	r3, r2
 8001b34:	3354      	adds	r3, #84	; 0x54
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	f083 0301 	eor.w	r3, r3, #1
 8001b3c:	b2d8      	uxtb	r0, r3
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	212c      	movs	r1, #44	; 0x2c
 8001b44:	fb01 f303 	mul.w	r3, r1, r3
 8001b48:	4413      	add	r3, r2
 8001b4a:	3354      	adds	r3, #84	; 0x54
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	701a      	strb	r2, [r3, #0]
}
 8001b50:	e178      	b.n	8001e44 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	212c      	movs	r1, #44	; 0x2c
 8001b58:	fb01 f303 	mul.w	r3, r1, r3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3354      	adds	r3, #84	; 0x54
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	f083 0301 	eor.w	r3, r3, #1
 8001b66:	b2d8      	uxtb	r0, r3
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	212c      	movs	r1, #44	; 0x2c
 8001b6e:	fb01 f303 	mul.w	r3, r1, r3
 8001b72:	4413      	add	r3, r2
 8001b74:	3354      	adds	r3, #84	; 0x54
 8001b76:	4602      	mov	r2, r0
 8001b78:	701a      	strb	r2, [r3, #0]
}
 8001b7a:	e163      	b.n	8001e44 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	015a      	lsls	r2, r3, #5
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4413      	add	r3, r2
 8001b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	f040 80f6 	bne.w	8001d80 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	212c      	movs	r1, #44	; 0x2c
 8001b9a:	fb01 f303 	mul.w	r3, r1, r3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3361      	adds	r3, #97	; 0x61
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d109      	bne.n	8001bbc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	212c      	movs	r1, #44	; 0x2c
 8001bae:	fb01 f303 	mul.w	r3, r1, r3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3360      	adds	r3, #96	; 0x60
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	701a      	strb	r2, [r3, #0]
 8001bba:	e0c9      	b.n	8001d50 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	212c      	movs	r1, #44	; 0x2c
 8001bc2:	fb01 f303 	mul.w	r3, r1, r3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3361      	adds	r3, #97	; 0x61
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b05      	cmp	r3, #5
 8001bce:	d109      	bne.n	8001be4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	212c      	movs	r1, #44	; 0x2c
 8001bd6:	fb01 f303 	mul.w	r3, r1, r3
 8001bda:	4413      	add	r3, r2
 8001bdc:	3360      	adds	r3, #96	; 0x60
 8001bde:	2205      	movs	r2, #5
 8001be0:	701a      	strb	r2, [r3, #0]
 8001be2:	e0b5      	b.n	8001d50 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	212c      	movs	r1, #44	; 0x2c
 8001bea:	fb01 f303 	mul.w	r3, r1, r3
 8001bee:	4413      	add	r3, r2
 8001bf0:	3361      	adds	r3, #97	; 0x61
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b06      	cmp	r3, #6
 8001bf6:	d009      	beq.n	8001c0c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	212c      	movs	r1, #44	; 0x2c
 8001bfe:	fb01 f303 	mul.w	r3, r1, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	3361      	adds	r3, #97	; 0x61
 8001c06:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d150      	bne.n	8001cae <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	212c      	movs	r1, #44	; 0x2c
 8001c12:	fb01 f303 	mul.w	r3, r1, r3
 8001c16:	4413      	add	r3, r2
 8001c18:	335c      	adds	r3, #92	; 0x5c
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	202c      	movs	r0, #44	; 0x2c
 8001c24:	fb00 f303 	mul.w	r3, r0, r3
 8001c28:	440b      	add	r3, r1
 8001c2a:	335c      	adds	r3, #92	; 0x5c
 8001c2c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	212c      	movs	r1, #44	; 0x2c
 8001c34:	fb01 f303 	mul.w	r3, r1, r3
 8001c38:	4413      	add	r3, r2
 8001c3a:	335c      	adds	r3, #92	; 0x5c
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d912      	bls.n	8001c68 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	212c      	movs	r1, #44	; 0x2c
 8001c48:	fb01 f303 	mul.w	r3, r1, r3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	335c      	adds	r3, #92	; 0x5c
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	212c      	movs	r1, #44	; 0x2c
 8001c5a:	fb01 f303 	mul.w	r3, r1, r3
 8001c5e:	4413      	add	r3, r2
 8001c60:	3360      	adds	r3, #96	; 0x60
 8001c62:	2204      	movs	r2, #4
 8001c64:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001c66:	e073      	b.n	8001d50 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	212c      	movs	r1, #44	; 0x2c
 8001c6e:	fb01 f303 	mul.w	r3, r1, r3
 8001c72:	4413      	add	r3, r2
 8001c74:	3360      	adds	r3, #96	; 0x60
 8001c76:	2202      	movs	r2, #2
 8001c78:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	015a      	lsls	r2, r3, #5
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4413      	add	r3, r2
 8001c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001c90:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c98:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	015a      	lsls	r2, r3, #5
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001cac:	e050      	b.n	8001d50 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	212c      	movs	r1, #44	; 0x2c
 8001cb4:	fb01 f303 	mul.w	r3, r1, r3
 8001cb8:	4413      	add	r3, r2
 8001cba:	3361      	adds	r3, #97	; 0x61
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d122      	bne.n	8001d08 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	212c      	movs	r1, #44	; 0x2c
 8001cc8:	fb01 f303 	mul.w	r3, r1, r3
 8001ccc:	4413      	add	r3, r2
 8001cce:	3360      	adds	r3, #96	; 0x60
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	015a      	lsls	r2, r3, #5
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001cea:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001cf2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	015a      	lsls	r2, r3, #5
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d00:	461a      	mov	r2, r3
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	e023      	b.n	8001d50 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	212c      	movs	r1, #44	; 0x2c
 8001d0e:	fb01 f303 	mul.w	r3, r1, r3
 8001d12:	4413      	add	r3, r2
 8001d14:	3361      	adds	r3, #97	; 0x61
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b07      	cmp	r3, #7
 8001d1a:	d119      	bne.n	8001d50 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	212c      	movs	r1, #44	; 0x2c
 8001d22:	fb01 f303 	mul.w	r3, r1, r3
 8001d26:	4413      	add	r3, r2
 8001d28:	335c      	adds	r3, #92	; 0x5c
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	202c      	movs	r0, #44	; 0x2c
 8001d34:	fb00 f303 	mul.w	r3, r0, r3
 8001d38:	440b      	add	r3, r1
 8001d3a:	335c      	adds	r3, #92	; 0x5c
 8001d3c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	212c      	movs	r1, #44	; 0x2c
 8001d44:	fb01 f303 	mul.w	r3, r1, r3
 8001d48:	4413      	add	r3, r2
 8001d4a:	3360      	adds	r3, #96	; 0x60
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	015a      	lsls	r2, r3, #5
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4413      	add	r3, r2
 8001d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	2302      	movs	r3, #2
 8001d60:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	b2d9      	uxtb	r1, r3
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	202c      	movs	r0, #44	; 0x2c
 8001d6c:	fb00 f303 	mul.w	r3, r0, r3
 8001d70:	4413      	add	r3, r2
 8001d72:	3360      	adds	r3, #96	; 0x60
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f004 fd9f 	bl	80068bc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001d7e:	e061      	b.n	8001e44 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	015a      	lsls	r2, r3, #5
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4413      	add	r3, r2
 8001d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 0310 	and.w	r3, r3, #16
 8001d92:	2b10      	cmp	r3, #16
 8001d94:	d156      	bne.n	8001e44 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	212c      	movs	r1, #44	; 0x2c
 8001d9c:	fb01 f303 	mul.w	r3, r1, r3
 8001da0:	4413      	add	r3, r2
 8001da2:	333f      	adds	r3, #63	; 0x3f
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d111      	bne.n	8001dce <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	212c      	movs	r1, #44	; 0x2c
 8001db0:	fb01 f303 	mul.w	r3, r1, r3
 8001db4:	4413      	add	r3, r2
 8001db6:	335c      	adds	r3, #92	; 0x5c
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f002 fad5 	bl	8004376 <USB_HC_Halt>
 8001dcc:	e031      	b.n	8001e32 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	212c      	movs	r1, #44	; 0x2c
 8001dd4:	fb01 f303 	mul.w	r3, r1, r3
 8001dd8:	4413      	add	r3, r2
 8001dda:	333f      	adds	r3, #63	; 0x3f
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d009      	beq.n	8001df6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	212c      	movs	r1, #44	; 0x2c
 8001de8:	fb01 f303 	mul.w	r3, r1, r3
 8001dec:	4413      	add	r3, r2
 8001dee:	333f      	adds	r3, #63	; 0x3f
 8001df0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d11d      	bne.n	8001e32 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	212c      	movs	r1, #44	; 0x2c
 8001dfc:	fb01 f303 	mul.w	r3, r1, r3
 8001e00:	4413      	add	r3, r2
 8001e02:	335c      	adds	r3, #92	; 0x5c
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d110      	bne.n	8001e32 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	212c      	movs	r1, #44	; 0x2c
 8001e16:	fb01 f303 	mul.w	r3, r1, r3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3361      	adds	r3, #97	; 0x61
 8001e1e:	2203      	movs	r2, #3
 8001e20:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f002 faa2 	bl	8004376 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	015a      	lsls	r2, r3, #5
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4413      	add	r3, r2
 8001e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3e:	461a      	mov	r2, r3
 8001e40:	2310      	movs	r3, #16
 8001e42:	6093      	str	r3, [r2, #8]
}
 8001e44:	bf00      	nop
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	015a      	lsls	r2, r3, #5
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d11a      	bne.n	8001eb2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	015a      	lsls	r2, r3, #5
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e88:	461a      	mov	r2, r3
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	212c      	movs	r1, #44	; 0x2c
 8001e94:	fb01 f303 	mul.w	r3, r1, r3
 8001e98:	4413      	add	r3, r2
 8001e9a:	3361      	adds	r3, #97	; 0x61
 8001e9c:	2206      	movs	r2, #6
 8001e9e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f002 fa63 	bl	8004376 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8001eb0:	e331      	b.n	8002516 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	015a      	lsls	r2, r3, #5
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 0320 	and.w	r3, r3, #32
 8001ec4:	2b20      	cmp	r3, #32
 8001ec6:	d12e      	bne.n	8001f26 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	015a      	lsls	r2, r3, #5
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	4413      	add	r3, r2
 8001ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	2320      	movs	r3, #32
 8001ed8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	212c      	movs	r1, #44	; 0x2c
 8001ee0:	fb01 f303 	mul.w	r3, r1, r3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	333d      	adds	r3, #61	; 0x3d
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	f040 8313 	bne.w	8002516 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	212c      	movs	r1, #44	; 0x2c
 8001ef6:	fb01 f303 	mul.w	r3, r1, r3
 8001efa:	4413      	add	r3, r2
 8001efc:	333d      	adds	r3, #61	; 0x3d
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	212c      	movs	r1, #44	; 0x2c
 8001f08:	fb01 f303 	mul.w	r3, r1, r3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3360      	adds	r3, #96	; 0x60
 8001f10:	2202      	movs	r2, #2
 8001f12:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	4611      	mov	r1, r2
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f002 fa29 	bl	8004376 <USB_HC_Halt>
}
 8001f24:	e2f7      	b.n	8002516 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f3c:	d112      	bne.n	8001f64 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	015a      	lsls	r2, r3, #5
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	4413      	add	r3, r2
 8001f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f50:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f002 fa0a 	bl	8004376 <USB_HC_Halt>
}
 8001f62:	e2d8      	b.n	8002516 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	015a      	lsls	r2, r3, #5
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d140      	bne.n	8001ffc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	212c      	movs	r1, #44	; 0x2c
 8001f80:	fb01 f303 	mul.w	r3, r1, r3
 8001f84:	4413      	add	r3, r2
 8001f86:	335c      	adds	r3, #92	; 0x5c
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9e:	2b40      	cmp	r3, #64	; 0x40
 8001fa0:	d111      	bne.n	8001fc6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	212c      	movs	r1, #44	; 0x2c
 8001fa8:	fb01 f303 	mul.w	r3, r1, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	333d      	adds	r3, #61	; 0x3d
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	2340      	movs	r3, #64	; 0x40
 8001fc4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	212c      	movs	r1, #44	; 0x2c
 8001fde:	fb01 f303 	mul.w	r3, r1, r3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3361      	adds	r3, #97	; 0x61
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f002 f9be 	bl	8004376 <USB_HC_Halt>
}
 8001ffa:	e28c      	b.n	8002516 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	015a      	lsls	r2, r3, #5
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	4413      	add	r3, r2
 8002004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200e:	2b40      	cmp	r3, #64	; 0x40
 8002010:	d12c      	bne.n	800206c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	212c      	movs	r1, #44	; 0x2c
 8002018:	fb01 f303 	mul.w	r3, r1, r3
 800201c:	4413      	add	r3, r2
 800201e:	3361      	adds	r3, #97	; 0x61
 8002020:	2204      	movs	r2, #4
 8002022:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	212c      	movs	r1, #44	; 0x2c
 800202a:	fb01 f303 	mul.w	r3, r1, r3
 800202e:	4413      	add	r3, r2
 8002030:	333d      	adds	r3, #61	; 0x3d
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	212c      	movs	r1, #44	; 0x2c
 800203c:	fb01 f303 	mul.w	r3, r1, r3
 8002040:	4413      	add	r3, r2
 8002042:	335c      	adds	r3, #92	; 0x5c
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	4611      	mov	r1, r2
 8002052:	4618      	mov	r0, r3
 8002054:	f002 f98f 	bl	8004376 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	015a      	lsls	r2, r3, #5
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	4413      	add	r3, r2
 8002060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002064:	461a      	mov	r2, r3
 8002066:	2340      	movs	r3, #64	; 0x40
 8002068:	6093      	str	r3, [r2, #8]
}
 800206a:	e254      	b.n	8002516 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	015a      	lsls	r2, r3, #5
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	4413      	add	r3, r2
 8002074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b08      	cmp	r3, #8
 8002080:	d11a      	bne.n	80020b8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	015a      	lsls	r2, r3, #5
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	4413      	add	r3, r2
 800208a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208e:	461a      	mov	r2, r3
 8002090:	2308      	movs	r3, #8
 8002092:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	212c      	movs	r1, #44	; 0x2c
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	4413      	add	r3, r2
 80020a0:	3361      	adds	r3, #97	; 0x61
 80020a2:	2205      	movs	r2, #5
 80020a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	4611      	mov	r1, r2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f002 f960 	bl	8004376 <USB_HC_Halt>
}
 80020b6:	e22e      	b.n	8002516 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	015a      	lsls	r2, r3, #5
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	4413      	add	r3, r2
 80020c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 0310 	and.w	r3, r3, #16
 80020ca:	2b10      	cmp	r3, #16
 80020cc:	d140      	bne.n	8002150 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	212c      	movs	r1, #44	; 0x2c
 80020d4:	fb01 f303 	mul.w	r3, r1, r3
 80020d8:	4413      	add	r3, r2
 80020da:	335c      	adds	r3, #92	; 0x5c
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	212c      	movs	r1, #44	; 0x2c
 80020e6:	fb01 f303 	mul.w	r3, r1, r3
 80020ea:	4413      	add	r3, r2
 80020ec:	3361      	adds	r3, #97	; 0x61
 80020ee:	2203      	movs	r2, #3
 80020f0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	212c      	movs	r1, #44	; 0x2c
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	333d      	adds	r3, #61	; 0x3d
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d112      	bne.n	800212c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	212c      	movs	r1, #44	; 0x2c
 800210c:	fb01 f303 	mul.w	r3, r1, r3
 8002110:	4413      	add	r3, r2
 8002112:	333c      	adds	r3, #60	; 0x3c
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d108      	bne.n	800212c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	212c      	movs	r1, #44	; 0x2c
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	4413      	add	r3, r2
 8002126:	333d      	adds	r3, #61	; 0x3d
 8002128:	2201      	movs	r2, #1
 800212a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	4611      	mov	r1, r2
 8002136:	4618      	mov	r0, r3
 8002138:	f002 f91d 	bl	8004376 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	4413      	add	r3, r2
 8002144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002148:	461a      	mov	r2, r3
 800214a:	2310      	movs	r3, #16
 800214c:	6093      	str	r3, [r2, #8]
}
 800214e:	e1e2      	b.n	8002516 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	015a      	lsls	r2, r3, #5
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	4413      	add	r3, r2
 8002158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002162:	2b80      	cmp	r3, #128	; 0x80
 8002164:	d164      	bne.n	8002230 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d111      	bne.n	8002192 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	212c      	movs	r1, #44	; 0x2c
 8002174:	fb01 f303 	mul.w	r3, r1, r3
 8002178:	4413      	add	r3, r2
 800217a:	3361      	adds	r3, #97	; 0x61
 800217c:	2206      	movs	r2, #6
 800217e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f002 f8f3 	bl	8004376 <USB_HC_Halt>
 8002190:	e044      	b.n	800221c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	212c      	movs	r1, #44	; 0x2c
 8002198:	fb01 f303 	mul.w	r3, r1, r3
 800219c:	4413      	add	r3, r2
 800219e:	335c      	adds	r3, #92	; 0x5c
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	202c      	movs	r0, #44	; 0x2c
 80021aa:	fb00 f303 	mul.w	r3, r0, r3
 80021ae:	440b      	add	r3, r1
 80021b0:	335c      	adds	r3, #92	; 0x5c
 80021b2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	212c      	movs	r1, #44	; 0x2c
 80021ba:	fb01 f303 	mul.w	r3, r1, r3
 80021be:	4413      	add	r3, r2
 80021c0:	335c      	adds	r3, #92	; 0x5c
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d920      	bls.n	800220a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	212c      	movs	r1, #44	; 0x2c
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	335c      	adds	r3, #92	; 0x5c
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	212c      	movs	r1, #44	; 0x2c
 80021e0:	fb01 f303 	mul.w	r3, r1, r3
 80021e4:	4413      	add	r3, r2
 80021e6:	3360      	adds	r3, #96	; 0x60
 80021e8:	2204      	movs	r2, #4
 80021ea:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	b2d9      	uxtb	r1, r3
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	202c      	movs	r0, #44	; 0x2c
 80021f6:	fb00 f303 	mul.w	r3, r0, r3
 80021fa:	4413      	add	r3, r2
 80021fc:	3360      	adds	r3, #96	; 0x60
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f004 fb5a 	bl	80068bc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002208:	e008      	b.n	800221c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	212c      	movs	r1, #44	; 0x2c
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	4413      	add	r3, r2
 8002216:	3360      	adds	r3, #96	; 0x60
 8002218:	2202      	movs	r2, #2
 800221a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	015a      	lsls	r2, r3, #5
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	4413      	add	r3, r2
 8002224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002228:	461a      	mov	r2, r3
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	6093      	str	r3, [r2, #8]
}
 800222e:	e172      	b.n	8002516 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	015a      	lsls	r2, r3, #5
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	4413      	add	r3, r2
 8002238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002246:	d11b      	bne.n	8002280 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	212c      	movs	r1, #44	; 0x2c
 800224e:	fb01 f303 	mul.w	r3, r1, r3
 8002252:	4413      	add	r3, r2
 8002254:	3361      	adds	r3, #97	; 0x61
 8002256:	2208      	movs	r2, #8
 8002258:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f002 f886 	bl	8004376 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	4413      	add	r3, r2
 8002272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002276:	461a      	mov	r2, r3
 8002278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800227c:	6093      	str	r3, [r2, #8]
}
 800227e:	e14a      	b.n	8002516 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	4413      	add	r3, r2
 8002288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b02      	cmp	r3, #2
 8002294:	f040 813f 	bne.w	8002516 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	212c      	movs	r1, #44	; 0x2c
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	3361      	adds	r3, #97	; 0x61
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d17d      	bne.n	80023a8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	212c      	movs	r1, #44	; 0x2c
 80022b2:	fb01 f303 	mul.w	r3, r1, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	3360      	adds	r3, #96	; 0x60
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	212c      	movs	r1, #44	; 0x2c
 80022c4:	fb01 f303 	mul.w	r3, r1, r3
 80022c8:	4413      	add	r3, r2
 80022ca:	333f      	adds	r3, #63	; 0x3f
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d00a      	beq.n	80022e8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	212c      	movs	r1, #44	; 0x2c
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	4413      	add	r3, r2
 80022de:	333f      	adds	r3, #63	; 0x3f
 80022e0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	f040 8100 	bne.w	80024e8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d113      	bne.n	8002318 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	212c      	movs	r1, #44	; 0x2c
 80022f6:	fb01 f303 	mul.w	r3, r1, r3
 80022fa:	4413      	add	r3, r2
 80022fc:	3355      	adds	r3, #85	; 0x55
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	f083 0301 	eor.w	r3, r3, #1
 8002304:	b2d8      	uxtb	r0, r3
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	212c      	movs	r1, #44	; 0x2c
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	4413      	add	r3, r2
 8002312:	3355      	adds	r3, #85	; 0x55
 8002314:	4602      	mov	r2, r0
 8002316:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	2b01      	cmp	r3, #1
 800231e:	f040 80e3 	bne.w	80024e8 <HCD_HC_OUT_IRQHandler+0x69c>
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	212c      	movs	r1, #44	; 0x2c
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	4413      	add	r3, r2
 800232e:	334c      	adds	r3, #76	; 0x4c
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 80d8 	beq.w	80024e8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	212c      	movs	r1, #44	; 0x2c
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	4413      	add	r3, r2
 8002344:	334c      	adds	r3, #76	; 0x4c
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	202c      	movs	r0, #44	; 0x2c
 800234e:	fb00 f202 	mul.w	r2, r0, r2
 8002352:	440a      	add	r2, r1
 8002354:	3240      	adds	r2, #64	; 0x40
 8002356:	8812      	ldrh	r2, [r2, #0]
 8002358:	4413      	add	r3, r2
 800235a:	3b01      	subs	r3, #1
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	202c      	movs	r0, #44	; 0x2c
 8002362:	fb00 f202 	mul.w	r2, r0, r2
 8002366:	440a      	add	r2, r1
 8002368:	3240      	adds	r2, #64	; 0x40
 800236a:	8812      	ldrh	r2, [r2, #0]
 800236c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002370:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80b5 	beq.w	80024e8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	212c      	movs	r1, #44	; 0x2c
 8002384:	fb01 f303 	mul.w	r3, r1, r3
 8002388:	4413      	add	r3, r2
 800238a:	3355      	adds	r3, #85	; 0x55
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	f083 0301 	eor.w	r3, r3, #1
 8002392:	b2d8      	uxtb	r0, r3
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	212c      	movs	r1, #44	; 0x2c
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	3355      	adds	r3, #85	; 0x55
 80023a2:	4602      	mov	r2, r0
 80023a4:	701a      	strb	r2, [r3, #0]
 80023a6:	e09f      	b.n	80024e8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	212c      	movs	r1, #44	; 0x2c
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	3361      	adds	r3, #97	; 0x61
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d109      	bne.n	80023d0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	212c      	movs	r1, #44	; 0x2c
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	3360      	adds	r3, #96	; 0x60
 80023ca:	2202      	movs	r2, #2
 80023cc:	701a      	strb	r2, [r3, #0]
 80023ce:	e08b      	b.n	80024e8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	212c      	movs	r1, #44	; 0x2c
 80023d6:	fb01 f303 	mul.w	r3, r1, r3
 80023da:	4413      	add	r3, r2
 80023dc:	3361      	adds	r3, #97	; 0x61
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d109      	bne.n	80023f8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	212c      	movs	r1, #44	; 0x2c
 80023ea:	fb01 f303 	mul.w	r3, r1, r3
 80023ee:	4413      	add	r3, r2
 80023f0:	3360      	adds	r3, #96	; 0x60
 80023f2:	2202      	movs	r2, #2
 80023f4:	701a      	strb	r2, [r3, #0]
 80023f6:	e077      	b.n	80024e8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	212c      	movs	r1, #44	; 0x2c
 80023fe:	fb01 f303 	mul.w	r3, r1, r3
 8002402:	4413      	add	r3, r2
 8002404:	3361      	adds	r3, #97	; 0x61
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b05      	cmp	r3, #5
 800240a:	d109      	bne.n	8002420 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	212c      	movs	r1, #44	; 0x2c
 8002412:	fb01 f303 	mul.w	r3, r1, r3
 8002416:	4413      	add	r3, r2
 8002418:	3360      	adds	r3, #96	; 0x60
 800241a:	2205      	movs	r2, #5
 800241c:	701a      	strb	r2, [r3, #0]
 800241e:	e063      	b.n	80024e8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	212c      	movs	r1, #44	; 0x2c
 8002426:	fb01 f303 	mul.w	r3, r1, r3
 800242a:	4413      	add	r3, r2
 800242c:	3361      	adds	r3, #97	; 0x61
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b06      	cmp	r3, #6
 8002432:	d009      	beq.n	8002448 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	212c      	movs	r1, #44	; 0x2c
 800243a:	fb01 f303 	mul.w	r3, r1, r3
 800243e:	4413      	add	r3, r2
 8002440:	3361      	adds	r3, #97	; 0x61
 8002442:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002444:	2b08      	cmp	r3, #8
 8002446:	d14f      	bne.n	80024e8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	212c      	movs	r1, #44	; 0x2c
 800244e:	fb01 f303 	mul.w	r3, r1, r3
 8002452:	4413      	add	r3, r2
 8002454:	335c      	adds	r3, #92	; 0x5c
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	202c      	movs	r0, #44	; 0x2c
 8002460:	fb00 f303 	mul.w	r3, r0, r3
 8002464:	440b      	add	r3, r1
 8002466:	335c      	adds	r3, #92	; 0x5c
 8002468:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	212c      	movs	r1, #44	; 0x2c
 8002470:	fb01 f303 	mul.w	r3, r1, r3
 8002474:	4413      	add	r3, r2
 8002476:	335c      	adds	r3, #92	; 0x5c
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d912      	bls.n	80024a4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	212c      	movs	r1, #44	; 0x2c
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	4413      	add	r3, r2
 800248a:	335c      	adds	r3, #92	; 0x5c
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	212c      	movs	r1, #44	; 0x2c
 8002496:	fb01 f303 	mul.w	r3, r1, r3
 800249a:	4413      	add	r3, r2
 800249c:	3360      	adds	r3, #96	; 0x60
 800249e:	2204      	movs	r2, #4
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	e021      	b.n	80024e8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	212c      	movs	r1, #44	; 0x2c
 80024aa:	fb01 f303 	mul.w	r3, r1, r3
 80024ae:	4413      	add	r3, r2
 80024b0:	3360      	adds	r3, #96	; 0x60
 80024b2:	2202      	movs	r2, #2
 80024b4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024cc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024d4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e2:	461a      	mov	r2, r3
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f4:	461a      	mov	r2, r3
 80024f6:	2302      	movs	r3, #2
 80024f8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	b2d9      	uxtb	r1, r3
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	202c      	movs	r0, #44	; 0x2c
 8002504:	fb00 f303 	mul.w	r3, r0, r3
 8002508:	4413      	add	r3, r2
 800250a:	3360      	adds	r3, #96	; 0x60
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	461a      	mov	r2, r3
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f004 f9d3 	bl	80068bc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002516:	bf00      	nop
 8002518:	3720      	adds	r7, #32
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b08a      	sub	sp, #40	; 0x28
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	0c5b      	lsrs	r3, r3, #17
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002552:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d004      	beq.n	8002564 <HCD_RXQLVL_IRQHandler+0x46>
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2b05      	cmp	r3, #5
 800255e:	f000 80a9 	beq.w	80026b4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002562:	e0aa      	b.n	80026ba <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 80a6 	beq.w	80026b8 <HCD_RXQLVL_IRQHandler+0x19a>
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	212c      	movs	r1, #44	; 0x2c
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4413      	add	r3, r2
 8002578:	3344      	adds	r3, #68	; 0x44
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 809b 	beq.w	80026b8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	212c      	movs	r1, #44	; 0x2c
 8002588:	fb01 f303 	mul.w	r3, r1, r3
 800258c:	4413      	add	r3, r2
 800258e:	3350      	adds	r3, #80	; 0x50
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	441a      	add	r2, r3
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	202c      	movs	r0, #44	; 0x2c
 800259c:	fb00 f303 	mul.w	r3, r0, r3
 80025a0:	440b      	add	r3, r1
 80025a2:	334c      	adds	r3, #76	; 0x4c
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d87a      	bhi.n	80026a0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	212c      	movs	r1, #44	; 0x2c
 80025b4:	fb01 f303 	mul.w	r3, r1, r3
 80025b8:	4413      	add	r3, r2
 80025ba:	3344      	adds	r3, #68	; 0x44
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	b292      	uxth	r2, r2
 80025c2:	4619      	mov	r1, r3
 80025c4:	f001 fa2e 	bl	8003a24 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	212c      	movs	r1, #44	; 0x2c
 80025ce:	fb01 f303 	mul.w	r3, r1, r3
 80025d2:	4413      	add	r3, r2
 80025d4:	3344      	adds	r3, #68	; 0x44
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	441a      	add	r2, r3
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	202c      	movs	r0, #44	; 0x2c
 80025e2:	fb00 f303 	mul.w	r3, r0, r3
 80025e6:	440b      	add	r3, r1
 80025e8:	3344      	adds	r3, #68	; 0x44
 80025ea:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	212c      	movs	r1, #44	; 0x2c
 80025f2:	fb01 f303 	mul.w	r3, r1, r3
 80025f6:	4413      	add	r3, r2
 80025f8:	3350      	adds	r3, #80	; 0x50
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	441a      	add	r2, r3
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	202c      	movs	r0, #44	; 0x2c
 8002606:	fb00 f303 	mul.w	r3, r0, r3
 800260a:	440b      	add	r3, r1
 800260c:	3350      	adds	r3, #80	; 0x50
 800260e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	015a      	lsls	r2, r3, #5
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	4413      	add	r3, r2
 8002618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	0cdb      	lsrs	r3, r3, #19
 8002620:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002624:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	212c      	movs	r1, #44	; 0x2c
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	4413      	add	r3, r2
 8002632:	3340      	adds	r3, #64	; 0x40
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4293      	cmp	r3, r2
 800263c:	d13c      	bne.n	80026b8 <HCD_RXQLVL_IRQHandler+0x19a>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d039      	beq.n	80026b8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	4413      	add	r3, r2
 800264c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800265a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002662:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	4413      	add	r3, r2
 800266c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002670:	461a      	mov	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	212c      	movs	r1, #44	; 0x2c
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	4413      	add	r3, r2
 8002682:	3354      	adds	r3, #84	; 0x54
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	f083 0301 	eor.w	r3, r3, #1
 800268a:	b2d8      	uxtb	r0, r3
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	212c      	movs	r1, #44	; 0x2c
 8002692:	fb01 f303 	mul.w	r3, r1, r3
 8002696:	4413      	add	r3, r2
 8002698:	3354      	adds	r3, #84	; 0x54
 800269a:	4602      	mov	r2, r0
 800269c:	701a      	strb	r2, [r3, #0]
      break;
 800269e:	e00b      	b.n	80026b8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	212c      	movs	r1, #44	; 0x2c
 80026a6:	fb01 f303 	mul.w	r3, r1, r3
 80026aa:	4413      	add	r3, r2
 80026ac:	3360      	adds	r3, #96	; 0x60
 80026ae:	2204      	movs	r2, #4
 80026b0:	701a      	strb	r2, [r3, #0]
      break;
 80026b2:	e001      	b.n	80026b8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80026b4:	bf00      	nop
 80026b6:	e000      	b.n	80026ba <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80026b8:	bf00      	nop
  }
}
 80026ba:	bf00      	nop
 80026bc:	3728      	adds	r7, #40	; 0x28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b086      	sub	sp, #24
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80026ee:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d10b      	bne.n	8002712 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b01      	cmp	r3, #1
 8002702:	d102      	bne.n	800270a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f004 f8bd 	bl	8006884 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f043 0302 	orr.w	r3, r3, #2
 8002710:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b08      	cmp	r3, #8
 800271a:	d132      	bne.n	8002782 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f043 0308 	orr.w	r3, r3, #8
 8002722:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	2b04      	cmp	r3, #4
 800272c:	d126      	bne.n	800277c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d113      	bne.n	800275e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800273c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002740:	d106      	bne.n	8002750 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2102      	movs	r1, #2
 8002748:	4618      	mov	r0, r3
 800274a:	f001 fad9 	bl	8003d00 <USB_InitFSLSPClkSel>
 800274e:	e011      	b.n	8002774 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2101      	movs	r1, #1
 8002756:	4618      	mov	r0, r3
 8002758:	f001 fad2 	bl	8003d00 <USB_InitFSLSPClkSel>
 800275c:	e00a      	b.n	8002774 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d106      	bne.n	8002774 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800276c:	461a      	mov	r2, r3
 800276e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002772:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f004 f8af 	bl	80068d8 <HAL_HCD_PortEnabled_Callback>
 800277a:	e002      	b.n	8002782 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f004 f8b9 	bl	80068f4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f003 0320 	and.w	r3, r3, #32
 8002788:	2b20      	cmp	r3, #32
 800278a:	d103      	bne.n	8002794 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f043 0320 	orr.w	r3, r3, #32
 8002792:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800279a:	461a      	mov	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	6013      	str	r3, [r2, #0]
}
 80027a0:	bf00      	nop
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e12b      	b.n	8002a12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fd fecc 	bl	800056c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2224      	movs	r2, #36	; 0x24
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0201 	bic.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800280a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800280c:	f000 fdbc 	bl	8003388 <HAL_RCC_GetPCLK1Freq>
 8002810:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4a81      	ldr	r2, [pc, #516]	; (8002a1c <HAL_I2C_Init+0x274>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d807      	bhi.n	800282c <HAL_I2C_Init+0x84>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4a80      	ldr	r2, [pc, #512]	; (8002a20 <HAL_I2C_Init+0x278>)
 8002820:	4293      	cmp	r3, r2
 8002822:	bf94      	ite	ls
 8002824:	2301      	movls	r3, #1
 8002826:	2300      	movhi	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	e006      	b.n	800283a <HAL_I2C_Init+0x92>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4a7d      	ldr	r2, [pc, #500]	; (8002a24 <HAL_I2C_Init+0x27c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	bf94      	ite	ls
 8002834:	2301      	movls	r3, #1
 8002836:	2300      	movhi	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e0e7      	b.n	8002a12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4a78      	ldr	r2, [pc, #480]	; (8002a28 <HAL_I2C_Init+0x280>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	0c9b      	lsrs	r3, r3, #18
 800284c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	430a      	orrs	r2, r1
 8002860:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4a6a      	ldr	r2, [pc, #424]	; (8002a1c <HAL_I2C_Init+0x274>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d802      	bhi.n	800287c <HAL_I2C_Init+0xd4>
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	3301      	adds	r3, #1
 800287a:	e009      	b.n	8002890 <HAL_I2C_Init+0xe8>
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002882:	fb02 f303 	mul.w	r3, r2, r3
 8002886:	4a69      	ldr	r2, [pc, #420]	; (8002a2c <HAL_I2C_Init+0x284>)
 8002888:	fba2 2303 	umull	r2, r3, r2, r3
 800288c:	099b      	lsrs	r3, r3, #6
 800288e:	3301      	adds	r3, #1
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	430b      	orrs	r3, r1
 8002896:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	495c      	ldr	r1, [pc, #368]	; (8002a1c <HAL_I2C_Init+0x274>)
 80028ac:	428b      	cmp	r3, r1
 80028ae:	d819      	bhi.n	80028e4 <HAL_I2C_Init+0x13c>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	1e59      	subs	r1, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80028be:	1c59      	adds	r1, r3, #1
 80028c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028c4:	400b      	ands	r3, r1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HAL_I2C_Init+0x138>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	1e59      	subs	r1, r3, #1
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80028d8:	3301      	adds	r3, #1
 80028da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028de:	e051      	b.n	8002984 <HAL_I2C_Init+0x1dc>
 80028e0:	2304      	movs	r3, #4
 80028e2:	e04f      	b.n	8002984 <HAL_I2C_Init+0x1dc>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d111      	bne.n	8002910 <HAL_I2C_Init+0x168>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1e58      	subs	r0, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6859      	ldr	r1, [r3, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	440b      	add	r3, r1
 80028fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80028fe:	3301      	adds	r3, #1
 8002900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002904:	2b00      	cmp	r3, #0
 8002906:	bf0c      	ite	eq
 8002908:	2301      	moveq	r3, #1
 800290a:	2300      	movne	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	e012      	b.n	8002936 <HAL_I2C_Init+0x18e>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1e58      	subs	r0, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6859      	ldr	r1, [r3, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	0099      	lsls	r1, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	fbb0 f3f3 	udiv	r3, r0, r3
 8002926:	3301      	adds	r3, #1
 8002928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292c:	2b00      	cmp	r3, #0
 800292e:	bf0c      	ite	eq
 8002930:	2301      	moveq	r3, #1
 8002932:	2300      	movne	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_I2C_Init+0x196>
 800293a:	2301      	movs	r3, #1
 800293c:	e022      	b.n	8002984 <HAL_I2C_Init+0x1dc>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10e      	bne.n	8002964 <HAL_I2C_Init+0x1bc>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1e58      	subs	r0, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6859      	ldr	r1, [r3, #4]
 800294e:	460b      	mov	r3, r1
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	440b      	add	r3, r1
 8002954:	fbb0 f3f3 	udiv	r3, r0, r3
 8002958:	3301      	adds	r3, #1
 800295a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002962:	e00f      	b.n	8002984 <HAL_I2C_Init+0x1dc>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	1e58      	subs	r0, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6859      	ldr	r1, [r3, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	0099      	lsls	r1, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	fbb0 f3f3 	udiv	r3, r0, r3
 800297a:	3301      	adds	r3, #1
 800297c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002980:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	6809      	ldr	r1, [r1, #0]
 8002988:	4313      	orrs	r3, r2
 800298a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69da      	ldr	r2, [r3, #28]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6911      	ldr	r1, [r2, #16]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68d2      	ldr	r2, [r2, #12]
 80029be:	4311      	orrs	r1, r2
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695a      	ldr	r2, [r3, #20]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	000186a0 	.word	0x000186a0
 8002a20:	001e847f 	.word	0x001e847f
 8002a24:	003d08ff 	.word	0x003d08ff
 8002a28:	431bde83 	.word	0x431bde83
 8002a2c:	10624dd3 	.word	0x10624dd3

08002a30 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e128      	b.n	8002c94 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a90      	ldr	r2, [pc, #576]	; (8002c9c <HAL_I2S_Init+0x26c>)
 8002a5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7fd fdcd 	bl	80005fc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2202      	movs	r2, #2
 8002a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6812      	ldr	r2, [r2, #0]
 8002a74:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002a78:	f023 030f 	bic.w	r3, r3, #15
 8002a7c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2202      	movs	r2, #2
 8002a84:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d060      	beq.n	8002b50 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d102      	bne.n	8002a9c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002a96:	2310      	movs	r3, #16
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	e001      	b.n	8002aa0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002a9c:	2320      	movs	r3, #32
 8002a9e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2b20      	cmp	r3, #32
 8002aa6:	d802      	bhi.n	8002aae <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002aae:	2001      	movs	r0, #1
 8002ab0:	f000 fd60 	bl	8003574 <HAL_RCCEx_GetPeriphCLKFreq>
 8002ab4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002abe:	d125      	bne.n	8002b0c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d010      	beq.n	8002aea <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	461a      	mov	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae4:	3305      	adds	r3, #5
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	e01f      	b.n	8002b2a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	461a      	mov	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b06:	3305      	adds	r3, #5
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	e00e      	b.n	8002b2a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b26:	3305      	adds	r3, #5
 8002b28:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4a5c      	ldr	r2, [pc, #368]	; (8002ca0 <HAL_I2S_Init+0x270>)
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	08db      	lsrs	r3, r3, #3
 8002b34:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	085b      	lsrs	r3, r3, #1
 8002b46:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	021b      	lsls	r3, r3, #8
 8002b4c:	61bb      	str	r3, [r7, #24]
 8002b4e:	e003      	b.n	8002b58 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002b50:	2302      	movs	r3, #2
 8002b52:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d902      	bls.n	8002b64 <HAL_I2S_Init+0x134>
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	2bff      	cmp	r3, #255	; 0xff
 8002b62:	d907      	bls.n	8002b74 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b68:	f043 0210 	orr.w	r2, r3, #16
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e08f      	b.n	8002c94 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	ea42 0103 	orr.w	r1, r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	69fa      	ldr	r2, [r7, #28]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002b92:	f023 030f 	bic.w	r3, r3, #15
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6851      	ldr	r1, [r2, #4]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6892      	ldr	r2, [r2, #8]
 8002b9e:	4311      	orrs	r1, r2
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	68d2      	ldr	r2, [r2, #12]
 8002ba4:	4311      	orrs	r1, r2
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6992      	ldr	r2, [r2, #24]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	431a      	orrs	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bb6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d161      	bne.n	8002c84 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a38      	ldr	r2, [pc, #224]	; (8002ca4 <HAL_I2S_Init+0x274>)
 8002bc4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a37      	ldr	r2, [pc, #220]	; (8002ca8 <HAL_I2S_Init+0x278>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d101      	bne.n	8002bd4 <HAL_I2S_Init+0x1a4>
 8002bd0:	4b36      	ldr	r3, [pc, #216]	; (8002cac <HAL_I2S_Init+0x27c>)
 8002bd2:	e001      	b.n	8002bd8 <HAL_I2S_Init+0x1a8>
 8002bd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	4932      	ldr	r1, [pc, #200]	; (8002ca8 <HAL_I2S_Init+0x278>)
 8002be0:	428a      	cmp	r2, r1
 8002be2:	d101      	bne.n	8002be8 <HAL_I2S_Init+0x1b8>
 8002be4:	4a31      	ldr	r2, [pc, #196]	; (8002cac <HAL_I2S_Init+0x27c>)
 8002be6:	e001      	b.n	8002bec <HAL_I2S_Init+0x1bc>
 8002be8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002bec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002bf0:	f023 030f 	bic.w	r3, r3, #15
 8002bf4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a2b      	ldr	r2, [pc, #172]	; (8002ca8 <HAL_I2S_Init+0x278>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d101      	bne.n	8002c04 <HAL_I2S_Init+0x1d4>
 8002c00:	4b2a      	ldr	r3, [pc, #168]	; (8002cac <HAL_I2S_Init+0x27c>)
 8002c02:	e001      	b.n	8002c08 <HAL_I2S_Init+0x1d8>
 8002c04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c08:	2202      	movs	r2, #2
 8002c0a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a25      	ldr	r2, [pc, #148]	; (8002ca8 <HAL_I2S_Init+0x278>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d101      	bne.n	8002c1a <HAL_I2S_Init+0x1ea>
 8002c16:	4b25      	ldr	r3, [pc, #148]	; (8002cac <HAL_I2S_Init+0x27c>)
 8002c18:	e001      	b.n	8002c1e <HAL_I2S_Init+0x1ee>
 8002c1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c2a:	d003      	beq.n	8002c34 <HAL_I2S_Init+0x204>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d103      	bne.n	8002c3c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002c34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	e001      	b.n	8002c40 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002c54:	4313      	orrs	r3, r2
 8002c56:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	897b      	ldrh	r3, [r7, #10]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c6c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a0d      	ldr	r2, [pc, #52]	; (8002ca8 <HAL_I2S_Init+0x278>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d101      	bne.n	8002c7c <HAL_I2S_Init+0x24c>
 8002c78:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <HAL_I2S_Init+0x27c>)
 8002c7a:	e001      	b.n	8002c80 <HAL_I2S_Init+0x250>
 8002c7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c80:	897a      	ldrh	r2, [r7, #10]
 8002c82:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3720      	adds	r7, #32
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	08002da7 	.word	0x08002da7
 8002ca0:	cccccccd 	.word	0xcccccccd
 8002ca4:	08002ebd 	.word	0x08002ebd
 8002ca8:	40003800 	.word	0x40003800
 8002cac:	40003400 	.word	0x40003400

08002cb0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	881a      	ldrh	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	1c9a      	adds	r2, r3, #2
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10e      	bne.n	8002d40 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d30:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7ff ffb8 	bl	8002cb0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5a:	b292      	uxth	r2, r2
 8002d5c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	1c9a      	adds	r2, r3, #2
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10e      	bne.n	8002d9e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d8e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff ff93 	bl	8002cc4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b086      	sub	sp, #24
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d13a      	bne.n	8002e38 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d109      	bne.n	8002de0 <I2S_IRQHandler+0x3a>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd6:	2b40      	cmp	r3, #64	; 0x40
 8002dd8:	d102      	bne.n	8002de0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff ffb4 	bl	8002d48 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de6:	2b40      	cmp	r3, #64	; 0x40
 8002de8:	d126      	bne.n	8002e38 <I2S_IRQHandler+0x92>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 0320 	and.w	r3, r3, #32
 8002df4:	2b20      	cmp	r3, #32
 8002df6:	d11f      	bne.n	8002e38 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e06:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002e08:	2300      	movs	r3, #0
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	f043 0202 	orr.w	r2, r3, #2
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ff50 	bl	8002cd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d136      	bne.n	8002eb2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d109      	bne.n	8002e62 <I2S_IRQHandler+0xbc>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e58:	2b80      	cmp	r3, #128	; 0x80
 8002e5a:	d102      	bne.n	8002e62 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff ff45 	bl	8002cec <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d122      	bne.n	8002eb2 <I2S_IRQHandler+0x10c>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	2b20      	cmp	r3, #32
 8002e78:	d11b      	bne.n	8002eb2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e88:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea4:	f043 0204 	orr.w	r2, r3, #4
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff ff13 	bl	8002cd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002eb2:	bf00      	nop
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a92      	ldr	r2, [pc, #584]	; (800311c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d101      	bne.n	8002eda <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002ed6:	4b92      	ldr	r3, [pc, #584]	; (8003120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ed8:	e001      	b.n	8002ede <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002eda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a8b      	ldr	r2, [pc, #556]	; (800311c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d101      	bne.n	8002ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002ef4:	4b8a      	ldr	r3, [pc, #552]	; (8003120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ef6:	e001      	b.n	8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002ef8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f08:	d004      	beq.n	8002f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f040 8099 	bne.w	8003046 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d107      	bne.n	8002f2e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f925 	bl	8003178 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d107      	bne.n	8002f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f9c8 	bl	80032d8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4e:	2b40      	cmp	r3, #64	; 0x40
 8002f50:	d13a      	bne.n	8002fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	f003 0320 	and.w	r3, r3, #32
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d035      	beq.n	8002fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a6e      	ldr	r2, [pc, #440]	; (800311c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d101      	bne.n	8002f6a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002f66:	4b6e      	ldr	r3, [pc, #440]	; (8003120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f68:	e001      	b.n	8002f6e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002f6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4969      	ldr	r1, [pc, #420]	; (800311c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f76:	428b      	cmp	r3, r1
 8002f78:	d101      	bne.n	8002f7e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002f7a:	4b69      	ldr	r3, [pc, #420]	; (8003120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f7c:	e001      	b.n	8002f82 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002f7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f86:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f96:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	f043 0202 	orr.w	r2, r3, #2
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff fe88 	bl	8002cd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	f040 80c3 	bne.w	800315a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f003 0320 	and.w	r3, r3, #32
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 80bd 	beq.w	800315a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a49      	ldr	r2, [pc, #292]	; (800311c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d101      	bne.n	8002ffe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002ffa:	4b49      	ldr	r3, [pc, #292]	; (8003120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ffc:	e001      	b.n	8003002 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002ffe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4944      	ldr	r1, [pc, #272]	; (800311c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800300a:	428b      	cmp	r3, r1
 800300c:	d101      	bne.n	8003012 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800300e:	4b44      	ldr	r3, [pc, #272]	; (8003120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003010:	e001      	b.n	8003016 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003012:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003016:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800301a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800301c:	2300      	movs	r3, #0
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	f043 0204 	orr.w	r2, r3, #4
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff fe4a 	bl	8002cd8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003044:	e089      	b.n	800315a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b02      	cmp	r3, #2
 800304e:	d107      	bne.n	8003060 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f8be 	bl	80031dc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b01      	cmp	r3, #1
 8003068:	d107      	bne.n	800307a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f8fd 	bl	8003274 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	d12f      	bne.n	80030e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f003 0320 	and.w	r3, r3, #32
 800308a:	2b00      	cmp	r3, #0
 800308c:	d02a      	beq.n	80030e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800309c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a1e      	ldr	r2, [pc, #120]	; (800311c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d101      	bne.n	80030ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80030a8:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80030aa:	e001      	b.n	80030b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80030ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4919      	ldr	r1, [pc, #100]	; (800311c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80030b8:	428b      	cmp	r3, r1
 80030ba:	d101      	bne.n	80030c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80030bc:	4b18      	ldr	r3, [pc, #96]	; (8003120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80030be:	e001      	b.n	80030c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80030c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030c8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	f043 0202 	orr.w	r2, r3, #2
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7ff fdfa 	bl	8002cd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d136      	bne.n	800315c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f003 0320 	and.w	r3, r3, #32
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d031      	beq.n	800315c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a07      	ldr	r2, [pc, #28]	; (800311c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d101      	bne.n	8003106 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003102:	4b07      	ldr	r3, [pc, #28]	; (8003120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003104:	e001      	b.n	800310a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003106:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4902      	ldr	r1, [pc, #8]	; (800311c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003112:	428b      	cmp	r3, r1
 8003114:	d106      	bne.n	8003124 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003116:	4b02      	ldr	r3, [pc, #8]	; (8003120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003118:	e006      	b.n	8003128 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800311a:	bf00      	nop
 800311c:	40003800 	.word	0x40003800
 8003120:	40003400 	.word	0x40003400
 8003124:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003128:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800312c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800313c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	f043 0204 	orr.w	r2, r3, #4
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff fdc0 	bl	8002cd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003158:	e000      	b.n	800315c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800315a:	bf00      	nop
}
 800315c:	bf00      	nop
 800315e:	3720      	adds	r7, #32
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	1c99      	adds	r1, r3, #2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6251      	str	r1, [r2, #36]	; 0x24
 800318a:	881a      	ldrh	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d113      	bne.n	80031d2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d106      	bne.n	80031d2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7ff ffc9 	bl	8003164 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	1c99      	adds	r1, r3, #2
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6251      	str	r1, [r2, #36]	; 0x24
 80031ee:	8819      	ldrh	r1, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a1d      	ldr	r2, [pc, #116]	; (800326c <I2SEx_TxISR_I2SExt+0x90>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d101      	bne.n	80031fe <I2SEx_TxISR_I2SExt+0x22>
 80031fa:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <I2SEx_TxISR_I2SExt+0x94>)
 80031fc:	e001      	b.n	8003202 <I2SEx_TxISR_I2SExt+0x26>
 80031fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003202:	460a      	mov	r2, r1
 8003204:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d121      	bne.n	8003262 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a12      	ldr	r2, [pc, #72]	; (800326c <I2SEx_TxISR_I2SExt+0x90>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d101      	bne.n	800322c <I2SEx_TxISR_I2SExt+0x50>
 8003228:	4b11      	ldr	r3, [pc, #68]	; (8003270 <I2SEx_TxISR_I2SExt+0x94>)
 800322a:	e001      	b.n	8003230 <I2SEx_TxISR_I2SExt+0x54>
 800322c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	490d      	ldr	r1, [pc, #52]	; (800326c <I2SEx_TxISR_I2SExt+0x90>)
 8003238:	428b      	cmp	r3, r1
 800323a:	d101      	bne.n	8003240 <I2SEx_TxISR_I2SExt+0x64>
 800323c:	4b0c      	ldr	r3, [pc, #48]	; (8003270 <I2SEx_TxISR_I2SExt+0x94>)
 800323e:	e001      	b.n	8003244 <I2SEx_TxISR_I2SExt+0x68>
 8003240:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003244:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003248:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d106      	bne.n	8003262 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff ff81 	bl	8003164 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40003800 	.word	0x40003800
 8003270:	40003400 	.word	0x40003400

08003274 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68d8      	ldr	r0, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	1c99      	adds	r1, r3, #2
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800328c:	b282      	uxth	r2, r0
 800328e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003294:	b29b      	uxth	r3, r3
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d113      	bne.n	80032d0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032b6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff ff4a 	bl	8003164 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032d0:	bf00      	nop
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a20      	ldr	r2, [pc, #128]	; (8003368 <I2SEx_RxISR_I2SExt+0x90>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d101      	bne.n	80032ee <I2SEx_RxISR_I2SExt+0x16>
 80032ea:	4b20      	ldr	r3, [pc, #128]	; (800336c <I2SEx_RxISR_I2SExt+0x94>)
 80032ec:	e001      	b.n	80032f2 <I2SEx_RxISR_I2SExt+0x1a>
 80032ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032f2:	68d8      	ldr	r0, [r3, #12]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	1c99      	adds	r1, r3, #2
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80032fe:	b282      	uxth	r2, r0
 8003300:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d121      	bne.n	800335e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a12      	ldr	r2, [pc, #72]	; (8003368 <I2SEx_RxISR_I2SExt+0x90>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d101      	bne.n	8003328 <I2SEx_RxISR_I2SExt+0x50>
 8003324:	4b11      	ldr	r3, [pc, #68]	; (800336c <I2SEx_RxISR_I2SExt+0x94>)
 8003326:	e001      	b.n	800332c <I2SEx_RxISR_I2SExt+0x54>
 8003328:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	490d      	ldr	r1, [pc, #52]	; (8003368 <I2SEx_RxISR_I2SExt+0x90>)
 8003334:	428b      	cmp	r3, r1
 8003336:	d101      	bne.n	800333c <I2SEx_RxISR_I2SExt+0x64>
 8003338:	4b0c      	ldr	r3, [pc, #48]	; (800336c <I2SEx_RxISR_I2SExt+0x94>)
 800333a:	e001      	b.n	8003340 <I2SEx_RxISR_I2SExt+0x68>
 800333c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003340:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003344:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334a:	b29b      	uxth	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d106      	bne.n	800335e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff ff03 	bl	8003164 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40003800 	.word	0x40003800
 800336c:	40003400 	.word	0x40003400

08003370 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003374:	4b03      	ldr	r3, [pc, #12]	; (8003384 <HAL_RCC_GetHCLKFreq+0x14>)
 8003376:	681b      	ldr	r3, [r3, #0]
}
 8003378:	4618      	mov	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	20000000 	.word	0x20000000

08003388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800338c:	f7ff fff0 	bl	8003370 <HAL_RCC_GetHCLKFreq>
 8003390:	4602      	mov	r2, r0
 8003392:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	0a9b      	lsrs	r3, r3, #10
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	4903      	ldr	r1, [pc, #12]	; (80033ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800339e:	5ccb      	ldrb	r3, [r1, r3]
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40023800 	.word	0x40023800
 80033ac:	08006f94 	.word	0x08006f94

080033b0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d105      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d035      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80033d8:	4b62      	ldr	r3, [pc, #392]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80033de:	f7fd fae1 	bl	80009a4 <HAL_GetTick>
 80033e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033e4:	e008      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80033e6:	f7fd fadd 	bl	80009a4 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e0b0      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033f8:	4b5b      	ldr	r3, [pc, #364]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1f0      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	019a      	lsls	r2, r3, #6
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	071b      	lsls	r3, r3, #28
 8003410:	4955      	ldr	r1, [pc, #340]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003412:	4313      	orrs	r3, r2
 8003414:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003418:	4b52      	ldr	r3, [pc, #328]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800341a:	2201      	movs	r2, #1
 800341c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800341e:	f7fd fac1 	bl	80009a4 <HAL_GetTick>
 8003422:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003424:	e008      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003426:	f7fd fabd 	bl	80009a4 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e090      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003438:	4b4b      	ldr	r3, [pc, #300]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0f0      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 8083 	beq.w	8003558 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	4b44      	ldr	r3, [pc, #272]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	4a43      	ldr	r2, [pc, #268]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800345c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003460:	6413      	str	r3, [r2, #64]	; 0x40
 8003462:	4b41      	ldr	r3, [pc, #260]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800346e:	4b3f      	ldr	r3, [pc, #252]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a3e      	ldr	r2, [pc, #248]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003478:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800347a:	f7fd fa93 	bl	80009a4 <HAL_GetTick>
 800347e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003480:	e008      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003482:	f7fd fa8f 	bl	80009a4 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e062      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003494:	4b35      	ldr	r3, [pc, #212]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0f0      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034a0:	4b31      	ldr	r3, [pc, #196]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d02f      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d028      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034be:	4b2a      	ldr	r3, [pc, #168]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034c8:	4b29      	ldr	r3, [pc, #164]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034ce:	4b28      	ldr	r3, [pc, #160]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80034d4:	4a24      	ldr	r2, [pc, #144]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034da:	4b23      	ldr	r3, [pc, #140]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d114      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80034e6:	f7fd fa5d 	bl	80009a4 <HAL_GetTick>
 80034ea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ec:	e00a      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ee:	f7fd fa59 	bl	80009a4 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d901      	bls.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e02a      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003504:	4b18      	ldr	r3, [pc, #96]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0ee      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003518:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800351c:	d10d      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800351e:	4b12      	ldr	r3, [pc, #72]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800352e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003532:	490d      	ldr	r1, [pc, #52]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003534:	4313      	orrs	r3, r2
 8003536:	608b      	str	r3, [r1, #8]
 8003538:	e005      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800353a:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003540:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003544:	6093      	str	r3, [r2, #8]
 8003546:	4b08      	ldr	r3, [pc, #32]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003548:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003552:	4905      	ldr	r1, [pc, #20]	; (8003568 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003554:	4313      	orrs	r3, r2
 8003556:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	42470068 	.word	0x42470068
 8003568:	40023800 	.word	0x40023800
 800356c:	40007000 	.word	0x40007000
 8003570:	42470e40 	.word	0x42470e40

08003574 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d13e      	bne.n	8003610 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003592:	4b23      	ldr	r3, [pc, #140]	; (8003620 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d12f      	bne.n	8003608 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80035a8:	4b1e      	ldr	r3, [pc, #120]	; (8003624 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80035aa:	617b      	str	r3, [r7, #20]
          break;
 80035ac:	e02f      	b.n	800360e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80035ae:	4b1c      	ldr	r3, [pc, #112]	; (8003620 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ba:	d108      	bne.n	80035ce <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80035bc:	4b18      	ldr	r3, [pc, #96]	; (8003620 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035c4:	4a18      	ldr	r2, [pc, #96]	; (8003628 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80035c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	e007      	b.n	80035de <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80035ce:	4b14      	ldr	r3, [pc, #80]	; (8003620 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035d6:	4a15      	ldr	r2, [pc, #84]	; (800362c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80035d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035dc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80035de:	4b10      	ldr	r3, [pc, #64]	; (8003620 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80035e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035e4:	099b      	lsrs	r3, r3, #6
 80035e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	fb02 f303 	mul.w	r3, r2, r3
 80035f0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80035f2:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80035f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f8:	0f1b      	lsrs	r3, r3, #28
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	fbb2 f3f3 	udiv	r3, r2, r3
 8003604:	617b      	str	r3, [r7, #20]
          break;
 8003606:	e002      	b.n	800360e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
          break;
 800360c:	bf00      	nop
        }
      }
      break;
 800360e:	bf00      	nop
    }
  }
  return frequency;
 8003610:	697b      	ldr	r3, [r7, #20]
}
 8003612:	4618      	mov	r0, r3
 8003614:	371c      	adds	r7, #28
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40023800 	.word	0x40023800
 8003624:	00bb8000 	.word	0x00bb8000
 8003628:	007a1200 	.word	0x007a1200
 800362c:	00f42400 	.word	0x00f42400

08003630 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e07b      	b.n	800373a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	2b00      	cmp	r3, #0
 8003648:	d108      	bne.n	800365c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003652:	d009      	beq.n	8003668 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	61da      	str	r2, [r3, #28]
 800365a:	e005      	b.n	8003668 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fd f83a 	bl	80006fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800369e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	431a      	orrs	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ec:	ea42 0103 	orr.w	r1, r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	0c1b      	lsrs	r3, r3, #16
 8003706:	f003 0104 	and.w	r1, r3, #4
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	f003 0210 	and.w	r2, r3, #16
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69da      	ldr	r2, [r3, #28]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003728:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003742:	b084      	sub	sp, #16
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	f107 001c 	add.w	r0, r7, #28
 8003750:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003756:	2b01      	cmp	r3, #1
 8003758:	d122      	bne.n	80037a0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800376e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003784:	2b01      	cmp	r3, #1
 8003786:	d105      	bne.n	8003794 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f9bf 	bl	8003b18 <USB_CoreReset>
 800379a:	4603      	mov	r3, r0
 800379c:	73fb      	strb	r3, [r7, #15]
 800379e:	e01a      	b.n	80037d6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f9b3 	bl	8003b18 <USB_CoreReset>
 80037b2:	4603      	mov	r3, r0
 80037b4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80037b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d106      	bne.n	80037ca <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	639a      	str	r2, [r3, #56]	; 0x38
 80037c8:	e005      	b.n	80037d6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80037d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d10b      	bne.n	80037f4 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f043 0206 	orr.w	r2, r3, #6
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f043 0220 	orr.w	r2, r3, #32
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003800:	b004      	add	sp, #16
 8003802:	4770      	bx	lr

08003804 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f043 0201 	orr.w	r2, r3, #1
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f023 0201 	bic.w	r2, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	460b      	mov	r3, r1
 8003852:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d115      	bne.n	8003896 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003876:	2001      	movs	r0, #1
 8003878:	f7fd f8a0 	bl	80009bc <HAL_Delay>
      ms++;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	3301      	adds	r3, #1
 8003880:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f939 	bl	8003afa <USB_GetMode>
 8003888:	4603      	mov	r3, r0
 800388a:	2b01      	cmp	r3, #1
 800388c:	d01e      	beq.n	80038cc <USB_SetCurrentMode+0x84>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b31      	cmp	r3, #49	; 0x31
 8003892:	d9f0      	bls.n	8003876 <USB_SetCurrentMode+0x2e>
 8003894:	e01a      	b.n	80038cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003896:	78fb      	ldrb	r3, [r7, #3]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d115      	bne.n	80038c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80038a8:	2001      	movs	r0, #1
 80038aa:	f7fd f887 	bl	80009bc <HAL_Delay>
      ms++;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	3301      	adds	r3, #1
 80038b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f920 	bl	8003afa <USB_GetMode>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <USB_SetCurrentMode+0x84>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b31      	cmp	r3, #49	; 0x31
 80038c4:	d9f0      	bls.n	80038a8 <USB_SetCurrentMode+0x60>
 80038c6:	e001      	b.n	80038cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e005      	b.n	80038d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b32      	cmp	r3, #50	; 0x32
 80038d0:	d101      	bne.n	80038d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	3301      	adds	r3, #1
 80038f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4a13      	ldr	r2, [pc, #76]	; (8003944 <USB_FlushTxFifo+0x64>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d901      	bls.n	8003900 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e01b      	b.n	8003938 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	2b00      	cmp	r3, #0
 8003906:	daf2      	bge.n	80038ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	019b      	lsls	r3, r3, #6
 8003910:	f043 0220 	orr.w	r2, r3, #32
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	3301      	adds	r3, #1
 800391c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4a08      	ldr	r2, [pc, #32]	; (8003944 <USB_FlushTxFifo+0x64>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d901      	bls.n	800392a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e006      	b.n	8003938 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b20      	cmp	r3, #32
 8003934:	d0f0      	beq.n	8003918 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	00030d40 	.word	0x00030d40

08003948 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	3301      	adds	r3, #1
 8003958:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4a11      	ldr	r2, [pc, #68]	; (80039a4 <USB_FlushRxFifo+0x5c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e018      	b.n	8003998 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	daf2      	bge.n	8003954 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2210      	movs	r2, #16
 8003976:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	3301      	adds	r3, #1
 800397c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4a08      	ldr	r2, [pc, #32]	; (80039a4 <USB_FlushRxFifo+0x5c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e006      	b.n	8003998 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f003 0310 	and.w	r3, r3, #16
 8003992:	2b10      	cmp	r3, #16
 8003994:	d0f0      	beq.n	8003978 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	00030d40 	.word	0x00030d40

080039a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b089      	sub	sp, #36	; 0x24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	4611      	mov	r1, r2
 80039b4:	461a      	mov	r2, r3
 80039b6:	460b      	mov	r3, r1
 80039b8:	71fb      	strb	r3, [r7, #7]
 80039ba:	4613      	mov	r3, r2
 80039bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80039c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d123      	bne.n	8003a16 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80039ce:	88bb      	ldrh	r3, [r7, #4]
 80039d0:	3303      	adds	r3, #3
 80039d2:	089b      	lsrs	r3, r3, #2
 80039d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80039d6:	2300      	movs	r3, #0
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	e018      	b.n	8003a0e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80039dc:	79fb      	ldrb	r3, [r7, #7]
 80039de:	031a      	lsls	r2, r3, #12
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039e8:	461a      	mov	r2, r3
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	3301      	adds	r3, #1
 80039f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	3301      	adds	r3, #1
 80039fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	3301      	adds	r3, #1
 8003a00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3301      	adds	r3, #1
 8003a06:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	61bb      	str	r3, [r7, #24]
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d3e2      	bcc.n	80039dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3724      	adds	r7, #36	; 0x24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b08b      	sub	sp, #44	; 0x2c
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003a3a:	88fb      	ldrh	r3, [r7, #6]
 8003a3c:	089b      	lsrs	r3, r3, #2
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	623b      	str	r3, [r7, #32]
 8003a4e:	e014      	b.n	8003a7a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	601a      	str	r2, [r3, #0]
    pDest++;
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	3301      	adds	r3, #1
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	3301      	adds	r3, #1
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	3301      	adds	r3, #1
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	3301      	adds	r3, #1
 8003a78:	623b      	str	r3, [r7, #32]
 8003a7a:	6a3a      	ldr	r2, [r7, #32]
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d3e6      	bcc.n	8003a50 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003a82:	8bfb      	ldrh	r3, [r7, #30]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d01e      	beq.n	8003ac6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a92:	461a      	mov	r2, r3
 8003a94:	f107 0310 	add.w	r3, r7, #16
 8003a98:	6812      	ldr	r2, [r2, #0]
 8003a9a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	701a      	strb	r2, [r3, #0]
      i++;
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	623b      	str	r3, [r7, #32]
      pDest++;
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003aba:	8bfb      	ldrh	r3, [r7, #30]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003ac0:	8bfb      	ldrh	r3, [r7, #30]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1ea      	bne.n	8003a9c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	372c      	adds	r7, #44	; 0x2c
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003aec:	68fb      	ldr	r3, [r7, #12]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	f003 0301 	and.w	r3, r3, #1
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
	...

08003b18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b20:	2300      	movs	r3, #0
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	3301      	adds	r3, #1
 8003b28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4a13      	ldr	r2, [pc, #76]	; (8003b7c <USB_CoreReset+0x64>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d901      	bls.n	8003b36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e01b      	b.n	8003b6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	daf2      	bge.n	8003b24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	f043 0201 	orr.w	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	3301      	adds	r3, #1
 8003b52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <USB_CoreReset+0x64>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d901      	bls.n	8003b60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e006      	b.n	8003b6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d0f0      	beq.n	8003b4e <USB_CoreReset+0x36>

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	00030d40 	.word	0x00030d40

08003b80 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b80:	b084      	sub	sp, #16
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b086      	sub	sp, #24
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d018      	beq.n	8003c08 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8003bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d10a      	bne.n	8003bf2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bea:	f043 0304 	orr.w	r3, r3, #4
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	e014      	b.n	8003c1c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c00:	f023 0304 	bic.w	r3, r3, #4
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e009      	b.n	8003c1c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c16:	f023 0304 	bic.w	r3, r3, #4
 8003c1a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c1c:	2110      	movs	r1, #16
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff fe5e 	bl	80038e0 <USB_FlushTxFifo>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7ff fe8a 	bl	8003948 <USB_FlushRxFifo>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003c3e:	2300      	movs	r3, #0
 8003c40:	613b      	str	r3, [r7, #16]
 8003c42:	e015      	b.n	8003c70 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c50:	461a      	mov	r2, r3
 8003c52:	f04f 33ff 	mov.w	r3, #4294967295
 8003c56:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c64:	461a      	mov	r2, r3
 8003c66:	2300      	movs	r3, #0
 8003c68:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	613b      	str	r3, [r7, #16]
 8003c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d3e5      	bcc.n	8003c44 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f04f 32ff 	mov.w	r2, #4294967295
 8003c84:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00b      	beq.n	8003caa <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c98:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a13      	ldr	r2, [pc, #76]	; (8003cec <USB_HostInit+0x16c>)
 8003c9e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a13      	ldr	r2, [pc, #76]	; (8003cf0 <USB_HostInit+0x170>)
 8003ca4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003ca8:	e009      	b.n	8003cbe <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2280      	movs	r2, #128	; 0x80
 8003cae:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a10      	ldr	r2, [pc, #64]	; (8003cf4 <USB_HostInit+0x174>)
 8003cb4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a0f      	ldr	r2, [pc, #60]	; (8003cf8 <USB_HostInit+0x178>)
 8003cba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d105      	bne.n	8003cd0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	f043 0210 	orr.w	r2, r3, #16
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699a      	ldr	r2, [r3, #24]
 8003cd4:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <USB_HostInit+0x17c>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ce8:	b004      	add	sp, #16
 8003cea:	4770      	bx	lr
 8003cec:	01000200 	.word	0x01000200
 8003cf0:	00e00300 	.word	0x00e00300
 8003cf4:	00600080 	.word	0x00600080
 8003cf8:	004000e0 	.word	0x004000e0
 8003cfc:	a3200008 	.word	0xa3200008

08003d00 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d1e:	f023 0303 	bic.w	r3, r3, #3
 8003d22:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	78fb      	ldrb	r3, [r7, #3]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	68f9      	ldr	r1, [r7, #12]
 8003d34:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003d3c:	78fb      	ldrb	r3, [r7, #3]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d107      	bne.n	8003d52 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d48:	461a      	mov	r2, r3
 8003d4a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003d4e:	6053      	str	r3, [r2, #4]
 8003d50:	e009      	b.n	8003d66 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8003d52:	78fb      	ldrb	r3, [r7, #3]
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d106      	bne.n	8003d66 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f241 7370 	movw	r3, #6000	; 0x1770
 8003d64:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003d94:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8003da4:	2064      	movs	r0, #100	; 0x64
 8003da6:	f7fc fe09 	bl	80009bc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003db2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003db6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8003db8:	200a      	movs	r0, #10
 8003dba:	f7fc fdff 	bl	80009bc <HAL_Delay>

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003dec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d109      	bne.n	8003e0c <USB_DriveVbus+0x44>
 8003df8:	78fb      	ldrb	r3, [r7, #3]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d106      	bne.n	8003e0c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003e06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e0a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e16:	d109      	bne.n	8003e2c <USB_DriveVbus+0x64>
 8003e18:	78fb      	ldrb	r3, [r7, #3]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003e26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e2a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b085      	sub	sp, #20
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	0c5b      	lsrs	r3, r3, #17
 8003e58:	f003 0303 	and.w	r3, r3, #3
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	b29b      	uxth	r3, r3
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
	...

08003e8c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	4608      	mov	r0, r1
 8003e96:	4611      	mov	r1, r2
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	70fb      	strb	r3, [r7, #3]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	70bb      	strb	r3, [r7, #2]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8003eae:	78fb      	ldrb	r3, [r7, #3]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8003ec2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d87e      	bhi.n	8003fc8 <USB_HC_Init+0x13c>
 8003eca:	a201      	add	r2, pc, #4	; (adr r2, 8003ed0 <USB_HC_Init+0x44>)
 8003ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed0:	08003ee1 	.word	0x08003ee1
 8003ed4:	08003f8b 	.word	0x08003f8b
 8003ed8:	08003ee1 	.word	0x08003ee1
 8003edc:	08003f4d 	.word	0x08003f4d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	015a      	lsls	r2, r3, #5
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eec:	461a      	mov	r2, r3
 8003eee:	f240 439d 	movw	r3, #1181	; 0x49d
 8003ef2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8003ef4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	da10      	bge.n	8003f1e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	78fa      	ldrb	r2, [r7, #3]
 8003f0c:	0151      	lsls	r1, r2, #5
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	440a      	add	r2, r1
 8003f12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f1a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8003f1c:	e057      	b.n	8003fce <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d051      	beq.n	8003fce <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8003f2a:	78fb      	ldrb	r3, [r7, #3]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	78fa      	ldrb	r2, [r7, #3]
 8003f3a:	0151      	lsls	r1, r2, #5
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	440a      	add	r2, r1
 8003f40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f44:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003f48:	60d3      	str	r3, [r2, #12]
      break;
 8003f4a:	e040      	b.n	8003fce <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003f4c:	78fb      	ldrb	r3, [r7, #3]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f58:	461a      	mov	r2, r3
 8003f5a:	f240 639d 	movw	r3, #1693	; 0x69d
 8003f5e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003f60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	da34      	bge.n	8003fd2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	78fa      	ldrb	r2, [r7, #3]
 8003f78:	0151      	lsls	r1, r2, #5
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	440a      	add	r2, r1
 8003f7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f86:	60d3      	str	r3, [r2, #12]
      }

      break;
 8003f88:	e023      	b.n	8003fd2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003f8a:	78fb      	ldrb	r3, [r7, #3]
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f96:	461a      	mov	r2, r3
 8003f98:	f240 2325 	movw	r3, #549	; 0x225
 8003f9c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003f9e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	da17      	bge.n	8003fd6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8003fa6:	78fb      	ldrb	r3, [r7, #3]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	78fa      	ldrb	r2, [r7, #3]
 8003fb6:	0151      	lsls	r1, r2, #5
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	440a      	add	r2, r1
 8003fbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fc0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8003fc4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8003fc6:	e006      	b.n	8003fd6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	77fb      	strb	r3, [r7, #31]
      break;
 8003fcc:	e004      	b.n	8003fd8 <USB_HC_Init+0x14c>
      break;
 8003fce:	bf00      	nop
 8003fd0:	e002      	b.n	8003fd8 <USB_HC_Init+0x14c>
      break;
 8003fd2:	bf00      	nop
 8003fd4:	e000      	b.n	8003fd8 <USB_HC_Init+0x14c>
      break;
 8003fd6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8003fd8:	78fb      	ldrb	r3, [r7, #3]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	78fa      	ldrb	r2, [r7, #3]
 8003fe8:	0151      	lsls	r1, r2, #5
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	440a      	add	r2, r1
 8003fee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ff2:	f043 0302 	orr.w	r3, r3, #2
 8003ff6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ffe:	699a      	ldr	r2, [r3, #24]
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	2101      	movs	r1, #1
 8004008:	fa01 f303 	lsl.w	r3, r1, r3
 800400c:	6939      	ldr	r1, [r7, #16]
 800400e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004012:	4313      	orrs	r3, r2
 8004014:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004022:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004026:	2b00      	cmp	r3, #0
 8004028:	da03      	bge.n	8004032 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800402a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800402e:	61bb      	str	r3, [r7, #24]
 8004030:	e001      	b.n	8004036 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004032:	2300      	movs	r3, #0
 8004034:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff feff 	bl	8003e3a <USB_GetHostSpeed>
 800403c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800403e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004042:	2b02      	cmp	r3, #2
 8004044:	d106      	bne.n	8004054 <USB_HC_Init+0x1c8>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2b02      	cmp	r3, #2
 800404a:	d003      	beq.n	8004054 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800404c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	e001      	b.n	8004058 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004058:	787b      	ldrb	r3, [r7, #1]
 800405a:	059b      	lsls	r3, r3, #22
 800405c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004060:	78bb      	ldrb	r3, [r7, #2]
 8004062:	02db      	lsls	r3, r3, #11
 8004064:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004068:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800406a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800406e:	049b      	lsls	r3, r3, #18
 8004070:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004074:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004076:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004078:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800407c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	0159      	lsls	r1, r3, #5
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	440b      	add	r3, r1
 800408a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800408e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004094:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004096:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800409a:	2b03      	cmp	r3, #3
 800409c:	d003      	beq.n	80040a6 <USB_HC_Init+0x21a>
 800409e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d10f      	bne.n	80040c6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80040a6:	78fb      	ldrb	r3, [r7, #3]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	78fa      	ldrb	r2, [r7, #3]
 80040b6:	0151      	lsls	r1, r2, #5
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	440a      	add	r2, r1
 80040bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040c4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80040c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3720      	adds	r7, #32
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08c      	sub	sp, #48	; 0x30
 80040d4:	af02      	add	r7, sp, #8
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	4613      	mov	r3, r2
 80040dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	785b      	ldrb	r3, [r3, #1]
 80040e6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80040e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040ec:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d02d      	beq.n	8004156 <USB_HC_StartXfer+0x86>
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	791b      	ldrb	r3, [r3, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d129      	bne.n	8004156 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d117      	bne.n	8004138 <USB_HC_StartXfer+0x68>
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	79db      	ldrb	r3, [r3, #7]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <USB_HC_StartXfer+0x48>
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	79db      	ldrb	r3, [r3, #7]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d10f      	bne.n	8004138 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	4413      	add	r3, r2
 8004120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	69fa      	ldr	r2, [r7, #28]
 8004128:	0151      	lsls	r1, r2, #5
 800412a:	6a3a      	ldr	r2, [r7, #32]
 800412c:	440a      	add	r2, r1
 800412e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004136:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004138:	79fb      	ldrb	r3, [r7, #7]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10b      	bne.n	8004156 <USB_HC_StartXfer+0x86>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	795b      	ldrb	r3, [r3, #5]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d107      	bne.n	8004156 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	785b      	ldrb	r3, [r3, #1]
 800414a:	4619      	mov	r1, r3
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 fa0f 	bl	8004570 <USB_DoPing>
      return HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	e0f8      	b.n	8004348 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d018      	beq.n	8004190 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	8912      	ldrh	r2, [r2, #8]
 8004166:	4413      	add	r3, r2
 8004168:	3b01      	subs	r3, #1
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	8912      	ldrh	r2, [r2, #8]
 800416e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004172:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004174:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004176:	8b7b      	ldrh	r3, [r7, #26]
 8004178:	429a      	cmp	r2, r3
 800417a:	d90b      	bls.n	8004194 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800417c:	8b7b      	ldrh	r3, [r7, #26]
 800417e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004180:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	8912      	ldrh	r2, [r2, #8]
 8004186:	fb03 f202 	mul.w	r2, r3, r2
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	611a      	str	r2, [r3, #16]
 800418e:	e001      	b.n	8004194 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004190:	2301      	movs	r3, #1
 8004192:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	78db      	ldrb	r3, [r3, #3]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d007      	beq.n	80041ac <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800419c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	8912      	ldrh	r2, [r2, #8]
 80041a2:	fb03 f202 	mul.w	r2, r3, r2
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	611a      	str	r2, [r3, #16]
 80041aa:	e003      	b.n	80041b4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	695a      	ldr	r2, [r3, #20]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80041bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80041be:	04d9      	lsls	r1, r3, #19
 80041c0:	4b63      	ldr	r3, [pc, #396]	; (8004350 <USB_HC_StartXfer+0x280>)
 80041c2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80041c4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	7a9b      	ldrb	r3, [r3, #10]
 80041ca:	075b      	lsls	r3, r3, #29
 80041cc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80041d0:	69f9      	ldr	r1, [r7, #28]
 80041d2:	0148      	lsls	r0, r1, #5
 80041d4:	6a39      	ldr	r1, [r7, #32]
 80041d6:	4401      	add	r1, r0
 80041d8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80041dc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80041de:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80041e0:	79fb      	ldrb	r3, [r7, #7]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d009      	beq.n	80041fa <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	68d9      	ldr	r1, [r3, #12]
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f6:	460a      	mov	r2, r1
 80041f8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	bf0c      	ite	eq
 800420a:	2301      	moveq	r3, #1
 800420c:	2300      	movne	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	4413      	add	r3, r2
 800421a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	69fa      	ldr	r2, [r7, #28]
 8004222:	0151      	lsls	r1, r2, #5
 8004224:	6a3a      	ldr	r2, [r7, #32]
 8004226:	440a      	add	r2, r1
 8004228:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800422c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004230:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	015a      	lsls	r2, r3, #5
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	4413      	add	r3, r2
 800423a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	7e7b      	ldrb	r3, [r7, #25]
 8004242:	075b      	lsls	r3, r3, #29
 8004244:	69f9      	ldr	r1, [r7, #28]
 8004246:	0148      	lsls	r0, r1, #5
 8004248:	6a39      	ldr	r1, [r7, #32]
 800424a:	4401      	add	r1, r0
 800424c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004250:	4313      	orrs	r3, r2
 8004252:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	4413      	add	r3, r2
 800425c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800426a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	78db      	ldrb	r3, [r3, #3]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d004      	beq.n	800427e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800427a:	613b      	str	r3, [r7, #16]
 800427c:	e003      	b.n	8004286 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004284:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800428c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	4413      	add	r3, r2
 8004296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800429a:	461a      	mov	r2, r3
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	e04e      	b.n	8004348 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	78db      	ldrb	r3, [r3, #3]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d149      	bne.n	8004346 <USB_HC_StartXfer+0x276>
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d045      	beq.n	8004346 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	79db      	ldrb	r3, [r3, #7]
 80042be:	2b03      	cmp	r3, #3
 80042c0:	d830      	bhi.n	8004324 <USB_HC_StartXfer+0x254>
 80042c2:	a201      	add	r2, pc, #4	; (adr r2, 80042c8 <USB_HC_StartXfer+0x1f8>)
 80042c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c8:	080042d9 	.word	0x080042d9
 80042cc:	080042fd 	.word	0x080042fd
 80042d0:	080042d9 	.word	0x080042d9
 80042d4:	080042fd 	.word	0x080042fd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	3303      	adds	r3, #3
 80042de:	089b      	lsrs	r3, r3, #2
 80042e0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80042e2:	8afa      	ldrh	r2, [r7, #22]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d91c      	bls.n	8004328 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	f043 0220 	orr.w	r2, r3, #32
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	619a      	str	r2, [r3, #24]
        }
        break;
 80042fa:	e015      	b.n	8004328 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	3303      	adds	r3, #3
 8004302:	089b      	lsrs	r3, r3, #2
 8004304:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004306:	8afa      	ldrh	r2, [r7, #22]
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	b29b      	uxth	r3, r3
 8004312:	429a      	cmp	r2, r3
 8004314:	d90a      	bls.n	800432c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	619a      	str	r2, [r3, #24]
        }
        break;
 8004322:	e003      	b.n	800432c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004324:	bf00      	nop
 8004326:	e002      	b.n	800432e <USB_HC_StartXfer+0x25e>
        break;
 8004328:	bf00      	nop
 800432a:	e000      	b.n	800432e <USB_HC_StartXfer+0x25e>
        break;
 800432c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	68d9      	ldr	r1, [r3, #12]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	785a      	ldrb	r2, [r3, #1]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	b29b      	uxth	r3, r3
 800433c:	2000      	movs	r0, #0
 800433e:	9000      	str	r0, [sp, #0]
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f7ff fb31 	bl	80039a8 <USB_WritePacket>
  }

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3728      	adds	r7, #40	; 0x28
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	1ff80000 	.word	0x1ff80000

08004354 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	b29b      	uxth	r3, r3
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004376:	b480      	push	{r7}
 8004378:	b089      	sub	sp, #36	; 0x24
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	460b      	mov	r3, r1
 8004380:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004386:	78fb      	ldrb	r3, [r7, #3]
 8004388:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	4413      	add	r3, r2
 8004396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	0c9b      	lsrs	r3, r3, #18
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	0fdb      	lsrs	r3, r3, #31
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 0320 	and.w	r3, r3, #32
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	d104      	bne.n	80043d0 <USB_HC_Halt+0x5a>
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80043cc:	2300      	movs	r3, #0
 80043ce:	e0c8      	b.n	8004562 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <USB_HC_Halt+0x66>
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d163      	bne.n	80044a4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	0151      	lsls	r1, r2, #5
 80043ee:	69fa      	ldr	r2, [r7, #28]
 80043f0:	440a      	add	r2, r1
 80043f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043fa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 0320 	and.w	r3, r3, #32
 8004404:	2b00      	cmp	r3, #0
 8004406:	f040 80ab 	bne.w	8004560 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d133      	bne.n	800447e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	4413      	add	r3, r2
 800441e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	0151      	lsls	r1, r2, #5
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	440a      	add	r2, r1
 800442c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004430:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004434:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	4413      	add	r3, r2
 800443e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	0151      	lsls	r1, r2, #5
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	440a      	add	r2, r1
 800444c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004450:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004454:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	3301      	adds	r3, #1
 800445a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004462:	d81d      	bhi.n	80044a0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	4413      	add	r3, r2
 800446c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004476:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800447a:	d0ec      	beq.n	8004456 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800447c:	e070      	b.n	8004560 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	4413      	add	r3, r2
 8004486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	0151      	lsls	r1, r2, #5
 8004490:	69fa      	ldr	r2, [r7, #28]
 8004492:	440a      	add	r2, r1
 8004494:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004498:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800449c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800449e:	e05f      	b.n	8004560 <USB_HC_Halt+0x1ea>
            break;
 80044a0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80044a2:	e05d      	b.n	8004560 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	0151      	lsls	r1, r2, #5
 80044b6:	69fa      	ldr	r2, [r7, #28]
 80044b8:	440a      	add	r2, r1
 80044ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044c2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d133      	bne.n	800453c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	0151      	lsls	r1, r2, #5
 80044e6:	69fa      	ldr	r2, [r7, #28]
 80044e8:	440a      	add	r2, r1
 80044ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044f2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	0151      	lsls	r1, r2, #5
 8004506:	69fa      	ldr	r2, [r7, #28]
 8004508:	440a      	add	r2, r1
 800450a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800450e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004512:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	3301      	adds	r3, #1
 8004518:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004520:	d81d      	bhi.n	800455e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	4413      	add	r3, r2
 800452a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004534:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004538:	d0ec      	beq.n	8004514 <USB_HC_Halt+0x19e>
 800453a:	e011      	b.n	8004560 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	4413      	add	r3, r2
 8004544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	0151      	lsls	r1, r2, #5
 800454e:	69fa      	ldr	r2, [r7, #28]
 8004550:	440a      	add	r2, r1
 8004552:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004556:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	e000      	b.n	8004560 <USB_HC_Halt+0x1ea>
          break;
 800455e:	bf00      	nop
    }
  }

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3724      	adds	r7, #36	; 0x24
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
	...

08004570 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004570:	b480      	push	{r7}
 8004572:	b087      	sub	sp, #28
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004584:	2301      	movs	r3, #1
 8004586:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	04da      	lsls	r2, r3, #19
 800458c:	4b15      	ldr	r3, [pc, #84]	; (80045e4 <USB_DoPing+0x74>)
 800458e:	4013      	ands	r3, r2
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	0151      	lsls	r1, r2, #5
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	440a      	add	r2, r1
 8004598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800459c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045a0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045b8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045c0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ce:	461a      	mov	r2, r3
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	371c      	adds	r7, #28
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	1ff80000 	.word	0x1ff80000

080045e8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b088      	sub	sp, #32
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff f912 	bl	8003826 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004602:	2110      	movs	r1, #16
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff f96b 	bl	80038e0 <USB_FlushTxFifo>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff f997 	bl	8003948 <USB_FlushRxFifo>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004624:	2300      	movs	r3, #0
 8004626:	61bb      	str	r3, [r7, #24]
 8004628:	e01f      	b.n	800466a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	4413      	add	r3, r2
 8004632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004640:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004648:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004650:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	4413      	add	r3, r2
 800465a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800465e:	461a      	mov	r2, r3
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	3301      	adds	r3, #1
 8004668:	61bb      	str	r3, [r7, #24]
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b0f      	cmp	r3, #15
 800466e:	d9dc      	bls.n	800462a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004670:	2300      	movs	r3, #0
 8004672:	61bb      	str	r3, [r7, #24]
 8004674:	e034      	b.n	80046e0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	4413      	add	r3, r2
 800467e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800468c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004694:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800469c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046aa:	461a      	mov	r2, r3
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	3301      	adds	r3, #1
 80046b4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046bc:	d80c      	bhi.n	80046d8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046d4:	d0ec      	beq.n	80046b0 <USB_StopHost+0xc8>
 80046d6:	e000      	b.n	80046da <USB_StopHost+0xf2>
        break;
 80046d8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	3301      	adds	r3, #1
 80046de:	61bb      	str	r3, [r7, #24]
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	2b0f      	cmp	r3, #15
 80046e4:	d9c7      	bls.n	8004676 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046ec:	461a      	mov	r2, r3
 80046ee:	f04f 33ff 	mov.w	r3, #4294967295
 80046f2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f04f 32ff 	mov.w	r2, #4294967295
 80046fa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7ff f881 	bl	8003804 <USB_EnableGlobalInt>

  return ret;
 8004702:	7ffb      	ldrb	r3, [r7, #31]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3720      	adds	r7, #32
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800470c:	b590      	push	{r4, r7, lr}
 800470e:	b089      	sub	sp, #36	; 0x24
 8004710:	af04      	add	r7, sp, #16
 8004712:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8004714:	2301      	movs	r3, #1
 8004716:	2202      	movs	r2, #2
 8004718:	2102      	movs	r1, #2
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fc66 	bl	8004fec <USBH_FindInterface>
 8004720:	4603      	mov	r3, r0
 8004722:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	2bff      	cmp	r3, #255	; 0xff
 8004728:	d002      	beq.n	8004730 <USBH_CDC_InterfaceInit+0x24>
 800472a:	7bfb      	ldrb	r3, [r7, #15]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d901      	bls.n	8004734 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8004730:	2302      	movs	r3, #2
 8004732:	e13d      	b.n	80049b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8004734:	7bfb      	ldrb	r3, [r7, #15]
 8004736:	4619      	mov	r1, r3
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 fc3b 	bl	8004fb4 <USBH_SelectInterface>
 800473e:	4603      	mov	r3, r0
 8004740:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8004742:	7bbb      	ldrb	r3, [r7, #14]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8004748:	2302      	movs	r3, #2
 800474a:	e131      	b.n	80049b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8004752:	2050      	movs	r0, #80	; 0x50
 8004754:	f002 fafa 	bl	8006d4c <malloc>
 8004758:	4603      	mov	r3, r0
 800475a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800476c:	2302      	movs	r3, #2
 800476e:	e11f      	b.n	80049b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8004770:	2250      	movs	r2, #80	; 0x50
 8004772:	2100      	movs	r1, #0
 8004774:	68b8      	ldr	r0, [r7, #8]
 8004776:	f002 faf9 	bl	8006d6c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800477a:	7bfb      	ldrb	r3, [r7, #15]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	211a      	movs	r1, #26
 8004780:	fb01 f303 	mul.w	r3, r1, r3
 8004784:	4413      	add	r3, r2
 8004786:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	b25b      	sxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	da15      	bge.n	80047be <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004792:	7bfb      	ldrb	r3, [r7, #15]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	211a      	movs	r1, #26
 8004798:	fb01 f303 	mul.w	r3, r1, r3
 800479c:	4413      	add	r3, r2
 800479e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80047a2:	781a      	ldrb	r2, [r3, #0]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	211a      	movs	r1, #26
 80047ae:	fb01 f303 	mul.w	r3, r1, r3
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80047b8:	881a      	ldrh	r2, [r3, #0]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	785b      	ldrb	r3, [r3, #1]
 80047c2:	4619      	mov	r1, r3
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f001 ff2c 	bl	8006622 <USBH_AllocPipe>
 80047ca:	4603      	mov	r3, r0
 80047cc:	461a      	mov	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	7819      	ldrb	r1, [r3, #0]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	7858      	ldrb	r0, [r3, #1]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	8952      	ldrh	r2, [r2, #10]
 80047ea:	9202      	str	r2, [sp, #8]
 80047ec:	2203      	movs	r2, #3
 80047ee:	9201      	str	r2, [sp, #4]
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	4623      	mov	r3, r4
 80047f4:	4602      	mov	r2, r0
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f001 fee4 	bl	80065c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2200      	movs	r2, #0
 8004802:	4619      	mov	r1, r3
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f002 f9f3 	bl	8006bf0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800480a:	2300      	movs	r3, #0
 800480c:	2200      	movs	r2, #0
 800480e:	210a      	movs	r1, #10
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 fbeb 	bl	8004fec <USBH_FindInterface>
 8004816:	4603      	mov	r3, r0
 8004818:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800481a:	7bfb      	ldrb	r3, [r7, #15]
 800481c:	2bff      	cmp	r3, #255	; 0xff
 800481e:	d002      	beq.n	8004826 <USBH_CDC_InterfaceInit+0x11a>
 8004820:	7bfb      	ldrb	r3, [r7, #15]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d901      	bls.n	800482a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8004826:	2302      	movs	r3, #2
 8004828:	e0c2      	b.n	80049b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800482a:	7bfb      	ldrb	r3, [r7, #15]
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	211a      	movs	r1, #26
 8004830:	fb01 f303 	mul.w	r3, r1, r3
 8004834:	4413      	add	r3, r2
 8004836:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	b25b      	sxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	da16      	bge.n	8004870 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004842:	7bfb      	ldrb	r3, [r7, #15]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	211a      	movs	r1, #26
 8004848:	fb01 f303 	mul.w	r3, r1, r3
 800484c:	4413      	add	r3, r2
 800484e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004852:	781a      	ldrb	r2, [r3, #0]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	211a      	movs	r1, #26
 800485e:	fb01 f303 	mul.w	r3, r1, r3
 8004862:	4413      	add	r3, r2
 8004864:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004868:	881a      	ldrh	r2, [r3, #0]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	835a      	strh	r2, [r3, #26]
 800486e:	e015      	b.n	800489c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	211a      	movs	r1, #26
 8004876:	fb01 f303 	mul.w	r3, r1, r3
 800487a:	4413      	add	r3, r2
 800487c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004880:	781a      	ldrb	r2, [r3, #0]
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004886:	7bfb      	ldrb	r3, [r7, #15]
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	211a      	movs	r1, #26
 800488c:	fb01 f303 	mul.w	r3, r1, r3
 8004890:	4413      	add	r3, r2
 8004892:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004896:	881a      	ldrh	r2, [r3, #0]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	211a      	movs	r1, #26
 80048a2:	fb01 f303 	mul.w	r3, r1, r3
 80048a6:	4413      	add	r3, r2
 80048a8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	b25b      	sxtb	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	da16      	bge.n	80048e2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80048b4:	7bfb      	ldrb	r3, [r7, #15]
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	211a      	movs	r1, #26
 80048ba:	fb01 f303 	mul.w	r3, r1, r3
 80048be:	4413      	add	r3, r2
 80048c0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80048c4:	781a      	ldrb	r2, [r3, #0]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	211a      	movs	r1, #26
 80048d0:	fb01 f303 	mul.w	r3, r1, r3
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80048da:	881a      	ldrh	r2, [r3, #0]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	835a      	strh	r2, [r3, #26]
 80048e0:	e015      	b.n	800490e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80048e2:	7bfb      	ldrb	r3, [r7, #15]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	211a      	movs	r1, #26
 80048e8:	fb01 f303 	mul.w	r3, r1, r3
 80048ec:	4413      	add	r3, r2
 80048ee:	f203 3356 	addw	r3, r3, #854	; 0x356
 80048f2:	781a      	ldrb	r2, [r3, #0]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	211a      	movs	r1, #26
 80048fe:	fb01 f303 	mul.w	r3, r1, r3
 8004902:	4413      	add	r3, r2
 8004904:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8004908:	881a      	ldrh	r2, [r3, #0]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	7b9b      	ldrb	r3, [r3, #14]
 8004912:	4619      	mov	r1, r3
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f001 fe84 	bl	8006622 <USBH_AllocPipe>
 800491a:	4603      	mov	r3, r0
 800491c:	461a      	mov	r2, r3
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	7bdb      	ldrb	r3, [r3, #15]
 8004926:	4619      	mov	r1, r3
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f001 fe7a 	bl	8006622 <USBH_AllocPipe>
 800492e:	4603      	mov	r3, r0
 8004930:	461a      	mov	r2, r3
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	7b59      	ldrb	r1, [r3, #13]
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	7b98      	ldrb	r0, [r3, #14]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	8b12      	ldrh	r2, [r2, #24]
 800494e:	9202      	str	r2, [sp, #8]
 8004950:	2202      	movs	r2, #2
 8004952:	9201      	str	r2, [sp, #4]
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	4623      	mov	r3, r4
 8004958:	4602      	mov	r2, r0
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f001 fe32 	bl	80065c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	7b19      	ldrb	r1, [r3, #12]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	7bd8      	ldrb	r0, [r3, #15]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	8b52      	ldrh	r2, [r2, #26]
 8004978:	9202      	str	r2, [sp, #8]
 800497a:	2202      	movs	r2, #2
 800497c:	9201      	str	r2, [sp, #4]
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	4623      	mov	r3, r4
 8004982:	4602      	mov	r2, r0
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f001 fe1d 	bl	80065c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	7b5b      	ldrb	r3, [r3, #13]
 8004996:	2200      	movs	r2, #0
 8004998:	4619      	mov	r1, r3
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f002 f928 	bl	8006bf0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	7b1b      	ldrb	r3, [r3, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	4619      	mov	r1, r3
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f002 f921 	bl	8006bf0 <USBH_LL_SetToggle>

  return USBH_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd90      	pop	{r4, r7, pc}

080049b8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00e      	beq.n	80049f0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	4619      	mov	r1, r3
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f001 fe12 	bl	8006602 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	4619      	mov	r1, r3
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f001 fe3d 	bl	8006664 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	7b1b      	ldrb	r3, [r3, #12]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00e      	beq.n	8004a16 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	7b1b      	ldrb	r3, [r3, #12]
 80049fc:	4619      	mov	r1, r3
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f001 fdff 	bl	8006602 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	7b1b      	ldrb	r3, [r3, #12]
 8004a08:	4619      	mov	r1, r3
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f001 fe2a 	bl	8006664 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	7b5b      	ldrb	r3, [r3, #13]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00e      	beq.n	8004a3c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	7b5b      	ldrb	r3, [r3, #13]
 8004a22:	4619      	mov	r1, r3
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f001 fdec 	bl	8006602 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	7b5b      	ldrb	r3, [r3, #13]
 8004a2e:	4619      	mov	r1, r3
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f001 fe17 	bl	8006664 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00b      	beq.n	8004a60 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f002 f983 	bl	8006d5c <free>
    phost->pActiveClass->pData = 0U;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3340      	adds	r3, #64	; 0x40
 8004a80:	4619      	mov	r1, r3
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f8b1 	bl	8004bea <GetLineCoding>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8004a8c:	7afb      	ldrb	r3, [r7, #11]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d105      	bne.n	8004a9e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004a98:	2102      	movs	r1, #2
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8004a9e:	7afb      	ldrb	r3, [r7, #11]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d877      	bhi.n	8004bbc <USBH_CDC_Process+0x114>
 8004acc:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <USBH_CDC_Process+0x2c>)
 8004ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad2:	bf00      	nop
 8004ad4:	08004ae9 	.word	0x08004ae9
 8004ad8:	08004aef 	.word	0x08004aef
 8004adc:	08004b1f 	.word	0x08004b1f
 8004ae0:	08004b93 	.word	0x08004b93
 8004ae4:	08004ba1 	.word	0x08004ba1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	73fb      	strb	r3, [r7, #15]
      break;
 8004aec:	e06d      	b.n	8004bca <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af2:	4619      	mov	r1, r3
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f897 	bl	8004c28 <SetLineCoding>
 8004afa:	4603      	mov	r3, r0
 8004afc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004afe:	7bbb      	ldrb	r3, [r7, #14]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d104      	bne.n	8004b0e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8004b0c:	e058      	b.n	8004bc0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8004b0e:	7bbb      	ldrb	r3, [r7, #14]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d055      	beq.n	8004bc0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2204      	movs	r2, #4
 8004b18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8004b1c:	e050      	b.n	8004bc0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	3340      	adds	r3, #64	; 0x40
 8004b22:	4619      	mov	r1, r3
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f860 	bl	8004bea <GetLineCoding>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004b2e:	7bbb      	ldrb	r3, [r7, #14]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d126      	bne.n	8004b82 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b46:	791b      	ldrb	r3, [r3, #4]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d13b      	bne.n	8004bc4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b56:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d133      	bne.n	8004bc4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b66:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d12b      	bne.n	8004bc4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b74:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d124      	bne.n	8004bc4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f958 	bl	8004e30 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8004b80:	e020      	b.n	8004bc4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8004b82:	7bbb      	ldrb	r3, [r7, #14]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d01d      	beq.n	8004bc4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2204      	movs	r2, #4
 8004b8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8004b90:	e018      	b.n	8004bc4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f867 	bl	8004c66 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f8da 	bl	8004d52 <CDC_ProcessReception>
      break;
 8004b9e:	e014      	b.n	8004bca <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 ffef 	bl	8005b86 <USBH_ClrFeature>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004bac:	7bbb      	ldrb	r3, [r7, #14]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10a      	bne.n	8004bc8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8004bba:	e005      	b.n	8004bc8 <USBH_CDC_Process+0x120>

    default:
      break;
 8004bbc:	bf00      	nop
 8004bbe:	e004      	b.n	8004bca <USBH_CDC_Process+0x122>
      break;
 8004bc0:	bf00      	nop
 8004bc2:	e002      	b.n	8004bca <USBH_CDC_Process+0x122>
      break;
 8004bc4:	bf00      	nop
 8004bc6:	e000      	b.n	8004bca <USBH_CDC_Process+0x122>
      break;
 8004bc8:	bf00      	nop

  }

  return status;
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b082      	sub	sp, #8
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
 8004bf2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	22a1      	movs	r2, #161	; 0xa1
 8004bf8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2221      	movs	r2, #33	; 0x21
 8004bfe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2207      	movs	r2, #7
 8004c10:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2207      	movs	r2, #7
 8004c16:	4619      	mov	r1, r3
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f001 fa81 	bl	8006120 <USBH_CtlReq>
 8004c1e:	4603      	mov	r3, r0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2221      	movs	r2, #33	; 0x21
 8004c36:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2207      	movs	r2, #7
 8004c4e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2207      	movs	r2, #7
 8004c54:	4619      	mov	r1, r3
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f001 fa62 	bl	8006120 <USBH_CtlReq>
 8004c5c:	4603      	mov	r3, r0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b086      	sub	sp, #24
 8004c6a:	af02      	add	r7, sp, #8
 8004c6c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d002      	beq.n	8004c8c <CDC_ProcessTransmission+0x26>
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d023      	beq.n	8004cd2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8004c8a:	e05e      	b.n	8004d4a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	8b12      	ldrh	r2, [r2, #24]
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d90b      	bls.n	8004cb0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	69d9      	ldr	r1, [r3, #28]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8b1a      	ldrh	r2, [r3, #24]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	7b5b      	ldrb	r3, [r3, #13]
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	9000      	str	r0, [sp, #0]
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f001 fc48 	bl	800653e <USBH_BulkSendData>
 8004cae:	e00b      	b.n	8004cc8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	7b5b      	ldrb	r3, [r3, #13]
 8004cbe:	2001      	movs	r0, #1
 8004cc0:	9000      	str	r0, [sp, #0]
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f001 fc3b 	bl	800653e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004cd0:	e03b      	b.n	8004d4a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	7b5b      	ldrb	r3, [r3, #13]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f001 ff5f 	bl	8006b9c <USBH_LL_GetURBState>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8004ce2:	7afb      	ldrb	r3, [r7, #11]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d128      	bne.n	8004d3a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	8b12      	ldrh	r2, [r2, #24]
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d90e      	bls.n	8004d12 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	8b12      	ldrh	r2, [r2, #24]
 8004cfc:	1a9a      	subs	r2, r3, r2
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	8b12      	ldrh	r2, [r2, #24]
 8004d0a:	441a      	add	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	61da      	str	r2, [r3, #28]
 8004d10:	e002      	b.n	8004d18 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d004      	beq.n	8004d2a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004d28:	e00e      	b.n	8004d48 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f868 	bl	8004e08 <USBH_CDC_TransmitCallback>
      break;
 8004d38:	e006      	b.n	8004d48 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8004d3a:	7afb      	ldrb	r3, [r7, #11]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d103      	bne.n	8004d48 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004d48:	bf00      	nop
  }
}
 8004d4a:	bf00      	nop
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b086      	sub	sp, #24
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004d64:	2300      	movs	r3, #0
 8004d66:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	d002      	beq.n	8004d78 <CDC_ProcessReception+0x26>
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d00e      	beq.n	8004d94 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8004d76:	e043      	b.n	8004e00 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	6a19      	ldr	r1, [r3, #32]
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	8b5a      	ldrh	r2, [r3, #26]
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	7b1b      	ldrb	r3, [r3, #12]
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f001 fbff 	bl	8006588 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2204      	movs	r2, #4
 8004d8e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8004d92:	e035      	b.n	8004e00 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	7b1b      	ldrb	r3, [r3, #12]
 8004d98:	4619      	mov	r1, r3
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f001 fefe 	bl	8006b9c <USBH_LL_GetURBState>
 8004da0:	4603      	mov	r3, r0
 8004da2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8004da4:	7cfb      	ldrb	r3, [r7, #19]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d129      	bne.n	8004dfe <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	7b1b      	ldrb	r3, [r3, #12]
 8004dae:	4619      	mov	r1, r3
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f001 fe61 	bl	8006a78 <USBH_LL_GetLastXferSize>
 8004db6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d016      	beq.n	8004df0 <CDC_ProcessReception+0x9e>
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	8b5b      	ldrh	r3, [r3, #26]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d910      	bls.n	8004df0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	1ad2      	subs	r2, r2, r3
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	6a1a      	ldr	r2, [r3, #32]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	441a      	add	r2, r3
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2203      	movs	r2, #3
 8004dea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8004dee:	e006      	b.n	8004dfe <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f80f 	bl	8004e1c <USBH_CDC_ReceiveCallback>
      break;
 8004dfe:	bf00      	nop
  }
}
 8004e00:	bf00      	nop
 8004e02:	3718      	adds	r7, #24
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8004e58:	2302      	movs	r3, #2
 8004e5a:	e029      	b.n	8004eb0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	79fa      	ldrb	r2, [r7, #7]
 8004e60:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 f81f 	bl	8004eb8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f001 fd31 	bl	8006910 <USBH_LL_Init>

  return USBH_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	e009      	b.n	8004ede <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	33e0      	adds	r3, #224	; 0xe0
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3301      	adds	r3, #1
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2b0f      	cmp	r3, #15
 8004ee2:	d9f2      	bls.n	8004eca <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	e009      	b.n	8004efe <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	3301      	adds	r3, #1
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f04:	d3f1      	bcc.n	8004eea <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2240      	movs	r2, #64	; 0x40
 8004f2a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d016      	beq.n	8004fa2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10e      	bne.n	8004f9c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004f84:	1c59      	adds	r1, r3, #1
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	33de      	adds	r3, #222	; 0xde
 8004f90:	6839      	ldr	r1, [r7, #0]
 8004f92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	73fb      	strb	r3, [r7, #15]
 8004f9a:	e004      	b.n	8004fa6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	73fb      	strb	r3, [r7, #15]
 8004fa0:	e001      	b.n	8004fa6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8004fca:	78fa      	ldrb	r2, [r7, #3]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d204      	bcs.n	8004fda <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	78fa      	ldrb	r2, [r7, #3]
 8004fd4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8004fd8:	e001      	b.n	8004fde <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8004fda:	2302      	movs	r3, #2
 8004fdc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	4608      	mov	r0, r1
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	70fb      	strb	r3, [r7, #3]
 8004ffe:	460b      	mov	r3, r1
 8005000:	70bb      	strb	r3, [r7, #2]
 8005002:	4613      	mov	r3, r2
 8005004:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800500a:	2300      	movs	r3, #0
 800500c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005014:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005016:	e025      	b.n	8005064 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005018:	7dfb      	ldrb	r3, [r7, #23]
 800501a:	221a      	movs	r2, #26
 800501c:	fb02 f303 	mul.w	r3, r2, r3
 8005020:	3308      	adds	r3, #8
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	4413      	add	r3, r2
 8005026:	3302      	adds	r3, #2
 8005028:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	795b      	ldrb	r3, [r3, #5]
 800502e:	78fa      	ldrb	r2, [r7, #3]
 8005030:	429a      	cmp	r2, r3
 8005032:	d002      	beq.n	800503a <USBH_FindInterface+0x4e>
 8005034:	78fb      	ldrb	r3, [r7, #3]
 8005036:	2bff      	cmp	r3, #255	; 0xff
 8005038:	d111      	bne.n	800505e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800503e:	78ba      	ldrb	r2, [r7, #2]
 8005040:	429a      	cmp	r2, r3
 8005042:	d002      	beq.n	800504a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005044:	78bb      	ldrb	r3, [r7, #2]
 8005046:	2bff      	cmp	r3, #255	; 0xff
 8005048:	d109      	bne.n	800505e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800504e:	787a      	ldrb	r2, [r7, #1]
 8005050:	429a      	cmp	r2, r3
 8005052:	d002      	beq.n	800505a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005054:	787b      	ldrb	r3, [r7, #1]
 8005056:	2bff      	cmp	r3, #255	; 0xff
 8005058:	d101      	bne.n	800505e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800505a:	7dfb      	ldrb	r3, [r7, #23]
 800505c:	e006      	b.n	800506c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800505e:	7dfb      	ldrb	r3, [r7, #23]
 8005060:	3301      	adds	r3, #1
 8005062:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005064:	7dfb      	ldrb	r3, [r7, #23]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d9d6      	bls.n	8005018 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800506a:	23ff      	movs	r3, #255	; 0xff
}
 800506c:	4618      	mov	r0, r3
 800506e:	371c      	adds	r7, #28
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f001 fc81 	bl	8006988 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005086:	2101      	movs	r1, #1
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f001 fd9a 	bl	8006bc2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b088      	sub	sp, #32
 800509c:	af04      	add	r7, sp, #16
 800509e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80050a0:	2302      	movs	r3, #2
 80050a2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d102      	bne.n	80050ba <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2203      	movs	r2, #3
 80050b8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b0b      	cmp	r3, #11
 80050c2:	f200 81be 	bhi.w	8005442 <USBH_Process+0x3aa>
 80050c6:	a201      	add	r2, pc, #4	; (adr r2, 80050cc <USBH_Process+0x34>)
 80050c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050cc:	080050fd 	.word	0x080050fd
 80050d0:	0800512f 	.word	0x0800512f
 80050d4:	08005197 	.word	0x08005197
 80050d8:	080053dd 	.word	0x080053dd
 80050dc:	08005443 	.word	0x08005443
 80050e0:	0800523b 	.word	0x0800523b
 80050e4:	08005383 	.word	0x08005383
 80050e8:	08005271 	.word	0x08005271
 80050ec:	08005291 	.word	0x08005291
 80050f0:	080052b1 	.word	0x080052b1
 80050f4:	080052f5 	.word	0x080052f5
 80050f8:	080053c5 	.word	0x080053c5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 819e 	beq.w	8005446 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005110:	20c8      	movs	r0, #200	; 0xc8
 8005112:	f001 fd9d 	bl	8006c50 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f001 fc93 	bl	8006a42 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800512c:	e18b      	b.n	8005446 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005134:	2b01      	cmp	r3, #1
 8005136:	d107      	bne.n	8005148 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005146:	e18d      	b.n	8005464 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800514e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005152:	d914      	bls.n	800517e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800515a:	3301      	adds	r3, #1
 800515c:	b2da      	uxtb	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800516a:	2b03      	cmp	r3, #3
 800516c:	d903      	bls.n	8005176 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	220d      	movs	r2, #13
 8005172:	701a      	strb	r2, [r3, #0]
      break;
 8005174:	e176      	b.n	8005464 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	701a      	strb	r2, [r3, #0]
      break;
 800517c:	e172      	b.n	8005464 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005184:	f103 020a 	add.w	r2, r3, #10
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800518e:	200a      	movs	r0, #10
 8005190:	f001 fd5e 	bl	8006c50 <USBH_Delay>
      break;
 8005194:	e166      	b.n	8005464 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80051a6:	2104      	movs	r1, #4
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80051ac:	2064      	movs	r0, #100	; 0x64
 80051ae:	f001 fd4f 	bl	8006c50 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f001 fc1e 	bl	80069f4 <USBH_LL_GetSpeed>
 80051b8:	4603      	mov	r3, r0
 80051ba:	461a      	mov	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2205      	movs	r2, #5
 80051c6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80051c8:	2100      	movs	r1, #0
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f001 fa29 	bl	8006622 <USBH_AllocPipe>
 80051d0:	4603      	mov	r3, r0
 80051d2:	461a      	mov	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80051d8:	2180      	movs	r1, #128	; 0x80
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f001 fa21 	bl	8006622 <USBH_AllocPipe>
 80051e0:	4603      	mov	r3, r0
 80051e2:	461a      	mov	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	7919      	ldrb	r1, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80051fc:	b292      	uxth	r2, r2
 80051fe:	9202      	str	r2, [sp, #8]
 8005200:	2200      	movs	r2, #0
 8005202:	9201      	str	r2, [sp, #4]
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	4603      	mov	r3, r0
 8005208:	2280      	movs	r2, #128	; 0x80
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f001 f9da 	bl	80065c4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	7959      	ldrb	r1, [r3, #5]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005224:	b292      	uxth	r2, r2
 8005226:	9202      	str	r2, [sp, #8]
 8005228:	2200      	movs	r2, #0
 800522a:	9201      	str	r2, [sp, #4]
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	4603      	mov	r3, r0
 8005230:	2200      	movs	r2, #0
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f001 f9c6 	bl	80065c4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005238:	e114      	b.n	8005464 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f918 	bl	8005470 <USBH_HandleEnum>
 8005240:	4603      	mov	r3, r0
 8005242:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005244:	7bbb      	ldrb	r3, [r7, #14]
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	f040 80fe 	bne.w	800544a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800525c:	2b01      	cmp	r3, #1
 800525e:	d103      	bne.n	8005268 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2208      	movs	r2, #8
 8005264:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005266:	e0f0      	b.n	800544a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2207      	movs	r2, #7
 800526c:	701a      	strb	r2, [r3, #0]
      break;
 800526e:	e0ec      	b.n	800544a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 80e9 	beq.w	800544e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005282:	2101      	movs	r1, #1
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2208      	movs	r2, #8
 800528c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800528e:	e0de      	b.n	800544e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005296:	b29b      	uxth	r3, r3
 8005298:	4619      	mov	r1, r3
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fc2c 	bl	8005af8 <USBH_SetCfg>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f040 80d5 	bne.w	8005452 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2209      	movs	r2, #9
 80052ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80052ae:	e0d0      	b.n	8005452 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80052b6:	f003 0320 	and.w	r3, r3, #32
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d016      	beq.n	80052ec <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80052be:	2101      	movs	r1, #1
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fc3c 	bl	8005b3e <USBH_SetFeature>
 80052c6:	4603      	mov	r3, r0
 80052c8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80052ca:	7bbb      	ldrb	r3, [r7, #14]
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d103      	bne.n	80052da <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	220a      	movs	r2, #10
 80052d6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80052d8:	e0bd      	b.n	8005456 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80052da:	7bbb      	ldrb	r3, [r7, #14]
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b03      	cmp	r3, #3
 80052e0:	f040 80b9 	bne.w	8005456 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	220a      	movs	r2, #10
 80052e8:	701a      	strb	r2, [r3, #0]
      break;
 80052ea:	e0b4      	b.n	8005456 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	220a      	movs	r2, #10
 80052f0:	701a      	strb	r2, [r3, #0]
      break;
 80052f2:	e0b0      	b.n	8005456 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 80ad 	beq.w	800545a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005308:	2300      	movs	r3, #0
 800530a:	73fb      	strb	r3, [r7, #15]
 800530c:	e016      	b.n	800533c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800530e:	7bfa      	ldrb	r2, [r7, #15]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	32de      	adds	r2, #222	; 0xde
 8005314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005318:	791a      	ldrb	r2, [r3, #4]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8005320:	429a      	cmp	r2, r3
 8005322:	d108      	bne.n	8005336 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8005324:	7bfa      	ldrb	r2, [r7, #15]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	32de      	adds	r2, #222	; 0xde
 800532a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8005334:	e005      	b.n	8005342 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005336:	7bfb      	ldrb	r3, [r7, #15]
 8005338:	3301      	adds	r3, #1
 800533a:	73fb      	strb	r3, [r7, #15]
 800533c:	7bfb      	ldrb	r3, [r7, #15]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d0e5      	beq.n	800530e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005348:	2b00      	cmp	r3, #0
 800534a:	d016      	beq.n	800537a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	4798      	blx	r3
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d109      	bne.n	8005372 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2206      	movs	r2, #6
 8005362:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800536a:	2103      	movs	r1, #3
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005370:	e073      	b.n	800545a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	220d      	movs	r2, #13
 8005376:	701a      	strb	r2, [r3, #0]
      break;
 8005378:	e06f      	b.n	800545a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	220d      	movs	r2, #13
 800537e:	701a      	strb	r2, [r3, #0]
      break;
 8005380:	e06b      	b.n	800545a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005388:	2b00      	cmp	r3, #0
 800538a:	d017      	beq.n	80053bc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	4798      	blx	r3
 8005398:	4603      	mov	r3, r0
 800539a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800539c:	7bbb      	ldrb	r3, [r7, #14]
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d103      	bne.n	80053ac <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	220b      	movs	r2, #11
 80053a8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80053aa:	e058      	b.n	800545e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80053ac:	7bbb      	ldrb	r3, [r7, #14]
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d154      	bne.n	800545e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	220d      	movs	r2, #13
 80053b8:	701a      	strb	r2, [r3, #0]
      break;
 80053ba:	e050      	b.n	800545e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	220d      	movs	r2, #13
 80053c0:	701a      	strb	r2, [r3, #0]
      break;
 80053c2:	e04c      	b.n	800545e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d049      	beq.n	8005462 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	4798      	blx	r3
      }
      break;
 80053da:	e042      	b.n	8005462 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff fd67 	bl	8004eb8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d009      	beq.n	8005408 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800540e:	2b00      	cmp	r3, #0
 8005410:	d005      	beq.n	800541e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005418:	2105      	movs	r1, #5
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b01      	cmp	r3, #1
 8005428:	d107      	bne.n	800543a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7ff fe20 	bl	8005078 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005438:	e014      	b.n	8005464 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f001 faa4 	bl	8006988 <USBH_LL_Start>
      break;
 8005440:	e010      	b.n	8005464 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8005442:	bf00      	nop
 8005444:	e00e      	b.n	8005464 <USBH_Process+0x3cc>
      break;
 8005446:	bf00      	nop
 8005448:	e00c      	b.n	8005464 <USBH_Process+0x3cc>
      break;
 800544a:	bf00      	nop
 800544c:	e00a      	b.n	8005464 <USBH_Process+0x3cc>
    break;
 800544e:	bf00      	nop
 8005450:	e008      	b.n	8005464 <USBH_Process+0x3cc>
      break;
 8005452:	bf00      	nop
 8005454:	e006      	b.n	8005464 <USBH_Process+0x3cc>
      break;
 8005456:	bf00      	nop
 8005458:	e004      	b.n	8005464 <USBH_Process+0x3cc>
      break;
 800545a:	bf00      	nop
 800545c:	e002      	b.n	8005464 <USBH_Process+0x3cc>
      break;
 800545e:	bf00      	nop
 8005460:	e000      	b.n	8005464 <USBH_Process+0x3cc>
      break;
 8005462:	bf00      	nop
  }
  return USBH_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop

08005470 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af04      	add	r7, sp, #16
 8005476:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005478:	2301      	movs	r3, #1
 800547a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800547c:	2301      	movs	r3, #1
 800547e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	785b      	ldrb	r3, [r3, #1]
 8005484:	2b07      	cmp	r3, #7
 8005486:	f200 81c1 	bhi.w	800580c <USBH_HandleEnum+0x39c>
 800548a:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <USBH_HandleEnum+0x20>)
 800548c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005490:	080054b1 	.word	0x080054b1
 8005494:	0800556f 	.word	0x0800556f
 8005498:	080055d9 	.word	0x080055d9
 800549c:	08005667 	.word	0x08005667
 80054a0:	080056d1 	.word	0x080056d1
 80054a4:	08005741 	.word	0x08005741
 80054a8:	08005787 	.word	0x08005787
 80054ac:	080057cd 	.word	0x080057cd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80054b0:	2108      	movs	r1, #8
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fa50 	bl	8005958 <USBH_Get_DevDesc>
 80054b8:	4603      	mov	r3, r0
 80054ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80054bc:	7bbb      	ldrb	r3, [r7, #14]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d130      	bne.n	8005524 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	7919      	ldrb	r1, [r3, #4]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80054e6:	b292      	uxth	r2, r2
 80054e8:	9202      	str	r2, [sp, #8]
 80054ea:	2200      	movs	r2, #0
 80054ec:	9201      	str	r2, [sp, #4]
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	4603      	mov	r3, r0
 80054f2:	2280      	movs	r2, #128	; 0x80
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f001 f865 	bl	80065c4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	7959      	ldrb	r1, [r3, #5]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800550e:	b292      	uxth	r2, r2
 8005510:	9202      	str	r2, [sp, #8]
 8005512:	2200      	movs	r2, #0
 8005514:	9201      	str	r2, [sp, #4]
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	4603      	mov	r3, r0
 800551a:	2200      	movs	r2, #0
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f001 f851 	bl	80065c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005522:	e175      	b.n	8005810 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005524:	7bbb      	ldrb	r3, [r7, #14]
 8005526:	2b03      	cmp	r3, #3
 8005528:	f040 8172 	bne.w	8005810 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005532:	3301      	adds	r3, #1
 8005534:	b2da      	uxtb	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005542:	2b03      	cmp	r3, #3
 8005544:	d903      	bls.n	800554e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	220d      	movs	r2, #13
 800554a:	701a      	strb	r2, [r3, #0]
      break;
 800554c:	e160      	b.n	8005810 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	795b      	ldrb	r3, [r3, #5]
 8005552:	4619      	mov	r1, r3
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f001 f885 	bl	8006664 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	791b      	ldrb	r3, [r3, #4]
 800555e:	4619      	mov	r1, r3
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f001 f87f 	bl	8006664 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	701a      	strb	r2, [r3, #0]
      break;
 800556c:	e150      	b.n	8005810 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800556e:	2112      	movs	r1, #18
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f9f1 	bl	8005958 <USBH_Get_DevDesc>
 8005576:	4603      	mov	r3, r0
 8005578:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800557a:	7bbb      	ldrb	r3, [r7, #14]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d103      	bne.n	8005588 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005586:	e145      	b.n	8005814 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005588:	7bbb      	ldrb	r3, [r7, #14]
 800558a:	2b03      	cmp	r3, #3
 800558c:	f040 8142 	bne.w	8005814 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005596:	3301      	adds	r3, #1
 8005598:	b2da      	uxtb	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80055a6:	2b03      	cmp	r3, #3
 80055a8:	d903      	bls.n	80055b2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	220d      	movs	r2, #13
 80055ae:	701a      	strb	r2, [r3, #0]
      break;
 80055b0:	e130      	b.n	8005814 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	795b      	ldrb	r3, [r3, #5]
 80055b6:	4619      	mov	r1, r3
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f001 f853 	bl	8006664 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	791b      	ldrb	r3, [r3, #4]
 80055c2:	4619      	mov	r1, r3
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f001 f84d 	bl	8006664 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	701a      	strb	r2, [r3, #0]
      break;
 80055d6:	e11d      	b.n	8005814 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80055d8:	2101      	movs	r1, #1
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fa68 	bl	8005ab0 <USBH_SetAddress>
 80055e0:	4603      	mov	r3, r0
 80055e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80055e4:	7bbb      	ldrb	r3, [r7, #14]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d132      	bne.n	8005650 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80055ea:	2002      	movs	r0, #2
 80055ec:	f001 fb30 	bl	8006c50 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2203      	movs	r2, #3
 80055fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	7919      	ldrb	r1, [r3, #4]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005612:	b292      	uxth	r2, r2
 8005614:	9202      	str	r2, [sp, #8]
 8005616:	2200      	movs	r2, #0
 8005618:	9201      	str	r2, [sp, #4]
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	4603      	mov	r3, r0
 800561e:	2280      	movs	r2, #128	; 0x80
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 ffcf 	bl	80065c4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	7959      	ldrb	r1, [r3, #5]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800563a:	b292      	uxth	r2, r2
 800563c:	9202      	str	r2, [sp, #8]
 800563e:	2200      	movs	r2, #0
 8005640:	9201      	str	r2, [sp, #4]
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	4603      	mov	r3, r0
 8005646:	2200      	movs	r2, #0
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 ffbb 	bl	80065c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800564e:	e0e3      	b.n	8005818 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005650:	7bbb      	ldrb	r3, [r7, #14]
 8005652:	2b03      	cmp	r3, #3
 8005654:	f040 80e0 	bne.w	8005818 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	220d      	movs	r2, #13
 800565c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	705a      	strb	r2, [r3, #1]
      break;
 8005664:	e0d8      	b.n	8005818 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8005666:	2109      	movs	r1, #9
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f99d 	bl	80059a8 <USBH_Get_CfgDesc>
 800566e:	4603      	mov	r3, r0
 8005670:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005672:	7bbb      	ldrb	r3, [r7, #14]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d103      	bne.n	8005680 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2204      	movs	r2, #4
 800567c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800567e:	e0cd      	b.n	800581c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005680:	7bbb      	ldrb	r3, [r7, #14]
 8005682:	2b03      	cmp	r3, #3
 8005684:	f040 80ca 	bne.w	800581c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800568e:	3301      	adds	r3, #1
 8005690:	b2da      	uxtb	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d903      	bls.n	80056aa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	220d      	movs	r2, #13
 80056a6:	701a      	strb	r2, [r3, #0]
      break;
 80056a8:	e0b8      	b.n	800581c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	795b      	ldrb	r3, [r3, #5]
 80056ae:	4619      	mov	r1, r3
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 ffd7 	bl	8006664 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	791b      	ldrb	r3, [r3, #4]
 80056ba:	4619      	mov	r1, r3
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 ffd1 	bl	8006664 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	701a      	strb	r2, [r3, #0]
      break;
 80056ce:	e0a5      	b.n	800581c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80056d6:	4619      	mov	r1, r3
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f965 	bl	80059a8 <USBH_Get_CfgDesc>
 80056de:	4603      	mov	r3, r0
 80056e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80056e2:	7bbb      	ldrb	r3, [r7, #14]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d103      	bne.n	80056f0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2205      	movs	r2, #5
 80056ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80056ee:	e097      	b.n	8005820 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80056f0:	7bbb      	ldrb	r3, [r7, #14]
 80056f2:	2b03      	cmp	r3, #3
 80056f4:	f040 8094 	bne.w	8005820 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80056fe:	3301      	adds	r3, #1
 8005700:	b2da      	uxtb	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800570e:	2b03      	cmp	r3, #3
 8005710:	d903      	bls.n	800571a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	220d      	movs	r2, #13
 8005716:	701a      	strb	r2, [r3, #0]
      break;
 8005718:	e082      	b.n	8005820 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	795b      	ldrb	r3, [r3, #5]
 800571e:	4619      	mov	r1, r3
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 ff9f 	bl	8006664 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	791b      	ldrb	r3, [r3, #4]
 800572a:	4619      	mov	r1, r3
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 ff99 	bl	8006664 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	701a      	strb	r2, [r3, #0]
      break;
 800573e:	e06f      	b.n	8005820 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8005746:	2b00      	cmp	r3, #0
 8005748:	d019      	beq.n	800577e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8005756:	23ff      	movs	r3, #255	; 0xff
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f949 	bl	80059f0 <USBH_Get_StringDesc>
 800575e:	4603      	mov	r3, r0
 8005760:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005762:	7bbb      	ldrb	r3, [r7, #14]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d103      	bne.n	8005770 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2206      	movs	r2, #6
 800576c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800576e:	e059      	b.n	8005824 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005770:	7bbb      	ldrb	r3, [r7, #14]
 8005772:	2b03      	cmp	r3, #3
 8005774:	d156      	bne.n	8005824 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2206      	movs	r2, #6
 800577a:	705a      	strb	r2, [r3, #1]
      break;
 800577c:	e052      	b.n	8005824 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2206      	movs	r2, #6
 8005782:	705a      	strb	r2, [r3, #1]
      break;
 8005784:	e04e      	b.n	8005824 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800578c:	2b00      	cmp	r3, #0
 800578e:	d019      	beq.n	80057c4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800579c:	23ff      	movs	r3, #255	; 0xff
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f926 	bl	80059f0 <USBH_Get_StringDesc>
 80057a4:	4603      	mov	r3, r0
 80057a6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80057a8:	7bbb      	ldrb	r3, [r7, #14]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d103      	bne.n	80057b6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2207      	movs	r2, #7
 80057b2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80057b4:	e038      	b.n	8005828 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80057b6:	7bbb      	ldrb	r3, [r7, #14]
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d135      	bne.n	8005828 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2207      	movs	r2, #7
 80057c0:	705a      	strb	r2, [r3, #1]
      break;
 80057c2:	e031      	b.n	8005828 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2207      	movs	r2, #7
 80057c8:	705a      	strb	r2, [r3, #1]
      break;
 80057ca:	e02d      	b.n	8005828 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d017      	beq.n	8005806 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80057e2:	23ff      	movs	r3, #255	; 0xff
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f903 	bl	80059f0 <USBH_Get_StringDesc>
 80057ea:	4603      	mov	r3, r0
 80057ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80057ee:	7bbb      	ldrb	r3, [r7, #14]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d102      	bne.n	80057fa <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80057f4:	2300      	movs	r3, #0
 80057f6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80057f8:	e018      	b.n	800582c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80057fa:	7bbb      	ldrb	r3, [r7, #14]
 80057fc:	2b03      	cmp	r3, #3
 80057fe:	d115      	bne.n	800582c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8005800:	2300      	movs	r3, #0
 8005802:	73fb      	strb	r3, [r7, #15]
      break;
 8005804:	e012      	b.n	800582c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8005806:	2300      	movs	r3, #0
 8005808:	73fb      	strb	r3, [r7, #15]
      break;
 800580a:	e00f      	b.n	800582c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800580c:	bf00      	nop
 800580e:	e00e      	b.n	800582e <USBH_HandleEnum+0x3be>
      break;
 8005810:	bf00      	nop
 8005812:	e00c      	b.n	800582e <USBH_HandleEnum+0x3be>
      break;
 8005814:	bf00      	nop
 8005816:	e00a      	b.n	800582e <USBH_HandleEnum+0x3be>
      break;
 8005818:	bf00      	nop
 800581a:	e008      	b.n	800582e <USBH_HandleEnum+0x3be>
      break;
 800581c:	bf00      	nop
 800581e:	e006      	b.n	800582e <USBH_HandleEnum+0x3be>
      break;
 8005820:	bf00      	nop
 8005822:	e004      	b.n	800582e <USBH_HandleEnum+0x3be>
      break;
 8005824:	bf00      	nop
 8005826:	e002      	b.n	800582e <USBH_HandleEnum+0x3be>
      break;
 8005828:	bf00      	nop
 800582a:	e000      	b.n	800582e <USBH_HandleEnum+0x3be>
      break;
 800582c:	bf00      	nop
  }
  return Status;
 800582e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b082      	sub	sp, #8
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005864:	1c5a      	adds	r2, r3, #1
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f804 	bl	800587a <USBH_HandleSof>
}
 8005872:	bf00      	nop
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b082      	sub	sp, #8
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b0b      	cmp	r3, #11
 800588a:	d10a      	bne.n	80058a2 <USBH_HandleSof+0x28>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005892:	2b00      	cmp	r3, #0
 8005894:	d005      	beq.n	80058a2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	4798      	blx	r3
  }
}
 80058a2:	bf00      	nop
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80058ba:	bf00      	nop
}
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80058d6:	bf00      	nop
}
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b083      	sub	sp, #12
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f001 f844 	bl	80069be <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	791b      	ldrb	r3, [r3, #4]
 800593a:	4619      	mov	r1, r3
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 fe91 	bl	8006664 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	795b      	ldrb	r3, [r3, #5]
 8005946:	4619      	mov	r1, r3
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fe8b 	bl	8006664 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af02      	add	r7, sp, #8
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	460b      	mov	r3, r1
 8005962:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800596a:	78fb      	ldrb	r3, [r7, #3]
 800596c:	b29b      	uxth	r3, r3
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	4613      	mov	r3, r2
 8005972:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005976:	2100      	movs	r1, #0
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f864 	bl	8005a46 <USBH_GetDescriptor>
 800597e:	4603      	mov	r3, r0
 8005980:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8005982:	7bfb      	ldrb	r3, [r7, #15]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10a      	bne.n	800599e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005994:	78fa      	ldrb	r2, [r7, #3]
 8005996:	b292      	uxth	r2, r2
 8005998:	4619      	mov	r1, r3
 800599a:	f000 f918 	bl	8005bce <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800599e:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	460b      	mov	r3, r1
 80059b2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	331c      	adds	r3, #28
 80059b8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80059ba:	887b      	ldrh	r3, [r7, #2]
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059c4:	2100      	movs	r1, #0
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f83d 	bl	8005a46 <USBH_GetDescriptor>
 80059cc:	4603      	mov	r3, r0
 80059ce:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d107      	bne.n	80059e6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80059d6:	887b      	ldrh	r3, [r7, #2]
 80059d8:	461a      	mov	r2, r3
 80059da:	68b9      	ldr	r1, [r7, #8]
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f987 	bl	8005cf0 <USBH_ParseCfgDesc>
 80059e2:	4603      	mov	r3, r0
 80059e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b088      	sub	sp, #32
 80059f4:	af02      	add	r7, sp, #8
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	607a      	str	r2, [r7, #4]
 80059fa:	461a      	mov	r2, r3
 80059fc:	460b      	mov	r3, r1
 80059fe:	72fb      	strb	r3, [r7, #11]
 8005a00:	4613      	mov	r3, r2
 8005a02:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8005a04:	7afb      	ldrb	r3, [r7, #11]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005a0c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8005a14:	893b      	ldrh	r3, [r7, #8]
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 f812 	bl	8005a46 <USBH_GetDescriptor>
 8005a22:	4603      	mov	r3, r0
 8005a24:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8005a26:	7dfb      	ldrb	r3, [r7, #23]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d107      	bne.n	8005a3c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005a32:	893a      	ldrh	r2, [r7, #8]
 8005a34:	6879      	ldr	r1, [r7, #4]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 fb24 	bl	8006084 <USBH_ParseStringDesc>
  }

  return status;
 8005a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3718      	adds	r7, #24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b084      	sub	sp, #16
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	607b      	str	r3, [r7, #4]
 8005a50:	460b      	mov	r3, r1
 8005a52:	72fb      	strb	r3, [r7, #11]
 8005a54:	4613      	mov	r3, r2
 8005a56:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	789b      	ldrb	r3, [r3, #2]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d11c      	bne.n	8005a9a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8005a60:	7afb      	ldrb	r3, [r7, #11]
 8005a62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2206      	movs	r2, #6
 8005a70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	893a      	ldrh	r2, [r7, #8]
 8005a76:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8005a78:	893b      	ldrh	r3, [r7, #8]
 8005a7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005a7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a82:	d104      	bne.n	8005a8e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f240 4209 	movw	r2, #1033	; 0x409
 8005a8a:	829a      	strh	r2, [r3, #20]
 8005a8c:	e002      	b.n	8005a94 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8b3a      	ldrh	r2, [r7, #24]
 8005a98:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8005a9a:	8b3b      	ldrh	r3, [r7, #24]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	6879      	ldr	r1, [r7, #4]
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 fb3d 	bl	8006120 <USBH_CtlReq>
 8005aa6:	4603      	mov	r3, r0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	789b      	ldrb	r3, [r3, #2]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d10f      	bne.n	8005ae4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2205      	movs	r2, #5
 8005ace:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8005ad0:	78fb      	ldrb	r3, [r7, #3]
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 fb19 	bl	8006120 <USBH_CtlReq>
 8005aee:	4603      	mov	r3, r0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	460b      	mov	r3, r1
 8005b02:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	789b      	ldrb	r3, [r3, #2]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d10e      	bne.n	8005b2a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2209      	movs	r2, #9
 8005b16:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	887a      	ldrh	r2, [r7, #2]
 8005b1c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 faf6 	bl	8006120 <USBH_CtlReq>
 8005b34:	4603      	mov	r3, r0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b082      	sub	sp, #8
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	460b      	mov	r3, r1
 8005b48:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	789b      	ldrb	r3, [r3, #2]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d10f      	bne.n	8005b72 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2203      	movs	r2, #3
 8005b5c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8005b5e:	78fb      	ldrb	r3, [r7, #3]
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8005b72:	2200      	movs	r2, #0
 8005b74:	2100      	movs	r1, #0
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fad2 	bl	8006120 <USBH_CtlReq>
 8005b7c:	4603      	mov	r3, r0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b082      	sub	sp, #8
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
 8005b8e:	460b      	mov	r3, r1
 8005b90:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	789b      	ldrb	r3, [r3, #2]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d10f      	bne.n	8005bba <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8005bac:	78fb      	ldrb	r3, [r7, #3]
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8005bba:	2200      	movs	r2, #0
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 faae 	bl	8006120 <USBH_CtlReq>
 8005bc4:	4603      	mov	r3, r0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b085      	sub	sp, #20
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	781a      	ldrb	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	785a      	ldrb	r2, [r3, #1]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	3302      	adds	r3, #2
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	3303      	adds	r3, #3
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	021b      	lsls	r3, r3, #8
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	4313      	orrs	r3, r2
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	791a      	ldrb	r2, [r3, #4]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	795a      	ldrb	r2, [r3, #5]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	799a      	ldrb	r2, [r3, #6]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	79da      	ldrb	r2, [r3, #7]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	79db      	ldrb	r3, [r3, #7]
 8005c2c:	2b20      	cmp	r3, #32
 8005c2e:	dc11      	bgt.n	8005c54 <USBH_ParseDevDesc+0x86>
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	db16      	blt.n	8005c62 <USBH_ParseDevDesc+0x94>
 8005c34:	3b08      	subs	r3, #8
 8005c36:	2201      	movs	r2, #1
 8005c38:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8005c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	bf14      	ite	ne
 8005c48:	2301      	movne	r3, #1
 8005c4a:	2300      	moveq	r3, #0
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d102      	bne.n	8005c58 <USBH_ParseDevDesc+0x8a>
 8005c52:	e006      	b.n	8005c62 <USBH_ParseDevDesc+0x94>
 8005c54:	2b40      	cmp	r3, #64	; 0x40
 8005c56:	d104      	bne.n	8005c62 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	79da      	ldrb	r2, [r3, #7]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	71da      	strb	r2, [r3, #7]
      break;
 8005c60:	e003      	b.n	8005c6a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2240      	movs	r2, #64	; 0x40
 8005c66:	71da      	strb	r2, [r3, #7]
      break;
 8005c68:	bf00      	nop
  }

  if (length > 8U)
 8005c6a:	88fb      	ldrh	r3, [r7, #6]
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d939      	bls.n	8005ce4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	3308      	adds	r3, #8
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	3309      	adds	r3, #9
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	021b      	lsls	r3, r3, #8
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	4313      	orrs	r3, r2
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	330a      	adds	r3, #10
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	330b      	adds	r3, #11
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	330c      	adds	r3, #12
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	330d      	adds	r3, #13
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	021b      	lsls	r3, r3, #8
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	7b9a      	ldrb	r2, [r3, #14]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	7bda      	ldrb	r2, [r3, #15]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	7c1a      	ldrb	r2, [r3, #16]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	7c5a      	ldrb	r2, [r3, #17]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	745a      	strb	r2, [r3, #17]
  }
}
 8005ce4:	bf00      	nop
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b08c      	sub	sp, #48	; 0x30
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005d04:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8005d06:	2300      	movs	r3, #0
 8005d08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8005d10:	2300      	movs	r3, #0
 8005d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	781a      	ldrb	r2, [r3, #0]
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	785a      	ldrb	r2, [r3, #1]
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	3302      	adds	r3, #2
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	3303      	adds	r3, #3
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	021b      	lsls	r3, r3, #8
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	4313      	orrs	r3, r2
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d4c:	bf28      	it	cs
 8005d4e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	791a      	ldrb	r2, [r3, #4]
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	795a      	ldrb	r2, [r3, #5]
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	799a      	ldrb	r2, [r3, #6]
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	79da      	ldrb	r2, [r3, #7]
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	7a1a      	ldrb	r2, [r3, #8]
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b09      	cmp	r3, #9
 8005d86:	d002      	beq.n	8005d8e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	2209      	movs	r2, #9
 8005d8c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8005d8e:	88fb      	ldrh	r3, [r7, #6]
 8005d90:	2b09      	cmp	r3, #9
 8005d92:	f240 809d 	bls.w	8005ed0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8005d96:	2309      	movs	r3, #9
 8005d98:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8005d9e:	e081      	b.n	8005ea4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8005da0:	f107 0316 	add.w	r3, r7, #22
 8005da4:	4619      	mov	r1, r3
 8005da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005da8:	f000 f99f 	bl	80060ea <USBH_GetNextDesc>
 8005dac:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8005dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db0:	785b      	ldrb	r3, [r3, #1]
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d176      	bne.n	8005ea4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8005db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	2b09      	cmp	r3, #9
 8005dbc:	d002      	beq.n	8005dc4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8005dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc0:	2209      	movs	r2, #9
 8005dc2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8005dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dc8:	221a      	movs	r2, #26
 8005dca:	fb02 f303 	mul.w	r3, r2, r3
 8005dce:	3308      	adds	r3, #8
 8005dd0:	6a3a      	ldr	r2, [r7, #32]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	3302      	adds	r3, #2
 8005dd6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8005dd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dda:	69f8      	ldr	r0, [r7, #28]
 8005ddc:	f000 f87e 	bl	8005edc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8005de6:	2300      	movs	r3, #0
 8005de8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8005dea:	e043      	b.n	8005e74 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8005dec:	f107 0316 	add.w	r3, r7, #22
 8005df0:	4619      	mov	r1, r3
 8005df2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005df4:	f000 f979 	bl	80060ea <USBH_GetNextDesc>
 8005df8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfc:	785b      	ldrb	r3, [r3, #1]
 8005dfe:	2b05      	cmp	r3, #5
 8005e00:	d138      	bne.n	8005e74 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	795b      	ldrb	r3, [r3, #5]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d10f      	bne.n	8005e2a <USBH_ParseCfgDesc+0x13a>
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	799b      	ldrb	r3, [r3, #6]
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d10b      	bne.n	8005e2a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	79db      	ldrb	r3, [r3, #7]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10f      	bne.n	8005e3a <USBH_ParseCfgDesc+0x14a>
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	2b09      	cmp	r3, #9
 8005e20:	d00b      	beq.n	8005e3a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8005e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e24:	2209      	movs	r2, #9
 8005e26:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8005e28:	e007      	b.n	8005e3a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8005e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	2b07      	cmp	r3, #7
 8005e30:	d004      	beq.n	8005e3c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8005e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e34:	2207      	movs	r2, #7
 8005e36:	701a      	strb	r2, [r3, #0]
 8005e38:	e000      	b.n	8005e3c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8005e3a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8005e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e40:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005e44:	3201      	adds	r2, #1
 8005e46:	00d2      	lsls	r2, r2, #3
 8005e48:	211a      	movs	r1, #26
 8005e4a:	fb01 f303 	mul.w	r3, r1, r3
 8005e4e:	4413      	add	r3, r2
 8005e50:	3308      	adds	r3, #8
 8005e52:	6a3a      	ldr	r2, [r7, #32]
 8005e54:	4413      	add	r3, r2
 8005e56:	3304      	adds	r3, #4
 8005e58:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8005e5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e5c:	69b9      	ldr	r1, [r7, #24]
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 f86b 	bl	8005f3a <USBH_ParseEPDesc>
 8005e64:	4603      	mov	r3, r0
 8005e66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8005e6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e6e:	3301      	adds	r3, #1
 8005e70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	791b      	ldrb	r3, [r3, #4]
 8005e78:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d204      	bcs.n	8005e8a <USBH_ParseCfgDesc+0x19a>
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	885a      	ldrh	r2, [r3, #2]
 8005e84:	8afb      	ldrh	r3, [r7, #22]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d8b0      	bhi.n	8005dec <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	791b      	ldrb	r3, [r3, #4]
 8005e8e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d201      	bcs.n	8005e9a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e01c      	b.n	8005ed4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8005e9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8005ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d805      	bhi.n	8005eb8 <USBH_ParseCfgDesc+0x1c8>
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	885a      	ldrh	r2, [r3, #2]
 8005eb0:	8afb      	ldrh	r3, [r7, #22]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	f63f af74 	bhi.w	8005da0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	791b      	ldrb	r3, [r3, #4]
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	bf28      	it	cs
 8005ec0:	2302      	movcs	r3, #2
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d201      	bcs.n	8005ed0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e001      	b.n	8005ed4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8005ed0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3730      	adds	r7, #48	; 0x30
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781a      	ldrb	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	785a      	ldrb	r2, [r3, #1]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	789a      	ldrb	r2, [r3, #2]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	78da      	ldrb	r2, [r3, #3]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	791a      	ldrb	r2, [r3, #4]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	795a      	ldrb	r2, [r3, #5]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	799a      	ldrb	r2, [r3, #6]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	79da      	ldrb	r2, [r3, #7]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	7a1a      	ldrb	r2, [r3, #8]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	721a      	strb	r2, [r3, #8]
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b087      	sub	sp, #28
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	60f8      	str	r0, [r7, #12]
 8005f42:	60b9      	str	r1, [r7, #8]
 8005f44:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	781a      	ldrb	r2, [r3, #0]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	785a      	ldrb	r2, [r3, #1]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	789a      	ldrb	r2, [r3, #2]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	78da      	ldrb	r2, [r3, #3]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	3305      	adds	r3, #5
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	021b      	lsls	r3, r3, #8
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	799a      	ldrb	r2, [r3, #6]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	889b      	ldrh	r3, [r3, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d102      	bne.n	8005f9c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8005f96:	2303      	movs	r3, #3
 8005f98:	75fb      	strb	r3, [r7, #23]
 8005f9a:	e033      	b.n	8006004 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	889b      	ldrh	r3, [r3, #4]
 8005fa0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005fa4:	f023 0307 	bic.w	r3, r3, #7
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	889b      	ldrh	r3, [r3, #4]
 8005fb2:	b21a      	sxth	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	b299      	uxth	r1, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	3305      	adds	r3, #5
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	021b      	lsls	r3, r3, #8
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	430b      	orrs	r3, r1
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d110      	bne.n	8005ff6 <USBH_ParseEPDesc+0xbc>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	3304      	adds	r3, #4
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	b299      	uxth	r1, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3305      	adds	r3, #5
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	021b      	lsls	r3, r3, #8
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	430b      	orrs	r3, r1
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	b21b      	sxth	r3, r3
 8005fee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ff2:	b21b      	sxth	r3, r3
 8005ff4:	e001      	b.n	8005ffa <USBH_ParseEPDesc+0xc0>
 8005ff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	b21b      	sxth	r3, r3
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800600a:	2b00      	cmp	r3, #0
 800600c:	d116      	bne.n	800603c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	78db      	ldrb	r3, [r3, #3]
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	2b01      	cmp	r3, #1
 8006018:	d005      	beq.n	8006026 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	78db      	ldrb	r3, [r3, #3]
 800601e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006022:	2b03      	cmp	r3, #3
 8006024:	d127      	bne.n	8006076 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	799b      	ldrb	r3, [r3, #6]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <USBH_ParseEPDesc+0xfc>
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	799b      	ldrb	r3, [r3, #6]
 8006032:	2b10      	cmp	r3, #16
 8006034:	d91f      	bls.n	8006076 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006036:	2303      	movs	r3, #3
 8006038:	75fb      	strb	r3, [r7, #23]
 800603a:	e01c      	b.n	8006076 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	78db      	ldrb	r3, [r3, #3]
 8006040:	f003 0303 	and.w	r3, r3, #3
 8006044:	2b01      	cmp	r3, #1
 8006046:	d10a      	bne.n	800605e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	799b      	ldrb	r3, [r3, #6]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <USBH_ParseEPDesc+0x11e>
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	799b      	ldrb	r3, [r3, #6]
 8006054:	2b10      	cmp	r3, #16
 8006056:	d90e      	bls.n	8006076 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006058:	2303      	movs	r3, #3
 800605a:	75fb      	strb	r3, [r7, #23]
 800605c:	e00b      	b.n	8006076 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	78db      	ldrb	r3, [r3, #3]
 8006062:	f003 0303 	and.w	r3, r3, #3
 8006066:	2b03      	cmp	r3, #3
 8006068:	d105      	bne.n	8006076 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	799b      	ldrb	r3, [r3, #6]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006072:	2303      	movs	r3, #3
 8006074:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8006076:	7dfb      	ldrb	r3, [r7, #23]
}
 8006078:	4618      	mov	r0, r3
 800607a:	371c      	adds	r7, #28
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006084:	b480      	push	{r7}
 8006086:	b087      	sub	sp, #28
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	4613      	mov	r3, r2
 8006090:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	3301      	adds	r3, #1
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b03      	cmp	r3, #3
 800609a:	d120      	bne.n	80060de <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	1e9a      	subs	r2, r3, #2
 80060a2:	88fb      	ldrh	r3, [r7, #6]
 80060a4:	4293      	cmp	r3, r2
 80060a6:	bf28      	it	cs
 80060a8:	4613      	movcs	r3, r2
 80060aa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	3302      	adds	r3, #2
 80060b0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80060b2:	2300      	movs	r3, #0
 80060b4:	82fb      	strh	r3, [r7, #22]
 80060b6:	e00b      	b.n	80060d0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80060b8:	8afb      	ldrh	r3, [r7, #22]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	4413      	add	r3, r2
 80060be:	781a      	ldrb	r2, [r3, #0]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	3301      	adds	r3, #1
 80060c8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80060ca:	8afb      	ldrh	r3, [r7, #22]
 80060cc:	3302      	adds	r3, #2
 80060ce:	82fb      	strh	r3, [r7, #22]
 80060d0:	8afa      	ldrh	r2, [r7, #22]
 80060d2:	8abb      	ldrh	r3, [r7, #20]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d3ef      	bcc.n	80060b8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2200      	movs	r2, #0
 80060dc:	701a      	strb	r2, [r3, #0]
  }
}
 80060de:	bf00      	nop
 80060e0:	371c      	adds	r7, #28
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b085      	sub	sp, #20
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	881a      	ldrh	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	4413      	add	r3, r2
 8006100:	b29a      	uxth	r2, r3
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4413      	add	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006112:	68fb      	ldr	r3, [r7, #12]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	4613      	mov	r3, r2
 800612c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800612e:	2301      	movs	r3, #1
 8006130:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	789b      	ldrb	r3, [r3, #2]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d002      	beq.n	8006140 <USBH_CtlReq+0x20>
 800613a:	2b02      	cmp	r3, #2
 800613c:	d00f      	beq.n	800615e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800613e:	e027      	b.n	8006190 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	88fa      	ldrh	r2, [r7, #6]
 800614a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2201      	movs	r2, #1
 8006150:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2202      	movs	r2, #2
 8006156:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006158:	2301      	movs	r3, #1
 800615a:	75fb      	strb	r3, [r7, #23]
      break;
 800615c:	e018      	b.n	8006190 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 f81c 	bl	800619c <USBH_HandleControl>
 8006164:	4603      	mov	r3, r0
 8006166:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006168:	7dfb      	ldrb	r3, [r7, #23]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <USBH_CtlReq+0x54>
 800616e:	7dfb      	ldrb	r3, [r7, #23]
 8006170:	2b03      	cmp	r3, #3
 8006172:	d106      	bne.n	8006182 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2201      	movs	r2, #1
 8006178:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	761a      	strb	r2, [r3, #24]
      break;
 8006180:	e005      	b.n	800618e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006182:	7dfb      	ldrb	r3, [r7, #23]
 8006184:	2b02      	cmp	r3, #2
 8006186:	d102      	bne.n	800618e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2201      	movs	r2, #1
 800618c:	709a      	strb	r2, [r3, #2]
      break;
 800618e:	bf00      	nop
  }
  return status;
 8006190:	7dfb      	ldrb	r3, [r7, #23]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
	...

0800619c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af02      	add	r7, sp, #8
 80061a2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80061a4:	2301      	movs	r3, #1
 80061a6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80061a8:	2300      	movs	r3, #0
 80061aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	7e1b      	ldrb	r3, [r3, #24]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	2b0a      	cmp	r3, #10
 80061b4:	f200 8156 	bhi.w	8006464 <USBH_HandleControl+0x2c8>
 80061b8:	a201      	add	r2, pc, #4	; (adr r2, 80061c0 <USBH_HandleControl+0x24>)
 80061ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061be:	bf00      	nop
 80061c0:	080061ed 	.word	0x080061ed
 80061c4:	08006207 	.word	0x08006207
 80061c8:	08006271 	.word	0x08006271
 80061cc:	08006297 	.word	0x08006297
 80061d0:	080062cf 	.word	0x080062cf
 80061d4:	080062f9 	.word	0x080062f9
 80061d8:	0800634b 	.word	0x0800634b
 80061dc:	0800636d 	.word	0x0800636d
 80061e0:	080063a9 	.word	0x080063a9
 80061e4:	080063cf 	.word	0x080063cf
 80061e8:	0800640d 	.word	0x0800640d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f103 0110 	add.w	r1, r3, #16
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	795b      	ldrb	r3, [r3, #5]
 80061f6:	461a      	mov	r2, r3
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f943 	bl	8006484 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2202      	movs	r2, #2
 8006202:	761a      	strb	r2, [r3, #24]
      break;
 8006204:	e139      	b.n	800647a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	795b      	ldrb	r3, [r3, #5]
 800620a:	4619      	mov	r1, r3
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fcc5 	bl	8006b9c <USBH_LL_GetURBState>
 8006212:	4603      	mov	r3, r0
 8006214:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006216:	7bbb      	ldrb	r3, [r7, #14]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d11e      	bne.n	800625a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	7c1b      	ldrb	r3, [r3, #16]
 8006220:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006224:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	8adb      	ldrh	r3, [r3, #22]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00a      	beq.n	8006244 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800622e:	7b7b      	ldrb	r3, [r7, #13]
 8006230:	2b80      	cmp	r3, #128	; 0x80
 8006232:	d103      	bne.n	800623c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2203      	movs	r2, #3
 8006238:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800623a:	e115      	b.n	8006468 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2205      	movs	r2, #5
 8006240:	761a      	strb	r2, [r3, #24]
      break;
 8006242:	e111      	b.n	8006468 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006244:	7b7b      	ldrb	r3, [r7, #13]
 8006246:	2b80      	cmp	r3, #128	; 0x80
 8006248:	d103      	bne.n	8006252 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2209      	movs	r2, #9
 800624e:	761a      	strb	r2, [r3, #24]
      break;
 8006250:	e10a      	b.n	8006468 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2207      	movs	r2, #7
 8006256:	761a      	strb	r2, [r3, #24]
      break;
 8006258:	e106      	b.n	8006468 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800625a:	7bbb      	ldrb	r3, [r7, #14]
 800625c:	2b04      	cmp	r3, #4
 800625e:	d003      	beq.n	8006268 <USBH_HandleControl+0xcc>
 8006260:	7bbb      	ldrb	r3, [r7, #14]
 8006262:	2b02      	cmp	r3, #2
 8006264:	f040 8100 	bne.w	8006468 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	220b      	movs	r2, #11
 800626c:	761a      	strb	r2, [r3, #24]
      break;
 800626e:	e0fb      	b.n	8006468 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006276:	b29a      	uxth	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6899      	ldr	r1, [r3, #8]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	899a      	ldrh	r2, [r3, #12]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	791b      	ldrb	r3, [r3, #4]
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 f93a 	bl	8006502 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2204      	movs	r2, #4
 8006292:	761a      	strb	r2, [r3, #24]
      break;
 8006294:	e0f1      	b.n	800647a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	791b      	ldrb	r3, [r3, #4]
 800629a:	4619      	mov	r1, r3
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 fc7d 	bl	8006b9c <USBH_LL_GetURBState>
 80062a2:	4603      	mov	r3, r0
 80062a4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80062a6:	7bbb      	ldrb	r3, [r7, #14]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d102      	bne.n	80062b2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2209      	movs	r2, #9
 80062b0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80062b2:	7bbb      	ldrb	r3, [r7, #14]
 80062b4:	2b05      	cmp	r3, #5
 80062b6:	d102      	bne.n	80062be <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80062b8:	2303      	movs	r3, #3
 80062ba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80062bc:	e0d6      	b.n	800646c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80062be:	7bbb      	ldrb	r3, [r7, #14]
 80062c0:	2b04      	cmp	r3, #4
 80062c2:	f040 80d3 	bne.w	800646c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	220b      	movs	r2, #11
 80062ca:	761a      	strb	r2, [r3, #24]
      break;
 80062cc:	e0ce      	b.n	800646c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6899      	ldr	r1, [r3, #8]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	899a      	ldrh	r2, [r3, #12]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	795b      	ldrb	r3, [r3, #5]
 80062da:	2001      	movs	r0, #1
 80062dc:	9000      	str	r0, [sp, #0]
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f8ea 	bl	80064b8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2206      	movs	r2, #6
 80062f4:	761a      	strb	r2, [r3, #24]
      break;
 80062f6:	e0c0      	b.n	800647a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	795b      	ldrb	r3, [r3, #5]
 80062fc:	4619      	mov	r1, r3
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fc4c 	bl	8006b9c <USBH_LL_GetURBState>
 8006304:	4603      	mov	r3, r0
 8006306:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006308:	7bbb      	ldrb	r3, [r7, #14]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d103      	bne.n	8006316 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2207      	movs	r2, #7
 8006312:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006314:	e0ac      	b.n	8006470 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006316:	7bbb      	ldrb	r3, [r7, #14]
 8006318:	2b05      	cmp	r3, #5
 800631a:	d105      	bne.n	8006328 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	220c      	movs	r2, #12
 8006320:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006322:	2303      	movs	r3, #3
 8006324:	73fb      	strb	r3, [r7, #15]
      break;
 8006326:	e0a3      	b.n	8006470 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006328:	7bbb      	ldrb	r3, [r7, #14]
 800632a:	2b02      	cmp	r3, #2
 800632c:	d103      	bne.n	8006336 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2205      	movs	r2, #5
 8006332:	761a      	strb	r2, [r3, #24]
      break;
 8006334:	e09c      	b.n	8006470 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006336:	7bbb      	ldrb	r3, [r7, #14]
 8006338:	2b04      	cmp	r3, #4
 800633a:	f040 8099 	bne.w	8006470 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	220b      	movs	r2, #11
 8006342:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006344:	2302      	movs	r3, #2
 8006346:	73fb      	strb	r3, [r7, #15]
      break;
 8006348:	e092      	b.n	8006470 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	791b      	ldrb	r3, [r3, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	2100      	movs	r1, #0
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f8d5 	bl	8006502 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800635e:	b29a      	uxth	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2208      	movs	r2, #8
 8006368:	761a      	strb	r2, [r3, #24]

      break;
 800636a:	e086      	b.n	800647a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	791b      	ldrb	r3, [r3, #4]
 8006370:	4619      	mov	r1, r3
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fc12 	bl	8006b9c <USBH_LL_GetURBState>
 8006378:	4603      	mov	r3, r0
 800637a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800637c:	7bbb      	ldrb	r3, [r7, #14]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d105      	bne.n	800638e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	220d      	movs	r2, #13
 8006386:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800638c:	e072      	b.n	8006474 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800638e:	7bbb      	ldrb	r3, [r7, #14]
 8006390:	2b04      	cmp	r3, #4
 8006392:	d103      	bne.n	800639c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	220b      	movs	r2, #11
 8006398:	761a      	strb	r2, [r3, #24]
      break;
 800639a:	e06b      	b.n	8006474 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800639c:	7bbb      	ldrb	r3, [r7, #14]
 800639e:	2b05      	cmp	r3, #5
 80063a0:	d168      	bne.n	8006474 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80063a2:	2303      	movs	r3, #3
 80063a4:	73fb      	strb	r3, [r7, #15]
      break;
 80063a6:	e065      	b.n	8006474 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	795b      	ldrb	r3, [r3, #5]
 80063ac:	2201      	movs	r2, #1
 80063ae:	9200      	str	r2, [sp, #0]
 80063b0:	2200      	movs	r2, #0
 80063b2:	2100      	movs	r1, #0
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f87f 	bl	80064b8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	220a      	movs	r2, #10
 80063ca:	761a      	strb	r2, [r3, #24]
      break;
 80063cc:	e055      	b.n	800647a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	795b      	ldrb	r3, [r3, #5]
 80063d2:	4619      	mov	r1, r3
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fbe1 	bl	8006b9c <USBH_LL_GetURBState>
 80063da:	4603      	mov	r3, r0
 80063dc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80063de:	7bbb      	ldrb	r3, [r7, #14]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d105      	bne.n	80063f0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	220d      	movs	r2, #13
 80063ec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80063ee:	e043      	b.n	8006478 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80063f0:	7bbb      	ldrb	r3, [r7, #14]
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d103      	bne.n	80063fe <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2209      	movs	r2, #9
 80063fa:	761a      	strb	r2, [r3, #24]
      break;
 80063fc:	e03c      	b.n	8006478 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80063fe:	7bbb      	ldrb	r3, [r7, #14]
 8006400:	2b04      	cmp	r3, #4
 8006402:	d139      	bne.n	8006478 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	220b      	movs	r2, #11
 8006408:	761a      	strb	r2, [r3, #24]
      break;
 800640a:	e035      	b.n	8006478 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	7e5b      	ldrb	r3, [r3, #25]
 8006410:	3301      	adds	r3, #1
 8006412:	b2da      	uxtb	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	765a      	strb	r2, [r3, #25]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	7e5b      	ldrb	r3, [r3, #25]
 800641c:	2b02      	cmp	r3, #2
 800641e:	d806      	bhi.n	800642e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800642c:	e025      	b.n	800647a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006434:	2106      	movs	r1, #6
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	795b      	ldrb	r3, [r3, #5]
 8006444:	4619      	mov	r1, r3
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f90c 	bl	8006664 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	791b      	ldrb	r3, [r3, #4]
 8006450:	4619      	mov	r1, r3
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f906 	bl	8006664 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800645e:	2302      	movs	r3, #2
 8006460:	73fb      	strb	r3, [r7, #15]
      break;
 8006462:	e00a      	b.n	800647a <USBH_HandleControl+0x2de>

    default:
      break;
 8006464:	bf00      	nop
 8006466:	e008      	b.n	800647a <USBH_HandleControl+0x2de>
      break;
 8006468:	bf00      	nop
 800646a:	e006      	b.n	800647a <USBH_HandleControl+0x2de>
      break;
 800646c:	bf00      	nop
 800646e:	e004      	b.n	800647a <USBH_HandleControl+0x2de>
      break;
 8006470:	bf00      	nop
 8006472:	e002      	b.n	800647a <USBH_HandleControl+0x2de>
      break;
 8006474:	bf00      	nop
 8006476:	e000      	b.n	800647a <USBH_HandleControl+0x2de>
      break;
 8006478:	bf00      	nop
  }

  return status;
 800647a:	7bfb      	ldrb	r3, [r7, #15]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b088      	sub	sp, #32
 8006488:	af04      	add	r7, sp, #16
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	4613      	mov	r3, r2
 8006490:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006492:	79f9      	ldrb	r1, [r7, #7]
 8006494:	2300      	movs	r3, #0
 8006496:	9303      	str	r3, [sp, #12]
 8006498:	2308      	movs	r3, #8
 800649a:	9302      	str	r3, [sp, #8]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	9301      	str	r3, [sp, #4]
 80064a0:	2300      	movs	r3, #0
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	2300      	movs	r3, #0
 80064a6:	2200      	movs	r2, #0
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 fb46 	bl	8006b3a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b088      	sub	sp, #32
 80064bc:	af04      	add	r7, sp, #16
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	4611      	mov	r1, r2
 80064c4:	461a      	mov	r2, r3
 80064c6:	460b      	mov	r3, r1
 80064c8:	80fb      	strh	r3, [r7, #6]
 80064ca:	4613      	mov	r3, r2
 80064cc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80064dc:	7979      	ldrb	r1, [r7, #5]
 80064de:	7e3b      	ldrb	r3, [r7, #24]
 80064e0:	9303      	str	r3, [sp, #12]
 80064e2:	88fb      	ldrh	r3, [r7, #6]
 80064e4:	9302      	str	r3, [sp, #8]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	9301      	str	r3, [sp, #4]
 80064ea:	2301      	movs	r3, #1
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	2300      	movs	r3, #0
 80064f0:	2200      	movs	r2, #0
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f000 fb21 	bl	8006b3a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b088      	sub	sp, #32
 8006506:	af04      	add	r7, sp, #16
 8006508:	60f8      	str	r0, [r7, #12]
 800650a:	60b9      	str	r1, [r7, #8]
 800650c:	4611      	mov	r1, r2
 800650e:	461a      	mov	r2, r3
 8006510:	460b      	mov	r3, r1
 8006512:	80fb      	strh	r3, [r7, #6]
 8006514:	4613      	mov	r3, r2
 8006516:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006518:	7979      	ldrb	r1, [r7, #5]
 800651a:	2300      	movs	r3, #0
 800651c:	9303      	str	r3, [sp, #12]
 800651e:	88fb      	ldrh	r3, [r7, #6]
 8006520:	9302      	str	r3, [sp, #8]
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	9301      	str	r3, [sp, #4]
 8006526:	2301      	movs	r3, #1
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	2300      	movs	r3, #0
 800652c:	2201      	movs	r2, #1
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f000 fb03 	bl	8006b3a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006534:	2300      	movs	r3, #0

}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b088      	sub	sp, #32
 8006542:	af04      	add	r7, sp, #16
 8006544:	60f8      	str	r0, [r7, #12]
 8006546:	60b9      	str	r1, [r7, #8]
 8006548:	4611      	mov	r1, r2
 800654a:	461a      	mov	r2, r3
 800654c:	460b      	mov	r3, r1
 800654e:	80fb      	strh	r3, [r7, #6]
 8006550:	4613      	mov	r3, r2
 8006552:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800655e:	2300      	movs	r3, #0
 8006560:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006562:	7979      	ldrb	r1, [r7, #5]
 8006564:	7e3b      	ldrb	r3, [r7, #24]
 8006566:	9303      	str	r3, [sp, #12]
 8006568:	88fb      	ldrh	r3, [r7, #6]
 800656a:	9302      	str	r3, [sp, #8]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	9301      	str	r3, [sp, #4]
 8006570:	2301      	movs	r3, #1
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	2302      	movs	r3, #2
 8006576:	2200      	movs	r2, #0
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f000 fade 	bl	8006b3a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b088      	sub	sp, #32
 800658c:	af04      	add	r7, sp, #16
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	4611      	mov	r1, r2
 8006594:	461a      	mov	r2, r3
 8006596:	460b      	mov	r3, r1
 8006598:	80fb      	strh	r3, [r7, #6]
 800659a:	4613      	mov	r3, r2
 800659c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800659e:	7979      	ldrb	r1, [r7, #5]
 80065a0:	2300      	movs	r3, #0
 80065a2:	9303      	str	r3, [sp, #12]
 80065a4:	88fb      	ldrh	r3, [r7, #6]
 80065a6:	9302      	str	r3, [sp, #8]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	9301      	str	r3, [sp, #4]
 80065ac:	2301      	movs	r3, #1
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	2302      	movs	r3, #2
 80065b2:	2201      	movs	r2, #1
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 fac0 	bl	8006b3a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af04      	add	r7, sp, #16
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	4608      	mov	r0, r1
 80065ce:	4611      	mov	r1, r2
 80065d0:	461a      	mov	r2, r3
 80065d2:	4603      	mov	r3, r0
 80065d4:	70fb      	strb	r3, [r7, #3]
 80065d6:	460b      	mov	r3, r1
 80065d8:	70bb      	strb	r3, [r7, #2]
 80065da:	4613      	mov	r3, r2
 80065dc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80065de:	7878      	ldrb	r0, [r7, #1]
 80065e0:	78ba      	ldrb	r2, [r7, #2]
 80065e2:	78f9      	ldrb	r1, [r7, #3]
 80065e4:	8b3b      	ldrh	r3, [r7, #24]
 80065e6:	9302      	str	r3, [sp, #8]
 80065e8:	7d3b      	ldrb	r3, [r7, #20]
 80065ea:	9301      	str	r3, [sp, #4]
 80065ec:	7c3b      	ldrb	r3, [r7, #16]
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	4603      	mov	r3, r0
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fa53 	bl	8006a9e <USBH_LL_OpenPipe>

  return USBH_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b082      	sub	sp, #8
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	460b      	mov	r3, r1
 800660c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800660e:	78fb      	ldrb	r3, [r7, #3]
 8006610:	4619      	mov	r1, r3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fa72 	bl	8006afc <USBH_LL_ClosePipe>

  return USBH_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b084      	sub	sp, #16
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
 800662a:	460b      	mov	r3, r1
 800662c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f836 	bl	80066a0 <USBH_GetFreePipe>
 8006634:	4603      	mov	r3, r0
 8006636:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006638:	89fb      	ldrh	r3, [r7, #14]
 800663a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800663e:	4293      	cmp	r3, r2
 8006640:	d00a      	beq.n	8006658 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8006642:	78fa      	ldrb	r2, [r7, #3]
 8006644:	89fb      	ldrh	r3, [r7, #14]
 8006646:	f003 030f 	and.w	r3, r3, #15
 800664a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800664e:	6879      	ldr	r1, [r7, #4]
 8006650:	33e0      	adds	r3, #224	; 0xe0
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	440b      	add	r3, r1
 8006656:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006658:	89fb      	ldrh	r3, [r7, #14]
 800665a:	b2db      	uxtb	r3, r3
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	460b      	mov	r3, r1
 800666e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006670:	78fb      	ldrb	r3, [r7, #3]
 8006672:	2b0f      	cmp	r3, #15
 8006674:	d80d      	bhi.n	8006692 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006676:	78fb      	ldrb	r3, [r7, #3]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	33e0      	adds	r3, #224	; 0xe0
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	78fb      	ldrb	r3, [r7, #3]
 8006684:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006688:	6879      	ldr	r1, [r7, #4]
 800668a:	33e0      	adds	r3, #224	; 0xe0
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	440b      	add	r3, r1
 8006690:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80066a8:	2300      	movs	r3, #0
 80066aa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80066ac:	2300      	movs	r3, #0
 80066ae:	73fb      	strb	r3, [r7, #15]
 80066b0:	e00f      	b.n	80066d2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	33e0      	adds	r3, #224	; 0xe0
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4413      	add	r3, r2
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d102      	bne.n	80066cc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	e007      	b.n	80066dc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
 80066ce:	3301      	adds	r3, #1
 80066d0:	73fb      	strb	r3, [r7, #15]
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
 80066d4:	2b0f      	cmp	r3, #15
 80066d6:	d9ec      	bls.n	80066b2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80066d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80066ec:	2201      	movs	r2, #1
 80066ee:	490e      	ldr	r1, [pc, #56]	; (8006728 <MX_USB_HOST_Init+0x40>)
 80066f0:	480e      	ldr	r0, [pc, #56]	; (800672c <MX_USB_HOST_Init+0x44>)
 80066f2:	f7fe fba7 	bl	8004e44 <USBH_Init>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80066fc:	f7f9 ff08 	bl	8000510 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006700:	490b      	ldr	r1, [pc, #44]	; (8006730 <MX_USB_HOST_Init+0x48>)
 8006702:	480a      	ldr	r0, [pc, #40]	; (800672c <MX_USB_HOST_Init+0x44>)
 8006704:	f7fe fc2c 	bl	8004f60 <USBH_RegisterClass>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d001      	beq.n	8006712 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800670e:	f7f9 feff 	bl	8000510 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006712:	4806      	ldr	r0, [pc, #24]	; (800672c <MX_USB_HOST_Init+0x44>)
 8006714:	f7fe fcb0 	bl	8005078 <USBH_Start>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800671e:	f7f9 fef7 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006722:	bf00      	nop
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	08006749 	.word	0x08006749
 800672c:	200001a8 	.word	0x200001a8
 8006730:	2000000c 	.word	0x2000000c

08006734 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006738:	4802      	ldr	r0, [pc, #8]	; (8006744 <MX_USB_HOST_Process+0x10>)
 800673a:	f7fe fcad 	bl	8005098 <USBH_Process>
}
 800673e:	bf00      	nop
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	200001a8 	.word	0x200001a8

08006748 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	460b      	mov	r3, r1
 8006752:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006754:	78fb      	ldrb	r3, [r7, #3]
 8006756:	3b01      	subs	r3, #1
 8006758:	2b04      	cmp	r3, #4
 800675a:	d819      	bhi.n	8006790 <USBH_UserProcess+0x48>
 800675c:	a201      	add	r2, pc, #4	; (adr r2, 8006764 <USBH_UserProcess+0x1c>)
 800675e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006762:	bf00      	nop
 8006764:	08006791 	.word	0x08006791
 8006768:	08006781 	.word	0x08006781
 800676c:	08006791 	.word	0x08006791
 8006770:	08006789 	.word	0x08006789
 8006774:	08006779 	.word	0x08006779
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006778:	4b09      	ldr	r3, [pc, #36]	; (80067a0 <USBH_UserProcess+0x58>)
 800677a:	2203      	movs	r2, #3
 800677c:	701a      	strb	r2, [r3, #0]
  break;
 800677e:	e008      	b.n	8006792 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006780:	4b07      	ldr	r3, [pc, #28]	; (80067a0 <USBH_UserProcess+0x58>)
 8006782:	2202      	movs	r2, #2
 8006784:	701a      	strb	r2, [r3, #0]
  break;
 8006786:	e004      	b.n	8006792 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006788:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <USBH_UserProcess+0x58>)
 800678a:	2201      	movs	r2, #1
 800678c:	701a      	strb	r2, [r3, #0]
  break;
 800678e:	e000      	b.n	8006792 <USBH_UserProcess+0x4a>

  default:
  break;
 8006790:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006792:	bf00      	nop
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	20000580 	.word	0x20000580

080067a4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08a      	sub	sp, #40	; 0x28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067ac:	f107 0314 	add.w	r3, r7, #20
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	605a      	str	r2, [r3, #4]
 80067b6:	609a      	str	r2, [r3, #8]
 80067b8:	60da      	str	r2, [r3, #12]
 80067ba:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067c4:	d147      	bne.n	8006856 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067c6:	2300      	movs	r3, #0
 80067c8:	613b      	str	r3, [r7, #16]
 80067ca:	4b25      	ldr	r3, [pc, #148]	; (8006860 <HAL_HCD_MspInit+0xbc>)
 80067cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ce:	4a24      	ldr	r2, [pc, #144]	; (8006860 <HAL_HCD_MspInit+0xbc>)
 80067d0:	f043 0301 	orr.w	r3, r3, #1
 80067d4:	6313      	str	r3, [r2, #48]	; 0x30
 80067d6:	4b22      	ldr	r3, [pc, #136]	; (8006860 <HAL_HCD_MspInit+0xbc>)
 80067d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	613b      	str	r3, [r7, #16]
 80067e0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80067e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067e8:	2300      	movs	r3, #0
 80067ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067ec:	2300      	movs	r3, #0
 80067ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80067f0:	f107 0314 	add.w	r3, r7, #20
 80067f4:	4619      	mov	r1, r3
 80067f6:	481b      	ldr	r0, [pc, #108]	; (8006864 <HAL_HCD_MspInit+0xc0>)
 80067f8:	f7fa fa16 	bl	8000c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80067fc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006802:	2302      	movs	r3, #2
 8006804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006806:	2300      	movs	r3, #0
 8006808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800680a:	2300      	movs	r3, #0
 800680c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800680e:	230a      	movs	r3, #10
 8006810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006812:	f107 0314 	add.w	r3, r7, #20
 8006816:	4619      	mov	r1, r3
 8006818:	4812      	ldr	r0, [pc, #72]	; (8006864 <HAL_HCD_MspInit+0xc0>)
 800681a:	f7fa fa05 	bl	8000c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800681e:	4b10      	ldr	r3, [pc, #64]	; (8006860 <HAL_HCD_MspInit+0xbc>)
 8006820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006822:	4a0f      	ldr	r2, [pc, #60]	; (8006860 <HAL_HCD_MspInit+0xbc>)
 8006824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006828:	6353      	str	r3, [r2, #52]	; 0x34
 800682a:	2300      	movs	r3, #0
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	4b0c      	ldr	r3, [pc, #48]	; (8006860 <HAL_HCD_MspInit+0xbc>)
 8006830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006832:	4a0b      	ldr	r2, [pc, #44]	; (8006860 <HAL_HCD_MspInit+0xbc>)
 8006834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006838:	6453      	str	r3, [r2, #68]	; 0x44
 800683a:	4b09      	ldr	r3, [pc, #36]	; (8006860 <HAL_HCD_MspInit+0xbc>)
 800683c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006846:	2200      	movs	r2, #0
 8006848:	2100      	movs	r1, #0
 800684a:	2043      	movs	r0, #67	; 0x43
 800684c:	f7fa f9b5 	bl	8000bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006850:	2043      	movs	r0, #67	; 0x43
 8006852:	f7fa f9ce 	bl	8000bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006856:	bf00      	nop
 8006858:	3728      	adds	r7, #40	; 0x28
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	40023800 	.word	0x40023800
 8006864:	40020000 	.word	0x40020000

08006868 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006876:	4618      	mov	r0, r3
 8006878:	f7fe ffed 	bl	8005856 <USBH_LL_IncTimer>
}
 800687c:	bf00      	nop
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006892:	4618      	mov	r0, r3
 8006894:	f7ff f825 	bl	80058e2 <USBH_LL_Connect>
}
 8006898:	bf00      	nop
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7ff f82e 	bl	8005910 <USBH_LL_Disconnect>
}
 80068b4:	bf00      	nop
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	460b      	mov	r3, r1
 80068c6:	70fb      	strb	r3, [r7, #3]
 80068c8:	4613      	mov	r3, r2
 80068ca:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80068cc:	bf00      	nop
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fe ffdf 	bl	80058aa <USBH_LL_PortEnabled>
}
 80068ec:	bf00      	nop
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006902:	4618      	mov	r0, r3
 8006904:	f7fe ffdf 	bl	80058c6 <USBH_LL_PortDisabled>
}
 8006908:	bf00      	nop
 800690a:	3708      	adds	r7, #8
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800691e:	2b01      	cmp	r3, #1
 8006920:	d12a      	bne.n	8006978 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006922:	4a18      	ldr	r2, [pc, #96]	; (8006984 <USBH_LL_Init+0x74>)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a15      	ldr	r2, [pc, #84]	; (8006984 <USBH_LL_Init+0x74>)
 800692e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006932:	4b14      	ldr	r3, [pc, #80]	; (8006984 <USBH_LL_Init+0x74>)
 8006934:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006938:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800693a:	4b12      	ldr	r3, [pc, #72]	; (8006984 <USBH_LL_Init+0x74>)
 800693c:	2208      	movs	r2, #8
 800693e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006940:	4b10      	ldr	r3, [pc, #64]	; (8006984 <USBH_LL_Init+0x74>)
 8006942:	2201      	movs	r2, #1
 8006944:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006946:	4b0f      	ldr	r3, [pc, #60]	; (8006984 <USBH_LL_Init+0x74>)
 8006948:	2200      	movs	r2, #0
 800694a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800694c:	4b0d      	ldr	r3, [pc, #52]	; (8006984 <USBH_LL_Init+0x74>)
 800694e:	2202      	movs	r2, #2
 8006950:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006952:	4b0c      	ldr	r3, [pc, #48]	; (8006984 <USBH_LL_Init+0x74>)
 8006954:	2200      	movs	r2, #0
 8006956:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006958:	480a      	ldr	r0, [pc, #40]	; (8006984 <USBH_LL_Init+0x74>)
 800695a:	f7fa fb1a 	bl	8000f92 <HAL_HCD_Init>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006964:	f7f9 fdd4 	bl	8000510 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006968:	4806      	ldr	r0, [pc, #24]	; (8006984 <USBH_LL_Init+0x74>)
 800696a:	f7fa fefe 	bl	800176a <HAL_HCD_GetCurrentFrame>
 800696e:	4603      	mov	r3, r0
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fe ff60 	bl	8005838 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20000584 	.word	0x20000584

08006988 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006990:	2300      	movs	r3, #0
 8006992:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006994:	2300      	movs	r3, #0
 8006996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800699e:	4618      	mov	r0, r3
 80069a0:	f7fa fe6d 	bl	800167e <HAL_HCD_Start>
 80069a4:	4603      	mov	r3, r0
 80069a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 f95c 	bl	8006c68 <USBH_Get_USB_Status>
 80069b0:	4603      	mov	r3, r0
 80069b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b084      	sub	sp, #16
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069c6:	2300      	movs	r3, #0
 80069c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7fa fe75 	bl	80016c4 <HAL_HCD_Stop>
 80069da:	4603      	mov	r3, r0
 80069dc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80069de:	7bfb      	ldrb	r3, [r7, #15]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f000 f941 	bl	8006c68 <USBH_Get_USB_Status>
 80069e6:	4603      	mov	r3, r0
 80069e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80069fc:	2301      	movs	r3, #1
 80069fe:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fa febd 	bl	8001786 <HAL_HCD_GetCurrentSpeed>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d00c      	beq.n	8006a2c <USBH_LL_GetSpeed+0x38>
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d80d      	bhi.n	8006a32 <USBH_LL_GetSpeed+0x3e>
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <USBH_LL_GetSpeed+0x2c>
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d003      	beq.n	8006a26 <USBH_LL_GetSpeed+0x32>
 8006a1e:	e008      	b.n	8006a32 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8006a20:	2300      	movs	r3, #0
 8006a22:	73fb      	strb	r3, [r7, #15]
    break;
 8006a24:	e008      	b.n	8006a38 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8006a26:	2301      	movs	r3, #1
 8006a28:	73fb      	strb	r3, [r7, #15]
    break;
 8006a2a:	e005      	b.n	8006a38 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	73fb      	strb	r3, [r7, #15]
    break;
 8006a30:	e002      	b.n	8006a38 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8006a32:	2301      	movs	r3, #1
 8006a34:	73fb      	strb	r3, [r7, #15]
    break;
 8006a36:	bf00      	nop
  }
  return  speed;
 8006a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b084      	sub	sp, #16
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7fa fe50 	bl	80016fe <HAL_HCD_ResetPort>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 f8ff 	bl	8006c68 <USBH_Get_USB_Status>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	460b      	mov	r3, r1
 8006a82:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006a8a:	78fa      	ldrb	r2, [r7, #3]
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7fa fe57 	bl	8001742 <HAL_HCD_HC_GetXferCount>
 8006a94:	4603      	mov	r3, r0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3708      	adds	r7, #8
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006a9e:	b590      	push	{r4, r7, lr}
 8006aa0:	b089      	sub	sp, #36	; 0x24
 8006aa2:	af04      	add	r7, sp, #16
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	4608      	mov	r0, r1
 8006aa8:	4611      	mov	r1, r2
 8006aaa:	461a      	mov	r2, r3
 8006aac:	4603      	mov	r3, r0
 8006aae:	70fb      	strb	r3, [r7, #3]
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	70bb      	strb	r3, [r7, #2]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006abc:	2300      	movs	r3, #0
 8006abe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006ac6:	787c      	ldrb	r4, [r7, #1]
 8006ac8:	78ba      	ldrb	r2, [r7, #2]
 8006aca:	78f9      	ldrb	r1, [r7, #3]
 8006acc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006ace:	9302      	str	r3, [sp, #8]
 8006ad0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ad4:	9301      	str	r3, [sp, #4]
 8006ad6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006ada:	9300      	str	r3, [sp, #0]
 8006adc:	4623      	mov	r3, r4
 8006ade:	f7fa faba 	bl	8001056 <HAL_HCD_HC_Init>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f000 f8bd 	bl	8006c68 <USBH_Get_USB_Status>
 8006aee:	4603      	mov	r3, r0
 8006af0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006af2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd90      	pop	{r4, r7, pc}

08006afc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	460b      	mov	r3, r1
 8006b06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006b16:	78fa      	ldrb	r2, [r7, #3]
 8006b18:	4611      	mov	r1, r2
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fa fb2a 	bl	8001174 <HAL_HCD_HC_Halt>
 8006b20:	4603      	mov	r3, r0
 8006b22:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 f89e 	bl	8006c68 <USBH_Get_USB_Status>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b30:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8006b3a:	b590      	push	{r4, r7, lr}
 8006b3c:	b089      	sub	sp, #36	; 0x24
 8006b3e:	af04      	add	r7, sp, #16
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	4608      	mov	r0, r1
 8006b44:	4611      	mov	r1, r2
 8006b46:	461a      	mov	r2, r3
 8006b48:	4603      	mov	r3, r0
 8006b4a:	70fb      	strb	r3, [r7, #3]
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	70bb      	strb	r3, [r7, #2]
 8006b50:	4613      	mov	r3, r2
 8006b52:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006b62:	787c      	ldrb	r4, [r7, #1]
 8006b64:	78ba      	ldrb	r2, [r7, #2]
 8006b66:	78f9      	ldrb	r1, [r7, #3]
 8006b68:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b6c:	9303      	str	r3, [sp, #12]
 8006b6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006b70:	9302      	str	r3, [sp, #8]
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	9301      	str	r3, [sp, #4]
 8006b76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	4623      	mov	r3, r4
 8006b7e:	f7fa fb1d 	bl	80011bc <HAL_HCD_HC_SubmitRequest>
 8006b82:	4603      	mov	r3, r0
 8006b84:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 f86d 	bl	8006c68 <USBH_Get_USB_Status>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b92:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd90      	pop	{r4, r7, pc}

08006b9c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006bae:	78fa      	ldrb	r2, [r7, #3]
 8006bb0:	4611      	mov	r1, r2
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7fa fdb1 	bl	800171a <HAL_HCD_HC_GetURBState>
 8006bb8:	4603      	mov	r3, r0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b082      	sub	sp, #8
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	460b      	mov	r3, r1
 8006bcc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d103      	bne.n	8006be0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8006bd8:	78fb      	ldrb	r3, [r7, #3]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 f870 	bl	8006cc0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006be0:	20c8      	movs	r0, #200	; 0xc8
 8006be2:	f7f9 feeb 	bl	80009bc <HAL_Delay>
  return USBH_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	70fb      	strb	r3, [r7, #3]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006c06:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8006c08:	78fb      	ldrb	r3, [r7, #3]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	212c      	movs	r1, #44	; 0x2c
 8006c0e:	fb01 f303 	mul.w	r3, r1, r3
 8006c12:	4413      	add	r3, r2
 8006c14:	333b      	adds	r3, #59	; 0x3b
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d009      	beq.n	8006c30 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8006c1c:	78fb      	ldrb	r3, [r7, #3]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	212c      	movs	r1, #44	; 0x2c
 8006c22:	fb01 f303 	mul.w	r3, r1, r3
 8006c26:	4413      	add	r3, r2
 8006c28:	3354      	adds	r3, #84	; 0x54
 8006c2a:	78ba      	ldrb	r2, [r7, #2]
 8006c2c:	701a      	strb	r2, [r3, #0]
 8006c2e:	e008      	b.n	8006c42 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006c30:	78fb      	ldrb	r3, [r7, #3]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	212c      	movs	r1, #44	; 0x2c
 8006c36:	fb01 f303 	mul.w	r3, r1, r3
 8006c3a:	4413      	add	r3, r2
 8006c3c:	3355      	adds	r3, #85	; 0x55
 8006c3e:	78ba      	ldrb	r2, [r7, #2]
 8006c40:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7f9 feaf 	bl	80009bc <HAL_Delay>
}
 8006c5e:	bf00      	nop
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
	...

08006c68 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	4603      	mov	r3, r0
 8006c70:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006c72:	2300      	movs	r3, #0
 8006c74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006c76:	79fb      	ldrb	r3, [r7, #7]
 8006c78:	2b03      	cmp	r3, #3
 8006c7a:	d817      	bhi.n	8006cac <USBH_Get_USB_Status+0x44>
 8006c7c:	a201      	add	r2, pc, #4	; (adr r2, 8006c84 <USBH_Get_USB_Status+0x1c>)
 8006c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c82:	bf00      	nop
 8006c84:	08006c95 	.word	0x08006c95
 8006c88:	08006c9b 	.word	0x08006c9b
 8006c8c:	08006ca1 	.word	0x08006ca1
 8006c90:	08006ca7 	.word	0x08006ca7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006c94:	2300      	movs	r3, #0
 8006c96:	73fb      	strb	r3, [r7, #15]
    break;
 8006c98:	e00b      	b.n	8006cb2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	73fb      	strb	r3, [r7, #15]
    break;
 8006c9e:	e008      	b.n	8006cb2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ca4:	e005      	b.n	8006cb2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	73fb      	strb	r3, [r7, #15]
    break;
 8006caa:	e002      	b.n	8006cb2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006cac:	2302      	movs	r3, #2
 8006cae:	73fb      	strb	r3, [r7, #15]
    break;
 8006cb0:	bf00      	nop
  }
  return usb_status;
 8006cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8006cca:	79fb      	ldrb	r3, [r7, #7]
 8006ccc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8006cce:	79fb      	ldrb	r3, [r7, #7]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d102      	bne.n	8006cda <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	73fb      	strb	r3, [r7, #15]
 8006cd8:	e001      	b.n	8006cde <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	4803      	ldr	r0, [pc, #12]	; (8006cf4 <MX_DriverVbusFS+0x34>)
 8006ce6:	f7fa f93b 	bl	8000f60 <HAL_GPIO_WritePin>
}
 8006cea:	bf00      	nop
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	40020800 	.word	0x40020800

08006cf8 <__errno>:
 8006cf8:	4b01      	ldr	r3, [pc, #4]	; (8006d00 <__errno+0x8>)
 8006cfa:	6818      	ldr	r0, [r3, #0]
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	2000002c 	.word	0x2000002c

08006d04 <__libc_init_array>:
 8006d04:	b570      	push	{r4, r5, r6, lr}
 8006d06:	4d0d      	ldr	r5, [pc, #52]	; (8006d3c <__libc_init_array+0x38>)
 8006d08:	4c0d      	ldr	r4, [pc, #52]	; (8006d40 <__libc_init_array+0x3c>)
 8006d0a:	1b64      	subs	r4, r4, r5
 8006d0c:	10a4      	asrs	r4, r4, #2
 8006d0e:	2600      	movs	r6, #0
 8006d10:	42a6      	cmp	r6, r4
 8006d12:	d109      	bne.n	8006d28 <__libc_init_array+0x24>
 8006d14:	4d0b      	ldr	r5, [pc, #44]	; (8006d44 <__libc_init_array+0x40>)
 8006d16:	4c0c      	ldr	r4, [pc, #48]	; (8006d48 <__libc_init_array+0x44>)
 8006d18:	f000 f92e 	bl	8006f78 <_init>
 8006d1c:	1b64      	subs	r4, r4, r5
 8006d1e:	10a4      	asrs	r4, r4, #2
 8006d20:	2600      	movs	r6, #0
 8006d22:	42a6      	cmp	r6, r4
 8006d24:	d105      	bne.n	8006d32 <__libc_init_array+0x2e>
 8006d26:	bd70      	pop	{r4, r5, r6, pc}
 8006d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d2c:	4798      	blx	r3
 8006d2e:	3601      	adds	r6, #1
 8006d30:	e7ee      	b.n	8006d10 <__libc_init_array+0xc>
 8006d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d36:	4798      	blx	r3
 8006d38:	3601      	adds	r6, #1
 8006d3a:	e7f2      	b.n	8006d22 <__libc_init_array+0x1e>
 8006d3c:	08006f9c 	.word	0x08006f9c
 8006d40:	08006f9c 	.word	0x08006f9c
 8006d44:	08006f9c 	.word	0x08006f9c
 8006d48:	08006fa0 	.word	0x08006fa0

08006d4c <malloc>:
 8006d4c:	4b02      	ldr	r3, [pc, #8]	; (8006d58 <malloc+0xc>)
 8006d4e:	4601      	mov	r1, r0
 8006d50:	6818      	ldr	r0, [r3, #0]
 8006d52:	f000 b87f 	b.w	8006e54 <_malloc_r>
 8006d56:	bf00      	nop
 8006d58:	2000002c 	.word	0x2000002c

08006d5c <free>:
 8006d5c:	4b02      	ldr	r3, [pc, #8]	; (8006d68 <free+0xc>)
 8006d5e:	4601      	mov	r1, r0
 8006d60:	6818      	ldr	r0, [r3, #0]
 8006d62:	f000 b80b 	b.w	8006d7c <_free_r>
 8006d66:	bf00      	nop
 8006d68:	2000002c 	.word	0x2000002c

08006d6c <memset>:
 8006d6c:	4402      	add	r2, r0
 8006d6e:	4603      	mov	r3, r0
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d100      	bne.n	8006d76 <memset+0xa>
 8006d74:	4770      	bx	lr
 8006d76:	f803 1b01 	strb.w	r1, [r3], #1
 8006d7a:	e7f9      	b.n	8006d70 <memset+0x4>

08006d7c <_free_r>:
 8006d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d7e:	2900      	cmp	r1, #0
 8006d80:	d044      	beq.n	8006e0c <_free_r+0x90>
 8006d82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d86:	9001      	str	r0, [sp, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f1a1 0404 	sub.w	r4, r1, #4
 8006d8e:	bfb8      	it	lt
 8006d90:	18e4      	addlt	r4, r4, r3
 8006d92:	f000 f8e3 	bl	8006f5c <__malloc_lock>
 8006d96:	4a1e      	ldr	r2, [pc, #120]	; (8006e10 <_free_r+0x94>)
 8006d98:	9801      	ldr	r0, [sp, #4]
 8006d9a:	6813      	ldr	r3, [r2, #0]
 8006d9c:	b933      	cbnz	r3, 8006dac <_free_r+0x30>
 8006d9e:	6063      	str	r3, [r4, #4]
 8006da0:	6014      	str	r4, [r2, #0]
 8006da2:	b003      	add	sp, #12
 8006da4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006da8:	f000 b8de 	b.w	8006f68 <__malloc_unlock>
 8006dac:	42a3      	cmp	r3, r4
 8006dae:	d908      	bls.n	8006dc2 <_free_r+0x46>
 8006db0:	6825      	ldr	r5, [r4, #0]
 8006db2:	1961      	adds	r1, r4, r5
 8006db4:	428b      	cmp	r3, r1
 8006db6:	bf01      	itttt	eq
 8006db8:	6819      	ldreq	r1, [r3, #0]
 8006dba:	685b      	ldreq	r3, [r3, #4]
 8006dbc:	1949      	addeq	r1, r1, r5
 8006dbe:	6021      	streq	r1, [r4, #0]
 8006dc0:	e7ed      	b.n	8006d9e <_free_r+0x22>
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	b10b      	cbz	r3, 8006dcc <_free_r+0x50>
 8006dc8:	42a3      	cmp	r3, r4
 8006dca:	d9fa      	bls.n	8006dc2 <_free_r+0x46>
 8006dcc:	6811      	ldr	r1, [r2, #0]
 8006dce:	1855      	adds	r5, r2, r1
 8006dd0:	42a5      	cmp	r5, r4
 8006dd2:	d10b      	bne.n	8006dec <_free_r+0x70>
 8006dd4:	6824      	ldr	r4, [r4, #0]
 8006dd6:	4421      	add	r1, r4
 8006dd8:	1854      	adds	r4, r2, r1
 8006dda:	42a3      	cmp	r3, r4
 8006ddc:	6011      	str	r1, [r2, #0]
 8006dde:	d1e0      	bne.n	8006da2 <_free_r+0x26>
 8006de0:	681c      	ldr	r4, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	6053      	str	r3, [r2, #4]
 8006de6:	4421      	add	r1, r4
 8006de8:	6011      	str	r1, [r2, #0]
 8006dea:	e7da      	b.n	8006da2 <_free_r+0x26>
 8006dec:	d902      	bls.n	8006df4 <_free_r+0x78>
 8006dee:	230c      	movs	r3, #12
 8006df0:	6003      	str	r3, [r0, #0]
 8006df2:	e7d6      	b.n	8006da2 <_free_r+0x26>
 8006df4:	6825      	ldr	r5, [r4, #0]
 8006df6:	1961      	adds	r1, r4, r5
 8006df8:	428b      	cmp	r3, r1
 8006dfa:	bf04      	itt	eq
 8006dfc:	6819      	ldreq	r1, [r3, #0]
 8006dfe:	685b      	ldreq	r3, [r3, #4]
 8006e00:	6063      	str	r3, [r4, #4]
 8006e02:	bf04      	itt	eq
 8006e04:	1949      	addeq	r1, r1, r5
 8006e06:	6021      	streq	r1, [r4, #0]
 8006e08:	6054      	str	r4, [r2, #4]
 8006e0a:	e7ca      	b.n	8006da2 <_free_r+0x26>
 8006e0c:	b003      	add	sp, #12
 8006e0e:	bd30      	pop	{r4, r5, pc}
 8006e10:	20000888 	.word	0x20000888

08006e14 <sbrk_aligned>:
 8006e14:	b570      	push	{r4, r5, r6, lr}
 8006e16:	4e0e      	ldr	r6, [pc, #56]	; (8006e50 <sbrk_aligned+0x3c>)
 8006e18:	460c      	mov	r4, r1
 8006e1a:	6831      	ldr	r1, [r6, #0]
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	b911      	cbnz	r1, 8006e26 <sbrk_aligned+0x12>
 8006e20:	f000 f88c 	bl	8006f3c <_sbrk_r>
 8006e24:	6030      	str	r0, [r6, #0]
 8006e26:	4621      	mov	r1, r4
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f000 f887 	bl	8006f3c <_sbrk_r>
 8006e2e:	1c43      	adds	r3, r0, #1
 8006e30:	d00a      	beq.n	8006e48 <sbrk_aligned+0x34>
 8006e32:	1cc4      	adds	r4, r0, #3
 8006e34:	f024 0403 	bic.w	r4, r4, #3
 8006e38:	42a0      	cmp	r0, r4
 8006e3a:	d007      	beq.n	8006e4c <sbrk_aligned+0x38>
 8006e3c:	1a21      	subs	r1, r4, r0
 8006e3e:	4628      	mov	r0, r5
 8006e40:	f000 f87c 	bl	8006f3c <_sbrk_r>
 8006e44:	3001      	adds	r0, #1
 8006e46:	d101      	bne.n	8006e4c <sbrk_aligned+0x38>
 8006e48:	f04f 34ff 	mov.w	r4, #4294967295
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	bd70      	pop	{r4, r5, r6, pc}
 8006e50:	2000088c 	.word	0x2000088c

08006e54 <_malloc_r>:
 8006e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e58:	1ccd      	adds	r5, r1, #3
 8006e5a:	f025 0503 	bic.w	r5, r5, #3
 8006e5e:	3508      	adds	r5, #8
 8006e60:	2d0c      	cmp	r5, #12
 8006e62:	bf38      	it	cc
 8006e64:	250c      	movcc	r5, #12
 8006e66:	2d00      	cmp	r5, #0
 8006e68:	4607      	mov	r7, r0
 8006e6a:	db01      	blt.n	8006e70 <_malloc_r+0x1c>
 8006e6c:	42a9      	cmp	r1, r5
 8006e6e:	d905      	bls.n	8006e7c <_malloc_r+0x28>
 8006e70:	230c      	movs	r3, #12
 8006e72:	603b      	str	r3, [r7, #0]
 8006e74:	2600      	movs	r6, #0
 8006e76:	4630      	mov	r0, r6
 8006e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e7c:	4e2e      	ldr	r6, [pc, #184]	; (8006f38 <_malloc_r+0xe4>)
 8006e7e:	f000 f86d 	bl	8006f5c <__malloc_lock>
 8006e82:	6833      	ldr	r3, [r6, #0]
 8006e84:	461c      	mov	r4, r3
 8006e86:	bb34      	cbnz	r4, 8006ed6 <_malloc_r+0x82>
 8006e88:	4629      	mov	r1, r5
 8006e8a:	4638      	mov	r0, r7
 8006e8c:	f7ff ffc2 	bl	8006e14 <sbrk_aligned>
 8006e90:	1c43      	adds	r3, r0, #1
 8006e92:	4604      	mov	r4, r0
 8006e94:	d14d      	bne.n	8006f32 <_malloc_r+0xde>
 8006e96:	6834      	ldr	r4, [r6, #0]
 8006e98:	4626      	mov	r6, r4
 8006e9a:	2e00      	cmp	r6, #0
 8006e9c:	d140      	bne.n	8006f20 <_malloc_r+0xcc>
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	4631      	mov	r1, r6
 8006ea2:	4638      	mov	r0, r7
 8006ea4:	eb04 0803 	add.w	r8, r4, r3
 8006ea8:	f000 f848 	bl	8006f3c <_sbrk_r>
 8006eac:	4580      	cmp	r8, r0
 8006eae:	d13a      	bne.n	8006f26 <_malloc_r+0xd2>
 8006eb0:	6821      	ldr	r1, [r4, #0]
 8006eb2:	3503      	adds	r5, #3
 8006eb4:	1a6d      	subs	r5, r5, r1
 8006eb6:	f025 0503 	bic.w	r5, r5, #3
 8006eba:	3508      	adds	r5, #8
 8006ebc:	2d0c      	cmp	r5, #12
 8006ebe:	bf38      	it	cc
 8006ec0:	250c      	movcc	r5, #12
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	4638      	mov	r0, r7
 8006ec6:	f7ff ffa5 	bl	8006e14 <sbrk_aligned>
 8006eca:	3001      	adds	r0, #1
 8006ecc:	d02b      	beq.n	8006f26 <_malloc_r+0xd2>
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	442b      	add	r3, r5
 8006ed2:	6023      	str	r3, [r4, #0]
 8006ed4:	e00e      	b.n	8006ef4 <_malloc_r+0xa0>
 8006ed6:	6822      	ldr	r2, [r4, #0]
 8006ed8:	1b52      	subs	r2, r2, r5
 8006eda:	d41e      	bmi.n	8006f1a <_malloc_r+0xc6>
 8006edc:	2a0b      	cmp	r2, #11
 8006ede:	d916      	bls.n	8006f0e <_malloc_r+0xba>
 8006ee0:	1961      	adds	r1, r4, r5
 8006ee2:	42a3      	cmp	r3, r4
 8006ee4:	6025      	str	r5, [r4, #0]
 8006ee6:	bf18      	it	ne
 8006ee8:	6059      	strne	r1, [r3, #4]
 8006eea:	6863      	ldr	r3, [r4, #4]
 8006eec:	bf08      	it	eq
 8006eee:	6031      	streq	r1, [r6, #0]
 8006ef0:	5162      	str	r2, [r4, r5]
 8006ef2:	604b      	str	r3, [r1, #4]
 8006ef4:	4638      	mov	r0, r7
 8006ef6:	f104 060b 	add.w	r6, r4, #11
 8006efa:	f000 f835 	bl	8006f68 <__malloc_unlock>
 8006efe:	f026 0607 	bic.w	r6, r6, #7
 8006f02:	1d23      	adds	r3, r4, #4
 8006f04:	1af2      	subs	r2, r6, r3
 8006f06:	d0b6      	beq.n	8006e76 <_malloc_r+0x22>
 8006f08:	1b9b      	subs	r3, r3, r6
 8006f0a:	50a3      	str	r3, [r4, r2]
 8006f0c:	e7b3      	b.n	8006e76 <_malloc_r+0x22>
 8006f0e:	6862      	ldr	r2, [r4, #4]
 8006f10:	42a3      	cmp	r3, r4
 8006f12:	bf0c      	ite	eq
 8006f14:	6032      	streq	r2, [r6, #0]
 8006f16:	605a      	strne	r2, [r3, #4]
 8006f18:	e7ec      	b.n	8006ef4 <_malloc_r+0xa0>
 8006f1a:	4623      	mov	r3, r4
 8006f1c:	6864      	ldr	r4, [r4, #4]
 8006f1e:	e7b2      	b.n	8006e86 <_malloc_r+0x32>
 8006f20:	4634      	mov	r4, r6
 8006f22:	6876      	ldr	r6, [r6, #4]
 8006f24:	e7b9      	b.n	8006e9a <_malloc_r+0x46>
 8006f26:	230c      	movs	r3, #12
 8006f28:	603b      	str	r3, [r7, #0]
 8006f2a:	4638      	mov	r0, r7
 8006f2c:	f000 f81c 	bl	8006f68 <__malloc_unlock>
 8006f30:	e7a1      	b.n	8006e76 <_malloc_r+0x22>
 8006f32:	6025      	str	r5, [r4, #0]
 8006f34:	e7de      	b.n	8006ef4 <_malloc_r+0xa0>
 8006f36:	bf00      	nop
 8006f38:	20000888 	.word	0x20000888

08006f3c <_sbrk_r>:
 8006f3c:	b538      	push	{r3, r4, r5, lr}
 8006f3e:	4d06      	ldr	r5, [pc, #24]	; (8006f58 <_sbrk_r+0x1c>)
 8006f40:	2300      	movs	r3, #0
 8006f42:	4604      	mov	r4, r0
 8006f44:	4608      	mov	r0, r1
 8006f46:	602b      	str	r3, [r5, #0]
 8006f48:	f7f9 fc54 	bl	80007f4 <_sbrk>
 8006f4c:	1c43      	adds	r3, r0, #1
 8006f4e:	d102      	bne.n	8006f56 <_sbrk_r+0x1a>
 8006f50:	682b      	ldr	r3, [r5, #0]
 8006f52:	b103      	cbz	r3, 8006f56 <_sbrk_r+0x1a>
 8006f54:	6023      	str	r3, [r4, #0]
 8006f56:	bd38      	pop	{r3, r4, r5, pc}
 8006f58:	20000890 	.word	0x20000890

08006f5c <__malloc_lock>:
 8006f5c:	4801      	ldr	r0, [pc, #4]	; (8006f64 <__malloc_lock+0x8>)
 8006f5e:	f000 b809 	b.w	8006f74 <__retarget_lock_acquire_recursive>
 8006f62:	bf00      	nop
 8006f64:	20000894 	.word	0x20000894

08006f68 <__malloc_unlock>:
 8006f68:	4801      	ldr	r0, [pc, #4]	; (8006f70 <__malloc_unlock+0x8>)
 8006f6a:	f000 b804 	b.w	8006f76 <__retarget_lock_release_recursive>
 8006f6e:	bf00      	nop
 8006f70:	20000894 	.word	0x20000894

08006f74 <__retarget_lock_acquire_recursive>:
 8006f74:	4770      	bx	lr

08006f76 <__retarget_lock_release_recursive>:
 8006f76:	4770      	bx	lr

08006f78 <_init>:
 8006f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f7a:	bf00      	nop
 8006f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f7e:	bc08      	pop	{r3}
 8006f80:	469e      	mov	lr, r3
 8006f82:	4770      	bx	lr

08006f84 <_fini>:
 8006f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f86:	bf00      	nop
 8006f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f8a:	bc08      	pop	{r3}
 8006f8c:	469e      	mov	lr, r3
 8006f8e:	4770      	bx	lr
