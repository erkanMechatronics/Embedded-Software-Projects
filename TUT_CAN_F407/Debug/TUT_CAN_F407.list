
TUT_CAN_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a40  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004bc8  08004bc8  00005bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004be0  08004be0  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004be0  08004be0  00005be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004be8  08004be8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004be8  08004be8  00005be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004bec  08004bec  00005bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004bf0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000118  20000010  20000010  00006010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000128  20000128  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000095c7  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001888  00000000  00000000  0000f603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000890  00000000  00000000  00010e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000068f  00000000  00000000  00011720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000206d4  00000000  00000000  00011daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ac6a  00000000  00000000  00032483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c52fc  00000000  00000000  0003d0ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001023e9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000249c  00000000  00000000  0010242c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001048c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004bb0 	.word	0x08004bb0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004bb0 	.word	0x08004bb0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b96a 	b.w	8000d80 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	460c      	mov	r4, r1
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d14e      	bne.n	8000b6e <__udivmoddi4+0xaa>
 8000ad0:	4694      	mov	ip, r2
 8000ad2:	458c      	cmp	ip, r1
 8000ad4:	4686      	mov	lr, r0
 8000ad6:	fab2 f282 	clz	r2, r2
 8000ada:	d962      	bls.n	8000ba2 <__udivmoddi4+0xde>
 8000adc:	b14a      	cbz	r2, 8000af2 <__udivmoddi4+0x2e>
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	4091      	lsls	r1, r2
 8000ae4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aec:	4319      	orrs	r1, r3
 8000aee:	fa00 fe02 	lsl.w	lr, r0, r2
 8000af2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af6:	fa1f f68c 	uxth.w	r6, ip
 8000afa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000afe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b02:	fb07 1114 	mls	r1, r7, r4, r1
 8000b06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0a:	fb04 f106 	mul.w	r1, r4, r6
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	d90a      	bls.n	8000b28 <__udivmoddi4+0x64>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b1a:	f080 8112 	bcs.w	8000d42 <__udivmoddi4+0x27e>
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	f240 810f 	bls.w	8000d42 <__udivmoddi4+0x27e>
 8000b24:	3c02      	subs	r4, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a59      	subs	r1, r3, r1
 8000b2a:	fa1f f38e 	uxth.w	r3, lr
 8000b2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b32:	fb07 1110 	mls	r1, r7, r0, r1
 8000b36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3a:	fb00 f606 	mul.w	r6, r0, r6
 8000b3e:	429e      	cmp	r6, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x94>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b4a:	f080 80fc 	bcs.w	8000d46 <__udivmoddi4+0x282>
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	f240 80f9 	bls.w	8000d46 <__udivmoddi4+0x282>
 8000b54:	4463      	add	r3, ip
 8000b56:	3802      	subs	r0, #2
 8000b58:	1b9b      	subs	r3, r3, r6
 8000b5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b5e:	2100      	movs	r1, #0
 8000b60:	b11d      	cbz	r5, 8000b6a <__udivmoddi4+0xa6>
 8000b62:	40d3      	lsrs	r3, r2
 8000b64:	2200      	movs	r2, #0
 8000b66:	e9c5 3200 	strd	r3, r2, [r5]
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	428b      	cmp	r3, r1
 8000b70:	d905      	bls.n	8000b7e <__udivmoddi4+0xba>
 8000b72:	b10d      	cbz	r5, 8000b78 <__udivmoddi4+0xb4>
 8000b74:	e9c5 0100 	strd	r0, r1, [r5]
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e7f5      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000b7e:	fab3 f183 	clz	r1, r3
 8000b82:	2900      	cmp	r1, #0
 8000b84:	d146      	bne.n	8000c14 <__udivmoddi4+0x150>
 8000b86:	42a3      	cmp	r3, r4
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xcc>
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	f0c0 80f0 	bcc.w	8000d70 <__udivmoddi4+0x2ac>
 8000b90:	1a86      	subs	r6, r0, r2
 8000b92:	eb64 0303 	sbc.w	r3, r4, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	2d00      	cmp	r5, #0
 8000b9a:	d0e6      	beq.n	8000b6a <__udivmoddi4+0xa6>
 8000b9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba0:	e7e3      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	f040 8090 	bne.w	8000cc8 <__udivmoddi4+0x204>
 8000ba8:	eba1 040c 	sub.w	r4, r1, ip
 8000bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb0:	fa1f f78c 	uxth.w	r7, ip
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bbe:	fb08 4416 	mls	r4, r8, r6, r4
 8000bc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bc6:	fb07 f006 	mul.w	r0, r7, r6
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x11c>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x11a>
 8000bd8:	4298      	cmp	r0, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2b4>
 8000bde:	4626      	mov	r6, r4
 8000be0:	1a1c      	subs	r4, r3, r0
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bea:	fb08 4410 	mls	r4, r8, r0, r4
 8000bee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bf2:	fb00 f707 	mul.w	r7, r0, r7
 8000bf6:	429f      	cmp	r7, r3
 8000bf8:	d908      	bls.n	8000c0c <__udivmoddi4+0x148>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x146>
 8000c04:	429f      	cmp	r7, r3
 8000c06:	f200 80b0 	bhi.w	8000d6a <__udivmoddi4+0x2a6>
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	1bdb      	subs	r3, r3, r7
 8000c0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c12:	e7a5      	b.n	8000b60 <__udivmoddi4+0x9c>
 8000c14:	f1c1 0620 	rsb	r6, r1, #32
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c24:	fa04 f301 	lsl.w	r3, r4, r1
 8000c28:	ea43 030c 	orr.w	r3, r3, ip
 8000c2c:	40f4      	lsrs	r4, r6
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	0c38      	lsrs	r0, r7, #16
 8000c34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c38:	fbb4 fef0 	udiv	lr, r4, r0
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	fb00 441e 	mls	r4, r0, lr, r4
 8000c44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c48:	fb0e f90c 	mul.w	r9, lr, ip
 8000c4c:	45a1      	cmp	r9, r4
 8000c4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x1a6>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c5a:	f080 8084 	bcs.w	8000d66 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8081 	bls.w	8000d66 <__udivmoddi4+0x2a2>
 8000c64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	eba4 0409 	sub.w	r4, r4, r9
 8000c6e:	fa1f f983 	uxth.w	r9, r3
 8000c72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c76:	fb00 4413 	mls	r4, r0, r3, r4
 8000c7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c82:	45a4      	cmp	ip, r4
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0x1d2>
 8000c86:	193c      	adds	r4, r7, r4
 8000c88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c8c:	d267      	bcs.n	8000d5e <__udivmoddi4+0x29a>
 8000c8e:	45a4      	cmp	ip, r4
 8000c90:	d965      	bls.n	8000d5e <__udivmoddi4+0x29a>
 8000c92:	3b02      	subs	r3, #2
 8000c94:	443c      	add	r4, r7
 8000c96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	46ce      	mov	lr, r9
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	d351      	bcc.n	8000d4e <__udivmoddi4+0x28a>
 8000caa:	d04e      	beq.n	8000d4a <__udivmoddi4+0x286>
 8000cac:	b155      	cbz	r5, 8000cc4 <__udivmoddi4+0x200>
 8000cae:	ebb8 030e 	subs.w	r3, r8, lr
 8000cb2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cba:	40cb      	lsrs	r3, r1
 8000cbc:	431e      	orrs	r6, r3
 8000cbe:	40cc      	lsrs	r4, r1
 8000cc0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e750      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000cc8:	f1c2 0320 	rsb	r3, r2, #32
 8000ccc:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd4:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd8:	4094      	lsls	r4, r2
 8000cda:	430c      	orrs	r4, r1
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf0:	0c23      	lsrs	r3, r4, #16
 8000cf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf6:	fb00 f107 	mul.w	r1, r0, r7
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x24c>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d06:	d22c      	bcs.n	8000d62 <__udivmoddi4+0x29e>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d92a      	bls.n	8000d62 <__udivmoddi4+0x29e>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d18:	fb08 3311 	mls	r3, r8, r1, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb01 f307 	mul.w	r3, r1, r7
 8000d24:	42a3      	cmp	r3, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x276>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d30:	d213      	bcs.n	8000d5a <__udivmoddi4+0x296>
 8000d32:	42a3      	cmp	r3, r4
 8000d34:	d911      	bls.n	8000d5a <__udivmoddi4+0x296>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4464      	add	r4, ip
 8000d3a:	1ae4      	subs	r4, r4, r3
 8000d3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d40:	e739      	b.n	8000bb6 <__udivmoddi4+0xf2>
 8000d42:	4604      	mov	r4, r0
 8000d44:	e6f0      	b.n	8000b28 <__udivmoddi4+0x64>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e706      	b.n	8000b58 <__udivmoddi4+0x94>
 8000d4a:	45c8      	cmp	r8, r9
 8000d4c:	d2ae      	bcs.n	8000cac <__udivmoddi4+0x1e8>
 8000d4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d52:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d56:	3801      	subs	r0, #1
 8000d58:	e7a8      	b.n	8000cac <__udivmoddi4+0x1e8>
 8000d5a:	4631      	mov	r1, r6
 8000d5c:	e7ed      	b.n	8000d3a <__udivmoddi4+0x276>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	e799      	b.n	8000c96 <__udivmoddi4+0x1d2>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e7d4      	b.n	8000d10 <__udivmoddi4+0x24c>
 8000d66:	46d6      	mov	lr, sl
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1a6>
 8000d6a:	4463      	add	r3, ip
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	e74d      	b.n	8000c0c <__udivmoddi4+0x148>
 8000d70:	4606      	mov	r6, r0
 8000d72:	4623      	mov	r3, r4
 8000d74:	4608      	mov	r0, r1
 8000d76:	e70f      	b.n	8000b98 <__udivmoddi4+0xd4>
 8000d78:	3e02      	subs	r6, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	e730      	b.n	8000be0 <__udivmoddi4+0x11c>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <BMP180_chip_ID>:
	}
}


sensor_readiness_e BMP180_chip_ID(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af04      	add	r7, sp, #16
	uint8_t returnVal;

	HAL_I2C_Mem_Read(I2C_HANDLER, DEVICE_READ, ID_REG, 1, &returnVal, 1, 100);
 8000d8a:	2364      	movs	r3, #100	@ 0x64
 8000d8c:	9302      	str	r3, [sp, #8]
 8000d8e:	2301      	movs	r3, #1
 8000d90:	9301      	str	r3, [sp, #4]
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2301      	movs	r3, #1
 8000d98:	22d0      	movs	r2, #208	@ 0xd0
 8000d9a:	21ef      	movs	r1, #239	@ 0xef
 8000d9c:	4806      	ldr	r0, [pc, #24]	@ (8000db8 <BMP180_chip_ID+0x34>)
 8000d9e:	f002 fb43 	bl	8003428 <HAL_I2C_Mem_Read>

	if(returnVal == 0x55)
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b55      	cmp	r3, #85	@ 0x55
 8000da6:	d101      	bne.n	8000dac <BMP180_chip_ID+0x28>
	{
		return SENSOR_READY;
 8000da8:	2301      	movs	r3, #1
 8000daa:	e000      	b.n	8000dae <BMP180_chip_ID+0x2a>
	}
	else
	{
		return SENSOR_NREADY;
 8000dac:	2300      	movs	r3, #0
	}
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200000d0 	.word	0x200000d0

08000dbc <BMP180_getCalib_data>:

int16_t* BMP180_getCalib_data(int16_t* calibration_data)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08e      	sub	sp, #56	@ 0x38
 8000dc0:	af04      	add	r7, sp, #16
 8000dc2:	6078      	str	r0, [r7, #4]
	uint8_t  calibration_data_temp[22];


	HAL_I2C_Mem_Read(I2C_HANDLER, DEVICE_READ, AC1_MSB, 1, calibration_data_temp,22, 100);
 8000dc4:	2364      	movs	r3, #100	@ 0x64
 8000dc6:	9302      	str	r3, [sp, #8]
 8000dc8:	2316      	movs	r3, #22
 8000dca:	9301      	str	r3, [sp, #4]
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	22aa      	movs	r2, #170	@ 0xaa
 8000dd6:	21ef      	movs	r1, #239	@ 0xef
 8000dd8:	4813      	ldr	r0, [pc, #76]	@ (8000e28 <BMP180_getCalib_data+0x6c>)
 8000dda:	f002 fb25 	bl	8003428 <HAL_I2C_Mem_Read>

	for(int i = 0;i < 11;i++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000de2:	e019      	b.n	8000e18 <BMP180_getCalib_data+0x5c>
	{
		calibration_data[i] = (calibration_data_temp[2 * i] << 8) | calibration_data_temp[2 * i + 1];
 8000de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	3328      	adds	r3, #40	@ 0x28
 8000dea:	443b      	add	r3, r7
 8000dec:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	b219      	sxth	r1, r3
 8000df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	3301      	adds	r3, #1
 8000dfa:	3328      	adds	r3, #40	@ 0x28
 8000dfc:	443b      	add	r3, r7
 8000dfe:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000e02:	b21a      	sxth	r2, r3
 8000e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	4403      	add	r3, r0
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	b212      	sxth	r2, r2
 8000e10:	801a      	strh	r2, [r3, #0]
	for(int i = 0;i < 11;i++)
 8000e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e14:	3301      	adds	r3, #1
 8000e16:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e1a:	2b0a      	cmp	r3, #10
 8000e1c:	dde2      	ble.n	8000de4 <BMP180_getCalib_data+0x28>
	}

	return calibration_data;
 8000e1e:	687b      	ldr	r3, [r7, #4]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3728      	adds	r7, #40	@ 0x28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	200000d0 	.word	0x200000d0

08000e2c <BMP180_write_data>:

sensor_status_e BMP180_write_data(uint8_t reg_address,uint8_t data)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b088      	sub	sp, #32
 8000e30:	af04      	add	r7, sp, #16
 8000e32:	4603      	mov	r3, r0
 8000e34:	460a      	mov	r2, r1
 8000e36:	71fb      	strb	r3, [r7, #7]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status;

	status = HAL_I2C_Mem_Write(I2C_HANDLER,DEVICE_WRITE,reg_address,1,&data,1,100);
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	2364      	movs	r3, #100	@ 0x64
 8000e42:	9302      	str	r3, [sp, #8]
 8000e44:	2301      	movs	r3, #1
 8000e46:	9301      	str	r3, [sp, #4]
 8000e48:	1dbb      	adds	r3, r7, #6
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	21ee      	movs	r1, #238	@ 0xee
 8000e50:	4807      	ldr	r0, [pc, #28]	@ (8000e70 <BMP180_write_data+0x44>)
 8000e52:	f002 f9ef 	bl	8003234 <HAL_I2C_Mem_Write>
 8000e56:	4603      	mov	r3, r0
 8000e58:	73fb      	strb	r3, [r7, #15]

	if(status != HAL_OK)
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <BMP180_write_data+0x38>
	{
		return SENSOR_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	e000      	b.n	8000e66 <BMP180_write_data+0x3a>
	}
	else
	{
		return SENSOR_OK;
 8000e64:	2300      	movs	r3, #0
	}
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200000d0 	.word	0x200000d0

08000e74 <BMP180_read_data>:

uint8_t BMP180_read_data(uint8_t reg_address)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af04      	add	r7, sp, #16
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
	uint8_t returnData;


	HAL_I2C_Mem_Read(I2C_HANDLER, DEVICE_READ,reg_address , 1, &returnData,1, 100);
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	2364      	movs	r3, #100	@ 0x64
 8000e84:	9302      	str	r3, [sp, #8]
 8000e86:	2301      	movs	r3, #1
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	f107 030f 	add.w	r3, r7, #15
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	2301      	movs	r3, #1
 8000e92:	21ef      	movs	r1, #239	@ 0xef
 8000e94:	4803      	ldr	r0, [pc, #12]	@ (8000ea4 <BMP180_read_data+0x30>)
 8000e96:	f002 fac7 	bl	8003428 <HAL_I2C_Mem_Read>

	return returnData;
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200000d0 	.word	0x200000d0

08000ea8 <BMP180_check_sensor>:

sensor_status_e BMP180_check_sensor(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;

	status = HAL_I2C_IsDeviceReady(I2C_HANDLER, DEVICE_READ, 2, 100);
 8000eae:	2364      	movs	r3, #100	@ 0x64
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	21ef      	movs	r1, #239	@ 0xef
 8000eb4:	4807      	ldr	r0, [pc, #28]	@ (8000ed4 <BMP180_check_sensor+0x2c>)
 8000eb6:	f002 fce9 	bl	800388c <HAL_I2C_IsDeviceReady>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]

	if(status != HAL_OK)
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <BMP180_check_sensor+0x20>
	{
		return SENSOR_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e000      	b.n	8000eca <BMP180_check_sensor+0x22>
	}
	else
	{
		return SENSOR_OK;
 8000ec8:	2300      	movs	r3, #0
	}
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200000d0 	.word	0x200000d0

08000ed8 <BMP180_read_utemp>:

float BMP180_read_utemp(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
	BMP180_write_data(CTRL_MEAS,TEMP_CONV_45);
 8000ede:	212e      	movs	r1, #46	@ 0x2e
 8000ee0:	20f4      	movs	r0, #244	@ 0xf4
 8000ee2:	f7ff ffa3 	bl	8000e2c <BMP180_write_data>
	HAL_Delay(4.5);
 8000ee6:	2004      	movs	r0, #4
 8000ee8:	f000 fedc 	bl	8001ca4 <HAL_Delay>

	uint8_t msb,lsb;

	msb = BMP180_read_data(OUT_MSB);
 8000eec:	20f6      	movs	r0, #246	@ 0xf6
 8000eee:	f7ff ffc1 	bl	8000e74 <BMP180_read_data>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
	lsb = BMP180_read_data(OUT_LSB);
 8000ef6:	20f7      	movs	r0, #247	@ 0xf7
 8000ef8:	f7ff ffbc 	bl	8000e74 <BMP180_read_data>
 8000efc:	4603      	mov	r3, r0
 8000efe:	71bb      	strb	r3, [r7, #6]

	float ucomTemp;

	ucomTemp = (msb << 8) | lsb;
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	021a      	lsls	r2, r3, #8
 8000f04:	79bb      	ldrb	r3, [r7, #6]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	ee07 3a90 	vmov	s15, r3
 8000f0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f10:	edc7 7a00 	vstr	s15, [r7]

	return ucomTemp;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	ee07 3a90 	vmov	s15, r3
}
 8000f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <BMP180_read_rtemp>:

float BMP180_read_rtemp(void)
{
 8000f24:	b5b0      	push	{r4, r5, r7, lr}
 8000f26:	b08c      	sub	sp, #48	@ 0x30
 8000f28:	af00      	add	r7, sp, #0
	float x1,x2,b5,realTemp,ut;
	int16_t calibration_data[11];

	BMP180_getCalib_data(calibration_data);
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff45 	bl	8000dbc <BMP180_getCalib_data>
	ut = BMP180_read_utemp();
 8000f32:	f7ff ffd1 	bl	8000ed8 <BMP180_read_utemp>
 8000f36:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c

	x1 = (ut - calibration_data[5])* calibration_data[4] / pow(2,15);
 8000f3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f3e:	ee07 3a90 	vmov	s15, r3
 8000f42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f46:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000f4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f4e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f52:	ee07 3a90 	vmov	s15, r3
 8000f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f5e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8001008 <BMP180_read_rtemp+0xe4>
 8000f62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f66:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	x2 = calibration_data[9] * pow(2,11) / (x1 + calibration_data[10]);
 8000f6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fa7c 	bl	800046c <__aeabi_i2d>
 8000f74:	f04f 0200 	mov.w	r2, #0
 8000f78:	4b24      	ldr	r3, [pc, #144]	@ (800100c <BMP180_read_rtemp+0xe8>)
 8000f7a:	f7ff fae1 	bl	8000540 <__aeabi_dmul>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4614      	mov	r4, r2
 8000f84:	461d      	mov	r5, r3
 8000f86:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000f8a:	ee07 3a90 	vmov	s15, r3
 8000f8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f92:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000f96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f9a:	ee17 0a90 	vmov	r0, s15
 8000f9e:	f7ff fa77 	bl	8000490 <__aeabi_f2d>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	4629      	mov	r1, r5
 8000faa:	f7ff fbf3 	bl	8000794 <__aeabi_ddiv>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	4610      	mov	r0, r2
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f7ff fd1d 	bl	80009f4 <__aeabi_d2f>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
	b5 = x1 + x2;
 8000fbe:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000fc2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fca:	edc7 7a08 	vstr	s15, [r7, #32]

	realTemp = (b5 + 8) / pow(2,4);
 8000fce:	edd7 7a08 	vldr	s15, [r7, #32]
 8000fd2:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000fd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000fda:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8000fde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe2:	edc7 7a07 	vstr	s15, [r7, #28]

	realTemp = realTemp / 10;
 8000fe6:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fea:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000fee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff2:	edc7 7a07 	vstr	s15, [r7, #28]

	return realTemp;
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	ee07 3a90 	vmov	s15, r3
}
 8000ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8001000:	3730      	adds	r7, #48	@ 0x30
 8001002:	46bd      	mov	sp, r7
 8001004:	bdb0      	pop	{r4, r5, r7, pc}
 8001006:	bf00      	nop
 8001008:	47000000 	.word	0x47000000
 800100c:	40a00000 	.word	0x40a00000

08001010 <BMP180_read_upres>:


double BMP180_read_upres(oversampling_ratio_e oss)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	float delay;
	double ucomPres;


	switch (oss)
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2b03      	cmp	r3, #3
 800101e:	d813      	bhi.n	8001048 <BMP180_read_upres+0x38>
 8001020:	a201      	add	r2, pc, #4	@ (adr r2, 8001028 <BMP180_read_upres+0x18>)
 8001022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001026:	bf00      	nop
 8001028:	08001039 	.word	0x08001039
 800102c:	0800103d 	.word	0x0800103d
 8001030:	08001041 	.word	0x08001041
 8001034:	08001045 	.word	0x08001045
	{
		case 0:
			delay = 4.5;
 8001038:	4b24      	ldr	r3, [pc, #144]	@ (80010cc <BMP180_read_upres+0xbc>)
 800103a:	617b      	str	r3, [r7, #20]
		case 1:
			delay = 7.5;
 800103c:	4b24      	ldr	r3, [pc, #144]	@ (80010d0 <BMP180_read_upres+0xc0>)
 800103e:	617b      	str	r3, [r7, #20]
		case 2:
			delay = 13.5;
 8001040:	4b24      	ldr	r3, [pc, #144]	@ (80010d4 <BMP180_read_upres+0xc4>)
 8001042:	617b      	str	r3, [r7, #20]
		case 3:
			delay = 25.5;
 8001044:	4b24      	ldr	r3, [pc, #144]	@ (80010d8 <BMP180_read_upres+0xc8>)
 8001046:	617b      	str	r3, [r7, #20]
	}


	data = PRES_CONV_45 | (oss << 6);
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	019b      	lsls	r3, r3, #6
 800104c:	b25b      	sxtb	r3, r3
 800104e:	f043 0334 	orr.w	r3, r3, #52	@ 0x34
 8001052:	b25b      	sxtb	r3, r3
 8001054:	74fb      	strb	r3, [r7, #19]

	BMP180_write_data(CTRL_MEAS,data);
 8001056:	7cfb      	ldrb	r3, [r7, #19]
 8001058:	4619      	mov	r1, r3
 800105a:	20f4      	movs	r0, #244	@ 0xf4
 800105c:	f7ff fee6 	bl	8000e2c <BMP180_write_data>

	HAL_Delay(delay);
 8001060:	edd7 7a05 	vldr	s15, [r7, #20]
 8001064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001068:	ee17 0a90 	vmov	r0, s15
 800106c:	f000 fe1a 	bl	8001ca4 <HAL_Delay>

	uint8_t msb,lsb,xlsb;

	msb  = BMP180_read_data(OUT_MSB);
 8001070:	20f6      	movs	r0, #246	@ 0xf6
 8001072:	f7ff feff 	bl	8000e74 <BMP180_read_data>
 8001076:	4603      	mov	r3, r0
 8001078:	74bb      	strb	r3, [r7, #18]
	lsb  = BMP180_read_data(OUT_LSB);
 800107a:	20f7      	movs	r0, #247	@ 0xf7
 800107c:	f7ff fefa 	bl	8000e74 <BMP180_read_data>
 8001080:	4603      	mov	r3, r0
 8001082:	747b      	strb	r3, [r7, #17]
	xlsb = BMP180_read_data(OUT_XLSB);
 8001084:	20f8      	movs	r0, #248	@ 0xf8
 8001086:	f7ff fef5 	bl	8000e74 <BMP180_read_data>
 800108a:	4603      	mov	r3, r0
 800108c:	743b      	strb	r3, [r7, #16]

	ucomPres = ((msb << 16) | (lsb << 8) | xlsb) >> (8 - oss);
 800108e:	7cbb      	ldrb	r3, [r7, #18]
 8001090:	041a      	lsls	r2, r3, #16
 8001092:	7c7b      	ldrb	r3, [r7, #17]
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	431a      	orrs	r2, r3
 8001098:	7c3b      	ldrb	r3, [r7, #16]
 800109a:	431a      	orrs	r2, r3
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f1c3 0308 	rsb	r3, r3, #8
 80010a2:	fa42 f303 	asr.w	r3, r2, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff f9e0 	bl	800046c <__aeabi_i2d>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return ucomPres;
 80010b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010b8:	ec43 2b17 	vmov	d7, r2, r3
}
 80010bc:	eeb0 0a47 	vmov.f32	s0, s14
 80010c0:	eef0 0a67 	vmov.f32	s1, s15
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40900000 	.word	0x40900000
 80010d0:	40f00000 	.word	0x40f00000
 80010d4:	41580000 	.word	0x41580000
 80010d8:	41cc0000 	.word	0x41cc0000
 80010dc:	00000000 	.word	0x00000000

080010e0 <BMP180_read_rpres>:


double BMP180_read_rpres(oversampling_ratio_e oss)
{
 80010e0:	b5b0      	push	{r4, r5, r7, lr}
 80010e2:	b094      	sub	sp, #80	@ 0x50
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	long b3,b6;
	double realPres;

	unsigned long b4,b7;

	ut = BMP180_read_utemp();
 80010ea:	f7ff fef5 	bl	8000ed8 <BMP180_read_utemp>
 80010ee:	eef0 7a40 	vmov.f32	s15, s0
 80010f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010f6:	ee17 3a90 	vmov	r3, s15
 80010fa:	647b      	str	r3, [r7, #68]	@ 0x44
	up = BMP180_read_upres(SINGLE_TIME);
 80010fc:	2000      	movs	r0, #0
 80010fe:	f7ff ff87 	bl	8001010 <BMP180_read_upres>
 8001102:	ec53 2b10 	vmov	r2, r3, d0
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fc2b 	bl	8000964 <__aeabi_d2iz>
 800110e:	4603      	mov	r3, r0
 8001110:	643b      	str	r3, [r7, #64]	@ 0x40
	int16_t calibration_data[11];

	BMP180_getCalib_data(calibration_data);
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fe50 	bl	8000dbc <BMP180_getCalib_data>


	x1 = (ut - calibration_data[5])* calibration_data[4] / pow(2,15);
 800111c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001120:	461a      	mov	r2, r3
 8001122:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800112a:	fb02 f303 	mul.w	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff f99c 	bl	800046c <__aeabi_i2d>
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	4bc1      	ldr	r3, [pc, #772]	@ (8001440 <BMP180_read_rpres+0x360>)
 800113a:	f7ff fb2b 	bl	8000794 <__aeabi_ddiv>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	f7ff fc0d 	bl	8000964 <__aeabi_d2iz>
 800114a:	4603      	mov	r3, r0
 800114c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	x2 = calibration_data[9] * pow(2,11) / (x1 + calibration_data[10]);
 800114e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff f98a 	bl	800046c <__aeabi_i2d>
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	4bb9      	ldr	r3, [pc, #740]	@ (8001444 <BMP180_read_rpres+0x364>)
 800115e:	f7ff f9ef 	bl	8000540 <__aeabi_dmul>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4614      	mov	r4, r2
 8001168:	461d      	mov	r5, r3
 800116a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800116e:	461a      	mov	r2, r3
 8001170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001172:	4413      	add	r3, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f979 	bl	800046c <__aeabi_i2d>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4620      	mov	r0, r4
 8001180:	4629      	mov	r1, r5
 8001182:	f7ff fb07 	bl	8000794 <__aeabi_ddiv>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f7ff fbe9 	bl	8000964 <__aeabi_d2iz>
 8001192:	4603      	mov	r3, r0
 8001194:	63bb      	str	r3, [r7, #56]	@ 0x38
	b5 = x1 + x2;
 8001196:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800119a:	4413      	add	r3, r2
 800119c:	637b      	str	r3, [r7, #52]	@ 0x34


	b6 = b5 - 4000;
 800119e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011a0:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 80011a4:	633b      	str	r3, [r7, #48]	@ 0x30
	x1 = (calibration_data[7]*(b6*b6 / pow(2,12))) / pow(2,11);
 80011a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f95e 	bl	800046c <__aeabi_i2d>
 80011b0:	4604      	mov	r4, r0
 80011b2:	460d      	mov	r5, r1
 80011b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011b6:	fb03 f303 	mul.w	r3, r3, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f956 	bl	800046c <__aeabi_i2d>
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	4ba0      	ldr	r3, [pc, #640]	@ (8001448 <BMP180_read_rpres+0x368>)
 80011c6:	f7ff fae5 	bl	8000794 <__aeabi_ddiv>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4620      	mov	r0, r4
 80011d0:	4629      	mov	r1, r5
 80011d2:	f7ff f9b5 	bl	8000540 <__aeabi_dmul>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	4b98      	ldr	r3, [pc, #608]	@ (8001444 <BMP180_read_rpres+0x364>)
 80011e4:	f7ff fad6 	bl	8000794 <__aeabi_ddiv>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fbb8 	bl	8000964 <__aeabi_d2iz>
 80011f4:	4603      	mov	r3, r0
 80011f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	x2 = calibration_data[1] * b6 / pow(2,11);
 80011f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011fc:	461a      	mov	r2, r3
 80011fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001200:	fb02 f303 	mul.w	r3, r2, r3
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f931 	bl	800046c <__aeabi_i2d>
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	4b8d      	ldr	r3, [pc, #564]	@ (8001444 <BMP180_read_rpres+0x364>)
 8001210:	f7ff fac0 	bl	8000794 <__aeabi_ddiv>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	f7ff fba2 	bl	8000964 <__aeabi_d2iz>
 8001220:	4603      	mov	r3, r0
 8001222:	63bb      	str	r3, [r7, #56]	@ 0x38
	x3 = x1 + x2;
 8001224:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001228:	4413      	add	r3, r2
 800122a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	b3 = (((calibration_data[0] * 4 + x3) << oss) + 2) / 4;
 800122c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001230:	009a      	lsls	r2, r3, #2
 8001232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001234:	441a      	add	r2, r3
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	3302      	adds	r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	da00      	bge.n	8001244 <BMP180_read_rpres+0x164>
 8001242:	3303      	adds	r3, #3
 8001244:	109b      	asrs	r3, r3, #2
 8001246:	62bb      	str	r3, [r7, #40]	@ 0x28
	x1 = calibration_data[2] * b6 / pow(2,13);
 8001248:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800124c:	461a      	mov	r2, r3
 800124e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001250:	fb02 f303 	mul.w	r3, r2, r3
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f909 	bl	800046c <__aeabi_i2d>
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	4b7b      	ldr	r3, [pc, #492]	@ (800144c <BMP180_read_rpres+0x36c>)
 8001260:	f7ff fa98 	bl	8000794 <__aeabi_ddiv>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f7ff fb7a 	bl	8000964 <__aeabi_d2iz>
 8001270:	4603      	mov	r3, r0
 8001272:	63fb      	str	r3, [r7, #60]	@ 0x3c
	x2 = calibration_data[6] * (b6 * b6 / pow(2,12))/ pow(2,16);
 8001274:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff f8f7 	bl	800046c <__aeabi_i2d>
 800127e:	4604      	mov	r4, r0
 8001280:	460d      	mov	r5, r1
 8001282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001284:	fb03 f303 	mul.w	r3, r3, r3
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f8ef 	bl	800046c <__aeabi_i2d>
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	4b6d      	ldr	r3, [pc, #436]	@ (8001448 <BMP180_read_rpres+0x368>)
 8001294:	f7ff fa7e 	bl	8000794 <__aeabi_ddiv>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4620      	mov	r0, r4
 800129e:	4629      	mov	r1, r5
 80012a0:	f7ff f94e 	bl	8000540 <__aeabi_dmul>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	4b67      	ldr	r3, [pc, #412]	@ (8001450 <BMP180_read_rpres+0x370>)
 80012b2:	f7ff fa6f 	bl	8000794 <__aeabi_ddiv>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4610      	mov	r0, r2
 80012bc:	4619      	mov	r1, r3
 80012be:	f7ff fb51 	bl	8000964 <__aeabi_d2iz>
 80012c2:	4603      	mov	r3, r0
 80012c4:	63bb      	str	r3, [r7, #56]	@ 0x38
	x3 = ((x1 + x2) + 2) / 4;
 80012c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80012c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012ca:	4413      	add	r3, r2
 80012cc:	3302      	adds	r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	da00      	bge.n	80012d4 <BMP180_read_rpres+0x1f4>
 80012d2:	3303      	adds	r3, #3
 80012d4:	109b      	asrs	r3, r3, #2
 80012d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	b4 = calibration_data[3]*(unsigned long)(x3 + 32768)/pow(2,15);
 80012d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012dc:	461a      	mov	r2, r3
 80012de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012e0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80012e4:	fb02 f303 	mul.w	r3, r2, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f8af 	bl	800044c <__aeabi_ui2d>
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	4b53      	ldr	r3, [pc, #332]	@ (8001440 <BMP180_read_rpres+0x360>)
 80012f4:	f7ff fa4e 	bl	8000794 <__aeabi_ddiv>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fb58 	bl	80009b4 <__aeabi_d2uiz>
 8001304:	4603      	mov	r3, r0
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
	b7 = ((unsigned long)up - b3)*(50000 >> oss);
 8001308:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800130a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	79fa      	ldrb	r2, [r7, #7]
 8001310:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8001314:	fa41 f202 	asr.w	r2, r1, r2
 8001318:	fb02 f303 	mul.w	r3, r2, r3
 800131c:	623b      	str	r3, [r7, #32]

	if(b7 < 0x80000000)
 800131e:	6a3b      	ldr	r3, [r7, #32]
 8001320:	2b00      	cmp	r3, #0
 8001322:	db0c      	blt.n	800133e <BMP180_read_rpres+0x25e>
	{
		realPres = (b7 * 2) / b4;
 8001324:	6a3b      	ldr	r3, [r7, #32]
 8001326:	005a      	lsls	r2, r3, #1
 8001328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132a:	fbb2 f3f3 	udiv	r3, r2, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f88c 	bl	800044c <__aeabi_ui2d>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 800133c:	e00b      	b.n	8001356 <BMP180_read_rpres+0x276>
	}
	else
	{
		realPres = (b7 / b4) * 2;
 800133e:	6a3a      	ldr	r2, [r7, #32]
 8001340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001342:	fbb2 f3f3 	udiv	r3, r2, r3
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f87f 	bl	800044c <__aeabi_ui2d>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	}

	x1 = (realPres / pow(2,8))*(realPres / pow(2,8));
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	4b3e      	ldr	r3, [pc, #248]	@ (8001454 <BMP180_read_rpres+0x374>)
 800135c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001360:	f7ff fa18 	bl	8000794 <__aeabi_ddiv>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4614      	mov	r4, r2
 800136a:	461d      	mov	r5, r3
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	4b38      	ldr	r3, [pc, #224]	@ (8001454 <BMP180_read_rpres+0x374>)
 8001372:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001376:	f7ff fa0d 	bl	8000794 <__aeabi_ddiv>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4620      	mov	r0, r4
 8001380:	4629      	mov	r1, r5
 8001382:	f7ff f8dd 	bl	8000540 <__aeabi_dmul>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4610      	mov	r0, r2
 800138c:	4619      	mov	r1, r3
 800138e:	f7ff fae9 	bl	8000964 <__aeabi_d2iz>
 8001392:	4603      	mov	r3, r0
 8001394:	63fb      	str	r3, [r7, #60]	@ 0x3c
	x1 = (x1 * 3038) / pow(2,16);
 8001396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001398:	f640 32de 	movw	r2, #3038	@ 0xbde
 800139c:	fb02 f303 	mul.w	r3, r2, r3
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f863 	bl	800046c <__aeabi_i2d>
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	4b29      	ldr	r3, [pc, #164]	@ (8001450 <BMP180_read_rpres+0x370>)
 80013ac:	f7ff f9f2 	bl	8000794 <__aeabi_ddiv>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f7ff fad4 	bl	8000964 <__aeabi_d2iz>
 80013bc:	4603      	mov	r3, r0
 80013be:	63fb      	str	r3, [r7, #60]	@ 0x3c
	x2 = (-7357 * realPres) / pow(2,16);
 80013c0:	a31d      	add	r3, pc, #116	@ (adr r3, 8001438 <BMP180_read_rpres+0x358>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80013ca:	f7ff f8b9 	bl	8000540 <__aeabi_dmul>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <BMP180_read_rpres+0x370>)
 80013dc:	f7ff f9da 	bl	8000794 <__aeabi_ddiv>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fabc 	bl	8000964 <__aeabi_d2iz>
 80013ec:	4603      	mov	r3, r0
 80013ee:	63bb      	str	r3, [r7, #56]	@ 0x38

	realPres = realPres + (x1 + x2 + 3791) / pow(2,4);
 80013f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80013f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013f4:	4413      	add	r3, r2
 80013f6:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f836 	bl	800046c <__aeabi_i2d>
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <BMP180_read_rpres+0x378>)
 8001406:	f7ff f9c5 	bl	8000794 <__aeabi_ddiv>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001412:	f7fe fedf 	bl	80001d4 <__adddf3>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

	// Turn Pascal to Bar


	return realPres;
 800141e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001422:	ec43 2b17 	vmov	d7, r2, r3
}
 8001426:	eeb0 0a47 	vmov.f32	s0, s14
 800142a:	eef0 0a67 	vmov.f32	s1, s15
 800142e:	3750      	adds	r7, #80	@ 0x50
 8001430:	46bd      	mov	sp, r7
 8001432:	bdb0      	pop	{r4, r5, r7, pc}
 8001434:	f3af 8000 	nop.w
 8001438:	00000000 	.word	0x00000000
 800143c:	c0bcbd00 	.word	0xc0bcbd00
 8001440:	40e00000 	.word	0x40e00000
 8001444:	40a00000 	.word	0x40a00000
 8001448:	40b00000 	.word	0x40b00000
 800144c:	40c00000 	.word	0x40c00000
 8001450:	40f00000 	.word	0x40f00000
 8001454:	40700000 	.word	0x40700000
 8001458:	40300000 	.word	0x40300000

0800145c <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0))
 8001466:	2101      	movs	r1, #1
 8001468:	4818      	ldr	r0, [pc, #96]	@ (80014cc <HAL_GPIO_EXTI_Callback+0x70>)
 800146a:	f001 fd55 	bl	8002f18 <HAL_GPIO_ReadPin>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d020      	beq.n	80014b6 <HAL_GPIO_EXTI_Callback+0x5a>
	{
		txData[0] = tempVal;
 8001474:	4b16      	ldr	r3, [pc, #88]	@ (80014d0 <HAL_GPIO_EXTI_Callback+0x74>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800147e:	edc7 7a00 	vstr	s15, [r7]
 8001482:	783b      	ldrb	r3, [r7, #0]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4b13      	ldr	r3, [pc, #76]	@ (80014d4 <HAL_GPIO_EXTI_Callback+0x78>)
 8001488:	701a      	strb	r2, [r3, #0]
		txData[1] = presVal;
 800148a:	4b13      	ldr	r3, [pc, #76]	@ (80014d8 <HAL_GPIO_EXTI_Callback+0x7c>)
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	4610      	mov	r0, r2
 8001492:	4619      	mov	r1, r3
 8001494:	f7ff fa8e 	bl	80009b4 <__aeabi_d2uiz>
 8001498:	4603      	mov	r3, r0
 800149a:	b2da      	uxtb	r2, r3
 800149c:	4b0d      	ldr	r3, [pc, #52]	@ (80014d4 <HAL_GPIO_EXTI_Callback+0x78>)
 800149e:	705a      	strb	r2, [r3, #1]
		txData[2] = altitudeVal;
 80014a0:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <HAL_GPIO_EXTI_Callback+0x80>)
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a6:	4610      	mov	r0, r2
 80014a8:	4619      	mov	r1, r3
 80014aa:	f7ff fa83 	bl	80009b4 <__aeabi_d2uiz>
 80014ae:	4603      	mov	r3, r0
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <HAL_GPIO_EXTI_Callback+0x78>)
 80014b4:	709a      	strb	r2, [r3, #2]
	}

	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData, &TxMailbox);
 80014b6:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <HAL_GPIO_EXTI_Callback+0x84>)
 80014b8:	4a06      	ldr	r2, [pc, #24]	@ (80014d4 <HAL_GPIO_EXTI_Callback+0x78>)
 80014ba:	490a      	ldr	r1, [pc, #40]	@ (80014e4 <HAL_GPIO_EXTI_Callback+0x88>)
 80014bc:	480a      	ldr	r0, [pc, #40]	@ (80014e8 <HAL_GPIO_EXTI_Callback+0x8c>)
 80014be:	f000 fe35 	bl	800212c <HAL_CAN_AddTxMessage>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40020000 	.word	0x40020000
 80014d0:	20000090 	.word	0x20000090
 80014d4:	20000060 	.word	0x20000060
 80014d8:	20000098 	.word	0x20000098
 80014dc:	200000a0 	.word	0x200000a0
 80014e0:	20000070 	.word	0x20000070
 80014e4:	2000002c 	.word	0x2000002c
 80014e8:	200000a8 	.word	0x200000a8

080014ec <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rxData);
 80014f4:	4b08      	ldr	r3, [pc, #32]	@ (8001518 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80014f6:	4a09      	ldr	r2, [pc, #36]	@ (800151c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80014f8:	2100      	movs	r1, #0
 80014fa:	4809      	ldr	r0, [pc, #36]	@ (8001520 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80014fc:	f000 fee6 	bl	80022cc <HAL_CAN_GetRxMessage>

	if(RxHeader.DLC == 2)
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d102      	bne.n	800150e <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		status = 1;
 8001508:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800150a:	2201      	movs	r2, #1
 800150c:	701a      	strb	r2, [r3, #0]
	}

}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000068 	.word	0x20000068
 800151c:	20000044 	.word	0x20000044
 8001520:	200000a8 	.word	0x200000a8
 8001524:	20000074 	.word	0x20000074

08001528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800152e:	f000 fb47 	bl	8001bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001532:	f000 f89f 	bl	8001674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001536:	f000 f989 	bl	800184c <MX_GPIO_Init>
  MX_CAN1_Init();
 800153a:	f000 f905 	bl	8001748 <MX_CAN1_Init>
  MX_I2C1_Init();
 800153e:	f000 f957 	bl	80017f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 8001542:	4841      	ldr	r0, [pc, #260]	@ (8001648 <main+0x120>)
 8001544:	f000 fdae 	bl	80020a4 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001548:	2102      	movs	r1, #2
 800154a:	483f      	ldr	r0, [pc, #252]	@ (8001648 <main+0x120>)
 800154c:	f000 ffe0 	bl	8002510 <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 3;
 8001550:	4b3e      	ldr	r3, [pc, #248]	@ (800164c <main+0x124>)
 8001552:	2203      	movs	r2, #3
 8001554:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8001556:	4b3d      	ldr	r3, [pc, #244]	@ (800164c <main+0x124>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 800155c:	4b3b      	ldr	r3, [pc, #236]	@ (800164c <main+0x124>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x407;
 8001562:	4b3a      	ldr	r3, [pc, #232]	@ (800164c <main+0x124>)
 8001564:	f240 4207 	movw	r2, #1031	@ 0x407
 8001568:	601a      	str	r2, [r3, #0]


  status1 = BMP180_check_sensor();
 800156a:	f7ff fc9d 	bl	8000ea8 <BMP180_check_sensor>
 800156e:	4603      	mov	r3, r0
 8001570:	461a      	mov	r2, r3
 8001572:	4b37      	ldr	r3, [pc, #220]	@ (8001650 <main+0x128>)
 8001574:	701a      	strb	r2, [r3, #0]
  status2 = BMP180_chip_ID();
 8001576:	f7ff fc05 	bl	8000d84 <BMP180_chip_ID>
 800157a:	4603      	mov	r3, r0
 800157c:	461a      	mov	r2, r3
 800157e:	4b35      	ldr	r3, [pc, #212]	@ (8001654 <main+0x12c>)
 8001580:	701a      	strb	r2, [r3, #0]
  BMP180_getCalib_data(calibrationData);
 8001582:	4835      	ldr	r0, [pc, #212]	@ (8001658 <main+0x130>)
 8001584:	f7ff fc1a 	bl	8000dbc <BMP180_getCalib_data>
//			  HAL_Delay(rxData[0]);
//		  }
//		  status = 0;
//	  }

	  tempVal = BMP180_read_rtemp();
 8001588:	f7ff fccc 	bl	8000f24 <BMP180_read_rtemp>
 800158c:	eef0 7a40 	vmov.f32	s15, s0
 8001590:	4b32      	ldr	r3, [pc, #200]	@ (800165c <main+0x134>)
 8001592:	edc3 7a00 	vstr	s15, [r3]

	  // Turn to bar
	  presVal = BMP180_read_rpres(SINGLE_TIME);
 8001596:	2000      	movs	r0, #0
 8001598:	f7ff fda2 	bl	80010e0 <BMP180_read_rpres>
 800159c:	eeb0 7a40 	vmov.f32	s14, s0
 80015a0:	eef0 7a60 	vmov.f32	s15, s1
 80015a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001660 <main+0x138>)
 80015a6:	ed83 7b00 	vstr	d7, [r3]

	  altitudeVal = 44330 * (1 - pow(presVal/101325,1/5255));
 80015aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001660 <main+0x138>)
 80015ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015b0:	a321      	add	r3, pc, #132	@ (adr r3, 8001638 <main+0x110>)
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	f7ff f8ed 	bl	8000794 <__aeabi_ddiv>
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	4b29      	ldr	r3, [pc, #164]	@ (8001664 <main+0x13c>)
 80015c0:	f04f 0000 	mov.w	r0, #0
 80015c4:	4927      	ldr	r1, [pc, #156]	@ (8001664 <main+0x13c>)
 80015c6:	f7fe fe03 	bl	80001d0 <__aeabi_dsub>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	a31b      	add	r3, pc, #108	@ (adr r3, 8001640 <main+0x118>)
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	f7fe ffb2 	bl	8000540 <__aeabi_dmul>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4921      	ldr	r1, [pc, #132]	@ (8001668 <main+0x140>)
 80015e2:	e9c1 2300 	strd	r2, r3, [r1]

	  txData[0] = tempVal;
 80015e6:	4b1d      	ldr	r3, [pc, #116]	@ (800165c <main+0x134>)
 80015e8:	edd3 7a00 	vldr	s15, [r3]
 80015ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015f0:	edc7 7a01 	vstr	s15, [r7, #4]
 80015f4:	793b      	ldrb	r3, [r7, #4]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	4b1c      	ldr	r3, [pc, #112]	@ (800166c <main+0x144>)
 80015fa:	701a      	strb	r2, [r3, #0]
	  txData[1] = presVal;
 80015fc:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <main+0x138>)
 80015fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	f7ff f9d5 	bl	80009b4 <__aeabi_d2uiz>
 800160a:	4603      	mov	r3, r0
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b17      	ldr	r3, [pc, #92]	@ (800166c <main+0x144>)
 8001610:	705a      	strb	r2, [r3, #1]
	  txData[2] = altitudeVal;
 8001612:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <main+0x140>)
 8001614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	f7ff f9ca 	bl	80009b4 <__aeabi_d2uiz>
 8001620:	4603      	mov	r3, r0
 8001622:	b2da      	uxtb	r2, r3
 8001624:	4b11      	ldr	r3, [pc, #68]	@ (800166c <main+0x144>)
 8001626:	709a      	strb	r2, [r3, #2]

	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData, &TxMailbox);
 8001628:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <main+0x148>)
 800162a:	4a10      	ldr	r2, [pc, #64]	@ (800166c <main+0x144>)
 800162c:	4907      	ldr	r1, [pc, #28]	@ (800164c <main+0x124>)
 800162e:	4806      	ldr	r0, [pc, #24]	@ (8001648 <main+0x120>)
 8001630:	f000 fd7c 	bl	800212c <HAL_CAN_AddTxMessage>
	  tempVal = BMP180_read_rtemp();
 8001634:	bf00      	nop
 8001636:	e7a7      	b.n	8001588 <main+0x60>
 8001638:	00000000 	.word	0x00000000
 800163c:	40f8bcd0 	.word	0x40f8bcd0
 8001640:	00000000 	.word	0x00000000
 8001644:	40e5a540 	.word	0x40e5a540
 8001648:	200000a8 	.word	0x200000a8
 800164c:	2000002c 	.word	0x2000002c
 8001650:	20000075 	.word	0x20000075
 8001654:	20000076 	.word	0x20000076
 8001658:	20000078 	.word	0x20000078
 800165c:	20000090 	.word	0x20000090
 8001660:	20000098 	.word	0x20000098
 8001664:	3ff00000 	.word	0x3ff00000
 8001668:	200000a0 	.word	0x200000a0
 800166c:	20000060 	.word	0x20000060
 8001670:	20000070 	.word	0x20000070

08001674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b094      	sub	sp, #80	@ 0x50
 8001678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167a:	f107 0320 	add.w	r3, r7, #32
 800167e:	2230      	movs	r2, #48	@ 0x30
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f003 fa68 	bl	8004b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	4b28      	ldr	r3, [pc, #160]	@ (8001740 <SystemClock_Config+0xcc>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a0:	4a27      	ldr	r2, [pc, #156]	@ (8001740 <SystemClock_Config+0xcc>)
 80016a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016a8:	4b25      	ldr	r3, [pc, #148]	@ (8001740 <SystemClock_Config+0xcc>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b4:	2300      	movs	r3, #0
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	4b22      	ldr	r3, [pc, #136]	@ (8001744 <SystemClock_Config+0xd0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a21      	ldr	r2, [pc, #132]	@ (8001744 <SystemClock_Config+0xd0>)
 80016be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001744 <SystemClock_Config+0xd0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d0:	2301      	movs	r3, #1
 80016d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016da:	2302      	movs	r3, #2
 80016dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016e4:	2304      	movs	r3, #4
 80016e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016e8:	23a8      	movs	r3, #168	@ 0xa8
 80016ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016ec:	2302      	movs	r3, #2
 80016ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016f0:	2304      	movs	r3, #4
 80016f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f4:	f107 0320 	add.w	r3, r7, #32
 80016f8:	4618      	mov	r0, r3
 80016fa:	f002 fda9 	bl	8004250 <HAL_RCC_OscConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001704:	f000 f91a 	bl	800193c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001708:	230f      	movs	r3, #15
 800170a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800170c:	2302      	movs	r3, #2
 800170e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001714:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800171a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800171e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	2105      	movs	r1, #5
 8001726:	4618      	mov	r0, r3
 8001728:	f003 f80a 	bl	8004740 <HAL_RCC_ClockConfig>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001732:	f000 f903 	bl	800193c <Error_Handler>
  }
}
 8001736:	bf00      	nop
 8001738:	3750      	adds	r7, #80	@ 0x50
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800
 8001744:	40007000 	.word	0x40007000

08001748 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	@ 0x28
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800174e:	4b26      	ldr	r3, [pc, #152]	@ (80017e8 <MX_CAN1_Init+0xa0>)
 8001750:	4a26      	ldr	r2, [pc, #152]	@ (80017ec <MX_CAN1_Init+0xa4>)
 8001752:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 15;
 8001754:	4b24      	ldr	r3, [pc, #144]	@ (80017e8 <MX_CAN1_Init+0xa0>)
 8001756:	220f      	movs	r2, #15
 8001758:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800175a:	4b23      	ldr	r3, [pc, #140]	@ (80017e8 <MX_CAN1_Init+0xa0>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001760:	4b21      	ldr	r3, [pc, #132]	@ (80017e8 <MX_CAN1_Init+0xa0>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001766:	4b20      	ldr	r3, [pc, #128]	@ (80017e8 <MX_CAN1_Init+0xa0>)
 8001768:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800176c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800176e:	4b1e      	ldr	r3, [pc, #120]	@ (80017e8 <MX_CAN1_Init+0xa0>)
 8001770:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8001774:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001776:	4b1c      	ldr	r3, [pc, #112]	@ (80017e8 <MX_CAN1_Init+0xa0>)
 8001778:	2200      	movs	r2, #0
 800177a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800177c:	4b1a      	ldr	r3, [pc, #104]	@ (80017e8 <MX_CAN1_Init+0xa0>)
 800177e:	2200      	movs	r2, #0
 8001780:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001782:	4b19      	ldr	r3, [pc, #100]	@ (80017e8 <MX_CAN1_Init+0xa0>)
 8001784:	2200      	movs	r2, #0
 8001786:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001788:	4b17      	ldr	r3, [pc, #92]	@ (80017e8 <MX_CAN1_Init+0xa0>)
 800178a:	2200      	movs	r2, #0
 800178c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800178e:	4b16      	ldr	r3, [pc, #88]	@ (80017e8 <MX_CAN1_Init+0xa0>)
 8001790:	2200      	movs	r2, #0
 8001792:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001794:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <MX_CAN1_Init+0xa0>)
 8001796:	2200      	movs	r2, #0
 8001798:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800179a:	4813      	ldr	r0, [pc, #76]	@ (80017e8 <MX_CAN1_Init+0xa0>)
 800179c:	f000 faa6 	bl	8001cec <HAL_CAN_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80017a6:	f000 f8c9 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef FilterConfig;

  FilterConfig.FilterActivation=CAN_FILTER_ENABLE;
 80017aa:	2301      	movs	r3, #1
 80017ac:	623b      	str	r3, [r7, #32]
  FilterConfig.FilterBank = 18;
 80017ae:	2312      	movs	r3, #18
 80017b0:	617b      	str	r3, [r7, #20]
  FilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
  FilterConfig.FilterIdHigh = 0x303 << 5;
 80017b6:	f246 0360 	movw	r3, #24672	@ 0x6060
 80017ba:	603b      	str	r3, [r7, #0]
  FilterConfig.FilterIdLow = 0x0000;
 80017bc:	2300      	movs	r3, #0
 80017be:	607b      	str	r3, [r7, #4]
  FilterConfig.FilterMaskIdHigh = 0x303 << 5;
 80017c0:	f246 0360 	movw	r3, #24672	@ 0x6060
 80017c4:	60bb      	str	r3, [r7, #8]
  FilterConfig.FilterMaskIdLow = 0x0000;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
  FilterConfig.FilterMode=CAN_FILTERMODE_IDMASK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61bb      	str	r3, [r7, #24]
  FilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 80017ce:	2301      	movs	r3, #1
 80017d0:	61fb      	str	r3, [r7, #28]
  FilterConfig.SlaveStartFilterBank = 20;
 80017d2:	2314      	movs	r3, #20
 80017d4:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &FilterConfig);
 80017d6:	463b      	mov	r3, r7
 80017d8:	4619      	mov	r1, r3
 80017da:	4803      	ldr	r0, [pc, #12]	@ (80017e8 <MX_CAN1_Init+0xa0>)
 80017dc:	f000 fb82 	bl	8001ee4 <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN1_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	3728      	adds	r7, #40	@ 0x28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	200000a8 	.word	0x200000a8
 80017ec:	40006400 	.word	0x40006400

080017f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017f4:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <MX_I2C1_Init+0x50>)
 80017f6:	4a13      	ldr	r2, [pc, #76]	@ (8001844 <MX_I2C1_Init+0x54>)
 80017f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017fa:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <MX_I2C1_Init+0x50>)
 80017fc:	4a12      	ldr	r2, [pc, #72]	@ (8001848 <MX_I2C1_Init+0x58>)
 80017fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001800:	4b0f      	ldr	r3, [pc, #60]	@ (8001840 <MX_I2C1_Init+0x50>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001806:	4b0e      	ldr	r3, [pc, #56]	@ (8001840 <MX_I2C1_Init+0x50>)
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800180c:	4b0c      	ldr	r3, [pc, #48]	@ (8001840 <MX_I2C1_Init+0x50>)
 800180e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001812:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001814:	4b0a      	ldr	r3, [pc, #40]	@ (8001840 <MX_I2C1_Init+0x50>)
 8001816:	2200      	movs	r2, #0
 8001818:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800181a:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <MX_I2C1_Init+0x50>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001820:	4b07      	ldr	r3, [pc, #28]	@ (8001840 <MX_I2C1_Init+0x50>)
 8001822:	2200      	movs	r2, #0
 8001824:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001826:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <MX_I2C1_Init+0x50>)
 8001828:	2200      	movs	r2, #0
 800182a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800182c:	4804      	ldr	r0, [pc, #16]	@ (8001840 <MX_I2C1_Init+0x50>)
 800182e:	f001 fbbd 	bl	8002fac <HAL_I2C_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001838:	f000 f880 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200000d0 	.word	0x200000d0
 8001844:	40005400 	.word	0x40005400
 8001848:	000186a0 	.word	0x000186a0

0800184c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	@ 0x28
 8001850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	4b32      	ldr	r3, [pc, #200]	@ (8001930 <MX_GPIO_Init+0xe4>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	4a31      	ldr	r2, [pc, #196]	@ (8001930 <MX_GPIO_Init+0xe4>)
 800186c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001870:	6313      	str	r3, [r2, #48]	@ 0x30
 8001872:	4b2f      	ldr	r3, [pc, #188]	@ (8001930 <MX_GPIO_Init+0xe4>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	4b2b      	ldr	r3, [pc, #172]	@ (8001930 <MX_GPIO_Init+0xe4>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	4a2a      	ldr	r2, [pc, #168]	@ (8001930 <MX_GPIO_Init+0xe4>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6313      	str	r3, [r2, #48]	@ 0x30
 800188e:	4b28      	ldr	r3, [pc, #160]	@ (8001930 <MX_GPIO_Init+0xe4>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	4b24      	ldr	r3, [pc, #144]	@ (8001930 <MX_GPIO_Init+0xe4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	4a23      	ldr	r2, [pc, #140]	@ (8001930 <MX_GPIO_Init+0xe4>)
 80018a4:	f043 0308 	orr.w	r3, r3, #8
 80018a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018aa:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <MX_GPIO_Init+0xe4>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001930 <MX_GPIO_Init+0xe4>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	4a1c      	ldr	r2, [pc, #112]	@ (8001930 <MX_GPIO_Init+0xe4>)
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001930 <MX_GPIO_Init+0xe4>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80018d2:	2200      	movs	r2, #0
 80018d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018d8:	4816      	ldr	r0, [pc, #88]	@ (8001934 <MX_GPIO_Init+0xe8>)
 80018da:	f001 fb35 	bl	8002f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018de:	2301      	movs	r3, #1
 80018e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018e2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4619      	mov	r1, r3
 80018f2:	4811      	ldr	r0, [pc, #68]	@ (8001938 <MX_GPIO_Init+0xec>)
 80018f4:	f001 f974 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80018f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fe:	2301      	movs	r3, #1
 8001900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	4808      	ldr	r0, [pc, #32]	@ (8001934 <MX_GPIO_Init+0xe8>)
 8001912:	f001 f965 	bl	8002be0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2100      	movs	r1, #0
 800191a:	2006      	movs	r0, #6
 800191c:	f001 f929 	bl	8002b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001920:	2006      	movs	r0, #6
 8001922:	f001 f942 	bl	8002baa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001926:	bf00      	nop
 8001928:	3728      	adds	r7, #40	@ 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	40020c00 	.word	0x40020c00
 8001938:	40020000 	.word	0x40020000

0800193c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001940:	b672      	cpsid	i
}
 8001942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <Error_Handler+0x8>

08001948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	4b10      	ldr	r3, [pc, #64]	@ (8001994 <HAL_MspInit+0x4c>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001956:	4a0f      	ldr	r2, [pc, #60]	@ (8001994 <HAL_MspInit+0x4c>)
 8001958:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800195c:	6453      	str	r3, [r2, #68]	@ 0x44
 800195e:	4b0d      	ldr	r3, [pc, #52]	@ (8001994 <HAL_MspInit+0x4c>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	603b      	str	r3, [r7, #0]
 800196e:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <HAL_MspInit+0x4c>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	4a08      	ldr	r2, [pc, #32]	@ (8001994 <HAL_MspInit+0x4c>)
 8001974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001978:	6413      	str	r3, [r2, #64]	@ 0x40
 800197a:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <HAL_MspInit+0x4c>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800

08001998 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	@ 0x28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a1d      	ldr	r2, [pc, #116]	@ (8001a2c <HAL_CAN_MspInit+0x94>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d133      	bne.n	8001a22 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	4b1c      	ldr	r3, [pc, #112]	@ (8001a30 <HAL_CAN_MspInit+0x98>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001a30 <HAL_CAN_MspInit+0x98>)
 80019c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ca:	4b19      	ldr	r3, [pc, #100]	@ (8001a30 <HAL_CAN_MspInit+0x98>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b15      	ldr	r3, [pc, #84]	@ (8001a30 <HAL_CAN_MspInit+0x98>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	4a14      	ldr	r2, [pc, #80]	@ (8001a30 <HAL_CAN_MspInit+0x98>)
 80019e0:	f043 0308 	orr.w	r3, r3, #8
 80019e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e6:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <HAL_CAN_MspInit+0x98>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019f2:	2303      	movs	r3, #3
 80019f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fe:	2303      	movs	r3, #3
 8001a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a02:	2309      	movs	r3, #9
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4809      	ldr	r0, [pc, #36]	@ (8001a34 <HAL_CAN_MspInit+0x9c>)
 8001a0e:	f001 f8e7 	bl	8002be0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	2014      	movs	r0, #20
 8001a18:	f001 f8ab 	bl	8002b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001a1c:	2014      	movs	r0, #20
 8001a1e:	f001 f8c4 	bl	8002baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001a22:	bf00      	nop
 8001a24:	3728      	adds	r7, #40	@ 0x28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40006400 	.word	0x40006400
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020c00 	.word	0x40020c00

08001a38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	@ 0x28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a19      	ldr	r2, [pc, #100]	@ (8001abc <HAL_I2C_MspInit+0x84>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d12b      	bne.n	8001ab2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	4b18      	ldr	r3, [pc, #96]	@ (8001ac0 <HAL_I2C_MspInit+0x88>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	4a17      	ldr	r2, [pc, #92]	@ (8001ac0 <HAL_I2C_MspInit+0x88>)
 8001a64:	f043 0302 	orr.w	r3, r3, #2
 8001a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ac0 <HAL_I2C_MspInit+0x88>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a76:	23c0      	movs	r3, #192	@ 0xc0
 8001a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a7a:	2312      	movs	r3, #18
 8001a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a86:	2304      	movs	r3, #4
 8001a88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	4619      	mov	r1, r3
 8001a90:	480c      	ldr	r0, [pc, #48]	@ (8001ac4 <HAL_I2C_MspInit+0x8c>)
 8001a92:	f001 f8a5 	bl	8002be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <HAL_I2C_MspInit+0x88>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	4a08      	ldr	r2, [pc, #32]	@ (8001ac0 <HAL_I2C_MspInit+0x88>)
 8001aa0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa6:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_I2C_MspInit+0x88>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ab2:	bf00      	nop
 8001ab4:	3728      	adds	r7, #40	@ 0x28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40005400 	.word	0x40005400
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40020400 	.word	0x40020400

08001ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <NMI_Handler+0x4>

08001ad0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <HardFault_Handler+0x4>

08001ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <MemManage_Handler+0x4>

08001ae0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <BusFault_Handler+0x4>

08001ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <UsageFault_Handler+0x4>

08001af0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b1e:	f000 f8a1 	bl	8001c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f001 fa26 	bl	8002f7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b38:	4802      	ldr	r0, [pc, #8]	@ (8001b44 <CAN1_RX0_IRQHandler+0x10>)
 8001b3a:	f000 fd0f 	bl	800255c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200000a8 	.word	0x200000a8

08001b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b4c:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <SystemInit+0x20>)
 8001b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b52:	4a05      	ldr	r2, [pc, #20]	@ (8001b68 <SystemInit+0x20>)
 8001b54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ba4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b70:	f7ff ffea 	bl	8001b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b74:	480c      	ldr	r0, [pc, #48]	@ (8001ba8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b76:	490d      	ldr	r1, [pc, #52]	@ (8001bac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b78:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b7c:	e002      	b.n	8001b84 <LoopCopyDataInit>

08001b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b82:	3304      	adds	r3, #4

08001b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b88:	d3f9      	bcc.n	8001b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b8c:	4c0a      	ldr	r4, [pc, #40]	@ (8001bb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b90:	e001      	b.n	8001b96 <LoopFillZerobss>

08001b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b94:	3204      	adds	r2, #4

08001b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b98:	d3fb      	bcc.n	8001b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b9a:	f002 ffe5 	bl	8004b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b9e:	f7ff fcc3 	bl	8001528 <main>
  bx  lr    
 8001ba2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ba4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001bb0:	08004bf0 	.word	0x08004bf0
  ldr r2, =_sbss
 8001bb4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001bb8:	20000128 	.word	0x20000128

08001bbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bbc:	e7fe      	b.n	8001bbc <ADC_IRQHandler>
	...

08001bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c00 <HAL_Init+0x40>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c00 <HAL_Init+0x40>)
 8001bca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <HAL_Init+0x40>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001c00 <HAL_Init+0x40>)
 8001bd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bdc:	4b08      	ldr	r3, [pc, #32]	@ (8001c00 <HAL_Init+0x40>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a07      	ldr	r2, [pc, #28]	@ (8001c00 <HAL_Init+0x40>)
 8001be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001be6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be8:	2003      	movs	r0, #3
 8001bea:	f000 ffb7 	bl	8002b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bee:	200f      	movs	r0, #15
 8001bf0:	f000 f808 	bl	8001c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf4:	f7ff fea8 	bl	8001948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023c00 	.word	0x40023c00

08001c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c0c:	4b12      	ldr	r3, [pc, #72]	@ (8001c58 <HAL_InitTick+0x54>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b12      	ldr	r3, [pc, #72]	@ (8001c5c <HAL_InitTick+0x58>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	4619      	mov	r1, r3
 8001c16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 ffcf 	bl	8002bc6 <HAL_SYSTICK_Config>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00e      	b.n	8001c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b0f      	cmp	r3, #15
 8001c36:	d80a      	bhi.n	8001c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	f000 ff97 	bl	8002b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c44:	4a06      	ldr	r2, [pc, #24]	@ (8001c60 <HAL_InitTick+0x5c>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e000      	b.n	8001c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	20000008 	.word	0x20000008
 8001c60:	20000004 	.word	0x20000004

08001c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c68:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <HAL_IncTick+0x20>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <HAL_IncTick+0x24>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4413      	add	r3, r2
 8001c74:	4a04      	ldr	r2, [pc, #16]	@ (8001c88 <HAL_IncTick+0x24>)
 8001c76:	6013      	str	r3, [r2, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000008 	.word	0x20000008
 8001c88:	20000124 	.word	0x20000124

08001c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c90:	4b03      	ldr	r3, [pc, #12]	@ (8001ca0 <HAL_GetTick+0x14>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000124 	.word	0x20000124

08001ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cac:	f7ff ffee 	bl	8001c8c <HAL_GetTick>
 8001cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbc:	d005      	beq.n	8001cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <HAL_Delay+0x44>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cca:	bf00      	nop
 8001ccc:	f7ff ffde 	bl	8001c8c <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d8f7      	bhi.n	8001ccc <HAL_Delay+0x28>
  {
  }
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000008 	.word	0x20000008

08001cec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e0ed      	b.n	8001eda <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d102      	bne.n	8001d10 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff fe44 	bl	8001998 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d20:	f7ff ffb4 	bl	8001c8c <HAL_GetTick>
 8001d24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d26:	e012      	b.n	8001d4e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d28:	f7ff ffb0 	bl	8001c8c <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b0a      	cmp	r3, #10
 8001d34:	d90b      	bls.n	8001d4e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2205      	movs	r2, #5
 8001d46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e0c5      	b.n	8001eda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0e5      	beq.n	8001d28 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0202 	bic.w	r2, r2, #2
 8001d6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d6c:	f7ff ff8e 	bl	8001c8c <HAL_GetTick>
 8001d70:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d72:	e012      	b.n	8001d9a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d74:	f7ff ff8a 	bl	8001c8c <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b0a      	cmp	r3, #10
 8001d80:	d90b      	bls.n	8001d9a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d86:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2205      	movs	r2, #5
 8001d92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e09f      	b.n	8001eda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1e5      	bne.n	8001d74 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	7e1b      	ldrb	r3, [r3, #24]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d108      	bne.n	8001dc2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	e007      	b.n	8001dd2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001dd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	7e5b      	ldrb	r3, [r3, #25]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d108      	bne.n	8001dec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	e007      	b.n	8001dfc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001dfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	7e9b      	ldrb	r3, [r3, #26]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d108      	bne.n	8001e16 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0220 	orr.w	r2, r2, #32
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	e007      	b.n	8001e26 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0220 	bic.w	r2, r2, #32
 8001e24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	7edb      	ldrb	r3, [r3, #27]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d108      	bne.n	8001e40 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0210 	bic.w	r2, r2, #16
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e007      	b.n	8001e50 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0210 	orr.w	r2, r2, #16
 8001e4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	7f1b      	ldrb	r3, [r3, #28]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d108      	bne.n	8001e6a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0208 	orr.w	r2, r2, #8
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	e007      	b.n	8001e7a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0208 	bic.w	r2, r2, #8
 8001e78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	7f5b      	ldrb	r3, [r3, #29]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d108      	bne.n	8001e94 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f042 0204 	orr.w	r2, r2, #4
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	e007      	b.n	8001ea4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0204 	bic.w	r2, r2, #4
 8001ea2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	ea42 0103 	orr.w	r1, r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	1e5a      	subs	r2, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001efa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001efc:	7cfb      	ldrb	r3, [r7, #19]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d003      	beq.n	8001f0a <HAL_CAN_ConfigFilter+0x26>
 8001f02:	7cfb      	ldrb	r3, [r7, #19]
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	f040 80be 	bne.w	8002086 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001f0a:	4b65      	ldr	r3, [pc, #404]	@ (80020a0 <HAL_CAN_ConfigFilter+0x1bc>)
 8001f0c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f14:	f043 0201 	orr.w	r2, r3, #1
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f24:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f38:	021b      	lsls	r3, r3, #8
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	f003 031f 	and.w	r3, r3, #31
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	401a      	ands	r2, r3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d123      	bne.n	8001fb4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	401a      	ands	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f8e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	3248      	adds	r2, #72	@ 0x48
 8001f94:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fa8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001faa:	6979      	ldr	r1, [r7, #20]
 8001fac:	3348      	adds	r3, #72	@ 0x48
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	440b      	add	r3, r1
 8001fb2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d122      	bne.n	8002002 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001fdc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	3248      	adds	r2, #72	@ 0x48
 8001fe2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ff6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ff8:	6979      	ldr	r1, [r7, #20]
 8001ffa:	3348      	adds	r3, #72	@ 0x48
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	440b      	add	r3, r1
 8002000:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d109      	bne.n	800201e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	43db      	mvns	r3, r3
 8002014:	401a      	ands	r2, r3
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800201c:	e007      	b.n	800202e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	431a      	orrs	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d109      	bne.n	800204a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	43db      	mvns	r3, r3
 8002040:	401a      	ands	r2, r3
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002048:	e007      	b.n	800205a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	431a      	orrs	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d107      	bne.n	8002072 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	431a      	orrs	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002078:	f023 0201 	bic.w	r2, r3, #1
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	e006      	b.n	8002094 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
  }
}
 8002094:	4618      	mov	r0, r3
 8002096:	371c      	adds	r7, #28
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	40006400 	.word	0x40006400

080020a4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d12e      	bne.n	8002116 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2202      	movs	r2, #2
 80020bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0201 	bic.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020d0:	f7ff fddc 	bl	8001c8c <HAL_GetTick>
 80020d4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020d6:	e012      	b.n	80020fe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020d8:	f7ff fdd8 	bl	8001c8c <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b0a      	cmp	r3, #10
 80020e4:	d90b      	bls.n	80020fe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2205      	movs	r2, #5
 80020f6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e012      	b.n	8002124 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1e5      	bne.n	80020d8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	e006      	b.n	8002124 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
  }
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	@ 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002140:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800214a:	7ffb      	ldrb	r3, [r7, #31]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d003      	beq.n	8002158 <HAL_CAN_AddTxMessage+0x2c>
 8002150:	7ffb      	ldrb	r3, [r7, #31]
 8002152:	2b02      	cmp	r3, #2
 8002154:	f040 80ad 	bne.w	80022b2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10a      	bne.n	8002178 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002168:	2b00      	cmp	r3, #0
 800216a:	d105      	bne.n	8002178 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 8095 	beq.w	80022a2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	0e1b      	lsrs	r3, r3, #24
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002182:	2201      	movs	r2, #1
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	409a      	lsls	r2, r3
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10d      	bne.n	80021b0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800219e:	68f9      	ldr	r1, [r7, #12]
 80021a0:	6809      	ldr	r1, [r1, #0]
 80021a2:	431a      	orrs	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	3318      	adds	r3, #24
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	440b      	add	r3, r1
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	e00f      	b.n	80021d0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021ba:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021c0:	68f9      	ldr	r1, [r7, #12]
 80021c2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80021c4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	3318      	adds	r3, #24
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	440b      	add	r3, r1
 80021ce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6819      	ldr	r1, [r3, #0]
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	3318      	adds	r3, #24
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	440b      	add	r3, r1
 80021e0:	3304      	adds	r3, #4
 80021e2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	7d1b      	ldrb	r3, [r3, #20]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d111      	bne.n	8002210 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	3318      	adds	r3, #24
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	4413      	add	r3, r2
 80021f8:	3304      	adds	r3, #4
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	6811      	ldr	r1, [r2, #0]
 8002200:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	3318      	adds	r3, #24
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	440b      	add	r3, r1
 800220c:	3304      	adds	r3, #4
 800220e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3307      	adds	r3, #7
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	061a      	lsls	r2, r3, #24
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3306      	adds	r3, #6
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	041b      	lsls	r3, r3, #16
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3305      	adds	r3, #5
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	021b      	lsls	r3, r3, #8
 800222a:	4313      	orrs	r3, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	3204      	adds	r2, #4
 8002230:	7812      	ldrb	r2, [r2, #0]
 8002232:	4610      	mov	r0, r2
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	6811      	ldr	r1, [r2, #0]
 8002238:	ea43 0200 	orr.w	r2, r3, r0
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	440b      	add	r3, r1
 8002242:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002246:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3303      	adds	r3, #3
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	061a      	lsls	r2, r3, #24
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3302      	adds	r3, #2
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	041b      	lsls	r3, r3, #16
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3301      	adds	r3, #1
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	4313      	orrs	r3, r2
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	7812      	ldrb	r2, [r2, #0]
 8002268:	4610      	mov	r0, r2
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	6811      	ldr	r1, [r2, #0]
 800226e:	ea43 0200 	orr.w	r2, r3, r0
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	440b      	add	r3, r1
 8002278:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800227c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	3318      	adds	r3, #24
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	4413      	add	r3, r2
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	6811      	ldr	r1, [r2, #0]
 8002290:	f043 0201 	orr.w	r2, r3, #1
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	3318      	adds	r3, #24
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	440b      	add	r3, r1
 800229c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	e00e      	b.n	80022c0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e006      	b.n	80022c0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
  }
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3724      	adds	r7, #36	@ 0x24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80022cc:	b480      	push	{r7}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
 80022d8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80022e2:	7dfb      	ldrb	r3, [r7, #23]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d003      	beq.n	80022f0 <HAL_CAN_GetRxMessage+0x24>
 80022e8:	7dfb      	ldrb	r3, [r7, #23]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	f040 8103 	bne.w	80024f6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10e      	bne.n	8002314 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d116      	bne.n	8002332 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002308:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0f7      	b.n	8002504 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d107      	bne.n	8002332 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002326:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e0e8      	b.n	8002504 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	331b      	adds	r3, #27
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	4413      	add	r3, r2
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0204 	and.w	r2, r3, #4
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10c      	bne.n	800236a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	331b      	adds	r3, #27
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	4413      	add	r3, r2
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	0d5b      	lsrs	r3, r3, #21
 8002360:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	e00b      	b.n	8002382 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	331b      	adds	r3, #27
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	4413      	add	r3, r2
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	08db      	lsrs	r3, r3, #3
 800237a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	331b      	adds	r3, #27
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	4413      	add	r3, r2
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0202 	and.w	r2, r3, #2
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	331b      	adds	r3, #27
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	4413      	add	r3, r2
 80023a4:	3304      	adds	r3, #4
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2208      	movs	r2, #8
 80023b4:	611a      	str	r2, [r3, #16]
 80023b6:	e00b      	b.n	80023d0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	331b      	adds	r3, #27
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	4413      	add	r3, r2
 80023c4:	3304      	adds	r3, #4
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 020f 	and.w	r2, r3, #15
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	331b      	adds	r3, #27
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	4413      	add	r3, r2
 80023dc:	3304      	adds	r3, #4
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	331b      	adds	r3, #27
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	4413      	add	r3, r2
 80023f4:	3304      	adds	r3, #4
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	0c1b      	lsrs	r3, r3, #16
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	4413      	add	r3, r2
 800240a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	4413      	add	r3, r2
 8002420:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	0a1a      	lsrs	r2, r3, #8
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	3301      	adds	r3, #1
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	4413      	add	r3, r2
 800243a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	0c1a      	lsrs	r2, r3, #16
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	3302      	adds	r3, #2
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	4413      	add	r3, r2
 8002454:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	0e1a      	lsrs	r2, r3, #24
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	3303      	adds	r3, #3
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	4413      	add	r3, r2
 800246e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	3304      	adds	r3, #4
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	4413      	add	r3, r2
 8002486:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	0a1a      	lsrs	r2, r3, #8
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	3305      	adds	r3, #5
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	4413      	add	r3, r2
 80024a0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	0c1a      	lsrs	r2, r3, #16
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	3306      	adds	r3, #6
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	0e1a      	lsrs	r2, r3, #24
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	3307      	adds	r3, #7
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d108      	bne.n	80024e2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0220 	orr.w	r2, r2, #32
 80024de:	60da      	str	r2, [r3, #12]
 80024e0:	e007      	b.n	80024f2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0220 	orr.w	r2, r2, #32
 80024f0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	e006      	b.n	8002504 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
  }
}
 8002504:	4618      	mov	r0, r3
 8002506:	371c      	adds	r7, #28
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002520:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d002      	beq.n	800252e <HAL_CAN_ActivateNotification+0x1e>
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d109      	bne.n	8002542 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6959      	ldr	r1, [r3, #20]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	e006      	b.n	8002550 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002546:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
  }
}
 8002550:	4618      	mov	r0, r3
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	@ 0x28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002564:	2300      	movs	r3, #0
 8002566:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d07c      	beq.n	800269c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d023      	beq.n	80025f4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2201      	movs	r2, #1
 80025b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f983 	bl	80028ca <HAL_CAN_TxMailbox0CompleteCallback>
 80025c4:	e016      	b.n	80025f4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d004      	beq.n	80025da <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80025d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80025d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80025d8:	e00c      	b.n	80025f4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	f003 0308 	and.w	r3, r3, #8
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d004      	beq.n	80025ee <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80025e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ec:	e002      	b.n	80025f4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f989 	bl	8002906 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d024      	beq.n	8002648 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002606:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f963 	bl	80028de <HAL_CAN_TxMailbox1CompleteCallback>
 8002618:	e016      	b.n	8002648 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002620:	2b00      	cmp	r3, #0
 8002622:	d004      	beq.n	800262e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002626:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800262a:	627b      	str	r3, [r7, #36]	@ 0x24
 800262c:	e00c      	b.n	8002648 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002634:	2b00      	cmp	r3, #0
 8002636:	d004      	beq.n	8002642 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800263e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002640:	e002      	b.n	8002648 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f969 	bl	800291a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d024      	beq.n	800269c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800265a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f943 	bl	80028f2 <HAL_CAN_TxMailbox2CompleteCallback>
 800266c:	e016      	b.n	800269c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d004      	beq.n	8002682 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800267e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002680:	e00c      	b.n	800269c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d004      	beq.n	8002696 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002692:	627b      	str	r3, [r7, #36]	@ 0x24
 8002694:	e002      	b.n	800269c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f949 	bl	800292e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00c      	beq.n	80026c0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d007      	beq.n	80026c0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80026b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026b6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2210      	movs	r2, #16
 80026be:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00b      	beq.n	80026e2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d006      	beq.n	80026e2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2208      	movs	r2, #8
 80026da:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f930 	bl	8002942 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d009      	beq.n	8002700 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7fe fef6 	bl	80014ec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00c      	beq.n	8002724 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	2b00      	cmp	r3, #0
 8002712:	d007      	beq.n	8002724 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002716:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800271a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2210      	movs	r2, #16
 8002722:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	f003 0320 	and.w	r3, r3, #32
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d006      	beq.n	8002746 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2208      	movs	r2, #8
 800273e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f912 	bl	800296a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	f003 0310 	and.w	r3, r3, #16
 800274c:	2b00      	cmp	r3, #0
 800274e:	d009      	beq.n	8002764 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f8f9 	bl	8002956 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00b      	beq.n	8002786 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f003 0310 	and.w	r3, r3, #16
 8002774:	2b00      	cmp	r3, #0
 8002776:	d006      	beq.n	8002786 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2210      	movs	r2, #16
 800277e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f8fc 	bl	800297e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00b      	beq.n	80027a8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d006      	beq.n	80027a8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2208      	movs	r2, #8
 80027a0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f8f5 	bl	8002992 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d07b      	beq.n	80028aa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d072      	beq.n	80028a2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d008      	beq.n	80027f4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ee:	f043 0302 	orr.w	r3, r3, #2
 80027f2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d008      	beq.n	8002810 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280a:	f043 0304 	orr.w	r3, r3, #4
 800280e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002816:	2b00      	cmp	r3, #0
 8002818:	d043      	beq.n	80028a2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002820:	2b00      	cmp	r3, #0
 8002822:	d03e      	beq.n	80028a2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800282a:	2b60      	cmp	r3, #96	@ 0x60
 800282c:	d02b      	beq.n	8002886 <HAL_CAN_IRQHandler+0x32a>
 800282e:	2b60      	cmp	r3, #96	@ 0x60
 8002830:	d82e      	bhi.n	8002890 <HAL_CAN_IRQHandler+0x334>
 8002832:	2b50      	cmp	r3, #80	@ 0x50
 8002834:	d022      	beq.n	800287c <HAL_CAN_IRQHandler+0x320>
 8002836:	2b50      	cmp	r3, #80	@ 0x50
 8002838:	d82a      	bhi.n	8002890 <HAL_CAN_IRQHandler+0x334>
 800283a:	2b40      	cmp	r3, #64	@ 0x40
 800283c:	d019      	beq.n	8002872 <HAL_CAN_IRQHandler+0x316>
 800283e:	2b40      	cmp	r3, #64	@ 0x40
 8002840:	d826      	bhi.n	8002890 <HAL_CAN_IRQHandler+0x334>
 8002842:	2b30      	cmp	r3, #48	@ 0x30
 8002844:	d010      	beq.n	8002868 <HAL_CAN_IRQHandler+0x30c>
 8002846:	2b30      	cmp	r3, #48	@ 0x30
 8002848:	d822      	bhi.n	8002890 <HAL_CAN_IRQHandler+0x334>
 800284a:	2b10      	cmp	r3, #16
 800284c:	d002      	beq.n	8002854 <HAL_CAN_IRQHandler+0x2f8>
 800284e:	2b20      	cmp	r3, #32
 8002850:	d005      	beq.n	800285e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002852:	e01d      	b.n	8002890 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002856:	f043 0308 	orr.w	r3, r3, #8
 800285a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800285c:	e019      	b.n	8002892 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800285e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002860:	f043 0310 	orr.w	r3, r3, #16
 8002864:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002866:	e014      	b.n	8002892 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286a:	f043 0320 	orr.w	r3, r3, #32
 800286e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002870:	e00f      	b.n	8002892 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002874:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002878:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800287a:	e00a      	b.n	8002892 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800287c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002882:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002884:	e005      	b.n	8002892 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800288c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800288e:	e000      	b.n	8002892 <HAL_CAN_IRQHandler+0x336>
            break;
 8002890:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	699a      	ldr	r2, [r3, #24]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80028a0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2204      	movs	r2, #4
 80028a8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d008      	beq.n	80028c2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f872 	bl	80029a6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80028c2:	bf00      	nop
 80028c4:	3728      	adds	r7, #40	@ 0x28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002a00 <__NVIC_SetPriorityGrouping+0x44>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029d8:	4013      	ands	r3, r2
 80029da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ee:	4a04      	ldr	r2, [pc, #16]	@ (8002a00 <__NVIC_SetPriorityGrouping+0x44>)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	60d3      	str	r3, [r2, #12]
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	e000ed00 	.word	0xe000ed00

08002a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a08:	4b04      	ldr	r3, [pc, #16]	@ (8002a1c <__NVIC_GetPriorityGrouping+0x18>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	0a1b      	lsrs	r3, r3, #8
 8002a0e:	f003 0307 	and.w	r3, r3, #7
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	db0b      	blt.n	8002a4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	f003 021f 	and.w	r2, r3, #31
 8002a38:	4907      	ldr	r1, [pc, #28]	@ (8002a58 <__NVIC_EnableIRQ+0x38>)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	2001      	movs	r0, #1
 8002a42:	fa00 f202 	lsl.w	r2, r0, r2
 8002a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000e100 	.word	0xe000e100

08002a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	6039      	str	r1, [r7, #0]
 8002a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	db0a      	blt.n	8002a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	490c      	ldr	r1, [pc, #48]	@ (8002aa8 <__NVIC_SetPriority+0x4c>)
 8002a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7a:	0112      	lsls	r2, r2, #4
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	440b      	add	r3, r1
 8002a80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a84:	e00a      	b.n	8002a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	4908      	ldr	r1, [pc, #32]	@ (8002aac <__NVIC_SetPriority+0x50>)
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	3b04      	subs	r3, #4
 8002a94:	0112      	lsls	r2, r2, #4
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	440b      	add	r3, r1
 8002a9a:	761a      	strb	r2, [r3, #24]
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	e000e100 	.word	0xe000e100
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b089      	sub	sp, #36	@ 0x24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f1c3 0307 	rsb	r3, r3, #7
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	bf28      	it	cs
 8002ace:	2304      	movcs	r3, #4
 8002ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	2b06      	cmp	r3, #6
 8002ad8:	d902      	bls.n	8002ae0 <NVIC_EncodePriority+0x30>
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	3b03      	subs	r3, #3
 8002ade:	e000      	b.n	8002ae2 <NVIC_EncodePriority+0x32>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43da      	mvns	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	401a      	ands	r2, r3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af8:	f04f 31ff 	mov.w	r1, #4294967295
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	fa01 f303 	lsl.w	r3, r1, r3
 8002b02:	43d9      	mvns	r1, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b08:	4313      	orrs	r3, r2
         );
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3724      	adds	r7, #36	@ 0x24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b28:	d301      	bcc.n	8002b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e00f      	b.n	8002b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b58 <SysTick_Config+0x40>)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b36:	210f      	movs	r1, #15
 8002b38:	f04f 30ff 	mov.w	r0, #4294967295
 8002b3c:	f7ff ff8e 	bl	8002a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b40:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <SysTick_Config+0x40>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b46:	4b04      	ldr	r3, [pc, #16]	@ (8002b58 <SysTick_Config+0x40>)
 8002b48:	2207      	movs	r2, #7
 8002b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	e000e010 	.word	0xe000e010

08002b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff ff29 	bl	80029bc <__NVIC_SetPriorityGrouping>
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b086      	sub	sp, #24
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	4603      	mov	r3, r0
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	607a      	str	r2, [r7, #4]
 8002b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b84:	f7ff ff3e 	bl	8002a04 <__NVIC_GetPriorityGrouping>
 8002b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	6978      	ldr	r0, [r7, #20]
 8002b90:	f7ff ff8e 	bl	8002ab0 <NVIC_EncodePriority>
 8002b94:	4602      	mov	r2, r0
 8002b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff ff5d 	bl	8002a5c <__NVIC_SetPriority>
}
 8002ba2:	bf00      	nop
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ff31 	bl	8002a20 <__NVIC_EnableIRQ>
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff ffa2 	bl	8002b18 <SysTick_Config>
 8002bd4:	4603      	mov	r3, r0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b089      	sub	sp, #36	@ 0x24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	e16b      	b.n	8002ed4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	f040 815a 	bne.w	8002ece <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d005      	beq.n	8002c32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d130      	bne.n	8002c94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c68:	2201      	movs	r2, #1
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 0201 	and.w	r2, r3, #1
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d017      	beq.n	8002cd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	2203      	movs	r2, #3
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d123      	bne.n	8002d24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	08da      	lsrs	r2, r3, #3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3208      	adds	r2, #8
 8002ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	220f      	movs	r2, #15
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	08da      	lsrs	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3208      	adds	r2, #8
 8002d1e:	69b9      	ldr	r1, [r7, #24]
 8002d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	2203      	movs	r2, #3
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0203 	and.w	r2, r3, #3
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80b4 	beq.w	8002ece <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	4b60      	ldr	r3, [pc, #384]	@ (8002eec <HAL_GPIO_Init+0x30c>)
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6e:	4a5f      	ldr	r2, [pc, #380]	@ (8002eec <HAL_GPIO_Init+0x30c>)
 8002d70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d74:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d76:	4b5d      	ldr	r3, [pc, #372]	@ (8002eec <HAL_GPIO_Init+0x30c>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d82:	4a5b      	ldr	r2, [pc, #364]	@ (8002ef0 <HAL_GPIO_Init+0x310>)
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	089b      	lsrs	r3, r3, #2
 8002d88:	3302      	adds	r3, #2
 8002d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	220f      	movs	r2, #15
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a52      	ldr	r2, [pc, #328]	@ (8002ef4 <HAL_GPIO_Init+0x314>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d02b      	beq.n	8002e06 <HAL_GPIO_Init+0x226>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a51      	ldr	r2, [pc, #324]	@ (8002ef8 <HAL_GPIO_Init+0x318>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d025      	beq.n	8002e02 <HAL_GPIO_Init+0x222>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a50      	ldr	r2, [pc, #320]	@ (8002efc <HAL_GPIO_Init+0x31c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d01f      	beq.n	8002dfe <HAL_GPIO_Init+0x21e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a4f      	ldr	r2, [pc, #316]	@ (8002f00 <HAL_GPIO_Init+0x320>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d019      	beq.n	8002dfa <HAL_GPIO_Init+0x21a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a4e      	ldr	r2, [pc, #312]	@ (8002f04 <HAL_GPIO_Init+0x324>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d013      	beq.n	8002df6 <HAL_GPIO_Init+0x216>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a4d      	ldr	r2, [pc, #308]	@ (8002f08 <HAL_GPIO_Init+0x328>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00d      	beq.n	8002df2 <HAL_GPIO_Init+0x212>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a4c      	ldr	r2, [pc, #304]	@ (8002f0c <HAL_GPIO_Init+0x32c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d007      	beq.n	8002dee <HAL_GPIO_Init+0x20e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a4b      	ldr	r2, [pc, #300]	@ (8002f10 <HAL_GPIO_Init+0x330>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d101      	bne.n	8002dea <HAL_GPIO_Init+0x20a>
 8002de6:	2307      	movs	r3, #7
 8002de8:	e00e      	b.n	8002e08 <HAL_GPIO_Init+0x228>
 8002dea:	2308      	movs	r3, #8
 8002dec:	e00c      	b.n	8002e08 <HAL_GPIO_Init+0x228>
 8002dee:	2306      	movs	r3, #6
 8002df0:	e00a      	b.n	8002e08 <HAL_GPIO_Init+0x228>
 8002df2:	2305      	movs	r3, #5
 8002df4:	e008      	b.n	8002e08 <HAL_GPIO_Init+0x228>
 8002df6:	2304      	movs	r3, #4
 8002df8:	e006      	b.n	8002e08 <HAL_GPIO_Init+0x228>
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e004      	b.n	8002e08 <HAL_GPIO_Init+0x228>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e002      	b.n	8002e08 <HAL_GPIO_Init+0x228>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <HAL_GPIO_Init+0x228>
 8002e06:	2300      	movs	r3, #0
 8002e08:	69fa      	ldr	r2, [r7, #28]
 8002e0a:	f002 0203 	and.w	r2, r2, #3
 8002e0e:	0092      	lsls	r2, r2, #2
 8002e10:	4093      	lsls	r3, r2
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e18:	4935      	ldr	r1, [pc, #212]	@ (8002ef0 <HAL_GPIO_Init+0x310>)
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	089b      	lsrs	r3, r3, #2
 8002e1e:	3302      	adds	r3, #2
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e26:	4b3b      	ldr	r3, [pc, #236]	@ (8002f14 <HAL_GPIO_Init+0x334>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e4a:	4a32      	ldr	r2, [pc, #200]	@ (8002f14 <HAL_GPIO_Init+0x334>)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e50:	4b30      	ldr	r3, [pc, #192]	@ (8002f14 <HAL_GPIO_Init+0x334>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e74:	4a27      	ldr	r2, [pc, #156]	@ (8002f14 <HAL_GPIO_Init+0x334>)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e7a:	4b26      	ldr	r3, [pc, #152]	@ (8002f14 <HAL_GPIO_Init+0x334>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	43db      	mvns	r3, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4013      	ands	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8002f14 <HAL_GPIO_Init+0x334>)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f14 <HAL_GPIO_Init+0x334>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	43db      	mvns	r3, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ec8:	4a12      	ldr	r2, [pc, #72]	@ (8002f14 <HAL_GPIO_Init+0x334>)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	61fb      	str	r3, [r7, #28]
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	2b0f      	cmp	r3, #15
 8002ed8:	f67f ae90 	bls.w	8002bfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	3724      	adds	r7, #36	@ 0x24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40013800 	.word	0x40013800
 8002ef4:	40020000 	.word	0x40020000
 8002ef8:	40020400 	.word	0x40020400
 8002efc:	40020800 	.word	0x40020800
 8002f00:	40020c00 	.word	0x40020c00
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40021400 	.word	0x40021400
 8002f0c:	40021800 	.word	0x40021800
 8002f10:	40021c00 	.word	0x40021c00
 8002f14:	40013c00 	.word	0x40013c00

08002f18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	887b      	ldrh	r3, [r7, #2]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
 8002f34:	e001      	b.n	8002f3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f36:	2300      	movs	r3, #0
 8002f38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	807b      	strh	r3, [r7, #2]
 8002f54:	4613      	mov	r3, r2
 8002f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f58:	787b      	ldrb	r3, [r7, #1]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f5e:	887a      	ldrh	r2, [r7, #2]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f64:	e003      	b.n	8002f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f66:	887b      	ldrh	r3, [r7, #2]
 8002f68:	041a      	lsls	r2, r3, #16
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	619a      	str	r2, [r3, #24]
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
	...

08002f7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f86:	4b08      	ldr	r3, [pc, #32]	@ (8002fa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	88fb      	ldrh	r3, [r7, #6]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d006      	beq.n	8002fa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f92:	4a05      	ldr	r2, [pc, #20]	@ (8002fa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f94:	88fb      	ldrh	r3, [r7, #6]
 8002f96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fe fa5e 	bl	800145c <HAL_GPIO_EXTI_Callback>
  }
}
 8002fa0:	bf00      	nop
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40013c00 	.word	0x40013c00

08002fac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e12b      	b.n	8003216 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fe fd30 	bl	8001a38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2224      	movs	r2, #36	@ 0x24
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0201 	bic.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ffe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800300e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003010:	f001 fd8e 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 8003014:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	4a81      	ldr	r2, [pc, #516]	@ (8003220 <HAL_I2C_Init+0x274>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d807      	bhi.n	8003030 <HAL_I2C_Init+0x84>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4a80      	ldr	r2, [pc, #512]	@ (8003224 <HAL_I2C_Init+0x278>)
 8003024:	4293      	cmp	r3, r2
 8003026:	bf94      	ite	ls
 8003028:	2301      	movls	r3, #1
 800302a:	2300      	movhi	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	e006      	b.n	800303e <HAL_I2C_Init+0x92>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4a7d      	ldr	r2, [pc, #500]	@ (8003228 <HAL_I2C_Init+0x27c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	bf94      	ite	ls
 8003038:	2301      	movls	r3, #1
 800303a:	2300      	movhi	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e0e7      	b.n	8003216 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4a78      	ldr	r2, [pc, #480]	@ (800322c <HAL_I2C_Init+0x280>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	0c9b      	lsrs	r3, r3, #18
 8003050:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	430a      	orrs	r2, r1
 8003064:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	4a6a      	ldr	r2, [pc, #424]	@ (8003220 <HAL_I2C_Init+0x274>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d802      	bhi.n	8003080 <HAL_I2C_Init+0xd4>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	3301      	adds	r3, #1
 800307e:	e009      	b.n	8003094 <HAL_I2C_Init+0xe8>
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003086:	fb02 f303 	mul.w	r3, r2, r3
 800308a:	4a69      	ldr	r2, [pc, #420]	@ (8003230 <HAL_I2C_Init+0x284>)
 800308c:	fba2 2303 	umull	r2, r3, r2, r3
 8003090:	099b      	lsrs	r3, r3, #6
 8003092:	3301      	adds	r3, #1
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	430b      	orrs	r3, r1
 800309a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80030a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	495c      	ldr	r1, [pc, #368]	@ (8003220 <HAL_I2C_Init+0x274>)
 80030b0:	428b      	cmp	r3, r1
 80030b2:	d819      	bhi.n	80030e8 <HAL_I2C_Init+0x13c>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1e59      	subs	r1, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c2:	1c59      	adds	r1, r3, #1
 80030c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030c8:	400b      	ands	r3, r1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00a      	beq.n	80030e4 <HAL_I2C_Init+0x138>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1e59      	subs	r1, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80030dc:	3301      	adds	r3, #1
 80030de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e2:	e051      	b.n	8003188 <HAL_I2C_Init+0x1dc>
 80030e4:	2304      	movs	r3, #4
 80030e6:	e04f      	b.n	8003188 <HAL_I2C_Init+0x1dc>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d111      	bne.n	8003114 <HAL_I2C_Init+0x168>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	1e58      	subs	r0, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6859      	ldr	r1, [r3, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	440b      	add	r3, r1
 80030fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003102:	3301      	adds	r3, #1
 8003104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003108:	2b00      	cmp	r3, #0
 800310a:	bf0c      	ite	eq
 800310c:	2301      	moveq	r3, #1
 800310e:	2300      	movne	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	e012      	b.n	800313a <HAL_I2C_Init+0x18e>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1e58      	subs	r0, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6859      	ldr	r1, [r3, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	0099      	lsls	r1, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	fbb0 f3f3 	udiv	r3, r0, r3
 800312a:	3301      	adds	r3, #1
 800312c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003130:	2b00      	cmp	r3, #0
 8003132:	bf0c      	ite	eq
 8003134:	2301      	moveq	r3, #1
 8003136:	2300      	movne	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_I2C_Init+0x196>
 800313e:	2301      	movs	r3, #1
 8003140:	e022      	b.n	8003188 <HAL_I2C_Init+0x1dc>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10e      	bne.n	8003168 <HAL_I2C_Init+0x1bc>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	1e58      	subs	r0, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6859      	ldr	r1, [r3, #4]
 8003152:	460b      	mov	r3, r1
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	440b      	add	r3, r1
 8003158:	fbb0 f3f3 	udiv	r3, r0, r3
 800315c:	3301      	adds	r3, #1
 800315e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003162:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003166:	e00f      	b.n	8003188 <HAL_I2C_Init+0x1dc>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	1e58      	subs	r0, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6859      	ldr	r1, [r3, #4]
 8003170:	460b      	mov	r3, r1
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	0099      	lsls	r1, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	fbb0 f3f3 	udiv	r3, r0, r3
 800317e:	3301      	adds	r3, #1
 8003180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003184:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	6809      	ldr	r1, [r1, #0]
 800318c:	4313      	orrs	r3, r2
 800318e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69da      	ldr	r2, [r3, #28]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6911      	ldr	r1, [r2, #16]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68d2      	ldr	r2, [r2, #12]
 80031c2:	4311      	orrs	r1, r2
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	430b      	orrs	r3, r1
 80031ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	000186a0 	.word	0x000186a0
 8003224:	001e847f 	.word	0x001e847f
 8003228:	003d08ff 	.word	0x003d08ff
 800322c:	431bde83 	.word	0x431bde83
 8003230:	10624dd3 	.word	0x10624dd3

08003234 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af02      	add	r7, sp, #8
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	4608      	mov	r0, r1
 800323e:	4611      	mov	r1, r2
 8003240:	461a      	mov	r2, r3
 8003242:	4603      	mov	r3, r0
 8003244:	817b      	strh	r3, [r7, #10]
 8003246:	460b      	mov	r3, r1
 8003248:	813b      	strh	r3, [r7, #8]
 800324a:	4613      	mov	r3, r2
 800324c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800324e:	f7fe fd1d 	bl	8001c8c <HAL_GetTick>
 8003252:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b20      	cmp	r3, #32
 800325e:	f040 80d9 	bne.w	8003414 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	2319      	movs	r3, #25
 8003268:	2201      	movs	r2, #1
 800326a:	496d      	ldr	r1, [pc, #436]	@ (8003420 <HAL_I2C_Mem_Write+0x1ec>)
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 fdb9 	bl	8003de4 <I2C_WaitOnFlagUntilTimeout>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003278:	2302      	movs	r3, #2
 800327a:	e0cc      	b.n	8003416 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_I2C_Mem_Write+0x56>
 8003286:	2302      	movs	r3, #2
 8003288:	e0c5      	b.n	8003416 <HAL_I2C_Mem_Write+0x1e2>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b01      	cmp	r3, #1
 800329e:	d007      	beq.n	80032b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2221      	movs	r2, #33	@ 0x21
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2240      	movs	r2, #64	@ 0x40
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a3a      	ldr	r2, [r7, #32]
 80032da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80032e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4a4d      	ldr	r2, [pc, #308]	@ (8003424 <HAL_I2C_Mem_Write+0x1f0>)
 80032f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032f2:	88f8      	ldrh	r0, [r7, #6]
 80032f4:	893a      	ldrh	r2, [r7, #8]
 80032f6:	8979      	ldrh	r1, [r7, #10]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	9301      	str	r3, [sp, #4]
 80032fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	4603      	mov	r3, r0
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 fbf0 	bl	8003ae8 <I2C_RequestMemoryWrite>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d052      	beq.n	80033b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e081      	b.n	8003416 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 fe7e 	bl	8004018 <I2C_WaitOnTXEFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00d      	beq.n	800333e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	2b04      	cmp	r3, #4
 8003328:	d107      	bne.n	800333a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003338:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e06b      	b.n	8003416 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003342:	781a      	ldrb	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	3b01      	subs	r3, #1
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b04      	cmp	r3, #4
 800337a:	d11b      	bne.n	80033b4 <HAL_I2C_Mem_Write+0x180>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003380:	2b00      	cmp	r3, #0
 8003382:	d017      	beq.n	80033b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003388:	781a      	ldrb	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1aa      	bne.n	8003312 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 fe71 	bl	80040a8 <I2C_WaitOnBTFFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00d      	beq.n	80033e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d107      	bne.n	80033e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e016      	b.n	8003416 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	e000      	b.n	8003416 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003414:	2302      	movs	r3, #2
  }
}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	00100002 	.word	0x00100002
 8003424:	ffff0000 	.word	0xffff0000

08003428 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08c      	sub	sp, #48	@ 0x30
 800342c:	af02      	add	r7, sp, #8
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	4608      	mov	r0, r1
 8003432:	4611      	mov	r1, r2
 8003434:	461a      	mov	r2, r3
 8003436:	4603      	mov	r3, r0
 8003438:	817b      	strh	r3, [r7, #10]
 800343a:	460b      	mov	r3, r1
 800343c:	813b      	strh	r3, [r7, #8]
 800343e:	4613      	mov	r3, r2
 8003440:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003442:	f7fe fc23 	bl	8001c8c <HAL_GetTick>
 8003446:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b20      	cmp	r3, #32
 8003452:	f040 8214 	bne.w	800387e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	2319      	movs	r3, #25
 800345c:	2201      	movs	r2, #1
 800345e:	497b      	ldr	r1, [pc, #492]	@ (800364c <HAL_I2C_Mem_Read+0x224>)
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 fcbf 	bl	8003de4 <I2C_WaitOnFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800346c:	2302      	movs	r3, #2
 800346e:	e207      	b.n	8003880 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003476:	2b01      	cmp	r3, #1
 8003478:	d101      	bne.n	800347e <HAL_I2C_Mem_Read+0x56>
 800347a:	2302      	movs	r3, #2
 800347c:	e200      	b.n	8003880 <HAL_I2C_Mem_Read+0x458>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b01      	cmp	r3, #1
 8003492:	d007      	beq.n	80034a4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2222      	movs	r2, #34	@ 0x22
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2240      	movs	r2, #64	@ 0x40
 80034c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80034d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003650 <HAL_I2C_Mem_Read+0x228>)
 80034e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034e6:	88f8      	ldrh	r0, [r7, #6]
 80034e8:	893a      	ldrh	r2, [r7, #8]
 80034ea:	8979      	ldrh	r1, [r7, #10]
 80034ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ee:	9301      	str	r3, [sp, #4]
 80034f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	4603      	mov	r3, r0
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 fb8c 	bl	8003c14 <I2C_RequestMemoryRead>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e1bc      	b.n	8003880 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800350a:	2b00      	cmp	r3, #0
 800350c:	d113      	bne.n	8003536 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350e:	2300      	movs	r3, #0
 8003510:	623b      	str	r3, [r7, #32]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	623b      	str	r3, [r7, #32]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	623b      	str	r3, [r7, #32]
 8003522:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	e190      	b.n	8003858 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800353a:	2b01      	cmp	r3, #1
 800353c:	d11b      	bne.n	8003576 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800354c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800354e:	2300      	movs	r3, #0
 8003550:	61fb      	str	r3, [r7, #28]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	61fb      	str	r3, [r7, #28]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	61fb      	str	r3, [r7, #28]
 8003562:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	e170      	b.n	8003858 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800357a:	2b02      	cmp	r3, #2
 800357c:	d11b      	bne.n	80035b6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800358c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800359c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800359e:	2300      	movs	r3, #0
 80035a0:	61bb      	str	r3, [r7, #24]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	61bb      	str	r3, [r7, #24]
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	e150      	b.n	8003858 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80035cc:	e144      	b.n	8003858 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	f200 80f1 	bhi.w	80037ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d123      	bne.n	8003628 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 fda7 	bl	8004138 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e145      	b.n	8003880 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691a      	ldr	r2, [r3, #16]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003626:	e117      	b.n	8003858 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800362c:	2b02      	cmp	r3, #2
 800362e:	d14e      	bne.n	80036ce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003636:	2200      	movs	r2, #0
 8003638:	4906      	ldr	r1, [pc, #24]	@ (8003654 <HAL_I2C_Mem_Read+0x22c>)
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 fbd2 	bl	8003de4 <I2C_WaitOnFlagUntilTimeout>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d008      	beq.n	8003658 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e11a      	b.n	8003880 <HAL_I2C_Mem_Read+0x458>
 800364a:	bf00      	nop
 800364c:	00100002 	.word	0x00100002
 8003650:	ffff0000 	.word	0xffff0000
 8003654:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003666:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691a      	ldr	r2, [r3, #16]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003690:	b29b      	uxth	r3, r3
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b6:	3b01      	subs	r3, #1
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036cc:	e0c4      	b.n	8003858 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d4:	2200      	movs	r2, #0
 80036d6:	496c      	ldr	r1, [pc, #432]	@ (8003888 <HAL_I2C_Mem_Read+0x460>)
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 fb83 	bl	8003de4 <I2C_WaitOnFlagUntilTimeout>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e0cb      	b.n	8003880 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800372a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003730:	2200      	movs	r2, #0
 8003732:	4955      	ldr	r1, [pc, #340]	@ (8003888 <HAL_I2C_Mem_Read+0x460>)
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 fb55 	bl	8003de4 <I2C_WaitOnFlagUntilTimeout>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e09d      	b.n	8003880 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003752:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037b8:	e04e      	b.n	8003858 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 fcba 	bl	8004138 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e058      	b.n	8003880 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	2b04      	cmp	r3, #4
 800380c:	d124      	bne.n	8003858 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003812:	2b03      	cmp	r3, #3
 8003814:	d107      	bne.n	8003826 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003824:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385c:	2b00      	cmp	r3, #0
 800385e:	f47f aeb6 	bne.w	80035ce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	e000      	b.n	8003880 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800387e:	2302      	movs	r3, #2
  }
}
 8003880:	4618      	mov	r0, r3
 8003882:	3728      	adds	r7, #40	@ 0x28
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	00010004 	.word	0x00010004

0800388c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08a      	sub	sp, #40	@ 0x28
 8003890:	af02      	add	r7, sp, #8
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	607a      	str	r2, [r7, #4]
 8003896:	603b      	str	r3, [r7, #0]
 8003898:	460b      	mov	r3, r1
 800389a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800389c:	f7fe f9f6 	bl	8001c8c <HAL_GetTick>
 80038a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	f040 8111 	bne.w	8003ad6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	2319      	movs	r3, #25
 80038ba:	2201      	movs	r2, #1
 80038bc:	4988      	ldr	r1, [pc, #544]	@ (8003ae0 <HAL_I2C_IsDeviceReady+0x254>)
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 fa90 	bl	8003de4 <I2C_WaitOnFlagUntilTimeout>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80038ca:	2302      	movs	r3, #2
 80038cc:	e104      	b.n	8003ad8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_I2C_IsDeviceReady+0x50>
 80038d8:	2302      	movs	r3, #2
 80038da:	e0fd      	b.n	8003ad8 <HAL_I2C_IsDeviceReady+0x24c>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d007      	beq.n	8003902 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f042 0201 	orr.w	r2, r2, #1
 8003900:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003910:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2224      	movs	r2, #36	@ 0x24
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4a70      	ldr	r2, [pc, #448]	@ (8003ae4 <HAL_I2C_IsDeviceReady+0x258>)
 8003924:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003934:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2200      	movs	r2, #0
 800393e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 fa4e 	bl	8003de4 <I2C_WaitOnFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00d      	beq.n	800396a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003958:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800395c:	d103      	bne.n	8003966 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003964:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e0b6      	b.n	8003ad8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800396a:	897b      	ldrh	r3, [r7, #10]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	461a      	mov	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003978:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800397a:	f7fe f987 	bl	8001c8c <HAL_GetTick>
 800397e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b02      	cmp	r3, #2
 800398c:	bf0c      	ite	eq
 800398e:	2301      	moveq	r3, #1
 8003990:	2300      	movne	r3, #0
 8003992:	b2db      	uxtb	r3, r3
 8003994:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039a4:	bf0c      	ite	eq
 80039a6:	2301      	moveq	r3, #1
 80039a8:	2300      	movne	r3, #0
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80039ae:	e025      	b.n	80039fc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039b0:	f7fe f96c 	bl	8001c8c <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d302      	bcc.n	80039c6 <HAL_I2C_IsDeviceReady+0x13a>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d103      	bne.n	80039ce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	22a0      	movs	r2, #160	@ 0xa0
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b02      	cmp	r3, #2
 80039da:	bf0c      	ite	eq
 80039dc:	2301      	moveq	r3, #1
 80039de:	2300      	movne	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039f2:	bf0c      	ite	eq
 80039f4:	2301      	moveq	r3, #1
 80039f6:	2300      	movne	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a06:	d005      	beq.n	8003a14 <HAL_I2C_IsDeviceReady+0x188>
 8003a08:	7dfb      	ldrb	r3, [r7, #23]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d102      	bne.n	8003a14 <HAL_I2C_IsDeviceReady+0x188>
 8003a0e:	7dbb      	ldrb	r3, [r7, #22]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0cd      	beq.n	80039b0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d129      	bne.n	8003a7e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a38:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	613b      	str	r3, [r7, #16]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	613b      	str	r3, [r7, #16]
 8003a4e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	2319      	movs	r3, #25
 8003a56:	2201      	movs	r2, #1
 8003a58:	4921      	ldr	r1, [pc, #132]	@ (8003ae0 <HAL_I2C_IsDeviceReady+0x254>)
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 f9c2 	bl	8003de4 <I2C_WaitOnFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e036      	b.n	8003ad8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e02c      	b.n	8003ad8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a8c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a96:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	2319      	movs	r3, #25
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	490f      	ldr	r1, [pc, #60]	@ (8003ae0 <HAL_I2C_IsDeviceReady+0x254>)
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 f99e 	bl	8003de4 <I2C_WaitOnFlagUntilTimeout>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e012      	b.n	8003ad8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	f4ff af32 	bcc.w	8003926 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e000      	b.n	8003ad8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003ad6:	2302      	movs	r3, #2
  }
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3720      	adds	r7, #32
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	00100002 	.word	0x00100002
 8003ae4:	ffff0000 	.word	0xffff0000

08003ae8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af02      	add	r7, sp, #8
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	4608      	mov	r0, r1
 8003af2:	4611      	mov	r1, r2
 8003af4:	461a      	mov	r2, r3
 8003af6:	4603      	mov	r3, r0
 8003af8:	817b      	strh	r3, [r7, #10]
 8003afa:	460b      	mov	r3, r1
 8003afc:	813b      	strh	r3, [r7, #8]
 8003afe:	4613      	mov	r3, r2
 8003b00:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 f960 	bl	8003de4 <I2C_WaitOnFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00d      	beq.n	8003b46 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b38:	d103      	bne.n	8003b42 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b40:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e05f      	b.n	8003c06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b46:	897b      	ldrh	r3, [r7, #10]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b58:	6a3a      	ldr	r2, [r7, #32]
 8003b5a:	492d      	ldr	r1, [pc, #180]	@ (8003c10 <I2C_RequestMemoryWrite+0x128>)
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 f9bb 	bl	8003ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e04c      	b.n	8003c06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b84:	6a39      	ldr	r1, [r7, #32]
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 fa46 	bl	8004018 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00d      	beq.n	8003bae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d107      	bne.n	8003baa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ba8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e02b      	b.n	8003c06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bae:	88fb      	ldrh	r3, [r7, #6]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d105      	bne.n	8003bc0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bb4:	893b      	ldrh	r3, [r7, #8]
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	611a      	str	r2, [r3, #16]
 8003bbe:	e021      	b.n	8003c04 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003bc0:	893b      	ldrh	r3, [r7, #8]
 8003bc2:	0a1b      	lsrs	r3, r3, #8
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bd0:	6a39      	ldr	r1, [r7, #32]
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 fa20 	bl	8004018 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00d      	beq.n	8003bfa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d107      	bne.n	8003bf6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bf4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e005      	b.n	8003c06 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bfa:	893b      	ldrh	r3, [r7, #8]
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	00010002 	.word	0x00010002

08003c14 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	4608      	mov	r0, r1
 8003c1e:	4611      	mov	r1, r2
 8003c20:	461a      	mov	r2, r3
 8003c22:	4603      	mov	r3, r0
 8003c24:	817b      	strh	r3, [r7, #10]
 8003c26:	460b      	mov	r3, r1
 8003c28:	813b      	strh	r3, [r7, #8]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c3c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f8c2 	bl	8003de4 <I2C_WaitOnFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00d      	beq.n	8003c82 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c74:	d103      	bne.n	8003c7e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c7c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e0aa      	b.n	8003dd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c82:	897b      	ldrh	r3, [r7, #10]
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	461a      	mov	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c94:	6a3a      	ldr	r2, [r7, #32]
 8003c96:	4952      	ldr	r1, [pc, #328]	@ (8003de0 <I2C_RequestMemoryRead+0x1cc>)
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 f91d 	bl	8003ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e097      	b.n	8003dd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cc0:	6a39      	ldr	r1, [r7, #32]
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 f9a8 	bl	8004018 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00d      	beq.n	8003cea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d107      	bne.n	8003ce6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ce4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e076      	b.n	8003dd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cea:	88fb      	ldrh	r3, [r7, #6]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d105      	bne.n	8003cfc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cf0:	893b      	ldrh	r3, [r7, #8]
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	611a      	str	r2, [r3, #16]
 8003cfa:	e021      	b.n	8003d40 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cfc:	893b      	ldrh	r3, [r7, #8]
 8003cfe:	0a1b      	lsrs	r3, r3, #8
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d0c:	6a39      	ldr	r1, [r7, #32]
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 f982 	bl	8004018 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00d      	beq.n	8003d36 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d107      	bne.n	8003d32 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e050      	b.n	8003dd8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d36:	893b      	ldrh	r3, [r7, #8]
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d42:	6a39      	ldr	r1, [r7, #32]
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 f967 	bl	8004018 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00d      	beq.n	8003d6c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d107      	bne.n	8003d68 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d66:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e035      	b.n	8003dd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d7a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 f82b 	bl	8003de4 <I2C_WaitOnFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00d      	beq.n	8003db0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003da2:	d103      	bne.n	8003dac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003daa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e013      	b.n	8003dd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003db0:	897b      	ldrh	r3, [r7, #10]
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	f043 0301 	orr.w	r3, r3, #1
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	6a3a      	ldr	r2, [r7, #32]
 8003dc4:	4906      	ldr	r1, [pc, #24]	@ (8003de0 <I2C_RequestMemoryRead+0x1cc>)
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 f886 	bl	8003ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e000      	b.n	8003dd8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3718      	adds	r7, #24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	00010002 	.word	0x00010002

08003de4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	4613      	mov	r3, r2
 8003df2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003df4:	e048      	b.n	8003e88 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfc:	d044      	beq.n	8003e88 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dfe:	f7fd ff45 	bl	8001c8c <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d302      	bcc.n	8003e14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d139      	bne.n	8003e88 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	0c1b      	lsrs	r3, r3, #16
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d10d      	bne.n	8003e3a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	43da      	mvns	r2, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	bf0c      	ite	eq
 8003e30:	2301      	moveq	r3, #1
 8003e32:	2300      	movne	r3, #0
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	461a      	mov	r2, r3
 8003e38:	e00c      	b.n	8003e54 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	43da      	mvns	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4013      	ands	r3, r2
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2301      	moveq	r3, #1
 8003e4e:	2300      	movne	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d116      	bne.n	8003e88 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e74:	f043 0220 	orr.w	r2, r3, #32
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e023      	b.n	8003ed0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	0c1b      	lsrs	r3, r3, #16
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d10d      	bne.n	8003eae <I2C_WaitOnFlagUntilTimeout+0xca>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	43da      	mvns	r2, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	bf0c      	ite	eq
 8003ea4:	2301      	moveq	r3, #1
 8003ea6:	2300      	movne	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	461a      	mov	r2, r3
 8003eac:	e00c      	b.n	8003ec8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	43da      	mvns	r2, r3
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	bf0c      	ite	eq
 8003ec0:	2301      	moveq	r3, #1
 8003ec2:	2300      	movne	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	79fb      	ldrb	r3, [r7, #7]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d093      	beq.n	8003df6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
 8003ee4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ee6:	e071      	b.n	8003fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ef6:	d123      	bne.n	8003f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f06:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2c:	f043 0204 	orr.w	r2, r3, #4
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e067      	b.n	8004010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f46:	d041      	beq.n	8003fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f48:	f7fd fea0 	bl	8001c8c <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d302      	bcc.n	8003f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d136      	bne.n	8003fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	0c1b      	lsrs	r3, r3, #16
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d10c      	bne.n	8003f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	43da      	mvns	r2, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4013      	ands	r3, r2
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	bf14      	ite	ne
 8003f7a:	2301      	movne	r3, #1
 8003f7c:	2300      	moveq	r3, #0
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	e00b      	b.n	8003f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	43da      	mvns	r2, r3
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf14      	ite	ne
 8003f94:	2301      	movne	r3, #1
 8003f96:	2300      	moveq	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d016      	beq.n	8003fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb8:	f043 0220 	orr.w	r2, r3, #32
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e021      	b.n	8004010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	0c1b      	lsrs	r3, r3, #16
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d10c      	bne.n	8003ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	43da      	mvns	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	bf14      	ite	ne
 8003fe8:	2301      	movne	r3, #1
 8003fea:	2300      	moveq	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	e00b      	b.n	8004008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	43da      	mvns	r2, r3
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	bf14      	ite	ne
 8004002:	2301      	movne	r3, #1
 8004004:	2300      	moveq	r3, #0
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	f47f af6d 	bne.w	8003ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004024:	e034      	b.n	8004090 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 f8e3 	bl	80041f2 <I2C_IsAcknowledgeFailed>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e034      	b.n	80040a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403c:	d028      	beq.n	8004090 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800403e:	f7fd fe25 	bl	8001c8c <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	429a      	cmp	r2, r3
 800404c:	d302      	bcc.n	8004054 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d11d      	bne.n	8004090 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800405e:	2b80      	cmp	r3, #128	@ 0x80
 8004060:	d016      	beq.n	8004090 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407c:	f043 0220 	orr.w	r2, r3, #32
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e007      	b.n	80040a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800409a:	2b80      	cmp	r3, #128	@ 0x80
 800409c:	d1c3      	bne.n	8004026 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040b4:	e034      	b.n	8004120 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f89b 	bl	80041f2 <I2C_IsAcknowledgeFailed>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e034      	b.n	8004130 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040cc:	d028      	beq.n	8004120 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ce:	f7fd fddd 	bl	8001c8c <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d302      	bcc.n	80040e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d11d      	bne.n	8004120 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d016      	beq.n	8004120 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410c:	f043 0220 	orr.w	r2, r3, #32
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e007      	b.n	8004130 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	2b04      	cmp	r3, #4
 800412c:	d1c3      	bne.n	80040b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004144:	e049      	b.n	80041da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	f003 0310 	and.w	r3, r3, #16
 8004150:	2b10      	cmp	r3, #16
 8004152:	d119      	bne.n	8004188 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f06f 0210 	mvn.w	r2, #16
 800415c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e030      	b.n	80041ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004188:	f7fd fd80 	bl	8001c8c <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	429a      	cmp	r2, r3
 8004196:	d302      	bcc.n	800419e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d11d      	bne.n	80041da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a8:	2b40      	cmp	r3, #64	@ 0x40
 80041aa:	d016      	beq.n	80041da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c6:	f043 0220 	orr.w	r2, r3, #32
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e007      	b.n	80041ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041e4:	2b40      	cmp	r3, #64	@ 0x40
 80041e6:	d1ae      	bne.n	8004146 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004208:	d11b      	bne.n	8004242 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004212:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2220      	movs	r2, #32
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422e:	f043 0204 	orr.w	r2, r3, #4
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e267      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d075      	beq.n	800435a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800426e:	4b88      	ldr	r3, [pc, #544]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 030c 	and.w	r3, r3, #12
 8004276:	2b04      	cmp	r3, #4
 8004278:	d00c      	beq.n	8004294 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800427a:	4b85      	ldr	r3, [pc, #532]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004282:	2b08      	cmp	r3, #8
 8004284:	d112      	bne.n	80042ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004286:	4b82      	ldr	r3, [pc, #520]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800428e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004292:	d10b      	bne.n	80042ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004294:	4b7e      	ldr	r3, [pc, #504]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d05b      	beq.n	8004358 <HAL_RCC_OscConfig+0x108>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d157      	bne.n	8004358 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e242      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042b4:	d106      	bne.n	80042c4 <HAL_RCC_OscConfig+0x74>
 80042b6:	4b76      	ldr	r3, [pc, #472]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a75      	ldr	r2, [pc, #468]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 80042bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	e01d      	b.n	8004300 <HAL_RCC_OscConfig+0xb0>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042cc:	d10c      	bne.n	80042e8 <HAL_RCC_OscConfig+0x98>
 80042ce:	4b70      	ldr	r3, [pc, #448]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a6f      	ldr	r2, [pc, #444]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 80042d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	4b6d      	ldr	r3, [pc, #436]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a6c      	ldr	r2, [pc, #432]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 80042e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	e00b      	b.n	8004300 <HAL_RCC_OscConfig+0xb0>
 80042e8:	4b69      	ldr	r3, [pc, #420]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a68      	ldr	r2, [pc, #416]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 80042ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	4b66      	ldr	r3, [pc, #408]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a65      	ldr	r2, [pc, #404]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 80042fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d013      	beq.n	8004330 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004308:	f7fd fcc0 	bl	8001c8c <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004310:	f7fd fcbc 	bl	8001c8c <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b64      	cmp	r3, #100	@ 0x64
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e207      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004322:	4b5b      	ldr	r3, [pc, #364]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0f0      	beq.n	8004310 <HAL_RCC_OscConfig+0xc0>
 800432e:	e014      	b.n	800435a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004330:	f7fd fcac 	bl	8001c8c <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004338:	f7fd fca8 	bl	8001c8c <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b64      	cmp	r3, #100	@ 0x64
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e1f3      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800434a:	4b51      	ldr	r3, [pc, #324]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0xe8>
 8004356:	e000      	b.n	800435a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d063      	beq.n	800442e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004366:	4b4a      	ldr	r3, [pc, #296]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00b      	beq.n	800438a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004372:	4b47      	ldr	r3, [pc, #284]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800437a:	2b08      	cmp	r3, #8
 800437c:	d11c      	bne.n	80043b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800437e:	4b44      	ldr	r3, [pc, #272]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d116      	bne.n	80043b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438a:	4b41      	ldr	r3, [pc, #260]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d005      	beq.n	80043a2 <HAL_RCC_OscConfig+0x152>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d001      	beq.n	80043a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e1c7      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4937      	ldr	r1, [pc, #220]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b6:	e03a      	b.n	800442e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d020      	beq.n	8004402 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043c0:	4b34      	ldr	r3, [pc, #208]	@ (8004494 <HAL_RCC_OscConfig+0x244>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c6:	f7fd fc61 	bl	8001c8c <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ce:	f7fd fc5d 	bl	8001c8c <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e1a8      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ec:	4b28      	ldr	r3, [pc, #160]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4925      	ldr	r1, [pc, #148]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	600b      	str	r3, [r1, #0]
 8004400:	e015      	b.n	800442e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004402:	4b24      	ldr	r3, [pc, #144]	@ (8004494 <HAL_RCC_OscConfig+0x244>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004408:	f7fd fc40 	bl	8001c8c <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004410:	f7fd fc3c 	bl	8001c8c <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e187      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004422:	4b1b      	ldr	r3, [pc, #108]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d036      	beq.n	80044a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d016      	beq.n	8004470 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004442:	4b15      	ldr	r3, [pc, #84]	@ (8004498 <HAL_RCC_OscConfig+0x248>)
 8004444:	2201      	movs	r2, #1
 8004446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004448:	f7fd fc20 	bl	8001c8c <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004450:	f7fd fc1c 	bl	8001c8c <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e167      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004462:	4b0b      	ldr	r3, [pc, #44]	@ (8004490 <HAL_RCC_OscConfig+0x240>)
 8004464:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0f0      	beq.n	8004450 <HAL_RCC_OscConfig+0x200>
 800446e:	e01b      	b.n	80044a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004470:	4b09      	ldr	r3, [pc, #36]	@ (8004498 <HAL_RCC_OscConfig+0x248>)
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004476:	f7fd fc09 	bl	8001c8c <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800447c:	e00e      	b.n	800449c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800447e:	f7fd fc05 	bl	8001c8c <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d907      	bls.n	800449c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e150      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
 8004490:	40023800 	.word	0x40023800
 8004494:	42470000 	.word	0x42470000
 8004498:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800449c:	4b88      	ldr	r3, [pc, #544]	@ (80046c0 <HAL_RCC_OscConfig+0x470>)
 800449e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1ea      	bne.n	800447e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 8097 	beq.w	80045e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044b6:	2300      	movs	r3, #0
 80044b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ba:	4b81      	ldr	r3, [pc, #516]	@ (80046c0 <HAL_RCC_OscConfig+0x470>)
 80044bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10f      	bne.n	80044e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c6:	2300      	movs	r3, #0
 80044c8:	60bb      	str	r3, [r7, #8]
 80044ca:	4b7d      	ldr	r3, [pc, #500]	@ (80046c0 <HAL_RCC_OscConfig+0x470>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ce:	4a7c      	ldr	r2, [pc, #496]	@ (80046c0 <HAL_RCC_OscConfig+0x470>)
 80044d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80044d6:	4b7a      	ldr	r3, [pc, #488]	@ (80046c0 <HAL_RCC_OscConfig+0x470>)
 80044d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044de:	60bb      	str	r3, [r7, #8]
 80044e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044e2:	2301      	movs	r3, #1
 80044e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e6:	4b77      	ldr	r3, [pc, #476]	@ (80046c4 <HAL_RCC_OscConfig+0x474>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d118      	bne.n	8004524 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044f2:	4b74      	ldr	r3, [pc, #464]	@ (80046c4 <HAL_RCC_OscConfig+0x474>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a73      	ldr	r2, [pc, #460]	@ (80046c4 <HAL_RCC_OscConfig+0x474>)
 80044f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044fe:	f7fd fbc5 	bl	8001c8c <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004506:	f7fd fbc1 	bl	8001c8c <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e10c      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004518:	4b6a      	ldr	r3, [pc, #424]	@ (80046c4 <HAL_RCC_OscConfig+0x474>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0f0      	beq.n	8004506 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d106      	bne.n	800453a <HAL_RCC_OscConfig+0x2ea>
 800452c:	4b64      	ldr	r3, [pc, #400]	@ (80046c0 <HAL_RCC_OscConfig+0x470>)
 800452e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004530:	4a63      	ldr	r2, [pc, #396]	@ (80046c0 <HAL_RCC_OscConfig+0x470>)
 8004532:	f043 0301 	orr.w	r3, r3, #1
 8004536:	6713      	str	r3, [r2, #112]	@ 0x70
 8004538:	e01c      	b.n	8004574 <HAL_RCC_OscConfig+0x324>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	2b05      	cmp	r3, #5
 8004540:	d10c      	bne.n	800455c <HAL_RCC_OscConfig+0x30c>
 8004542:	4b5f      	ldr	r3, [pc, #380]	@ (80046c0 <HAL_RCC_OscConfig+0x470>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004546:	4a5e      	ldr	r2, [pc, #376]	@ (80046c0 <HAL_RCC_OscConfig+0x470>)
 8004548:	f043 0304 	orr.w	r3, r3, #4
 800454c:	6713      	str	r3, [r2, #112]	@ 0x70
 800454e:	4b5c      	ldr	r3, [pc, #368]	@ (80046c0 <HAL_RCC_OscConfig+0x470>)
 8004550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004552:	4a5b      	ldr	r2, [pc, #364]	@ (80046c0 <HAL_RCC_OscConfig+0x470>)
 8004554:	f043 0301 	orr.w	r3, r3, #1
 8004558:	6713      	str	r3, [r2, #112]	@ 0x70
 800455a:	e00b      	b.n	8004574 <HAL_RCC_OscConfig+0x324>
 800455c:	4b58      	ldr	r3, [pc, #352]	@ (80046c0 <HAL_RCC_OscConfig+0x470>)
 800455e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004560:	4a57      	ldr	r2, [pc, #348]	@ (80046c0 <HAL_RCC_OscConfig+0x470>)
 8004562:	f023 0301 	bic.w	r3, r3, #1
 8004566:	6713      	str	r3, [r2, #112]	@ 0x70
 8004568:	4b55      	ldr	r3, [pc, #340]	@ (80046c0 <HAL_RCC_OscConfig+0x470>)
 800456a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800456c:	4a54      	ldr	r2, [pc, #336]	@ (80046c0 <HAL_RCC_OscConfig+0x470>)
 800456e:	f023 0304 	bic.w	r3, r3, #4
 8004572:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d015      	beq.n	80045a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457c:	f7fd fb86 	bl	8001c8c <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004582:	e00a      	b.n	800459a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004584:	f7fd fb82 	bl	8001c8c <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004592:	4293      	cmp	r3, r2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e0cb      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800459a:	4b49      	ldr	r3, [pc, #292]	@ (80046c0 <HAL_RCC_OscConfig+0x470>)
 800459c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0ee      	beq.n	8004584 <HAL_RCC_OscConfig+0x334>
 80045a6:	e014      	b.n	80045d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a8:	f7fd fb70 	bl	8001c8c <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ae:	e00a      	b.n	80045c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045b0:	f7fd fb6c 	bl	8001c8c <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045be:	4293      	cmp	r3, r2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e0b5      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c6:	4b3e      	ldr	r3, [pc, #248]	@ (80046c0 <HAL_RCC_OscConfig+0x470>)
 80045c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1ee      	bne.n	80045b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045d2:	7dfb      	ldrb	r3, [r7, #23]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d105      	bne.n	80045e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045d8:	4b39      	ldr	r3, [pc, #228]	@ (80046c0 <HAL_RCC_OscConfig+0x470>)
 80045da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045dc:	4a38      	ldr	r2, [pc, #224]	@ (80046c0 <HAL_RCC_OscConfig+0x470>)
 80045de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 80a1 	beq.w	8004730 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045ee:	4b34      	ldr	r3, [pc, #208]	@ (80046c0 <HAL_RCC_OscConfig+0x470>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 030c 	and.w	r3, r3, #12
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d05c      	beq.n	80046b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d141      	bne.n	8004686 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004602:	4b31      	ldr	r3, [pc, #196]	@ (80046c8 <HAL_RCC_OscConfig+0x478>)
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004608:	f7fd fb40 	bl	8001c8c <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004610:	f7fd fb3c 	bl	8001c8c <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e087      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004622:	4b27      	ldr	r3, [pc, #156]	@ (80046c0 <HAL_RCC_OscConfig+0x470>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69da      	ldr	r2, [r3, #28]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463c:	019b      	lsls	r3, r3, #6
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004644:	085b      	lsrs	r3, r3, #1
 8004646:	3b01      	subs	r3, #1
 8004648:	041b      	lsls	r3, r3, #16
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004650:	061b      	lsls	r3, r3, #24
 8004652:	491b      	ldr	r1, [pc, #108]	@ (80046c0 <HAL_RCC_OscConfig+0x470>)
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004658:	4b1b      	ldr	r3, [pc, #108]	@ (80046c8 <HAL_RCC_OscConfig+0x478>)
 800465a:	2201      	movs	r2, #1
 800465c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465e:	f7fd fb15 	bl	8001c8c <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004664:	e008      	b.n	8004678 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004666:	f7fd fb11 	bl	8001c8c <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e05c      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004678:	4b11      	ldr	r3, [pc, #68]	@ (80046c0 <HAL_RCC_OscConfig+0x470>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0f0      	beq.n	8004666 <HAL_RCC_OscConfig+0x416>
 8004684:	e054      	b.n	8004730 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004686:	4b10      	ldr	r3, [pc, #64]	@ (80046c8 <HAL_RCC_OscConfig+0x478>)
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468c:	f7fd fafe 	bl	8001c8c <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004694:	f7fd fafa 	bl	8001c8c <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e045      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046a6:	4b06      	ldr	r3, [pc, #24]	@ (80046c0 <HAL_RCC_OscConfig+0x470>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f0      	bne.n	8004694 <HAL_RCC_OscConfig+0x444>
 80046b2:	e03d      	b.n	8004730 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d107      	bne.n	80046cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e038      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
 80046c0:	40023800 	.word	0x40023800
 80046c4:	40007000 	.word	0x40007000
 80046c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046cc:	4b1b      	ldr	r3, [pc, #108]	@ (800473c <HAL_RCC_OscConfig+0x4ec>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d028      	beq.n	800472c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d121      	bne.n	800472c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d11a      	bne.n	800472c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80046fc:	4013      	ands	r3, r2
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004702:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004704:	4293      	cmp	r3, r2
 8004706:	d111      	bne.n	800472c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004712:	085b      	lsrs	r3, r3, #1
 8004714:	3b01      	subs	r3, #1
 8004716:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004718:	429a      	cmp	r2, r3
 800471a:	d107      	bne.n	800472c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004726:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004728:	429a      	cmp	r2, r3
 800472a:	d001      	beq.n	8004730 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	40023800 	.word	0x40023800

08004740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e0cc      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004754:	4b68      	ldr	r3, [pc, #416]	@ (80048f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d90c      	bls.n	800477c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004762:	4b65      	ldr	r3, [pc, #404]	@ (80048f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800476a:	4b63      	ldr	r3, [pc, #396]	@ (80048f8 <HAL_RCC_ClockConfig+0x1b8>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d001      	beq.n	800477c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e0b8      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d020      	beq.n	80047ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004794:	4b59      	ldr	r3, [pc, #356]	@ (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	4a58      	ldr	r2, [pc, #352]	@ (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 800479a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800479e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047ac:	4b53      	ldr	r3, [pc, #332]	@ (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	4a52      	ldr	r2, [pc, #328]	@ (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80047b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b8:	4b50      	ldr	r3, [pc, #320]	@ (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	494d      	ldr	r1, [pc, #308]	@ (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d044      	beq.n	8004860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d107      	bne.n	80047ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047de:	4b47      	ldr	r3, [pc, #284]	@ (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d119      	bne.n	800481e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e07f      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d003      	beq.n	80047fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047fa:	2b03      	cmp	r3, #3
 80047fc:	d107      	bne.n	800480e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047fe:	4b3f      	ldr	r3, [pc, #252]	@ (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d109      	bne.n	800481e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e06f      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800480e:	4b3b      	ldr	r3, [pc, #236]	@ (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e067      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800481e:	4b37      	ldr	r3, [pc, #220]	@ (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f023 0203 	bic.w	r2, r3, #3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	4934      	ldr	r1, [pc, #208]	@ (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 800482c:	4313      	orrs	r3, r2
 800482e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004830:	f7fd fa2c 	bl	8001c8c <HAL_GetTick>
 8004834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004836:	e00a      	b.n	800484e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004838:	f7fd fa28 	bl	8001c8c <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004846:	4293      	cmp	r3, r2
 8004848:	d901      	bls.n	800484e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e04f      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800484e:	4b2b      	ldr	r3, [pc, #172]	@ (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 020c 	and.w	r2, r3, #12
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	429a      	cmp	r2, r3
 800485e:	d1eb      	bne.n	8004838 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004860:	4b25      	ldr	r3, [pc, #148]	@ (80048f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d20c      	bcs.n	8004888 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486e:	4b22      	ldr	r3, [pc, #136]	@ (80048f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004876:	4b20      	ldr	r3, [pc, #128]	@ (80048f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d001      	beq.n	8004888 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e032      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004894:	4b19      	ldr	r3, [pc, #100]	@ (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	4916      	ldr	r1, [pc, #88]	@ (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d009      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048b2:	4b12      	ldr	r3, [pc, #72]	@ (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	490e      	ldr	r1, [pc, #56]	@ (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048c6:	f000 f821 	bl	800490c <HAL_RCC_GetSysClockFreq>
 80048ca:	4602      	mov	r2, r0
 80048cc:	4b0b      	ldr	r3, [pc, #44]	@ (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	091b      	lsrs	r3, r3, #4
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	490a      	ldr	r1, [pc, #40]	@ (8004900 <HAL_RCC_ClockConfig+0x1c0>)
 80048d8:	5ccb      	ldrb	r3, [r1, r3]
 80048da:	fa22 f303 	lsr.w	r3, r2, r3
 80048de:	4a09      	ldr	r2, [pc, #36]	@ (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 80048e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048e2:	4b09      	ldr	r3, [pc, #36]	@ (8004908 <HAL_RCC_ClockConfig+0x1c8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fd f98c 	bl	8001c04 <HAL_InitTick>

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40023c00 	.word	0x40023c00
 80048fc:	40023800 	.word	0x40023800
 8004900:	08004bc8 	.word	0x08004bc8
 8004904:	20000000 	.word	0x20000000
 8004908:	20000004 	.word	0x20000004

0800490c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800490c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004910:	b094      	sub	sp, #80	@ 0x50
 8004912:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	647b      	str	r3, [r7, #68]	@ 0x44
 8004918:	2300      	movs	r3, #0
 800491a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800491c:	2300      	movs	r3, #0
 800491e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004924:	4b79      	ldr	r3, [pc, #484]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 030c 	and.w	r3, r3, #12
 800492c:	2b08      	cmp	r3, #8
 800492e:	d00d      	beq.n	800494c <HAL_RCC_GetSysClockFreq+0x40>
 8004930:	2b08      	cmp	r3, #8
 8004932:	f200 80e1 	bhi.w	8004af8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <HAL_RCC_GetSysClockFreq+0x34>
 800493a:	2b04      	cmp	r3, #4
 800493c:	d003      	beq.n	8004946 <HAL_RCC_GetSysClockFreq+0x3a>
 800493e:	e0db      	b.n	8004af8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004940:	4b73      	ldr	r3, [pc, #460]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x204>)
 8004942:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004944:	e0db      	b.n	8004afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004946:	4b73      	ldr	r3, [pc, #460]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0x208>)
 8004948:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800494a:	e0d8      	b.n	8004afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800494c:	4b6f      	ldr	r3, [pc, #444]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x200>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004954:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004956:	4b6d      	ldr	r3, [pc, #436]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d063      	beq.n	8004a2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004962:	4b6a      	ldr	r3, [pc, #424]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	099b      	lsrs	r3, r3, #6
 8004968:	2200      	movs	r2, #0
 800496a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800496c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800496e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004974:	633b      	str	r3, [r7, #48]	@ 0x30
 8004976:	2300      	movs	r3, #0
 8004978:	637b      	str	r3, [r7, #52]	@ 0x34
 800497a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800497e:	4622      	mov	r2, r4
 8004980:	462b      	mov	r3, r5
 8004982:	f04f 0000 	mov.w	r0, #0
 8004986:	f04f 0100 	mov.w	r1, #0
 800498a:	0159      	lsls	r1, r3, #5
 800498c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004990:	0150      	lsls	r0, r2, #5
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	4621      	mov	r1, r4
 8004998:	1a51      	subs	r1, r2, r1
 800499a:	6139      	str	r1, [r7, #16]
 800499c:	4629      	mov	r1, r5
 800499e:	eb63 0301 	sbc.w	r3, r3, r1
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	f04f 0300 	mov.w	r3, #0
 80049ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049b0:	4659      	mov	r1, fp
 80049b2:	018b      	lsls	r3, r1, #6
 80049b4:	4651      	mov	r1, sl
 80049b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049ba:	4651      	mov	r1, sl
 80049bc:	018a      	lsls	r2, r1, #6
 80049be:	4651      	mov	r1, sl
 80049c0:	ebb2 0801 	subs.w	r8, r2, r1
 80049c4:	4659      	mov	r1, fp
 80049c6:	eb63 0901 	sbc.w	r9, r3, r1
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049de:	4690      	mov	r8, r2
 80049e0:	4699      	mov	r9, r3
 80049e2:	4623      	mov	r3, r4
 80049e4:	eb18 0303 	adds.w	r3, r8, r3
 80049e8:	60bb      	str	r3, [r7, #8]
 80049ea:	462b      	mov	r3, r5
 80049ec:	eb49 0303 	adc.w	r3, r9, r3
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	f04f 0200 	mov.w	r2, #0
 80049f6:	f04f 0300 	mov.w	r3, #0
 80049fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049fe:	4629      	mov	r1, r5
 8004a00:	024b      	lsls	r3, r1, #9
 8004a02:	4621      	mov	r1, r4
 8004a04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a08:	4621      	mov	r1, r4
 8004a0a:	024a      	lsls	r2, r1, #9
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a12:	2200      	movs	r2, #0
 8004a14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a1c:	f7fc f83a 	bl	8000a94 <__aeabi_uldivmod>
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	4613      	mov	r3, r2
 8004a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a28:	e058      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a2a:	4b38      	ldr	r3, [pc, #224]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	099b      	lsrs	r3, r3, #6
 8004a30:	2200      	movs	r2, #0
 8004a32:	4618      	mov	r0, r3
 8004a34:	4611      	mov	r1, r2
 8004a36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a3a:	623b      	str	r3, [r7, #32]
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a44:	4642      	mov	r2, r8
 8004a46:	464b      	mov	r3, r9
 8004a48:	f04f 0000 	mov.w	r0, #0
 8004a4c:	f04f 0100 	mov.w	r1, #0
 8004a50:	0159      	lsls	r1, r3, #5
 8004a52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a56:	0150      	lsls	r0, r2, #5
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4641      	mov	r1, r8
 8004a5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a62:	4649      	mov	r1, r9
 8004a64:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a7c:	ebb2 040a 	subs.w	r4, r2, sl
 8004a80:	eb63 050b 	sbc.w	r5, r3, fp
 8004a84:	f04f 0200 	mov.w	r2, #0
 8004a88:	f04f 0300 	mov.w	r3, #0
 8004a8c:	00eb      	lsls	r3, r5, #3
 8004a8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a92:	00e2      	lsls	r2, r4, #3
 8004a94:	4614      	mov	r4, r2
 8004a96:	461d      	mov	r5, r3
 8004a98:	4643      	mov	r3, r8
 8004a9a:	18e3      	adds	r3, r4, r3
 8004a9c:	603b      	str	r3, [r7, #0]
 8004a9e:	464b      	mov	r3, r9
 8004aa0:	eb45 0303 	adc.w	r3, r5, r3
 8004aa4:	607b      	str	r3, [r7, #4]
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	f04f 0300 	mov.w	r3, #0
 8004aae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	028b      	lsls	r3, r1, #10
 8004ab6:	4621      	mov	r1, r4
 8004ab8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004abc:	4621      	mov	r1, r4
 8004abe:	028a      	lsls	r2, r1, #10
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	61bb      	str	r3, [r7, #24]
 8004aca:	61fa      	str	r2, [r7, #28]
 8004acc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ad0:	f7fb ffe0 	bl	8000a94 <__aeabi_uldivmod>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4613      	mov	r3, r2
 8004ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004adc:	4b0b      	ldr	r3, [pc, #44]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	0c1b      	lsrs	r3, r3, #16
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004aec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004aee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004af6:	e002      	b.n	8004afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004af8:	4b05      	ldr	r3, [pc, #20]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0x204>)
 8004afa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004afc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004afe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3750      	adds	r7, #80	@ 0x50
 8004b04:	46bd      	mov	sp, r7
 8004b06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	00f42400 	.word	0x00f42400
 8004b14:	007a1200 	.word	0x007a1200

08004b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b1c:	4b03      	ldr	r3, [pc, #12]	@ (8004b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	20000000 	.word	0x20000000

08004b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b34:	f7ff fff0 	bl	8004b18 <HAL_RCC_GetHCLKFreq>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	4b05      	ldr	r3, [pc, #20]	@ (8004b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	0a9b      	lsrs	r3, r3, #10
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	4903      	ldr	r1, [pc, #12]	@ (8004b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b46:	5ccb      	ldrb	r3, [r1, r3]
 8004b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	40023800 	.word	0x40023800
 8004b54:	08004bd8 	.word	0x08004bd8

08004b58 <memset>:
 8004b58:	4402      	add	r2, r0
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d100      	bne.n	8004b62 <memset+0xa>
 8004b60:	4770      	bx	lr
 8004b62:	f803 1b01 	strb.w	r1, [r3], #1
 8004b66:	e7f9      	b.n	8004b5c <memset+0x4>

08004b68 <__libc_init_array>:
 8004b68:	b570      	push	{r4, r5, r6, lr}
 8004b6a:	4d0d      	ldr	r5, [pc, #52]	@ (8004ba0 <__libc_init_array+0x38>)
 8004b6c:	4c0d      	ldr	r4, [pc, #52]	@ (8004ba4 <__libc_init_array+0x3c>)
 8004b6e:	1b64      	subs	r4, r4, r5
 8004b70:	10a4      	asrs	r4, r4, #2
 8004b72:	2600      	movs	r6, #0
 8004b74:	42a6      	cmp	r6, r4
 8004b76:	d109      	bne.n	8004b8c <__libc_init_array+0x24>
 8004b78:	4d0b      	ldr	r5, [pc, #44]	@ (8004ba8 <__libc_init_array+0x40>)
 8004b7a:	4c0c      	ldr	r4, [pc, #48]	@ (8004bac <__libc_init_array+0x44>)
 8004b7c:	f000 f818 	bl	8004bb0 <_init>
 8004b80:	1b64      	subs	r4, r4, r5
 8004b82:	10a4      	asrs	r4, r4, #2
 8004b84:	2600      	movs	r6, #0
 8004b86:	42a6      	cmp	r6, r4
 8004b88:	d105      	bne.n	8004b96 <__libc_init_array+0x2e>
 8004b8a:	bd70      	pop	{r4, r5, r6, pc}
 8004b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b90:	4798      	blx	r3
 8004b92:	3601      	adds	r6, #1
 8004b94:	e7ee      	b.n	8004b74 <__libc_init_array+0xc>
 8004b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b9a:	4798      	blx	r3
 8004b9c:	3601      	adds	r6, #1
 8004b9e:	e7f2      	b.n	8004b86 <__libc_init_array+0x1e>
 8004ba0:	08004be8 	.word	0x08004be8
 8004ba4:	08004be8 	.word	0x08004be8
 8004ba8:	08004be8 	.word	0x08004be8
 8004bac:	08004bec 	.word	0x08004bec

08004bb0 <_init>:
 8004bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb2:	bf00      	nop
 8004bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bb6:	bc08      	pop	{r3}
 8004bb8:	469e      	mov	lr, r3
 8004bba:	4770      	bx	lr

08004bbc <_fini>:
 8004bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bbe:	bf00      	nop
 8004bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bc2:	bc08      	pop	{r3}
 8004bc4:	469e      	mov	lr, r3
 8004bc6:	4770      	bx	lr
