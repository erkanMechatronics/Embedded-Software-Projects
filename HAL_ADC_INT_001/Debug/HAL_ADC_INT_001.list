
HAL_ADC_INT_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008750  08008750  00018750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800876c  0800876c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800876c  0800876c  0001876c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008774  08008774  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008774  08008774  00018774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008778  08008778  00018778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800877c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000854  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008e4  200008e4  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017f4b  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c02  00000000  00000000  0003800b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b0  00000000  00000000  0003bc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001120  00000000  00000000  0003cec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025bc3  00000000  00000000  0003dfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019d56  00000000  00000000  00063ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8147  00000000  00000000  0007d8f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00155a40  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fb8  00000000  00000000  00155a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008738 	.word	0x08008738

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008738 	.word	0x08008738

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fce8 	bl	8000ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f85e 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f9ac 	bl	8000834 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f916 	bl	800070c <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f942 	bl	8000768 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f970 	bl	80007c8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e8:	f007 fcde 	bl	8007ea8 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80004ec:	f000 f8bc 	bl	8000668 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 80004f0:	4808      	ldr	r0, [pc, #32]	; (8000514 <main+0x48>)
 80004f2:	f000 fdb1 	bl	8001058 <HAL_ADC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f6:	f007 fcfd 	bl	8007ef4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 80004fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fe:	4806      	ldr	r0, [pc, #24]	; (8000518 <main+0x4c>)
 8000500:	f001 fca9 	bl	8001e56 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000504:	2064      	movs	r0, #100	; 0x64
 8000506:	f000 fd3f 	bl	8000f88 <HAL_Delay>
    HAL_ADC_Start_IT(&hadc1);
 800050a:	4802      	ldr	r0, [pc, #8]	; (8000514 <main+0x48>)
 800050c:	f000 fda4 	bl	8001058 <HAL_ADC_Start_IT>
    MX_USB_HOST_Process();
 8000510:	e7f1      	b.n	80004f6 <main+0x2a>
 8000512:	bf00      	nop
 8000514:	200000b0 	.word	0x200000b0
 8000518:	40020c00 	.word	0x40020c00

0800051c <HAL_ADC_ConvCpltCallback>:
  }
  /* USER CODE END 3 */
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a18      	ldr	r2, [pc, #96]	; (8000588 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d106      	bne.n	800053a <HAL_ADC_ConvCpltCallback+0x1e>
	{
		adc_value = HAL_ADC_GetValue(&hadc1);
 800052c:	4816      	ldr	r0, [pc, #88]	; (8000588 <HAL_ADC_ConvCpltCallback+0x6c>)
 800052e:	f000 ff81 	bl	8001434 <HAL_ADC_GetValue>
 8000532:	4603      	mov	r3, r0
 8000534:	b29a      	uxth	r2, r3
 8000536:	4b15      	ldr	r3, [pc, #84]	; (800058c <HAL_ADC_ConvCpltCallback+0x70>)
 8000538:	801a      	strh	r2, [r3, #0]
	}

	if(adc_value < 100)
 800053a:	4b14      	ldr	r3, [pc, #80]	; (800058c <HAL_ADC_ConvCpltCallback+0x70>)
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	2b63      	cmp	r3, #99	; 0x63
 8000540:	d806      	bhi.n	8000550 <HAL_ADC_ConvCpltCallback+0x34>
	{
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,0);
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000548:	4811      	ldr	r0, [pc, #68]	; (8000590 <HAL_ADC_ConvCpltCallback+0x74>)
 800054a:	f001 fc6b 	bl	8001e24 <HAL_GPIO_WritePin>
	else if((adc_value > 100) | (adc_value == 100))
	{
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,1);
	}

}
 800054e:	e017      	b.n	8000580 <HAL_ADC_ConvCpltCallback+0x64>
	else if((adc_value > 100) | (adc_value == 100))
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <HAL_ADC_ConvCpltCallback+0x70>)
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	2b64      	cmp	r3, #100	; 0x64
 8000556:	bf8c      	ite	hi
 8000558:	2301      	movhi	r3, #1
 800055a:	2300      	movls	r3, #0
 800055c:	b2da      	uxtb	r2, r3
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <HAL_ADC_ConvCpltCallback+0x70>)
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	2b64      	cmp	r3, #100	; 0x64
 8000564:	bf0c      	ite	eq
 8000566:	2301      	moveq	r3, #1
 8000568:	2300      	movne	r3, #0
 800056a:	b2db      	uxtb	r3, r3
 800056c:	4313      	orrs	r3, r2
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d005      	beq.n	8000580 <HAL_ADC_ConvCpltCallback+0x64>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,1);
 8000574:	2201      	movs	r2, #1
 8000576:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800057a:	4805      	ldr	r0, [pc, #20]	; (8000590 <HAL_ADC_ConvCpltCallback+0x74>)
 800057c:	f001 fc52 	bl	8001e24 <HAL_GPIO_WritePin>
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	200000b0 	.word	0x200000b0
 800058c:	200000ac 	.word	0x200000ac
 8000590:	40020c00 	.word	0x40020c00

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	; 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	2230      	movs	r2, #48	; 0x30
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f007 ffc2 	bl	800852c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	4b28      	ldr	r3, [pc, #160]	; (8000660 <SystemClock_Config+0xcc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	4a27      	ldr	r2, [pc, #156]	; (8000660 <SystemClock_Config+0xcc>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	; 0x40
 80005c8:	4b25      	ldr	r3, [pc, #148]	; (8000660 <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b22      	ldr	r3, [pc, #136]	; (8000664 <SystemClock_Config+0xd0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a21      	ldr	r2, [pc, #132]	; (8000664 <SystemClock_Config+0xd0>)
 80005de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000604:	2308      	movs	r3, #8
 8000606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000608:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800060c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000612:	2307      	movs	r3, #7
 8000614:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fe24 	bl	8004268 <HAL_RCC_OscConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000626:	f000 fa03 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	230f      	movs	r3, #15
 800062c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062e:	2302      	movs	r3, #2
 8000630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000636:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800063a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000640:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	2105      	movs	r1, #5
 8000648:	4618      	mov	r0, r3
 800064a:	f004 f885 	bl	8004758 <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000654:	f000 f9ec 	bl	8000a30 <Error_Handler>
  }
}
 8000658:	bf00      	nop
 800065a:	3750      	adds	r7, #80	; 0x50
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800066e:	463b      	mov	r3, r7
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800067a:	4b21      	ldr	r3, [pc, #132]	; (8000700 <MX_ADC1_Init+0x98>)
 800067c:	4a21      	ldr	r2, [pc, #132]	; (8000704 <MX_ADC1_Init+0x9c>)
 800067e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <MX_ADC1_Init+0x98>)
 8000682:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000686:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000688:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <MX_ADC1_Init+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800068e:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <MX_ADC1_Init+0x98>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000694:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <MX_ADC1_Init+0x98>)
 8000696:	2200      	movs	r2, #0
 8000698:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800069a:	4b19      	ldr	r3, [pc, #100]	; (8000700 <MX_ADC1_Init+0x98>)
 800069c:	2200      	movs	r2, #0
 800069e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <MX_ADC1_Init+0x98>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <MX_ADC1_Init+0x98>)
 80006aa:	4a17      	ldr	r2, [pc, #92]	; (8000708 <MX_ADC1_Init+0xa0>)
 80006ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_ADC1_Init+0x98>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_ADC1_Init+0x98>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_ADC1_Init+0x98>)
 80006bc:	2200      	movs	r2, #0
 80006be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_ADC1_Init+0x98>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c8:	480d      	ldr	r0, [pc, #52]	; (8000700 <MX_ADC1_Init+0x98>)
 80006ca:	f000 fc81 	bl	8000fd0 <HAL_ADC_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006d4:	f000 f9ac 	bl	8000a30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006d8:	2301      	movs	r3, #1
 80006da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006dc:	2301      	movs	r3, #1
 80006de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e4:	463b      	mov	r3, r7
 80006e6:	4619      	mov	r1, r3
 80006e8:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_ADC1_Init+0x98>)
 80006ea:	f000 fec5 	bl	8001478 <HAL_ADC_ConfigChannel>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006f4:	f000 f99c 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	200000b0 	.word	0x200000b0
 8000704:	40012000 	.word	0x40012000
 8000708:	0f000001 	.word	0x0f000001

0800070c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_I2C1_Init+0x50>)
 8000712:	4a13      	ldr	r2, [pc, #76]	; (8000760 <MX_I2C1_Init+0x54>)
 8000714:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_I2C1_Init+0x50>)
 8000718:	4a12      	ldr	r2, [pc, #72]	; (8000764 <MX_I2C1_Init+0x58>)
 800071a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_I2C1_Init+0x50>)
 800072a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800072e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_I2C1_Init+0x50>)
 800074a:	f002 ffa9 	bl	80036a0 <HAL_I2C_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000754:	f000 f96c 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200000f8 	.word	0x200000f8
 8000760:	40005400 	.word	0x40005400
 8000764:	000186a0 	.word	0x000186a0

08000768 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_I2S3_Init+0x54>)
 800076e:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <MX_I2S3_Init+0x58>)
 8000770:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_I2S3_Init+0x54>)
 8000774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000778:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <MX_I2S3_Init+0x54>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000780:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_I2S3_Init+0x54>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <MX_I2S3_Init+0x54>)
 8000788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800078c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_I2S3_Init+0x54>)
 8000790:	4a0c      	ldr	r2, [pc, #48]	; (80007c4 <MX_I2S3_Init+0x5c>)
 8000792:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_I2S3_Init+0x54>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_I2S3_Init+0x54>)
 800079c:	2200      	movs	r2, #0
 800079e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_I2S3_Init+0x54>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_I2S3_Init+0x54>)
 80007a8:	f003 f8be 	bl	8003928 <HAL_I2S_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007b2:	f000 f93d 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	2000014c 	.word	0x2000014c
 80007c0:	40003c00 	.word	0x40003c00
 80007c4:	00017700 	.word	0x00017700

080007c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_SPI1_Init+0x64>)
 80007ce:	4a18      	ldr	r2, [pc, #96]	; (8000830 <MX_SPI1_Init+0x68>)
 80007d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <MX_SPI1_Init+0x64>)
 80007d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_SPI1_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_SPI1_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_SPI1_Init+0x64>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_SPI1_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_SPI1_Init+0x64>)
 80007f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_SPI1_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <MX_SPI1_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_SPI1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800080c:	4b07      	ldr	r3, [pc, #28]	; (800082c <MX_SPI1_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_SPI1_Init+0x64>)
 8000814:	220a      	movs	r2, #10
 8000816:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_SPI1_Init+0x64>)
 800081a:	f004 fae9 	bl	8004df0 <HAL_SPI_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000824:	f000 f904 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000194 	.word	0x20000194
 8000830:	40013000 	.word	0x40013000

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	; 0x30
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
 800084e:	4b72      	ldr	r3, [pc, #456]	; (8000a18 <MX_GPIO_Init+0x1e4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a71      	ldr	r2, [pc, #452]	; (8000a18 <MX_GPIO_Init+0x1e4>)
 8000854:	f043 0310 	orr.w	r3, r3, #16
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b6f      	ldr	r3, [pc, #444]	; (8000a18 <MX_GPIO_Init+0x1e4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0310 	and.w	r3, r3, #16
 8000862:	61bb      	str	r3, [r7, #24]
 8000864:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	4b6b      	ldr	r3, [pc, #428]	; (8000a18 <MX_GPIO_Init+0x1e4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a6a      	ldr	r2, [pc, #424]	; (8000a18 <MX_GPIO_Init+0x1e4>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b68      	ldr	r3, [pc, #416]	; (8000a18 <MX_GPIO_Init+0x1e4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	4b64      	ldr	r3, [pc, #400]	; (8000a18 <MX_GPIO_Init+0x1e4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a63      	ldr	r2, [pc, #396]	; (8000a18 <MX_GPIO_Init+0x1e4>)
 800088c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b61      	ldr	r3, [pc, #388]	; (8000a18 <MX_GPIO_Init+0x1e4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	4b5d      	ldr	r3, [pc, #372]	; (8000a18 <MX_GPIO_Init+0x1e4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a5c      	ldr	r2, [pc, #368]	; (8000a18 <MX_GPIO_Init+0x1e4>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b5a      	ldr	r3, [pc, #360]	; (8000a18 <MX_GPIO_Init+0x1e4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	4b56      	ldr	r3, [pc, #344]	; (8000a18 <MX_GPIO_Init+0x1e4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a55      	ldr	r2, [pc, #340]	; (8000a18 <MX_GPIO_Init+0x1e4>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b53      	ldr	r3, [pc, #332]	; (8000a18 <MX_GPIO_Init+0x1e4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b4f      	ldr	r3, [pc, #316]	; (8000a18 <MX_GPIO_Init+0x1e4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a4e      	ldr	r2, [pc, #312]	; (8000a18 <MX_GPIO_Init+0x1e4>)
 80008e0:	f043 0308 	orr.w	r3, r3, #8
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b4c      	ldr	r3, [pc, #304]	; (8000a18 <MX_GPIO_Init+0x1e4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0308 	and.w	r3, r3, #8
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2108      	movs	r1, #8
 80008f6:	4849      	ldr	r0, [pc, #292]	; (8000a1c <MX_GPIO_Init+0x1e8>)
 80008f8:	f001 fa94 	bl	8001e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	2101      	movs	r1, #1
 8000900:	4847      	ldr	r0, [pc, #284]	; (8000a20 <MX_GPIO_Init+0x1ec>)
 8000902:	f001 fa8f 	bl	8001e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000906:	2200      	movs	r2, #0
 8000908:	f24f 0110 	movw	r1, #61456	; 0xf010
 800090c:	4845      	ldr	r0, [pc, #276]	; (8000a24 <MX_GPIO_Init+0x1f0>)
 800090e:	f001 fa89 	bl	8001e24 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000912:	2308      	movs	r3, #8
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	483c      	ldr	r0, [pc, #240]	; (8000a1c <MX_GPIO_Init+0x1e8>)
 800092a:	f001 f8df 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800092e:	2301      	movs	r3, #1
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4836      	ldr	r0, [pc, #216]	; (8000a20 <MX_GPIO_Init+0x1ec>)
 8000946:	f001 f8d1 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800094a:	2308      	movs	r3, #8
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800095a:	2305      	movs	r3, #5
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	482e      	ldr	r0, [pc, #184]	; (8000a20 <MX_GPIO_Init+0x1ec>)
 8000966:	f001 f8c1 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800096a:	2301      	movs	r3, #1
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800096e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	482a      	ldr	r0, [pc, #168]	; (8000a28 <MX_GPIO_Init+0x1f4>)
 8000980:	f001 f8b4 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000984:	2304      	movs	r3, #4
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4825      	ldr	r0, [pc, #148]	; (8000a2c <MX_GPIO_Init+0x1f8>)
 8000998:	f001 f8a8 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800099c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ae:	2305      	movs	r3, #5
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	481c      	ldr	r0, [pc, #112]	; (8000a2c <MX_GPIO_Init+0x1f8>)
 80009ba:	f001 f897 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009be:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009c2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	4813      	ldr	r0, [pc, #76]	; (8000a24 <MX_GPIO_Init+0x1f0>)
 80009d8:	f001 f888 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009dc:	2320      	movs	r3, #32
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	480d      	ldr	r0, [pc, #52]	; (8000a24 <MX_GPIO_Init+0x1f0>)
 80009f0:	f001 f87c 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009f4:	2302      	movs	r3, #2
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_GPIO_Init+0x1e8>)
 8000a0a:	f001 f86f 	bl	8001aec <HAL_GPIO_Init>

}
 8000a0e:	bf00      	nop
 8000a10:	3730      	adds	r7, #48	; 0x30
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40020800 	.word	0x40020800
 8000a24:	40020c00 	.word	0x40020c00
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	40020400 	.word	0x40020400

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <Error_Handler+0x8>
	...

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	4a0f      	ldr	r2, [pc, #60]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a50:	6453      	str	r3, [r2, #68]	; 0x44
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	4a08      	ldr	r2, [pc, #32]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a7a:	2007      	movs	r0, #7
 8000a7c:	f000 fff4 	bl	8001a68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40023800 	.word	0x40023800

08000a8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <HAL_ADC_MspInit+0x8c>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d12f      	bne.n	8000b0e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <HAL_ADC_MspInit+0x90>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	4a19      	ldr	r2, [pc, #100]	; (8000b1c <HAL_ADC_MspInit+0x90>)
 8000ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000abc:	6453      	str	r3, [r2, #68]	; 0x44
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <HAL_ADC_MspInit+0x90>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <HAL_ADC_MspInit+0x90>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <HAL_ADC_MspInit+0x90>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <HAL_ADC_MspInit+0x90>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aea:	2303      	movs	r3, #3
 8000aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	4809      	ldr	r0, [pc, #36]	; (8000b20 <HAL_ADC_MspInit+0x94>)
 8000afa:	f000 fff7 	bl	8001aec <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2100      	movs	r1, #0
 8000b02:	2012      	movs	r0, #18
 8000b04:	f000 ffbb 	bl	8001a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b08:	2012      	movs	r0, #18
 8000b0a:	f000 ffd4 	bl	8001ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	; 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40012000 	.word	0x40012000
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000

08000b24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <HAL_I2C_MspInit+0x84>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d12c      	bne.n	8000ba0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a17      	ldr	r2, [pc, #92]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b62:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b68:	2312      	movs	r3, #18
 8000b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b74:	2304      	movs	r3, #4
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <HAL_I2C_MspInit+0x8c>)
 8000b80:	f000 ffb4 	bl	8001aec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	4a07      	ldr	r2, [pc, #28]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b92:	6413      	str	r3, [r2, #64]	; 0x40
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	; 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40005400 	.word	0x40005400
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020400 	.word	0x40020400

08000bb4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	; 0x38
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a31      	ldr	r2, [pc, #196]	; (8000ca4 <HAL_I2S_MspInit+0xf0>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d15a      	bne.n	8000c9a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000be4:	2301      	movs	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000be8:	23c0      	movs	r3, #192	; 0xc0
 8000bea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bec:	2302      	movs	r3, #2
 8000bee:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f003 ffbb 	bl	8004b70 <HAL_RCCEx_PeriphCLKConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c00:	f7ff ff16 	bl	8000a30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c04:	2300      	movs	r3, #0
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	4a26      	ldr	r2, [pc, #152]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c12:	6413      	str	r3, [r2, #64]	; 0x40
 8000c14:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	4a1f      	ldr	r2, [pc, #124]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c44:	4a18      	ldr	r2, [pc, #96]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c46:	f043 0304 	orr.w	r3, r3, #4
 8000c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4c:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <HAL_I2S_MspInit+0xf4>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c58:	2310      	movs	r3, #16
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c68:	2306      	movs	r3, #6
 8000c6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c70:	4619      	mov	r1, r3
 8000c72:	480e      	ldr	r0, [pc, #56]	; (8000cac <HAL_I2S_MspInit+0xf8>)
 8000c74:	f000 ff3a 	bl	8001aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c78:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c8a:	2306      	movs	r3, #6
 8000c8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c92:	4619      	mov	r1, r3
 8000c94:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <HAL_I2S_MspInit+0xfc>)
 8000c96:	f000 ff29 	bl	8001aec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c9a:	bf00      	nop
 8000c9c:	3738      	adds	r7, #56	; 0x38
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40003c00 	.word	0x40003c00
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	40020800 	.word	0x40020800

08000cb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a19      	ldr	r2, [pc, #100]	; (8000d38 <HAL_SPI_MspInit+0x84>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d12b      	bne.n	8000d2e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a17      	ldr	r2, [pc, #92]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000ce0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d0e:	23e0      	movs	r3, #224	; 0xe0
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d1e:	2305      	movs	r3, #5
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	4805      	ldr	r0, [pc, #20]	; (8000d40 <HAL_SPI_MspInit+0x8c>)
 8000d2a:	f000 fedf 	bl	8001aec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	3728      	adds	r7, #40	; 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40013000 	.word	0x40013000
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020000 	.word	0x40020000

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <NMI_Handler+0x4>

08000d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <HardFault_Handler+0x4>

08000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <MemManage_Handler+0x4>

08000d56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d90:	f000 f8da 	bl	8000f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <ADC_IRQHandler+0x10>)
 8000d9e:	f000 fa39 	bl	8001214 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200000b0 	.word	0x200000b0

08000dac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <OTG_FS_IRQHandler+0x10>)
 8000db2:	f001 fad5 	bl	8002360 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200005d0 	.word	0x200005d0

08000dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc8:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <_sbrk+0x5c>)
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <_sbrk+0x60>)
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d102      	bne.n	8000de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <_sbrk+0x64>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <_sbrk+0x68>)
 8000de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d207      	bcs.n	8000e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df0:	f007 fb62 	bl	80084b8 <__errno>
 8000df4:	4603      	mov	r3, r0
 8000df6:	220c      	movs	r2, #12
 8000df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfe:	e009      	b.n	8000e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <_sbrk+0x64>)
 8000e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20020000 	.word	0x20020000
 8000e20:	00000400 	.word	0x00000400
 8000e24:	200001ec 	.word	0x200001ec
 8000e28:	200008e8 	.word	0x200008e8

08000e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <SystemInit+0x20>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <SystemInit+0x20>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e54:	480d      	ldr	r0, [pc, #52]	; (8000e8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e56:	490e      	ldr	r1, [pc, #56]	; (8000e90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e58:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e5c:	e002      	b.n	8000e64 <LoopCopyDataInit>

08000e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e62:	3304      	adds	r3, #4

08000e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e68:	d3f9      	bcc.n	8000e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e6c:	4c0b      	ldr	r4, [pc, #44]	; (8000e9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e70:	e001      	b.n	8000e76 <LoopFillZerobss>

08000e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e74:	3204      	adds	r2, #4

08000e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e78:	d3fb      	bcc.n	8000e72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e7a:	f7ff ffd7 	bl	8000e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f007 fb21 	bl	80084c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e82:	f7ff fb23 	bl	80004cc <main>
  bx  lr    
 8000e86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e90:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e94:	0800877c 	.word	0x0800877c
  ldr r2, =_sbss
 8000e98:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e9c:	200008e4 	.word	0x200008e4

08000ea0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <CAN1_RX0_IRQHandler>
	...

08000ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <HAL_Init+0x40>)
 8000eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <HAL_Init+0x40>)
 8000eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a07      	ldr	r2, [pc, #28]	; (8000ee4 <HAL_Init+0x40>)
 8000ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f000 fdcb 	bl	8001a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f000 f808 	bl	8000ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed8:	f7ff fdb0 	bl	8000a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023c00 	.word	0x40023c00

08000ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_InitTick+0x54>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_InitTick+0x58>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 fde3 	bl	8001ad2 <HAL_SYSTICK_Config>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00e      	b.n	8000f34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b0f      	cmp	r3, #15
 8000f1a:	d80a      	bhi.n	8000f32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f000 fdab 	bl	8001a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f28:	4a06      	ldr	r2, [pc, #24]	; (8000f44 <HAL_InitTick+0x5c>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e000      	b.n	8000f34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	20000008 	.word	0x20000008
 8000f44:	20000004 	.word	0x20000004

08000f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_IncTick+0x20>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x24>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <HAL_IncTick+0x24>)
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	200001f0 	.word	0x200001f0

08000f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return uwTick;
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <HAL_GetTick+0x14>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	200001f0 	.word	0x200001f0

08000f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f90:	f7ff ffee 	bl	8000f70 <HAL_GetTick>
 8000f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa0:	d005      	beq.n	8000fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_Delay+0x44>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4413      	add	r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fae:	bf00      	nop
 8000fb0:	f7ff ffde 	bl	8000f70 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d8f7      	bhi.n	8000fb0 <HAL_Delay+0x28>
  {
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000008 	.word	0x20000008

08000fd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e033      	b.n	800104e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d109      	bne.n	8001002 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff fd4c 	bl	8000a8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f003 0310 	and.w	r3, r3, #16
 800100a:	2b00      	cmp	r3, #0
 800100c:	d118      	bne.n	8001040 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001016:	f023 0302 	bic.w	r3, r3, #2
 800101a:	f043 0202 	orr.w	r2, r3, #2
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 fb4a 	bl	80016bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f023 0303 	bic.w	r3, r3, #3
 8001036:	f043 0201 	orr.w	r2, r3, #1
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	641a      	str	r2, [r3, #64]	; 0x40
 800103e:	e001      	b.n	8001044 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800106a:	2b01      	cmp	r3, #1
 800106c:	d101      	bne.n	8001072 <HAL_ADC_Start_IT+0x1a>
 800106e:	2302      	movs	r3, #2
 8001070:	e0bd      	b.n	80011ee <HAL_ADC_Start_IT+0x196>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2201      	movs	r2, #1
 8001076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	2b01      	cmp	r3, #1
 8001086:	d018      	beq.n	80010ba <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 0201 	orr.w	r2, r2, #1
 8001096:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001098:	4b58      	ldr	r3, [pc, #352]	; (80011fc <HAL_ADC_Start_IT+0x1a4>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a58      	ldr	r2, [pc, #352]	; (8001200 <HAL_ADC_Start_IT+0x1a8>)
 800109e:	fba2 2303 	umull	r2, r3, r2, r3
 80010a2:	0c9a      	lsrs	r2, r3, #18
 80010a4:	4613      	mov	r3, r2
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4413      	add	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80010ac:	e002      	b.n	80010b4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	3b01      	subs	r3, #1
 80010b2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f9      	bne.n	80010ae <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	f040 8085 	bne.w	80011d4 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010d2:	f023 0301 	bic.w	r3, r3, #1
 80010d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d007      	beq.n	80010fc <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001108:	d106      	bne.n	8001118 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f023 0206 	bic.w	r2, r3, #6
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	645a      	str	r2, [r3, #68]	; 0x44
 8001116:	e002      	b.n	800111e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001126:	4b37      	ldr	r3, [pc, #220]	; (8001204 <HAL_ADC_Start_IT+0x1ac>)
 8001128:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001132:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	6812      	ldr	r2, [r2, #0]
 800113e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001142:	f043 0320 	orr.w	r3, r3, #32
 8001146:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 031f 	and.w	r3, r3, #31
 8001150:	2b00      	cmp	r3, #0
 8001152:	d12a      	bne.n	80011aa <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a2b      	ldr	r2, [pc, #172]	; (8001208 <HAL_ADC_Start_IT+0x1b0>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d015      	beq.n	800118a <HAL_ADC_Start_IT+0x132>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a2a      	ldr	r2, [pc, #168]	; (800120c <HAL_ADC_Start_IT+0x1b4>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d105      	bne.n	8001174 <HAL_ADC_Start_IT+0x11c>
 8001168:	4b26      	ldr	r3, [pc, #152]	; (8001204 <HAL_ADC_Start_IT+0x1ac>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 031f 	and.w	r3, r3, #31
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00a      	beq.n	800118a <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a25      	ldr	r2, [pc, #148]	; (8001210 <HAL_ADC_Start_IT+0x1b8>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d136      	bne.n	80011ec <HAL_ADC_Start_IT+0x194>
 800117e:	4b21      	ldr	r3, [pc, #132]	; (8001204 <HAL_ADC_Start_IT+0x1ac>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	2b00      	cmp	r3, #0
 8001188:	d130      	bne.n	80011ec <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d129      	bne.n	80011ec <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	e020      	b.n	80011ec <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a16      	ldr	r2, [pc, #88]	; (8001208 <HAL_ADC_Start_IT+0x1b0>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d11b      	bne.n	80011ec <HAL_ADC_Start_IT+0x194>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d114      	bne.n	80011ec <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	e00b      	b.n	80011ec <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	f043 0210 	orr.w	r2, r3, #16
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e4:	f043 0201 	orr.w	r2, r3, #1
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000000 	.word	0x20000000
 8001200:	431bde83 	.word	0x431bde83
 8001204:	40012300 	.word	0x40012300
 8001208:	40012000 	.word	0x40012000
 800120c:	40012100 	.word	0x40012100
 8001210:	40012200 	.word	0x40012200

08001214 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	2300      	movs	r3, #0
 8001222:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	f003 0320 	and.w	r3, r3, #32
 8001242:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d049      	beq.n	80012de <HAL_ADC_IRQHandler+0xca>
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d046      	beq.n	80012de <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	f003 0310 	and.w	r3, r3, #16
 8001258:	2b00      	cmp	r3, #0
 800125a:	d105      	bne.n	8001268 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d12b      	bne.n	80012ce <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800127a:	2b00      	cmp	r3, #0
 800127c:	d127      	bne.n	80012ce <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001284:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001296:	2b00      	cmp	r3, #0
 8001298:	d119      	bne.n	80012ce <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 0220 	bic.w	r2, r2, #32
 80012a8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d105      	bne.n	80012ce <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	f043 0201 	orr.w	r2, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff f924 	bl	800051c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f06f 0212 	mvn.w	r2, #18
 80012dc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ec:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d057      	beq.n	80013a4 <HAL_ADC_IRQHandler+0x190>
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d054      	beq.n	80013a4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f003 0310 	and.w	r3, r3, #16
 8001302:	2b00      	cmp	r3, #0
 8001304:	d105      	bne.n	8001312 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d139      	bne.n	8001394 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001326:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800132a:	2b00      	cmp	r3, #0
 800132c:	d006      	beq.n	800133c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001338:	2b00      	cmp	r3, #0
 800133a:	d12b      	bne.n	8001394 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001346:	2b00      	cmp	r3, #0
 8001348:	d124      	bne.n	8001394 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001354:	2b00      	cmp	r3, #0
 8001356:	d11d      	bne.n	8001394 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800135c:	2b00      	cmp	r3, #0
 800135e:	d119      	bne.n	8001394 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800136e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001384:	2b00      	cmp	r3, #0
 8001386:	d105      	bne.n	8001394 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	f043 0201 	orr.w	r2, r3, #1
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 fa8d 	bl	80018b4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f06f 020c 	mvn.w	r2, #12
 80013a2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013b2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d017      	beq.n	80013ea <HAL_ADC_IRQHandler+0x1d6>
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d014      	beq.n	80013ea <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d10d      	bne.n	80013ea <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f837 	bl	800144e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f06f 0201 	mvn.w	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f003 0320 	and.w	r3, r3, #32
 80013f0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013f8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d015      	beq.n	800142c <HAL_ADC_IRQHandler+0x218>
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d012      	beq.n	800142c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	f043 0202 	orr.w	r2, r3, #2
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f06f 0220 	mvn.w	r2, #32
 800141a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 f820 	bl	8001462 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f06f 0220 	mvn.w	r2, #32
 800142a:	601a      	str	r2, [r3, #0]
  }
}
 800142c:	bf00      	nop
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800148c:	2b01      	cmp	r3, #1
 800148e:	d101      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x1c>
 8001490:	2302      	movs	r3, #2
 8001492:	e105      	b.n	80016a0 <HAL_ADC_ConfigChannel+0x228>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b09      	cmp	r3, #9
 80014a2:	d925      	bls.n	80014f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68d9      	ldr	r1, [r3, #12]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	461a      	mov	r2, r3
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	3b1e      	subs	r3, #30
 80014ba:	2207      	movs	r2, #7
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43da      	mvns	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	400a      	ands	r2, r1
 80014c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68d9      	ldr	r1, [r3, #12]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	4603      	mov	r3, r0
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4403      	add	r3, r0
 80014e2:	3b1e      	subs	r3, #30
 80014e4:	409a      	lsls	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	e022      	b.n	8001536 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6919      	ldr	r1, [r3, #16]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	461a      	mov	r2, r3
 80014fe:	4613      	mov	r3, r2
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4413      	add	r3, r2
 8001504:	2207      	movs	r2, #7
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43da      	mvns	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	400a      	ands	r2, r1
 8001512:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6919      	ldr	r1, [r3, #16]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	b29b      	uxth	r3, r3
 8001524:	4618      	mov	r0, r3
 8001526:	4603      	mov	r3, r0
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4403      	add	r3, r0
 800152c:	409a      	lsls	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b06      	cmp	r3, #6
 800153c:	d824      	bhi.n	8001588 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	3b05      	subs	r3, #5
 8001550:	221f      	movs	r2, #31
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	400a      	ands	r2, r1
 800155e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	4618      	mov	r0, r3
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	3b05      	subs	r3, #5
 800157a:	fa00 f203 	lsl.w	r2, r0, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	635a      	str	r2, [r3, #52]	; 0x34
 8001586:	e04c      	b.n	8001622 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b0c      	cmp	r3, #12
 800158e:	d824      	bhi.n	80015da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	3b23      	subs	r3, #35	; 0x23
 80015a2:	221f      	movs	r2, #31
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43da      	mvns	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	400a      	ands	r2, r1
 80015b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	4618      	mov	r0, r3
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	3b23      	subs	r3, #35	; 0x23
 80015cc:	fa00 f203 	lsl.w	r2, r0, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	631a      	str	r2, [r3, #48]	; 0x30
 80015d8:	e023      	b.n	8001622 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	3b41      	subs	r3, #65	; 0x41
 80015ec:	221f      	movs	r2, #31
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43da      	mvns	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	400a      	ands	r2, r1
 80015fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	b29b      	uxth	r3, r3
 8001608:	4618      	mov	r0, r3
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	3b41      	subs	r3, #65	; 0x41
 8001616:	fa00 f203 	lsl.w	r2, r0, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001622:	4b22      	ldr	r3, [pc, #136]	; (80016ac <HAL_ADC_ConfigChannel+0x234>)
 8001624:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a21      	ldr	r2, [pc, #132]	; (80016b0 <HAL_ADC_ConfigChannel+0x238>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d109      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x1cc>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b12      	cmp	r3, #18
 8001636:	d105      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a19      	ldr	r2, [pc, #100]	; (80016b0 <HAL_ADC_ConfigChannel+0x238>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d123      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x21e>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b10      	cmp	r3, #16
 8001654:	d003      	beq.n	800165e <HAL_ADC_ConfigChannel+0x1e6>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b11      	cmp	r3, #17
 800165c:	d11b      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b10      	cmp	r3, #16
 8001670:	d111      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <HAL_ADC_ConfigChannel+0x23c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a10      	ldr	r2, [pc, #64]	; (80016b8 <HAL_ADC_ConfigChannel+0x240>)
 8001678:	fba2 2303 	umull	r2, r3, r2, r3
 800167c:	0c9a      	lsrs	r2, r3, #18
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001688:	e002      	b.n	8001690 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	3b01      	subs	r3, #1
 800168e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f9      	bne.n	800168a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	40012300 	.word	0x40012300
 80016b0:	40012000 	.word	0x40012000
 80016b4:	20000000 	.word	0x20000000
 80016b8:	431bde83 	.word	0x431bde83

080016bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016c4:	4b79      	ldr	r3, [pc, #484]	; (80018ac <ADC_Init+0x1f0>)
 80016c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	431a      	orrs	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6859      	ldr	r1, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	021a      	lsls	r2, r3, #8
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001714:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6859      	ldr	r1, [r3, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001736:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6899      	ldr	r1, [r3, #8]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68da      	ldr	r2, [r3, #12]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174e:	4a58      	ldr	r2, [pc, #352]	; (80018b0 <ADC_Init+0x1f4>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d022      	beq.n	800179a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001762:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6899      	ldr	r1, [r3, #8]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001784:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	e00f      	b.n	80017ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0202 	bic.w	r2, r2, #2
 80017c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6899      	ldr	r1, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	7e1b      	ldrb	r3, [r3, #24]
 80017d4:	005a      	lsls	r2, r3, #1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d01b      	beq.n	8001820 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001806:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6859      	ldr	r1, [r3, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	3b01      	subs	r3, #1
 8001814:	035a      	lsls	r2, r3, #13
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	e007      	b.n	8001830 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800182e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800183e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	3b01      	subs	r3, #1
 800184c:	051a      	lsls	r2, r3, #20
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001864:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6899      	ldr	r1, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001872:	025a      	lsls	r2, r3, #9
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800188a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6899      	ldr	r1, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	029a      	lsls	r2, r3, #10
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	609a      	str	r2, [r3, #8]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	40012300 	.word	0x40012300
 80018b0:	0f000001 	.word	0x0f000001

080018b4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e4:	4013      	ands	r3, r2
 80018e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fa:	4a04      	ldr	r2, [pc, #16]	; (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	60d3      	str	r3, [r2, #12]
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <__NVIC_GetPriorityGrouping+0x18>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	f003 0307 	and.w	r3, r3, #7
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	2b00      	cmp	r3, #0
 800193c:	db0b      	blt.n	8001956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	f003 021f 	and.w	r2, r3, #31
 8001944:	4907      	ldr	r1, [pc, #28]	; (8001964 <__NVIC_EnableIRQ+0x38>)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	095b      	lsrs	r3, r3, #5
 800194c:	2001      	movs	r0, #1
 800194e:	fa00 f202 	lsl.w	r2, r0, r2
 8001952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000e100 	.word	0xe000e100

08001968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	2b00      	cmp	r3, #0
 800197a:	db0a      	blt.n	8001992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	b2da      	uxtb	r2, r3
 8001980:	490c      	ldr	r1, [pc, #48]	; (80019b4 <__NVIC_SetPriority+0x4c>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	0112      	lsls	r2, r2, #4
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	440b      	add	r3, r1
 800198c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001990:	e00a      	b.n	80019a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4908      	ldr	r1, [pc, #32]	; (80019b8 <__NVIC_SetPriority+0x50>)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	3b04      	subs	r3, #4
 80019a0:	0112      	lsls	r2, r2, #4
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	440b      	add	r3, r1
 80019a6:	761a      	strb	r2, [r3, #24]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000e100 	.word	0xe000e100
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	; 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f1c3 0307 	rsb	r3, r3, #7
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	bf28      	it	cs
 80019da:	2304      	movcs	r3, #4
 80019dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3304      	adds	r3, #4
 80019e2:	2b06      	cmp	r3, #6
 80019e4:	d902      	bls.n	80019ec <NVIC_EncodePriority+0x30>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3b03      	subs	r3, #3
 80019ea:	e000      	b.n	80019ee <NVIC_EncodePriority+0x32>
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	f04f 32ff 	mov.w	r2, #4294967295
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43da      	mvns	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	401a      	ands	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	43d9      	mvns	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	4313      	orrs	r3, r2
         );
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3724      	adds	r7, #36	; 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a34:	d301      	bcc.n	8001a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00f      	b.n	8001a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <SysTick_Config+0x40>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a42:	210f      	movs	r1, #15
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	f7ff ff8e 	bl	8001968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <SysTick_Config+0x40>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <SysTick_Config+0x40>)
 8001a54:	2207      	movs	r2, #7
 8001a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	e000e010 	.word	0xe000e010

08001a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff29 	bl	80018c8 <__NVIC_SetPriorityGrouping>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a90:	f7ff ff3e 	bl	8001910 <__NVIC_GetPriorityGrouping>
 8001a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	6978      	ldr	r0, [r7, #20]
 8001a9c:	f7ff ff8e 	bl	80019bc <NVIC_EncodePriority>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff5d 	bl	8001968 <__NVIC_SetPriority>
}
 8001aae:	bf00      	nop
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff31 	bl	800192c <__NVIC_EnableIRQ>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ffa2 	bl	8001a24 <SysTick_Config>
 8001ae0:	4603      	mov	r3, r0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	; 0x24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
 8001b06:	e16b      	b.n	8001de0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b08:	2201      	movs	r2, #1
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	f040 815a 	bne.w	8001dda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d005      	beq.n	8001b3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d130      	bne.n	8001ba0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	2203      	movs	r2, #3
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b74:	2201      	movs	r2, #1
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 0201 	and.w	r2, r3, #1
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d017      	beq.n	8001bdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d123      	bne.n	8001c30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	08da      	lsrs	r2, r3, #3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3208      	adds	r2, #8
 8001bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	220f      	movs	r2, #15
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	08da      	lsrs	r2, r3, #3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3208      	adds	r2, #8
 8001c2a:	69b9      	ldr	r1, [r7, #24]
 8001c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0203 	and.w	r2, r3, #3
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 80b4 	beq.w	8001dda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	4b60      	ldr	r3, [pc, #384]	; (8001df8 <HAL_GPIO_Init+0x30c>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	4a5f      	ldr	r2, [pc, #380]	; (8001df8 <HAL_GPIO_Init+0x30c>)
 8001c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c80:	6453      	str	r3, [r2, #68]	; 0x44
 8001c82:	4b5d      	ldr	r3, [pc, #372]	; (8001df8 <HAL_GPIO_Init+0x30c>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c8e:	4a5b      	ldr	r2, [pc, #364]	; (8001dfc <HAL_GPIO_Init+0x310>)
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	089b      	lsrs	r3, r3, #2
 8001c94:	3302      	adds	r3, #2
 8001c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	220f      	movs	r2, #15
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a52      	ldr	r2, [pc, #328]	; (8001e00 <HAL_GPIO_Init+0x314>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d02b      	beq.n	8001d12 <HAL_GPIO_Init+0x226>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a51      	ldr	r2, [pc, #324]	; (8001e04 <HAL_GPIO_Init+0x318>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d025      	beq.n	8001d0e <HAL_GPIO_Init+0x222>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a50      	ldr	r2, [pc, #320]	; (8001e08 <HAL_GPIO_Init+0x31c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d01f      	beq.n	8001d0a <HAL_GPIO_Init+0x21e>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a4f      	ldr	r2, [pc, #316]	; (8001e0c <HAL_GPIO_Init+0x320>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d019      	beq.n	8001d06 <HAL_GPIO_Init+0x21a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4e      	ldr	r2, [pc, #312]	; (8001e10 <HAL_GPIO_Init+0x324>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d013      	beq.n	8001d02 <HAL_GPIO_Init+0x216>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a4d      	ldr	r2, [pc, #308]	; (8001e14 <HAL_GPIO_Init+0x328>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d00d      	beq.n	8001cfe <HAL_GPIO_Init+0x212>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4c      	ldr	r2, [pc, #304]	; (8001e18 <HAL_GPIO_Init+0x32c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d007      	beq.n	8001cfa <HAL_GPIO_Init+0x20e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a4b      	ldr	r2, [pc, #300]	; (8001e1c <HAL_GPIO_Init+0x330>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d101      	bne.n	8001cf6 <HAL_GPIO_Init+0x20a>
 8001cf2:	2307      	movs	r3, #7
 8001cf4:	e00e      	b.n	8001d14 <HAL_GPIO_Init+0x228>
 8001cf6:	2308      	movs	r3, #8
 8001cf8:	e00c      	b.n	8001d14 <HAL_GPIO_Init+0x228>
 8001cfa:	2306      	movs	r3, #6
 8001cfc:	e00a      	b.n	8001d14 <HAL_GPIO_Init+0x228>
 8001cfe:	2305      	movs	r3, #5
 8001d00:	e008      	b.n	8001d14 <HAL_GPIO_Init+0x228>
 8001d02:	2304      	movs	r3, #4
 8001d04:	e006      	b.n	8001d14 <HAL_GPIO_Init+0x228>
 8001d06:	2303      	movs	r3, #3
 8001d08:	e004      	b.n	8001d14 <HAL_GPIO_Init+0x228>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e002      	b.n	8001d14 <HAL_GPIO_Init+0x228>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <HAL_GPIO_Init+0x228>
 8001d12:	2300      	movs	r3, #0
 8001d14:	69fa      	ldr	r2, [r7, #28]
 8001d16:	f002 0203 	and.w	r2, r2, #3
 8001d1a:	0092      	lsls	r2, r2, #2
 8001d1c:	4093      	lsls	r3, r2
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d24:	4935      	ldr	r1, [pc, #212]	; (8001dfc <HAL_GPIO_Init+0x310>)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	089b      	lsrs	r3, r3, #2
 8001d2a:	3302      	adds	r3, #2
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d32:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d56:	4a32      	ldr	r2, [pc, #200]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d5c:	4b30      	ldr	r3, [pc, #192]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d80:	4a27      	ldr	r2, [pc, #156]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d86:	4b26      	ldr	r3, [pc, #152]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001daa:	4a1d      	ldr	r2, [pc, #116]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001db0:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dd4:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <HAL_GPIO_Init+0x334>)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	61fb      	str	r3, [r7, #28]
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	2b0f      	cmp	r3, #15
 8001de4:	f67f ae90 	bls.w	8001b08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001de8:	bf00      	nop
 8001dea:	bf00      	nop
 8001dec:	3724      	adds	r7, #36	; 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40013800 	.word	0x40013800
 8001e00:	40020000 	.word	0x40020000
 8001e04:	40020400 	.word	0x40020400
 8001e08:	40020800 	.word	0x40020800
 8001e0c:	40020c00 	.word	0x40020c00
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40021400 	.word	0x40021400
 8001e18:	40021800 	.word	0x40021800
 8001e1c:	40021c00 	.word	0x40021c00
 8001e20:	40013c00 	.word	0x40013c00

08001e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	807b      	strh	r3, [r7, #2]
 8001e30:	4613      	mov	r3, r2
 8001e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e34:	787b      	ldrb	r3, [r7, #1]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e3a:	887a      	ldrh	r2, [r7, #2]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e40:	e003      	b.n	8001e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e42:	887b      	ldrh	r3, [r7, #2]
 8001e44:	041a      	lsls	r2, r3, #16
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	619a      	str	r2, [r3, #24]
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b085      	sub	sp, #20
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e68:	887a      	ldrh	r2, [r7, #2]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	041a      	lsls	r2, r3, #16
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	43d9      	mvns	r1, r3
 8001e74:	887b      	ldrh	r3, [r7, #2]
 8001e76:	400b      	ands	r3, r1
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	619a      	str	r2, [r3, #24]
}
 8001e7e:	bf00      	nop
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001e8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8c:	b08f      	sub	sp, #60	; 0x3c
 8001e8e:	af0a      	add	r7, sp, #40	; 0x28
 8001e90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e054      	b.n	8001f46 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d106      	bne.n	8001ebc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f006 f854 	bl	8007f64 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d102      	bne.n	8001ed6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f003 f883 	bl	8004fe6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	603b      	str	r3, [r7, #0]
 8001ee6:	687e      	ldr	r6, [r7, #4]
 8001ee8:	466d      	mov	r5, sp
 8001eea:	f106 0410 	add.w	r4, r6, #16
 8001eee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001efa:	e885 0003 	stmia.w	r5, {r0, r1}
 8001efe:	1d33      	adds	r3, r6, #4
 8001f00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f02:	6838      	ldr	r0, [r7, #0]
 8001f04:	f002 fffd 	bl	8004f02 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f003 f87a 	bl	8005008 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	603b      	str	r3, [r7, #0]
 8001f1a:	687e      	ldr	r6, [r7, #4]
 8001f1c:	466d      	mov	r5, sp
 8001f1e:	f106 0410 	add.w	r4, r6, #16
 8001f22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f32:	1d33      	adds	r3, r6, #4
 8001f34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f36:	6838      	ldr	r0, [r7, #0]
 8001f38:	f003 fa02 	bl	8005340 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f4e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001f4e:	b590      	push	{r4, r7, lr}
 8001f50:	b089      	sub	sp, #36	; 0x24
 8001f52:	af04      	add	r7, sp, #16
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	4608      	mov	r0, r1
 8001f58:	4611      	mov	r1, r2
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	70fb      	strb	r3, [r7, #3]
 8001f60:	460b      	mov	r3, r1
 8001f62:	70bb      	strb	r3, [r7, #2]
 8001f64:	4613      	mov	r3, r2
 8001f66:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_HCD_HC_Init+0x28>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e076      	b.n	8002064 <HAL_HCD_HC_Init+0x116>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	212c      	movs	r1, #44	; 0x2c
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	4413      	add	r3, r2
 8001f8a:	333d      	adds	r3, #61	; 0x3d
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	212c      	movs	r1, #44	; 0x2c
 8001f96:	fb01 f303 	mul.w	r3, r1, r3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3338      	adds	r3, #56	; 0x38
 8001f9e:	787a      	ldrb	r2, [r7, #1]
 8001fa0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	212c      	movs	r1, #44	; 0x2c
 8001fa8:	fb01 f303 	mul.w	r3, r1, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	3340      	adds	r3, #64	; 0x40
 8001fb0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001fb2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	212c      	movs	r1, #44	; 0x2c
 8001fba:	fb01 f303 	mul.w	r3, r1, r3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3339      	adds	r3, #57	; 0x39
 8001fc2:	78fa      	ldrb	r2, [r7, #3]
 8001fc4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001fc6:	78fb      	ldrb	r3, [r7, #3]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	212c      	movs	r1, #44	; 0x2c
 8001fcc:	fb01 f303 	mul.w	r3, r1, r3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	333f      	adds	r3, #63	; 0x3f
 8001fd4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001fd8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	78ba      	ldrb	r2, [r7, #2]
 8001fde:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fe2:	b2d0      	uxtb	r0, r2
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	212c      	movs	r1, #44	; 0x2c
 8001fe8:	fb01 f303 	mul.w	r3, r1, r3
 8001fec:	4413      	add	r3, r2
 8001fee:	333a      	adds	r3, #58	; 0x3a
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001ff4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	da09      	bge.n	8002010 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	212c      	movs	r1, #44	; 0x2c
 8002002:	fb01 f303 	mul.w	r3, r1, r3
 8002006:	4413      	add	r3, r2
 8002008:	333b      	adds	r3, #59	; 0x3b
 800200a:	2201      	movs	r2, #1
 800200c:	701a      	strb	r2, [r3, #0]
 800200e:	e008      	b.n	8002022 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	212c      	movs	r1, #44	; 0x2c
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	4413      	add	r3, r2
 800201c:	333b      	adds	r3, #59	; 0x3b
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002022:	78fb      	ldrb	r3, [r7, #3]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	212c      	movs	r1, #44	; 0x2c
 8002028:	fb01 f303 	mul.w	r3, r1, r3
 800202c:	4413      	add	r3, r2
 800202e:	333c      	adds	r3, #60	; 0x3c
 8002030:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002034:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6818      	ldr	r0, [r3, #0]
 800203a:	787c      	ldrb	r4, [r7, #1]
 800203c:	78ba      	ldrb	r2, [r7, #2]
 800203e:	78f9      	ldrb	r1, [r7, #3]
 8002040:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002042:	9302      	str	r3, [sp, #8]
 8002044:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	4623      	mov	r3, r4
 8002052:	f003 fafb 	bl	800564c <USB_HC_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002062:	7bfb      	ldrb	r3, [r7, #15]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	bd90      	pop	{r4, r7, pc}

0800206c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_HCD_HC_Halt+0x1e>
 8002086:	2302      	movs	r3, #2
 8002088:	e00f      	b.n	80020aa <HAL_HCD_HC_Halt+0x3e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	78fa      	ldrb	r2, [r7, #3]
 8002098:	4611      	mov	r1, r2
 800209a:	4618      	mov	r0, r3
 800209c:	f003 fd4b 	bl	8005b36 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	4608      	mov	r0, r1
 80020be:	4611      	mov	r1, r2
 80020c0:	461a      	mov	r2, r3
 80020c2:	4603      	mov	r3, r0
 80020c4:	70fb      	strb	r3, [r7, #3]
 80020c6:	460b      	mov	r3, r1
 80020c8:	70bb      	strb	r3, [r7, #2]
 80020ca:	4613      	mov	r3, r2
 80020cc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80020ce:	78fb      	ldrb	r3, [r7, #3]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	212c      	movs	r1, #44	; 0x2c
 80020d4:	fb01 f303 	mul.w	r3, r1, r3
 80020d8:	4413      	add	r3, r2
 80020da:	333b      	adds	r3, #59	; 0x3b
 80020dc:	78ba      	ldrb	r2, [r7, #2]
 80020de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80020e0:	78fb      	ldrb	r3, [r7, #3]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	212c      	movs	r1, #44	; 0x2c
 80020e6:	fb01 f303 	mul.w	r3, r1, r3
 80020ea:	4413      	add	r3, r2
 80020ec:	333f      	adds	r3, #63	; 0x3f
 80020ee:	787a      	ldrb	r2, [r7, #1]
 80020f0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80020f2:	7c3b      	ldrb	r3, [r7, #16]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d112      	bne.n	800211e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	212c      	movs	r1, #44	; 0x2c
 80020fe:	fb01 f303 	mul.w	r3, r1, r3
 8002102:	4413      	add	r3, r2
 8002104:	3342      	adds	r3, #66	; 0x42
 8002106:	2203      	movs	r2, #3
 8002108:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800210a:	78fb      	ldrb	r3, [r7, #3]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	212c      	movs	r1, #44	; 0x2c
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	4413      	add	r3, r2
 8002116:	333d      	adds	r3, #61	; 0x3d
 8002118:	7f3a      	ldrb	r2, [r7, #28]
 800211a:	701a      	strb	r2, [r3, #0]
 800211c:	e008      	b.n	8002130 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	212c      	movs	r1, #44	; 0x2c
 8002124:	fb01 f303 	mul.w	r3, r1, r3
 8002128:	4413      	add	r3, r2
 800212a:	3342      	adds	r3, #66	; 0x42
 800212c:	2202      	movs	r2, #2
 800212e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002130:	787b      	ldrb	r3, [r7, #1]
 8002132:	2b03      	cmp	r3, #3
 8002134:	f200 80c6 	bhi.w	80022c4 <HAL_HCD_HC_SubmitRequest+0x210>
 8002138:	a201      	add	r2, pc, #4	; (adr r2, 8002140 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800213a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213e:	bf00      	nop
 8002140:	08002151 	.word	0x08002151
 8002144:	080022b1 	.word	0x080022b1
 8002148:	080021b5 	.word	0x080021b5
 800214c:	08002233 	.word	0x08002233
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002150:	7c3b      	ldrb	r3, [r7, #16]
 8002152:	2b01      	cmp	r3, #1
 8002154:	f040 80b8 	bne.w	80022c8 <HAL_HCD_HC_SubmitRequest+0x214>
 8002158:	78bb      	ldrb	r3, [r7, #2]
 800215a:	2b00      	cmp	r3, #0
 800215c:	f040 80b4 	bne.w	80022c8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002160:	8b3b      	ldrh	r3, [r7, #24]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d108      	bne.n	8002178 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002166:	78fb      	ldrb	r3, [r7, #3]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	212c      	movs	r1, #44	; 0x2c
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	4413      	add	r3, r2
 8002172:	3355      	adds	r3, #85	; 0x55
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	212c      	movs	r1, #44	; 0x2c
 800217e:	fb01 f303 	mul.w	r3, r1, r3
 8002182:	4413      	add	r3, r2
 8002184:	3355      	adds	r3, #85	; 0x55
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d109      	bne.n	80021a0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	212c      	movs	r1, #44	; 0x2c
 8002192:	fb01 f303 	mul.w	r3, r1, r3
 8002196:	4413      	add	r3, r2
 8002198:	3342      	adds	r3, #66	; 0x42
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800219e:	e093      	b.n	80022c8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021a0:	78fb      	ldrb	r3, [r7, #3]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	212c      	movs	r1, #44	; 0x2c
 80021a6:	fb01 f303 	mul.w	r3, r1, r3
 80021aa:	4413      	add	r3, r2
 80021ac:	3342      	adds	r3, #66	; 0x42
 80021ae:	2202      	movs	r2, #2
 80021b0:	701a      	strb	r2, [r3, #0]
      break;
 80021b2:	e089      	b.n	80022c8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80021b4:	78bb      	ldrb	r3, [r7, #2]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d11d      	bne.n	80021f6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	212c      	movs	r1, #44	; 0x2c
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	3355      	adds	r3, #85	; 0x55
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d109      	bne.n	80021e2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	212c      	movs	r1, #44	; 0x2c
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	4413      	add	r3, r2
 80021da:	3342      	adds	r3, #66	; 0x42
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80021e0:	e073      	b.n	80022ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	212c      	movs	r1, #44	; 0x2c
 80021e8:	fb01 f303 	mul.w	r3, r1, r3
 80021ec:	4413      	add	r3, r2
 80021ee:	3342      	adds	r3, #66	; 0x42
 80021f0:	2202      	movs	r2, #2
 80021f2:	701a      	strb	r2, [r3, #0]
      break;
 80021f4:	e069      	b.n	80022ca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	212c      	movs	r1, #44	; 0x2c
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	4413      	add	r3, r2
 8002202:	3354      	adds	r3, #84	; 0x54
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d109      	bne.n	800221e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	212c      	movs	r1, #44	; 0x2c
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	4413      	add	r3, r2
 8002216:	3342      	adds	r3, #66	; 0x42
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
      break;
 800221c:	e055      	b.n	80022ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	212c      	movs	r1, #44	; 0x2c
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	4413      	add	r3, r2
 800222a:	3342      	adds	r3, #66	; 0x42
 800222c:	2202      	movs	r2, #2
 800222e:	701a      	strb	r2, [r3, #0]
      break;
 8002230:	e04b      	b.n	80022ca <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002232:	78bb      	ldrb	r3, [r7, #2]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d11d      	bne.n	8002274 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	212c      	movs	r1, #44	; 0x2c
 800223e:	fb01 f303 	mul.w	r3, r1, r3
 8002242:	4413      	add	r3, r2
 8002244:	3355      	adds	r3, #85	; 0x55
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d109      	bne.n	8002260 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	212c      	movs	r1, #44	; 0x2c
 8002252:	fb01 f303 	mul.w	r3, r1, r3
 8002256:	4413      	add	r3, r2
 8002258:	3342      	adds	r3, #66	; 0x42
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800225e:	e034      	b.n	80022ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	212c      	movs	r1, #44	; 0x2c
 8002266:	fb01 f303 	mul.w	r3, r1, r3
 800226a:	4413      	add	r3, r2
 800226c:	3342      	adds	r3, #66	; 0x42
 800226e:	2202      	movs	r2, #2
 8002270:	701a      	strb	r2, [r3, #0]
      break;
 8002272:	e02a      	b.n	80022ca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	3354      	adds	r3, #84	; 0x54
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d109      	bne.n	800229c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	212c      	movs	r1, #44	; 0x2c
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4413      	add	r3, r2
 8002294:	3342      	adds	r3, #66	; 0x42
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
      break;
 800229a:	e016      	b.n	80022ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	212c      	movs	r1, #44	; 0x2c
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	3342      	adds	r3, #66	; 0x42
 80022aa:	2202      	movs	r2, #2
 80022ac:	701a      	strb	r2, [r3, #0]
      break;
 80022ae:	e00c      	b.n	80022ca <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022b0:	78fb      	ldrb	r3, [r7, #3]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	212c      	movs	r1, #44	; 0x2c
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	3342      	adds	r3, #66	; 0x42
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]
      break;
 80022c2:	e002      	b.n	80022ca <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80022c4:	bf00      	nop
 80022c6:	e000      	b.n	80022ca <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80022c8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80022ca:	78fb      	ldrb	r3, [r7, #3]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	212c      	movs	r1, #44	; 0x2c
 80022d0:	fb01 f303 	mul.w	r3, r1, r3
 80022d4:	4413      	add	r3, r2
 80022d6:	3344      	adds	r3, #68	; 0x44
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	8b3a      	ldrh	r2, [r7, #24]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	202c      	movs	r0, #44	; 0x2c
 80022e4:	fb00 f303 	mul.w	r3, r0, r3
 80022e8:	440b      	add	r3, r1
 80022ea:	334c      	adds	r3, #76	; 0x4c
 80022ec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	212c      	movs	r1, #44	; 0x2c
 80022f4:	fb01 f303 	mul.w	r3, r1, r3
 80022f8:	4413      	add	r3, r2
 80022fa:	3360      	adds	r3, #96	; 0x60
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	212c      	movs	r1, #44	; 0x2c
 8002306:	fb01 f303 	mul.w	r3, r1, r3
 800230a:	4413      	add	r3, r2
 800230c:	3350      	adds	r3, #80	; 0x50
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	212c      	movs	r1, #44	; 0x2c
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	4413      	add	r3, r2
 800231e:	3339      	adds	r3, #57	; 0x39
 8002320:	78fa      	ldrb	r2, [r7, #3]
 8002322:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	212c      	movs	r1, #44	; 0x2c
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	4413      	add	r3, r2
 8002330:	3361      	adds	r3, #97	; 0x61
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	78fb      	ldrb	r3, [r7, #3]
 800233c:	222c      	movs	r2, #44	; 0x2c
 800233e:	fb02 f303 	mul.w	r3, r2, r3
 8002342:	3338      	adds	r3, #56	; 0x38
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	18d1      	adds	r1, r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	b2db      	uxtb	r3, r3
 800234e:	461a      	mov	r2, r3
 8002350:	f003 fa9e 	bl	8005890 <USB_HC_StartXfer>
 8002354:	4603      	mov	r3, r0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop

08002360 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f002 ff9f 	bl	80052ba <USB_GetMode>
 800237c:	4603      	mov	r3, r0
 800237e:	2b01      	cmp	r3, #1
 8002380:	f040 80f6 	bne.w	8002570 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f002 ff83 	bl	8005294 <USB_ReadInterrupts>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80ec 	beq.w	800256e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f002 ff7a 	bl	8005294 <USB_ReadInterrupts>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023aa:	d104      	bne.n	80023b6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80023b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f002 ff6a 	bl	8005294 <USB_ReadInterrupts>
 80023c0:	4603      	mov	r3, r0
 80023c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023ca:	d104      	bne.n	80023d6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80023d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f002 ff5a 	bl	8005294 <USB_ReadInterrupts>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023ea:	d104      	bne.n	80023f6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f002 ff4a 	bl	8005294 <USB_ReadInterrupts>
 8002400:	4603      	mov	r3, r0
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b02      	cmp	r3, #2
 8002408:	d103      	bne.n	8002412 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2202      	movs	r2, #2
 8002410:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f002 ff3c 	bl	8005294 <USB_ReadInterrupts>
 800241c:	4603      	mov	r3, r0
 800241e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002422:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002426:	d11c      	bne.n	8002462 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002430:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10f      	bne.n	8002462 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002442:	2110      	movs	r1, #16
 8002444:	6938      	ldr	r0, [r7, #16]
 8002446:	f002 fe2b 	bl	80050a0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800244a:	6938      	ldr	r0, [r7, #16]
 800244c:	f002 fe5c 	bl	8005108 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2101      	movs	r1, #1
 8002456:	4618      	mov	r0, r3
 8002458:	f003 f832 	bl	80054c0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f005 fdff 	bl	8008060 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f002 ff14 	bl	8005294 <USB_ReadInterrupts>
 800246c:	4603      	mov	r3, r0
 800246e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002472:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002476:	d102      	bne.n	800247e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f001 f89e 	bl	80035ba <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f002 ff06 	bl	8005294 <USB_ReadInterrupts>
 8002488:	4603      	mov	r3, r0
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b08      	cmp	r3, #8
 8002490:	d106      	bne.n	80024a0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f005 fdc8 	bl	8008028 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2208      	movs	r2, #8
 800249e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f002 fef5 	bl	8005294 <USB_ReadInterrupts>
 80024aa:	4603      	mov	r3, r0
 80024ac:	f003 0310 	and.w	r3, r3, #16
 80024b0:	2b10      	cmp	r3, #16
 80024b2:	d101      	bne.n	80024b8 <HAL_HCD_IRQHandler+0x158>
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <HAL_HCD_IRQHandler+0x15a>
 80024b8:	2300      	movs	r3, #0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d012      	beq.n	80024e4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699a      	ldr	r2, [r3, #24]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0210 	bic.w	r2, r2, #16
 80024cc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 ffa1 	bl	8003416 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699a      	ldr	r2, [r3, #24]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0210 	orr.w	r2, r2, #16
 80024e2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f002 fed3 	bl	8005294 <USB_ReadInterrupts>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024f8:	d13a      	bne.n	8002570 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f003 fb08 	bl	8005b14 <USB_HC_ReadInterrupt>
 8002504:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	e025      	b.n	8002558 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d018      	beq.n	8002552 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	015a      	lsls	r2, r3, #5
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4413      	add	r3, r2
 8002528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002536:	d106      	bne.n	8002546 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	4619      	mov	r1, r3
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f8ab 	bl	800269a <HCD_HC_IN_IRQHandler>
 8002544:	e005      	b.n	8002552 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	b2db      	uxtb	r3, r3
 800254a:	4619      	mov	r1, r3
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 fbf9 	bl	8002d44 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	3301      	adds	r3, #1
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	429a      	cmp	r2, r3
 8002560:	d3d4      	bcc.n	800250c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800256a:	615a      	str	r2, [r3, #20]
 800256c:	e000      	b.n	8002570 <HAL_HCD_IRQHandler+0x210>
      return;
 800256e:	bf00      	nop
    }
  }
}
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_HCD_Start+0x16>
 8002588:	2302      	movs	r3, #2
 800258a:	e013      	b.n	80025b4 <HAL_HCD_Start+0x3e>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2101      	movs	r1, #1
 800259a:	4618      	mov	r0, r3
 800259c:	f002 fff4 	bl	8005588 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f002 fd0d 	bl	8004fc4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_HCD_Stop+0x16>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e00d      	b.n	80025ee <HAL_HCD_Stop+0x32>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f003 fbe2 	bl	8005da8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f002 ff96 	bl	8005534 <USB_ResetPort>
 8002608:	4603      	mov	r3, r0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	460b      	mov	r3, r1
 800261c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	212c      	movs	r1, #44	; 0x2c
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	4413      	add	r3, r2
 800262a:	3360      	adds	r3, #96	; 0x60
 800262c:	781b      	ldrb	r3, [r3, #0]
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	460b      	mov	r3, r1
 8002644:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002646:	78fb      	ldrb	r3, [r7, #3]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	212c      	movs	r1, #44	; 0x2c
 800264c:	fb01 f303 	mul.w	r3, r1, r3
 8002650:	4413      	add	r3, r2
 8002652:	3350      	adds	r3, #80	; 0x50
 8002654:	681b      	ldr	r3, [r3, #0]
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f002 ffda 	bl	8005628 <USB_GetCurrentFrame>
 8002674:	4603      	mov	r3, r0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f002 ffb5 	bl	80055fa <USB_GetHostSpeed>
 8002690:	4603      	mov	r3, r0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b086      	sub	sp, #24
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	460b      	mov	r3, r1
 80026a4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d11a      	bne.n	8002700 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d6:	461a      	mov	r2, r3
 80026d8:	2304      	movs	r3, #4
 80026da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	212c      	movs	r1, #44	; 0x2c
 80026e2:	fb01 f303 	mul.w	r3, r1, r3
 80026e6:	4413      	add	r3, r2
 80026e8:	3361      	adds	r3, #97	; 0x61
 80026ea:	2206      	movs	r2, #6
 80026ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	4611      	mov	r1, r2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f003 fa1c 	bl	8005b36 <USB_HC_Halt>
 80026fe:	e0af      	b.n	8002860 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002716:	d11b      	bne.n	8002750 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4413      	add	r3, r2
 8002720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002724:	461a      	mov	r2, r3
 8002726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800272a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	212c      	movs	r1, #44	; 0x2c
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	4413      	add	r3, r2
 8002738:	3361      	adds	r3, #97	; 0x61
 800273a:	2207      	movs	r2, #7
 800273c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f003 f9f4 	bl	8005b36 <USB_HC_Halt>
 800274e:	e087      	b.n	8002860 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4413      	add	r3, r2
 8002758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 0320 	and.w	r3, r3, #32
 8002762:	2b20      	cmp	r3, #32
 8002764:	d109      	bne.n	800277a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4413      	add	r3, r2
 800276e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002772:	461a      	mov	r2, r3
 8002774:	2320      	movs	r3, #32
 8002776:	6093      	str	r3, [r2, #8]
 8002778:	e072      	b.n	8002860 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	015a      	lsls	r2, r3, #5
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4413      	add	r3, r2
 8002782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	2b08      	cmp	r3, #8
 800278e:	d11a      	bne.n	80027c6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279c:	461a      	mov	r2, r3
 800279e:	2308      	movs	r3, #8
 80027a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	3361      	adds	r3, #97	; 0x61
 80027b0:	2205      	movs	r2, #5
 80027b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f003 f9b9 	bl	8005b36 <USB_HC_Halt>
 80027c4:	e04c      	b.n	8002860 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027dc:	d11b      	bne.n	8002816 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ea:	461a      	mov	r2, r3
 80027ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	3361      	adds	r3, #97	; 0x61
 8002800:	2208      	movs	r2, #8
 8002802:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	4611      	mov	r1, r2
 800280e:	4618      	mov	r0, r3
 8002810:	f003 f991 	bl	8005b36 <USB_HC_Halt>
 8002814:	e024      	b.n	8002860 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4413      	add	r3, r2
 800281e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002828:	2b80      	cmp	r3, #128	; 0x80
 800282a:	d119      	bne.n	8002860 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002838:	461a      	mov	r2, r3
 800283a:	2380      	movs	r3, #128	; 0x80
 800283c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	212c      	movs	r1, #44	; 0x2c
 8002844:	fb01 f303 	mul.w	r3, r1, r3
 8002848:	4413      	add	r3, r2
 800284a:	3361      	adds	r3, #97	; 0x61
 800284c:	2206      	movs	r2, #6
 800284e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	4611      	mov	r1, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f003 f96b 	bl	8005b36 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4413      	add	r3, r2
 8002868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002876:	d112      	bne.n	800289e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f003 f957 	bl	8005b36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002894:	461a      	mov	r2, r3
 8002896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800289a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800289c:	e24e      	b.n	8002d3c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	015a      	lsls	r2, r3, #5
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4413      	add	r3, r2
 80028a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	f040 80df 	bne.w	8002a74 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d019      	beq.n	80028f2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	212c      	movs	r1, #44	; 0x2c
 80028c4:	fb01 f303 	mul.w	r3, r1, r3
 80028c8:	4413      	add	r3, r2
 80028ca:	3348      	adds	r3, #72	; 0x48
 80028cc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	0159      	lsls	r1, r3, #5
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	440b      	add	r3, r1
 80028d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80028e0:	1ad2      	subs	r2, r2, r3
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	202c      	movs	r0, #44	; 0x2c
 80028e8:	fb00 f303 	mul.w	r3, r0, r3
 80028ec:	440b      	add	r3, r1
 80028ee:	3350      	adds	r3, #80	; 0x50
 80028f0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	212c      	movs	r1, #44	; 0x2c
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	3361      	adds	r3, #97	; 0x61
 8002900:	2201      	movs	r2, #1
 8002902:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	212c      	movs	r1, #44	; 0x2c
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	4413      	add	r3, r2
 8002910:	335c      	adds	r3, #92	; 0x5c
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4413      	add	r3, r2
 800291e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002922:	461a      	mov	r2, r3
 8002924:	2301      	movs	r3, #1
 8002926:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	212c      	movs	r1, #44	; 0x2c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	333f      	adds	r3, #63	; 0x3f
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d009      	beq.n	8002950 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	212c      	movs	r1, #44	; 0x2c
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	4413      	add	r3, r2
 8002948:	333f      	adds	r3, #63	; 0x3f
 800294a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800294c:	2b02      	cmp	r3, #2
 800294e:	d111      	bne.n	8002974 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	4611      	mov	r1, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f003 f8eb 	bl	8005b36 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4413      	add	r3, r2
 8002968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296c:	461a      	mov	r2, r3
 800296e:	2310      	movs	r3, #16
 8002970:	6093      	str	r3, [r2, #8]
 8002972:	e03a      	b.n	80029ea <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	212c      	movs	r1, #44	; 0x2c
 800297a:	fb01 f303 	mul.w	r3, r1, r3
 800297e:	4413      	add	r3, r2
 8002980:	333f      	adds	r3, #63	; 0x3f
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d009      	beq.n	800299c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	212c      	movs	r1, #44	; 0x2c
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	4413      	add	r3, r2
 8002994:	333f      	adds	r3, #63	; 0x3f
 8002996:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002998:	2b01      	cmp	r3, #1
 800299a:	d126      	bne.n	80029ea <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	0151      	lsls	r1, r2, #5
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	440a      	add	r2, r1
 80029b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80029ba:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	212c      	movs	r1, #44	; 0x2c
 80029c2:	fb01 f303 	mul.w	r3, r1, r3
 80029c6:	4413      	add	r3, r2
 80029c8:	3360      	adds	r3, #96	; 0x60
 80029ca:	2201      	movs	r2, #1
 80029cc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	b2d9      	uxtb	r1, r3
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	202c      	movs	r0, #44	; 0x2c
 80029d8:	fb00 f303 	mul.w	r3, r0, r3
 80029dc:	4413      	add	r3, r2
 80029de:	3360      	adds	r3, #96	; 0x60
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f005 fb49 	bl	800807c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d12b      	bne.n	8002a4a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	212c      	movs	r1, #44	; 0x2c
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	3348      	adds	r3, #72	; 0x48
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	202c      	movs	r0, #44	; 0x2c
 8002a08:	fb00 f202 	mul.w	r2, r0, r2
 8002a0c:	440a      	add	r2, r1
 8002a0e:	3240      	adds	r2, #64	; 0x40
 8002a10:	8812      	ldrh	r2, [r2, #0]
 8002a12:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 818e 	beq.w	8002d3c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	212c      	movs	r1, #44	; 0x2c
 8002a26:	fb01 f303 	mul.w	r3, r1, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3354      	adds	r3, #84	; 0x54
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	f083 0301 	eor.w	r3, r3, #1
 8002a34:	b2d8      	uxtb	r0, r3
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	212c      	movs	r1, #44	; 0x2c
 8002a3c:	fb01 f303 	mul.w	r3, r1, r3
 8002a40:	4413      	add	r3, r2
 8002a42:	3354      	adds	r3, #84	; 0x54
 8002a44:	4602      	mov	r2, r0
 8002a46:	701a      	strb	r2, [r3, #0]
}
 8002a48:	e178      	b.n	8002d3c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	212c      	movs	r1, #44	; 0x2c
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	3354      	adds	r3, #84	; 0x54
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	f083 0301 	eor.w	r3, r3, #1
 8002a5e:	b2d8      	uxtb	r0, r3
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	212c      	movs	r1, #44	; 0x2c
 8002a66:	fb01 f303 	mul.w	r3, r1, r3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3354      	adds	r3, #84	; 0x54
 8002a6e:	4602      	mov	r2, r0
 8002a70:	701a      	strb	r2, [r3, #0]
}
 8002a72:	e163      	b.n	8002d3c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	f040 80f6 	bne.w	8002c78 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	212c      	movs	r1, #44	; 0x2c
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	3361      	adds	r3, #97	; 0x61
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d109      	bne.n	8002ab4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	212c      	movs	r1, #44	; 0x2c
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	3360      	adds	r3, #96	; 0x60
 8002aae:	2201      	movs	r2, #1
 8002ab0:	701a      	strb	r2, [r3, #0]
 8002ab2:	e0c9      	b.n	8002c48 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	212c      	movs	r1, #44	; 0x2c
 8002aba:	fb01 f303 	mul.w	r3, r1, r3
 8002abe:	4413      	add	r3, r2
 8002ac0:	3361      	adds	r3, #97	; 0x61
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b05      	cmp	r3, #5
 8002ac6:	d109      	bne.n	8002adc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	212c      	movs	r1, #44	; 0x2c
 8002ace:	fb01 f303 	mul.w	r3, r1, r3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3360      	adds	r3, #96	; 0x60
 8002ad6:	2205      	movs	r2, #5
 8002ad8:	701a      	strb	r2, [r3, #0]
 8002ada:	e0b5      	b.n	8002c48 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	212c      	movs	r1, #44	; 0x2c
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3361      	adds	r3, #97	; 0x61
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b06      	cmp	r3, #6
 8002aee:	d009      	beq.n	8002b04 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	212c      	movs	r1, #44	; 0x2c
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	3361      	adds	r3, #97	; 0x61
 8002afe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d150      	bne.n	8002ba6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	212c      	movs	r1, #44	; 0x2c
 8002b0a:	fb01 f303 	mul.w	r3, r1, r3
 8002b0e:	4413      	add	r3, r2
 8002b10:	335c      	adds	r3, #92	; 0x5c
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	202c      	movs	r0, #44	; 0x2c
 8002b1c:	fb00 f303 	mul.w	r3, r0, r3
 8002b20:	440b      	add	r3, r1
 8002b22:	335c      	adds	r3, #92	; 0x5c
 8002b24:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	212c      	movs	r1, #44	; 0x2c
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	335c      	adds	r3, #92	; 0x5c
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d912      	bls.n	8002b60 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	212c      	movs	r1, #44	; 0x2c
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	335c      	adds	r3, #92	; 0x5c
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	212c      	movs	r1, #44	; 0x2c
 8002b52:	fb01 f303 	mul.w	r3, r1, r3
 8002b56:	4413      	add	r3, r2
 8002b58:	3360      	adds	r3, #96	; 0x60
 8002b5a:	2204      	movs	r2, #4
 8002b5c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b5e:	e073      	b.n	8002c48 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	212c      	movs	r1, #44	; 0x2c
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3360      	adds	r3, #96	; 0x60
 8002b6e:	2202      	movs	r2, #2
 8002b70:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b88:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b90:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ba4:	e050      	b.n	8002c48 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	212c      	movs	r1, #44	; 0x2c
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3361      	adds	r3, #97	; 0x61
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d122      	bne.n	8002c00 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	212c      	movs	r1, #44	; 0x2c
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3360      	adds	r3, #96	; 0x60
 8002bc8:	2202      	movs	r2, #2
 8002bca:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002be2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bea:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	015a      	lsls	r2, r3, #5
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	e023      	b.n	8002c48 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	212c      	movs	r1, #44	; 0x2c
 8002c06:	fb01 f303 	mul.w	r3, r1, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3361      	adds	r3, #97	; 0x61
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b07      	cmp	r3, #7
 8002c12:	d119      	bne.n	8002c48 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	212c      	movs	r1, #44	; 0x2c
 8002c1a:	fb01 f303 	mul.w	r3, r1, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	335c      	adds	r3, #92	; 0x5c
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	202c      	movs	r0, #44	; 0x2c
 8002c2c:	fb00 f303 	mul.w	r3, r0, r3
 8002c30:	440b      	add	r3, r1
 8002c32:	335c      	adds	r3, #92	; 0x5c
 8002c34:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	212c      	movs	r1, #44	; 0x2c
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	4413      	add	r3, r2
 8002c42:	3360      	adds	r3, #96	; 0x60
 8002c44:	2204      	movs	r2, #4
 8002c46:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c54:	461a      	mov	r2, r3
 8002c56:	2302      	movs	r3, #2
 8002c58:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	b2d9      	uxtb	r1, r3
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	202c      	movs	r0, #44	; 0x2c
 8002c64:	fb00 f303 	mul.w	r3, r0, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	3360      	adds	r3, #96	; 0x60
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f005 fa03 	bl	800807c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c76:	e061      	b.n	8002d3c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b10      	cmp	r3, #16
 8002c8c:	d156      	bne.n	8002d3c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	212c      	movs	r1, #44	; 0x2c
 8002c94:	fb01 f303 	mul.w	r3, r1, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	333f      	adds	r3, #63	; 0x3f
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d111      	bne.n	8002cc6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	212c      	movs	r1, #44	; 0x2c
 8002ca8:	fb01 f303 	mul.w	r3, r1, r3
 8002cac:	4413      	add	r3, r2
 8002cae:	335c      	adds	r3, #92	; 0x5c
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f002 ff39 	bl	8005b36 <USB_HC_Halt>
 8002cc4:	e031      	b.n	8002d2a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	212c      	movs	r1, #44	; 0x2c
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	333f      	adds	r3, #63	; 0x3f
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d009      	beq.n	8002cee <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	212c      	movs	r1, #44	; 0x2c
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	333f      	adds	r3, #63	; 0x3f
 8002ce8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d11d      	bne.n	8002d2a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	212c      	movs	r1, #44	; 0x2c
 8002cf4:	fb01 f303 	mul.w	r3, r1, r3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	335c      	adds	r3, #92	; 0x5c
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d110      	bne.n	8002d2a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	212c      	movs	r1, #44	; 0x2c
 8002d0e:	fb01 f303 	mul.w	r3, r1, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	3361      	adds	r3, #97	; 0x61
 8002d16:	2203      	movs	r2, #3
 8002d18:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	4611      	mov	r1, r2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f002 ff06 	bl	8005b36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d36:	461a      	mov	r2, r3
 8002d38:	2310      	movs	r3, #16
 8002d3a:	6093      	str	r3, [r2, #8]
}
 8002d3c:	bf00      	nop
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d11a      	bne.n	8002daa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d80:	461a      	mov	r2, r3
 8002d82:	2304      	movs	r3, #4
 8002d84:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	212c      	movs	r1, #44	; 0x2c
 8002d8c:	fb01 f303 	mul.w	r3, r1, r3
 8002d90:	4413      	add	r3, r2
 8002d92:	3361      	adds	r3, #97	; 0x61
 8002d94:	2206      	movs	r2, #6
 8002d96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	4611      	mov	r1, r2
 8002da2:	4618      	mov	r0, r3
 8002da4:	f002 fec7 	bl	8005b36 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002da8:	e331      	b.n	800340e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d12e      	bne.n	8002e1e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dcc:	461a      	mov	r2, r3
 8002dce:	2320      	movs	r3, #32
 8002dd0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	212c      	movs	r1, #44	; 0x2c
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	4413      	add	r3, r2
 8002dde:	333d      	adds	r3, #61	; 0x3d
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	f040 8313 	bne.w	800340e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	212c      	movs	r1, #44	; 0x2c
 8002dee:	fb01 f303 	mul.w	r3, r1, r3
 8002df2:	4413      	add	r3, r2
 8002df4:	333d      	adds	r3, #61	; 0x3d
 8002df6:	2200      	movs	r2, #0
 8002df8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	212c      	movs	r1, #44	; 0x2c
 8002e00:	fb01 f303 	mul.w	r3, r1, r3
 8002e04:	4413      	add	r3, r2
 8002e06:	3360      	adds	r3, #96	; 0x60
 8002e08:	2202      	movs	r2, #2
 8002e0a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	4611      	mov	r1, r2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f002 fe8d 	bl	8005b36 <USB_HC_Halt>
}
 8002e1c:	e2f7      	b.n	800340e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	015a      	lsls	r2, r3, #5
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e34:	d112      	bne.n	8002e5c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e42:	461a      	mov	r2, r3
 8002e44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e48:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f002 fe6e 	bl	8005b36 <USB_HC_Halt>
}
 8002e5a:	e2d8      	b.n	800340e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d140      	bne.n	8002ef4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	212c      	movs	r1, #44	; 0x2c
 8002e78:	fb01 f303 	mul.w	r3, r1, r3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	335c      	adds	r3, #92	; 0x5c
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e96:	2b40      	cmp	r3, #64	; 0x40
 8002e98:	d111      	bne.n	8002ebe <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	212c      	movs	r1, #44	; 0x2c
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	333d      	adds	r3, #61	; 0x3d
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2340      	movs	r3, #64	; 0x40
 8002ebc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eca:	461a      	mov	r2, r3
 8002ecc:	2301      	movs	r3, #1
 8002ece:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	212c      	movs	r1, #44	; 0x2c
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	4413      	add	r3, r2
 8002edc:	3361      	adds	r3, #97	; 0x61
 8002ede:	2201      	movs	r2, #1
 8002ee0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	4611      	mov	r1, r2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f002 fe22 	bl	8005b36 <USB_HC_Halt>
}
 8002ef2:	e28c      	b.n	800340e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f06:	2b40      	cmp	r3, #64	; 0x40
 8002f08:	d12c      	bne.n	8002f64 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	212c      	movs	r1, #44	; 0x2c
 8002f10:	fb01 f303 	mul.w	r3, r1, r3
 8002f14:	4413      	add	r3, r2
 8002f16:	3361      	adds	r3, #97	; 0x61
 8002f18:	2204      	movs	r2, #4
 8002f1a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	212c      	movs	r1, #44	; 0x2c
 8002f22:	fb01 f303 	mul.w	r3, r1, r3
 8002f26:	4413      	add	r3, r2
 8002f28:	333d      	adds	r3, #61	; 0x3d
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	212c      	movs	r1, #44	; 0x2c
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	335c      	adds	r3, #92	; 0x5c
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f002 fdf3 	bl	8005b36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	2340      	movs	r3, #64	; 0x40
 8002f60:	6093      	str	r3, [r2, #8]
}
 8002f62:	e254      	b.n	800340e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d11a      	bne.n	8002fb0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f86:	461a      	mov	r2, r3
 8002f88:	2308      	movs	r3, #8
 8002f8a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	212c      	movs	r1, #44	; 0x2c
 8002f92:	fb01 f303 	mul.w	r3, r1, r3
 8002f96:	4413      	add	r3, r2
 8002f98:	3361      	adds	r3, #97	; 0x61
 8002f9a:	2205      	movs	r2, #5
 8002f9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f002 fdc4 	bl	8005b36 <USB_HC_Halt>
}
 8002fae:	e22e      	b.n	800340e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	2b10      	cmp	r3, #16
 8002fc4:	d140      	bne.n	8003048 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	212c      	movs	r1, #44	; 0x2c
 8002fcc:	fb01 f303 	mul.w	r3, r1, r3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	335c      	adds	r3, #92	; 0x5c
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	212c      	movs	r1, #44	; 0x2c
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3361      	adds	r3, #97	; 0x61
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	212c      	movs	r1, #44	; 0x2c
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	333d      	adds	r3, #61	; 0x3d
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d112      	bne.n	8003024 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	212c      	movs	r1, #44	; 0x2c
 8003004:	fb01 f303 	mul.w	r3, r1, r3
 8003008:	4413      	add	r3, r2
 800300a:	333c      	adds	r3, #60	; 0x3c
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d108      	bne.n	8003024 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	212c      	movs	r1, #44	; 0x2c
 8003018:	fb01 f303 	mul.w	r3, r1, r3
 800301c:	4413      	add	r3, r2
 800301e:	333d      	adds	r3, #61	; 0x3d
 8003020:	2201      	movs	r2, #1
 8003022:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	4611      	mov	r1, r2
 800302e:	4618      	mov	r0, r3
 8003030:	f002 fd81 	bl	8005b36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	4413      	add	r3, r2
 800303c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003040:	461a      	mov	r2, r3
 8003042:	2310      	movs	r3, #16
 8003044:	6093      	str	r3, [r2, #8]
}
 8003046:	e1e2      	b.n	800340e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	4413      	add	r3, r2
 8003050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305a:	2b80      	cmp	r3, #128	; 0x80
 800305c:	d164      	bne.n	8003128 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d111      	bne.n	800308a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	212c      	movs	r1, #44	; 0x2c
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	4413      	add	r3, r2
 8003072:	3361      	adds	r3, #97	; 0x61
 8003074:	2206      	movs	r2, #6
 8003076:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f002 fd57 	bl	8005b36 <USB_HC_Halt>
 8003088:	e044      	b.n	8003114 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	212c      	movs	r1, #44	; 0x2c
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	4413      	add	r3, r2
 8003096:	335c      	adds	r3, #92	; 0x5c
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	202c      	movs	r0, #44	; 0x2c
 80030a2:	fb00 f303 	mul.w	r3, r0, r3
 80030a6:	440b      	add	r3, r1
 80030a8:	335c      	adds	r3, #92	; 0x5c
 80030aa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	212c      	movs	r1, #44	; 0x2c
 80030b2:	fb01 f303 	mul.w	r3, r1, r3
 80030b6:	4413      	add	r3, r2
 80030b8:	335c      	adds	r3, #92	; 0x5c
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d920      	bls.n	8003102 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	212c      	movs	r1, #44	; 0x2c
 80030c6:	fb01 f303 	mul.w	r3, r1, r3
 80030ca:	4413      	add	r3, r2
 80030cc:	335c      	adds	r3, #92	; 0x5c
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	212c      	movs	r1, #44	; 0x2c
 80030d8:	fb01 f303 	mul.w	r3, r1, r3
 80030dc:	4413      	add	r3, r2
 80030de:	3360      	adds	r3, #96	; 0x60
 80030e0:	2204      	movs	r2, #4
 80030e2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	b2d9      	uxtb	r1, r3
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	202c      	movs	r0, #44	; 0x2c
 80030ee:	fb00 f303 	mul.w	r3, r0, r3
 80030f2:	4413      	add	r3, r2
 80030f4:	3360      	adds	r3, #96	; 0x60
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f004 ffbe 	bl	800807c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003100:	e008      	b.n	8003114 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	212c      	movs	r1, #44	; 0x2c
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	4413      	add	r3, r2
 800310e:	3360      	adds	r3, #96	; 0x60
 8003110:	2202      	movs	r2, #2
 8003112:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	015a      	lsls	r2, r3, #5
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	4413      	add	r3, r2
 800311c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003120:	461a      	mov	r2, r3
 8003122:	2380      	movs	r3, #128	; 0x80
 8003124:	6093      	str	r3, [r2, #8]
}
 8003126:	e172      	b.n	800340e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	4413      	add	r3, r2
 8003130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800313e:	d11b      	bne.n	8003178 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	212c      	movs	r1, #44	; 0x2c
 8003146:	fb01 f303 	mul.w	r3, r1, r3
 800314a:	4413      	add	r3, r2
 800314c:	3361      	adds	r3, #97	; 0x61
 800314e:	2208      	movs	r2, #8
 8003150:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	4611      	mov	r1, r2
 800315c:	4618      	mov	r0, r3
 800315e:	f002 fcea 	bl	8005b36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	4413      	add	r3, r2
 800316a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316e:	461a      	mov	r2, r3
 8003170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003174:	6093      	str	r3, [r2, #8]
}
 8003176:	e14a      	b.n	800340e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	4413      	add	r3, r2
 8003180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b02      	cmp	r3, #2
 800318c:	f040 813f 	bne.w	800340e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	212c      	movs	r1, #44	; 0x2c
 8003196:	fb01 f303 	mul.w	r3, r1, r3
 800319a:	4413      	add	r3, r2
 800319c:	3361      	adds	r3, #97	; 0x61
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d17d      	bne.n	80032a0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	212c      	movs	r1, #44	; 0x2c
 80031aa:	fb01 f303 	mul.w	r3, r1, r3
 80031ae:	4413      	add	r3, r2
 80031b0:	3360      	adds	r3, #96	; 0x60
 80031b2:	2201      	movs	r2, #1
 80031b4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	212c      	movs	r1, #44	; 0x2c
 80031bc:	fb01 f303 	mul.w	r3, r1, r3
 80031c0:	4413      	add	r3, r2
 80031c2:	333f      	adds	r3, #63	; 0x3f
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d00a      	beq.n	80031e0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	212c      	movs	r1, #44	; 0x2c
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	4413      	add	r3, r2
 80031d6:	333f      	adds	r3, #63	; 0x3f
 80031d8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80031da:	2b03      	cmp	r3, #3
 80031dc:	f040 8100 	bne.w	80033e0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d113      	bne.n	8003210 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	212c      	movs	r1, #44	; 0x2c
 80031ee:	fb01 f303 	mul.w	r3, r1, r3
 80031f2:	4413      	add	r3, r2
 80031f4:	3355      	adds	r3, #85	; 0x55
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	f083 0301 	eor.w	r3, r3, #1
 80031fc:	b2d8      	uxtb	r0, r3
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	212c      	movs	r1, #44	; 0x2c
 8003204:	fb01 f303 	mul.w	r3, r1, r3
 8003208:	4413      	add	r3, r2
 800320a:	3355      	adds	r3, #85	; 0x55
 800320c:	4602      	mov	r2, r0
 800320e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	2b01      	cmp	r3, #1
 8003216:	f040 80e3 	bne.w	80033e0 <HCD_HC_OUT_IRQHandler+0x69c>
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	212c      	movs	r1, #44	; 0x2c
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	4413      	add	r3, r2
 8003226:	334c      	adds	r3, #76	; 0x4c
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 80d8 	beq.w	80033e0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	212c      	movs	r1, #44	; 0x2c
 8003236:	fb01 f303 	mul.w	r3, r1, r3
 800323a:	4413      	add	r3, r2
 800323c:	334c      	adds	r3, #76	; 0x4c
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	202c      	movs	r0, #44	; 0x2c
 8003246:	fb00 f202 	mul.w	r2, r0, r2
 800324a:	440a      	add	r2, r1
 800324c:	3240      	adds	r2, #64	; 0x40
 800324e:	8812      	ldrh	r2, [r2, #0]
 8003250:	4413      	add	r3, r2
 8003252:	3b01      	subs	r3, #1
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	202c      	movs	r0, #44	; 0x2c
 800325a:	fb00 f202 	mul.w	r2, r0, r2
 800325e:	440a      	add	r2, r1
 8003260:	3240      	adds	r2, #64	; 0x40
 8003262:	8812      	ldrh	r2, [r2, #0]
 8003264:	fbb3 f3f2 	udiv	r3, r3, r2
 8003268:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 80b5 	beq.w	80033e0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	212c      	movs	r1, #44	; 0x2c
 800327c:	fb01 f303 	mul.w	r3, r1, r3
 8003280:	4413      	add	r3, r2
 8003282:	3355      	adds	r3, #85	; 0x55
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	f083 0301 	eor.w	r3, r3, #1
 800328a:	b2d8      	uxtb	r0, r3
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	212c      	movs	r1, #44	; 0x2c
 8003292:	fb01 f303 	mul.w	r3, r1, r3
 8003296:	4413      	add	r3, r2
 8003298:	3355      	adds	r3, #85	; 0x55
 800329a:	4602      	mov	r2, r0
 800329c:	701a      	strb	r2, [r3, #0]
 800329e:	e09f      	b.n	80033e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	212c      	movs	r1, #44	; 0x2c
 80032a6:	fb01 f303 	mul.w	r3, r1, r3
 80032aa:	4413      	add	r3, r2
 80032ac:	3361      	adds	r3, #97	; 0x61
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d109      	bne.n	80032c8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	212c      	movs	r1, #44	; 0x2c
 80032ba:	fb01 f303 	mul.w	r3, r1, r3
 80032be:	4413      	add	r3, r2
 80032c0:	3360      	adds	r3, #96	; 0x60
 80032c2:	2202      	movs	r2, #2
 80032c4:	701a      	strb	r2, [r3, #0]
 80032c6:	e08b      	b.n	80033e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	212c      	movs	r1, #44	; 0x2c
 80032ce:	fb01 f303 	mul.w	r3, r1, r3
 80032d2:	4413      	add	r3, r2
 80032d4:	3361      	adds	r3, #97	; 0x61
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d109      	bne.n	80032f0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	212c      	movs	r1, #44	; 0x2c
 80032e2:	fb01 f303 	mul.w	r3, r1, r3
 80032e6:	4413      	add	r3, r2
 80032e8:	3360      	adds	r3, #96	; 0x60
 80032ea:	2202      	movs	r2, #2
 80032ec:	701a      	strb	r2, [r3, #0]
 80032ee:	e077      	b.n	80033e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	212c      	movs	r1, #44	; 0x2c
 80032f6:	fb01 f303 	mul.w	r3, r1, r3
 80032fa:	4413      	add	r3, r2
 80032fc:	3361      	adds	r3, #97	; 0x61
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b05      	cmp	r3, #5
 8003302:	d109      	bne.n	8003318 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	212c      	movs	r1, #44	; 0x2c
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4413      	add	r3, r2
 8003310:	3360      	adds	r3, #96	; 0x60
 8003312:	2205      	movs	r2, #5
 8003314:	701a      	strb	r2, [r3, #0]
 8003316:	e063      	b.n	80033e0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	212c      	movs	r1, #44	; 0x2c
 800331e:	fb01 f303 	mul.w	r3, r1, r3
 8003322:	4413      	add	r3, r2
 8003324:	3361      	adds	r3, #97	; 0x61
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b06      	cmp	r3, #6
 800332a:	d009      	beq.n	8003340 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	212c      	movs	r1, #44	; 0x2c
 8003332:	fb01 f303 	mul.w	r3, r1, r3
 8003336:	4413      	add	r3, r2
 8003338:	3361      	adds	r3, #97	; 0x61
 800333a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800333c:	2b08      	cmp	r3, #8
 800333e:	d14f      	bne.n	80033e0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	212c      	movs	r1, #44	; 0x2c
 8003346:	fb01 f303 	mul.w	r3, r1, r3
 800334a:	4413      	add	r3, r2
 800334c:	335c      	adds	r3, #92	; 0x5c
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	202c      	movs	r0, #44	; 0x2c
 8003358:	fb00 f303 	mul.w	r3, r0, r3
 800335c:	440b      	add	r3, r1
 800335e:	335c      	adds	r3, #92	; 0x5c
 8003360:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	212c      	movs	r1, #44	; 0x2c
 8003368:	fb01 f303 	mul.w	r3, r1, r3
 800336c:	4413      	add	r3, r2
 800336e:	335c      	adds	r3, #92	; 0x5c
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d912      	bls.n	800339c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	212c      	movs	r1, #44	; 0x2c
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	4413      	add	r3, r2
 8003382:	335c      	adds	r3, #92	; 0x5c
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	212c      	movs	r1, #44	; 0x2c
 800338e:	fb01 f303 	mul.w	r3, r1, r3
 8003392:	4413      	add	r3, r2
 8003394:	3360      	adds	r3, #96	; 0x60
 8003396:	2204      	movs	r2, #4
 8003398:	701a      	strb	r2, [r3, #0]
 800339a:	e021      	b.n	80033e0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	212c      	movs	r1, #44	; 0x2c
 80033a2:	fb01 f303 	mul.w	r3, r1, r3
 80033a6:	4413      	add	r3, r2
 80033a8:	3360      	adds	r3, #96	; 0x60
 80033aa:	2202      	movs	r2, #2
 80033ac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	015a      	lsls	r2, r3, #5
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033c4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033cc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033da:	461a      	mov	r2, r3
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ec:	461a      	mov	r2, r3
 80033ee:	2302      	movs	r3, #2
 80033f0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	b2d9      	uxtb	r1, r3
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	202c      	movs	r0, #44	; 0x2c
 80033fc:	fb00 f303 	mul.w	r3, r0, r3
 8003400:	4413      	add	r3, r2
 8003402:	3360      	adds	r3, #96	; 0x60
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f004 fe37 	bl	800807c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800340e:	bf00      	nop
 8003410:	3720      	adds	r7, #32
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b08a      	sub	sp, #40	; 0x28
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	0c5b      	lsrs	r3, r3, #17
 800343c:	f003 030f 	and.w	r3, r3, #15
 8003440:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800344a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d004      	beq.n	800345c <HCD_RXQLVL_IRQHandler+0x46>
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2b05      	cmp	r3, #5
 8003456:	f000 80a9 	beq.w	80035ac <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800345a:	e0aa      	b.n	80035b2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 80a6 	beq.w	80035b0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	212c      	movs	r1, #44	; 0x2c
 800346a:	fb01 f303 	mul.w	r3, r1, r3
 800346e:	4413      	add	r3, r2
 8003470:	3344      	adds	r3, #68	; 0x44
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 809b 	beq.w	80035b0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	212c      	movs	r1, #44	; 0x2c
 8003480:	fb01 f303 	mul.w	r3, r1, r3
 8003484:	4413      	add	r3, r2
 8003486:	3350      	adds	r3, #80	; 0x50
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	441a      	add	r2, r3
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	202c      	movs	r0, #44	; 0x2c
 8003494:	fb00 f303 	mul.w	r3, r0, r3
 8003498:	440b      	add	r3, r1
 800349a:	334c      	adds	r3, #76	; 0x4c
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d87a      	bhi.n	8003598 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6818      	ldr	r0, [r3, #0]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	212c      	movs	r1, #44	; 0x2c
 80034ac:	fb01 f303 	mul.w	r3, r1, r3
 80034b0:	4413      	add	r3, r2
 80034b2:	3344      	adds	r3, #68	; 0x44
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	b292      	uxth	r2, r2
 80034ba:	4619      	mov	r1, r3
 80034bc:	f001 fe92 	bl	80051e4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	212c      	movs	r1, #44	; 0x2c
 80034c6:	fb01 f303 	mul.w	r3, r1, r3
 80034ca:	4413      	add	r3, r2
 80034cc:	3344      	adds	r3, #68	; 0x44
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	441a      	add	r2, r3
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	202c      	movs	r0, #44	; 0x2c
 80034da:	fb00 f303 	mul.w	r3, r0, r3
 80034de:	440b      	add	r3, r1
 80034e0:	3344      	adds	r3, #68	; 0x44
 80034e2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	212c      	movs	r1, #44	; 0x2c
 80034ea:	fb01 f303 	mul.w	r3, r1, r3
 80034ee:	4413      	add	r3, r2
 80034f0:	3350      	adds	r3, #80	; 0x50
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	441a      	add	r2, r3
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	202c      	movs	r0, #44	; 0x2c
 80034fe:	fb00 f303 	mul.w	r3, r0, r3
 8003502:	440b      	add	r3, r1
 8003504:	3350      	adds	r3, #80	; 0x50
 8003506:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	4413      	add	r3, r2
 8003510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	0cdb      	lsrs	r3, r3, #19
 8003518:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800351c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	212c      	movs	r1, #44	; 0x2c
 8003524:	fb01 f303 	mul.w	r3, r1, r3
 8003528:	4413      	add	r3, r2
 800352a:	3340      	adds	r3, #64	; 0x40
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	461a      	mov	r2, r3
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	4293      	cmp	r3, r2
 8003534:	d13c      	bne.n	80035b0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d039      	beq.n	80035b0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	4413      	add	r3, r2
 8003544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003552:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800355a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	4413      	add	r3, r2
 8003564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003568:	461a      	mov	r2, r3
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	212c      	movs	r1, #44	; 0x2c
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	4413      	add	r3, r2
 800357a:	3354      	adds	r3, #84	; 0x54
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	f083 0301 	eor.w	r3, r3, #1
 8003582:	b2d8      	uxtb	r0, r3
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	212c      	movs	r1, #44	; 0x2c
 800358a:	fb01 f303 	mul.w	r3, r1, r3
 800358e:	4413      	add	r3, r2
 8003590:	3354      	adds	r3, #84	; 0x54
 8003592:	4602      	mov	r2, r0
 8003594:	701a      	strb	r2, [r3, #0]
      break;
 8003596:	e00b      	b.n	80035b0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	212c      	movs	r1, #44	; 0x2c
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	3360      	adds	r3, #96	; 0x60
 80035a6:	2204      	movs	r2, #4
 80035a8:	701a      	strb	r2, [r3, #0]
      break;
 80035aa:	e001      	b.n	80035b0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80035ac:	bf00      	nop
 80035ae:	e000      	b.n	80035b2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80035b0:	bf00      	nop
  }
}
 80035b2:	bf00      	nop
 80035b4:	3728      	adds	r7, #40	; 0x28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b086      	sub	sp, #24
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80035e6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d10b      	bne.n	800360a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d102      	bne.n	8003602 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f004 fd21 	bl	8008044 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f043 0302 	orr.w	r3, r3, #2
 8003608:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b08      	cmp	r3, #8
 8003612:	d132      	bne.n	800367a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f043 0308 	orr.w	r3, r3, #8
 800361a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b04      	cmp	r3, #4
 8003624:	d126      	bne.n	8003674 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	2b02      	cmp	r3, #2
 800362c:	d113      	bne.n	8003656 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003634:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003638:	d106      	bne.n	8003648 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2102      	movs	r1, #2
 8003640:	4618      	mov	r0, r3
 8003642:	f001 ff3d 	bl	80054c0 <USB_InitFSLSPClkSel>
 8003646:	e011      	b.n	800366c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2101      	movs	r1, #1
 800364e:	4618      	mov	r0, r3
 8003650:	f001 ff36 	bl	80054c0 <USB_InitFSLSPClkSel>
 8003654:	e00a      	b.n	800366c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d106      	bne.n	800366c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003664:	461a      	mov	r2, r3
 8003666:	f64e 2360 	movw	r3, #60000	; 0xea60
 800366a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f004 fd13 	bl	8008098 <HAL_HCD_PortEnabled_Callback>
 8003672:	e002      	b.n	800367a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f004 fd1d 	bl	80080b4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f003 0320 	and.w	r3, r3, #32
 8003680:	2b20      	cmp	r3, #32
 8003682:	d103      	bne.n	800368c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f043 0320 	orr.w	r3, r3, #32
 800368a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003692:	461a      	mov	r2, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	6013      	str	r3, [r2, #0]
}
 8003698:	bf00      	nop
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e12b      	b.n	800390a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fd fa2c 	bl	8000b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2224      	movs	r2, #36	; 0x24
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003702:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003704:	f001 fa20 	bl	8004b48 <HAL_RCC_GetPCLK1Freq>
 8003708:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	4a81      	ldr	r2, [pc, #516]	; (8003914 <HAL_I2C_Init+0x274>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d807      	bhi.n	8003724 <HAL_I2C_Init+0x84>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4a80      	ldr	r2, [pc, #512]	; (8003918 <HAL_I2C_Init+0x278>)
 8003718:	4293      	cmp	r3, r2
 800371a:	bf94      	ite	ls
 800371c:	2301      	movls	r3, #1
 800371e:	2300      	movhi	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	e006      	b.n	8003732 <HAL_I2C_Init+0x92>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4a7d      	ldr	r2, [pc, #500]	; (800391c <HAL_I2C_Init+0x27c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	bf94      	ite	ls
 800372c:	2301      	movls	r3, #1
 800372e:	2300      	movhi	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e0e7      	b.n	800390a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4a78      	ldr	r2, [pc, #480]	; (8003920 <HAL_I2C_Init+0x280>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	0c9b      	lsrs	r3, r3, #18
 8003744:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	430a      	orrs	r2, r1
 8003758:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	4a6a      	ldr	r2, [pc, #424]	; (8003914 <HAL_I2C_Init+0x274>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d802      	bhi.n	8003774 <HAL_I2C_Init+0xd4>
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	3301      	adds	r3, #1
 8003772:	e009      	b.n	8003788 <HAL_I2C_Init+0xe8>
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800377a:	fb02 f303 	mul.w	r3, r2, r3
 800377e:	4a69      	ldr	r2, [pc, #420]	; (8003924 <HAL_I2C_Init+0x284>)
 8003780:	fba2 2303 	umull	r2, r3, r2, r3
 8003784:	099b      	lsrs	r3, r3, #6
 8003786:	3301      	adds	r3, #1
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6812      	ldr	r2, [r2, #0]
 800378c:	430b      	orrs	r3, r1
 800378e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800379a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	495c      	ldr	r1, [pc, #368]	; (8003914 <HAL_I2C_Init+0x274>)
 80037a4:	428b      	cmp	r3, r1
 80037a6:	d819      	bhi.n	80037dc <HAL_I2C_Init+0x13c>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	1e59      	subs	r1, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80037b6:	1c59      	adds	r1, r3, #1
 80037b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037bc:	400b      	ands	r3, r1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <HAL_I2C_Init+0x138>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1e59      	subs	r1, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80037d0:	3301      	adds	r3, #1
 80037d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d6:	e051      	b.n	800387c <HAL_I2C_Init+0x1dc>
 80037d8:	2304      	movs	r3, #4
 80037da:	e04f      	b.n	800387c <HAL_I2C_Init+0x1dc>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d111      	bne.n	8003808 <HAL_I2C_Init+0x168>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	1e58      	subs	r0, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6859      	ldr	r1, [r3, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	440b      	add	r3, r1
 80037f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037f6:	3301      	adds	r3, #1
 80037f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	bf0c      	ite	eq
 8003800:	2301      	moveq	r3, #1
 8003802:	2300      	movne	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	e012      	b.n	800382e <HAL_I2C_Init+0x18e>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	1e58      	subs	r0, r3, #1
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6859      	ldr	r1, [r3, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	0099      	lsls	r1, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	fbb0 f3f3 	udiv	r3, r0, r3
 800381e:	3301      	adds	r3, #1
 8003820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003824:	2b00      	cmp	r3, #0
 8003826:	bf0c      	ite	eq
 8003828:	2301      	moveq	r3, #1
 800382a:	2300      	movne	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_I2C_Init+0x196>
 8003832:	2301      	movs	r3, #1
 8003834:	e022      	b.n	800387c <HAL_I2C_Init+0x1dc>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10e      	bne.n	800385c <HAL_I2C_Init+0x1bc>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	1e58      	subs	r0, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6859      	ldr	r1, [r3, #4]
 8003846:	460b      	mov	r3, r1
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	440b      	add	r3, r1
 800384c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003850:	3301      	adds	r3, #1
 8003852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800385a:	e00f      	b.n	800387c <HAL_I2C_Init+0x1dc>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	1e58      	subs	r0, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6859      	ldr	r1, [r3, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	0099      	lsls	r1, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003872:	3301      	adds	r3, #1
 8003874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003878:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	6809      	ldr	r1, [r1, #0]
 8003880:	4313      	orrs	r3, r2
 8003882:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69da      	ldr	r2, [r3, #28]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6911      	ldr	r1, [r2, #16]
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	68d2      	ldr	r2, [r2, #12]
 80038b6:	4311      	orrs	r1, r2
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	430b      	orrs	r3, r1
 80038be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	000186a0 	.word	0x000186a0
 8003918:	001e847f 	.word	0x001e847f
 800391c:	003d08ff 	.word	0x003d08ff
 8003920:	431bde83 	.word	0x431bde83
 8003924:	10624dd3 	.word	0x10624dd3

08003928 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e128      	b.n	8003b8c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d109      	bne.n	800395a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a90      	ldr	r2, [pc, #576]	; (8003b94 <HAL_I2S_Init+0x26c>)
 8003952:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7fd f92d 	bl	8000bb4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2202      	movs	r2, #2
 800395e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003970:	f023 030f 	bic.w	r3, r3, #15
 8003974:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2202      	movs	r2, #2
 800397c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d060      	beq.n	8003a48 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d102      	bne.n	8003994 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800398e:	2310      	movs	r3, #16
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	e001      	b.n	8003998 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003994:	2320      	movs	r3, #32
 8003996:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b20      	cmp	r3, #32
 800399e:	d802      	bhi.n	80039a6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80039a6:	2001      	movs	r0, #1
 80039a8:	f001 f9c4 	bl	8004d34 <HAL_RCCEx_GetPeriphCLKFreq>
 80039ac:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b6:	d125      	bne.n	8003a04 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d010      	beq.n	80039e2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ca:	4613      	mov	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	461a      	mov	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039dc:	3305      	adds	r3, #5
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	e01f      	b.n	8003a22 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	461a      	mov	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fe:	3305      	adds	r3, #5
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	e00e      	b.n	8003a22 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	461a      	mov	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1e:	3305      	adds	r3, #5
 8003a20:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4a5c      	ldr	r2, [pc, #368]	; (8003b98 <HAL_I2S_Init+0x270>)
 8003a26:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2a:	08db      	lsrs	r3, r3, #3
 8003a2c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	085b      	lsrs	r3, r3, #1
 8003a3e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	021b      	lsls	r3, r3, #8
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	e003      	b.n	8003a50 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003a48:	2302      	movs	r3, #2
 8003a4a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d902      	bls.n	8003a5c <HAL_I2S_Init+0x134>
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	2bff      	cmp	r3, #255	; 0xff
 8003a5a:	d907      	bls.n	8003a6c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a60:	f043 0210 	orr.w	r2, r3, #16
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e08f      	b.n	8003b8c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	ea42 0103 	orr.w	r1, r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a8a:	f023 030f 	bic.w	r3, r3, #15
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6851      	ldr	r1, [r2, #4]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6892      	ldr	r2, [r2, #8]
 8003a96:	4311      	orrs	r1, r2
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	68d2      	ldr	r2, [r2, #12]
 8003a9c:	4311      	orrs	r1, r2
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6992      	ldr	r2, [r2, #24]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d161      	bne.n	8003b7c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a38      	ldr	r2, [pc, #224]	; (8003b9c <HAL_I2S_Init+0x274>)
 8003abc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a37      	ldr	r2, [pc, #220]	; (8003ba0 <HAL_I2S_Init+0x278>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d101      	bne.n	8003acc <HAL_I2S_Init+0x1a4>
 8003ac8:	4b36      	ldr	r3, [pc, #216]	; (8003ba4 <HAL_I2S_Init+0x27c>)
 8003aca:	e001      	b.n	8003ad0 <HAL_I2S_Init+0x1a8>
 8003acc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	4932      	ldr	r1, [pc, #200]	; (8003ba0 <HAL_I2S_Init+0x278>)
 8003ad8:	428a      	cmp	r2, r1
 8003ada:	d101      	bne.n	8003ae0 <HAL_I2S_Init+0x1b8>
 8003adc:	4a31      	ldr	r2, [pc, #196]	; (8003ba4 <HAL_I2S_Init+0x27c>)
 8003ade:	e001      	b.n	8003ae4 <HAL_I2S_Init+0x1bc>
 8003ae0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003ae4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ae8:	f023 030f 	bic.w	r3, r3, #15
 8003aec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a2b      	ldr	r2, [pc, #172]	; (8003ba0 <HAL_I2S_Init+0x278>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d101      	bne.n	8003afc <HAL_I2S_Init+0x1d4>
 8003af8:	4b2a      	ldr	r3, [pc, #168]	; (8003ba4 <HAL_I2S_Init+0x27c>)
 8003afa:	e001      	b.n	8003b00 <HAL_I2S_Init+0x1d8>
 8003afc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b00:	2202      	movs	r2, #2
 8003b02:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a25      	ldr	r2, [pc, #148]	; (8003ba0 <HAL_I2S_Init+0x278>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d101      	bne.n	8003b12 <HAL_I2S_Init+0x1ea>
 8003b0e:	4b25      	ldr	r3, [pc, #148]	; (8003ba4 <HAL_I2S_Init+0x27c>)
 8003b10:	e001      	b.n	8003b16 <HAL_I2S_Init+0x1ee>
 8003b12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b22:	d003      	beq.n	8003b2c <HAL_I2S_Init+0x204>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d103      	bne.n	8003b34 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	e001      	b.n	8003b38 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b34:	2300      	movs	r3, #0
 8003b36:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b42:	4313      	orrs	r3, r2
 8003b44:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b56:	4313      	orrs	r3, r2
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	897b      	ldrh	r3, [r7, #10]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b64:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a0d      	ldr	r2, [pc, #52]	; (8003ba0 <HAL_I2S_Init+0x278>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d101      	bne.n	8003b74 <HAL_I2S_Init+0x24c>
 8003b70:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <HAL_I2S_Init+0x27c>)
 8003b72:	e001      	b.n	8003b78 <HAL_I2S_Init+0x250>
 8003b74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b78:	897a      	ldrh	r2, [r7, #10]
 8003b7a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3720      	adds	r7, #32
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	08003c9f 	.word	0x08003c9f
 8003b98:	cccccccd 	.word	0xcccccccd
 8003b9c:	08003db5 	.word	0x08003db5
 8003ba0:	40003800 	.word	0x40003800
 8003ba4:	40003400 	.word	0x40003400

08003ba8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	881a      	ldrh	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	1c9a      	adds	r2, r3, #2
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10e      	bne.n	8003c38 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c28:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff ffb8 	bl	8003ba8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c38:	bf00      	nop
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	b292      	uxth	r2, r2
 8003c54:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5a:	1c9a      	adds	r2, r3, #2
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10e      	bne.n	8003c96 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c86:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7ff ff93 	bl	8003bbc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c96:	bf00      	nop
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b086      	sub	sp, #24
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d13a      	bne.n	8003d30 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d109      	bne.n	8003cd8 <I2S_IRQHandler+0x3a>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cce:	2b40      	cmp	r3, #64	; 0x40
 8003cd0:	d102      	bne.n	8003cd8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7ff ffb4 	bl	8003c40 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cde:	2b40      	cmp	r3, #64	; 0x40
 8003ce0:	d126      	bne.n	8003d30 <I2S_IRQHandler+0x92>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	d11f      	bne.n	8003d30 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cfe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d00:	2300      	movs	r3, #0
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	613b      	str	r3, [r7, #16]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d22:	f043 0202 	orr.w	r2, r3, #2
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff ff50 	bl	8003bd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d136      	bne.n	8003daa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d109      	bne.n	8003d5a <I2S_IRQHandler+0xbc>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d50:	2b80      	cmp	r3, #128	; 0x80
 8003d52:	d102      	bne.n	8003d5a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff ff45 	bl	8003be4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d122      	bne.n	8003daa <I2S_IRQHandler+0x10c>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f003 0320 	and.w	r3, r3, #32
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	d11b      	bne.n	8003daa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d80:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d82:	2300      	movs	r3, #0
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9c:	f043 0204 	orr.w	r2, r3, #4
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff ff13 	bl	8003bd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003daa:	bf00      	nop
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a92      	ldr	r2, [pc, #584]	; (8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d101      	bne.n	8003dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003dce:	4b92      	ldr	r3, [pc, #584]	; (8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dd0:	e001      	b.n	8003dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003dd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a8b      	ldr	r2, [pc, #556]	; (8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d101      	bne.n	8003df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003dec:	4b8a      	ldr	r3, [pc, #552]	; (8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dee:	e001      	b.n	8003df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003df0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e00:	d004      	beq.n	8003e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f040 8099 	bne.w	8003f3e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d107      	bne.n	8003e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f925 	bl	8004070 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d107      	bne.n	8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f9c8 	bl	80041d0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e46:	2b40      	cmp	r3, #64	; 0x40
 8003e48:	d13a      	bne.n	8003ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d035      	beq.n	8003ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a6e      	ldr	r2, [pc, #440]	; (8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d101      	bne.n	8003e62 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003e5e:	4b6e      	ldr	r3, [pc, #440]	; (8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e60:	e001      	b.n	8003e66 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003e62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4969      	ldr	r1, [pc, #420]	; (8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e6e:	428b      	cmp	r3, r1
 8003e70:	d101      	bne.n	8003e76 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003e72:	4b69      	ldr	r3, [pc, #420]	; (8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e74:	e001      	b.n	8003e7a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003e76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e7e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e8e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	f043 0202 	orr.w	r2, r3, #2
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7ff fe88 	bl	8003bd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	f040 80c3 	bne.w	8004052 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 80bd 	beq.w	8004052 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ee6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a49      	ldr	r2, [pc, #292]	; (8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d101      	bne.n	8003ef6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003ef2:	4b49      	ldr	r3, [pc, #292]	; (8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ef4:	e001      	b.n	8003efa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003ef6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4944      	ldr	r1, [pc, #272]	; (8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f02:	428b      	cmp	r3, r1
 8003f04:	d101      	bne.n	8003f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f06:	4b44      	ldr	r3, [pc, #272]	; (8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f08:	e001      	b.n	8003f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f12:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f14:	2300      	movs	r3, #0
 8003f16:	60bb      	str	r3, [r7, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	60bb      	str	r3, [r7, #8]
 8003f20:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2e:	f043 0204 	orr.w	r2, r3, #4
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff fe4a 	bl	8003bd0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f3c:	e089      	b.n	8004052 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d107      	bne.n	8003f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f8be 	bl	80040d4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d107      	bne.n	8003f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d002      	beq.n	8003f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f8fd 	bl	800416c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f78:	2b40      	cmp	r3, #64	; 0x40
 8003f7a:	d12f      	bne.n	8003fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d02a      	beq.n	8003fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f94:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a1e      	ldr	r2, [pc, #120]	; (8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d101      	bne.n	8003fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003fa0:	4b1d      	ldr	r3, [pc, #116]	; (8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fa2:	e001      	b.n	8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003fa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4919      	ldr	r1, [pc, #100]	; (8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fb0:	428b      	cmp	r3, r1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003fb4:	4b18      	ldr	r3, [pc, #96]	; (8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fb6:	e001      	b.n	8003fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003fb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fbc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fc0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fce:	f043 0202 	orr.w	r2, r3, #2
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff fdfa 	bl	8003bd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d136      	bne.n	8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f003 0320 	and.w	r3, r3, #32
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d031      	beq.n	8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a07      	ldr	r2, [pc, #28]	; (8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d101      	bne.n	8003ffe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003ffa:	4b07      	ldr	r3, [pc, #28]	; (8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ffc:	e001      	b.n	8004002 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003ffe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4902      	ldr	r1, [pc, #8]	; (8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800400a:	428b      	cmp	r3, r1
 800400c:	d106      	bne.n	800401c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800400e:	4b02      	ldr	r3, [pc, #8]	; (8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004010:	e006      	b.n	8004020 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004012:	bf00      	nop
 8004014:	40003800 	.word	0x40003800
 8004018:	40003400 	.word	0x40003400
 800401c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004020:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004024:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004034:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	f043 0204 	orr.w	r2, r3, #4
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7ff fdc0 	bl	8003bd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004050:	e000      	b.n	8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004052:	bf00      	nop
}
 8004054:	bf00      	nop
 8004056:	3720      	adds	r7, #32
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	1c99      	adds	r1, r3, #2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6251      	str	r1, [r2, #36]	; 0x24
 8004082:	881a      	ldrh	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d113      	bne.n	80040ca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d106      	bne.n	80040ca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff ffc9 	bl	800405c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040ca:	bf00      	nop
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
	...

080040d4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	1c99      	adds	r1, r3, #2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6251      	str	r1, [r2, #36]	; 0x24
 80040e6:	8819      	ldrh	r1, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a1d      	ldr	r2, [pc, #116]	; (8004164 <I2SEx_TxISR_I2SExt+0x90>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d101      	bne.n	80040f6 <I2SEx_TxISR_I2SExt+0x22>
 80040f2:	4b1d      	ldr	r3, [pc, #116]	; (8004168 <I2SEx_TxISR_I2SExt+0x94>)
 80040f4:	e001      	b.n	80040fa <I2SEx_TxISR_I2SExt+0x26>
 80040f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040fa:	460a      	mov	r2, r1
 80040fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004102:	b29b      	uxth	r3, r3
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d121      	bne.n	800415a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a12      	ldr	r2, [pc, #72]	; (8004164 <I2SEx_TxISR_I2SExt+0x90>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d101      	bne.n	8004124 <I2SEx_TxISR_I2SExt+0x50>
 8004120:	4b11      	ldr	r3, [pc, #68]	; (8004168 <I2SEx_TxISR_I2SExt+0x94>)
 8004122:	e001      	b.n	8004128 <I2SEx_TxISR_I2SExt+0x54>
 8004124:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	490d      	ldr	r1, [pc, #52]	; (8004164 <I2SEx_TxISR_I2SExt+0x90>)
 8004130:	428b      	cmp	r3, r1
 8004132:	d101      	bne.n	8004138 <I2SEx_TxISR_I2SExt+0x64>
 8004134:	4b0c      	ldr	r3, [pc, #48]	; (8004168 <I2SEx_TxISR_I2SExt+0x94>)
 8004136:	e001      	b.n	800413c <I2SEx_TxISR_I2SExt+0x68>
 8004138:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800413c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004140:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004146:	b29b      	uxth	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	d106      	bne.n	800415a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7ff ff81 	bl	800405c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800415a:	bf00      	nop
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40003800 	.word	0x40003800
 8004168:	40003400 	.word	0x40003400

0800416c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68d8      	ldr	r0, [r3, #12]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417e:	1c99      	adds	r1, r3, #2
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004184:	b282      	uxth	r2, r0
 8004186:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d113      	bne.n	80041c8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041ae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff ff4a 	bl	800405c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041c8:	bf00      	nop
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a20      	ldr	r2, [pc, #128]	; (8004260 <I2SEx_RxISR_I2SExt+0x90>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d101      	bne.n	80041e6 <I2SEx_RxISR_I2SExt+0x16>
 80041e2:	4b20      	ldr	r3, [pc, #128]	; (8004264 <I2SEx_RxISR_I2SExt+0x94>)
 80041e4:	e001      	b.n	80041ea <I2SEx_RxISR_I2SExt+0x1a>
 80041e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041ea:	68d8      	ldr	r0, [r3, #12]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f0:	1c99      	adds	r1, r3, #2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80041f6:	b282      	uxth	r2, r0
 80041f8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d121      	bne.n	8004256 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a12      	ldr	r2, [pc, #72]	; (8004260 <I2SEx_RxISR_I2SExt+0x90>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d101      	bne.n	8004220 <I2SEx_RxISR_I2SExt+0x50>
 800421c:	4b11      	ldr	r3, [pc, #68]	; (8004264 <I2SEx_RxISR_I2SExt+0x94>)
 800421e:	e001      	b.n	8004224 <I2SEx_RxISR_I2SExt+0x54>
 8004220:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	490d      	ldr	r1, [pc, #52]	; (8004260 <I2SEx_RxISR_I2SExt+0x90>)
 800422c:	428b      	cmp	r3, r1
 800422e:	d101      	bne.n	8004234 <I2SEx_RxISR_I2SExt+0x64>
 8004230:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <I2SEx_RxISR_I2SExt+0x94>)
 8004232:	e001      	b.n	8004238 <I2SEx_RxISR_I2SExt+0x68>
 8004234:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004238:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800423c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004242:	b29b      	uxth	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d106      	bne.n	8004256 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff ff03 	bl	800405c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004256:	bf00      	nop
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40003800 	.word	0x40003800
 8004264:	40003400 	.word	0x40003400

08004268 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e267      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d075      	beq.n	8004372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004286:	4b88      	ldr	r3, [pc, #544]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 030c 	and.w	r3, r3, #12
 800428e:	2b04      	cmp	r3, #4
 8004290:	d00c      	beq.n	80042ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004292:	4b85      	ldr	r3, [pc, #532]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800429a:	2b08      	cmp	r3, #8
 800429c:	d112      	bne.n	80042c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800429e:	4b82      	ldr	r3, [pc, #520]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042aa:	d10b      	bne.n	80042c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ac:	4b7e      	ldr	r3, [pc, #504]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d05b      	beq.n	8004370 <HAL_RCC_OscConfig+0x108>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d157      	bne.n	8004370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e242      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042cc:	d106      	bne.n	80042dc <HAL_RCC_OscConfig+0x74>
 80042ce:	4b76      	ldr	r3, [pc, #472]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a75      	ldr	r2, [pc, #468]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 80042d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	e01d      	b.n	8004318 <HAL_RCC_OscConfig+0xb0>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042e4:	d10c      	bne.n	8004300 <HAL_RCC_OscConfig+0x98>
 80042e6:	4b70      	ldr	r3, [pc, #448]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a6f      	ldr	r2, [pc, #444]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 80042ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	4b6d      	ldr	r3, [pc, #436]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a6c      	ldr	r2, [pc, #432]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 80042f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	e00b      	b.n	8004318 <HAL_RCC_OscConfig+0xb0>
 8004300:	4b69      	ldr	r3, [pc, #420]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a68      	ldr	r2, [pc, #416]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	4b66      	ldr	r3, [pc, #408]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a65      	ldr	r2, [pc, #404]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d013      	beq.n	8004348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004320:	f7fc fe26 	bl	8000f70 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004328:	f7fc fe22 	bl	8000f70 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b64      	cmp	r3, #100	; 0x64
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e207      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800433a:	4b5b      	ldr	r3, [pc, #364]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0f0      	beq.n	8004328 <HAL_RCC_OscConfig+0xc0>
 8004346:	e014      	b.n	8004372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004348:	f7fc fe12 	bl	8000f70 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004350:	f7fc fe0e 	bl	8000f70 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b64      	cmp	r3, #100	; 0x64
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e1f3      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004362:	4b51      	ldr	r3, [pc, #324]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f0      	bne.n	8004350 <HAL_RCC_OscConfig+0xe8>
 800436e:	e000      	b.n	8004372 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d063      	beq.n	8004446 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800437e:	4b4a      	ldr	r3, [pc, #296]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 030c 	and.w	r3, r3, #12
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00b      	beq.n	80043a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800438a:	4b47      	ldr	r3, [pc, #284]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004392:	2b08      	cmp	r3, #8
 8004394:	d11c      	bne.n	80043d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004396:	4b44      	ldr	r3, [pc, #272]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d116      	bne.n	80043d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043a2:	4b41      	ldr	r3, [pc, #260]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d005      	beq.n	80043ba <HAL_RCC_OscConfig+0x152>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d001      	beq.n	80043ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e1c7      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ba:	4b3b      	ldr	r3, [pc, #236]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	4937      	ldr	r1, [pc, #220]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ce:	e03a      	b.n	8004446 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d020      	beq.n	800441a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043d8:	4b34      	ldr	r3, [pc, #208]	; (80044ac <HAL_RCC_OscConfig+0x244>)
 80043da:	2201      	movs	r2, #1
 80043dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043de:	f7fc fdc7 	bl	8000f70 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043e6:	f7fc fdc3 	bl	8000f70 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e1a8      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f8:	4b2b      	ldr	r3, [pc, #172]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0f0      	beq.n	80043e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004404:	4b28      	ldr	r3, [pc, #160]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	4925      	ldr	r1, [pc, #148]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004414:	4313      	orrs	r3, r2
 8004416:	600b      	str	r3, [r1, #0]
 8004418:	e015      	b.n	8004446 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800441a:	4b24      	ldr	r3, [pc, #144]	; (80044ac <HAL_RCC_OscConfig+0x244>)
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004420:	f7fc fda6 	bl	8000f70 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004428:	f7fc fda2 	bl	8000f70 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e187      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800443a:	4b1b      	ldr	r3, [pc, #108]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	2b00      	cmp	r3, #0
 8004450:	d036      	beq.n	80044c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d016      	beq.n	8004488 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800445a:	4b15      	ldr	r3, [pc, #84]	; (80044b0 <HAL_RCC_OscConfig+0x248>)
 800445c:	2201      	movs	r2, #1
 800445e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004460:	f7fc fd86 	bl	8000f70 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004468:	f7fc fd82 	bl	8000f70 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e167      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800447a:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <HAL_RCC_OscConfig+0x240>)
 800447c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0x200>
 8004486:	e01b      	b.n	80044c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004488:	4b09      	ldr	r3, [pc, #36]	; (80044b0 <HAL_RCC_OscConfig+0x248>)
 800448a:	2200      	movs	r2, #0
 800448c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800448e:	f7fc fd6f 	bl	8000f70 <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004494:	e00e      	b.n	80044b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004496:	f7fc fd6b 	bl	8000f70 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d907      	bls.n	80044b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e150      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
 80044a8:	40023800 	.word	0x40023800
 80044ac:	42470000 	.word	0x42470000
 80044b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b4:	4b88      	ldr	r3, [pc, #544]	; (80046d8 <HAL_RCC_OscConfig+0x470>)
 80044b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1ea      	bne.n	8004496 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8097 	beq.w	80045fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ce:	2300      	movs	r3, #0
 80044d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044d2:	4b81      	ldr	r3, [pc, #516]	; (80046d8 <HAL_RCC_OscConfig+0x470>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10f      	bne.n	80044fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	4b7d      	ldr	r3, [pc, #500]	; (80046d8 <HAL_RCC_OscConfig+0x470>)
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	4a7c      	ldr	r2, [pc, #496]	; (80046d8 <HAL_RCC_OscConfig+0x470>)
 80044e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ec:	6413      	str	r3, [r2, #64]	; 0x40
 80044ee:	4b7a      	ldr	r3, [pc, #488]	; (80046d8 <HAL_RCC_OscConfig+0x470>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044fa:	2301      	movs	r3, #1
 80044fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fe:	4b77      	ldr	r3, [pc, #476]	; (80046dc <HAL_RCC_OscConfig+0x474>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004506:	2b00      	cmp	r3, #0
 8004508:	d118      	bne.n	800453c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800450a:	4b74      	ldr	r3, [pc, #464]	; (80046dc <HAL_RCC_OscConfig+0x474>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a73      	ldr	r2, [pc, #460]	; (80046dc <HAL_RCC_OscConfig+0x474>)
 8004510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004516:	f7fc fd2b 	bl	8000f70 <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800451e:	f7fc fd27 	bl	8000f70 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e10c      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004530:	4b6a      	ldr	r3, [pc, #424]	; (80046dc <HAL_RCC_OscConfig+0x474>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0f0      	beq.n	800451e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d106      	bne.n	8004552 <HAL_RCC_OscConfig+0x2ea>
 8004544:	4b64      	ldr	r3, [pc, #400]	; (80046d8 <HAL_RCC_OscConfig+0x470>)
 8004546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004548:	4a63      	ldr	r2, [pc, #396]	; (80046d8 <HAL_RCC_OscConfig+0x470>)
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	6713      	str	r3, [r2, #112]	; 0x70
 8004550:	e01c      	b.n	800458c <HAL_RCC_OscConfig+0x324>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	2b05      	cmp	r3, #5
 8004558:	d10c      	bne.n	8004574 <HAL_RCC_OscConfig+0x30c>
 800455a:	4b5f      	ldr	r3, [pc, #380]	; (80046d8 <HAL_RCC_OscConfig+0x470>)
 800455c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455e:	4a5e      	ldr	r2, [pc, #376]	; (80046d8 <HAL_RCC_OscConfig+0x470>)
 8004560:	f043 0304 	orr.w	r3, r3, #4
 8004564:	6713      	str	r3, [r2, #112]	; 0x70
 8004566:	4b5c      	ldr	r3, [pc, #368]	; (80046d8 <HAL_RCC_OscConfig+0x470>)
 8004568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456a:	4a5b      	ldr	r2, [pc, #364]	; (80046d8 <HAL_RCC_OscConfig+0x470>)
 800456c:	f043 0301 	orr.w	r3, r3, #1
 8004570:	6713      	str	r3, [r2, #112]	; 0x70
 8004572:	e00b      	b.n	800458c <HAL_RCC_OscConfig+0x324>
 8004574:	4b58      	ldr	r3, [pc, #352]	; (80046d8 <HAL_RCC_OscConfig+0x470>)
 8004576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004578:	4a57      	ldr	r2, [pc, #348]	; (80046d8 <HAL_RCC_OscConfig+0x470>)
 800457a:	f023 0301 	bic.w	r3, r3, #1
 800457e:	6713      	str	r3, [r2, #112]	; 0x70
 8004580:	4b55      	ldr	r3, [pc, #340]	; (80046d8 <HAL_RCC_OscConfig+0x470>)
 8004582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004584:	4a54      	ldr	r2, [pc, #336]	; (80046d8 <HAL_RCC_OscConfig+0x470>)
 8004586:	f023 0304 	bic.w	r3, r3, #4
 800458a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d015      	beq.n	80045c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004594:	f7fc fcec 	bl	8000f70 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800459a:	e00a      	b.n	80045b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800459c:	f7fc fce8 	bl	8000f70 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e0cb      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b2:	4b49      	ldr	r3, [pc, #292]	; (80046d8 <HAL_RCC_OscConfig+0x470>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0ee      	beq.n	800459c <HAL_RCC_OscConfig+0x334>
 80045be:	e014      	b.n	80045ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045c0:	f7fc fcd6 	bl	8000f70 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c6:	e00a      	b.n	80045de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045c8:	f7fc fcd2 	bl	8000f70 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e0b5      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045de:	4b3e      	ldr	r3, [pc, #248]	; (80046d8 <HAL_RCC_OscConfig+0x470>)
 80045e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1ee      	bne.n	80045c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045ea:	7dfb      	ldrb	r3, [r7, #23]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d105      	bne.n	80045fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f0:	4b39      	ldr	r3, [pc, #228]	; (80046d8 <HAL_RCC_OscConfig+0x470>)
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	4a38      	ldr	r2, [pc, #224]	; (80046d8 <HAL_RCC_OscConfig+0x470>)
 80045f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 80a1 	beq.w	8004748 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004606:	4b34      	ldr	r3, [pc, #208]	; (80046d8 <HAL_RCC_OscConfig+0x470>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 030c 	and.w	r3, r3, #12
 800460e:	2b08      	cmp	r3, #8
 8004610:	d05c      	beq.n	80046cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	2b02      	cmp	r3, #2
 8004618:	d141      	bne.n	800469e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461a:	4b31      	ldr	r3, [pc, #196]	; (80046e0 <HAL_RCC_OscConfig+0x478>)
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004620:	f7fc fca6 	bl	8000f70 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004628:	f7fc fca2 	bl	8000f70 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e087      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800463a:	4b27      	ldr	r3, [pc, #156]	; (80046d8 <HAL_RCC_OscConfig+0x470>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f0      	bne.n	8004628 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69da      	ldr	r2, [r3, #28]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	019b      	lsls	r3, r3, #6
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465c:	085b      	lsrs	r3, r3, #1
 800465e:	3b01      	subs	r3, #1
 8004660:	041b      	lsls	r3, r3, #16
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	061b      	lsls	r3, r3, #24
 800466a:	491b      	ldr	r1, [pc, #108]	; (80046d8 <HAL_RCC_OscConfig+0x470>)
 800466c:	4313      	orrs	r3, r2
 800466e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004670:	4b1b      	ldr	r3, [pc, #108]	; (80046e0 <HAL_RCC_OscConfig+0x478>)
 8004672:	2201      	movs	r2, #1
 8004674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004676:	f7fc fc7b 	bl	8000f70 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800467e:	f7fc fc77 	bl	8000f70 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e05c      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004690:	4b11      	ldr	r3, [pc, #68]	; (80046d8 <HAL_RCC_OscConfig+0x470>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0f0      	beq.n	800467e <HAL_RCC_OscConfig+0x416>
 800469c:	e054      	b.n	8004748 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800469e:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <HAL_RCC_OscConfig+0x478>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a4:	f7fc fc64 	bl	8000f70 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ac:	f7fc fc60 	bl	8000f70 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e045      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046be:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <HAL_RCC_OscConfig+0x470>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0x444>
 80046ca:	e03d      	b.n	8004748 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d107      	bne.n	80046e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e038      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
 80046d8:	40023800 	.word	0x40023800
 80046dc:	40007000 	.word	0x40007000
 80046e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046e4:	4b1b      	ldr	r3, [pc, #108]	; (8004754 <HAL_RCC_OscConfig+0x4ec>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d028      	beq.n	8004744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d121      	bne.n	8004744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800470a:	429a      	cmp	r2, r3
 800470c:	d11a      	bne.n	8004744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004714:	4013      	ands	r3, r2
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800471a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800471c:	4293      	cmp	r3, r2
 800471e:	d111      	bne.n	8004744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	085b      	lsrs	r3, r3, #1
 800472c:	3b01      	subs	r3, #1
 800472e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004730:	429a      	cmp	r2, r3
 8004732:	d107      	bne.n	8004744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004740:	429a      	cmp	r2, r3
 8004742:	d001      	beq.n	8004748 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e000      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3718      	adds	r7, #24
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40023800 	.word	0x40023800

08004758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e0cc      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800476c:	4b68      	ldr	r3, [pc, #416]	; (8004910 <HAL_RCC_ClockConfig+0x1b8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d90c      	bls.n	8004794 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800477a:	4b65      	ldr	r3, [pc, #404]	; (8004910 <HAL_RCC_ClockConfig+0x1b8>)
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004782:	4b63      	ldr	r3, [pc, #396]	; (8004910 <HAL_RCC_ClockConfig+0x1b8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d001      	beq.n	8004794 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e0b8      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d020      	beq.n	80047e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047ac:	4b59      	ldr	r3, [pc, #356]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	4a58      	ldr	r2, [pc, #352]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047c4:	4b53      	ldr	r3, [pc, #332]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	4a52      	ldr	r2, [pc, #328]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047d0:	4b50      	ldr	r3, [pc, #320]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	494d      	ldr	r1, [pc, #308]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d044      	beq.n	8004878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d107      	bne.n	8004806 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f6:	4b47      	ldr	r3, [pc, #284]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d119      	bne.n	8004836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e07f      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d003      	beq.n	8004816 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004812:	2b03      	cmp	r3, #3
 8004814:	d107      	bne.n	8004826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004816:	4b3f      	ldr	r3, [pc, #252]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d109      	bne.n	8004836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e06f      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004826:	4b3b      	ldr	r3, [pc, #236]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e067      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004836:	4b37      	ldr	r3, [pc, #220]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f023 0203 	bic.w	r2, r3, #3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	4934      	ldr	r1, [pc, #208]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 8004844:	4313      	orrs	r3, r2
 8004846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004848:	f7fc fb92 	bl	8000f70 <HAL_GetTick>
 800484c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800484e:	e00a      	b.n	8004866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004850:	f7fc fb8e 	bl	8000f70 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	f241 3288 	movw	r2, #5000	; 0x1388
 800485e:	4293      	cmp	r3, r2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e04f      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004866:	4b2b      	ldr	r3, [pc, #172]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 020c 	and.w	r2, r3, #12
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	429a      	cmp	r2, r3
 8004876:	d1eb      	bne.n	8004850 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004878:	4b25      	ldr	r3, [pc, #148]	; (8004910 <HAL_RCC_ClockConfig+0x1b8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d20c      	bcs.n	80048a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004886:	4b22      	ldr	r3, [pc, #136]	; (8004910 <HAL_RCC_ClockConfig+0x1b8>)
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800488e:	4b20      	ldr	r3, [pc, #128]	; (8004910 <HAL_RCC_ClockConfig+0x1b8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e032      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d008      	beq.n	80048be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048ac:	4b19      	ldr	r3, [pc, #100]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	4916      	ldr	r1, [pc, #88]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ca:	4b12      	ldr	r3, [pc, #72]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	490e      	ldr	r1, [pc, #56]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048de:	f000 f821 	bl	8004924 <HAL_RCC_GetSysClockFreq>
 80048e2:	4602      	mov	r2, r0
 80048e4:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	091b      	lsrs	r3, r3, #4
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	490a      	ldr	r1, [pc, #40]	; (8004918 <HAL_RCC_ClockConfig+0x1c0>)
 80048f0:	5ccb      	ldrb	r3, [r1, r3]
 80048f2:	fa22 f303 	lsr.w	r3, r2, r3
 80048f6:	4a09      	ldr	r2, [pc, #36]	; (800491c <HAL_RCC_ClockConfig+0x1c4>)
 80048f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048fa:	4b09      	ldr	r3, [pc, #36]	; (8004920 <HAL_RCC_ClockConfig+0x1c8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fc faf2 	bl	8000ee8 <HAL_InitTick>

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	40023c00 	.word	0x40023c00
 8004914:	40023800 	.word	0x40023800
 8004918:	08008754 	.word	0x08008754
 800491c:	20000000 	.word	0x20000000
 8004920:	20000004 	.word	0x20000004

08004924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004928:	b094      	sub	sp, #80	; 0x50
 800492a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	647b      	str	r3, [r7, #68]	; 0x44
 8004930:	2300      	movs	r3, #0
 8004932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004934:	2300      	movs	r3, #0
 8004936:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800493c:	4b79      	ldr	r3, [pc, #484]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x200>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 030c 	and.w	r3, r3, #12
 8004944:	2b08      	cmp	r3, #8
 8004946:	d00d      	beq.n	8004964 <HAL_RCC_GetSysClockFreq+0x40>
 8004948:	2b08      	cmp	r3, #8
 800494a:	f200 80e1 	bhi.w	8004b10 <HAL_RCC_GetSysClockFreq+0x1ec>
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <HAL_RCC_GetSysClockFreq+0x34>
 8004952:	2b04      	cmp	r3, #4
 8004954:	d003      	beq.n	800495e <HAL_RCC_GetSysClockFreq+0x3a>
 8004956:	e0db      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004958:	4b73      	ldr	r3, [pc, #460]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x204>)
 800495a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800495c:	e0db      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800495e:	4b73      	ldr	r3, [pc, #460]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x208>)
 8004960:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004962:	e0d8      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004964:	4b6f      	ldr	r3, [pc, #444]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800496c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800496e:	4b6d      	ldr	r3, [pc, #436]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d063      	beq.n	8004a42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800497a:	4b6a      	ldr	r3, [pc, #424]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x200>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	099b      	lsrs	r3, r3, #6
 8004980:	2200      	movs	r2, #0
 8004982:	63bb      	str	r3, [r7, #56]	; 0x38
 8004984:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800498c:	633b      	str	r3, [r7, #48]	; 0x30
 800498e:	2300      	movs	r3, #0
 8004990:	637b      	str	r3, [r7, #52]	; 0x34
 8004992:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004996:	4622      	mov	r2, r4
 8004998:	462b      	mov	r3, r5
 800499a:	f04f 0000 	mov.w	r0, #0
 800499e:	f04f 0100 	mov.w	r1, #0
 80049a2:	0159      	lsls	r1, r3, #5
 80049a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049a8:	0150      	lsls	r0, r2, #5
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4621      	mov	r1, r4
 80049b0:	1a51      	subs	r1, r2, r1
 80049b2:	6139      	str	r1, [r7, #16]
 80049b4:	4629      	mov	r1, r5
 80049b6:	eb63 0301 	sbc.w	r3, r3, r1
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	f04f 0200 	mov.w	r2, #0
 80049c0:	f04f 0300 	mov.w	r3, #0
 80049c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049c8:	4659      	mov	r1, fp
 80049ca:	018b      	lsls	r3, r1, #6
 80049cc:	4651      	mov	r1, sl
 80049ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049d2:	4651      	mov	r1, sl
 80049d4:	018a      	lsls	r2, r1, #6
 80049d6:	4651      	mov	r1, sl
 80049d8:	ebb2 0801 	subs.w	r8, r2, r1
 80049dc:	4659      	mov	r1, fp
 80049de:	eb63 0901 	sbc.w	r9, r3, r1
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049f6:	4690      	mov	r8, r2
 80049f8:	4699      	mov	r9, r3
 80049fa:	4623      	mov	r3, r4
 80049fc:	eb18 0303 	adds.w	r3, r8, r3
 8004a00:	60bb      	str	r3, [r7, #8]
 8004a02:	462b      	mov	r3, r5
 8004a04:	eb49 0303 	adc.w	r3, r9, r3
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	f04f 0200 	mov.w	r2, #0
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a16:	4629      	mov	r1, r5
 8004a18:	024b      	lsls	r3, r1, #9
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a20:	4621      	mov	r1, r4
 8004a22:	024a      	lsls	r2, r1, #9
 8004a24:	4610      	mov	r0, r2
 8004a26:	4619      	mov	r1, r3
 8004a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a34:	f7fb fbc8 	bl	80001c8 <__aeabi_uldivmod>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a40:	e058      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a42:	4b38      	ldr	r3, [pc, #224]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	099b      	lsrs	r3, r3, #6
 8004a48:	2200      	movs	r2, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a52:	623b      	str	r3, [r7, #32]
 8004a54:	2300      	movs	r3, #0
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
 8004a58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a5c:	4642      	mov	r2, r8
 8004a5e:	464b      	mov	r3, r9
 8004a60:	f04f 0000 	mov.w	r0, #0
 8004a64:	f04f 0100 	mov.w	r1, #0
 8004a68:	0159      	lsls	r1, r3, #5
 8004a6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a6e:	0150      	lsls	r0, r2, #5
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4641      	mov	r1, r8
 8004a76:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a94:	ebb2 040a 	subs.w	r4, r2, sl
 8004a98:	eb63 050b 	sbc.w	r5, r3, fp
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	00eb      	lsls	r3, r5, #3
 8004aa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aaa:	00e2      	lsls	r2, r4, #3
 8004aac:	4614      	mov	r4, r2
 8004aae:	461d      	mov	r5, r3
 8004ab0:	4643      	mov	r3, r8
 8004ab2:	18e3      	adds	r3, r4, r3
 8004ab4:	603b      	str	r3, [r7, #0]
 8004ab6:	464b      	mov	r3, r9
 8004ab8:	eb45 0303 	adc.w	r3, r5, r3
 8004abc:	607b      	str	r3, [r7, #4]
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004aca:	4629      	mov	r1, r5
 8004acc:	028b      	lsls	r3, r1, #10
 8004ace:	4621      	mov	r1, r4
 8004ad0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	028a      	lsls	r2, r1, #10
 8004ad8:	4610      	mov	r0, r2
 8004ada:	4619      	mov	r1, r3
 8004adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ade:	2200      	movs	r2, #0
 8004ae0:	61bb      	str	r3, [r7, #24]
 8004ae2:	61fa      	str	r2, [r7, #28]
 8004ae4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ae8:	f7fb fb6e 	bl	80001c8 <__aeabi_uldivmod>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4613      	mov	r3, r2
 8004af2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004af4:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	0c1b      	lsrs	r3, r3, #16
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	3301      	adds	r3, #1
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b0e:	e002      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b10:	4b05      	ldr	r3, [pc, #20]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3750      	adds	r7, #80	; 0x50
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b22:	bf00      	nop
 8004b24:	40023800 	.word	0x40023800
 8004b28:	00f42400 	.word	0x00f42400
 8004b2c:	007a1200 	.word	0x007a1200

08004b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b34:	4b03      	ldr	r3, [pc, #12]	; (8004b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b36:	681b      	ldr	r3, [r3, #0]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	20000000 	.word	0x20000000

08004b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b4c:	f7ff fff0 	bl	8004b30 <HAL_RCC_GetHCLKFreq>
 8004b50:	4602      	mov	r2, r0
 8004b52:	4b05      	ldr	r3, [pc, #20]	; (8004b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	0a9b      	lsrs	r3, r3, #10
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	4903      	ldr	r1, [pc, #12]	; (8004b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b5e:	5ccb      	ldrb	r3, [r1, r3]
 8004b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	08008764 	.word	0x08008764

08004b70 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d105      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d035      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b98:	4b62      	ldr	r3, [pc, #392]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b9e:	f7fc f9e7 	bl	8000f70 <HAL_GetTick>
 8004ba2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ba6:	f7fc f9e3 	bl	8000f70 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e0b0      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bb8:	4b5b      	ldr	r3, [pc, #364]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1f0      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	019a      	lsls	r2, r3, #6
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	071b      	lsls	r3, r3, #28
 8004bd0:	4955      	ldr	r1, [pc, #340]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bd8:	4b52      	ldr	r3, [pc, #328]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bda:	2201      	movs	r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bde:	f7fc f9c7 	bl	8000f70 <HAL_GetTick>
 8004be2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004be4:	e008      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004be6:	f7fc f9c3 	bl	8000f70 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e090      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bf8:	4b4b      	ldr	r3, [pc, #300]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0f0      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 8083 	beq.w	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	4b44      	ldr	r3, [pc, #272]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	4a43      	ldr	r2, [pc, #268]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c20:	6413      	str	r3, [r2, #64]	; 0x40
 8004c22:	4b41      	ldr	r3, [pc, #260]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c2e:	4b3f      	ldr	r3, [pc, #252]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a3e      	ldr	r2, [pc, #248]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c38:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c3a:	f7fc f999 	bl	8000f70 <HAL_GetTick>
 8004c3e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c40:	e008      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c42:	f7fc f995 	bl	8000f70 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e062      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c54:	4b35      	ldr	r3, [pc, #212]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0f0      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c60:	4b31      	ldr	r3, [pc, #196]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c68:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d02f      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d028      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c7e:	4b2a      	ldr	r3, [pc, #168]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c86:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c88:	4b29      	ldr	r3, [pc, #164]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c8e:	4b28      	ldr	r3, [pc, #160]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c94:	4a24      	ldr	r2, [pc, #144]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c9a:	4b23      	ldr	r3, [pc, #140]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d114      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ca6:	f7fc f963 	bl	8000f70 <HAL_GetTick>
 8004caa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cac:	e00a      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cae:	f7fc f95f 	bl	8000f70 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e02a      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc4:	4b18      	ldr	r3, [pc, #96]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0ee      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cdc:	d10d      	bne.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004cde:	4b12      	ldr	r3, [pc, #72]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf2:	490d      	ldr	r1, [pc, #52]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	608b      	str	r3, [r1, #8]
 8004cf8:	e005      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004cfa:	4b0b      	ldr	r3, [pc, #44]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	4a0a      	ldr	r2, [pc, #40]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d00:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d04:	6093      	str	r3, [r2, #8]
 8004d06:	4b08      	ldr	r3, [pc, #32]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d12:	4905      	ldr	r1, [pc, #20]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	42470068 	.word	0x42470068
 8004d28:	40023800 	.word	0x40023800
 8004d2c:	40007000 	.word	0x40007000
 8004d30:	42470e40 	.word	0x42470e40

08004d34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d13e      	bne.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004d52:	4b23      	ldr	r3, [pc, #140]	; (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d005      	beq.n	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d12f      	bne.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d68:	4b1e      	ldr	r3, [pc, #120]	; (8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d6a:	617b      	str	r3, [r7, #20]
          break;
 8004d6c:	e02f      	b.n	8004dce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d6e:	4b1c      	ldr	r3, [pc, #112]	; (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d7a:	d108      	bne.n	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d7c:	4b18      	ldr	r3, [pc, #96]	; (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d84:	4a18      	ldr	r2, [pc, #96]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8a:	613b      	str	r3, [r7, #16]
 8004d8c:	e007      	b.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d8e:	4b14      	ldr	r3, [pc, #80]	; (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d96:	4a15      	ldr	r2, [pc, #84]	; (8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d9e:	4b10      	ldr	r3, [pc, #64]	; (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004da4:	099b      	lsrs	r3, r3, #6
 8004da6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	fb02 f303 	mul.w	r3, r2, r3
 8004db0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004db2:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004db8:	0f1b      	lsrs	r3, r3, #28
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc4:	617b      	str	r3, [r7, #20]
          break;
 8004dc6:	e002      	b.n	8004dce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	617b      	str	r3, [r7, #20]
          break;
 8004dcc:	bf00      	nop
        }
      }
      break;
 8004dce:	bf00      	nop
    }
  }
  return frequency;
 8004dd0:	697b      	ldr	r3, [r7, #20]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40023800 	.word	0x40023800
 8004de4:	00bb8000 	.word	0x00bb8000
 8004de8:	007a1200 	.word	0x007a1200
 8004dec:	00f42400 	.word	0x00f42400

08004df0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e07b      	b.n	8004efa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d108      	bne.n	8004e1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e12:	d009      	beq.n	8004e28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	61da      	str	r2, [r3, #28]
 8004e1a:	e005      	b.n	8004e28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7fb ff36 	bl	8000cb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e70:	431a      	orrs	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eac:	ea42 0103 	orr.w	r1, r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	0c1b      	lsrs	r3, r3, #16
 8004ec6:	f003 0104 	and.w	r1, r3, #4
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	f003 0210 	and.w	r2, r3, #16
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	69da      	ldr	r2, [r3, #28]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ee8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f02:	b084      	sub	sp, #16
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	f107 001c 	add.w	r0, r7, #28
 8004f10:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d122      	bne.n	8004f60 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004f2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d105      	bne.n	8004f54 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f9bf 	bl	80052d8 <USB_CoreReset>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	73fb      	strb	r3, [r7, #15]
 8004f5e:	e01a      	b.n	8004f96 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 f9b3 	bl	80052d8 <USB_CoreReset>
 8004f72:	4603      	mov	r3, r0
 8004f74:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d106      	bne.n	8004f8a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f80:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	639a      	str	r2, [r3, #56]	; 0x38
 8004f88:	e005      	b.n	8004f96 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d10b      	bne.n	8004fb4 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f043 0206 	orr.w	r2, r3, #6
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f043 0220 	orr.w	r2, r3, #32
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fc0:	b004      	add	sp, #16
 8004fc2:	4770      	bx	lr

08004fc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f043 0201 	orr.w	r2, r3, #1
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f023 0201 	bic.w	r2, r3, #1
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	460b      	mov	r3, r1
 8005012:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005014:	2300      	movs	r3, #0
 8005016:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005024:	78fb      	ldrb	r3, [r7, #3]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d115      	bne.n	8005056 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005036:	2001      	movs	r0, #1
 8005038:	f7fb ffa6 	bl	8000f88 <HAL_Delay>
      ms++;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3301      	adds	r3, #1
 8005040:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f939 	bl	80052ba <USB_GetMode>
 8005048:	4603      	mov	r3, r0
 800504a:	2b01      	cmp	r3, #1
 800504c:	d01e      	beq.n	800508c <USB_SetCurrentMode+0x84>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2b31      	cmp	r3, #49	; 0x31
 8005052:	d9f0      	bls.n	8005036 <USB_SetCurrentMode+0x2e>
 8005054:	e01a      	b.n	800508c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005056:	78fb      	ldrb	r3, [r7, #3]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d115      	bne.n	8005088 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005068:	2001      	movs	r0, #1
 800506a:	f7fb ff8d 	bl	8000f88 <HAL_Delay>
      ms++;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	3301      	adds	r3, #1
 8005072:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f920 	bl	80052ba <USB_GetMode>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <USB_SetCurrentMode+0x84>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b31      	cmp	r3, #49	; 0x31
 8005084:	d9f0      	bls.n	8005068 <USB_SetCurrentMode+0x60>
 8005086:	e001      	b.n	800508c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e005      	b.n	8005098 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b32      	cmp	r3, #50	; 0x32
 8005090:	d101      	bne.n	8005096 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e000      	b.n	8005098 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	3301      	adds	r3, #1
 80050b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4a13      	ldr	r2, [pc, #76]	; (8005104 <USB_FlushTxFifo+0x64>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d901      	bls.n	80050c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e01b      	b.n	80050f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	daf2      	bge.n	80050ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	019b      	lsls	r3, r3, #6
 80050d0:	f043 0220 	orr.w	r2, r3, #32
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	3301      	adds	r3, #1
 80050dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4a08      	ldr	r2, [pc, #32]	; (8005104 <USB_FlushTxFifo+0x64>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d901      	bls.n	80050ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e006      	b.n	80050f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	f003 0320 	and.w	r3, r3, #32
 80050f2:	2b20      	cmp	r3, #32
 80050f4:	d0f0      	beq.n	80050d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	00030d40 	.word	0x00030d40

08005108 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	3301      	adds	r3, #1
 8005118:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	4a11      	ldr	r2, [pc, #68]	; (8005164 <USB_FlushRxFifo+0x5c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d901      	bls.n	8005126 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e018      	b.n	8005158 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	daf2      	bge.n	8005114 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2210      	movs	r2, #16
 8005136:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	3301      	adds	r3, #1
 800513c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4a08      	ldr	r2, [pc, #32]	; (8005164 <USB_FlushRxFifo+0x5c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d901      	bls.n	800514a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e006      	b.n	8005158 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	f003 0310 	and.w	r3, r3, #16
 8005152:	2b10      	cmp	r3, #16
 8005154:	d0f0      	beq.n	8005138 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	00030d40 	.word	0x00030d40

08005168 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005168:	b480      	push	{r7}
 800516a:	b089      	sub	sp, #36	; 0x24
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	4611      	mov	r1, r2
 8005174:	461a      	mov	r2, r3
 8005176:	460b      	mov	r3, r1
 8005178:	71fb      	strb	r3, [r7, #7]
 800517a:	4613      	mov	r3, r2
 800517c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005186:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800518a:	2b00      	cmp	r3, #0
 800518c:	d123      	bne.n	80051d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800518e:	88bb      	ldrh	r3, [r7, #4]
 8005190:	3303      	adds	r3, #3
 8005192:	089b      	lsrs	r3, r3, #2
 8005194:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005196:	2300      	movs	r3, #0
 8005198:	61bb      	str	r3, [r7, #24]
 800519a:	e018      	b.n	80051ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	031a      	lsls	r2, r3, #12
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051a8:	461a      	mov	r2, r3
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	3301      	adds	r3, #1
 80051b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	3301      	adds	r3, #1
 80051ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	3301      	adds	r3, #1
 80051c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	3301      	adds	r3, #1
 80051c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	3301      	adds	r3, #1
 80051cc:	61bb      	str	r3, [r7, #24]
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d3e2      	bcc.n	800519c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3724      	adds	r7, #36	; 0x24
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b08b      	sub	sp, #44	; 0x2c
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	4613      	mov	r3, r2
 80051f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80051fa:	88fb      	ldrh	r3, [r7, #6]
 80051fc:	089b      	lsrs	r3, r3, #2
 80051fe:	b29b      	uxth	r3, r3
 8005200:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005202:	88fb      	ldrh	r3, [r7, #6]
 8005204:	f003 0303 	and.w	r3, r3, #3
 8005208:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800520a:	2300      	movs	r3, #0
 800520c:	623b      	str	r3, [r7, #32]
 800520e:	e014      	b.n	800523a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	601a      	str	r2, [r3, #0]
    pDest++;
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	3301      	adds	r3, #1
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	3301      	adds	r3, #1
 8005226:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	3301      	adds	r3, #1
 800522c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	3301      	adds	r3, #1
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	3301      	adds	r3, #1
 8005238:	623b      	str	r3, [r7, #32]
 800523a:	6a3a      	ldr	r2, [r7, #32]
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	429a      	cmp	r2, r3
 8005240:	d3e6      	bcc.n	8005210 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005242:	8bfb      	ldrh	r3, [r7, #30]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d01e      	beq.n	8005286 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005252:	461a      	mov	r2, r3
 8005254:	f107 0310 	add.w	r3, r7, #16
 8005258:	6812      	ldr	r2, [r2, #0]
 800525a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	b2db      	uxtb	r3, r3
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	fa22 f303 	lsr.w	r3, r2, r3
 8005268:	b2da      	uxtb	r2, r3
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	701a      	strb	r2, [r3, #0]
      i++;
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	3301      	adds	r3, #1
 8005272:	623b      	str	r3, [r7, #32]
      pDest++;
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	3301      	adds	r3, #1
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800527a:	8bfb      	ldrh	r3, [r7, #30]
 800527c:	3b01      	subs	r3, #1
 800527e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005280:	8bfb      	ldrh	r3, [r7, #30]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1ea      	bne.n	800525c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005288:	4618      	mov	r0, r3
 800528a:	372c      	adds	r7, #44	; 0x2c
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	4013      	ands	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80052ac:	68fb      	ldr	r3, [r7, #12]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b083      	sub	sp, #12
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	f003 0301 	and.w	r3, r3, #1
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
	...

080052d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3301      	adds	r3, #1
 80052e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	4a13      	ldr	r2, [pc, #76]	; (800533c <USB_CoreReset+0x64>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d901      	bls.n	80052f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e01b      	b.n	800532e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	daf2      	bge.n	80052e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f043 0201 	orr.w	r2, r3, #1
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	3301      	adds	r3, #1
 8005312:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4a09      	ldr	r2, [pc, #36]	; (800533c <USB_CoreReset+0x64>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d901      	bls.n	8005320 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e006      	b.n	800532e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b01      	cmp	r3, #1
 800532a:	d0f0      	beq.n	800530e <USB_CoreReset+0x36>

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	00030d40 	.word	0x00030d40

08005340 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005340:	b084      	sub	sp, #16
 8005342:	b580      	push	{r7, lr}
 8005344:	b086      	sub	sp, #24
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800534e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005352:	2300      	movs	r3, #0
 8005354:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005360:	461a      	mov	r2, r3
 8005362:	2300      	movs	r3, #0
 8005364:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005376:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005382:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800538e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005392:	2b00      	cmp	r3, #0
 8005394:	d018      	beq.n	80053c8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005398:	2b01      	cmp	r3, #1
 800539a:	d10a      	bne.n	80053b2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053aa:	f043 0304 	orr.w	r3, r3, #4
 80053ae:	6013      	str	r3, [r2, #0]
 80053b0:	e014      	b.n	80053dc <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053c0:	f023 0304 	bic.w	r3, r3, #4
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	e009      	b.n	80053dc <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053d6:	f023 0304 	bic.w	r3, r3, #4
 80053da:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053dc:	2110      	movs	r1, #16
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7ff fe5e 	bl	80050a0 <USB_FlushTxFifo>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7ff fe8a 	bl	8005108 <USB_FlushRxFifo>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80053fe:	2300      	movs	r3, #0
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	e015      	b.n	8005430 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4413      	add	r3, r2
 800540c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005410:	461a      	mov	r2, r3
 8005412:	f04f 33ff 	mov.w	r3, #4294967295
 8005416:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005424:	461a      	mov	r2, r3
 8005426:	2300      	movs	r3, #0
 8005428:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	3301      	adds	r3, #1
 800542e:	613b      	str	r3, [r7, #16]
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	429a      	cmp	r2, r3
 8005436:	d3e5      	bcc.n	8005404 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f04f 32ff 	mov.w	r2, #4294967295
 8005444:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00b      	beq.n	800546a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005458:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a13      	ldr	r2, [pc, #76]	; (80054ac <USB_HostInit+0x16c>)
 800545e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a13      	ldr	r2, [pc, #76]	; (80054b0 <USB_HostInit+0x170>)
 8005464:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005468:	e009      	b.n	800547e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2280      	movs	r2, #128	; 0x80
 800546e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a10      	ldr	r2, [pc, #64]	; (80054b4 <USB_HostInit+0x174>)
 8005474:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a0f      	ldr	r2, [pc, #60]	; (80054b8 <USB_HostInit+0x178>)
 800547a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800547e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005480:	2b00      	cmp	r3, #0
 8005482:	d105      	bne.n	8005490 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	f043 0210 	orr.w	r2, r3, #16
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	699a      	ldr	r2, [r3, #24]
 8005494:	4b09      	ldr	r3, [pc, #36]	; (80054bc <USB_HostInit+0x17c>)
 8005496:	4313      	orrs	r3, r2
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800549c:	7dfb      	ldrb	r3, [r7, #23]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3718      	adds	r7, #24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054a8:	b004      	add	sp, #16
 80054aa:	4770      	bx	lr
 80054ac:	01000200 	.word	0x01000200
 80054b0:	00e00300 	.word	0x00e00300
 80054b4:	00600080 	.word	0x00600080
 80054b8:	004000e0 	.word	0x004000e0
 80054bc:	a3200008 	.word	0xa3200008

080054c0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	460b      	mov	r3, r1
 80054ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054de:	f023 0303 	bic.w	r3, r3, #3
 80054e2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	68f9      	ldr	r1, [r7, #12]
 80054f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80054f8:	4313      	orrs	r3, r2
 80054fa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80054fc:	78fb      	ldrb	r3, [r7, #3]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d107      	bne.n	8005512 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005508:	461a      	mov	r2, r3
 800550a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800550e:	6053      	str	r3, [r2, #4]
 8005510:	e009      	b.n	8005526 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005512:	78fb      	ldrb	r3, [r7, #3]
 8005514:	2b02      	cmp	r3, #2
 8005516:	d106      	bne.n	8005526 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800551e:	461a      	mov	r2, r3
 8005520:	f241 7370 	movw	r3, #6000	; 0x1770
 8005524:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005540:	2300      	movs	r3, #0
 8005542:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005554:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800555e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005562:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005564:	2064      	movs	r0, #100	; 0x64
 8005566:	f7fb fd0f 	bl	8000f88 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005572:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005576:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005578:	200a      	movs	r0, #10
 800557a:	f7fb fd05 	bl	8000f88 <HAL_Delay>

  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	460b      	mov	r3, r1
 8005592:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005598:	2300      	movs	r3, #0
 800559a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80055ac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d109      	bne.n	80055cc <USB_DriveVbus+0x44>
 80055b8:	78fb      	ldrb	r3, [r7, #3]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d106      	bne.n	80055cc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80055c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055ca:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d6:	d109      	bne.n	80055ec <USB_DriveVbus+0x64>
 80055d8:	78fb      	ldrb	r3, [r7, #3]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d106      	bne.n	80055ec <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80055e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055ea:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b085      	sub	sp, #20
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	0c5b      	lsrs	r3, r3, #17
 8005618:	f003 0303 	and.w	r3, r3, #3
}
 800561c:	4618      	mov	r0, r3
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	b29b      	uxth	r3, r3
}
 800563e:	4618      	mov	r0, r3
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
	...

0800564c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b088      	sub	sp, #32
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	4608      	mov	r0, r1
 8005656:	4611      	mov	r1, r2
 8005658:	461a      	mov	r2, r3
 800565a:	4603      	mov	r3, r0
 800565c:	70fb      	strb	r3, [r7, #3]
 800565e:	460b      	mov	r3, r1
 8005660:	70bb      	strb	r3, [r7, #2]
 8005662:	4613      	mov	r3, r2
 8005664:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800566e:	78fb      	ldrb	r3, [r7, #3]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	4413      	add	r3, r2
 8005676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800567a:	461a      	mov	r2, r3
 800567c:	f04f 33ff 	mov.w	r3, #4294967295
 8005680:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005682:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005686:	2b03      	cmp	r3, #3
 8005688:	d87e      	bhi.n	8005788 <USB_HC_Init+0x13c>
 800568a:	a201      	add	r2, pc, #4	; (adr r2, 8005690 <USB_HC_Init+0x44>)
 800568c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005690:	080056a1 	.word	0x080056a1
 8005694:	0800574b 	.word	0x0800574b
 8005698:	080056a1 	.word	0x080056a1
 800569c:	0800570d 	.word	0x0800570d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056a0:	78fb      	ldrb	r3, [r7, #3]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ac:	461a      	mov	r2, r3
 80056ae:	f240 439d 	movw	r3, #1181	; 0x49d
 80056b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80056b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	da10      	bge.n	80056de <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80056bc:	78fb      	ldrb	r3, [r7, #3]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	78fa      	ldrb	r2, [r7, #3]
 80056cc:	0151      	lsls	r1, r2, #5
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	440a      	add	r2, r1
 80056d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056da:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80056dc:	e057      	b.n	800578e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d051      	beq.n	800578e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80056ea:	78fb      	ldrb	r3, [r7, #3]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	78fa      	ldrb	r2, [r7, #3]
 80056fa:	0151      	lsls	r1, r2, #5
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	440a      	add	r2, r1
 8005700:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005704:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005708:	60d3      	str	r3, [r2, #12]
      break;
 800570a:	e040      	b.n	800578e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800570c:	78fb      	ldrb	r3, [r7, #3]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	4413      	add	r3, r2
 8005714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005718:	461a      	mov	r2, r3
 800571a:	f240 639d 	movw	r3, #1693	; 0x69d
 800571e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005720:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005724:	2b00      	cmp	r3, #0
 8005726:	da34      	bge.n	8005792 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005728:	78fb      	ldrb	r3, [r7, #3]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	4413      	add	r3, r2
 8005730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	78fa      	ldrb	r2, [r7, #3]
 8005738:	0151      	lsls	r1, r2, #5
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	440a      	add	r2, r1
 800573e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005746:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005748:	e023      	b.n	8005792 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800574a:	78fb      	ldrb	r3, [r7, #3]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	4413      	add	r3, r2
 8005752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005756:	461a      	mov	r2, r3
 8005758:	f240 2325 	movw	r3, #549	; 0x225
 800575c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800575e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005762:	2b00      	cmp	r3, #0
 8005764:	da17      	bge.n	8005796 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005766:	78fb      	ldrb	r3, [r7, #3]
 8005768:	015a      	lsls	r2, r3, #5
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	4413      	add	r3, r2
 800576e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	78fa      	ldrb	r2, [r7, #3]
 8005776:	0151      	lsls	r1, r2, #5
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	440a      	add	r2, r1
 800577c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005780:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005784:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005786:	e006      	b.n	8005796 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	77fb      	strb	r3, [r7, #31]
      break;
 800578c:	e004      	b.n	8005798 <USB_HC_Init+0x14c>
      break;
 800578e:	bf00      	nop
 8005790:	e002      	b.n	8005798 <USB_HC_Init+0x14c>
      break;
 8005792:	bf00      	nop
 8005794:	e000      	b.n	8005798 <USB_HC_Init+0x14c>
      break;
 8005796:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005798:	78fb      	ldrb	r3, [r7, #3]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	78fa      	ldrb	r2, [r7, #3]
 80057a8:	0151      	lsls	r1, r2, #5
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	440a      	add	r2, r1
 80057ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057b2:	f043 0302 	orr.w	r3, r3, #2
 80057b6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057be:	699a      	ldr	r2, [r3, #24]
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	f003 030f 	and.w	r3, r3, #15
 80057c6:	2101      	movs	r1, #1
 80057c8:	fa01 f303 	lsl.w	r3, r1, r3
 80057cc:	6939      	ldr	r1, [r7, #16]
 80057ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80057d2:	4313      	orrs	r3, r2
 80057d4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80057e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	da03      	bge.n	80057f2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80057ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ee:	61bb      	str	r3, [r7, #24]
 80057f0:	e001      	b.n	80057f6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7ff feff 	bl	80055fa <USB_GetHostSpeed>
 80057fc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80057fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005802:	2b02      	cmp	r3, #2
 8005804:	d106      	bne.n	8005814 <USB_HC_Init+0x1c8>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b02      	cmp	r3, #2
 800580a:	d003      	beq.n	8005814 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800580c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005810:	617b      	str	r3, [r7, #20]
 8005812:	e001      	b.n	8005818 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005814:	2300      	movs	r3, #0
 8005816:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005818:	787b      	ldrb	r3, [r7, #1]
 800581a:	059b      	lsls	r3, r3, #22
 800581c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005820:	78bb      	ldrb	r3, [r7, #2]
 8005822:	02db      	lsls	r3, r3, #11
 8005824:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005828:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800582a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800582e:	049b      	lsls	r3, r3, #18
 8005830:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005834:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005836:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005838:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800583c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005842:	78fb      	ldrb	r3, [r7, #3]
 8005844:	0159      	lsls	r1, r3, #5
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	440b      	add	r3, r1
 800584a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800584e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005854:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005856:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800585a:	2b03      	cmp	r3, #3
 800585c:	d003      	beq.n	8005866 <USB_HC_Init+0x21a>
 800585e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005862:	2b01      	cmp	r3, #1
 8005864:	d10f      	bne.n	8005886 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005866:	78fb      	ldrb	r3, [r7, #3]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	4413      	add	r3, r2
 800586e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	78fa      	ldrb	r2, [r7, #3]
 8005876:	0151      	lsls	r1, r2, #5
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	440a      	add	r2, r1
 800587c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005880:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005884:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005886:	7ffb      	ldrb	r3, [r7, #31]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3720      	adds	r7, #32
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b08c      	sub	sp, #48	; 0x30
 8005894:	af02      	add	r7, sp, #8
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	4613      	mov	r3, r2
 800589c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	785b      	ldrb	r3, [r3, #1]
 80058a6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80058a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058ac:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d02d      	beq.n	8005916 <USB_HC_StartXfer+0x86>
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	791b      	ldrb	r3, [r3, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d129      	bne.n	8005916 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80058c2:	79fb      	ldrb	r3, [r7, #7]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d117      	bne.n	80058f8 <USB_HC_StartXfer+0x68>
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	79db      	ldrb	r3, [r3, #7]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <USB_HC_StartXfer+0x48>
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	79db      	ldrb	r3, [r3, #7]
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d10f      	bne.n	80058f8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	69fa      	ldr	r2, [r7, #28]
 80058e8:	0151      	lsls	r1, r2, #5
 80058ea:	6a3a      	ldr	r2, [r7, #32]
 80058ec:	440a      	add	r2, r1
 80058ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80058f8:	79fb      	ldrb	r3, [r7, #7]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10b      	bne.n	8005916 <USB_HC_StartXfer+0x86>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	795b      	ldrb	r3, [r3, #5]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d107      	bne.n	8005916 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	785b      	ldrb	r3, [r3, #1]
 800590a:	4619      	mov	r1, r3
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 fa0f 	bl	8005d30 <USB_DoPing>
      return HAL_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	e0f8      	b.n	8005b08 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d018      	beq.n	8005950 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	8912      	ldrh	r2, [r2, #8]
 8005926:	4413      	add	r3, r2
 8005928:	3b01      	subs	r3, #1
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	8912      	ldrh	r2, [r2, #8]
 800592e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005932:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005934:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005936:	8b7b      	ldrh	r3, [r7, #26]
 8005938:	429a      	cmp	r2, r3
 800593a:	d90b      	bls.n	8005954 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800593c:	8b7b      	ldrh	r3, [r7, #26]
 800593e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005940:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	8912      	ldrh	r2, [r2, #8]
 8005946:	fb03 f202 	mul.w	r2, r3, r2
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	611a      	str	r2, [r3, #16]
 800594e:	e001      	b.n	8005954 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005950:	2301      	movs	r3, #1
 8005952:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	78db      	ldrb	r3, [r3, #3]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d007      	beq.n	800596c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800595c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	8912      	ldrh	r2, [r2, #8]
 8005962:	fb03 f202 	mul.w	r2, r3, r2
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	611a      	str	r2, [r3, #16]
 800596a:	e003      	b.n	8005974 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	695a      	ldr	r2, [r3, #20]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800597c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800597e:	04d9      	lsls	r1, r3, #19
 8005980:	4b63      	ldr	r3, [pc, #396]	; (8005b10 <USB_HC_StartXfer+0x280>)
 8005982:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005984:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	7a9b      	ldrb	r3, [r3, #10]
 800598a:	075b      	lsls	r3, r3, #29
 800598c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005990:	69f9      	ldr	r1, [r7, #28]
 8005992:	0148      	lsls	r0, r1, #5
 8005994:	6a39      	ldr	r1, [r7, #32]
 8005996:	4401      	add	r1, r0
 8005998:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800599c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800599e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80059a0:	79fb      	ldrb	r3, [r7, #7]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d009      	beq.n	80059ba <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	68d9      	ldr	r1, [r3, #12]
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b6:	460a      	mov	r2, r1
 80059b8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	bf0c      	ite	eq
 80059ca:	2301      	moveq	r3, #1
 80059cc:	2300      	movne	r3, #0
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	69fa      	ldr	r2, [r7, #28]
 80059e2:	0151      	lsls	r1, r2, #5
 80059e4:	6a3a      	ldr	r2, [r7, #32]
 80059e6:	440a      	add	r2, r1
 80059e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80059f0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	7e7b      	ldrb	r3, [r7, #25]
 8005a02:	075b      	lsls	r3, r3, #29
 8005a04:	69f9      	ldr	r1, [r7, #28]
 8005a06:	0148      	lsls	r0, r1, #5
 8005a08:	6a39      	ldr	r1, [r7, #32]
 8005a0a:	4401      	add	r1, r0
 8005a0c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005a10:	4313      	orrs	r3, r2
 8005a12:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a2a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	78db      	ldrb	r3, [r3, #3]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d004      	beq.n	8005a3e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a3a:	613b      	str	r3, [r7, #16]
 8005a3c:	e003      	b.n	8005a46 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a44:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a4c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005a60:	79fb      	ldrb	r3, [r7, #7]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	e04e      	b.n	8005b08 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	78db      	ldrb	r3, [r3, #3]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d149      	bne.n	8005b06 <USB_HC_StartXfer+0x276>
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d045      	beq.n	8005b06 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	79db      	ldrb	r3, [r3, #7]
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d830      	bhi.n	8005ae4 <USB_HC_StartXfer+0x254>
 8005a82:	a201      	add	r2, pc, #4	; (adr r2, 8005a88 <USB_HC_StartXfer+0x1f8>)
 8005a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a88:	08005a99 	.word	0x08005a99
 8005a8c:	08005abd 	.word	0x08005abd
 8005a90:	08005a99 	.word	0x08005a99
 8005a94:	08005abd 	.word	0x08005abd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	3303      	adds	r3, #3
 8005a9e:	089b      	lsrs	r3, r3, #2
 8005aa0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005aa2:	8afa      	ldrh	r2, [r7, #22]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d91c      	bls.n	8005ae8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	f043 0220 	orr.w	r2, r3, #32
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	619a      	str	r2, [r3, #24]
        }
        break;
 8005aba:	e015      	b.n	8005ae8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	3303      	adds	r3, #3
 8005ac2:	089b      	lsrs	r3, r3, #2
 8005ac4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005ac6:	8afa      	ldrh	r2, [r7, #22]
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d90a      	bls.n	8005aec <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	619a      	str	r2, [r3, #24]
        }
        break;
 8005ae2:	e003      	b.n	8005aec <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005ae4:	bf00      	nop
 8005ae6:	e002      	b.n	8005aee <USB_HC_StartXfer+0x25e>
        break;
 8005ae8:	bf00      	nop
 8005aea:	e000      	b.n	8005aee <USB_HC_StartXfer+0x25e>
        break;
 8005aec:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	68d9      	ldr	r1, [r3, #12]
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	785a      	ldrb	r2, [r3, #1]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2000      	movs	r0, #0
 8005afe:	9000      	str	r0, [sp, #0]
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f7ff fb31 	bl	8005168 <USB_WritePacket>
  }

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3728      	adds	r7, #40	; 0x28
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	1ff80000 	.word	0x1ff80000

08005b14 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	b29b      	uxth	r3, r3
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b089      	sub	sp, #36	; 0x24
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
 8005b3e:	460b      	mov	r3, r1
 8005b40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005b46:	78fb      	ldrb	r3, [r7, #3]
 8005b48:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	0c9b      	lsrs	r3, r3, #18
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	0fdb      	lsrs	r3, r3, #31
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f003 0320 	and.w	r3, r3, #32
 8005b82:	2b20      	cmp	r3, #32
 8005b84:	d104      	bne.n	8005b90 <USB_HC_Halt+0x5a>
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d101      	bne.n	8005b90 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	e0c8      	b.n	8005d22 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <USB_HC_Halt+0x66>
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d163      	bne.n	8005c64 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69ba      	ldr	r2, [r7, #24]
 8005bac:	0151      	lsls	r1, r2, #5
 8005bae:	69fa      	ldr	r2, [r7, #28]
 8005bb0:	440a      	add	r2, r1
 8005bb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bba:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f003 0320 	and.w	r3, r3, #32
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f040 80ab 	bne.w	8005d20 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d133      	bne.n	8005c3e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	0151      	lsls	r1, r2, #5
 8005be8:	69fa      	ldr	r2, [r7, #28]
 8005bea:	440a      	add	r2, r1
 8005bec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bf4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	0151      	lsls	r1, r2, #5
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	440a      	add	r2, r1
 8005c0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c14:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c22:	d81d      	bhi.n	8005c60 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c3a:	d0ec      	beq.n	8005c16 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c3c:	e070      	b.n	8005d20 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	0151      	lsls	r1, r2, #5
 8005c50:	69fa      	ldr	r2, [r7, #28]
 8005c52:	440a      	add	r2, r1
 8005c54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c5c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c5e:	e05f      	b.n	8005d20 <USB_HC_Halt+0x1ea>
            break;
 8005c60:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c62:	e05d      	b.n	8005d20 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	0151      	lsls	r1, r2, #5
 8005c76:	69fa      	ldr	r2, [r7, #28]
 8005c78:	440a      	add	r2, r1
 8005c7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c82:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d133      	bne.n	8005cfc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	0151      	lsls	r1, r2, #5
 8005ca6:	69fa      	ldr	r2, [r7, #28]
 8005ca8:	440a      	add	r2, r1
 8005caa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cb2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	0151      	lsls	r1, r2, #5
 8005cc6:	69fa      	ldr	r2, [r7, #28]
 8005cc8:	440a      	add	r2, r1
 8005cca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cd2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ce0:	d81d      	bhi.n	8005d1e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cf8:	d0ec      	beq.n	8005cd4 <USB_HC_Halt+0x19e>
 8005cfa:	e011      	b.n	8005d20 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	0151      	lsls	r1, r2, #5
 8005d0e:	69fa      	ldr	r2, [r7, #28]
 8005d10:	440a      	add	r2, r1
 8005d12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	e000      	b.n	8005d20 <USB_HC_Halt+0x1ea>
          break;
 8005d1e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3724      	adds	r7, #36	; 0x24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
	...

08005d30 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005d40:	78fb      	ldrb	r3, [r7, #3]
 8005d42:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005d44:	2301      	movs	r3, #1
 8005d46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	04da      	lsls	r2, r3, #19
 8005d4c:	4b15      	ldr	r3, [pc, #84]	; (8005da4 <USB_DoPing+0x74>)
 8005d4e:	4013      	ands	r3, r2
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	0151      	lsls	r1, r2, #5
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	440a      	add	r2, r1
 8005d58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d60:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d78:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d80:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8e:	461a      	mov	r2, r3
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	371c      	adds	r7, #28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	1ff80000 	.word	0x1ff80000

08005da8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b088      	sub	sp, #32
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005db8:	2300      	movs	r3, #0
 8005dba:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7ff f912 	bl	8004fe6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005dc2:	2110      	movs	r1, #16
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7ff f96b 	bl	80050a0 <USB_FlushTxFifo>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7ff f997 	bl	8005108 <USB_FlushRxFifo>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005de4:	2300      	movs	r3, #0
 8005de6:	61bb      	str	r3, [r7, #24]
 8005de8:	e01f      	b.n	8005e2a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e00:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e08:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e10:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e1e:	461a      	mov	r2, r3
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	3301      	adds	r3, #1
 8005e28:	61bb      	str	r3, [r7, #24]
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	2b0f      	cmp	r3, #15
 8005e2e:	d9dc      	bls.n	8005dea <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005e30:	2300      	movs	r3, #0
 8005e32:	61bb      	str	r3, [r7, #24]
 8005e34:	e034      	b.n	8005ea0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e4c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e54:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e5c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	3301      	adds	r3, #1
 8005e74:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e7c:	d80c      	bhi.n	8005e98 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e94:	d0ec      	beq.n	8005e70 <USB_StopHost+0xc8>
 8005e96:	e000      	b.n	8005e9a <USB_StopHost+0xf2>
        break;
 8005e98:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	61bb      	str	r3, [r7, #24]
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	2b0f      	cmp	r3, #15
 8005ea4:	d9c7      	bls.n	8005e36 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eac:	461a      	mov	r2, r3
 8005eae:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eba:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7ff f881 	bl	8004fc4 <USB_EnableGlobalInt>

  return ret;
 8005ec2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3720      	adds	r7, #32
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005ecc:	b590      	push	{r4, r7, lr}
 8005ece:	b089      	sub	sp, #36	; 0x24
 8005ed0:	af04      	add	r7, sp, #16
 8005ed2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	2102      	movs	r1, #2
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fc66 	bl	80067ac <USBH_FindInterface>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005ee4:	7bfb      	ldrb	r3, [r7, #15]
 8005ee6:	2bff      	cmp	r3, #255	; 0xff
 8005ee8:	d002      	beq.n	8005ef0 <USBH_CDC_InterfaceInit+0x24>
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d901      	bls.n	8005ef4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	e13d      	b.n	8006170 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fc3b 	bl	8006774 <USBH_SelectInterface>
 8005efe:	4603      	mov	r3, r0
 8005f00:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005f02:	7bbb      	ldrb	r3, [r7, #14]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005f08:	2302      	movs	r3, #2
 8005f0a:	e131      	b.n	8006170 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005f12:	2050      	movs	r0, #80	; 0x50
 8005f14:	f002 fafa 	bl	800850c <malloc>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f22:	69db      	ldr	r3, [r3, #28]
 8005f24:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	e11f      	b.n	8006170 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005f30:	2250      	movs	r2, #80	; 0x50
 8005f32:	2100      	movs	r1, #0
 8005f34:	68b8      	ldr	r0, [r7, #8]
 8005f36:	f002 faf9 	bl	800852c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005f3a:	7bfb      	ldrb	r3, [r7, #15]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	211a      	movs	r1, #26
 8005f40:	fb01 f303 	mul.w	r3, r1, r3
 8005f44:	4413      	add	r3, r2
 8005f46:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	b25b      	sxtb	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	da15      	bge.n	8005f7e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	211a      	movs	r1, #26
 8005f58:	fb01 f303 	mul.w	r3, r1, r3
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f62:	781a      	ldrb	r2, [r3, #0]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	211a      	movs	r1, #26
 8005f6e:	fb01 f303 	mul.w	r3, r1, r3
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f78:	881a      	ldrh	r2, [r3, #0]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	785b      	ldrb	r3, [r3, #1]
 8005f82:	4619      	mov	r1, r3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f001 ff2c 	bl	8007de2 <USBH_AllocPipe>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	7819      	ldrb	r1, [r3, #0]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	7858      	ldrb	r0, [r3, #1]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	8952      	ldrh	r2, [r2, #10]
 8005faa:	9202      	str	r2, [sp, #8]
 8005fac:	2203      	movs	r2, #3
 8005fae:	9201      	str	r2, [sp, #4]
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	4623      	mov	r3, r4
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f001 fee4 	bl	8007d84 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f002 f9f3 	bl	80083b0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005fca:	2300      	movs	r3, #0
 8005fcc:	2200      	movs	r2, #0
 8005fce:	210a      	movs	r1, #10
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 fbeb 	bl	80067ac <USBH_FindInterface>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
 8005fdc:	2bff      	cmp	r3, #255	; 0xff
 8005fde:	d002      	beq.n	8005fe6 <USBH_CDC_InterfaceInit+0x11a>
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d901      	bls.n	8005fea <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	e0c2      	b.n	8006170 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	211a      	movs	r1, #26
 8005ff0:	fb01 f303 	mul.w	r3, r1, r3
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	b25b      	sxtb	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	da16      	bge.n	8006030 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006002:	7bfb      	ldrb	r3, [r7, #15]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	211a      	movs	r1, #26
 8006008:	fb01 f303 	mul.w	r3, r1, r3
 800600c:	4413      	add	r3, r2
 800600e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006012:	781a      	ldrb	r2, [r3, #0]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006018:	7bfb      	ldrb	r3, [r7, #15]
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	211a      	movs	r1, #26
 800601e:	fb01 f303 	mul.w	r3, r1, r3
 8006022:	4413      	add	r3, r2
 8006024:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006028:	881a      	ldrh	r2, [r3, #0]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	835a      	strh	r2, [r3, #26]
 800602e:	e015      	b.n	800605c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006030:	7bfb      	ldrb	r3, [r7, #15]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	211a      	movs	r1, #26
 8006036:	fb01 f303 	mul.w	r3, r1, r3
 800603a:	4413      	add	r3, r2
 800603c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006040:	781a      	ldrb	r2, [r3, #0]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006046:	7bfb      	ldrb	r3, [r7, #15]
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	211a      	movs	r1, #26
 800604c:	fb01 f303 	mul.w	r3, r1, r3
 8006050:	4413      	add	r3, r2
 8006052:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006056:	881a      	ldrh	r2, [r3, #0]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800605c:	7bfb      	ldrb	r3, [r7, #15]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	211a      	movs	r1, #26
 8006062:	fb01 f303 	mul.w	r3, r1, r3
 8006066:	4413      	add	r3, r2
 8006068:	f203 3356 	addw	r3, r3, #854	; 0x356
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	b25b      	sxtb	r3, r3
 8006070:	2b00      	cmp	r3, #0
 8006072:	da16      	bge.n	80060a2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006074:	7bfb      	ldrb	r3, [r7, #15]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	211a      	movs	r1, #26
 800607a:	fb01 f303 	mul.w	r3, r1, r3
 800607e:	4413      	add	r3, r2
 8006080:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006084:	781a      	ldrb	r2, [r3, #0]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800608a:	7bfb      	ldrb	r3, [r7, #15]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	211a      	movs	r1, #26
 8006090:	fb01 f303 	mul.w	r3, r1, r3
 8006094:	4413      	add	r3, r2
 8006096:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800609a:	881a      	ldrh	r2, [r3, #0]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	835a      	strh	r2, [r3, #26]
 80060a0:	e015      	b.n	80060ce <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	211a      	movs	r1, #26
 80060a8:	fb01 f303 	mul.w	r3, r1, r3
 80060ac:	4413      	add	r3, r2
 80060ae:	f203 3356 	addw	r3, r3, #854	; 0x356
 80060b2:	781a      	ldrb	r2, [r3, #0]
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	211a      	movs	r1, #26
 80060be:	fb01 f303 	mul.w	r3, r1, r3
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80060c8:	881a      	ldrh	r2, [r3, #0]
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	7b9b      	ldrb	r3, [r3, #14]
 80060d2:	4619      	mov	r1, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f001 fe84 	bl	8007de2 <USBH_AllocPipe>
 80060da:	4603      	mov	r3, r0
 80060dc:	461a      	mov	r2, r3
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	7bdb      	ldrb	r3, [r3, #15]
 80060e6:	4619      	mov	r1, r3
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f001 fe7a 	bl	8007de2 <USBH_AllocPipe>
 80060ee:	4603      	mov	r3, r0
 80060f0:	461a      	mov	r2, r3
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	7b59      	ldrb	r1, [r3, #13]
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	7b98      	ldrb	r0, [r3, #14]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	8b12      	ldrh	r2, [r2, #24]
 800610e:	9202      	str	r2, [sp, #8]
 8006110:	2202      	movs	r2, #2
 8006112:	9201      	str	r2, [sp, #4]
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	4623      	mov	r3, r4
 8006118:	4602      	mov	r2, r0
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f001 fe32 	bl	8007d84 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	7b19      	ldrb	r1, [r3, #12]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	7bd8      	ldrb	r0, [r3, #15]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	8b52      	ldrh	r2, [r2, #26]
 8006138:	9202      	str	r2, [sp, #8]
 800613a:	2202      	movs	r2, #2
 800613c:	9201      	str	r2, [sp, #4]
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	4623      	mov	r3, r4
 8006142:	4602      	mov	r2, r0
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 fe1d 	bl	8007d84 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	7b5b      	ldrb	r3, [r3, #13]
 8006156:	2200      	movs	r2, #0
 8006158:	4619      	mov	r1, r3
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f002 f928 	bl	80083b0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	7b1b      	ldrb	r3, [r3, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	4619      	mov	r1, r3
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f002 f921 	bl	80083b0 <USBH_LL_SetToggle>

  return USBH_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	bd90      	pop	{r4, r7, pc}

08006178 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00e      	beq.n	80061b0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	4619      	mov	r1, r3
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f001 fe12 	bl	8007dc2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f001 fe3d 	bl	8007e24 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	7b1b      	ldrb	r3, [r3, #12]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00e      	beq.n	80061d6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	7b1b      	ldrb	r3, [r3, #12]
 80061bc:	4619      	mov	r1, r3
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f001 fdff 	bl	8007dc2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	7b1b      	ldrb	r3, [r3, #12]
 80061c8:	4619      	mov	r1, r3
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f001 fe2a 	bl	8007e24 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	7b5b      	ldrb	r3, [r3, #13]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00e      	beq.n	80061fc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	7b5b      	ldrb	r3, [r3, #13]
 80061e2:	4619      	mov	r1, r3
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f001 fdec 	bl	8007dc2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	7b5b      	ldrb	r3, [r3, #13]
 80061ee:	4619      	mov	r1, r3
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f001 fe17 	bl	8007e24 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006202:	69db      	ldr	r3, [r3, #28]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00b      	beq.n	8006220 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	4618      	mov	r0, r3
 8006212:	f002 f983 	bl	800851c <free>
    phost->pActiveClass->pData = 0U;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800621c:	2200      	movs	r2, #0
 800621e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	3340      	adds	r3, #64	; 0x40
 8006240:	4619      	mov	r1, r3
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f8b1 	bl	80063aa <GetLineCoding>
 8006248:	4603      	mov	r3, r0
 800624a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800624c:	7afb      	ldrb	r3, [r7, #11]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d105      	bne.n	800625e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006258:	2102      	movs	r1, #2
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800625e:	7afb      	ldrb	r3, [r7, #11]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006270:	2301      	movs	r3, #1
 8006272:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006274:	2300      	movs	r3, #0
 8006276:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800627e:	69db      	ldr	r3, [r3, #28]
 8006280:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006288:	2b04      	cmp	r3, #4
 800628a:	d877      	bhi.n	800637c <USBH_CDC_Process+0x114>
 800628c:	a201      	add	r2, pc, #4	; (adr r2, 8006294 <USBH_CDC_Process+0x2c>)
 800628e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006292:	bf00      	nop
 8006294:	080062a9 	.word	0x080062a9
 8006298:	080062af 	.word	0x080062af
 800629c:	080062df 	.word	0x080062df
 80062a0:	08006353 	.word	0x08006353
 80062a4:	08006361 	.word	0x08006361
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80062a8:	2300      	movs	r3, #0
 80062aa:	73fb      	strb	r3, [r7, #15]
      break;
 80062ac:	e06d      	b.n	800638a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062b2:	4619      	mov	r1, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f897 	bl	80063e8 <SetLineCoding>
 80062ba:	4603      	mov	r3, r0
 80062bc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80062be:	7bbb      	ldrb	r3, [r7, #14]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d104      	bne.n	80062ce <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2202      	movs	r2, #2
 80062c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80062cc:	e058      	b.n	8006380 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80062ce:	7bbb      	ldrb	r3, [r7, #14]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d055      	beq.n	8006380 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2204      	movs	r2, #4
 80062d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80062dc:	e050      	b.n	8006380 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	3340      	adds	r3, #64	; 0x40
 80062e2:	4619      	mov	r1, r3
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f860 	bl	80063aa <GetLineCoding>
 80062ea:	4603      	mov	r3, r0
 80062ec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80062ee:	7bbb      	ldrb	r3, [r7, #14]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d126      	bne.n	8006342 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006306:	791b      	ldrb	r3, [r3, #4]
 8006308:	429a      	cmp	r2, r3
 800630a:	d13b      	bne.n	8006384 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006316:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006318:	429a      	cmp	r2, r3
 800631a:	d133      	bne.n	8006384 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006326:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006328:	429a      	cmp	r2, r3
 800632a:	d12b      	bne.n	8006384 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006334:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006336:	429a      	cmp	r2, r3
 8006338:	d124      	bne.n	8006384 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f958 	bl	80065f0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006340:	e020      	b.n	8006384 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006342:	7bbb      	ldrb	r3, [r7, #14]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d01d      	beq.n	8006384 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	2204      	movs	r2, #4
 800634c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006350:	e018      	b.n	8006384 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f867 	bl	8006426 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f8da 	bl	8006512 <CDC_ProcessReception>
      break;
 800635e:	e014      	b.n	800638a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006360:	2100      	movs	r1, #0
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 ffef 	bl	8007346 <USBH_ClrFeature>
 8006368:	4603      	mov	r3, r0
 800636a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800636c:	7bbb      	ldrb	r3, [r7, #14]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10a      	bne.n	8006388 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800637a:	e005      	b.n	8006388 <USBH_CDC_Process+0x120>

    default:
      break;
 800637c:	bf00      	nop
 800637e:	e004      	b.n	800638a <USBH_CDC_Process+0x122>
      break;
 8006380:	bf00      	nop
 8006382:	e002      	b.n	800638a <USBH_CDC_Process+0x122>
      break;
 8006384:	bf00      	nop
 8006386:	e000      	b.n	800638a <USBH_CDC_Process+0x122>
      break;
 8006388:	bf00      	nop

  }

  return status;
 800638a:	7bfb      	ldrb	r3, [r7, #15]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b082      	sub	sp, #8
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
 80063b2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	22a1      	movs	r2, #161	; 0xa1
 80063b8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2221      	movs	r2, #33	; 0x21
 80063be:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2207      	movs	r2, #7
 80063d0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2207      	movs	r2, #7
 80063d6:	4619      	mov	r1, r3
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f001 fa81 	bl	80078e0 <USBH_CtlReq>
 80063de:	4603      	mov	r3, r0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2221      	movs	r2, #33	; 0x21
 80063f6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2220      	movs	r2, #32
 80063fc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2207      	movs	r2, #7
 800640e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	2207      	movs	r2, #7
 8006414:	4619      	mov	r1, r3
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f001 fa62 	bl	80078e0 <USBH_CtlReq>
 800641c:	4603      	mov	r3, r0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3708      	adds	r7, #8
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b086      	sub	sp, #24
 800642a:	af02      	add	r7, sp, #8
 800642c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006438:	2300      	movs	r3, #0
 800643a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006442:	2b01      	cmp	r3, #1
 8006444:	d002      	beq.n	800644c <CDC_ProcessTransmission+0x26>
 8006446:	2b02      	cmp	r3, #2
 8006448:	d023      	beq.n	8006492 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800644a:	e05e      	b.n	800650a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	8b12      	ldrh	r2, [r2, #24]
 8006454:	4293      	cmp	r3, r2
 8006456:	d90b      	bls.n	8006470 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	69d9      	ldr	r1, [r3, #28]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8b1a      	ldrh	r2, [r3, #24]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	7b5b      	ldrb	r3, [r3, #13]
 8006464:	2001      	movs	r0, #1
 8006466:	9000      	str	r0, [sp, #0]
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f001 fc48 	bl	8007cfe <USBH_BulkSendData>
 800646e:	e00b      	b.n	8006488 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	7b5b      	ldrb	r3, [r3, #13]
 800647e:	2001      	movs	r0, #1
 8006480:	9000      	str	r0, [sp, #0]
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f001 fc3b 	bl	8007cfe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006490:	e03b      	b.n	800650a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	7b5b      	ldrb	r3, [r3, #13]
 8006496:	4619      	mov	r1, r3
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f001 ff5f 	bl	800835c <USBH_LL_GetURBState>
 800649e:	4603      	mov	r3, r0
 80064a0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80064a2:	7afb      	ldrb	r3, [r7, #11]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d128      	bne.n	80064fa <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	8b12      	ldrh	r2, [r2, #24]
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d90e      	bls.n	80064d2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	8b12      	ldrh	r2, [r2, #24]
 80064bc:	1a9a      	subs	r2, r3, r2
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	8b12      	ldrh	r2, [r2, #24]
 80064ca:	441a      	add	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	61da      	str	r2, [r3, #28]
 80064d0:	e002      	b.n	80064d8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d004      	beq.n	80064ea <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80064e8:	e00e      	b.n	8006508 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f868 	bl	80065c8 <USBH_CDC_TransmitCallback>
      break;
 80064f8:	e006      	b.n	8006508 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80064fa:	7afb      	ldrb	r3, [r7, #11]
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d103      	bne.n	8006508 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006508:	bf00      	nop
  }
}
 800650a:	bf00      	nop
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b086      	sub	sp, #24
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006524:	2300      	movs	r3, #0
 8006526:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800652e:	2b03      	cmp	r3, #3
 8006530:	d002      	beq.n	8006538 <CDC_ProcessReception+0x26>
 8006532:	2b04      	cmp	r3, #4
 8006534:	d00e      	beq.n	8006554 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006536:	e043      	b.n	80065c0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	6a19      	ldr	r1, [r3, #32]
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	8b5a      	ldrh	r2, [r3, #26]
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	7b1b      	ldrb	r3, [r3, #12]
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f001 fbff 	bl	8007d48 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2204      	movs	r2, #4
 800654e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006552:	e035      	b.n	80065c0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	7b1b      	ldrb	r3, [r3, #12]
 8006558:	4619      	mov	r1, r3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f001 fefe 	bl	800835c <USBH_LL_GetURBState>
 8006560:	4603      	mov	r3, r0
 8006562:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006564:	7cfb      	ldrb	r3, [r7, #19]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d129      	bne.n	80065be <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	7b1b      	ldrb	r3, [r3, #12]
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f001 fe61 	bl	8008238 <USBH_LL_GetLastXferSize>
 8006576:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	429a      	cmp	r2, r3
 8006580:	d016      	beq.n	80065b0 <CDC_ProcessReception+0x9e>
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	8b5b      	ldrh	r3, [r3, #26]
 8006586:	461a      	mov	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4293      	cmp	r3, r2
 800658c:	d910      	bls.n	80065b0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	1ad2      	subs	r2, r2, r3
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	6a1a      	ldr	r2, [r3, #32]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	441a      	add	r2, r3
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	2203      	movs	r2, #3
 80065aa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80065ae:	e006      	b.n	80065be <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f80f 	bl	80065dc <USBH_CDC_ReceiveCallback>
      break;
 80065be:	bf00      	nop
  }
}
 80065c0:	bf00      	nop
 80065c2:	3718      	adds	r7, #24
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	4613      	mov	r3, r2
 8006610:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d101      	bne.n	800661c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006618:	2302      	movs	r3, #2
 800661a:	e029      	b.n	8006670 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	79fa      	ldrb	r2, [r7, #7]
 8006620:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f000 f81f 	bl	8006678 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d003      	beq.n	8006668 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f001 fd31 	bl	80080d0 <USBH_LL_Init>

  return USBH_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006680:	2300      	movs	r3, #0
 8006682:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006684:	2300      	movs	r3, #0
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	e009      	b.n	800669e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	33e0      	adds	r3, #224	; 0xe0
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	2200      	movs	r2, #0
 8006696:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3301      	adds	r3, #1
 800669c:	60fb      	str	r3, [r7, #12]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2b0f      	cmp	r3, #15
 80066a2:	d9f2      	bls.n	800668a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80066a4:	2300      	movs	r3, #0
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	e009      	b.n	80066be <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80066b4:	2200      	movs	r2, #0
 80066b6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	3301      	adds	r3, #1
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066c4:	d3f1      	bcc.n	80066aa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2240      	movs	r2, #64	; 0x40
 80066ea:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800672a:	2300      	movs	r3, #0
 800672c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d016      	beq.n	8006762 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10e      	bne.n	800675c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006744:	1c59      	adds	r1, r3, #1
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	33de      	adds	r3, #222	; 0xde
 8006750:	6839      	ldr	r1, [r7, #0]
 8006752:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	73fb      	strb	r3, [r7, #15]
 800675a:	e004      	b.n	8006766 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800675c:	2302      	movs	r3, #2
 800675e:	73fb      	strb	r3, [r7, #15]
 8006760:	e001      	b.n	8006766 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006762:	2302      	movs	r3, #2
 8006764:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006766:	7bfb      	ldrb	r3, [r7, #15]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	460b      	mov	r3, r1
 800677e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006780:	2300      	movs	r3, #0
 8006782:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800678a:	78fa      	ldrb	r2, [r7, #3]
 800678c:	429a      	cmp	r2, r3
 800678e:	d204      	bcs.n	800679a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	78fa      	ldrb	r2, [r7, #3]
 8006794:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006798:	e001      	b.n	800679e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800679a:	2302      	movs	r3, #2
 800679c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800679e:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3714      	adds	r7, #20
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	4608      	mov	r0, r1
 80067b6:	4611      	mov	r1, r2
 80067b8:	461a      	mov	r2, r3
 80067ba:	4603      	mov	r3, r0
 80067bc:	70fb      	strb	r3, [r7, #3]
 80067be:	460b      	mov	r3, r1
 80067c0:	70bb      	strb	r3, [r7, #2]
 80067c2:	4613      	mov	r3, r2
 80067c4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80067ca:	2300      	movs	r3, #0
 80067cc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80067d4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80067d6:	e025      	b.n	8006824 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80067d8:	7dfb      	ldrb	r3, [r7, #23]
 80067da:	221a      	movs	r2, #26
 80067dc:	fb02 f303 	mul.w	r3, r2, r3
 80067e0:	3308      	adds	r3, #8
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	4413      	add	r3, r2
 80067e6:	3302      	adds	r3, #2
 80067e8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	795b      	ldrb	r3, [r3, #5]
 80067ee:	78fa      	ldrb	r2, [r7, #3]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d002      	beq.n	80067fa <USBH_FindInterface+0x4e>
 80067f4:	78fb      	ldrb	r3, [r7, #3]
 80067f6:	2bff      	cmp	r3, #255	; 0xff
 80067f8:	d111      	bne.n	800681e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80067fe:	78ba      	ldrb	r2, [r7, #2]
 8006800:	429a      	cmp	r2, r3
 8006802:	d002      	beq.n	800680a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006804:	78bb      	ldrb	r3, [r7, #2]
 8006806:	2bff      	cmp	r3, #255	; 0xff
 8006808:	d109      	bne.n	800681e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800680e:	787a      	ldrb	r2, [r7, #1]
 8006810:	429a      	cmp	r2, r3
 8006812:	d002      	beq.n	800681a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006814:	787b      	ldrb	r3, [r7, #1]
 8006816:	2bff      	cmp	r3, #255	; 0xff
 8006818:	d101      	bne.n	800681e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800681a:	7dfb      	ldrb	r3, [r7, #23]
 800681c:	e006      	b.n	800682c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800681e:	7dfb      	ldrb	r3, [r7, #23]
 8006820:	3301      	adds	r3, #1
 8006822:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006824:	7dfb      	ldrb	r3, [r7, #23]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d9d6      	bls.n	80067d8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800682a:	23ff      	movs	r3, #255	; 0xff
}
 800682c:	4618      	mov	r0, r3
 800682e:	371c      	adds	r7, #28
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f001 fc81 	bl	8008148 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006846:	2101      	movs	r1, #1
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f001 fd9a 	bl	8008382 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3708      	adds	r7, #8
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b088      	sub	sp, #32
 800685c:	af04      	add	r7, sp, #16
 800685e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006860:	2302      	movs	r3, #2
 8006862:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006864:	2300      	movs	r3, #0
 8006866:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b01      	cmp	r3, #1
 8006872:	d102      	bne.n	800687a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2203      	movs	r2, #3
 8006878:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b0b      	cmp	r3, #11
 8006882:	f200 81be 	bhi.w	8006c02 <USBH_Process+0x3aa>
 8006886:	a201      	add	r2, pc, #4	; (adr r2, 800688c <USBH_Process+0x34>)
 8006888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688c:	080068bd 	.word	0x080068bd
 8006890:	080068ef 	.word	0x080068ef
 8006894:	08006957 	.word	0x08006957
 8006898:	08006b9d 	.word	0x08006b9d
 800689c:	08006c03 	.word	0x08006c03
 80068a0:	080069fb 	.word	0x080069fb
 80068a4:	08006b43 	.word	0x08006b43
 80068a8:	08006a31 	.word	0x08006a31
 80068ac:	08006a51 	.word	0x08006a51
 80068b0:	08006a71 	.word	0x08006a71
 80068b4:	08006ab5 	.word	0x08006ab5
 80068b8:	08006b85 	.word	0x08006b85
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 819e 	beq.w	8006c06 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80068d0:	20c8      	movs	r0, #200	; 0xc8
 80068d2:	f001 fd9d 	bl	8008410 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f001 fc93 	bl	8008202 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80068ec:	e18b      	b.n	8006c06 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d107      	bne.n	8006908 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2202      	movs	r2, #2
 8006904:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006906:	e18d      	b.n	8006c24 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800690e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006912:	d914      	bls.n	800693e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800691a:	3301      	adds	r3, #1
 800691c:	b2da      	uxtb	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800692a:	2b03      	cmp	r3, #3
 800692c:	d903      	bls.n	8006936 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	220d      	movs	r2, #13
 8006932:	701a      	strb	r2, [r3, #0]
      break;
 8006934:	e176      	b.n	8006c24 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	701a      	strb	r2, [r3, #0]
      break;
 800693c:	e172      	b.n	8006c24 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006944:	f103 020a 	add.w	r2, r3, #10
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800694e:	200a      	movs	r0, #10
 8006950:	f001 fd5e 	bl	8008410 <USBH_Delay>
      break;
 8006954:	e166      	b.n	8006c24 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800695c:	2b00      	cmp	r3, #0
 800695e:	d005      	beq.n	800696c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006966:	2104      	movs	r1, #4
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800696c:	2064      	movs	r0, #100	; 0x64
 800696e:	f001 fd4f 	bl	8008410 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f001 fc1e 	bl	80081b4 <USBH_LL_GetSpeed>
 8006978:	4603      	mov	r3, r0
 800697a:	461a      	mov	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2205      	movs	r2, #5
 8006986:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006988:	2100      	movs	r1, #0
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f001 fa29 	bl	8007de2 <USBH_AllocPipe>
 8006990:	4603      	mov	r3, r0
 8006992:	461a      	mov	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006998:	2180      	movs	r1, #128	; 0x80
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f001 fa21 	bl	8007de2 <USBH_AllocPipe>
 80069a0:	4603      	mov	r3, r0
 80069a2:	461a      	mov	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	7919      	ldrb	r1, [r3, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80069bc:	b292      	uxth	r2, r2
 80069be:	9202      	str	r2, [sp, #8]
 80069c0:	2200      	movs	r2, #0
 80069c2:	9201      	str	r2, [sp, #4]
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	4603      	mov	r3, r0
 80069c8:	2280      	movs	r2, #128	; 0x80
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f001 f9da 	bl	8007d84 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	7959      	ldrb	r1, [r3, #5]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80069e4:	b292      	uxth	r2, r2
 80069e6:	9202      	str	r2, [sp, #8]
 80069e8:	2200      	movs	r2, #0
 80069ea:	9201      	str	r2, [sp, #4]
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	4603      	mov	r3, r0
 80069f0:	2200      	movs	r2, #0
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f001 f9c6 	bl	8007d84 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80069f8:	e114      	b.n	8006c24 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f918 	bl	8006c30 <USBH_HandleEnum>
 8006a00:	4603      	mov	r3, r0
 8006a02:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006a04:	7bbb      	ldrb	r3, [r7, #14]
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f040 80fe 	bne.w	8006c0a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d103      	bne.n	8006a28 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2208      	movs	r2, #8
 8006a24:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006a26:	e0f0      	b.n	8006c0a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2207      	movs	r2, #7
 8006a2c:	701a      	strb	r2, [r3, #0]
      break;
 8006a2e:	e0ec      	b.n	8006c0a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 80e9 	beq.w	8006c0e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a42:	2101      	movs	r1, #1
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2208      	movs	r2, #8
 8006a4c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006a4e:	e0de      	b.n	8006c0e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fc2c 	bl	80072b8 <USBH_SetCfg>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f040 80d5 	bne.w	8006c12 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2209      	movs	r2, #9
 8006a6c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a6e:	e0d0      	b.n	8006c12 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006a76:	f003 0320 	and.w	r3, r3, #32
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d016      	beq.n	8006aac <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006a7e:	2101      	movs	r1, #1
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fc3c 	bl	80072fe <USBH_SetFeature>
 8006a86:	4603      	mov	r3, r0
 8006a88:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006a8a:	7bbb      	ldrb	r3, [r7, #14]
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d103      	bne.n	8006a9a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	220a      	movs	r2, #10
 8006a96:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a98:	e0bd      	b.n	8006c16 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006a9a:	7bbb      	ldrb	r3, [r7, #14]
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	f040 80b9 	bne.w	8006c16 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	220a      	movs	r2, #10
 8006aa8:	701a      	strb	r2, [r3, #0]
      break;
 8006aaa:	e0b4      	b.n	8006c16 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	220a      	movs	r2, #10
 8006ab0:	701a      	strb	r2, [r3, #0]
      break;
 8006ab2:	e0b0      	b.n	8006c16 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 80ad 	beq.w	8006c1a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006ac8:	2300      	movs	r3, #0
 8006aca:	73fb      	strb	r3, [r7, #15]
 8006acc:	e016      	b.n	8006afc <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006ace:	7bfa      	ldrb	r2, [r7, #15]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	32de      	adds	r2, #222	; 0xde
 8006ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad8:	791a      	ldrb	r2, [r3, #4]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d108      	bne.n	8006af6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006ae4:	7bfa      	ldrb	r2, [r7, #15]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	32de      	adds	r2, #222	; 0xde
 8006aea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006af4:	e005      	b.n	8006b02 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006af6:	7bfb      	ldrb	r3, [r7, #15]
 8006af8:	3301      	adds	r3, #1
 8006afa:	73fb      	strb	r3, [r7, #15]
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0e5      	beq.n	8006ace <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d016      	beq.n	8006b3a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	4798      	blx	r3
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d109      	bne.n	8006b32 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2206      	movs	r2, #6
 8006b22:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b2a:	2103      	movs	r1, #3
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b30:	e073      	b.n	8006c1a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	220d      	movs	r2, #13
 8006b36:	701a      	strb	r2, [r3, #0]
      break;
 8006b38:	e06f      	b.n	8006c1a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	220d      	movs	r2, #13
 8006b3e:	701a      	strb	r2, [r3, #0]
      break;
 8006b40:	e06b      	b.n	8006c1a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d017      	beq.n	8006b7c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	4798      	blx	r3
 8006b58:	4603      	mov	r3, r0
 8006b5a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006b5c:	7bbb      	ldrb	r3, [r7, #14]
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d103      	bne.n	8006b6c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	220b      	movs	r2, #11
 8006b68:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b6a:	e058      	b.n	8006c1e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006b6c:	7bbb      	ldrb	r3, [r7, #14]
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d154      	bne.n	8006c1e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	220d      	movs	r2, #13
 8006b78:	701a      	strb	r2, [r3, #0]
      break;
 8006b7a:	e050      	b.n	8006c1e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	220d      	movs	r2, #13
 8006b80:	701a      	strb	r2, [r3, #0]
      break;
 8006b82:	e04c      	b.n	8006c1e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d049      	beq.n	8006c22 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	4798      	blx	r3
      }
      break;
 8006b9a:	e042      	b.n	8006c22 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f7ff fd67 	bl	8006678 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d009      	beq.n	8006bc8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d005      	beq.n	8006bde <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bd8:	2105      	movs	r1, #5
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d107      	bne.n	8006bfa <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7ff fe20 	bl	8006838 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006bf8:	e014      	b.n	8006c24 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f001 faa4 	bl	8008148 <USBH_LL_Start>
      break;
 8006c00:	e010      	b.n	8006c24 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006c02:	bf00      	nop
 8006c04:	e00e      	b.n	8006c24 <USBH_Process+0x3cc>
      break;
 8006c06:	bf00      	nop
 8006c08:	e00c      	b.n	8006c24 <USBH_Process+0x3cc>
      break;
 8006c0a:	bf00      	nop
 8006c0c:	e00a      	b.n	8006c24 <USBH_Process+0x3cc>
    break;
 8006c0e:	bf00      	nop
 8006c10:	e008      	b.n	8006c24 <USBH_Process+0x3cc>
      break;
 8006c12:	bf00      	nop
 8006c14:	e006      	b.n	8006c24 <USBH_Process+0x3cc>
      break;
 8006c16:	bf00      	nop
 8006c18:	e004      	b.n	8006c24 <USBH_Process+0x3cc>
      break;
 8006c1a:	bf00      	nop
 8006c1c:	e002      	b.n	8006c24 <USBH_Process+0x3cc>
      break;
 8006c1e:	bf00      	nop
 8006c20:	e000      	b.n	8006c24 <USBH_Process+0x3cc>
      break;
 8006c22:	bf00      	nop
  }
  return USBH_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop

08006c30 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b088      	sub	sp, #32
 8006c34:	af04      	add	r7, sp, #16
 8006c36:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	785b      	ldrb	r3, [r3, #1]
 8006c44:	2b07      	cmp	r3, #7
 8006c46:	f200 81c1 	bhi.w	8006fcc <USBH_HandleEnum+0x39c>
 8006c4a:	a201      	add	r2, pc, #4	; (adr r2, 8006c50 <USBH_HandleEnum+0x20>)
 8006c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c50:	08006c71 	.word	0x08006c71
 8006c54:	08006d2f 	.word	0x08006d2f
 8006c58:	08006d99 	.word	0x08006d99
 8006c5c:	08006e27 	.word	0x08006e27
 8006c60:	08006e91 	.word	0x08006e91
 8006c64:	08006f01 	.word	0x08006f01
 8006c68:	08006f47 	.word	0x08006f47
 8006c6c:	08006f8d 	.word	0x08006f8d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006c70:	2108      	movs	r1, #8
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fa50 	bl	8007118 <USBH_Get_DevDesc>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c7c:	7bbb      	ldrb	r3, [r7, #14]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d130      	bne.n	8006ce4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	7919      	ldrb	r1, [r3, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006ca6:	b292      	uxth	r2, r2
 8006ca8:	9202      	str	r2, [sp, #8]
 8006caa:	2200      	movs	r2, #0
 8006cac:	9201      	str	r2, [sp, #4]
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2280      	movs	r2, #128	; 0x80
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f001 f865 	bl	8007d84 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	7959      	ldrb	r1, [r3, #5]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006cce:	b292      	uxth	r2, r2
 8006cd0:	9202      	str	r2, [sp, #8]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	9201      	str	r2, [sp, #4]
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2200      	movs	r2, #0
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f001 f851 	bl	8007d84 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006ce2:	e175      	b.n	8006fd0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	f040 8172 	bne.w	8006fd0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d02:	2b03      	cmp	r3, #3
 8006d04:	d903      	bls.n	8006d0e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	220d      	movs	r2, #13
 8006d0a:	701a      	strb	r2, [r3, #0]
      break;
 8006d0c:	e160      	b.n	8006fd0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	795b      	ldrb	r3, [r3, #5]
 8006d12:	4619      	mov	r1, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f001 f885 	bl	8007e24 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	791b      	ldrb	r3, [r3, #4]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f001 f87f 	bl	8007e24 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	701a      	strb	r2, [r3, #0]
      break;
 8006d2c:	e150      	b.n	8006fd0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006d2e:	2112      	movs	r1, #18
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f9f1 	bl	8007118 <USBH_Get_DevDesc>
 8006d36:	4603      	mov	r3, r0
 8006d38:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d3a:	7bbb      	ldrb	r3, [r7, #14]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d103      	bne.n	8006d48 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2202      	movs	r2, #2
 8006d44:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d46:	e145      	b.n	8006fd4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d48:	7bbb      	ldrb	r3, [r7, #14]
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	f040 8142 	bne.w	8006fd4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d56:	3301      	adds	r3, #1
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	d903      	bls.n	8006d72 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	220d      	movs	r2, #13
 8006d6e:	701a      	strb	r2, [r3, #0]
      break;
 8006d70:	e130      	b.n	8006fd4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	795b      	ldrb	r3, [r3, #5]
 8006d76:	4619      	mov	r1, r3
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f001 f853 	bl	8007e24 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	791b      	ldrb	r3, [r3, #4]
 8006d82:	4619      	mov	r1, r3
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f001 f84d 	bl	8007e24 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	701a      	strb	r2, [r3, #0]
      break;
 8006d96:	e11d      	b.n	8006fd4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006d98:	2101      	movs	r1, #1
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fa68 	bl	8007270 <USBH_SetAddress>
 8006da0:	4603      	mov	r3, r0
 8006da2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006da4:	7bbb      	ldrb	r3, [r7, #14]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d132      	bne.n	8006e10 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006daa:	2002      	movs	r0, #2
 8006dac:	f001 fb30 	bl	8008410 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2203      	movs	r2, #3
 8006dbc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	7919      	ldrb	r1, [r3, #4]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006dd2:	b292      	uxth	r2, r2
 8006dd4:	9202      	str	r2, [sp, #8]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	9201      	str	r2, [sp, #4]
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2280      	movs	r2, #128	; 0x80
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 ffcf 	bl	8007d84 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	7959      	ldrb	r1, [r3, #5]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006dfa:	b292      	uxth	r2, r2
 8006dfc:	9202      	str	r2, [sp, #8]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	9201      	str	r2, [sp, #4]
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	4603      	mov	r3, r0
 8006e06:	2200      	movs	r2, #0
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 ffbb 	bl	8007d84 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006e0e:	e0e3      	b.n	8006fd8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e10:	7bbb      	ldrb	r3, [r7, #14]
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	f040 80e0 	bne.w	8006fd8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	220d      	movs	r2, #13
 8006e1c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	705a      	strb	r2, [r3, #1]
      break;
 8006e24:	e0d8      	b.n	8006fd8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006e26:	2109      	movs	r1, #9
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f99d 	bl	8007168 <USBH_Get_CfgDesc>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e32:	7bbb      	ldrb	r3, [r7, #14]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d103      	bne.n	8006e40 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2204      	movs	r2, #4
 8006e3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e3e:	e0cd      	b.n	8006fdc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e40:	7bbb      	ldrb	r3, [r7, #14]
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	f040 80ca 	bne.w	8006fdc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e4e:	3301      	adds	r3, #1
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d903      	bls.n	8006e6a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	220d      	movs	r2, #13
 8006e66:	701a      	strb	r2, [r3, #0]
      break;
 8006e68:	e0b8      	b.n	8006fdc <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	795b      	ldrb	r3, [r3, #5]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 ffd7 	bl	8007e24 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	791b      	ldrb	r3, [r3, #4]
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 ffd1 	bl	8007e24 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	701a      	strb	r2, [r3, #0]
      break;
 8006e8e:	e0a5      	b.n	8006fdc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006e96:	4619      	mov	r1, r3
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f965 	bl	8007168 <USBH_Get_CfgDesc>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ea2:	7bbb      	ldrb	r3, [r7, #14]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d103      	bne.n	8006eb0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2205      	movs	r2, #5
 8006eac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006eae:	e097      	b.n	8006fe0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006eb0:	7bbb      	ldrb	r3, [r7, #14]
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	f040 8094 	bne.w	8006fe0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ece:	2b03      	cmp	r3, #3
 8006ed0:	d903      	bls.n	8006eda <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	220d      	movs	r2, #13
 8006ed6:	701a      	strb	r2, [r3, #0]
      break;
 8006ed8:	e082      	b.n	8006fe0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	795b      	ldrb	r3, [r3, #5]
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 ff9f 	bl	8007e24 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	791b      	ldrb	r3, [r3, #4]
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 ff99 	bl	8007e24 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	701a      	strb	r2, [r3, #0]
      break;
 8006efe:	e06f      	b.n	8006fe0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d019      	beq.n	8006f3e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006f16:	23ff      	movs	r3, #255	; 0xff
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f949 	bl	80071b0 <USBH_Get_StringDesc>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d103      	bne.n	8006f30 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2206      	movs	r2, #6
 8006f2c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006f2e:	e059      	b.n	8006fe4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	d156      	bne.n	8006fe4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2206      	movs	r2, #6
 8006f3a:	705a      	strb	r2, [r3, #1]
      break;
 8006f3c:	e052      	b.n	8006fe4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2206      	movs	r2, #6
 8006f42:	705a      	strb	r2, [r3, #1]
      break;
 8006f44:	e04e      	b.n	8006fe4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d019      	beq.n	8006f84 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006f5c:	23ff      	movs	r3, #255	; 0xff
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f926 	bl	80071b0 <USBH_Get_StringDesc>
 8006f64:	4603      	mov	r3, r0
 8006f66:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f68:	7bbb      	ldrb	r3, [r7, #14]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d103      	bne.n	8006f76 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2207      	movs	r2, #7
 8006f72:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006f74:	e038      	b.n	8006fe8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f76:	7bbb      	ldrb	r3, [r7, #14]
 8006f78:	2b03      	cmp	r3, #3
 8006f7a:	d135      	bne.n	8006fe8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2207      	movs	r2, #7
 8006f80:	705a      	strb	r2, [r3, #1]
      break;
 8006f82:	e031      	b.n	8006fe8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2207      	movs	r2, #7
 8006f88:	705a      	strb	r2, [r3, #1]
      break;
 8006f8a:	e02d      	b.n	8006fe8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d017      	beq.n	8006fc6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006fa2:	23ff      	movs	r3, #255	; 0xff
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f903 	bl	80071b0 <USBH_Get_StringDesc>
 8006faa:	4603      	mov	r3, r0
 8006fac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006fae:	7bbb      	ldrb	r3, [r7, #14]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d102      	bne.n	8006fba <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006fb8:	e018      	b.n	8006fec <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fba:	7bbb      	ldrb	r3, [r7, #14]
 8006fbc:	2b03      	cmp	r3, #3
 8006fbe:	d115      	bne.n	8006fec <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc4:	e012      	b.n	8006fec <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	73fb      	strb	r3, [r7, #15]
      break;
 8006fca:	e00f      	b.n	8006fec <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006fcc:	bf00      	nop
 8006fce:	e00e      	b.n	8006fee <USBH_HandleEnum+0x3be>
      break;
 8006fd0:	bf00      	nop
 8006fd2:	e00c      	b.n	8006fee <USBH_HandleEnum+0x3be>
      break;
 8006fd4:	bf00      	nop
 8006fd6:	e00a      	b.n	8006fee <USBH_HandleEnum+0x3be>
      break;
 8006fd8:	bf00      	nop
 8006fda:	e008      	b.n	8006fee <USBH_HandleEnum+0x3be>
      break;
 8006fdc:	bf00      	nop
 8006fde:	e006      	b.n	8006fee <USBH_HandleEnum+0x3be>
      break;
 8006fe0:	bf00      	nop
 8006fe2:	e004      	b.n	8006fee <USBH_HandleEnum+0x3be>
      break;
 8006fe4:	bf00      	nop
 8006fe6:	e002      	b.n	8006fee <USBH_HandleEnum+0x3be>
      break;
 8006fe8:	bf00      	nop
 8006fea:	e000      	b.n	8006fee <USBH_HandleEnum+0x3be>
      break;
 8006fec:	bf00      	nop
  }
  return Status;
 8006fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3710      	adds	r7, #16
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	683a      	ldr	r2, [r7, #0]
 8007006:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800700a:	bf00      	nop
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b082      	sub	sp, #8
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007024:	1c5a      	adds	r2, r3, #1
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f804 	bl	800703a <USBH_HandleSof>
}
 8007032:	bf00      	nop
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b082      	sub	sp, #8
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2b0b      	cmp	r3, #11
 800704a:	d10a      	bne.n	8007062 <USBH_HandleSof+0x28>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007052:	2b00      	cmp	r3, #0
 8007054:	d005      	beq.n	8007062 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	4798      	blx	r3
  }
}
 8007062:	bf00      	nop
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800707a:	bf00      	nop
}
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007086:	b480      	push	{r7}
 8007088:	b083      	sub	sp, #12
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007096:	bf00      	nop
}
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b083      	sub	sp, #12
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f001 f844 	bl	800817e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	791b      	ldrb	r3, [r3, #4]
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fe91 	bl	8007e24 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	795b      	ldrb	r3, [r3, #5]
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fe8b 	bl	8007e24 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af02      	add	r7, sp, #8
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	460b      	mov	r3, r1
 8007122:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800712a:	78fb      	ldrb	r3, [r7, #3]
 800712c:	b29b      	uxth	r3, r3
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	4613      	mov	r3, r2
 8007132:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007136:	2100      	movs	r1, #0
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f864 	bl	8007206 <USBH_GetDescriptor>
 800713e:	4603      	mov	r3, r0
 8007140:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007142:	7bfb      	ldrb	r3, [r7, #15]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10a      	bne.n	800715e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007154:	78fa      	ldrb	r2, [r7, #3]
 8007156:	b292      	uxth	r2, r2
 8007158:	4619      	mov	r1, r3
 800715a:	f000 f918 	bl	800738e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800715e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007160:	4618      	mov	r0, r3
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af02      	add	r7, sp, #8
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	460b      	mov	r3, r1
 8007172:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	331c      	adds	r3, #28
 8007178:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800717a:	887b      	ldrh	r3, [r7, #2]
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007184:	2100      	movs	r1, #0
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f83d 	bl	8007206 <USBH_GetDescriptor>
 800718c:	4603      	mov	r3, r0
 800718e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007190:	7bfb      	ldrb	r3, [r7, #15]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d107      	bne.n	80071a6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007196:	887b      	ldrh	r3, [r7, #2]
 8007198:	461a      	mov	r2, r3
 800719a:	68b9      	ldr	r1, [r7, #8]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f987 	bl	80074b0 <USBH_ParseCfgDesc>
 80071a2:	4603      	mov	r3, r0
 80071a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b088      	sub	sp, #32
 80071b4:	af02      	add	r7, sp, #8
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	607a      	str	r2, [r7, #4]
 80071ba:	461a      	mov	r2, r3
 80071bc:	460b      	mov	r3, r1
 80071be:	72fb      	strb	r3, [r7, #11]
 80071c0:	4613      	mov	r3, r2
 80071c2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80071c4:	7afb      	ldrb	r3, [r7, #11]
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80071cc:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80071d4:	893b      	ldrh	r3, [r7, #8]
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	460b      	mov	r3, r1
 80071da:	2100      	movs	r1, #0
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f000 f812 	bl	8007206 <USBH_GetDescriptor>
 80071e2:	4603      	mov	r3, r0
 80071e4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80071e6:	7dfb      	ldrb	r3, [r7, #23]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d107      	bne.n	80071fc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80071f2:	893a      	ldrh	r2, [r7, #8]
 80071f4:	6879      	ldr	r1, [r7, #4]
 80071f6:	4618      	mov	r0, r3
 80071f8:	f000 fb24 	bl	8007844 <USBH_ParseStringDesc>
  }

  return status;
 80071fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3718      	adds	r7, #24
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b084      	sub	sp, #16
 800720a:	af00      	add	r7, sp, #0
 800720c:	60f8      	str	r0, [r7, #12]
 800720e:	607b      	str	r3, [r7, #4]
 8007210:	460b      	mov	r3, r1
 8007212:	72fb      	strb	r3, [r7, #11]
 8007214:	4613      	mov	r3, r2
 8007216:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	789b      	ldrb	r3, [r3, #2]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d11c      	bne.n	800725a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007220:	7afb      	ldrb	r3, [r7, #11]
 8007222:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007226:	b2da      	uxtb	r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2206      	movs	r2, #6
 8007230:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	893a      	ldrh	r2, [r7, #8]
 8007236:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007238:	893b      	ldrh	r3, [r7, #8]
 800723a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800723e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007242:	d104      	bne.n	800724e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f240 4209 	movw	r2, #1033	; 0x409
 800724a:	829a      	strh	r2, [r3, #20]
 800724c:	e002      	b.n	8007254 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	8b3a      	ldrh	r2, [r7, #24]
 8007258:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800725a:	8b3b      	ldrh	r3, [r7, #24]
 800725c:	461a      	mov	r2, r3
 800725e:	6879      	ldr	r1, [r7, #4]
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f000 fb3d 	bl	80078e0 <USBH_CtlReq>
 8007266:	4603      	mov	r3, r0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	460b      	mov	r3, r1
 800727a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	789b      	ldrb	r3, [r3, #2]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d10f      	bne.n	80072a4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2205      	movs	r2, #5
 800728e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007290:	78fb      	ldrb	r3, [r7, #3]
 8007292:	b29a      	uxth	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80072a4:	2200      	movs	r2, #0
 80072a6:	2100      	movs	r1, #0
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fb19 	bl	80078e0 <USBH_CtlReq>
 80072ae:	4603      	mov	r3, r0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	460b      	mov	r3, r1
 80072c2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	789b      	ldrb	r3, [r3, #2]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d10e      	bne.n	80072ea <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2209      	movs	r2, #9
 80072d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	887a      	ldrh	r2, [r7, #2]
 80072dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80072ea:	2200      	movs	r2, #0
 80072ec:	2100      	movs	r1, #0
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 faf6 	bl	80078e0 <USBH_CtlReq>
 80072f4:	4603      	mov	r3, r0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b082      	sub	sp, #8
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	460b      	mov	r3, r1
 8007308:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	789b      	ldrb	r3, [r3, #2]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d10f      	bne.n	8007332 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2203      	movs	r2, #3
 800731c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800731e:	78fb      	ldrb	r3, [r7, #3]
 8007320:	b29a      	uxth	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007332:	2200      	movs	r2, #0
 8007334:	2100      	movs	r1, #0
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fad2 	bl	80078e0 <USBH_CtlReq>
 800733c:	4603      	mov	r3, r0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b082      	sub	sp, #8
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	460b      	mov	r3, r1
 8007350:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	789b      	ldrb	r3, [r3, #2]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d10f      	bne.n	800737a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2202      	movs	r2, #2
 800735e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800736c:	78fb      	ldrb	r3, [r7, #3]
 800736e:	b29a      	uxth	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800737a:	2200      	movs	r2, #0
 800737c:	2100      	movs	r1, #0
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 faae 	bl	80078e0 <USBH_CtlReq>
 8007384:	4603      	mov	r3, r0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3708      	adds	r7, #8
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800738e:	b480      	push	{r7}
 8007390:	b085      	sub	sp, #20
 8007392:	af00      	add	r7, sp, #0
 8007394:	60f8      	str	r0, [r7, #12]
 8007396:	60b9      	str	r1, [r7, #8]
 8007398:	4613      	mov	r3, r2
 800739a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	781a      	ldrb	r2, [r3, #0]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	785a      	ldrb	r2, [r3, #1]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	3302      	adds	r3, #2
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	3303      	adds	r3, #3
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	021b      	lsls	r3, r3, #8
 80073be:	b29b      	uxth	r3, r3
 80073c0:	4313      	orrs	r3, r2
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	791a      	ldrb	r2, [r3, #4]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	795a      	ldrb	r2, [r3, #5]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	799a      	ldrb	r2, [r3, #6]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	79da      	ldrb	r2, [r3, #7]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	79db      	ldrb	r3, [r3, #7]
 80073ec:	2b20      	cmp	r3, #32
 80073ee:	dc11      	bgt.n	8007414 <USBH_ParseDevDesc+0x86>
 80073f0:	2b08      	cmp	r3, #8
 80073f2:	db16      	blt.n	8007422 <USBH_ParseDevDesc+0x94>
 80073f4:	3b08      	subs	r3, #8
 80073f6:	2201      	movs	r2, #1
 80073f8:	fa02 f303 	lsl.w	r3, r2, r3
 80073fc:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007404:	2b00      	cmp	r3, #0
 8007406:	bf14      	ite	ne
 8007408:	2301      	movne	r3, #1
 800740a:	2300      	moveq	r3, #0
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d102      	bne.n	8007418 <USBH_ParseDevDesc+0x8a>
 8007412:	e006      	b.n	8007422 <USBH_ParseDevDesc+0x94>
 8007414:	2b40      	cmp	r3, #64	; 0x40
 8007416:	d104      	bne.n	8007422 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	79da      	ldrb	r2, [r3, #7]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	71da      	strb	r2, [r3, #7]
      break;
 8007420:	e003      	b.n	800742a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2240      	movs	r2, #64	; 0x40
 8007426:	71da      	strb	r2, [r3, #7]
      break;
 8007428:	bf00      	nop
  }

  if (length > 8U)
 800742a:	88fb      	ldrh	r3, [r7, #6]
 800742c:	2b08      	cmp	r3, #8
 800742e:	d939      	bls.n	80074a4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	3308      	adds	r3, #8
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	b29a      	uxth	r2, r3
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	3309      	adds	r3, #9
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	b29b      	uxth	r3, r3
 8007440:	021b      	lsls	r3, r3, #8
 8007442:	b29b      	uxth	r3, r3
 8007444:	4313      	orrs	r3, r2
 8007446:	b29a      	uxth	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	330a      	adds	r3, #10
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	b29a      	uxth	r2, r3
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	330b      	adds	r3, #11
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	b29b      	uxth	r3, r3
 800745c:	021b      	lsls	r3, r3, #8
 800745e:	b29b      	uxth	r3, r3
 8007460:	4313      	orrs	r3, r2
 8007462:	b29a      	uxth	r2, r3
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	330c      	adds	r3, #12
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	b29a      	uxth	r2, r3
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	330d      	adds	r3, #13
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	b29b      	uxth	r3, r3
 8007478:	021b      	lsls	r3, r3, #8
 800747a:	b29b      	uxth	r3, r3
 800747c:	4313      	orrs	r3, r2
 800747e:	b29a      	uxth	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	7b9a      	ldrb	r2, [r3, #14]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	7bda      	ldrb	r2, [r3, #15]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	7c1a      	ldrb	r2, [r3, #16]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	7c5a      	ldrb	r2, [r3, #17]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	745a      	strb	r2, [r3, #17]
  }
}
 80074a4:	bf00      	nop
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b08c      	sub	sp, #48	; 0x30
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	4613      	mov	r3, r2
 80074bc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80074c4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	781a      	ldrb	r2, [r3, #0]
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	785a      	ldrb	r2, [r3, #1]
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	3302      	adds	r3, #2
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	3303      	adds	r3, #3
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	b29b      	uxth	r3, r3
 8007500:	021b      	lsls	r3, r3, #8
 8007502:	b29b      	uxth	r3, r3
 8007504:	4313      	orrs	r3, r2
 8007506:	b29b      	uxth	r3, r3
 8007508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800750c:	bf28      	it	cs
 800750e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007512:	b29a      	uxth	r2, r3
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	791a      	ldrb	r2, [r3, #4]
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	795a      	ldrb	r2, [r3, #5]
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	799a      	ldrb	r2, [r3, #6]
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	79da      	ldrb	r2, [r3, #7]
 8007534:	6a3b      	ldr	r3, [r7, #32]
 8007536:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	7a1a      	ldrb	r2, [r3, #8]
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007540:	6a3b      	ldr	r3, [r7, #32]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	2b09      	cmp	r3, #9
 8007546:	d002      	beq.n	800754e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007548:	6a3b      	ldr	r3, [r7, #32]
 800754a:	2209      	movs	r2, #9
 800754c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800754e:	88fb      	ldrh	r3, [r7, #6]
 8007550:	2b09      	cmp	r3, #9
 8007552:	f240 809d 	bls.w	8007690 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007556:	2309      	movs	r3, #9
 8007558:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800755a:	2300      	movs	r3, #0
 800755c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800755e:	e081      	b.n	8007664 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007560:	f107 0316 	add.w	r3, r7, #22
 8007564:	4619      	mov	r1, r3
 8007566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007568:	f000 f99f 	bl	80078aa <USBH_GetNextDesc>
 800756c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007570:	785b      	ldrb	r3, [r3, #1]
 8007572:	2b04      	cmp	r3, #4
 8007574:	d176      	bne.n	8007664 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	2b09      	cmp	r3, #9
 800757c:	d002      	beq.n	8007584 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800757e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007580:	2209      	movs	r2, #9
 8007582:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007588:	221a      	movs	r2, #26
 800758a:	fb02 f303 	mul.w	r3, r2, r3
 800758e:	3308      	adds	r3, #8
 8007590:	6a3a      	ldr	r2, [r7, #32]
 8007592:	4413      	add	r3, r2
 8007594:	3302      	adds	r3, #2
 8007596:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007598:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800759a:	69f8      	ldr	r0, [r7, #28]
 800759c:	f000 f87e 	bl	800769c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80075a0:	2300      	movs	r3, #0
 80075a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80075aa:	e043      	b.n	8007634 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80075ac:	f107 0316 	add.w	r3, r7, #22
 80075b0:	4619      	mov	r1, r3
 80075b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075b4:	f000 f979 	bl	80078aa <USBH_GetNextDesc>
 80075b8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80075ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075bc:	785b      	ldrb	r3, [r3, #1]
 80075be:	2b05      	cmp	r3, #5
 80075c0:	d138      	bne.n	8007634 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	795b      	ldrb	r3, [r3, #5]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d10f      	bne.n	80075ea <USBH_ParseCfgDesc+0x13a>
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	799b      	ldrb	r3, [r3, #6]
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d10b      	bne.n	80075ea <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	79db      	ldrb	r3, [r3, #7]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10f      	bne.n	80075fa <USBH_ParseCfgDesc+0x14a>
 80075da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2b09      	cmp	r3, #9
 80075e0:	d00b      	beq.n	80075fa <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80075e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e4:	2209      	movs	r2, #9
 80075e6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80075e8:	e007      	b.n	80075fa <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80075ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	2b07      	cmp	r3, #7
 80075f0:	d004      	beq.n	80075fc <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80075f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f4:	2207      	movs	r2, #7
 80075f6:	701a      	strb	r2, [r3, #0]
 80075f8:	e000      	b.n	80075fc <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80075fa:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80075fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007600:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007604:	3201      	adds	r2, #1
 8007606:	00d2      	lsls	r2, r2, #3
 8007608:	211a      	movs	r1, #26
 800760a:	fb01 f303 	mul.w	r3, r1, r3
 800760e:	4413      	add	r3, r2
 8007610:	3308      	adds	r3, #8
 8007612:	6a3a      	ldr	r2, [r7, #32]
 8007614:	4413      	add	r3, r2
 8007616:	3304      	adds	r3, #4
 8007618:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800761a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800761c:	69b9      	ldr	r1, [r7, #24]
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f000 f86b 	bl	80076fa <USBH_ParseEPDesc>
 8007624:	4603      	mov	r3, r0
 8007626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800762a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800762e:	3301      	adds	r3, #1
 8007630:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	791b      	ldrb	r3, [r3, #4]
 8007638:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800763c:	429a      	cmp	r2, r3
 800763e:	d204      	bcs.n	800764a <USBH_ParseCfgDesc+0x19a>
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	885a      	ldrh	r2, [r3, #2]
 8007644:	8afb      	ldrh	r3, [r7, #22]
 8007646:	429a      	cmp	r2, r3
 8007648:	d8b0      	bhi.n	80075ac <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	791b      	ldrb	r3, [r3, #4]
 800764e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007652:	429a      	cmp	r2, r3
 8007654:	d201      	bcs.n	800765a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007656:	2303      	movs	r3, #3
 8007658:	e01c      	b.n	8007694 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800765a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800765e:	3301      	adds	r3, #1
 8007660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007668:	2b01      	cmp	r3, #1
 800766a:	d805      	bhi.n	8007678 <USBH_ParseCfgDesc+0x1c8>
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	885a      	ldrh	r2, [r3, #2]
 8007670:	8afb      	ldrh	r3, [r7, #22]
 8007672:	429a      	cmp	r2, r3
 8007674:	f63f af74 	bhi.w	8007560 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007678:	6a3b      	ldr	r3, [r7, #32]
 800767a:	791b      	ldrb	r3, [r3, #4]
 800767c:	2b02      	cmp	r3, #2
 800767e:	bf28      	it	cs
 8007680:	2302      	movcs	r3, #2
 8007682:	b2db      	uxtb	r3, r3
 8007684:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007688:	429a      	cmp	r2, r3
 800768a:	d201      	bcs.n	8007690 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800768c:	2303      	movs	r3, #3
 800768e:	e001      	b.n	8007694 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007690:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007694:	4618      	mov	r0, r3
 8007696:	3730      	adds	r7, #48	; 0x30
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	781a      	ldrb	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	785a      	ldrb	r2, [r3, #1]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	789a      	ldrb	r2, [r3, #2]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	78da      	ldrb	r2, [r3, #3]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	791a      	ldrb	r2, [r3, #4]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	795a      	ldrb	r2, [r3, #5]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	799a      	ldrb	r2, [r3, #6]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	79da      	ldrb	r2, [r3, #7]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	7a1a      	ldrb	r2, [r3, #8]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	721a      	strb	r2, [r3, #8]
}
 80076ee:	bf00      	nop
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b087      	sub	sp, #28
 80076fe:	af00      	add	r7, sp, #0
 8007700:	60f8      	str	r0, [r7, #12]
 8007702:	60b9      	str	r1, [r7, #8]
 8007704:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	781a      	ldrb	r2, [r3, #0]
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	785a      	ldrb	r2, [r3, #1]
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	789a      	ldrb	r2, [r3, #2]
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	78da      	ldrb	r2, [r3, #3]
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	3304      	adds	r3, #4
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	b29a      	uxth	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	3305      	adds	r3, #5
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	b29b      	uxth	r3, r3
 800773a:	021b      	lsls	r3, r3, #8
 800773c:	b29b      	uxth	r3, r3
 800773e:	4313      	orrs	r3, r2
 8007740:	b29a      	uxth	r2, r3
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	799a      	ldrb	r2, [r3, #6]
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	889b      	ldrh	r3, [r3, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d102      	bne.n	800775c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007756:	2303      	movs	r3, #3
 8007758:	75fb      	strb	r3, [r7, #23]
 800775a:	e033      	b.n	80077c4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	889b      	ldrh	r3, [r3, #4]
 8007760:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007764:	f023 0307 	bic.w	r3, r3, #7
 8007768:	b29a      	uxth	r2, r3
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	889b      	ldrh	r3, [r3, #4]
 8007772:	b21a      	sxth	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	3304      	adds	r3, #4
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	b299      	uxth	r1, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	3305      	adds	r3, #5
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	b29b      	uxth	r3, r3
 8007784:	021b      	lsls	r3, r3, #8
 8007786:	b29b      	uxth	r3, r3
 8007788:	430b      	orrs	r3, r1
 800778a:	b29b      	uxth	r3, r3
 800778c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007790:	2b00      	cmp	r3, #0
 8007792:	d110      	bne.n	80077b6 <USBH_ParseEPDesc+0xbc>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	3304      	adds	r3, #4
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	b299      	uxth	r1, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	3305      	adds	r3, #5
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	021b      	lsls	r3, r3, #8
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	430b      	orrs	r3, r1
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	b21b      	sxth	r3, r3
 80077ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077b2:	b21b      	sxth	r3, r3
 80077b4:	e001      	b.n	80077ba <USBH_ParseEPDesc+0xc0>
 80077b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077ba:	4313      	orrs	r3, r2
 80077bc:	b21b      	sxth	r3, r3
 80077be:	b29a      	uxth	r2, r3
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d116      	bne.n	80077fc <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	78db      	ldrb	r3, [r3, #3]
 80077d2:	f003 0303 	and.w	r3, r3, #3
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d005      	beq.n	80077e6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	78db      	ldrb	r3, [r3, #3]
 80077de:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d127      	bne.n	8007836 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	799b      	ldrb	r3, [r3, #6]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d003      	beq.n	80077f6 <USBH_ParseEPDesc+0xfc>
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	799b      	ldrb	r3, [r3, #6]
 80077f2:	2b10      	cmp	r3, #16
 80077f4:	d91f      	bls.n	8007836 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80077f6:	2303      	movs	r3, #3
 80077f8:	75fb      	strb	r3, [r7, #23]
 80077fa:	e01c      	b.n	8007836 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	78db      	ldrb	r3, [r3, #3]
 8007800:	f003 0303 	and.w	r3, r3, #3
 8007804:	2b01      	cmp	r3, #1
 8007806:	d10a      	bne.n	800781e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	799b      	ldrb	r3, [r3, #6]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d003      	beq.n	8007818 <USBH_ParseEPDesc+0x11e>
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	799b      	ldrb	r3, [r3, #6]
 8007814:	2b10      	cmp	r3, #16
 8007816:	d90e      	bls.n	8007836 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007818:	2303      	movs	r3, #3
 800781a:	75fb      	strb	r3, [r7, #23]
 800781c:	e00b      	b.n	8007836 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	78db      	ldrb	r3, [r3, #3]
 8007822:	f003 0303 	and.w	r3, r3, #3
 8007826:	2b03      	cmp	r3, #3
 8007828:	d105      	bne.n	8007836 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	799b      	ldrb	r3, [r3, #6]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d101      	bne.n	8007836 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007832:	2303      	movs	r3, #3
 8007834:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007836:	7dfb      	ldrb	r3, [r7, #23]
}
 8007838:	4618      	mov	r0, r3
 800783a:	371c      	adds	r7, #28
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007844:	b480      	push	{r7}
 8007846:	b087      	sub	sp, #28
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	4613      	mov	r3, r2
 8007850:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3301      	adds	r3, #1
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	2b03      	cmp	r3, #3
 800785a:	d120      	bne.n	800789e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	1e9a      	subs	r2, r3, #2
 8007862:	88fb      	ldrh	r3, [r7, #6]
 8007864:	4293      	cmp	r3, r2
 8007866:	bf28      	it	cs
 8007868:	4613      	movcs	r3, r2
 800786a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3302      	adds	r3, #2
 8007870:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007872:	2300      	movs	r3, #0
 8007874:	82fb      	strh	r3, [r7, #22]
 8007876:	e00b      	b.n	8007890 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007878:	8afb      	ldrh	r3, [r7, #22]
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	4413      	add	r3, r2
 800787e:	781a      	ldrb	r2, [r3, #0]
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	3301      	adds	r3, #1
 8007888:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800788a:	8afb      	ldrh	r3, [r7, #22]
 800788c:	3302      	adds	r3, #2
 800788e:	82fb      	strh	r3, [r7, #22]
 8007890:	8afa      	ldrh	r2, [r7, #22]
 8007892:	8abb      	ldrh	r3, [r7, #20]
 8007894:	429a      	cmp	r2, r3
 8007896:	d3ef      	bcc.n	8007878 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2200      	movs	r2, #0
 800789c:	701a      	strb	r2, [r3, #0]
  }
}
 800789e:	bf00      	nop
 80078a0:	371c      	adds	r7, #28
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b085      	sub	sp, #20
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	881a      	ldrh	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	b29b      	uxth	r3, r3
 80078be:	4413      	add	r3, r2
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4413      	add	r3, r2
 80078d0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80078d2:	68fb      	ldr	r3, [r7, #12]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	4613      	mov	r3, r2
 80078ec:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80078ee:	2301      	movs	r3, #1
 80078f0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	789b      	ldrb	r3, [r3, #2]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d002      	beq.n	8007900 <USBH_CtlReq+0x20>
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d00f      	beq.n	800791e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80078fe:	e027      	b.n	8007950 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	88fa      	ldrh	r2, [r7, #6]
 800790a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2201      	movs	r2, #1
 8007910:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2202      	movs	r2, #2
 8007916:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007918:	2301      	movs	r3, #1
 800791a:	75fb      	strb	r3, [r7, #23]
      break;
 800791c:	e018      	b.n	8007950 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f000 f81c 	bl	800795c <USBH_HandleControl>
 8007924:	4603      	mov	r3, r0
 8007926:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007928:	7dfb      	ldrb	r3, [r7, #23]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d002      	beq.n	8007934 <USBH_CtlReq+0x54>
 800792e:	7dfb      	ldrb	r3, [r7, #23]
 8007930:	2b03      	cmp	r3, #3
 8007932:	d106      	bne.n	8007942 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2201      	movs	r2, #1
 8007938:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	761a      	strb	r2, [r3, #24]
      break;
 8007940:	e005      	b.n	800794e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007942:	7dfb      	ldrb	r3, [r7, #23]
 8007944:	2b02      	cmp	r3, #2
 8007946:	d102      	bne.n	800794e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2201      	movs	r2, #1
 800794c:	709a      	strb	r2, [r3, #2]
      break;
 800794e:	bf00      	nop
  }
  return status;
 8007950:	7dfb      	ldrb	r3, [r7, #23]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3718      	adds	r7, #24
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
	...

0800795c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af02      	add	r7, sp, #8
 8007962:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007964:	2301      	movs	r3, #1
 8007966:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007968:	2300      	movs	r3, #0
 800796a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	7e1b      	ldrb	r3, [r3, #24]
 8007970:	3b01      	subs	r3, #1
 8007972:	2b0a      	cmp	r3, #10
 8007974:	f200 8156 	bhi.w	8007c24 <USBH_HandleControl+0x2c8>
 8007978:	a201      	add	r2, pc, #4	; (adr r2, 8007980 <USBH_HandleControl+0x24>)
 800797a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797e:	bf00      	nop
 8007980:	080079ad 	.word	0x080079ad
 8007984:	080079c7 	.word	0x080079c7
 8007988:	08007a31 	.word	0x08007a31
 800798c:	08007a57 	.word	0x08007a57
 8007990:	08007a8f 	.word	0x08007a8f
 8007994:	08007ab9 	.word	0x08007ab9
 8007998:	08007b0b 	.word	0x08007b0b
 800799c:	08007b2d 	.word	0x08007b2d
 80079a0:	08007b69 	.word	0x08007b69
 80079a4:	08007b8f 	.word	0x08007b8f
 80079a8:	08007bcd 	.word	0x08007bcd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f103 0110 	add.w	r1, r3, #16
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	795b      	ldrb	r3, [r3, #5]
 80079b6:	461a      	mov	r2, r3
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f943 	bl	8007c44 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2202      	movs	r2, #2
 80079c2:	761a      	strb	r2, [r3, #24]
      break;
 80079c4:	e139      	b.n	8007c3a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	795b      	ldrb	r3, [r3, #5]
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fcc5 	bl	800835c <USBH_LL_GetURBState>
 80079d2:	4603      	mov	r3, r0
 80079d4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d11e      	bne.n	8007a1a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	7c1b      	ldrb	r3, [r3, #16]
 80079e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079e4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	8adb      	ldrh	r3, [r3, #22]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80079ee:	7b7b      	ldrb	r3, [r7, #13]
 80079f0:	2b80      	cmp	r3, #128	; 0x80
 80079f2:	d103      	bne.n	80079fc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2203      	movs	r2, #3
 80079f8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80079fa:	e115      	b.n	8007c28 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2205      	movs	r2, #5
 8007a00:	761a      	strb	r2, [r3, #24]
      break;
 8007a02:	e111      	b.n	8007c28 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007a04:	7b7b      	ldrb	r3, [r7, #13]
 8007a06:	2b80      	cmp	r3, #128	; 0x80
 8007a08:	d103      	bne.n	8007a12 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2209      	movs	r2, #9
 8007a0e:	761a      	strb	r2, [r3, #24]
      break;
 8007a10:	e10a      	b.n	8007c28 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2207      	movs	r2, #7
 8007a16:	761a      	strb	r2, [r3, #24]
      break;
 8007a18:	e106      	b.n	8007c28 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
 8007a1c:	2b04      	cmp	r3, #4
 8007a1e:	d003      	beq.n	8007a28 <USBH_HandleControl+0xcc>
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	f040 8100 	bne.w	8007c28 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	220b      	movs	r2, #11
 8007a2c:	761a      	strb	r2, [r3, #24]
      break;
 8007a2e:	e0fb      	b.n	8007c28 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6899      	ldr	r1, [r3, #8]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	899a      	ldrh	r2, [r3, #12]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	791b      	ldrb	r3, [r3, #4]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f93a 	bl	8007cc2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2204      	movs	r2, #4
 8007a52:	761a      	strb	r2, [r3, #24]
      break;
 8007a54:	e0f1      	b.n	8007c3a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	791b      	ldrb	r3, [r3, #4]
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fc7d 	bl	800835c <USBH_LL_GetURBState>
 8007a62:	4603      	mov	r3, r0
 8007a64:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d102      	bne.n	8007a72 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2209      	movs	r2, #9
 8007a70:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007a72:	7bbb      	ldrb	r3, [r7, #14]
 8007a74:	2b05      	cmp	r3, #5
 8007a76:	d102      	bne.n	8007a7e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a7c:	e0d6      	b.n	8007c2c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	2b04      	cmp	r3, #4
 8007a82:	f040 80d3 	bne.w	8007c2c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	220b      	movs	r2, #11
 8007a8a:	761a      	strb	r2, [r3, #24]
      break;
 8007a8c:	e0ce      	b.n	8007c2c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6899      	ldr	r1, [r3, #8]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	899a      	ldrh	r2, [r3, #12]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	795b      	ldrb	r3, [r3, #5]
 8007a9a:	2001      	movs	r0, #1
 8007a9c:	9000      	str	r0, [sp, #0]
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f8ea 	bl	8007c78 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2206      	movs	r2, #6
 8007ab4:	761a      	strb	r2, [r3, #24]
      break;
 8007ab6:	e0c0      	b.n	8007c3a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	795b      	ldrb	r3, [r3, #5]
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fc4c 	bl	800835c <USBH_LL_GetURBState>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ac8:	7bbb      	ldrb	r3, [r7, #14]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d103      	bne.n	8007ad6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2207      	movs	r2, #7
 8007ad2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ad4:	e0ac      	b.n	8007c30 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007ad6:	7bbb      	ldrb	r3, [r7, #14]
 8007ad8:	2b05      	cmp	r3, #5
 8007ada:	d105      	bne.n	8007ae8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	220c      	movs	r2, #12
 8007ae0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ae6:	e0a3      	b.n	8007c30 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007ae8:	7bbb      	ldrb	r3, [r7, #14]
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d103      	bne.n	8007af6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2205      	movs	r2, #5
 8007af2:	761a      	strb	r2, [r3, #24]
      break;
 8007af4:	e09c      	b.n	8007c30 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007af6:	7bbb      	ldrb	r3, [r7, #14]
 8007af8:	2b04      	cmp	r3, #4
 8007afa:	f040 8099 	bne.w	8007c30 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	220b      	movs	r2, #11
 8007b02:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007b04:	2302      	movs	r3, #2
 8007b06:	73fb      	strb	r3, [r7, #15]
      break;
 8007b08:	e092      	b.n	8007c30 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	791b      	ldrb	r3, [r3, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	2100      	movs	r1, #0
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f8d5 	bl	8007cc2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2208      	movs	r2, #8
 8007b28:	761a      	strb	r2, [r3, #24]

      break;
 8007b2a:	e086      	b.n	8007c3a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	791b      	ldrb	r3, [r3, #4]
 8007b30:	4619      	mov	r1, r3
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fc12 	bl	800835c <USBH_LL_GetURBState>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007b3c:	7bbb      	ldrb	r3, [r7, #14]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d105      	bne.n	8007b4e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	220d      	movs	r2, #13
 8007b46:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007b4c:	e072      	b.n	8007c34 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007b4e:	7bbb      	ldrb	r3, [r7, #14]
 8007b50:	2b04      	cmp	r3, #4
 8007b52:	d103      	bne.n	8007b5c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	220b      	movs	r2, #11
 8007b58:	761a      	strb	r2, [r3, #24]
      break;
 8007b5a:	e06b      	b.n	8007c34 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007b5c:	7bbb      	ldrb	r3, [r7, #14]
 8007b5e:	2b05      	cmp	r3, #5
 8007b60:	d168      	bne.n	8007c34 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007b62:	2303      	movs	r3, #3
 8007b64:	73fb      	strb	r3, [r7, #15]
      break;
 8007b66:	e065      	b.n	8007c34 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	795b      	ldrb	r3, [r3, #5]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	9200      	str	r2, [sp, #0]
 8007b70:	2200      	movs	r2, #0
 8007b72:	2100      	movs	r1, #0
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f87f 	bl	8007c78 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	220a      	movs	r2, #10
 8007b8a:	761a      	strb	r2, [r3, #24]
      break;
 8007b8c:	e055      	b.n	8007c3a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	795b      	ldrb	r3, [r3, #5]
 8007b92:	4619      	mov	r1, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fbe1 	bl	800835c <USBH_LL_GetURBState>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007b9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d105      	bne.n	8007bb0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	220d      	movs	r2, #13
 8007bac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007bae:	e043      	b.n	8007c38 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007bb0:	7bbb      	ldrb	r3, [r7, #14]
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d103      	bne.n	8007bbe <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2209      	movs	r2, #9
 8007bba:	761a      	strb	r2, [r3, #24]
      break;
 8007bbc:	e03c      	b.n	8007c38 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007bbe:	7bbb      	ldrb	r3, [r7, #14]
 8007bc0:	2b04      	cmp	r3, #4
 8007bc2:	d139      	bne.n	8007c38 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	220b      	movs	r2, #11
 8007bc8:	761a      	strb	r2, [r3, #24]
      break;
 8007bca:	e035      	b.n	8007c38 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	7e5b      	ldrb	r3, [r3, #25]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	b2da      	uxtb	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	765a      	strb	r2, [r3, #25]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	7e5b      	ldrb	r3, [r3, #25]
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d806      	bhi.n	8007bee <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007bec:	e025      	b.n	8007c3a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007bf4:	2106      	movs	r1, #6
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	795b      	ldrb	r3, [r3, #5]
 8007c04:	4619      	mov	r1, r3
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f90c 	bl	8007e24 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	791b      	ldrb	r3, [r3, #4]
 8007c10:	4619      	mov	r1, r3
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f906 	bl	8007e24 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007c1e:	2302      	movs	r3, #2
 8007c20:	73fb      	strb	r3, [r7, #15]
      break;
 8007c22:	e00a      	b.n	8007c3a <USBH_HandleControl+0x2de>

    default:
      break;
 8007c24:	bf00      	nop
 8007c26:	e008      	b.n	8007c3a <USBH_HandleControl+0x2de>
      break;
 8007c28:	bf00      	nop
 8007c2a:	e006      	b.n	8007c3a <USBH_HandleControl+0x2de>
      break;
 8007c2c:	bf00      	nop
 8007c2e:	e004      	b.n	8007c3a <USBH_HandleControl+0x2de>
      break;
 8007c30:	bf00      	nop
 8007c32:	e002      	b.n	8007c3a <USBH_HandleControl+0x2de>
      break;
 8007c34:	bf00      	nop
 8007c36:	e000      	b.n	8007c3a <USBH_HandleControl+0x2de>
      break;
 8007c38:	bf00      	nop
  }

  return status;
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b088      	sub	sp, #32
 8007c48:	af04      	add	r7, sp, #16
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c52:	79f9      	ldrb	r1, [r7, #7]
 8007c54:	2300      	movs	r3, #0
 8007c56:	9303      	str	r3, [sp, #12]
 8007c58:	2308      	movs	r3, #8
 8007c5a:	9302      	str	r3, [sp, #8]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	9301      	str	r3, [sp, #4]
 8007c60:	2300      	movs	r3, #0
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	2300      	movs	r3, #0
 8007c66:	2200      	movs	r2, #0
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f000 fb46 	bl	80082fa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b088      	sub	sp, #32
 8007c7c:	af04      	add	r7, sp, #16
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	4611      	mov	r1, r2
 8007c84:	461a      	mov	r2, r3
 8007c86:	460b      	mov	r3, r1
 8007c88:	80fb      	strh	r3, [r7, #6]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c9c:	7979      	ldrb	r1, [r7, #5]
 8007c9e:	7e3b      	ldrb	r3, [r7, #24]
 8007ca0:	9303      	str	r3, [sp, #12]
 8007ca2:	88fb      	ldrh	r3, [r7, #6]
 8007ca4:	9302      	str	r3, [sp, #8]
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	9301      	str	r3, [sp, #4]
 8007caa:	2301      	movs	r3, #1
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	2300      	movs	r3, #0
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f000 fb21 	bl	80082fa <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b088      	sub	sp, #32
 8007cc6:	af04      	add	r7, sp, #16
 8007cc8:	60f8      	str	r0, [r7, #12]
 8007cca:	60b9      	str	r1, [r7, #8]
 8007ccc:	4611      	mov	r1, r2
 8007cce:	461a      	mov	r2, r3
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	80fb      	strh	r3, [r7, #6]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007cd8:	7979      	ldrb	r1, [r7, #5]
 8007cda:	2300      	movs	r3, #0
 8007cdc:	9303      	str	r3, [sp, #12]
 8007cde:	88fb      	ldrh	r3, [r7, #6]
 8007ce0:	9302      	str	r3, [sp, #8]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	9301      	str	r3, [sp, #4]
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	2300      	movs	r3, #0
 8007cec:	2201      	movs	r2, #1
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 fb03 	bl	80082fa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007cf4:	2300      	movs	r3, #0

}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b088      	sub	sp, #32
 8007d02:	af04      	add	r7, sp, #16
 8007d04:	60f8      	str	r0, [r7, #12]
 8007d06:	60b9      	str	r1, [r7, #8]
 8007d08:	4611      	mov	r1, r2
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	80fb      	strh	r3, [r7, #6]
 8007d10:	4613      	mov	r3, r2
 8007d12:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007d22:	7979      	ldrb	r1, [r7, #5]
 8007d24:	7e3b      	ldrb	r3, [r7, #24]
 8007d26:	9303      	str	r3, [sp, #12]
 8007d28:	88fb      	ldrh	r3, [r7, #6]
 8007d2a:	9302      	str	r3, [sp, #8]
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	9301      	str	r3, [sp, #4]
 8007d30:	2301      	movs	r3, #1
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	2302      	movs	r3, #2
 8007d36:	2200      	movs	r2, #0
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f000 fade 	bl	80082fa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b088      	sub	sp, #32
 8007d4c:	af04      	add	r7, sp, #16
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	4611      	mov	r1, r2
 8007d54:	461a      	mov	r2, r3
 8007d56:	460b      	mov	r3, r1
 8007d58:	80fb      	strh	r3, [r7, #6]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007d5e:	7979      	ldrb	r1, [r7, #5]
 8007d60:	2300      	movs	r3, #0
 8007d62:	9303      	str	r3, [sp, #12]
 8007d64:	88fb      	ldrh	r3, [r7, #6]
 8007d66:	9302      	str	r3, [sp, #8]
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	9301      	str	r3, [sp, #4]
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	9300      	str	r3, [sp, #0]
 8007d70:	2302      	movs	r3, #2
 8007d72:	2201      	movs	r2, #1
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f000 fac0 	bl	80082fa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b086      	sub	sp, #24
 8007d88:	af04      	add	r7, sp, #16
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	4608      	mov	r0, r1
 8007d8e:	4611      	mov	r1, r2
 8007d90:	461a      	mov	r2, r3
 8007d92:	4603      	mov	r3, r0
 8007d94:	70fb      	strb	r3, [r7, #3]
 8007d96:	460b      	mov	r3, r1
 8007d98:	70bb      	strb	r3, [r7, #2]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007d9e:	7878      	ldrb	r0, [r7, #1]
 8007da0:	78ba      	ldrb	r2, [r7, #2]
 8007da2:	78f9      	ldrb	r1, [r7, #3]
 8007da4:	8b3b      	ldrh	r3, [r7, #24]
 8007da6:	9302      	str	r3, [sp, #8]
 8007da8:	7d3b      	ldrb	r3, [r7, #20]
 8007daa:	9301      	str	r3, [sp, #4]
 8007dac:	7c3b      	ldrb	r3, [r7, #16]
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	4603      	mov	r3, r0
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fa53 	bl	800825e <USBH_LL_OpenPipe>

  return USBH_OK;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b082      	sub	sp, #8
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
 8007dca:	460b      	mov	r3, r1
 8007dcc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007dce:	78fb      	ldrb	r3, [r7, #3]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fa72 	bl	80082bc <USBH_LL_ClosePipe>

  return USBH_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b084      	sub	sp, #16
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
 8007dea:	460b      	mov	r3, r1
 8007dec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f836 	bl	8007e60 <USBH_GetFreePipe>
 8007df4:	4603      	mov	r3, r0
 8007df6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007df8:	89fb      	ldrh	r3, [r7, #14]
 8007dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d00a      	beq.n	8007e18 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007e02:	78fa      	ldrb	r2, [r7, #3]
 8007e04:	89fb      	ldrh	r3, [r7, #14]
 8007e06:	f003 030f 	and.w	r3, r3, #15
 8007e0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e0e:	6879      	ldr	r1, [r7, #4]
 8007e10:	33e0      	adds	r3, #224	; 0xe0
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	440b      	add	r3, r1
 8007e16:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007e18:	89fb      	ldrh	r3, [r7, #14]
 8007e1a:	b2db      	uxtb	r3, r3
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007e30:	78fb      	ldrb	r3, [r7, #3]
 8007e32:	2b0f      	cmp	r3, #15
 8007e34:	d80d      	bhi.n	8007e52 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007e36:	78fb      	ldrb	r3, [r7, #3]
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	33e0      	adds	r3, #224	; 0xe0
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4413      	add	r3, r2
 8007e40:	685a      	ldr	r2, [r3, #4]
 8007e42:	78fb      	ldrb	r3, [r7, #3]
 8007e44:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007e48:	6879      	ldr	r1, [r7, #4]
 8007e4a:	33e0      	adds	r3, #224	; 0xe0
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	440b      	add	r3, r1
 8007e50:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	73fb      	strb	r3, [r7, #15]
 8007e70:	e00f      	b.n	8007e92 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	33e0      	adds	r3, #224	; 0xe0
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4413      	add	r3, r2
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d102      	bne.n	8007e8c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007e86:	7bfb      	ldrb	r3, [r7, #15]
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	e007      	b.n	8007e9c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	73fb      	strb	r3, [r7, #15]
 8007e92:	7bfb      	ldrb	r3, [r7, #15]
 8007e94:	2b0f      	cmp	r3, #15
 8007e96:	d9ec      	bls.n	8007e72 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007e98:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007eac:	2201      	movs	r2, #1
 8007eae:	490e      	ldr	r1, [pc, #56]	; (8007ee8 <MX_USB_HOST_Init+0x40>)
 8007eb0:	480e      	ldr	r0, [pc, #56]	; (8007eec <MX_USB_HOST_Init+0x44>)
 8007eb2:	f7fe fba7 	bl	8006604 <USBH_Init>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d001      	beq.n	8007ec0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007ebc:	f7f8 fdb8 	bl	8000a30 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007ec0:	490b      	ldr	r1, [pc, #44]	; (8007ef0 <MX_USB_HOST_Init+0x48>)
 8007ec2:	480a      	ldr	r0, [pc, #40]	; (8007eec <MX_USB_HOST_Init+0x44>)
 8007ec4:	f7fe fc2c 	bl	8006720 <USBH_RegisterClass>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d001      	beq.n	8007ed2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007ece:	f7f8 fdaf 	bl	8000a30 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007ed2:	4806      	ldr	r0, [pc, #24]	; (8007eec <MX_USB_HOST_Init+0x44>)
 8007ed4:	f7fe fcb0 	bl	8006838 <USBH_Start>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007ede:	f7f8 fda7 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007ee2:	bf00      	nop
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	08007f09 	.word	0x08007f09
 8007eec:	200001f4 	.word	0x200001f4
 8007ef0:	2000000c 	.word	0x2000000c

08007ef4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007ef8:	4802      	ldr	r0, [pc, #8]	; (8007f04 <MX_USB_HOST_Process+0x10>)
 8007efa:	f7fe fcad 	bl	8006858 <USBH_Process>
}
 8007efe:	bf00      	nop
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	200001f4 	.word	0x200001f4

08007f08 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007f14:	78fb      	ldrb	r3, [r7, #3]
 8007f16:	3b01      	subs	r3, #1
 8007f18:	2b04      	cmp	r3, #4
 8007f1a:	d819      	bhi.n	8007f50 <USBH_UserProcess+0x48>
 8007f1c:	a201      	add	r2, pc, #4	; (adr r2, 8007f24 <USBH_UserProcess+0x1c>)
 8007f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f22:	bf00      	nop
 8007f24:	08007f51 	.word	0x08007f51
 8007f28:	08007f41 	.word	0x08007f41
 8007f2c:	08007f51 	.word	0x08007f51
 8007f30:	08007f49 	.word	0x08007f49
 8007f34:	08007f39 	.word	0x08007f39
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007f38:	4b09      	ldr	r3, [pc, #36]	; (8007f60 <USBH_UserProcess+0x58>)
 8007f3a:	2203      	movs	r2, #3
 8007f3c:	701a      	strb	r2, [r3, #0]
  break;
 8007f3e:	e008      	b.n	8007f52 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007f40:	4b07      	ldr	r3, [pc, #28]	; (8007f60 <USBH_UserProcess+0x58>)
 8007f42:	2202      	movs	r2, #2
 8007f44:	701a      	strb	r2, [r3, #0]
  break;
 8007f46:	e004      	b.n	8007f52 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007f48:	4b05      	ldr	r3, [pc, #20]	; (8007f60 <USBH_UserProcess+0x58>)
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	701a      	strb	r2, [r3, #0]
  break;
 8007f4e:	e000      	b.n	8007f52 <USBH_UserProcess+0x4a>

  default:
  break;
 8007f50:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007f52:	bf00      	nop
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	200005cc 	.word	0x200005cc

08007f64 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b08a      	sub	sp, #40	; 0x28
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f6c:	f107 0314 	add.w	r3, r7, #20
 8007f70:	2200      	movs	r2, #0
 8007f72:	601a      	str	r2, [r3, #0]
 8007f74:	605a      	str	r2, [r3, #4]
 8007f76:	609a      	str	r2, [r3, #8]
 8007f78:	60da      	str	r2, [r3, #12]
 8007f7a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f84:	d147      	bne.n	8008016 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f86:	2300      	movs	r3, #0
 8007f88:	613b      	str	r3, [r7, #16]
 8007f8a:	4b25      	ldr	r3, [pc, #148]	; (8008020 <HAL_HCD_MspInit+0xbc>)
 8007f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8e:	4a24      	ldr	r2, [pc, #144]	; (8008020 <HAL_HCD_MspInit+0xbc>)
 8007f90:	f043 0301 	orr.w	r3, r3, #1
 8007f94:	6313      	str	r3, [r2, #48]	; 0x30
 8007f96:	4b22      	ldr	r3, [pc, #136]	; (8008020 <HAL_HCD_MspInit+0xbc>)
 8007f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	613b      	str	r3, [r7, #16]
 8007fa0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007fa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fac:	2300      	movs	r3, #0
 8007fae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007fb0:	f107 0314 	add.w	r3, r7, #20
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	481b      	ldr	r0, [pc, #108]	; (8008024 <HAL_HCD_MspInit+0xc0>)
 8007fb8:	f7f9 fd98 	bl	8001aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007fbc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007fce:	230a      	movs	r3, #10
 8007fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fd2:	f107 0314 	add.w	r3, r7, #20
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	4812      	ldr	r0, [pc, #72]	; (8008024 <HAL_HCD_MspInit+0xc0>)
 8007fda:	f7f9 fd87 	bl	8001aec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007fde:	4b10      	ldr	r3, [pc, #64]	; (8008020 <HAL_HCD_MspInit+0xbc>)
 8007fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe2:	4a0f      	ldr	r2, [pc, #60]	; (8008020 <HAL_HCD_MspInit+0xbc>)
 8007fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe8:	6353      	str	r3, [r2, #52]	; 0x34
 8007fea:	2300      	movs	r3, #0
 8007fec:	60fb      	str	r3, [r7, #12]
 8007fee:	4b0c      	ldr	r3, [pc, #48]	; (8008020 <HAL_HCD_MspInit+0xbc>)
 8007ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff2:	4a0b      	ldr	r2, [pc, #44]	; (8008020 <HAL_HCD_MspInit+0xbc>)
 8007ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8007ffa:	4b09      	ldr	r3, [pc, #36]	; (8008020 <HAL_HCD_MspInit+0xbc>)
 8007ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008002:	60fb      	str	r3, [r7, #12]
 8008004:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008006:	2200      	movs	r2, #0
 8008008:	2100      	movs	r1, #0
 800800a:	2043      	movs	r0, #67	; 0x43
 800800c:	f7f9 fd37 	bl	8001a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008010:	2043      	movs	r0, #67	; 0x43
 8008012:	f7f9 fd50 	bl	8001ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008016:	bf00      	nop
 8008018:	3728      	adds	r7, #40	; 0x28
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	40023800 	.word	0x40023800
 8008024:	40020000 	.word	0x40020000

08008028 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008036:	4618      	mov	r0, r3
 8008038:	f7fe ffed 	bl	8007016 <USBH_LL_IncTimer>
}
 800803c:	bf00      	nop
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008052:	4618      	mov	r0, r3
 8008054:	f7ff f825 	bl	80070a2 <USBH_LL_Connect>
}
 8008058:	bf00      	nop
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800806e:	4618      	mov	r0, r3
 8008070:	f7ff f82e 	bl	80070d0 <USBH_LL_Disconnect>
}
 8008074:	bf00      	nop
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	460b      	mov	r3, r1
 8008086:	70fb      	strb	r3, [r7, #3]
 8008088:	4613      	mov	r3, r2
 800808a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fe ffdf 	bl	800706a <USBH_LL_PortEnabled>
}
 80080ac:	bf00      	nop
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fe ffdf 	bl	8007086 <USBH_LL_PortDisabled>
}
 80080c8:	bf00      	nop
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d12a      	bne.n	8008138 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80080e2:	4a18      	ldr	r2, [pc, #96]	; (8008144 <USBH_LL_Init+0x74>)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a15      	ldr	r2, [pc, #84]	; (8008144 <USBH_LL_Init+0x74>)
 80080ee:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80080f2:	4b14      	ldr	r3, [pc, #80]	; (8008144 <USBH_LL_Init+0x74>)
 80080f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80080f8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80080fa:	4b12      	ldr	r3, [pc, #72]	; (8008144 <USBH_LL_Init+0x74>)
 80080fc:	2208      	movs	r2, #8
 80080fe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008100:	4b10      	ldr	r3, [pc, #64]	; (8008144 <USBH_LL_Init+0x74>)
 8008102:	2201      	movs	r2, #1
 8008104:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008106:	4b0f      	ldr	r3, [pc, #60]	; (8008144 <USBH_LL_Init+0x74>)
 8008108:	2200      	movs	r2, #0
 800810a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800810c:	4b0d      	ldr	r3, [pc, #52]	; (8008144 <USBH_LL_Init+0x74>)
 800810e:	2202      	movs	r2, #2
 8008110:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008112:	4b0c      	ldr	r3, [pc, #48]	; (8008144 <USBH_LL_Init+0x74>)
 8008114:	2200      	movs	r2, #0
 8008116:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008118:	480a      	ldr	r0, [pc, #40]	; (8008144 <USBH_LL_Init+0x74>)
 800811a:	f7f9 feb6 	bl	8001e8a <HAL_HCD_Init>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d001      	beq.n	8008128 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008124:	f7f8 fc84 	bl	8000a30 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008128:	4806      	ldr	r0, [pc, #24]	; (8008144 <USBH_LL_Init+0x74>)
 800812a:	f7fa fa9a 	bl	8002662 <HAL_HCD_GetCurrentFrame>
 800812e:	4603      	mov	r3, r0
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7fe ff60 	bl	8006ff8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	200005d0 	.word	0x200005d0

08008148 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008150:	2300      	movs	r3, #0
 8008152:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008154:	2300      	movs	r3, #0
 8008156:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800815e:	4618      	mov	r0, r3
 8008160:	f7fa fa09 	bl	8002576 <HAL_HCD_Start>
 8008164:	4603      	mov	r3, r0
 8008166:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008168:	7bfb      	ldrb	r3, [r7, #15]
 800816a:	4618      	mov	r0, r3
 800816c:	f000 f95c 	bl	8008428 <USBH_Get_USB_Status>
 8008170:	4603      	mov	r3, r0
 8008172:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008174:	7bbb      	ldrb	r3, [r7, #14]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b084      	sub	sp, #16
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008194:	4618      	mov	r0, r3
 8008196:	f7fa fa11 	bl	80025bc <HAL_HCD_Stop>
 800819a:	4603      	mov	r3, r0
 800819c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800819e:	7bfb      	ldrb	r3, [r7, #15]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f000 f941 	bl	8008428 <USBH_Get_USB_Status>
 80081a6:	4603      	mov	r3, r0
 80081a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80081bc:	2301      	movs	r3, #1
 80081be:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fa fa59 	bl	800267e <HAL_HCD_GetCurrentSpeed>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d00c      	beq.n	80081ec <USBH_LL_GetSpeed+0x38>
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d80d      	bhi.n	80081f2 <USBH_LL_GetSpeed+0x3e>
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d002      	beq.n	80081e0 <USBH_LL_GetSpeed+0x2c>
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d003      	beq.n	80081e6 <USBH_LL_GetSpeed+0x32>
 80081de:	e008      	b.n	80081f2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80081e0:	2300      	movs	r3, #0
 80081e2:	73fb      	strb	r3, [r7, #15]
    break;
 80081e4:	e008      	b.n	80081f8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80081e6:	2301      	movs	r3, #1
 80081e8:	73fb      	strb	r3, [r7, #15]
    break;
 80081ea:	e005      	b.n	80081f8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80081ec:	2302      	movs	r3, #2
 80081ee:	73fb      	strb	r3, [r7, #15]
    break;
 80081f0:	e002      	b.n	80081f8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80081f2:	2301      	movs	r3, #1
 80081f4:	73fb      	strb	r3, [r7, #15]
    break;
 80081f6:	bf00      	nop
  }
  return  speed;
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800820e:	2300      	movs	r3, #0
 8008210:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008218:	4618      	mov	r0, r3
 800821a:	f7fa f9ec 	bl	80025f6 <HAL_HCD_ResetPort>
 800821e:	4603      	mov	r3, r0
 8008220:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008222:	7bfb      	ldrb	r3, [r7, #15]
 8008224:	4618      	mov	r0, r3
 8008226:	f000 f8ff 	bl	8008428 <USBH_Get_USB_Status>
 800822a:	4603      	mov	r3, r0
 800822c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800822e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800824a:	78fa      	ldrb	r2, [r7, #3]
 800824c:	4611      	mov	r1, r2
 800824e:	4618      	mov	r0, r3
 8008250:	f7fa f9f3 	bl	800263a <HAL_HCD_HC_GetXferCount>
 8008254:	4603      	mov	r3, r0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800825e:	b590      	push	{r4, r7, lr}
 8008260:	b089      	sub	sp, #36	; 0x24
 8008262:	af04      	add	r7, sp, #16
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	4608      	mov	r0, r1
 8008268:	4611      	mov	r1, r2
 800826a:	461a      	mov	r2, r3
 800826c:	4603      	mov	r3, r0
 800826e:	70fb      	strb	r3, [r7, #3]
 8008270:	460b      	mov	r3, r1
 8008272:	70bb      	strb	r3, [r7, #2]
 8008274:	4613      	mov	r3, r2
 8008276:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008278:	2300      	movs	r3, #0
 800827a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800827c:	2300      	movs	r3, #0
 800827e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008286:	787c      	ldrb	r4, [r7, #1]
 8008288:	78ba      	ldrb	r2, [r7, #2]
 800828a:	78f9      	ldrb	r1, [r7, #3]
 800828c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800828e:	9302      	str	r3, [sp, #8]
 8008290:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008294:	9301      	str	r3, [sp, #4]
 8008296:	f897 3020 	ldrb.w	r3, [r7, #32]
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	4623      	mov	r3, r4
 800829e:	f7f9 fe56 	bl	8001f4e <HAL_HCD_HC_Init>
 80082a2:	4603      	mov	r3, r0
 80082a4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80082a6:	7bfb      	ldrb	r3, [r7, #15]
 80082a8:	4618      	mov	r0, r3
 80082aa:	f000 f8bd 	bl	8008428 <USBH_Get_USB_Status>
 80082ae:	4603      	mov	r3, r0
 80082b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3714      	adds	r7, #20
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd90      	pop	{r4, r7, pc}

080082bc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	460b      	mov	r3, r1
 80082c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082c8:	2300      	movs	r3, #0
 80082ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082d6:	78fa      	ldrb	r2, [r7, #3]
 80082d8:	4611      	mov	r1, r2
 80082da:	4618      	mov	r0, r3
 80082dc:	f7f9 fec6 	bl	800206c <HAL_HCD_HC_Halt>
 80082e0:	4603      	mov	r3, r0
 80082e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f000 f89e 	bl	8008428 <USBH_Get_USB_Status>
 80082ec:	4603      	mov	r3, r0
 80082ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80082fa:	b590      	push	{r4, r7, lr}
 80082fc:	b089      	sub	sp, #36	; 0x24
 80082fe:	af04      	add	r7, sp, #16
 8008300:	6078      	str	r0, [r7, #4]
 8008302:	4608      	mov	r0, r1
 8008304:	4611      	mov	r1, r2
 8008306:	461a      	mov	r2, r3
 8008308:	4603      	mov	r3, r0
 800830a:	70fb      	strb	r3, [r7, #3]
 800830c:	460b      	mov	r3, r1
 800830e:	70bb      	strb	r3, [r7, #2]
 8008310:	4613      	mov	r3, r2
 8008312:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008314:	2300      	movs	r3, #0
 8008316:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008318:	2300      	movs	r3, #0
 800831a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008322:	787c      	ldrb	r4, [r7, #1]
 8008324:	78ba      	ldrb	r2, [r7, #2]
 8008326:	78f9      	ldrb	r1, [r7, #3]
 8008328:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800832c:	9303      	str	r3, [sp, #12]
 800832e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008330:	9302      	str	r3, [sp, #8]
 8008332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008334:	9301      	str	r3, [sp, #4]
 8008336:	f897 3020 	ldrb.w	r3, [r7, #32]
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	4623      	mov	r3, r4
 800833e:	f7f9 feb9 	bl	80020b4 <HAL_HCD_HC_SubmitRequest>
 8008342:	4603      	mov	r3, r0
 8008344:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008346:	7bfb      	ldrb	r3, [r7, #15]
 8008348:	4618      	mov	r0, r3
 800834a:	f000 f86d 	bl	8008428 <USBH_Get_USB_Status>
 800834e:	4603      	mov	r3, r0
 8008350:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008352:	7bbb      	ldrb	r3, [r7, #14]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	bd90      	pop	{r4, r7, pc}

0800835c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	460b      	mov	r3, r1
 8008366:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800836e:	78fa      	ldrb	r2, [r7, #3]
 8008370:	4611      	mov	r1, r2
 8008372:	4618      	mov	r0, r3
 8008374:	f7fa f94d 	bl	8002612 <HAL_HCD_HC_GetURBState>
 8008378:	4603      	mov	r3, r0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b082      	sub	sp, #8
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
 800838a:	460b      	mov	r3, r1
 800838c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008394:	2b01      	cmp	r3, #1
 8008396:	d103      	bne.n	80083a0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008398:	78fb      	ldrb	r3, [r7, #3]
 800839a:	4618      	mov	r0, r3
 800839c:	f000 f870 	bl	8008480 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80083a0:	20c8      	movs	r0, #200	; 0xc8
 80083a2:	f7f8 fdf1 	bl	8000f88 <HAL_Delay>
  return USBH_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	460b      	mov	r3, r1
 80083ba:	70fb      	strb	r3, [r7, #3]
 80083bc:	4613      	mov	r3, r2
 80083be:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083c6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80083c8:	78fb      	ldrb	r3, [r7, #3]
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	212c      	movs	r1, #44	; 0x2c
 80083ce:	fb01 f303 	mul.w	r3, r1, r3
 80083d2:	4413      	add	r3, r2
 80083d4:	333b      	adds	r3, #59	; 0x3b
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d009      	beq.n	80083f0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80083dc:	78fb      	ldrb	r3, [r7, #3]
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	212c      	movs	r1, #44	; 0x2c
 80083e2:	fb01 f303 	mul.w	r3, r1, r3
 80083e6:	4413      	add	r3, r2
 80083e8:	3354      	adds	r3, #84	; 0x54
 80083ea:	78ba      	ldrb	r2, [r7, #2]
 80083ec:	701a      	strb	r2, [r3, #0]
 80083ee:	e008      	b.n	8008402 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80083f0:	78fb      	ldrb	r3, [r7, #3]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	212c      	movs	r1, #44	; 0x2c
 80083f6:	fb01 f303 	mul.w	r3, r1, r3
 80083fa:	4413      	add	r3, r2
 80083fc:	3355      	adds	r3, #85	; 0x55
 80083fe:	78ba      	ldrb	r2, [r7, #2]
 8008400:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3714      	adds	r7, #20
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7f8 fdb5 	bl	8000f88 <HAL_Delay>
}
 800841e:	bf00      	nop
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
	...

08008428 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	4603      	mov	r3, r0
 8008430:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008432:	2300      	movs	r3, #0
 8008434:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008436:	79fb      	ldrb	r3, [r7, #7]
 8008438:	2b03      	cmp	r3, #3
 800843a:	d817      	bhi.n	800846c <USBH_Get_USB_Status+0x44>
 800843c:	a201      	add	r2, pc, #4	; (adr r2, 8008444 <USBH_Get_USB_Status+0x1c>)
 800843e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008442:	bf00      	nop
 8008444:	08008455 	.word	0x08008455
 8008448:	0800845b 	.word	0x0800845b
 800844c:	08008461 	.word	0x08008461
 8008450:	08008467 	.word	0x08008467
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	73fb      	strb	r3, [r7, #15]
    break;
 8008458:	e00b      	b.n	8008472 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800845a:	2302      	movs	r3, #2
 800845c:	73fb      	strb	r3, [r7, #15]
    break;
 800845e:	e008      	b.n	8008472 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008460:	2301      	movs	r3, #1
 8008462:	73fb      	strb	r3, [r7, #15]
    break;
 8008464:	e005      	b.n	8008472 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008466:	2302      	movs	r3, #2
 8008468:	73fb      	strb	r3, [r7, #15]
    break;
 800846a:	e002      	b.n	8008472 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800846c:	2302      	movs	r3, #2
 800846e:	73fb      	strb	r3, [r7, #15]
    break;
 8008470:	bf00      	nop
  }
  return usb_status;
 8008472:	7bfb      	ldrb	r3, [r7, #15]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3714      	adds	r7, #20
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	4603      	mov	r3, r0
 8008488:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800848a:	79fb      	ldrb	r3, [r7, #7]
 800848c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800848e:	79fb      	ldrb	r3, [r7, #7]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d102      	bne.n	800849a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008494:	2300      	movs	r3, #0
 8008496:	73fb      	strb	r3, [r7, #15]
 8008498:	e001      	b.n	800849e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800849a:	2301      	movs	r3, #1
 800849c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800849e:	7bfb      	ldrb	r3, [r7, #15]
 80084a0:	461a      	mov	r2, r3
 80084a2:	2101      	movs	r1, #1
 80084a4:	4803      	ldr	r0, [pc, #12]	; (80084b4 <MX_DriverVbusFS+0x34>)
 80084a6:	f7f9 fcbd 	bl	8001e24 <HAL_GPIO_WritePin>
}
 80084aa:	bf00      	nop
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	40020800 	.word	0x40020800

080084b8 <__errno>:
 80084b8:	4b01      	ldr	r3, [pc, #4]	; (80084c0 <__errno+0x8>)
 80084ba:	6818      	ldr	r0, [r3, #0]
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	2000002c 	.word	0x2000002c

080084c4 <__libc_init_array>:
 80084c4:	b570      	push	{r4, r5, r6, lr}
 80084c6:	4d0d      	ldr	r5, [pc, #52]	; (80084fc <__libc_init_array+0x38>)
 80084c8:	4c0d      	ldr	r4, [pc, #52]	; (8008500 <__libc_init_array+0x3c>)
 80084ca:	1b64      	subs	r4, r4, r5
 80084cc:	10a4      	asrs	r4, r4, #2
 80084ce:	2600      	movs	r6, #0
 80084d0:	42a6      	cmp	r6, r4
 80084d2:	d109      	bne.n	80084e8 <__libc_init_array+0x24>
 80084d4:	4d0b      	ldr	r5, [pc, #44]	; (8008504 <__libc_init_array+0x40>)
 80084d6:	4c0c      	ldr	r4, [pc, #48]	; (8008508 <__libc_init_array+0x44>)
 80084d8:	f000 f92e 	bl	8008738 <_init>
 80084dc:	1b64      	subs	r4, r4, r5
 80084de:	10a4      	asrs	r4, r4, #2
 80084e0:	2600      	movs	r6, #0
 80084e2:	42a6      	cmp	r6, r4
 80084e4:	d105      	bne.n	80084f2 <__libc_init_array+0x2e>
 80084e6:	bd70      	pop	{r4, r5, r6, pc}
 80084e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ec:	4798      	blx	r3
 80084ee:	3601      	adds	r6, #1
 80084f0:	e7ee      	b.n	80084d0 <__libc_init_array+0xc>
 80084f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f6:	4798      	blx	r3
 80084f8:	3601      	adds	r6, #1
 80084fa:	e7f2      	b.n	80084e2 <__libc_init_array+0x1e>
 80084fc:	08008774 	.word	0x08008774
 8008500:	08008774 	.word	0x08008774
 8008504:	08008774 	.word	0x08008774
 8008508:	08008778 	.word	0x08008778

0800850c <malloc>:
 800850c:	4b02      	ldr	r3, [pc, #8]	; (8008518 <malloc+0xc>)
 800850e:	4601      	mov	r1, r0
 8008510:	6818      	ldr	r0, [r3, #0]
 8008512:	f000 b87f 	b.w	8008614 <_malloc_r>
 8008516:	bf00      	nop
 8008518:	2000002c 	.word	0x2000002c

0800851c <free>:
 800851c:	4b02      	ldr	r3, [pc, #8]	; (8008528 <free+0xc>)
 800851e:	4601      	mov	r1, r0
 8008520:	6818      	ldr	r0, [r3, #0]
 8008522:	f000 b80b 	b.w	800853c <_free_r>
 8008526:	bf00      	nop
 8008528:	2000002c 	.word	0x2000002c

0800852c <memset>:
 800852c:	4402      	add	r2, r0
 800852e:	4603      	mov	r3, r0
 8008530:	4293      	cmp	r3, r2
 8008532:	d100      	bne.n	8008536 <memset+0xa>
 8008534:	4770      	bx	lr
 8008536:	f803 1b01 	strb.w	r1, [r3], #1
 800853a:	e7f9      	b.n	8008530 <memset+0x4>

0800853c <_free_r>:
 800853c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800853e:	2900      	cmp	r1, #0
 8008540:	d044      	beq.n	80085cc <_free_r+0x90>
 8008542:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008546:	9001      	str	r0, [sp, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	f1a1 0404 	sub.w	r4, r1, #4
 800854e:	bfb8      	it	lt
 8008550:	18e4      	addlt	r4, r4, r3
 8008552:	f000 f8e3 	bl	800871c <__malloc_lock>
 8008556:	4a1e      	ldr	r2, [pc, #120]	; (80085d0 <_free_r+0x94>)
 8008558:	9801      	ldr	r0, [sp, #4]
 800855a:	6813      	ldr	r3, [r2, #0]
 800855c:	b933      	cbnz	r3, 800856c <_free_r+0x30>
 800855e:	6063      	str	r3, [r4, #4]
 8008560:	6014      	str	r4, [r2, #0]
 8008562:	b003      	add	sp, #12
 8008564:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008568:	f000 b8de 	b.w	8008728 <__malloc_unlock>
 800856c:	42a3      	cmp	r3, r4
 800856e:	d908      	bls.n	8008582 <_free_r+0x46>
 8008570:	6825      	ldr	r5, [r4, #0]
 8008572:	1961      	adds	r1, r4, r5
 8008574:	428b      	cmp	r3, r1
 8008576:	bf01      	itttt	eq
 8008578:	6819      	ldreq	r1, [r3, #0]
 800857a:	685b      	ldreq	r3, [r3, #4]
 800857c:	1949      	addeq	r1, r1, r5
 800857e:	6021      	streq	r1, [r4, #0]
 8008580:	e7ed      	b.n	800855e <_free_r+0x22>
 8008582:	461a      	mov	r2, r3
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	b10b      	cbz	r3, 800858c <_free_r+0x50>
 8008588:	42a3      	cmp	r3, r4
 800858a:	d9fa      	bls.n	8008582 <_free_r+0x46>
 800858c:	6811      	ldr	r1, [r2, #0]
 800858e:	1855      	adds	r5, r2, r1
 8008590:	42a5      	cmp	r5, r4
 8008592:	d10b      	bne.n	80085ac <_free_r+0x70>
 8008594:	6824      	ldr	r4, [r4, #0]
 8008596:	4421      	add	r1, r4
 8008598:	1854      	adds	r4, r2, r1
 800859a:	42a3      	cmp	r3, r4
 800859c:	6011      	str	r1, [r2, #0]
 800859e:	d1e0      	bne.n	8008562 <_free_r+0x26>
 80085a0:	681c      	ldr	r4, [r3, #0]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	6053      	str	r3, [r2, #4]
 80085a6:	4421      	add	r1, r4
 80085a8:	6011      	str	r1, [r2, #0]
 80085aa:	e7da      	b.n	8008562 <_free_r+0x26>
 80085ac:	d902      	bls.n	80085b4 <_free_r+0x78>
 80085ae:	230c      	movs	r3, #12
 80085b0:	6003      	str	r3, [r0, #0]
 80085b2:	e7d6      	b.n	8008562 <_free_r+0x26>
 80085b4:	6825      	ldr	r5, [r4, #0]
 80085b6:	1961      	adds	r1, r4, r5
 80085b8:	428b      	cmp	r3, r1
 80085ba:	bf04      	itt	eq
 80085bc:	6819      	ldreq	r1, [r3, #0]
 80085be:	685b      	ldreq	r3, [r3, #4]
 80085c0:	6063      	str	r3, [r4, #4]
 80085c2:	bf04      	itt	eq
 80085c4:	1949      	addeq	r1, r1, r5
 80085c6:	6021      	streq	r1, [r4, #0]
 80085c8:	6054      	str	r4, [r2, #4]
 80085ca:	e7ca      	b.n	8008562 <_free_r+0x26>
 80085cc:	b003      	add	sp, #12
 80085ce:	bd30      	pop	{r4, r5, pc}
 80085d0:	200008d4 	.word	0x200008d4

080085d4 <sbrk_aligned>:
 80085d4:	b570      	push	{r4, r5, r6, lr}
 80085d6:	4e0e      	ldr	r6, [pc, #56]	; (8008610 <sbrk_aligned+0x3c>)
 80085d8:	460c      	mov	r4, r1
 80085da:	6831      	ldr	r1, [r6, #0]
 80085dc:	4605      	mov	r5, r0
 80085de:	b911      	cbnz	r1, 80085e6 <sbrk_aligned+0x12>
 80085e0:	f000 f88c 	bl	80086fc <_sbrk_r>
 80085e4:	6030      	str	r0, [r6, #0]
 80085e6:	4621      	mov	r1, r4
 80085e8:	4628      	mov	r0, r5
 80085ea:	f000 f887 	bl	80086fc <_sbrk_r>
 80085ee:	1c43      	adds	r3, r0, #1
 80085f0:	d00a      	beq.n	8008608 <sbrk_aligned+0x34>
 80085f2:	1cc4      	adds	r4, r0, #3
 80085f4:	f024 0403 	bic.w	r4, r4, #3
 80085f8:	42a0      	cmp	r0, r4
 80085fa:	d007      	beq.n	800860c <sbrk_aligned+0x38>
 80085fc:	1a21      	subs	r1, r4, r0
 80085fe:	4628      	mov	r0, r5
 8008600:	f000 f87c 	bl	80086fc <_sbrk_r>
 8008604:	3001      	adds	r0, #1
 8008606:	d101      	bne.n	800860c <sbrk_aligned+0x38>
 8008608:	f04f 34ff 	mov.w	r4, #4294967295
 800860c:	4620      	mov	r0, r4
 800860e:	bd70      	pop	{r4, r5, r6, pc}
 8008610:	200008d8 	.word	0x200008d8

08008614 <_malloc_r>:
 8008614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008618:	1ccd      	adds	r5, r1, #3
 800861a:	f025 0503 	bic.w	r5, r5, #3
 800861e:	3508      	adds	r5, #8
 8008620:	2d0c      	cmp	r5, #12
 8008622:	bf38      	it	cc
 8008624:	250c      	movcc	r5, #12
 8008626:	2d00      	cmp	r5, #0
 8008628:	4607      	mov	r7, r0
 800862a:	db01      	blt.n	8008630 <_malloc_r+0x1c>
 800862c:	42a9      	cmp	r1, r5
 800862e:	d905      	bls.n	800863c <_malloc_r+0x28>
 8008630:	230c      	movs	r3, #12
 8008632:	603b      	str	r3, [r7, #0]
 8008634:	2600      	movs	r6, #0
 8008636:	4630      	mov	r0, r6
 8008638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800863c:	4e2e      	ldr	r6, [pc, #184]	; (80086f8 <_malloc_r+0xe4>)
 800863e:	f000 f86d 	bl	800871c <__malloc_lock>
 8008642:	6833      	ldr	r3, [r6, #0]
 8008644:	461c      	mov	r4, r3
 8008646:	bb34      	cbnz	r4, 8008696 <_malloc_r+0x82>
 8008648:	4629      	mov	r1, r5
 800864a:	4638      	mov	r0, r7
 800864c:	f7ff ffc2 	bl	80085d4 <sbrk_aligned>
 8008650:	1c43      	adds	r3, r0, #1
 8008652:	4604      	mov	r4, r0
 8008654:	d14d      	bne.n	80086f2 <_malloc_r+0xde>
 8008656:	6834      	ldr	r4, [r6, #0]
 8008658:	4626      	mov	r6, r4
 800865a:	2e00      	cmp	r6, #0
 800865c:	d140      	bne.n	80086e0 <_malloc_r+0xcc>
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	4631      	mov	r1, r6
 8008662:	4638      	mov	r0, r7
 8008664:	eb04 0803 	add.w	r8, r4, r3
 8008668:	f000 f848 	bl	80086fc <_sbrk_r>
 800866c:	4580      	cmp	r8, r0
 800866e:	d13a      	bne.n	80086e6 <_malloc_r+0xd2>
 8008670:	6821      	ldr	r1, [r4, #0]
 8008672:	3503      	adds	r5, #3
 8008674:	1a6d      	subs	r5, r5, r1
 8008676:	f025 0503 	bic.w	r5, r5, #3
 800867a:	3508      	adds	r5, #8
 800867c:	2d0c      	cmp	r5, #12
 800867e:	bf38      	it	cc
 8008680:	250c      	movcc	r5, #12
 8008682:	4629      	mov	r1, r5
 8008684:	4638      	mov	r0, r7
 8008686:	f7ff ffa5 	bl	80085d4 <sbrk_aligned>
 800868a:	3001      	adds	r0, #1
 800868c:	d02b      	beq.n	80086e6 <_malloc_r+0xd2>
 800868e:	6823      	ldr	r3, [r4, #0]
 8008690:	442b      	add	r3, r5
 8008692:	6023      	str	r3, [r4, #0]
 8008694:	e00e      	b.n	80086b4 <_malloc_r+0xa0>
 8008696:	6822      	ldr	r2, [r4, #0]
 8008698:	1b52      	subs	r2, r2, r5
 800869a:	d41e      	bmi.n	80086da <_malloc_r+0xc6>
 800869c:	2a0b      	cmp	r2, #11
 800869e:	d916      	bls.n	80086ce <_malloc_r+0xba>
 80086a0:	1961      	adds	r1, r4, r5
 80086a2:	42a3      	cmp	r3, r4
 80086a4:	6025      	str	r5, [r4, #0]
 80086a6:	bf18      	it	ne
 80086a8:	6059      	strne	r1, [r3, #4]
 80086aa:	6863      	ldr	r3, [r4, #4]
 80086ac:	bf08      	it	eq
 80086ae:	6031      	streq	r1, [r6, #0]
 80086b0:	5162      	str	r2, [r4, r5]
 80086b2:	604b      	str	r3, [r1, #4]
 80086b4:	4638      	mov	r0, r7
 80086b6:	f104 060b 	add.w	r6, r4, #11
 80086ba:	f000 f835 	bl	8008728 <__malloc_unlock>
 80086be:	f026 0607 	bic.w	r6, r6, #7
 80086c2:	1d23      	adds	r3, r4, #4
 80086c4:	1af2      	subs	r2, r6, r3
 80086c6:	d0b6      	beq.n	8008636 <_malloc_r+0x22>
 80086c8:	1b9b      	subs	r3, r3, r6
 80086ca:	50a3      	str	r3, [r4, r2]
 80086cc:	e7b3      	b.n	8008636 <_malloc_r+0x22>
 80086ce:	6862      	ldr	r2, [r4, #4]
 80086d0:	42a3      	cmp	r3, r4
 80086d2:	bf0c      	ite	eq
 80086d4:	6032      	streq	r2, [r6, #0]
 80086d6:	605a      	strne	r2, [r3, #4]
 80086d8:	e7ec      	b.n	80086b4 <_malloc_r+0xa0>
 80086da:	4623      	mov	r3, r4
 80086dc:	6864      	ldr	r4, [r4, #4]
 80086de:	e7b2      	b.n	8008646 <_malloc_r+0x32>
 80086e0:	4634      	mov	r4, r6
 80086e2:	6876      	ldr	r6, [r6, #4]
 80086e4:	e7b9      	b.n	800865a <_malloc_r+0x46>
 80086e6:	230c      	movs	r3, #12
 80086e8:	603b      	str	r3, [r7, #0]
 80086ea:	4638      	mov	r0, r7
 80086ec:	f000 f81c 	bl	8008728 <__malloc_unlock>
 80086f0:	e7a1      	b.n	8008636 <_malloc_r+0x22>
 80086f2:	6025      	str	r5, [r4, #0]
 80086f4:	e7de      	b.n	80086b4 <_malloc_r+0xa0>
 80086f6:	bf00      	nop
 80086f8:	200008d4 	.word	0x200008d4

080086fc <_sbrk_r>:
 80086fc:	b538      	push	{r3, r4, r5, lr}
 80086fe:	4d06      	ldr	r5, [pc, #24]	; (8008718 <_sbrk_r+0x1c>)
 8008700:	2300      	movs	r3, #0
 8008702:	4604      	mov	r4, r0
 8008704:	4608      	mov	r0, r1
 8008706:	602b      	str	r3, [r5, #0]
 8008708:	f7f8 fb5a 	bl	8000dc0 <_sbrk>
 800870c:	1c43      	adds	r3, r0, #1
 800870e:	d102      	bne.n	8008716 <_sbrk_r+0x1a>
 8008710:	682b      	ldr	r3, [r5, #0]
 8008712:	b103      	cbz	r3, 8008716 <_sbrk_r+0x1a>
 8008714:	6023      	str	r3, [r4, #0]
 8008716:	bd38      	pop	{r3, r4, r5, pc}
 8008718:	200008dc 	.word	0x200008dc

0800871c <__malloc_lock>:
 800871c:	4801      	ldr	r0, [pc, #4]	; (8008724 <__malloc_lock+0x8>)
 800871e:	f000 b809 	b.w	8008734 <__retarget_lock_acquire_recursive>
 8008722:	bf00      	nop
 8008724:	200008e0 	.word	0x200008e0

08008728 <__malloc_unlock>:
 8008728:	4801      	ldr	r0, [pc, #4]	; (8008730 <__malloc_unlock+0x8>)
 800872a:	f000 b804 	b.w	8008736 <__retarget_lock_release_recursive>
 800872e:	bf00      	nop
 8008730:	200008e0 	.word	0x200008e0

08008734 <__retarget_lock_acquire_recursive>:
 8008734:	4770      	bx	lr

08008736 <__retarget_lock_release_recursive>:
 8008736:	4770      	bx	lr

08008738 <_init>:
 8008738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800873a:	bf00      	nop
 800873c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800873e:	bc08      	pop	{r3}
 8008740:	469e      	mov	lr, r3
 8008742:	4770      	bx	lr

08008744 <_fini>:
 8008744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008746:	bf00      	nop
 8008748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800874a:	bc08      	pop	{r3}
 800874c:	469e      	mov	lr, r3
 800874e:	4770      	bx	lr
