
CANBUS_RECEIVE_TEST2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d84  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002f18  08002f18  00003f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f48  08002f48  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f48  08002f48  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f48  08002f48  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f48  08002f48  00003f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f4c  08002f4c  00003f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002f50  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          000000b8  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000c4  200000c4  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000062e4  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001381  00000000  00000000  0000a320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000570  00000000  00000000  0000b6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003f8  00000000  00000000  0000bc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e8af  00000000  00000000  0000c010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000067ff  00000000  00000000  0002a8bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b99bb  00000000  00000000  000310be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eaa79  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000149c  00000000  00000000  000eaabc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  000ebf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002f00 	.word	0x08002f00

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002f00 	.word	0x08002f00

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	TxData[0]=0x01;
 80001d8:	4b17      	ldr	r3, [pc, #92]	@ (8000238 <main+0x64>)
 80001da:	2201      	movs	r2, #1
 80001dc:	701a      	strb	r2, [r3, #0]
	TxData[1]=0x07;
 80001de:	4b16      	ldr	r3, [pc, #88]	@ (8000238 <main+0x64>)
 80001e0:	2207      	movs	r2, #7
 80001e2:	705a      	strb	r2, [r3, #1]
	TxData[2]=0x06;
 80001e4:	4b14      	ldr	r3, [pc, #80]	@ (8000238 <main+0x64>)
 80001e6:	2206      	movs	r2, #6
 80001e8:	709a      	strb	r2, [r3, #2]
	TxData[3]=0x09;
 80001ea:	4b13      	ldr	r3, [pc, #76]	@ (8000238 <main+0x64>)
 80001ec:	2209      	movs	r2, #9
 80001ee:	70da      	strb	r2, [r3, #3]
	TxData[4]=0x05;
 80001f0:	4b11      	ldr	r3, [pc, #68]	@ (8000238 <main+0x64>)
 80001f2:	2205      	movs	r2, #5
 80001f4:	711a      	strb	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f6:	f000 fa8d 	bl	8000714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fa:	f000 f823 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fe:	f000 f8d1 	bl	80003a4 <MX_GPIO_Init>
  MX_CAN_Init();
 8000202:	f000 f863 	bl	80002cc <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_RX_FIFO1_MSG_PENDING);
 8000206:	2112      	movs	r1, #18
 8000208:	480c      	ldr	r0, [pc, #48]	@ (800023c <main+0x68>)
 800020a:	f000 fee4 	bl	8000fd6 <HAL_CAN_ActivateNotification>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(RxData[0]==0x01)
 800020e:	4b0c      	ldr	r3, [pc, #48]	@ (8000240 <main+0x6c>)
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	2b01      	cmp	r3, #1
 8000214:	d105      	bne.n	8000222 <main+0x4e>
	  {
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8000216:	2201      	movs	r2, #1
 8000218:	2120      	movs	r1, #32
 800021a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800021e:	f001 fbe3 	bl	80019e8 <HAL_GPIO_WritePin>
	  }
	  if(RxData[0]==0x02)
 8000222:	4b07      	ldr	r3, [pc, #28]	@ (8000240 <main+0x6c>)
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	2b02      	cmp	r3, #2
 8000228:	d1f1      	bne.n	800020e <main+0x3a>
	  {
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 800022a:	2200      	movs	r2, #0
 800022c:	2120      	movs	r1, #32
 800022e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000232:	f001 fbd9 	bl	80019e8 <HAL_GPIO_WritePin>
	  if(RxData[0]==0x01)
 8000236:	e7ea      	b.n	800020e <main+0x3a>
 8000238:	20000088 	.word	0x20000088
 800023c:	20000098 	.word	0x20000098
 8000240:	20000090 	.word	0x20000090

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b090      	sub	sp, #64	@ 0x40
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0318 	add.w	r3, r7, #24
 800024e:	2228      	movs	r2, #40	@ 0x28
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f002 fe28 	bl	8002ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]
 8000264:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000266:	2302      	movs	r3, #2
 8000268:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026a:	2301      	movs	r3, #1
 800026c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800026e:	2310      	movs	r3, #16
 8000270:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000272:	2302      	movs	r3, #2
 8000274:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000276:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800027a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800027c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000280:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000286:	f107 0318 	add.w	r3, r7, #24
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fbe8 	bl	8001a60 <HAL_RCC_OscConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000296:	f000 f8ed 	bl	8000474 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029a:	230f      	movs	r3, #15
 800029c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029e:	2302      	movs	r3, #2
 80002a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2102      	movs	r1, #2
 80002b4:	4618      	mov	r0, r3
 80002b6:	f002 fc27 	bl	8002b08 <HAL_RCC_ClockConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80002c0:	f000 f8d8 	bl	8000474 <Error_Handler>
  }
}
 80002c4:	bf00      	nop
 80002c6:	3740      	adds	r7, #64	@ 0x40
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80002d0:	4b30      	ldr	r3, [pc, #192]	@ (8000394 <MX_CAN_Init+0xc8>)
 80002d2:	4a31      	ldr	r2, [pc, #196]	@ (8000398 <MX_CAN_Init+0xcc>)
 80002d4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80002d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000394 <MX_CAN_Init+0xc8>)
 80002d8:	2212      	movs	r2, #18
 80002da:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002dc:	4b2d      	ldr	r3, [pc, #180]	@ (8000394 <MX_CAN_Init+0xc8>)
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000394 <MX_CAN_Init+0xc8>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80002e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000394 <MX_CAN_Init+0xc8>)
 80002ea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80002ee:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80002f0:	4b28      	ldr	r3, [pc, #160]	@ (8000394 <MX_CAN_Init+0xc8>)
 80002f2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80002f6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002f8:	4b26      	ldr	r3, [pc, #152]	@ (8000394 <MX_CAN_Init+0xc8>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80002fe:	4b25      	ldr	r3, [pc, #148]	@ (8000394 <MX_CAN_Init+0xc8>)
 8000300:	2201      	movs	r2, #1
 8000302:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000304:	4b23      	ldr	r3, [pc, #140]	@ (8000394 <MX_CAN_Init+0xc8>)
 8000306:	2200      	movs	r2, #0
 8000308:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 800030a:	4b22      	ldr	r3, [pc, #136]	@ (8000394 <MX_CAN_Init+0xc8>)
 800030c:	2201      	movs	r2, #1
 800030e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000310:	4b20      	ldr	r3, [pc, #128]	@ (8000394 <MX_CAN_Init+0xc8>)
 8000312:	2200      	movs	r2, #0
 8000314:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000316:	4b1f      	ldr	r3, [pc, #124]	@ (8000394 <MX_CAN_Init+0xc8>)
 8000318:	2200      	movs	r2, #0
 800031a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800031c:	481d      	ldr	r0, [pc, #116]	@ (8000394 <MX_CAN_Init+0xc8>)
 800031e:	f000 fa5f 	bl	80007e0 <HAL_CAN_Init>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000328:	f000 f8a4 	bl	8000474 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  TxHeader.IDE=CAN_ID_STD;
 800032c:	4b1b      	ldr	r3, [pc, #108]	@ (800039c <MX_CAN_Init+0xd0>)
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  TxHeader.StdId=0x11;
 8000332:	4b1a      	ldr	r3, [pc, #104]	@ (800039c <MX_CAN_Init+0xd0>)
 8000334:	2211      	movs	r2, #17
 8000336:	601a      	str	r2, [r3, #0]
  TxHeader.RTR=CAN_RTR_DATA;
 8000338:	4b18      	ldr	r3, [pc, #96]	@ (800039c <MX_CAN_Init+0xd0>)
 800033a:	2200      	movs	r2, #0
 800033c:	60da      	str	r2, [r3, #12]
  TxHeader.DLC=5;
 800033e:	4b17      	ldr	r3, [pc, #92]	@ (800039c <MX_CAN_Init+0xd0>)
 8000340:	2205      	movs	r2, #5
 8000342:	611a      	str	r2, [r3, #16]

  Scanfilter.FilterActivation=CAN_FILTER_ENABLE;
 8000344:	4b16      	ldr	r3, [pc, #88]	@ (80003a0 <MX_CAN_Init+0xd4>)
 8000346:	2201      	movs	r2, #1
 8000348:	621a      	str	r2, [r3, #32]
  Scanfilter.FilterBank=0;
 800034a:	4b15      	ldr	r3, [pc, #84]	@ (80003a0 <MX_CAN_Init+0xd4>)
 800034c:	2200      	movs	r2, #0
 800034e:	615a      	str	r2, [r3, #20]
  Scanfilter.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 8000350:	4b13      	ldr	r3, [pc, #76]	@ (80003a0 <MX_CAN_Init+0xd4>)
 8000352:	2200      	movs	r2, #0
 8000354:	611a      	str	r2, [r3, #16]
  Scanfilter.FilterIdHigh=0x0000;
 8000356:	4b12      	ldr	r3, [pc, #72]	@ (80003a0 <MX_CAN_Init+0xd4>)
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
  Scanfilter.FilterIdLow=0x0000;
 800035c:	4b10      	ldr	r3, [pc, #64]	@ (80003a0 <MX_CAN_Init+0xd4>)
 800035e:	2200      	movs	r2, #0
 8000360:	605a      	str	r2, [r3, #4]
  Scanfilter.FilterMaskIdHigh=0x0000;
 8000362:	4b0f      	ldr	r3, [pc, #60]	@ (80003a0 <MX_CAN_Init+0xd4>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  Scanfilter.FilterMaskIdLow=0x0000;
 8000368:	4b0d      	ldr	r3, [pc, #52]	@ (80003a0 <MX_CAN_Init+0xd4>)
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]
  Scanfilter.FilterMode=CAN_FILTERMODE_IDMASK;
 800036e:	4b0c      	ldr	r3, [pc, #48]	@ (80003a0 <MX_CAN_Init+0xd4>)
 8000370:	2200      	movs	r2, #0
 8000372:	619a      	str	r2, [r3, #24]
  Scanfilter.FilterScale=CAN_FILTERSCALE_32BIT;
 8000374:	4b0a      	ldr	r3, [pc, #40]	@ (80003a0 <MX_CAN_Init+0xd4>)
 8000376:	2201      	movs	r2, #1
 8000378:	61da      	str	r2, [r3, #28]
  Scanfilter.SlaveStartFilterBank=14;
 800037a:	4b09      	ldr	r3, [pc, #36]	@ (80003a0 <MX_CAN_Init+0xd4>)
 800037c:	220e      	movs	r2, #14
 800037e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan, &Scanfilter);
 8000380:	4907      	ldr	r1, [pc, #28]	@ (80003a0 <MX_CAN_Init+0xd4>)
 8000382:	4804      	ldr	r0, [pc, #16]	@ (8000394 <MX_CAN_Init+0xc8>)
 8000384:	f000 fb27 	bl	80009d6 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan);
 8000388:	4802      	ldr	r0, [pc, #8]	@ (8000394 <MX_CAN_Init+0xc8>)
 800038a:	f000 fbee 	bl	8000b6a <HAL_CAN_Start>

  /* USER CODE END CAN_Init 2 */

}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20000098 	.word	0x20000098
 8000398:	40006400 	.word	0x40006400
 800039c:	2000006c 	.word	0x2000006c
 80003a0:	20000028 	.word	0x20000028

080003a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b088      	sub	sp, #32
 80003a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003aa:	f107 030c 	add.w	r3, r7, #12
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
 80003b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ba:	4b23      	ldr	r3, [pc, #140]	@ (8000448 <MX_GPIO_Init+0xa4>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	4a22      	ldr	r2, [pc, #136]	@ (8000448 <MX_GPIO_Init+0xa4>)
 80003c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80003c4:	6153      	str	r3, [r2, #20]
 80003c6:	4b20      	ldr	r3, [pc, #128]	@ (8000448 <MX_GPIO_Init+0xa4>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80003ce:	60bb      	str	r3, [r7, #8]
 80003d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000448 <MX_GPIO_Init+0xa4>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000448 <MX_GPIO_Init+0xa4>)
 80003d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003dc:	6153      	str	r3, [r2, #20]
 80003de:	4b1a      	ldr	r3, [pc, #104]	@ (8000448 <MX_GPIO_Init+0xa4>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2120      	movs	r1, #32
 80003ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003f2:	f001 faf9 	bl	80019e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003fc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000400:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000406:	f107 030c 	add.w	r3, r7, #12
 800040a:	4619      	mov	r1, r3
 800040c:	480f      	ldr	r0, [pc, #60]	@ (800044c <MX_GPIO_Init+0xa8>)
 800040e:	f001 f949 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000412:	2320      	movs	r3, #32
 8000414:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000416:	2301      	movs	r3, #1
 8000418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	2300      	movs	r3, #0
 800041c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041e:	2300      	movs	r3, #0
 8000420:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000422:	f107 030c 	add.w	r3, r7, #12
 8000426:	4619      	mov	r1, r3
 8000428:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800042c:	f001 f93a 	bl	80016a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000430:	2200      	movs	r2, #0
 8000432:	2100      	movs	r1, #0
 8000434:	2028      	movs	r0, #40	@ 0x28
 8000436:	f001 f8fe 	bl	8001636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800043a:	2028      	movs	r0, #40	@ 0x28
 800043c:	f001 f917 	bl	800166e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000440:	bf00      	nop
 8000442:	3720      	adds	r7, #32
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40021000 	.word	0x40021000
 800044c:	48000800 	.word	0x48000800

08000450 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000458:	4b04      	ldr	r3, [pc, #16]	@ (800046c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 800045a:	4a05      	ldr	r2, [pc, #20]	@ (8000470 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 800045c:	2100      	movs	r1, #0
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f000 fc97 	bl	8000d92 <HAL_CAN_GetRxMessage>
}
 8000464:	bf00      	nop
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000090 	.word	0x20000090
 8000470:	20000050 	.word	0x20000050

08000474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000478:	b672      	cpsid	i
}
 800047a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800047c:	bf00      	nop
 800047e:	e7fd      	b.n	800047c <Error_Handler+0x8>

08000480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000486:	4b0f      	ldr	r3, [pc, #60]	@ (80004c4 <HAL_MspInit+0x44>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	4a0e      	ldr	r2, [pc, #56]	@ (80004c4 <HAL_MspInit+0x44>)
 800048c:	f043 0301 	orr.w	r3, r3, #1
 8000490:	6193      	str	r3, [r2, #24]
 8000492:	4b0c      	ldr	r3, [pc, #48]	@ (80004c4 <HAL_MspInit+0x44>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049e:	4b09      	ldr	r3, [pc, #36]	@ (80004c4 <HAL_MspInit+0x44>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	4a08      	ldr	r2, [pc, #32]	@ (80004c4 <HAL_MspInit+0x44>)
 80004a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004a8:	61d3      	str	r3, [r2, #28]
 80004aa:	4b06      	ldr	r3, [pc, #24]	@ (80004c4 <HAL_MspInit+0x44>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004b2:	603b      	str	r3, [r7, #0]
 80004b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b6:	bf00      	nop
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	40021000 	.word	0x40021000

080004c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	@ 0x28
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d0:	f107 0314 	add.w	r3, r7, #20
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
 80004de:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a28      	ldr	r2, [pc, #160]	@ (8000588 <HAL_CAN_MspInit+0xc0>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d149      	bne.n	800057e <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004ea:	4b28      	ldr	r3, [pc, #160]	@ (800058c <HAL_CAN_MspInit+0xc4>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	4a27      	ldr	r2, [pc, #156]	@ (800058c <HAL_CAN_MspInit+0xc4>)
 80004f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004f4:	61d3      	str	r3, [r2, #28]
 80004f6:	4b25      	ldr	r3, [pc, #148]	@ (800058c <HAL_CAN_MspInit+0xc4>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000502:	4b22      	ldr	r3, [pc, #136]	@ (800058c <HAL_CAN_MspInit+0xc4>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	4a21      	ldr	r2, [pc, #132]	@ (800058c <HAL_CAN_MspInit+0xc4>)
 8000508:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800050c:	6153      	str	r3, [r2, #20]
 800050e:	4b1f      	ldr	r3, [pc, #124]	@ (800058c <HAL_CAN_MspInit+0xc4>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800051a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800051e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000520:	2302      	movs	r3, #2
 8000522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	2300      	movs	r3, #0
 8000526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000528:	2303      	movs	r3, #3
 800052a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800052c:	2309      	movs	r3, #9
 800052e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	4619      	mov	r1, r3
 8000536:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800053a:	f001 f8b3 	bl	80016a4 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	2013      	movs	r0, #19
 8000544:	f001 f877 	bl	8001636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 8000548:	2013      	movs	r0, #19
 800054a:	f001 f890 	bl	800166e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2100      	movs	r1, #0
 8000552:	2014      	movs	r0, #20
 8000554:	f001 f86f 	bl	8001636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000558:	2014      	movs	r0, #20
 800055a:	f001 f888 	bl	800166e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 800055e:	2200      	movs	r2, #0
 8000560:	2100      	movs	r1, #0
 8000562:	2015      	movs	r0, #21
 8000564:	f001 f867 	bl	8001636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000568:	2015      	movs	r0, #21
 800056a:	f001 f880 	bl	800166e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	2100      	movs	r1, #0
 8000572:	2016      	movs	r0, #22
 8000574:	f001 f85f 	bl	8001636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 8000578:	2016      	movs	r0, #22
 800057a:	f001 f878 	bl	800166e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800057e:	bf00      	nop
 8000580:	3728      	adds	r7, #40	@ 0x28
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40006400 	.word	0x40006400
 800058c:	40021000 	.word	0x40021000

08000590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000594:	bf00      	nop
 8000596:	e7fd      	b.n	8000594 <NMI_Handler+0x4>

08000598 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800059c:	bf00      	nop
 800059e:	e7fd      	b.n	800059c <HardFault_Handler+0x4>

080005a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a4:	bf00      	nop
 80005a6:	e7fd      	b.n	80005a4 <MemManage_Handler+0x4>

080005a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <BusFault_Handler+0x4>

080005b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <UsageFault_Handler+0x4>

080005b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005e6:	f000 f8db 	bl	80007a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <USB_HP_CAN_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN_TX interrupts.
  */
void USB_HP_CAN_TX_IRQHandler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80005f4:	4802      	ldr	r0, [pc, #8]	@ (8000600 <USB_HP_CAN_TX_IRQHandler+0x10>)
 80005f6:	f000 fd14 	bl	8001022 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000098 	.word	0x20000098

08000604 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000608:	4802      	ldr	r0, [pc, #8]	@ (8000614 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800060a:	f000 fd0a 	bl	8001022 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000098 	.word	0x20000098

08000618 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN_RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800061c:	4802      	ldr	r0, [pc, #8]	@ (8000628 <CAN_RX1_IRQHandler+0x10>)
 800061e:	f000 fd00 	bl	8001022 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000098 	.word	0x20000098

0800062c <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN_SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000630:	4802      	ldr	r0, [pc, #8]	@ (800063c <CAN_SCE_IRQHandler+0x10>)
 8000632:	f000 fcf6 	bl	8001022 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000098 	.word	0x20000098

08000640 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000644:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000648:	f001 f9e6 	bl	8001a18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == 0)
 800064c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000650:	480d      	ldr	r0, [pc, #52]	@ (8000688 <EXTI15_10_IRQHandler+0x48>)
 8000652:	f001 f9b1 	bl	80019b8 <HAL_GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d112      	bne.n	8000682 <EXTI15_10_IRQHandler+0x42>
  {
	  if(TxData[0]==0x03)
 800065c:	4b0b      	ldr	r3, [pc, #44]	@ (800068c <EXTI15_10_IRQHandler+0x4c>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b03      	cmp	r3, #3
 8000662:	d102      	bne.n	800066a <EXTI15_10_IRQHandler+0x2a>
	  {
		  TxData[0]=0;
 8000664:	4b09      	ldr	r3, [pc, #36]	@ (800068c <EXTI15_10_IRQHandler+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 800066a:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <EXTI15_10_IRQHandler+0x50>)
 800066c:	4a07      	ldr	r2, [pc, #28]	@ (800068c <EXTI15_10_IRQHandler+0x4c>)
 800066e:	4909      	ldr	r1, [pc, #36]	@ (8000694 <EXTI15_10_IRQHandler+0x54>)
 8000670:	4809      	ldr	r0, [pc, #36]	@ (8000698 <EXTI15_10_IRQHandler+0x58>)
 8000672:	f000 fabe 	bl	8000bf2 <HAL_CAN_AddTxMessage>
	  TxData[0]++;
 8000676:	4b05      	ldr	r3, [pc, #20]	@ (800068c <EXTI15_10_IRQHandler+0x4c>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	3301      	adds	r3, #1
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4b03      	ldr	r3, [pc, #12]	@ (800068c <EXTI15_10_IRQHandler+0x4c>)
 8000680:	701a      	strb	r2, [r3, #0]
  }



  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	48000800 	.word	0x48000800
 800068c:	20000088 	.word	0x20000088
 8000690:	20000084 	.word	0x20000084
 8000694:	2000006c 	.word	0x2000006c
 8000698:	20000098 	.word	0x20000098

0800069c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006a0:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <SystemInit+0x20>)
 80006a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006a6:	4a05      	ldr	r2, [pc, #20]	@ (80006bc <SystemInit+0x20>)
 80006a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006f8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006c4:	f7ff ffea 	bl	800069c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c8:	480c      	ldr	r0, [pc, #48]	@ (80006fc <LoopForever+0x6>)
  ldr r1, =_edata
 80006ca:	490d      	ldr	r1, [pc, #52]	@ (8000700 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000704 <LoopForever+0xe>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d0:	e002      	b.n	80006d8 <LoopCopyDataInit>

080006d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d6:	3304      	adds	r3, #4

080006d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006dc:	d3f9      	bcc.n	80006d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006de:	4a0a      	ldr	r2, [pc, #40]	@ (8000708 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e0:	4c0a      	ldr	r4, [pc, #40]	@ (800070c <LoopForever+0x16>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e4:	e001      	b.n	80006ea <LoopFillZerobss>

080006e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e8:	3204      	adds	r2, #4

080006ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006ec:	d3fb      	bcc.n	80006e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ee:	f002 fbe3 	bl	8002eb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006f2:	f7ff fd6f 	bl	80001d4 <main>

080006f6 <LoopForever>:

LoopForever:
    b LoopForever
 80006f6:	e7fe      	b.n	80006f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000700:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000704:	08002f50 	.word	0x08002f50
  ldr r2, =_sbss
 8000708:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800070c:	200000c4 	.word	0x200000c4

08000710 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000710:	e7fe      	b.n	8000710 <ADC1_2_IRQHandler>
	...

08000714 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000718:	4b08      	ldr	r3, [pc, #32]	@ (800073c <HAL_Init+0x28>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a07      	ldr	r2, [pc, #28]	@ (800073c <HAL_Init+0x28>)
 800071e:	f043 0310 	orr.w	r3, r3, #16
 8000722:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000724:	2003      	movs	r0, #3
 8000726:	f000 ff7b 	bl	8001620 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800072a:	200f      	movs	r0, #15
 800072c:	f000 f808 	bl	8000740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000730:	f7ff fea6 	bl	8000480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000734:	2300      	movs	r3, #0
}
 8000736:	4618      	mov	r0, r3
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40022000 	.word	0x40022000

08000740 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <HAL_InitTick+0x54>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <HAL_InitTick+0x58>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4619      	mov	r1, r3
 8000752:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000756:	fbb3 f3f1 	udiv	r3, r3, r1
 800075a:	fbb2 f3f3 	udiv	r3, r2, r3
 800075e:	4618      	mov	r0, r3
 8000760:	f000 ff93 	bl	800168a <HAL_SYSTICK_Config>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	e00e      	b.n	800078c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2b0f      	cmp	r3, #15
 8000772:	d80a      	bhi.n	800078a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000774:	2200      	movs	r2, #0
 8000776:	6879      	ldr	r1, [r7, #4]
 8000778:	f04f 30ff 	mov.w	r0, #4294967295
 800077c:	f000 ff5b 	bl	8001636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000780:	4a06      	ldr	r2, [pc, #24]	@ (800079c <HAL_InitTick+0x5c>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000786:	2300      	movs	r3, #0
 8000788:	e000      	b.n	800078c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800078a:	2301      	movs	r3, #1
}
 800078c:	4618      	mov	r0, r3
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000000 	.word	0x20000000
 8000798:	20000008 	.word	0x20000008
 800079c:	20000004 	.word	0x20000004

080007a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <HAL_IncTick+0x20>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <HAL_IncTick+0x24>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4413      	add	r3, r2
 80007b0:	4a04      	ldr	r2, [pc, #16]	@ (80007c4 <HAL_IncTick+0x24>)
 80007b2:	6013      	str	r3, [r2, #0]
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	20000008 	.word	0x20000008
 80007c4:	200000c0 	.word	0x200000c0

080007c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80007cc:	4b03      	ldr	r3, [pc, #12]	@ (80007dc <HAL_GetTick+0x14>)
 80007ce:	681b      	ldr	r3, [r3, #0]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	200000c0 	.word	0x200000c0

080007e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d101      	bne.n	80007f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
 80007f0:	e0ed      	b.n	80009ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d102      	bne.n	8000804 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff fe62 	bl	80004c8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f042 0201 	orr.w	r2, r2, #1
 8000812:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000814:	f7ff ffd8 	bl	80007c8 <HAL_GetTick>
 8000818:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800081a:	e012      	b.n	8000842 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800081c:	f7ff ffd4 	bl	80007c8 <HAL_GetTick>
 8000820:	4602      	mov	r2, r0
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	2b0a      	cmp	r3, #10
 8000828:	d90b      	bls.n	8000842 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800082e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2205      	movs	r2, #5
 800083a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	e0c5      	b.n	80009ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	2b00      	cmp	r3, #0
 800084e:	d0e5      	beq.n	800081c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f022 0202 	bic.w	r2, r2, #2
 800085e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000860:	f7ff ffb2 	bl	80007c8 <HAL_GetTick>
 8000864:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000866:	e012      	b.n	800088e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000868:	f7ff ffae 	bl	80007c8 <HAL_GetTick>
 800086c:	4602      	mov	r2, r0
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	2b0a      	cmp	r3, #10
 8000874:	d90b      	bls.n	800088e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800087a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2205      	movs	r2, #5
 8000886:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
 800088c:	e09f      	b.n	80009ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	f003 0302 	and.w	r3, r3, #2
 8000898:	2b00      	cmp	r3, #0
 800089a:	d1e5      	bne.n	8000868 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	7e1b      	ldrb	r3, [r3, #24]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d108      	bne.n	80008b6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	e007      	b.n	80008c6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80008c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	7e5b      	ldrb	r3, [r3, #25]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d108      	bne.n	80008e0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	e007      	b.n	80008f0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80008ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	7e9b      	ldrb	r3, [r3, #26]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d108      	bne.n	800090a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f042 0220 	orr.w	r2, r2, #32
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	e007      	b.n	800091a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f022 0220 	bic.w	r2, r2, #32
 8000918:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	7edb      	ldrb	r3, [r3, #27]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d108      	bne.n	8000934 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f022 0210 	bic.w	r2, r2, #16
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	e007      	b.n	8000944 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f042 0210 	orr.w	r2, r2, #16
 8000942:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	7f1b      	ldrb	r3, [r3, #28]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d108      	bne.n	800095e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f042 0208 	orr.w	r2, r2, #8
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	e007      	b.n	800096e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f022 0208 	bic.w	r2, r2, #8
 800096c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	7f5b      	ldrb	r3, [r3, #29]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d108      	bne.n	8000988 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f042 0204 	orr.w	r2, r2, #4
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	e007      	b.n	8000998 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f022 0204 	bic.w	r2, r2, #4
 8000996:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	689a      	ldr	r2, [r3, #8]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	431a      	orrs	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	691b      	ldr	r3, [r3, #16]
 80009a6:	431a      	orrs	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	ea42 0103 	orr.w	r1, r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	1e5a      	subs	r2, r3, #1
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	430a      	orrs	r2, r1
 80009bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2200      	movs	r2, #0
 80009c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2201      	movs	r2, #1
 80009c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b087      	sub	sp, #28
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
 80009de:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009ec:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80009ee:	7cfb      	ldrb	r3, [r7, #19]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d003      	beq.n	80009fc <HAL_CAN_ConfigFilter+0x26>
 80009f4:	7cfb      	ldrb	r3, [r7, #19]
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	f040 80aa 	bne.w	8000b50 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000a02:	f043 0201 	orr.w	r2, r3, #1
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	695b      	ldr	r3, [r3, #20]
 8000a10:	f003 031f 	and.w	r3, r3, #31
 8000a14:	2201      	movs	r2, #1
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	43db      	mvns	r3, r3
 8000a26:	401a      	ands	r2, r3
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d123      	bne.n	8000a7e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	401a      	ands	r2, r3
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a54:	683a      	ldr	r2, [r7, #0]
 8000a56:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a58:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	3248      	adds	r2, #72	@ 0x48
 8000a5e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a72:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a74:	6979      	ldr	r1, [r7, #20]
 8000a76:	3348      	adds	r3, #72	@ 0x48
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	440b      	add	r3, r1
 8000a7c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d122      	bne.n	8000acc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	431a      	orrs	r2, r3
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000aa2:	683a      	ldr	r2, [r7, #0]
 8000aa4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000aa6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	3248      	adds	r2, #72	@ 0x48
 8000aac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ac0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ac2:	6979      	ldr	r1, [r7, #20]
 8000ac4:	3348      	adds	r3, #72	@ 0x48
 8000ac6:	00db      	lsls	r3, r3, #3
 8000ac8:	440b      	add	r3, r1
 8000aca:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d109      	bne.n	8000ae8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	43db      	mvns	r3, r3
 8000ade:	401a      	ands	r2, r3
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000ae6:	e007      	b.n	8000af8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	431a      	orrs	r2, r3
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	691b      	ldr	r3, [r3, #16]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d109      	bne.n	8000b14 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	401a      	ands	r2, r3
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000b12:	e007      	b.n	8000b24 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	431a      	orrs	r2, r3
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	6a1b      	ldr	r3, [r3, #32]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d107      	bne.n	8000b3c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	431a      	orrs	r2, r3
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b42:	f023 0201 	bic.w	r2, r3, #1
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	e006      	b.n	8000b5e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b54:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
  }
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	371c      	adds	r7, #28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b084      	sub	sp, #16
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d12e      	bne.n	8000bdc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2202      	movs	r2, #2
 8000b82:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f022 0201 	bic.w	r2, r2, #1
 8000b94:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000b96:	f7ff fe17 	bl	80007c8 <HAL_GetTick>
 8000b9a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b9c:	e012      	b.n	8000bc4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b9e:	f7ff fe13 	bl	80007c8 <HAL_GetTick>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	2b0a      	cmp	r3, #10
 8000baa:	d90b      	bls.n	8000bc4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bb0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2205      	movs	r2, #5
 8000bbc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e012      	b.n	8000bea <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d1e5      	bne.n	8000b9e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e006      	b.n	8000bea <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
  }
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b089      	sub	sp, #36	@ 0x24
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	60f8      	str	r0, [r7, #12]
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	607a      	str	r2, [r7, #4]
 8000bfe:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c06:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c10:	7ffb      	ldrb	r3, [r7, #31]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d003      	beq.n	8000c1e <HAL_CAN_AddTxMessage+0x2c>
 8000c16:	7ffb      	ldrb	r3, [r7, #31]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	f040 80ad 	bne.w	8000d78 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d10a      	bne.n	8000c3e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d105      	bne.n	8000c3e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	f000 8095 	beq.w	8000d68 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	0e1b      	lsrs	r3, r3, #24
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000c48:	2201      	movs	r2, #1
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	409a      	lsls	r2, r3
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10d      	bne.n	8000c76 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c64:	68f9      	ldr	r1, [r7, #12]
 8000c66:	6809      	ldr	r1, [r1, #0]
 8000c68:	431a      	orrs	r2, r3
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	3318      	adds	r3, #24
 8000c6e:	011b      	lsls	r3, r3, #4
 8000c70:	440b      	add	r3, r1
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	e00f      	b.n	8000c96 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c80:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c86:	68f9      	ldr	r1, [r7, #12]
 8000c88:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000c8a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	3318      	adds	r3, #24
 8000c90:	011b      	lsls	r3, r3, #4
 8000c92:	440b      	add	r3, r1
 8000c94:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	6819      	ldr	r1, [r3, #0]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	691a      	ldr	r2, [r3, #16]
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	3318      	adds	r3, #24
 8000ca2:	011b      	lsls	r3, r3, #4
 8000ca4:	440b      	add	r3, r1
 8000ca6:	3304      	adds	r3, #4
 8000ca8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	7d1b      	ldrb	r3, [r3, #20]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d111      	bne.n	8000cd6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	3318      	adds	r3, #24
 8000cba:	011b      	lsls	r3, r3, #4
 8000cbc:	4413      	add	r3, r2
 8000cbe:	3304      	adds	r3, #4
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	6811      	ldr	r1, [r2, #0]
 8000cc6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	3318      	adds	r3, #24
 8000cce:	011b      	lsls	r3, r3, #4
 8000cd0:	440b      	add	r3, r1
 8000cd2:	3304      	adds	r3, #4
 8000cd4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3307      	adds	r3, #7
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	061a      	lsls	r2, r3, #24
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3306      	adds	r3, #6
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	041b      	lsls	r3, r3, #16
 8000ce6:	431a      	orrs	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3305      	adds	r3, #5
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	021b      	lsls	r3, r3, #8
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	3204      	adds	r2, #4
 8000cf6:	7812      	ldrb	r2, [r2, #0]
 8000cf8:	4610      	mov	r0, r2
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	6811      	ldr	r1, [r2, #0]
 8000cfe:	ea43 0200 	orr.w	r2, r3, r0
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	011b      	lsls	r3, r3, #4
 8000d06:	440b      	add	r3, r1
 8000d08:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000d0c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3303      	adds	r3, #3
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	061a      	lsls	r2, r3, #24
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3302      	adds	r3, #2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	041b      	lsls	r3, r3, #16
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3301      	adds	r3, #1
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	021b      	lsls	r3, r3, #8
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	7812      	ldrb	r2, [r2, #0]
 8000d2e:	4610      	mov	r0, r2
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	6811      	ldr	r1, [r2, #0]
 8000d34:	ea43 0200 	orr.w	r2, r3, r0
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	011b      	lsls	r3, r3, #4
 8000d3c:	440b      	add	r3, r1
 8000d3e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000d42:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	3318      	adds	r3, #24
 8000d4c:	011b      	lsls	r3, r3, #4
 8000d4e:	4413      	add	r3, r2
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	6811      	ldr	r1, [r2, #0]
 8000d56:	f043 0201 	orr.w	r2, r3, #1
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	3318      	adds	r3, #24
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	440b      	add	r3, r1
 8000d62:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000d64:	2300      	movs	r3, #0
 8000d66:	e00e      	b.n	8000d86 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d6c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e006      	b.n	8000d86 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d7c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
  }
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	@ 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000d92:	b480      	push	{r7}
 8000d94:	b087      	sub	sp, #28
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	60f8      	str	r0, [r7, #12]
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000da6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000da8:	7dfb      	ldrb	r3, [r7, #23]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d003      	beq.n	8000db6 <HAL_CAN_GetRxMessage+0x24>
 8000dae:	7dfb      	ldrb	r3, [r7, #23]
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	f040 8103 	bne.w	8000fbc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d10e      	bne.n	8000dda <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d116      	bne.n	8000df8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e0f7      	b.n	8000fca <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	691b      	ldr	r3, [r3, #16]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d107      	bne.n	8000df8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e0e8      	b.n	8000fca <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	331b      	adds	r3, #27
 8000e00:	011b      	lsls	r3, r3, #4
 8000e02:	4413      	add	r3, r2
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0204 	and.w	r2, r3, #4
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d10c      	bne.n	8000e30 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	331b      	adds	r3, #27
 8000e1e:	011b      	lsls	r3, r3, #4
 8000e20:	4413      	add	r3, r2
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	0d5b      	lsrs	r3, r3, #21
 8000e26:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	e00b      	b.n	8000e48 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	331b      	adds	r3, #27
 8000e38:	011b      	lsls	r3, r3, #4
 8000e3a:	4413      	add	r3, r2
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	08db      	lsrs	r3, r3, #3
 8000e40:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	331b      	adds	r3, #27
 8000e50:	011b      	lsls	r3, r3, #4
 8000e52:	4413      	add	r3, r2
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0202 	and.w	r2, r3, #2
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	331b      	adds	r3, #27
 8000e66:	011b      	lsls	r3, r3, #4
 8000e68:	4413      	add	r3, r2
 8000e6a:	3304      	adds	r3, #4
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 0308 	and.w	r3, r3, #8
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2208      	movs	r2, #8
 8000e7a:	611a      	str	r2, [r3, #16]
 8000e7c:	e00b      	b.n	8000e96 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	331b      	adds	r3, #27
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	4413      	add	r3, r2
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 020f 	and.w	r2, r3, #15
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	331b      	adds	r3, #27
 8000e9e:	011b      	lsls	r3, r3, #4
 8000ea0:	4413      	add	r3, r2
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	0a1b      	lsrs	r3, r3, #8
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	331b      	adds	r3, #27
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	4413      	add	r3, r2
 8000eba:	3304      	adds	r3, #4
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	0c1b      	lsrs	r3, r3, #16
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	011b      	lsls	r3, r3, #4
 8000ece:	4413      	add	r3, r2
 8000ed0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	011b      	lsls	r3, r3, #4
 8000ee4:	4413      	add	r3, r2
 8000ee6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	0a1a      	lsrs	r2, r3, #8
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	011b      	lsls	r3, r3, #4
 8000efe:	4413      	add	r3, r2
 8000f00:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	0c1a      	lsrs	r2, r3, #16
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	4413      	add	r3, r2
 8000f1a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	0e1a      	lsrs	r2, r3, #24
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	3303      	adds	r3, #3
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	011b      	lsls	r3, r3, #4
 8000f32:	4413      	add	r3, r2
 8000f34:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	011b      	lsls	r3, r3, #4
 8000f4a:	4413      	add	r3, r2
 8000f4c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	0a1a      	lsrs	r2, r3, #8
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	3305      	adds	r3, #5
 8000f58:	b2d2      	uxtb	r2, r2
 8000f5a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	4413      	add	r3, r2
 8000f66:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	0c1a      	lsrs	r2, r3, #16
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	3306      	adds	r3, #6
 8000f72:	b2d2      	uxtb	r2, r2
 8000f74:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	011b      	lsls	r3, r3, #4
 8000f7e:	4413      	add	r3, r2
 8000f80:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	0e1a      	lsrs	r2, r3, #24
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	3307      	adds	r3, #7
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d108      	bne.n	8000fa8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	68da      	ldr	r2, [r3, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f042 0220 	orr.w	r2, r2, #32
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	e007      	b.n	8000fb8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	691a      	ldr	r2, [r3, #16]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f042 0220 	orr.w	r2, r2, #32
 8000fb6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	e006      	b.n	8000fca <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
  }
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b085      	sub	sp, #20
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fe6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d002      	beq.n	8000ff4 <HAL_CAN_ActivateNotification+0x1e>
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d109      	bne.n	8001008 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6959      	ldr	r1, [r3, #20]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	430a      	orrs	r2, r1
 8001002:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001004:	2300      	movs	r3, #0
 8001006:	e006      	b.n	8001016 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800100c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
  }
}
 8001016:	4618      	mov	r0, r3
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b08a      	sub	sp, #40	@ 0x28
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800105e:	6a3b      	ldr	r3, [r7, #32]
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	2b00      	cmp	r3, #0
 8001066:	d07c      	beq.n	8001162 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	2b00      	cmp	r3, #0
 8001070:	d023      	beq.n	80010ba <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2201      	movs	r2, #1
 8001078:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f983 	bl	8001390 <HAL_CAN_TxMailbox0CompleteCallback>
 800108a:	e016      	b.n	80010ba <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	f003 0304 	and.w	r3, r3, #4
 8001092:	2b00      	cmp	r3, #0
 8001094:	d004      	beq.n	80010a0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001098:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
 800109e:	e00c      	b.n	80010ba <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d004      	beq.n	80010b4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80010aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80010b2:	e002      	b.n	80010ba <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f989 	bl	80013cc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d024      	beq.n	800110e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f000 f963 	bl	80013a4 <HAL_CAN_TxMailbox1CompleteCallback>
 80010de:	e016      	b.n	800110e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d004      	beq.n	80010f4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80010ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80010f2:	e00c      	b.n	800110e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d004      	beq.n	8001108 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80010fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001100:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
 8001106:	e002      	b.n	800110e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 f969 	bl	80013e0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d024      	beq.n	8001162 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001120:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f000 f943 	bl	80013b8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001132:	e016      	b.n	8001162 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d004      	beq.n	8001148 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800113e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001140:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001144:	627b      	str	r3, [r7, #36]	@ 0x24
 8001146:	e00c      	b.n	8001162 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001158:	627b      	str	r3, [r7, #36]	@ 0x24
 800115a:	e002      	b.n	8001162 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f949 	bl	80013f4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001162:	6a3b      	ldr	r3, [r7, #32]
 8001164:	f003 0308 	and.w	r3, r3, #8
 8001168:	2b00      	cmp	r3, #0
 800116a:	d00c      	beq.n	8001186 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	f003 0310 	and.w	r3, r3, #16
 8001172:	2b00      	cmp	r3, #0
 8001174:	d007      	beq.n	8001186 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001178:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800117c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2210      	movs	r2, #16
 8001184:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001186:	6a3b      	ldr	r3, [r7, #32]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00b      	beq.n	80011a8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	2b00      	cmp	r3, #0
 8001198:	d006      	beq.n	80011a8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2208      	movs	r2, #8
 80011a0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 f930 	bl	8001408 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d009      	beq.n	80011c6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d002      	beq.n	80011c6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff f945 	bl	8000450 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80011c6:	6a3b      	ldr	r3, [r7, #32]
 80011c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d00c      	beq.n	80011ea <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	f003 0310 	and.w	r3, r3, #16
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d007      	beq.n	80011ea <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80011da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011e0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2210      	movs	r2, #16
 80011e8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	f003 0320 	and.w	r3, r3, #32
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00b      	beq.n	800120c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d006      	beq.n	800120c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2208      	movs	r2, #8
 8001204:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 f912 	bl	8001430 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800120c:	6a3b      	ldr	r3, [r7, #32]
 800120e:	f003 0310 	and.w	r3, r3, #16
 8001212:	2b00      	cmp	r3, #0
 8001214:	d009      	beq.n	800122a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	691b      	ldr	r3, [r3, #16]
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f000 f8f9 	bl	800141c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800122a:	6a3b      	ldr	r3, [r7, #32]
 800122c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00b      	beq.n	800124c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f003 0310 	and.w	r3, r3, #16
 800123a:	2b00      	cmp	r3, #0
 800123c:	d006      	beq.n	800124c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2210      	movs	r2, #16
 8001244:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 f8fc 	bl	8001444 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800124c:	6a3b      	ldr	r3, [r7, #32]
 800124e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d00b      	beq.n	800126e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	2b00      	cmp	r3, #0
 800125e:	d006      	beq.n	800126e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2208      	movs	r2, #8
 8001266:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 f8f5 	bl	8001458 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d07b      	beq.n	8001370 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	2b00      	cmp	r3, #0
 8001280:	d072      	beq.n	8001368 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001288:	2b00      	cmp	r3, #0
 800128a:	d008      	beq.n	800129e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d008      	beq.n	80012ba <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80012b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d008      	beq.n	80012d6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80012ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d0:	f043 0304 	orr.w	r3, r3, #4
 80012d4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012d6:	6a3b      	ldr	r3, [r7, #32]
 80012d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d043      	beq.n	8001368 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d03e      	beq.n	8001368 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80012f0:	2b60      	cmp	r3, #96	@ 0x60
 80012f2:	d02b      	beq.n	800134c <HAL_CAN_IRQHandler+0x32a>
 80012f4:	2b60      	cmp	r3, #96	@ 0x60
 80012f6:	d82e      	bhi.n	8001356 <HAL_CAN_IRQHandler+0x334>
 80012f8:	2b50      	cmp	r3, #80	@ 0x50
 80012fa:	d022      	beq.n	8001342 <HAL_CAN_IRQHandler+0x320>
 80012fc:	2b50      	cmp	r3, #80	@ 0x50
 80012fe:	d82a      	bhi.n	8001356 <HAL_CAN_IRQHandler+0x334>
 8001300:	2b40      	cmp	r3, #64	@ 0x40
 8001302:	d019      	beq.n	8001338 <HAL_CAN_IRQHandler+0x316>
 8001304:	2b40      	cmp	r3, #64	@ 0x40
 8001306:	d826      	bhi.n	8001356 <HAL_CAN_IRQHandler+0x334>
 8001308:	2b30      	cmp	r3, #48	@ 0x30
 800130a:	d010      	beq.n	800132e <HAL_CAN_IRQHandler+0x30c>
 800130c:	2b30      	cmp	r3, #48	@ 0x30
 800130e:	d822      	bhi.n	8001356 <HAL_CAN_IRQHandler+0x334>
 8001310:	2b10      	cmp	r3, #16
 8001312:	d002      	beq.n	800131a <HAL_CAN_IRQHandler+0x2f8>
 8001314:	2b20      	cmp	r3, #32
 8001316:	d005      	beq.n	8001324 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001318:	e01d      	b.n	8001356 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131c:	f043 0308 	orr.w	r3, r3, #8
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001322:	e019      	b.n	8001358 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001326:	f043 0310 	orr.w	r3, r3, #16
 800132a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800132c:	e014      	b.n	8001358 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800132e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001330:	f043 0320 	orr.w	r3, r3, #32
 8001334:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001336:	e00f      	b.n	8001358 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001340:	e00a      	b.n	8001358 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001348:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800134a:	e005      	b.n	8001358 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800134c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001352:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001354:	e000      	b.n	8001358 <HAL_CAN_IRQHandler+0x336>
            break;
 8001356:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	699a      	ldr	r2, [r3, #24]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001366:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2204      	movs	r2, #4
 800136e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001372:	2b00      	cmp	r3, #0
 8001374:	d008      	beq.n	8001388 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800137a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137c:	431a      	orrs	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f872 	bl	800146c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001388:	bf00      	nop
 800138a:	3728      	adds	r7, #40	@ 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001490:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800149c:	4013      	ands	r3, r2
 800149e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b2:	4a04      	ldr	r2, [pc, #16]	@ (80014c4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	60d3      	str	r3, [r2, #12]
}
 80014b8:	bf00      	nop
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014cc:	4b04      	ldr	r3, [pc, #16]	@ (80014e0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	f003 0307 	and.w	r3, r3, #7
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	db0b      	blt.n	800150e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	f003 021f 	and.w	r2, r3, #31
 80014fc:	4907      	ldr	r1, [pc, #28]	@ (800151c <__NVIC_EnableIRQ+0x38>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	095b      	lsrs	r3, r3, #5
 8001504:	2001      	movs	r0, #1
 8001506:	fa00 f202 	lsl.w	r2, r0, r2
 800150a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000e100 	.word	0xe000e100

08001520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	db0a      	blt.n	800154a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	b2da      	uxtb	r2, r3
 8001538:	490c      	ldr	r1, [pc, #48]	@ (800156c <__NVIC_SetPriority+0x4c>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	0112      	lsls	r2, r2, #4
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	440b      	add	r3, r1
 8001544:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001548:	e00a      	b.n	8001560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4908      	ldr	r1, [pc, #32]	@ (8001570 <__NVIC_SetPriority+0x50>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	3b04      	subs	r3, #4
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	440b      	add	r3, r1
 800155e:	761a      	strb	r2, [r3, #24]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000e100 	.word	0xe000e100
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	@ 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f1c3 0307 	rsb	r3, r3, #7
 800158e:	2b04      	cmp	r3, #4
 8001590:	bf28      	it	cs
 8001592:	2304      	movcs	r3, #4
 8001594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3304      	adds	r3, #4
 800159a:	2b06      	cmp	r3, #6
 800159c:	d902      	bls.n	80015a4 <NVIC_EncodePriority+0x30>
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3b03      	subs	r3, #3
 80015a2:	e000      	b.n	80015a6 <NVIC_EncodePriority+0x32>
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43da      	mvns	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	401a      	ands	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43d9      	mvns	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	4313      	orrs	r3, r2
         );
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3724      	adds	r7, #36	@ 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015ec:	d301      	bcc.n	80015f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00f      	b.n	8001612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f2:	4a0a      	ldr	r2, [pc, #40]	@ (800161c <SysTick_Config+0x40>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fa:	210f      	movs	r1, #15
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f7ff ff8e 	bl	8001520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001604:	4b05      	ldr	r3, [pc, #20]	@ (800161c <SysTick_Config+0x40>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160a:	4b04      	ldr	r3, [pc, #16]	@ (800161c <SysTick_Config+0x40>)
 800160c:	2207      	movs	r2, #7
 800160e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	e000e010 	.word	0xe000e010

08001620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff29 	bl	8001480 <__NVIC_SetPriorityGrouping>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001648:	f7ff ff3e 	bl	80014c8 <__NVIC_GetPriorityGrouping>
 800164c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	6978      	ldr	r0, [r7, #20]
 8001654:	f7ff ff8e 	bl	8001574 <NVIC_EncodePriority>
 8001658:	4602      	mov	r2, r0
 800165a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff5d 	bl	8001520 <__NVIC_SetPriority>
}
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff31 	bl	80014e4 <__NVIC_EnableIRQ>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ffa2 	bl	80015dc <SysTick_Config>
 8001698:	4603      	mov	r3, r0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b087      	sub	sp, #28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b2:	e160      	b.n	8001976 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2101      	movs	r1, #1
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	4013      	ands	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 8152 	beq.w	8001970 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d005      	beq.n	80016e4 <HAL_GPIO_Init+0x40>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d130      	bne.n	8001746 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2203      	movs	r2, #3
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800171a:	2201      	movs	r2, #1
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	091b      	lsrs	r3, r3, #4
 8001730:	f003 0201 	and.w	r2, r3, #1
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b03      	cmp	r3, #3
 8001750:	d017      	beq.n	8001782 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	2203      	movs	r2, #3
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d123      	bne.n	80017d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	08da      	lsrs	r2, r3, #3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3208      	adds	r2, #8
 8001796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	220f      	movs	r2, #15
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	691a      	ldr	r2, [r3, #16]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	08da      	lsrs	r2, r3, #3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3208      	adds	r2, #8
 80017d0:	6939      	ldr	r1, [r7, #16]
 80017d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	2203      	movs	r2, #3
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0203 	and.w	r2, r3, #3
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 80ac 	beq.w	8001970 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001818:	4b5e      	ldr	r3, [pc, #376]	@ (8001994 <HAL_GPIO_Init+0x2f0>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	4a5d      	ldr	r2, [pc, #372]	@ (8001994 <HAL_GPIO_Init+0x2f0>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6193      	str	r3, [r2, #24]
 8001824:	4b5b      	ldr	r3, [pc, #364]	@ (8001994 <HAL_GPIO_Init+0x2f0>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001830:	4a59      	ldr	r2, [pc, #356]	@ (8001998 <HAL_GPIO_Init+0x2f4>)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	089b      	lsrs	r3, r3, #2
 8001836:	3302      	adds	r3, #2
 8001838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	220f      	movs	r2, #15
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800185a:	d025      	beq.n	80018a8 <HAL_GPIO_Init+0x204>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a4f      	ldr	r2, [pc, #316]	@ (800199c <HAL_GPIO_Init+0x2f8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d01f      	beq.n	80018a4 <HAL_GPIO_Init+0x200>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a4e      	ldr	r2, [pc, #312]	@ (80019a0 <HAL_GPIO_Init+0x2fc>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d019      	beq.n	80018a0 <HAL_GPIO_Init+0x1fc>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a4d      	ldr	r2, [pc, #308]	@ (80019a4 <HAL_GPIO_Init+0x300>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d013      	beq.n	800189c <HAL_GPIO_Init+0x1f8>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a4c      	ldr	r2, [pc, #304]	@ (80019a8 <HAL_GPIO_Init+0x304>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d00d      	beq.n	8001898 <HAL_GPIO_Init+0x1f4>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a4b      	ldr	r2, [pc, #300]	@ (80019ac <HAL_GPIO_Init+0x308>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d007      	beq.n	8001894 <HAL_GPIO_Init+0x1f0>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a4a      	ldr	r2, [pc, #296]	@ (80019b0 <HAL_GPIO_Init+0x30c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d101      	bne.n	8001890 <HAL_GPIO_Init+0x1ec>
 800188c:	2306      	movs	r3, #6
 800188e:	e00c      	b.n	80018aa <HAL_GPIO_Init+0x206>
 8001890:	2307      	movs	r3, #7
 8001892:	e00a      	b.n	80018aa <HAL_GPIO_Init+0x206>
 8001894:	2305      	movs	r3, #5
 8001896:	e008      	b.n	80018aa <HAL_GPIO_Init+0x206>
 8001898:	2304      	movs	r3, #4
 800189a:	e006      	b.n	80018aa <HAL_GPIO_Init+0x206>
 800189c:	2303      	movs	r3, #3
 800189e:	e004      	b.n	80018aa <HAL_GPIO_Init+0x206>
 80018a0:	2302      	movs	r3, #2
 80018a2:	e002      	b.n	80018aa <HAL_GPIO_Init+0x206>
 80018a4:	2301      	movs	r3, #1
 80018a6:	e000      	b.n	80018aa <HAL_GPIO_Init+0x206>
 80018a8:	2300      	movs	r3, #0
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	f002 0203 	and.w	r2, r2, #3
 80018b0:	0092      	lsls	r2, r2, #2
 80018b2:	4093      	lsls	r3, r2
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018ba:	4937      	ldr	r1, [pc, #220]	@ (8001998 <HAL_GPIO_Init+0x2f4>)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	089b      	lsrs	r3, r3, #2
 80018c0:	3302      	adds	r3, #2
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018c8:	4b3a      	ldr	r3, [pc, #232]	@ (80019b4 <HAL_GPIO_Init+0x310>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018ec:	4a31      	ldr	r2, [pc, #196]	@ (80019b4 <HAL_GPIO_Init+0x310>)
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018f2:	4b30      	ldr	r3, [pc, #192]	@ (80019b4 <HAL_GPIO_Init+0x310>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4313      	orrs	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001916:	4a27      	ldr	r2, [pc, #156]	@ (80019b4 <HAL_GPIO_Init+0x310>)
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800191c:	4b25      	ldr	r3, [pc, #148]	@ (80019b4 <HAL_GPIO_Init+0x310>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	43db      	mvns	r3, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001940:	4a1c      	ldr	r2, [pc, #112]	@ (80019b4 <HAL_GPIO_Init+0x310>)
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001946:	4b1b      	ldr	r3, [pc, #108]	@ (80019b4 <HAL_GPIO_Init+0x310>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	43db      	mvns	r3, r3
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4013      	ands	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4313      	orrs	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800196a:	4a12      	ldr	r2, [pc, #72]	@ (80019b4 <HAL_GPIO_Init+0x310>)
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	3301      	adds	r3, #1
 8001974:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	fa22 f303 	lsr.w	r3, r2, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	f47f ae97 	bne.w	80016b4 <HAL_GPIO_Init+0x10>
  }
}
 8001986:	bf00      	nop
 8001988:	bf00      	nop
 800198a:	371c      	adds	r7, #28
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	40021000 	.word	0x40021000
 8001998:	40010000 	.word	0x40010000
 800199c:	48000400 	.word	0x48000400
 80019a0:	48000800 	.word	0x48000800
 80019a4:	48000c00 	.word	0x48000c00
 80019a8:	48001000 	.word	0x48001000
 80019ac:	48001400 	.word	0x48001400
 80019b0:	48001800 	.word	0x48001800
 80019b4:	40010400 	.word	0x40010400

080019b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	691a      	ldr	r2, [r3, #16]
 80019c8:	887b      	ldrh	r3, [r7, #2]
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d002      	beq.n	80019d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019d0:	2301      	movs	r3, #1
 80019d2:	73fb      	strb	r3, [r7, #15]
 80019d4:	e001      	b.n	80019da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019da:	7bfb      	ldrb	r3, [r7, #15]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	807b      	strh	r3, [r7, #2]
 80019f4:	4613      	mov	r3, r2
 80019f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019f8:	787b      	ldrb	r3, [r7, #1]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019fe:	887a      	ldrh	r2, [r7, #2]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a04:	e002      	b.n	8001a0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a06:	887a      	ldrh	r2, [r7, #2]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a22:	4b08      	ldr	r3, [pc, #32]	@ (8001a44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a24:	695a      	ldr	r2, [r3, #20]
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d006      	beq.n	8001a3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a2e:	4a05      	ldr	r2, [pc, #20]	@ (8001a44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a30:	88fb      	ldrh	r3, [r7, #6]
 8001a32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f806 	bl	8001a48 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40010400 	.word	0x40010400

08001a48 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a70:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a76:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d102      	bne.n	8001a86 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	f001 b83a 	b.w	8002afa <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a8a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 816f 	beq.w	8001d7a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a9c:	4bb5      	ldr	r3, [pc, #724]	@ (8001d74 <HAL_RCC_OscConfig+0x314>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d00c      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aa8:	4bb2      	ldr	r3, [pc, #712]	@ (8001d74 <HAL_RCC_OscConfig+0x314>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d15c      	bne.n	8001b6e <HAL_RCC_OscConfig+0x10e>
 8001ab4:	4baf      	ldr	r3, [pc, #700]	@ (8001d74 <HAL_RCC_OscConfig+0x314>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001abc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ac0:	d155      	bne.n	8001b6e <HAL_RCC_OscConfig+0x10e>
 8001ac2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ac6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ad6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ada:	fab3 f383 	clz	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	095b      	lsrs	r3, r3, #5
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d102      	bne.n	8001af4 <HAL_RCC_OscConfig+0x94>
 8001aee:	4ba1      	ldr	r3, [pc, #644]	@ (8001d74 <HAL_RCC_OscConfig+0x314>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	e015      	b.n	8001b20 <HAL_RCC_OscConfig+0xc0>
 8001af4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001af8:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001b00:	fa93 f3a3 	rbit	r3, r3
 8001b04:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001b08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b0c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001b10:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001b14:	fa93 f3a3 	rbit	r3, r3
 8001b18:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001b1c:	4b95      	ldr	r3, [pc, #596]	@ (8001d74 <HAL_RCC_OscConfig+0x314>)
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b20:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b24:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001b28:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001b2c:	fa92 f2a2 	rbit	r2, r2
 8001b30:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001b34:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001b38:	fab2 f282 	clz	r2, r2
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	f042 0220 	orr.w	r2, r2, #32
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	f002 021f 	and.w	r2, r2, #31
 8001b48:	2101      	movs	r1, #1
 8001b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 8111 	beq.w	8001d78 <HAL_RCC_OscConfig+0x318>
 8001b56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b5a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f040 8108 	bne.w	8001d78 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	f000 bfc6 	b.w	8002afa <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b72:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b7e:	d106      	bne.n	8001b8e <HAL_RCC_OscConfig+0x12e>
 8001b80:	4b7c      	ldr	r3, [pc, #496]	@ (8001d74 <HAL_RCC_OscConfig+0x314>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a7b      	ldr	r2, [pc, #492]	@ (8001d74 <HAL_RCC_OscConfig+0x314>)
 8001b86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	e036      	b.n	8001bfc <HAL_RCC_OscConfig+0x19c>
 8001b8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b92:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x158>
 8001b9e:	4b75      	ldr	r3, [pc, #468]	@ (8001d74 <HAL_RCC_OscConfig+0x314>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a74      	ldr	r2, [pc, #464]	@ (8001d74 <HAL_RCC_OscConfig+0x314>)
 8001ba4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	4b72      	ldr	r3, [pc, #456]	@ (8001d74 <HAL_RCC_OscConfig+0x314>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a71      	ldr	r2, [pc, #452]	@ (8001d74 <HAL_RCC_OscConfig+0x314>)
 8001bb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e021      	b.n	8001bfc <HAL_RCC_OscConfig+0x19c>
 8001bb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bbc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bc8:	d10c      	bne.n	8001be4 <HAL_RCC_OscConfig+0x184>
 8001bca:	4b6a      	ldr	r3, [pc, #424]	@ (8001d74 <HAL_RCC_OscConfig+0x314>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a69      	ldr	r2, [pc, #420]	@ (8001d74 <HAL_RCC_OscConfig+0x314>)
 8001bd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	4b67      	ldr	r3, [pc, #412]	@ (8001d74 <HAL_RCC_OscConfig+0x314>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a66      	ldr	r2, [pc, #408]	@ (8001d74 <HAL_RCC_OscConfig+0x314>)
 8001bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e00b      	b.n	8001bfc <HAL_RCC_OscConfig+0x19c>
 8001be4:	4b63      	ldr	r3, [pc, #396]	@ (8001d74 <HAL_RCC_OscConfig+0x314>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a62      	ldr	r2, [pc, #392]	@ (8001d74 <HAL_RCC_OscConfig+0x314>)
 8001bea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	4b60      	ldr	r3, [pc, #384]	@ (8001d74 <HAL_RCC_OscConfig+0x314>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a5f      	ldr	r2, [pc, #380]	@ (8001d74 <HAL_RCC_OscConfig+0x314>)
 8001bf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bfa:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bfc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c00:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d059      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7fe fddc 	bl	80007c8 <HAL_GetTick>
 8001c10:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c14:	e00a      	b.n	8001c2c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c16:	f7fe fdd7 	bl	80007c8 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b64      	cmp	r3, #100	@ 0x64
 8001c24:	d902      	bls.n	8001c2c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	f000 bf67 	b.w	8002afa <HAL_RCC_OscConfig+0x109a>
 8001c2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c30:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001c38:	fa93 f3a3 	rbit	r3, r3
 8001c3c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001c40:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c44:	fab3 f383 	clz	r3, r3
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d102      	bne.n	8001c5e <HAL_RCC_OscConfig+0x1fe>
 8001c58:	4b46      	ldr	r3, [pc, #280]	@ (8001d74 <HAL_RCC_OscConfig+0x314>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	e015      	b.n	8001c8a <HAL_RCC_OscConfig+0x22a>
 8001c5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c62:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c66:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001c6a:	fa93 f3a3 	rbit	r3, r3
 8001c6e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001c72:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c76:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001c7a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001c7e:	fa93 f3a3 	rbit	r3, r3
 8001c82:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001c86:	4b3b      	ldr	r3, [pc, #236]	@ (8001d74 <HAL_RCC_OscConfig+0x314>)
 8001c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c8e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001c92:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001c96:	fa92 f2a2 	rbit	r2, r2
 8001c9a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001c9e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001ca2:	fab2 f282 	clz	r2, r2
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	f042 0220 	orr.w	r2, r2, #32
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	f002 021f 	and.w	r2, r2, #31
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0ab      	beq.n	8001c16 <HAL_RCC_OscConfig+0x1b6>
 8001cbe:	e05c      	b.n	8001d7a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7fe fd82 	bl	80007c8 <HAL_GetTick>
 8001cc4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc8:	e00a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cca:	f7fe fd7d 	bl	80007c8 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	@ 0x64
 8001cd8:	d902      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	f000 bf0d 	b.w	8002afa <HAL_RCC_OscConfig+0x109a>
 8001ce0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ce4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001cf4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf8:	fab3 f383 	clz	r3, r3
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d102      	bne.n	8001d12 <HAL_RCC_OscConfig+0x2b2>
 8001d0c:	4b19      	ldr	r3, [pc, #100]	@ (8001d74 <HAL_RCC_OscConfig+0x314>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	e015      	b.n	8001d3e <HAL_RCC_OscConfig+0x2de>
 8001d12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d16:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001d26:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d2a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001d2e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001d32:	fa93 f3a3 	rbit	r3, r3
 8001d36:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d74 <HAL_RCC_OscConfig+0x314>)
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d42:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001d46:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001d4a:	fa92 f2a2 	rbit	r2, r2
 8001d4e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001d52:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001d56:	fab2 f282 	clz	r2, r2
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	f042 0220 	orr.w	r2, r2, #32
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	f002 021f 	and.w	r2, r2, #31
 8001d66:	2101      	movs	r1, #1
 8001d68:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1ab      	bne.n	8001cca <HAL_RCC_OscConfig+0x26a>
 8001d72:	e002      	b.n	8001d7a <HAL_RCC_OscConfig+0x31a>
 8001d74:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d7e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 817f 	beq.w	800208e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d90:	4ba7      	ldr	r3, [pc, #668]	@ (8002030 <HAL_RCC_OscConfig+0x5d0>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 030c 	and.w	r3, r3, #12
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00c      	beq.n	8001db6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d9c:	4ba4      	ldr	r3, [pc, #656]	@ (8002030 <HAL_RCC_OscConfig+0x5d0>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d173      	bne.n	8001e90 <HAL_RCC_OscConfig+0x430>
 8001da8:	4ba1      	ldr	r3, [pc, #644]	@ (8002030 <HAL_RCC_OscConfig+0x5d0>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001db0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001db4:	d16c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x430>
 8001db6:	2302      	movs	r3, #2
 8001db8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001dc0:	fa93 f3a3 	rbit	r3, r3
 8001dc4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001dc8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dcc:	fab3 f383 	clz	r3, r3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d102      	bne.n	8001de6 <HAL_RCC_OscConfig+0x386>
 8001de0:	4b93      	ldr	r3, [pc, #588]	@ (8002030 <HAL_RCC_OscConfig+0x5d0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	e013      	b.n	8001e0e <HAL_RCC_OscConfig+0x3ae>
 8001de6:	2302      	movs	r3, #2
 8001de8:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001df8:	2302      	movs	r3, #2
 8001dfa:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001dfe:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001e0a:	4b89      	ldr	r3, [pc, #548]	@ (8002030 <HAL_RCC_OscConfig+0x5d0>)
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0e:	2202      	movs	r2, #2
 8001e10:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001e14:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001e18:	fa92 f2a2 	rbit	r2, r2
 8001e1c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001e20:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001e24:	fab2 f282 	clz	r2, r2
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	f042 0220 	orr.w	r2, r2, #32
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	f002 021f 	and.w	r2, r2, #31
 8001e34:	2101      	movs	r1, #1
 8001e36:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00a      	beq.n	8001e56 <HAL_RCC_OscConfig+0x3f6>
 8001e40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e44:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d002      	beq.n	8001e56 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	f000 be52 	b.w	8002afa <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e56:	4b76      	ldr	r3, [pc, #472]	@ (8002030 <HAL_RCC_OscConfig+0x5d0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e62:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	21f8      	movs	r1, #248	@ 0xf8
 8001e6c:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e70:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001e74:	fa91 f1a1 	rbit	r1, r1
 8001e78:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001e7c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001e80:	fab1 f181 	clz	r1, r1
 8001e84:	b2c9      	uxtb	r1, r1
 8001e86:	408b      	lsls	r3, r1
 8001e88:	4969      	ldr	r1, [pc, #420]	@ (8002030 <HAL_RCC_OscConfig+0x5d0>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8e:	e0fe      	b.n	800208e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e94:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 8088 	beq.w	8001fb2 <HAL_RCC_OscConfig+0x552>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001eac:	fa93 f3a3 	rbit	r3, r3
 8001eb0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001eb4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb8:	fab3 f383 	clz	r3, r3
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ec2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	461a      	mov	r2, r3
 8001eca:	2301      	movs	r3, #1
 8001ecc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7fe fc7b 	bl	80007c8 <HAL_GetTick>
 8001ed2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed6:	e00a      	b.n	8001eee <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed8:	f7fe fc76 	bl	80007c8 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d902      	bls.n	8001eee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	f000 be06 	b.w	8002afa <HAL_RCC_OscConfig+0x109a>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001ef8:	fa93 f3a3 	rbit	r3, r3
 8001efc:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001f00:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f04:	fab3 f383 	clz	r3, r3
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	095b      	lsrs	r3, r3, #5
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d102      	bne.n	8001f1e <HAL_RCC_OscConfig+0x4be>
 8001f18:	4b45      	ldr	r3, [pc, #276]	@ (8002030 <HAL_RCC_OscConfig+0x5d0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	e013      	b.n	8001f46 <HAL_RCC_OscConfig+0x4e6>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001f28:	fa93 f3a3 	rbit	r3, r3
 8001f2c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001f30:	2302      	movs	r3, #2
 8001f32:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001f36:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001f3a:	fa93 f3a3 	rbit	r3, r3
 8001f3e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001f42:	4b3b      	ldr	r3, [pc, #236]	@ (8002030 <HAL_RCC_OscConfig+0x5d0>)
 8001f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f46:	2202      	movs	r2, #2
 8001f48:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001f4c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001f50:	fa92 f2a2 	rbit	r2, r2
 8001f54:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001f58:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001f5c:	fab2 f282 	clz	r2, r2
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	f042 0220 	orr.w	r2, r2, #32
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	f002 021f 	and.w	r2, r2, #31
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0af      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f78:	4b2d      	ldr	r3, [pc, #180]	@ (8002030 <HAL_RCC_OscConfig+0x5d0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f84:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	21f8      	movs	r1, #248	@ 0xf8
 8001f8e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001f96:	fa91 f1a1 	rbit	r1, r1
 8001f9a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001f9e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001fa2:	fab1 f181 	clz	r1, r1
 8001fa6:	b2c9      	uxtb	r1, r1
 8001fa8:	408b      	lsls	r3, r1
 8001faa:	4921      	ldr	r1, [pc, #132]	@ (8002030 <HAL_RCC_OscConfig+0x5d0>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	600b      	str	r3, [r1, #0]
 8001fb0:	e06d      	b.n	800208e <HAL_RCC_OscConfig+0x62e>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001fbc:	fa93 f3a3 	rbit	r3, r3
 8001fc0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001fc4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc8:	fab3 f383 	clz	r3, r3
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001fd2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	461a      	mov	r2, r3
 8001fda:	2300      	movs	r3, #0
 8001fdc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fde:	f7fe fbf3 	bl	80007c8 <HAL_GetTick>
 8001fe2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe6:	e00a      	b.n	8001ffe <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe8:	f7fe fbee 	bl	80007c8 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d902      	bls.n	8001ffe <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	f000 bd7e 	b.w	8002afa <HAL_RCC_OscConfig+0x109a>
 8001ffe:	2302      	movs	r3, #2
 8002000:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002010:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002014:	fab3 f383 	clz	r3, r3
 8002018:	b2db      	uxtb	r3, r3
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	b2db      	uxtb	r3, r3
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b01      	cmp	r3, #1
 8002026:	d105      	bne.n	8002034 <HAL_RCC_OscConfig+0x5d4>
 8002028:	4b01      	ldr	r3, [pc, #4]	@ (8002030 <HAL_RCC_OscConfig+0x5d0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	e016      	b.n	800205c <HAL_RCC_OscConfig+0x5fc>
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	2302      	movs	r3, #2
 8002036:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002046:	2302      	movs	r3, #2
 8002048:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800204c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002050:	fa93 f3a3 	rbit	r3, r3
 8002054:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002058:	4bbf      	ldr	r3, [pc, #764]	@ (8002358 <HAL_RCC_OscConfig+0x8f8>)
 800205a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205c:	2202      	movs	r2, #2
 800205e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002062:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002066:	fa92 f2a2 	rbit	r2, r2
 800206a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800206e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002072:	fab2 f282 	clz	r2, r2
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	f042 0220 	orr.w	r2, r2, #32
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	f002 021f 	and.w	r2, r2, #31
 8002082:	2101      	movs	r1, #1
 8002084:	fa01 f202 	lsl.w	r2, r1, r2
 8002088:	4013      	ands	r3, r2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1ac      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800208e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002092:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 8113 	beq.w	80022ca <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d07c      	beq.n	80021ae <HAL_RCC_OscConfig+0x74e>
 80020b4:	2301      	movs	r3, #1
 80020b6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80020be:	fa93 f3a3 	rbit	r3, r3
 80020c2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80020c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	4ba2      	ldr	r3, [pc, #648]	@ (800235c <HAL_RCC_OscConfig+0x8fc>)
 80020d4:	4413      	add	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	461a      	mov	r2, r3
 80020da:	2301      	movs	r3, #1
 80020dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020de:	f7fe fb73 	bl	80007c8 <HAL_GetTick>
 80020e2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e6:	e00a      	b.n	80020fe <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020e8:	f7fe fb6e 	bl	80007c8 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d902      	bls.n	80020fe <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	f000 bcfe 	b.w	8002afa <HAL_RCC_OscConfig+0x109a>
 80020fe:	2302      	movs	r3, #2
 8002100:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002104:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002108:	fa93 f2a3 	rbit	r2, r3
 800210c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002110:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800211a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800211e:	2202      	movs	r2, #2
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002126:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	fa93 f2a3 	rbit	r2, r3
 8002130:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002134:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800213e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002142:	2202      	movs	r2, #2
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800214a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	fa93 f2a3 	rbit	r2, r3
 8002154:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002158:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800215c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215e:	4b7e      	ldr	r3, [pc, #504]	@ (8002358 <HAL_RCC_OscConfig+0x8f8>)
 8002160:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002162:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002166:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800216a:	2102      	movs	r1, #2
 800216c:	6019      	str	r1, [r3, #0]
 800216e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002172:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	fa93 f1a3 	rbit	r1, r3
 800217c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002180:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002184:	6019      	str	r1, [r3, #0]
  return result;
 8002186:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800218a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	fab3 f383 	clz	r3, r3
 8002194:	b2db      	uxtb	r3, r3
 8002196:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800219a:	b2db      	uxtb	r3, r3
 800219c:	f003 031f 	and.w	r3, r3, #31
 80021a0:	2101      	movs	r1, #1
 80021a2:	fa01 f303 	lsl.w	r3, r1, r3
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d09d      	beq.n	80020e8 <HAL_RCC_OscConfig+0x688>
 80021ac:	e08d      	b.n	80022ca <HAL_RCC_OscConfig+0x86a>
 80021ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021b2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80021b6:	2201      	movs	r2, #1
 80021b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021be:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	fa93 f2a3 	rbit	r2, r3
 80021c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021cc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80021d0:	601a      	str	r2, [r3, #0]
  return result;
 80021d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021d6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80021da:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021dc:	fab3 f383 	clz	r3, r3
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	4b5d      	ldr	r3, [pc, #372]	@ (800235c <HAL_RCC_OscConfig+0x8fc>)
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	461a      	mov	r2, r3
 80021ec:	2300      	movs	r3, #0
 80021ee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f0:	f7fe faea 	bl	80007c8 <HAL_GetTick>
 80021f4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f8:	e00a      	b.n	8002210 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021fa:	f7fe fae5 	bl	80007c8 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d902      	bls.n	8002210 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	f000 bc75 	b.w	8002afa <HAL_RCC_OscConfig+0x109a>
 8002210:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002214:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002218:	2202      	movs	r2, #2
 800221a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002220:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	fa93 f2a3 	rbit	r2, r3
 800222a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800222e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002238:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800223c:	2202      	movs	r2, #2
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002244:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	fa93 f2a3 	rbit	r2, r3
 800224e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002252:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800225c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002260:	2202      	movs	r2, #2
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002268:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	fa93 f2a3 	rbit	r2, r3
 8002272:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002276:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800227a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227c:	4b36      	ldr	r3, [pc, #216]	@ (8002358 <HAL_RCC_OscConfig+0x8f8>)
 800227e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002280:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002284:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002288:	2102      	movs	r1, #2
 800228a:	6019      	str	r1, [r3, #0]
 800228c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002290:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	fa93 f1a3 	rbit	r1, r3
 800229a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800229e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80022a2:	6019      	str	r1, [r3, #0]
  return result;
 80022a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022a8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	fab3 f383 	clz	r3, r3
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	f003 031f 	and.w	r3, r3, #31
 80022be:	2101      	movs	r1, #1
 80022c0:	fa01 f303 	lsl.w	r3, r1, r3
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d197      	bne.n	80021fa <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 81a5 	beq.w	800262a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002358 <HAL_RCC_OscConfig+0x8f8>)
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d116      	bne.n	8002320 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	4b19      	ldr	r3, [pc, #100]	@ (8002358 <HAL_RCC_OscConfig+0x8f8>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	4a18      	ldr	r2, [pc, #96]	@ (8002358 <HAL_RCC_OscConfig+0x8f8>)
 80022f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022fc:	61d3      	str	r3, [r2, #28]
 80022fe:	4b16      	ldr	r3, [pc, #88]	@ (8002358 <HAL_RCC_OscConfig+0x8f8>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002306:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800230a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002314:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002318:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800231a:	2301      	movs	r3, #1
 800231c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002320:	4b0f      	ldr	r3, [pc, #60]	@ (8002360 <HAL_RCC_OscConfig+0x900>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002328:	2b00      	cmp	r3, #0
 800232a:	d121      	bne.n	8002370 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800232c:	4b0c      	ldr	r3, [pc, #48]	@ (8002360 <HAL_RCC_OscConfig+0x900>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a0b      	ldr	r2, [pc, #44]	@ (8002360 <HAL_RCC_OscConfig+0x900>)
 8002332:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002336:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002338:	f7fe fa46 	bl	80007c8 <HAL_GetTick>
 800233c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002340:	e010      	b.n	8002364 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002342:	f7fe fa41 	bl	80007c8 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b64      	cmp	r3, #100	@ 0x64
 8002350:	d908      	bls.n	8002364 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e3d1      	b.n	8002afa <HAL_RCC_OscConfig+0x109a>
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000
 800235c:	10908120 	.word	0x10908120
 8002360:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002364:	4b8d      	ldr	r3, [pc, #564]	@ (800259c <HAL_RCC_OscConfig+0xb3c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0e8      	beq.n	8002342 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002370:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002374:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x92e>
 8002380:	4b87      	ldr	r3, [pc, #540]	@ (80025a0 <HAL_RCC_OscConfig+0xb40>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4a86      	ldr	r2, [pc, #536]	@ (80025a0 <HAL_RCC_OscConfig+0xb40>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6213      	str	r3, [r2, #32]
 800238c:	e035      	b.n	80023fa <HAL_RCC_OscConfig+0x99a>
 800238e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002392:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x958>
 800239e:	4b80      	ldr	r3, [pc, #512]	@ (80025a0 <HAL_RCC_OscConfig+0xb40>)
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	4a7f      	ldr	r2, [pc, #508]	@ (80025a0 <HAL_RCC_OscConfig+0xb40>)
 80023a4:	f023 0301 	bic.w	r3, r3, #1
 80023a8:	6213      	str	r3, [r2, #32]
 80023aa:	4b7d      	ldr	r3, [pc, #500]	@ (80025a0 <HAL_RCC_OscConfig+0xb40>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	4a7c      	ldr	r2, [pc, #496]	@ (80025a0 <HAL_RCC_OscConfig+0xb40>)
 80023b0:	f023 0304 	bic.w	r3, r3, #4
 80023b4:	6213      	str	r3, [r2, #32]
 80023b6:	e020      	b.n	80023fa <HAL_RCC_OscConfig+0x99a>
 80023b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2b05      	cmp	r3, #5
 80023c6:	d10c      	bne.n	80023e2 <HAL_RCC_OscConfig+0x982>
 80023c8:	4b75      	ldr	r3, [pc, #468]	@ (80025a0 <HAL_RCC_OscConfig+0xb40>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	4a74      	ldr	r2, [pc, #464]	@ (80025a0 <HAL_RCC_OscConfig+0xb40>)
 80023ce:	f043 0304 	orr.w	r3, r3, #4
 80023d2:	6213      	str	r3, [r2, #32]
 80023d4:	4b72      	ldr	r3, [pc, #456]	@ (80025a0 <HAL_RCC_OscConfig+0xb40>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4a71      	ldr	r2, [pc, #452]	@ (80025a0 <HAL_RCC_OscConfig+0xb40>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6213      	str	r3, [r2, #32]
 80023e0:	e00b      	b.n	80023fa <HAL_RCC_OscConfig+0x99a>
 80023e2:	4b6f      	ldr	r3, [pc, #444]	@ (80025a0 <HAL_RCC_OscConfig+0xb40>)
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4a6e      	ldr	r2, [pc, #440]	@ (80025a0 <HAL_RCC_OscConfig+0xb40>)
 80023e8:	f023 0301 	bic.w	r3, r3, #1
 80023ec:	6213      	str	r3, [r2, #32]
 80023ee:	4b6c      	ldr	r3, [pc, #432]	@ (80025a0 <HAL_RCC_OscConfig+0xb40>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	4a6b      	ldr	r2, [pc, #428]	@ (80025a0 <HAL_RCC_OscConfig+0xb40>)
 80023f4:	f023 0304 	bic.w	r3, r3, #4
 80023f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023fe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 8081 	beq.w	800250e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240c:	f7fe f9dc 	bl	80007c8 <HAL_GetTick>
 8002410:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002414:	e00b      	b.n	800242e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002416:	f7fe f9d7 	bl	80007c8 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e365      	b.n	8002afa <HAL_RCC_OscConfig+0x109a>
 800242e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002432:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002436:	2202      	movs	r2, #2
 8002438:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800243e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	fa93 f2a3 	rbit	r2, r3
 8002448:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800244c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002456:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800245a:	2202      	movs	r2, #2
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002462:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	fa93 f2a3 	rbit	r2, r3
 800246c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002470:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002474:	601a      	str	r2, [r3, #0]
  return result;
 8002476:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800247a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800247e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002480:	fab3 f383 	clz	r3, r3
 8002484:	b2db      	uxtb	r3, r3
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	b2db      	uxtb	r3, r3
 800248a:	f043 0302 	orr.w	r3, r3, #2
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d102      	bne.n	800249a <HAL_RCC_OscConfig+0xa3a>
 8002494:	4b42      	ldr	r3, [pc, #264]	@ (80025a0 <HAL_RCC_OscConfig+0xb40>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	e013      	b.n	80024c2 <HAL_RCC_OscConfig+0xa62>
 800249a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800249e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80024a2:	2202      	movs	r2, #2
 80024a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024aa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	fa93 f2a3 	rbit	r2, r3
 80024b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024b8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	4b38      	ldr	r3, [pc, #224]	@ (80025a0 <HAL_RCC_OscConfig+0xb40>)
 80024c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024c6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80024ca:	2102      	movs	r1, #2
 80024cc:	6011      	str	r1, [r2, #0]
 80024ce:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024d2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80024d6:	6812      	ldr	r2, [r2, #0]
 80024d8:	fa92 f1a2 	rbit	r1, r2
 80024dc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024e0:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80024e4:	6011      	str	r1, [r2, #0]
  return result;
 80024e6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024ea:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	fab2 f282 	clz	r2, r2
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	f002 021f 	and.w	r2, r2, #31
 8002500:	2101      	movs	r1, #1
 8002502:	fa01 f202 	lsl.w	r2, r1, r2
 8002506:	4013      	ands	r3, r2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d084      	beq.n	8002416 <HAL_RCC_OscConfig+0x9b6>
 800250c:	e083      	b.n	8002616 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250e:	f7fe f95b 	bl	80007c8 <HAL_GetTick>
 8002512:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002516:	e00b      	b.n	8002530 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002518:	f7fe f956 	bl	80007c8 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002528:	4293      	cmp	r3, r2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e2e4      	b.n	8002afa <HAL_RCC_OscConfig+0x109a>
 8002530:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002534:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002538:	2202      	movs	r2, #2
 800253a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002540:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	fa93 f2a3 	rbit	r2, r3
 800254a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800254e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002558:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800255c:	2202      	movs	r2, #2
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002564:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	fa93 f2a3 	rbit	r2, r3
 800256e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002572:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002576:	601a      	str	r2, [r3, #0]
  return result;
 8002578:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800257c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002580:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	095b      	lsrs	r3, r3, #5
 800258a:	b2db      	uxtb	r3, r3
 800258c:	f043 0302 	orr.w	r3, r3, #2
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d106      	bne.n	80025a4 <HAL_RCC_OscConfig+0xb44>
 8002596:	4b02      	ldr	r3, [pc, #8]	@ (80025a0 <HAL_RCC_OscConfig+0xb40>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	e017      	b.n	80025cc <HAL_RCC_OscConfig+0xb6c>
 800259c:	40007000 	.word	0x40007000
 80025a0:	40021000 	.word	0x40021000
 80025a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025a8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80025ac:	2202      	movs	r2, #2
 80025ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025b4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	fa93 f2a3 	rbit	r2, r3
 80025be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025c2:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	4bb3      	ldr	r3, [pc, #716]	@ (8002898 <HAL_RCC_OscConfig+0xe38>)
 80025ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025cc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025d0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80025d4:	2102      	movs	r1, #2
 80025d6:	6011      	str	r1, [r2, #0]
 80025d8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025dc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	fa92 f1a2 	rbit	r1, r2
 80025e6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025ea:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80025ee:	6011      	str	r1, [r2, #0]
  return result;
 80025f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025f4:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	fab2 f282 	clz	r2, r2
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	f002 021f 	and.w	r2, r2, #31
 800260a:	2101      	movs	r1, #1
 800260c:	fa01 f202 	lsl.w	r2, r1, r2
 8002610:	4013      	ands	r3, r2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d180      	bne.n	8002518 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002616:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800261a:	2b01      	cmp	r3, #1
 800261c:	d105      	bne.n	800262a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800261e:	4b9e      	ldr	r3, [pc, #632]	@ (8002898 <HAL_RCC_OscConfig+0xe38>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	4a9d      	ldr	r2, [pc, #628]	@ (8002898 <HAL_RCC_OscConfig+0xe38>)
 8002624:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002628:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800262a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800262e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 825e 	beq.w	8002af8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800263c:	4b96      	ldr	r3, [pc, #600]	@ (8002898 <HAL_RCC_OscConfig+0xe38>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 030c 	and.w	r3, r3, #12
 8002644:	2b08      	cmp	r3, #8
 8002646:	f000 821f 	beq.w	8002a88 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800264a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800264e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	2b02      	cmp	r3, #2
 8002658:	f040 8170 	bne.w	800293c <HAL_RCC_OscConfig+0xedc>
 800265c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002660:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002664:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002668:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800266e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	fa93 f2a3 	rbit	r2, r3
 8002678:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800267c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002680:	601a      	str	r2, [r3, #0]
  return result;
 8002682:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002686:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800268a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268c:	fab3 f383 	clz	r3, r3
 8002690:	b2db      	uxtb	r3, r3
 8002692:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002696:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	461a      	mov	r2, r3
 800269e:	2300      	movs	r3, #0
 80026a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a2:	f7fe f891 	bl	80007c8 <HAL_GetTick>
 80026a6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026aa:	e009      	b.n	80026c0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ac:	f7fe f88c 	bl	80007c8 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e21c      	b.n	8002afa <HAL_RCC_OscConfig+0x109a>
 80026c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026c4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80026c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026d2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	fa93 f2a3 	rbit	r2, r3
 80026dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026e0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80026e4:	601a      	str	r2, [r3, #0]
  return result;
 80026e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026ea:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80026ee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f0:	fab3 f383 	clz	r3, r3
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b01      	cmp	r3, #1
 8002702:	d102      	bne.n	800270a <HAL_RCC_OscConfig+0xcaa>
 8002704:	4b64      	ldr	r3, [pc, #400]	@ (8002898 <HAL_RCC_OscConfig+0xe38>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	e027      	b.n	800275a <HAL_RCC_OscConfig+0xcfa>
 800270a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800270e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002712:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002716:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800271c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	fa93 f2a3 	rbit	r2, r3
 8002726:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800272a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002734:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002738:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002742:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	fa93 f2a3 	rbit	r2, r3
 800274c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002750:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	4b50      	ldr	r3, [pc, #320]	@ (8002898 <HAL_RCC_OscConfig+0xe38>)
 8002758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800275e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002762:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002766:	6011      	str	r1, [r2, #0]
 8002768:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800276c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	fa92 f1a2 	rbit	r1, r2
 8002776:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800277a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800277e:	6011      	str	r1, [r2, #0]
  return result;
 8002780:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002784:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	fab2 f282 	clz	r2, r2
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	f042 0220 	orr.w	r2, r2, #32
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	f002 021f 	and.w	r2, r2, #31
 800279a:	2101      	movs	r1, #1
 800279c:	fa01 f202 	lsl.w	r2, r1, r2
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d182      	bne.n	80026ac <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027a6:	4b3c      	ldr	r3, [pc, #240]	@ (8002898 <HAL_RCC_OscConfig+0xe38>)
 80027a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027aa:	f023 020f 	bic.w	r2, r3, #15
 80027ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ba:	4937      	ldr	r1, [pc, #220]	@ (8002898 <HAL_RCC_OscConfig+0xe38>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80027c0:	4b35      	ldr	r3, [pc, #212]	@ (8002898 <HAL_RCC_OscConfig+0xe38>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80027c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6a19      	ldr	r1, [r3, #32]
 80027d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027d8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	430b      	orrs	r3, r1
 80027e2:	492d      	ldr	r1, [pc, #180]	@ (8002898 <HAL_RCC_OscConfig+0xe38>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]
 80027e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ec:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80027f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027fa:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	fa93 f2a3 	rbit	r2, r3
 8002804:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002808:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800280c:	601a      	str	r2, [r3, #0]
  return result;
 800280e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002812:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002816:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002818:	fab3 f383 	clz	r3, r3
 800281c:	b2db      	uxtb	r3, r3
 800281e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002822:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	461a      	mov	r2, r3
 800282a:	2301      	movs	r3, #1
 800282c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282e:	f7fd ffcb 	bl	80007c8 <HAL_GetTick>
 8002832:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002836:	e009      	b.n	800284c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002838:	f7fd ffc6 	bl	80007c8 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e156      	b.n	8002afa <HAL_RCC_OscConfig+0x109a>
 800284c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002850:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002854:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002858:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800285e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	fa93 f2a3 	rbit	r2, r3
 8002868:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800286c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002870:	601a      	str	r2, [r3, #0]
  return result;
 8002872:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002876:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800287a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800287c:	fab3 f383 	clz	r3, r3
 8002880:	b2db      	uxtb	r3, r3
 8002882:	095b      	lsrs	r3, r3, #5
 8002884:	b2db      	uxtb	r3, r3
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b01      	cmp	r3, #1
 800288e:	d105      	bne.n	800289c <HAL_RCC_OscConfig+0xe3c>
 8002890:	4b01      	ldr	r3, [pc, #4]	@ (8002898 <HAL_RCC_OscConfig+0xe38>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	e02a      	b.n	80028ec <HAL_RCC_OscConfig+0xe8c>
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000
 800289c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028a0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028ae:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	fa93 f2a3 	rbit	r2, r3
 80028b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028bc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028c6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80028ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028d4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	fa93 f2a3 	rbit	r2, r3
 80028de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028e2:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	4b86      	ldr	r3, [pc, #536]	@ (8002b04 <HAL_RCC_OscConfig+0x10a4>)
 80028ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028f0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80028f4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80028f8:	6011      	str	r1, [r2, #0]
 80028fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028fe:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	fa92 f1a2 	rbit	r1, r2
 8002908:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800290c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002910:	6011      	str	r1, [r2, #0]
  return result;
 8002912:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002916:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	fab2 f282 	clz	r2, r2
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	f042 0220 	orr.w	r2, r2, #32
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	f002 021f 	and.w	r2, r2, #31
 800292c:	2101      	movs	r1, #1
 800292e:	fa01 f202 	lsl.w	r2, r1, r2
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	f43f af7f 	beq.w	8002838 <HAL_RCC_OscConfig+0xdd8>
 800293a:	e0dd      	b.n	8002af8 <HAL_RCC_OscConfig+0x1098>
 800293c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002940:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002944:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002948:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800294e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	fa93 f2a3 	rbit	r2, r3
 8002958:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800295c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002960:	601a      	str	r2, [r3, #0]
  return result;
 8002962:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002966:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800296a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296c:	fab3 f383 	clz	r3, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002976:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	461a      	mov	r2, r3
 800297e:	2300      	movs	r3, #0
 8002980:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002982:	f7fd ff21 	bl	80007c8 <HAL_GetTick>
 8002986:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800298a:	e009      	b.n	80029a0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800298c:	f7fd ff1c 	bl	80007c8 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e0ac      	b.n	8002afa <HAL_RCC_OscConfig+0x109a>
 80029a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029a4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80029a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029b2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	fa93 f2a3 	rbit	r2, r3
 80029bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029c0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80029c4:	601a      	str	r2, [r3, #0]
  return result;
 80029c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ca:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80029ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d0:	fab3 f383 	clz	r3, r3
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d102      	bne.n	80029ea <HAL_RCC_OscConfig+0xf8a>
 80029e4:	4b47      	ldr	r3, [pc, #284]	@ (8002b04 <HAL_RCC_OscConfig+0x10a4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	e027      	b.n	8002a3a <HAL_RCC_OscConfig+0xfda>
 80029ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ee:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80029f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029fc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	fa93 f2a3 	rbit	r2, r3
 8002a06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a0a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a14:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002a18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a22:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	fa93 f2a3 	rbit	r2, r3
 8002a2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a30:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	4b33      	ldr	r3, [pc, #204]	@ (8002b04 <HAL_RCC_OscConfig+0x10a4>)
 8002a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a3e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002a42:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002a46:	6011      	str	r1, [r2, #0]
 8002a48:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a4c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	fa92 f1a2 	rbit	r1, r2
 8002a56:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a5a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002a5e:	6011      	str	r1, [r2, #0]
  return result;
 8002a60:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a64:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002a68:	6812      	ldr	r2, [r2, #0]
 8002a6a:	fab2 f282 	clz	r2, r2
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	f042 0220 	orr.w	r2, r2, #32
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	f002 021f 	and.w	r2, r2, #31
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d182      	bne.n	800298c <HAL_RCC_OscConfig+0xf2c>
 8002a86:	e037      	b.n	8002af8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a8c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e02e      	b.n	8002afa <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a9c:	4b19      	ldr	r3, [pc, #100]	@ (8002b04 <HAL_RCC_OscConfig+0x10a4>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002aa4:	4b17      	ldr	r3, [pc, #92]	@ (8002b04 <HAL_RCC_OscConfig+0x10a4>)
 8002aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002aac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002ab0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002ab4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ab8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d117      	bne.n	8002af4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002ac4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002ac8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002acc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ad0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d10b      	bne.n	8002af4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002adc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ae0:	f003 020f 	and.w	r2, r3, #15
 8002ae4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ae8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40021000 	.word	0x40021000

08002b08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b09e      	sub	sp, #120	@ 0x78
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e162      	b.n	8002de6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b20:	4b90      	ldr	r3, [pc, #576]	@ (8002d64 <HAL_RCC_ClockConfig+0x25c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d910      	bls.n	8002b50 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2e:	4b8d      	ldr	r3, [pc, #564]	@ (8002d64 <HAL_RCC_ClockConfig+0x25c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f023 0207 	bic.w	r2, r3, #7
 8002b36:	498b      	ldr	r1, [pc, #556]	@ (8002d64 <HAL_RCC_ClockConfig+0x25c>)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3e:	4b89      	ldr	r3, [pc, #548]	@ (8002d64 <HAL_RCC_ClockConfig+0x25c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d001      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e14a      	b.n	8002de6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d008      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b5c:	4b82      	ldr	r3, [pc, #520]	@ (8002d68 <HAL_RCC_ClockConfig+0x260>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	497f      	ldr	r1, [pc, #508]	@ (8002d68 <HAL_RCC_ClockConfig+0x260>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 80dc 	beq.w	8002d34 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d13c      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xf6>
 8002b84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b88:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b8c:	fa93 f3a3 	rbit	r3, r3
 8002b90:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002b92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b94:	fab3 f383 	clz	r3, r3
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	095b      	lsrs	r3, r3, #5
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d102      	bne.n	8002bae <HAL_RCC_ClockConfig+0xa6>
 8002ba8:	4b6f      	ldr	r3, [pc, #444]	@ (8002d68 <HAL_RCC_ClockConfig+0x260>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	e00f      	b.n	8002bce <HAL_RCC_ClockConfig+0xc6>
 8002bae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bb2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	667b      	str	r3, [r7, #100]	@ 0x64
 8002bbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8002bc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bc4:	fa93 f3a3 	rbit	r3, r3
 8002bc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002bca:	4b67      	ldr	r3, [pc, #412]	@ (8002d68 <HAL_RCC_ClockConfig+0x260>)
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002bd2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002bd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002bd6:	fa92 f2a2 	rbit	r2, r2
 8002bda:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002bdc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002bde:	fab2 f282 	clz	r2, r2
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	f042 0220 	orr.w	r2, r2, #32
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	f002 021f 	and.w	r2, r2, #31
 8002bee:	2101      	movs	r1, #1
 8002bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d17b      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e0f3      	b.n	8002de6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d13c      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x178>
 8002c06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c0a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002c14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	095b      	lsrs	r3, r3, #5
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d102      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x128>
 8002c2a:	4b4f      	ldr	r3, [pc, #316]	@ (8002d68 <HAL_RCC_ClockConfig+0x260>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	e00f      	b.n	8002c50 <HAL_RCC_ClockConfig+0x148>
 8002c30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c34:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c38:	fa93 f3a3 	rbit	r3, r3
 8002c3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c42:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c46:	fa93 f3a3 	rbit	r3, r3
 8002c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c4c:	4b46      	ldr	r3, [pc, #280]	@ (8002d68 <HAL_RCC_ClockConfig+0x260>)
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c54:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002c56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c58:	fa92 f2a2 	rbit	r2, r2
 8002c5c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002c5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c60:	fab2 f282 	clz	r2, r2
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	f042 0220 	orr.w	r2, r2, #32
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	f002 021f 	and.w	r2, r2, #31
 8002c70:	2101      	movs	r1, #1
 8002c72:	fa01 f202 	lsl.w	r2, r1, r2
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d13a      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0b2      	b.n	8002de6 <HAL_RCC_ClockConfig+0x2de>
 8002c80:	2302      	movs	r3, #2
 8002c82:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	095b      	lsrs	r3, r3, #5
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d102      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0x1a0>
 8002ca2:	4b31      	ldr	r3, [pc, #196]	@ (8002d68 <HAL_RCC_ClockConfig+0x260>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	e00d      	b.n	8002cc4 <HAL_RCC_ClockConfig+0x1bc>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	623b      	str	r3, [r7, #32]
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	fa93 f3a3 	rbit	r3, r3
 8002cbe:	61fb      	str	r3, [r7, #28]
 8002cc0:	4b29      	ldr	r3, [pc, #164]	@ (8002d68 <HAL_RCC_ClockConfig+0x260>)
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	61ba      	str	r2, [r7, #24]
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	fa92 f2a2 	rbit	r2, r2
 8002cce:	617a      	str	r2, [r7, #20]
  return result;
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	fab2 f282 	clz	r2, r2
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	f042 0220 	orr.w	r2, r2, #32
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	f002 021f 	and.w	r2, r2, #31
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e079      	b.n	8002de6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d68 <HAL_RCC_ClockConfig+0x260>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f023 0203 	bic.w	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	491a      	ldr	r1, [pc, #104]	@ (8002d68 <HAL_RCC_ClockConfig+0x260>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d04:	f7fd fd60 	bl	80007c8 <HAL_GetTick>
 8002d08:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0a:	e00a      	b.n	8002d22 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d0c:	f7fd fd5c 	bl	80007c8 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e061      	b.n	8002de6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d22:	4b11      	ldr	r3, [pc, #68]	@ (8002d68 <HAL_RCC_ClockConfig+0x260>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 020c 	and.w	r2, r3, #12
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d1eb      	bne.n	8002d0c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d34:	4b0b      	ldr	r3, [pc, #44]	@ (8002d64 <HAL_RCC_ClockConfig+0x25c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d214      	bcs.n	8002d6c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d42:	4b08      	ldr	r3, [pc, #32]	@ (8002d64 <HAL_RCC_ClockConfig+0x25c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 0207 	bic.w	r2, r3, #7
 8002d4a:	4906      	ldr	r1, [pc, #24]	@ (8002d64 <HAL_RCC_ClockConfig+0x25c>)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d52:	4b04      	ldr	r3, [pc, #16]	@ (8002d64 <HAL_RCC_ClockConfig+0x25c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d005      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e040      	b.n	8002de6 <HAL_RCC_ClockConfig+0x2de>
 8002d64:	40022000 	.word	0x40022000
 8002d68:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d78:	4b1d      	ldr	r3, [pc, #116]	@ (8002df0 <HAL_RCC_ClockConfig+0x2e8>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	491a      	ldr	r1, [pc, #104]	@ (8002df0 <HAL_RCC_ClockConfig+0x2e8>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d009      	beq.n	8002daa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d96:	4b16      	ldr	r3, [pc, #88]	@ (8002df0 <HAL_RCC_ClockConfig+0x2e8>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4912      	ldr	r1, [pc, #72]	@ (8002df0 <HAL_RCC_ClockConfig+0x2e8>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002daa:	f000 f829 	bl	8002e00 <HAL_RCC_GetSysClockFreq>
 8002dae:	4601      	mov	r1, r0
 8002db0:	4b0f      	ldr	r3, [pc, #60]	@ (8002df0 <HAL_RCC_ClockConfig+0x2e8>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002db8:	22f0      	movs	r2, #240	@ 0xf0
 8002dba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	fa92 f2a2 	rbit	r2, r2
 8002dc2:	60fa      	str	r2, [r7, #12]
  return result;
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	fab2 f282 	clz	r2, r2
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	40d3      	lsrs	r3, r2
 8002dce:	4a09      	ldr	r2, [pc, #36]	@ (8002df4 <HAL_RCC_ClockConfig+0x2ec>)
 8002dd0:	5cd3      	ldrb	r3, [r2, r3]
 8002dd2:	fa21 f303 	lsr.w	r3, r1, r3
 8002dd6:	4a08      	ldr	r2, [pc, #32]	@ (8002df8 <HAL_RCC_ClockConfig+0x2f0>)
 8002dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002dda:	4b08      	ldr	r3, [pc, #32]	@ (8002dfc <HAL_RCC_ClockConfig+0x2f4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fd fcae 	bl	8000740 <HAL_InitTick>
  
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3778      	adds	r7, #120	@ 0x78
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000
 8002df4:	08002f18 	.word	0x08002f18
 8002df8:	20000000 	.word	0x20000000
 8002dfc:	20000004 	.word	0x20000004

08002e00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	2300      	movs	r3, #0
 8002e14:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d002      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0x30>
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d003      	beq.n	8002e36 <HAL_RCC_GetSysClockFreq+0x36>
 8002e2e:	e029      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e30:	4b1a      	ldr	r3, [pc, #104]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e32:	613b      	str	r3, [r7, #16]
      break;
 8002e34:	e029      	b.n	8002e8a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	0c9b      	lsrs	r3, r3, #18
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	4a18      	ldr	r2, [pc, #96]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e40:	5cd3      	ldrb	r3, [r2, r3]
 8002e42:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002e44:	4b14      	ldr	r3, [pc, #80]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	4a15      	ldr	r2, [pc, #84]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e4e:	5cd3      	ldrb	r3, [r2, r3]
 8002e50:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d008      	beq.n	8002e6e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e5c:	4a0f      	ldr	r2, [pc, #60]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	fb02 f303 	mul.w	r3, r2, r3
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	e007      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e6e:	4a0b      	ldr	r2, [pc, #44]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	fb02 f303 	mul.w	r3, r2, r3
 8002e7c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	613b      	str	r3, [r7, #16]
      break;
 8002e82:	e002      	b.n	8002e8a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e84:	4b05      	ldr	r3, [pc, #20]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e86:	613b      	str	r3, [r7, #16]
      break;
 8002e88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e8a:	693b      	ldr	r3, [r7, #16]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	371c      	adds	r7, #28
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	007a1200 	.word	0x007a1200
 8002ea0:	08002f28 	.word	0x08002f28
 8002ea4:	08002f38 	.word	0x08002f38

08002ea8 <memset>:
 8002ea8:	4402      	add	r2, r0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d100      	bne.n	8002eb2 <memset+0xa>
 8002eb0:	4770      	bx	lr
 8002eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8002eb6:	e7f9      	b.n	8002eac <memset+0x4>

08002eb8 <__libc_init_array>:
 8002eb8:	b570      	push	{r4, r5, r6, lr}
 8002eba:	4d0d      	ldr	r5, [pc, #52]	@ (8002ef0 <__libc_init_array+0x38>)
 8002ebc:	4c0d      	ldr	r4, [pc, #52]	@ (8002ef4 <__libc_init_array+0x3c>)
 8002ebe:	1b64      	subs	r4, r4, r5
 8002ec0:	10a4      	asrs	r4, r4, #2
 8002ec2:	2600      	movs	r6, #0
 8002ec4:	42a6      	cmp	r6, r4
 8002ec6:	d109      	bne.n	8002edc <__libc_init_array+0x24>
 8002ec8:	4d0b      	ldr	r5, [pc, #44]	@ (8002ef8 <__libc_init_array+0x40>)
 8002eca:	4c0c      	ldr	r4, [pc, #48]	@ (8002efc <__libc_init_array+0x44>)
 8002ecc:	f000 f818 	bl	8002f00 <_init>
 8002ed0:	1b64      	subs	r4, r4, r5
 8002ed2:	10a4      	asrs	r4, r4, #2
 8002ed4:	2600      	movs	r6, #0
 8002ed6:	42a6      	cmp	r6, r4
 8002ed8:	d105      	bne.n	8002ee6 <__libc_init_array+0x2e>
 8002eda:	bd70      	pop	{r4, r5, r6, pc}
 8002edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ee0:	4798      	blx	r3
 8002ee2:	3601      	adds	r6, #1
 8002ee4:	e7ee      	b.n	8002ec4 <__libc_init_array+0xc>
 8002ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eea:	4798      	blx	r3
 8002eec:	3601      	adds	r6, #1
 8002eee:	e7f2      	b.n	8002ed6 <__libc_init_array+0x1e>
 8002ef0:	08002f48 	.word	0x08002f48
 8002ef4:	08002f48 	.word	0x08002f48
 8002ef8:	08002f48 	.word	0x08002f48
 8002efc:	08002f4c 	.word	0x08002f4c

08002f00 <_init>:
 8002f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f02:	bf00      	nop
 8002f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f06:	bc08      	pop	{r3}
 8002f08:	469e      	mov	lr, r3
 8002f0a:	4770      	bx	lr

08002f0c <_fini>:
 8002f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0e:	bf00      	nop
 8002f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f12:	bc08      	pop	{r3}
 8002f14:	469e      	mov	lr, r3
 8002f16:	4770      	bx	lr
