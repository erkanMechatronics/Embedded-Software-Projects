
stm32_ad5621_proteus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003344  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08003454  08003454  00004454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003848  08003848  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  08003848  08003848  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003848  08003848  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003848  08003848  00004848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800384c  0800384c  0000484c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003850  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  20000010  08003860  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08003860  00005360  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005086  00000000  00000000  00005039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013b4  00000000  00000000  0000a0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f0  00000000  00000000  0000b478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000045e  00000000  00000000  0000ba68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164b2  00000000  00000000  0000bec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007050  00000000  00000000  00022378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ef47  00000000  00000000  000293c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a830f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ac8  00000000  00000000  000a8354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000a9e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	0800343c 	.word	0x0800343c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	0800343c 	.word	0x0800343c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_frsub>:
 80009cc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009d0:	e002      	b.n	80009d8 <__addsf3>
 80009d2:	bf00      	nop

080009d4 <__aeabi_fsub>:
 80009d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009d8 <__addsf3>:
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	bf1f      	itttt	ne
 80009dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009e0:	ea92 0f03 	teqne	r2, r3
 80009e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ec:	d06a      	beq.n	8000ac4 <__addsf3+0xec>
 80009ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009f6:	bfc1      	itttt	gt
 80009f8:	18d2      	addgt	r2, r2, r3
 80009fa:	4041      	eorgt	r1, r0
 80009fc:	4048      	eorgt	r0, r1
 80009fe:	4041      	eorgt	r1, r0
 8000a00:	bfb8      	it	lt
 8000a02:	425b      	neglt	r3, r3
 8000a04:	2b19      	cmp	r3, #25
 8000a06:	bf88      	it	hi
 8000a08:	4770      	bxhi	lr
 8000a0a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a12:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a1e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a22:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4249      	negne	r1, r1
 8000a2a:	ea92 0f03 	teq	r2, r3
 8000a2e:	d03f      	beq.n	8000ab0 <__addsf3+0xd8>
 8000a30:	f1a2 0201 	sub.w	r2, r2, #1
 8000a34:	fa41 fc03 	asr.w	ip, r1, r3
 8000a38:	eb10 000c 	adds.w	r0, r0, ip
 8000a3c:	f1c3 0320 	rsb	r3, r3, #32
 8000a40:	fa01 f103 	lsl.w	r1, r1, r3
 8000a44:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a48:	d502      	bpl.n	8000a50 <__addsf3+0x78>
 8000a4a:	4249      	negs	r1, r1
 8000a4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a50:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a54:	d313      	bcc.n	8000a7e <__addsf3+0xa6>
 8000a56:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a5a:	d306      	bcc.n	8000a6a <__addsf3+0x92>
 8000a5c:	0840      	lsrs	r0, r0, #1
 8000a5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a62:	f102 0201 	add.w	r2, r2, #1
 8000a66:	2afe      	cmp	r2, #254	@ 0xfe
 8000a68:	d251      	bcs.n	8000b0e <__addsf3+0x136>
 8000a6a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a72:	bf08      	it	eq
 8000a74:	f020 0001 	biceq.w	r0, r0, #1
 8000a78:	ea40 0003 	orr.w	r0, r0, r3
 8000a7c:	4770      	bx	lr
 8000a7e:	0049      	lsls	r1, r1, #1
 8000a80:	eb40 0000 	adc.w	r0, r0, r0
 8000a84:	3a01      	subs	r2, #1
 8000a86:	bf28      	it	cs
 8000a88:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a8c:	d2ed      	bcs.n	8000a6a <__addsf3+0x92>
 8000a8e:	fab0 fc80 	clz	ip, r0
 8000a92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a96:	ebb2 020c 	subs.w	r2, r2, ip
 8000a9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a9e:	bfaa      	itet	ge
 8000aa0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aa4:	4252      	neglt	r2, r2
 8000aa6:	4318      	orrge	r0, r3
 8000aa8:	bfbc      	itt	lt
 8000aaa:	40d0      	lsrlt	r0, r2
 8000aac:	4318      	orrlt	r0, r3
 8000aae:	4770      	bx	lr
 8000ab0:	f092 0f00 	teq	r2, #0
 8000ab4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ab8:	bf06      	itte	eq
 8000aba:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000abe:	3201      	addeq	r2, #1
 8000ac0:	3b01      	subne	r3, #1
 8000ac2:	e7b5      	b.n	8000a30 <__addsf3+0x58>
 8000ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000acc:	bf18      	it	ne
 8000ace:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad2:	d021      	beq.n	8000b18 <__addsf3+0x140>
 8000ad4:	ea92 0f03 	teq	r2, r3
 8000ad8:	d004      	beq.n	8000ae4 <__addsf3+0x10c>
 8000ada:	f092 0f00 	teq	r2, #0
 8000ade:	bf08      	it	eq
 8000ae0:	4608      	moveq	r0, r1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea90 0f01 	teq	r0, r1
 8000ae8:	bf1c      	itt	ne
 8000aea:	2000      	movne	r0, #0
 8000aec:	4770      	bxne	lr
 8000aee:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000af2:	d104      	bne.n	8000afe <__addsf3+0x126>
 8000af4:	0040      	lsls	r0, r0, #1
 8000af6:	bf28      	it	cs
 8000af8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000afc:	4770      	bx	lr
 8000afe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b02:	bf3c      	itt	cc
 8000b04:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b08:	4770      	bxcc	lr
 8000b0a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b0e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b16:	4770      	bx	lr
 8000b18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b1c:	bf16      	itet	ne
 8000b1e:	4608      	movne	r0, r1
 8000b20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b24:	4601      	movne	r1, r0
 8000b26:	0242      	lsls	r2, r0, #9
 8000b28:	bf06      	itte	eq
 8000b2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b2e:	ea90 0f01 	teqeq	r0, r1
 8000b32:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_ui2f>:
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e004      	b.n	8000b48 <__aeabi_i2f+0x8>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_i2f>:
 8000b40:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	bf48      	it	mi
 8000b46:	4240      	negmi	r0, r0
 8000b48:	ea5f 0c00 	movs.w	ip, r0
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b54:	4601      	mov	r1, r0
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	e01c      	b.n	8000b96 <__aeabi_l2f+0x2a>

08000b5c <__aeabi_ul2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e00a      	b.n	8000b80 <__aeabi_l2f+0x14>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_l2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__aeabi_l2f+0x14>
 8000b7a:	4240      	negs	r0, r0
 8000b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b80:	ea5f 0c01 	movs.w	ip, r1
 8000b84:	bf02      	ittt	eq
 8000b86:	4684      	moveq	ip, r0
 8000b88:	4601      	moveq	r1, r0
 8000b8a:	2000      	moveq	r0, #0
 8000b8c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b90:	bf08      	it	eq
 8000b92:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b96:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b9a:	fabc f28c 	clz	r2, ip
 8000b9e:	3a08      	subs	r2, #8
 8000ba0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ba4:	db10      	blt.n	8000bc8 <__aeabi_l2f+0x5c>
 8000ba6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000baa:	4463      	add	r3, ip
 8000bac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f102 0220 	add.w	r2, r2, #32
 8000bcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_fmul>:
 8000be8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bf6:	ea92 0f0c 	teqne	r2, ip
 8000bfa:	ea93 0f0c 	teqne	r3, ip
 8000bfe:	d06f      	beq.n	8000ce0 <__aeabi_fmul+0xf8>
 8000c00:	441a      	add	r2, r3
 8000c02:	ea80 0c01 	eor.w	ip, r0, r1
 8000c06:	0240      	lsls	r0, r0, #9
 8000c08:	bf18      	it	ne
 8000c0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c0e:	d01e      	beq.n	8000c4e <__aeabi_fmul+0x66>
 8000c10:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c24:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c28:	bf3e      	ittt	cc
 8000c2a:	0049      	lslcc	r1, r1, #1
 8000c2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c30:	005b      	lslcc	r3, r3, #1
 8000c32:	ea40 0001 	orr.w	r0, r0, r1
 8000c36:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c3a:	2afd      	cmp	r2, #253	@ 0xfd
 8000c3c:	d81d      	bhi.n	8000c7a <__aeabi_fmul+0x92>
 8000c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	4770      	bx	lr
 8000c4e:	f090 0f00 	teq	r0, #0
 8000c52:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c56:	bf08      	it	eq
 8000c58:	0249      	lsleq	r1, r1, #9
 8000c5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c62:	3a7f      	subs	r2, #127	@ 0x7f
 8000c64:	bfc2      	ittt	gt
 8000c66:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c6e:	4770      	bxgt	lr
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	3a01      	subs	r2, #1
 8000c7a:	dc5d      	bgt.n	8000d38 <__aeabi_fmul+0x150>
 8000c7c:	f112 0f19 	cmn.w	r2, #25
 8000c80:	bfdc      	itt	le
 8000c82:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c86:	4770      	bxle	lr
 8000c88:	f1c2 0200 	rsb	r2, r2, #0
 8000c8c:	0041      	lsls	r1, r0, #1
 8000c8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c92:	f1c2 0220 	rsb	r2, r2, #32
 8000c96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c9e:	f140 0000 	adc.w	r0, r0, #0
 8000ca2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ca6:	bf08      	it	eq
 8000ca8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cac:	4770      	bx	lr
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cb6:	bf02      	ittt	eq
 8000cb8:	0040      	lsleq	r0, r0, #1
 8000cba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cbe:	3a01      	subeq	r2, #1
 8000cc0:	d0f9      	beq.n	8000cb6 <__aeabi_fmul+0xce>
 8000cc2:	ea40 000c 	orr.w	r0, r0, ip
 8000cc6:	f093 0f00 	teq	r3, #0
 8000cca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cce:	bf02      	ittt	eq
 8000cd0:	0049      	lsleq	r1, r1, #1
 8000cd2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000cd6:	3b01      	subeq	r3, #1
 8000cd8:	d0f9      	beq.n	8000cce <__aeabi_fmul+0xe6>
 8000cda:	ea41 010c 	orr.w	r1, r1, ip
 8000cde:	e78f      	b.n	8000c00 <__aeabi_fmul+0x18>
 8000ce0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ce4:	ea92 0f0c 	teq	r2, ip
 8000ce8:	bf18      	it	ne
 8000cea:	ea93 0f0c 	teqne	r3, ip
 8000cee:	d00a      	beq.n	8000d06 <__aeabi_fmul+0x11e>
 8000cf0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cf4:	bf18      	it	ne
 8000cf6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cfa:	d1d8      	bne.n	8000cae <__aeabi_fmul+0xc6>
 8000cfc:	ea80 0001 	eor.w	r0, r0, r1
 8000d00:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d04:	4770      	bx	lr
 8000d06:	f090 0f00 	teq	r0, #0
 8000d0a:	bf17      	itett	ne
 8000d0c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d10:	4608      	moveq	r0, r1
 8000d12:	f091 0f00 	teqne	r1, #0
 8000d16:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d1a:	d014      	beq.n	8000d46 <__aeabi_fmul+0x15e>
 8000d1c:	ea92 0f0c 	teq	r2, ip
 8000d20:	d101      	bne.n	8000d26 <__aeabi_fmul+0x13e>
 8000d22:	0242      	lsls	r2, r0, #9
 8000d24:	d10f      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d26:	ea93 0f0c 	teq	r3, ip
 8000d2a:	d103      	bne.n	8000d34 <__aeabi_fmul+0x14c>
 8000d2c:	024b      	lsls	r3, r1, #9
 8000d2e:	bf18      	it	ne
 8000d30:	4608      	movne	r0, r1
 8000d32:	d108      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d34:	ea80 0001 	eor.w	r0, r0, r1
 8000d38:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d4a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_fdiv>:
 8000d50:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d58:	bf1e      	ittt	ne
 8000d5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5e:	ea92 0f0c 	teqne	r2, ip
 8000d62:	ea93 0f0c 	teqne	r3, ip
 8000d66:	d069      	beq.n	8000e3c <__aeabi_fdiv+0xec>
 8000d68:	eba2 0203 	sub.w	r2, r2, r3
 8000d6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d70:	0249      	lsls	r1, r1, #9
 8000d72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d76:	d037      	beq.n	8000de8 <__aeabi_fdiv+0x98>
 8000d78:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d84:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	bf38      	it	cc
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d92:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d96:	428b      	cmp	r3, r1
 8000d98:	bf24      	itt	cs
 8000d9a:	1a5b      	subcs	r3, r3, r1
 8000d9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000da0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000da4:	bf24      	itt	cs
 8000da6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000daa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000db2:	bf24      	itt	cs
 8000db4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dc0:	bf24      	itt	cs
 8000dc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	bf18      	it	ne
 8000dce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dd2:	d1e0      	bne.n	8000d96 <__aeabi_fdiv+0x46>
 8000dd4:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd6:	f63f af50 	bhi.w	8000c7a <__aeabi_fmul+0x92>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de0:	bf08      	it	eq
 8000de2:	f020 0001 	biceq.w	r0, r0, #1
 8000de6:	4770      	bx	lr
 8000de8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df0:	327f      	adds	r2, #127	@ 0x7f
 8000df2:	bfc2      	ittt	gt
 8000df4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfc:	4770      	bxgt	lr
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	3a01      	subs	r2, #1
 8000e08:	e737      	b.n	8000c7a <__aeabi_fmul+0x92>
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fdiv+0xc2>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fdiv+0xda>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e795      	b.n	8000d68 <__aeabi_fdiv+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	d108      	bne.n	8000e58 <__aeabi_fdiv+0x108>
 8000e46:	0242      	lsls	r2, r0, #9
 8000e48:	f47f af7d 	bne.w	8000d46 <__aeabi_fmul+0x15e>
 8000e4c:	ea93 0f0c 	teq	r3, ip
 8000e50:	f47f af70 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e776      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	d104      	bne.n	8000e68 <__aeabi_fdiv+0x118>
 8000e5e:	024b      	lsls	r3, r1, #9
 8000e60:	f43f af4c 	beq.w	8000cfc <__aeabi_fmul+0x114>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e76e      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e68:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e6c:	bf18      	it	ne
 8000e6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e72:	d1ca      	bne.n	8000e0a <__aeabi_fdiv+0xba>
 8000e74:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e78:	f47f af5c 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e7c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e80:	f47f af3c 	bne.w	8000cfc <__aeabi_fmul+0x114>
 8000e84:	e75f      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e86:	bf00      	nop

08000e88 <__gesf2>:
 8000e88:	f04f 3cff 	mov.w	ip, #4294967295
 8000e8c:	e006      	b.n	8000e9c <__cmpsf2+0x4>
 8000e8e:	bf00      	nop

08000e90 <__lesf2>:
 8000e90:	f04f 0c01 	mov.w	ip, #1
 8000e94:	e002      	b.n	8000e9c <__cmpsf2+0x4>
 8000e96:	bf00      	nop

08000e98 <__cmpsf2>:
 8000e98:	f04f 0c01 	mov.w	ip, #1
 8000e9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ea0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ea4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eac:	bf18      	it	ne
 8000eae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eb2:	d011      	beq.n	8000ed8 <__cmpsf2+0x40>
 8000eb4:	b001      	add	sp, #4
 8000eb6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eba:	bf18      	it	ne
 8000ebc:	ea90 0f01 	teqne	r0, r1
 8000ec0:	bf58      	it	pl
 8000ec2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ec6:	bf88      	it	hi
 8000ec8:	17c8      	asrhi	r0, r1, #31
 8000eca:	bf38      	it	cc
 8000ecc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ed0:	bf18      	it	ne
 8000ed2:	f040 0001 	orrne.w	r0, r0, #1
 8000ed6:	4770      	bx	lr
 8000ed8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000edc:	d102      	bne.n	8000ee4 <__cmpsf2+0x4c>
 8000ede:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ee2:	d105      	bne.n	8000ef0 <__cmpsf2+0x58>
 8000ee4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ee8:	d1e4      	bne.n	8000eb4 <__cmpsf2+0x1c>
 8000eea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eee:	d0e1      	beq.n	8000eb4 <__cmpsf2+0x1c>
 8000ef0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_cfrcmple>:
 8000ef8:	4684      	mov	ip, r0
 8000efa:	4608      	mov	r0, r1
 8000efc:	4661      	mov	r1, ip
 8000efe:	e7ff      	b.n	8000f00 <__aeabi_cfcmpeq>

08000f00 <__aeabi_cfcmpeq>:
 8000f00:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f02:	f7ff ffc9 	bl	8000e98 <__cmpsf2>
 8000f06:	2800      	cmp	r0, #0
 8000f08:	bf48      	it	mi
 8000f0a:	f110 0f00 	cmnmi.w	r0, #0
 8000f0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f10 <__aeabi_fcmpeq>:
 8000f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f14:	f7ff fff4 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f18:	bf0c      	ite	eq
 8000f1a:	2001      	moveq	r0, #1
 8000f1c:	2000      	movne	r0, #0
 8000f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f22:	bf00      	nop

08000f24 <__aeabi_fcmplt>:
 8000f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f28:	f7ff ffea 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f2c:	bf34      	ite	cc
 8000f2e:	2001      	movcc	r0, #1
 8000f30:	2000      	movcs	r0, #0
 8000f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f36:	bf00      	nop

08000f38 <__aeabi_fcmple>:
 8000f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f3c:	f7ff ffe0 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f40:	bf94      	ite	ls
 8000f42:	2001      	movls	r0, #1
 8000f44:	2000      	movhi	r0, #0
 8000f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4a:	bf00      	nop

08000f4c <__aeabi_fcmpge>:
 8000f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f50:	f7ff ffd2 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f54:	bf94      	ite	ls
 8000f56:	2001      	movls	r0, #1
 8000f58:	2000      	movhi	r0, #0
 8000f5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5e:	bf00      	nop

08000f60 <__aeabi_fcmpgt>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff ffc8 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f68:	bf34      	ite	cc
 8000f6a:	2001      	movcc	r0, #1
 8000f6c:	2000      	movcs	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_f2iz>:
 8000f74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f78:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f7c:	d30f      	bcc.n	8000f9e <__aeabi_f2iz+0x2a>
 8000f7e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f86:	d90d      	bls.n	8000fa4 <__aeabi_f2iz+0x30>
 8000f88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f90:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f94:	fa23 f002 	lsr.w	r0, r3, r2
 8000f98:	bf18      	it	ne
 8000f9a:	4240      	negne	r0, r0
 8000f9c:	4770      	bx	lr
 8000f9e:	f04f 0000 	mov.w	r0, #0
 8000fa2:	4770      	bx	lr
 8000fa4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fa8:	d101      	bne.n	8000fae <__aeabi_f2iz+0x3a>
 8000faa:	0242      	lsls	r2, r0, #9
 8000fac:	d105      	bne.n	8000fba <__aeabi_f2iz+0x46>
 8000fae:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000fb2:	bf08      	it	eq
 8000fb4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000fb8:	4770      	bx	lr
 8000fba:	f04f 0000 	mov.w	r0, #0
 8000fbe:	4770      	bx	lr

08000fc0 <checkCommunication_AD5621>:
#include "AD5621.h"



communication_status_e checkCommunication_AD5621(SPI_HandleTypeDef *hspi)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	HAL_SPI_StateTypeDef checkCom;

	SPI_CS_LOW();
 8000fc8:	f000 f82e 	bl	8001028 <SPI_CS_LOW>
	checkCom = HAL_SPI_GetState(hspi);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f001 fb33 	bl	8002638 <HAL_SPI_GetState>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	73fb      	strb	r3, [r7, #15]
	SPI_CS_HIGH();
 8000fd6:	f000 f833 	bl	8001040 <SPI_CS_HIGH>

	if(checkCom != HAL_SPI_STATE_READY)
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d001      	beq.n	8000fe4 <checkCommunication_AD5621+0x24>
	{
		return COM_ERROR;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	e000      	b.n	8000fe6 <checkCommunication_AD5621+0x26>
	}
	else
	{
		return COM_READY;
 8000fe4:	2301      	movs	r3, #1
	}
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <SPI_Write_AD5621>:

communication_status_e SPI_Write_AD5621(SPI_HandleTypeDef *hspi,uint16_t data)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b084      	sub	sp, #16
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	807b      	strh	r3, [r7, #2]
	HAL_SPI_StateTypeDef checkCom;

	SPI_CS_LOW();
 8000ffa:	f000 f815 	bl	8001028 <SPI_CS_LOW>

	checkCom = HAL_SPI_Transmit(hspi,(uint8_t *)&data, 1, 1000);
 8000ffe:	1cb9      	adds	r1, r7, #2
 8001000:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001004:	2201      	movs	r2, #1
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f001 f9d2 	bl	80023b0 <HAL_SPI_Transmit>
 800100c:	4603      	mov	r3, r0
 800100e:	73fb      	strb	r3, [r7, #15]

	SPI_CS_HIGH();
 8001010:	f000 f816 	bl	8001040 <SPI_CS_HIGH>

	if(checkCom != HAL_SPI_STATE_READY)
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d001      	beq.n	800101e <SPI_Write_AD5621+0x30>
	{
		return COM_ERROR;
 800101a:	2300      	movs	r3, #0
 800101c:	e000      	b.n	8001020 <SPI_Write_AD5621+0x32>
	}
	else
	{
		return COM_READY;
 800101e:	2301      	movs	r3, #1
	}

}
 8001020:	4618      	mov	r0, r3
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <SPI_CS_LOW>:




void SPI_CS_LOW(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	2110      	movs	r1, #16
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <SPI_CS_LOW+0x14>)
 8001032:	f000 fd43 	bl	8001abc <HAL_GPIO_WritePin>
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40010800 	.word	0x40010800

08001040 <SPI_CS_HIGH>:


void SPI_CS_HIGH(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2110      	movs	r1, #16
 8001048:	4802      	ldr	r0, [pc, #8]	@ (8001054 <SPI_CS_HIGH+0x14>)
 800104a:	f000 fd37 	bl	8001abc <HAL_GPIO_WritePin>
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40010800 	.word	0x40010800

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b5b0      	push	{r4, r5, r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105e:	f000 fa47 	bl	80014f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001062:	f000 f8a3 	bl	80011ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001066:	f000 f915 	bl	8001294 <MX_GPIO_Init>
  MX_SPI1_Init();
 800106a:	f000 f8db 	bl	8001224 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  status_AD5621 = checkCommunication_AD5621(&hspi1);
 800106e:	4848      	ldr	r0, [pc, #288]	@ (8001190 <main+0x138>)
 8001070:	f7ff ffa6 	bl	8000fc0 <checkCommunication_AD5621>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b46      	ldr	r3, [pc, #280]	@ (8001194 <main+0x13c>)
 800107a:	701a      	strb	r2, [r3, #0]

  if(status_AD5621)
 800107c:	4b45      	ldr	r3, [pc, #276]	@ (8001194 <main+0x13c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d005      	beq.n	8001090 <main+0x38>
  {
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
 8001084:	2201      	movs	r2, #1
 8001086:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800108a:	4843      	ldr	r0, [pc, #268]	@ (8001198 <main+0x140>)
 800108c:	f000 fd16 	bl	8001abc <HAL_GPIO_WritePin>
  }

  for (int i = 0; i < points; i++)
 8001090:	2300      	movs	r3, #0
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	e05b      	b.n	800114e <main+0xf6>
  {
      radian_value = (float)i * 2.0f * M_PI / (float)points;
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fd52 	bl	8000b40 <__aeabi_i2f>
 800109c:	4603      	mov	r3, r0
 800109e:	4619      	mov	r1, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fc99 	bl	80009d8 <__addsf3>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff f9b5 	bl	8000418 <__aeabi_f2d>
 80010ae:	a336      	add	r3, pc, #216	@ (adr r3, 8001188 <main+0x130>)
 80010b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b4:	f7ff fa08 	bl	80004c8 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4614      	mov	r4, r2
 80010be:	461d      	mov	r5, r3
 80010c0:	4b36      	ldr	r3, [pc, #216]	@ (800119c <main+0x144>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fd37 	bl	8000b38 <__aeabi_ui2f>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff f9a3 	bl	8000418 <__aeabi_f2d>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4620      	mov	r0, r4
 80010d8:	4629      	mov	r1, r5
 80010da:	f7ff fb1f 	bl	800071c <__aeabi_ddiv>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	f7ff fc21 	bl	800092c <__aeabi_d2f>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a2c      	ldr	r2, [pc, #176]	@ (80011a0 <main+0x148>)
 80010ee:	6013      	str	r3, [r2, #0]
      sine_points[i] = (uint16_t)round(((sinf(radian_value) + 1.0f) / 2.0f) * DAC_RESOLUTION);
 80010f0:	4b2b      	ldr	r3, [pc, #172]	@ (80011a0 <main+0x148>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f001 fb93 	bl	8002820 <sinf>
 80010fa:	4603      	mov	r3, r0
 80010fc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fc69 	bl	80009d8 <__addsf3>
 8001106:	4603      	mov	r3, r0
 8001108:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fe1f 	bl	8000d50 <__aeabi_fdiv>
 8001112:	4603      	mov	r3, r0
 8001114:	4923      	ldr	r1, [pc, #140]	@ (80011a4 <main+0x14c>)
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fd66 	bl	8000be8 <__aeabi_fmul>
 800111c:	4603      	mov	r3, r0
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f97a 	bl	8000418 <__aeabi_f2d>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4610      	mov	r0, r2
 800112a:	4619      	mov	r1, r3
 800112c:	f001 fbb2 	bl	8002894 <round>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4610      	mov	r0, r2
 8001136:	4619      	mov	r1, r3
 8001138:	f7ff fbd8 	bl	80008ec <__aeabi_d2uiz>
 800113c:	4603      	mov	r3, r0
 800113e:	b299      	uxth	r1, r3
 8001140:	4a19      	ldr	r2, [pc, #100]	@ (80011a8 <main+0x150>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < points; i++)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3301      	adds	r3, #1
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	4b13      	ldr	r3, [pc, #76]	@ (800119c <main+0x144>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4293      	cmp	r3, r2
 8001158:	db9d      	blt.n	8001096 <main+0x3e>
//
//	  DAC_data = 0x00 << 2;
//	  SPI_Write_AD5621(&hspi1, DAC_data);
//	  HAL_Delay(4000);

	  for(int i = 0;i < 360;i++)
 800115a:	2300      	movs	r3, #0
 800115c:	603b      	str	r3, [r7, #0]
 800115e:	e00d      	b.n	800117c <main+0x124>
	  {
		  SPI_Write_AD5621(&hspi1, sine_points[i]);
 8001160:	4a11      	ldr	r2, [pc, #68]	@ (80011a8 <main+0x150>)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001168:	4619      	mov	r1, r3
 800116a:	4809      	ldr	r0, [pc, #36]	@ (8001190 <main+0x138>)
 800116c:	f7ff ff3f 	bl	8000fee <SPI_Write_AD5621>
		  HAL_Delay(1);
 8001170:	2001      	movs	r0, #1
 8001172:	f000 fa1f 	bl	80015b4 <HAL_Delay>
	  for(int i = 0;i < 360;i++)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8001182:	dbed      	blt.n	8001160 <main+0x108>
 8001184:	e7e9      	b.n	800115a <main+0x102>
 8001186:	bf00      	nop
 8001188:	54442d18 	.word	0x54442d18
 800118c:	400921fb 	.word	0x400921fb
 8001190:	20000304 	.word	0x20000304
 8001194:	2000002c 	.word	0x2000002c
 8001198:	40010c00 	.word	0x40010c00
 800119c:	20000000 	.word	0x20000000
 80011a0:	20000300 	.word	0x20000300
 80011a4:	457ff000 	.word	0x457ff000
 80011a8:	20000030 	.word	0x20000030

080011ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b090      	sub	sp, #64	@ 0x40
 80011b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b2:	f107 0318 	add.w	r3, r7, #24
 80011b6:	2228      	movs	r2, #40	@ 0x28
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f001 fb03 	bl	80027c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ce:	2302      	movs	r3, #2
 80011d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d2:	2301      	movs	r3, #1
 80011d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011d6:	2310      	movs	r3, #16
 80011d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011da:	2300      	movs	r3, #0
 80011dc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011de:	f107 0318 	add.w	r3, r7, #24
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 fc82 	bl	8001aec <HAL_RCC_OscConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80011ee:	f000 f8b1 	bl	8001354 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f2:	230f      	movs	r3, #15
 80011f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f000 fef0 	bl	8001ff0 <HAL_RCC_ClockConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001216:	f000 f89d 	bl	8001354 <Error_Handler>
  }
}
 800121a:	bf00      	nop
 800121c:	3740      	adds	r7, #64	@ 0x40
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001228:	4b18      	ldr	r3, [pc, #96]	@ (800128c <MX_SPI1_Init+0x68>)
 800122a:	4a19      	ldr	r2, [pc, #100]	@ (8001290 <MX_SPI1_Init+0x6c>)
 800122c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800122e:	4b17      	ldr	r3, [pc, #92]	@ (800128c <MX_SPI1_Init+0x68>)
 8001230:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001234:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001236:	4b15      	ldr	r3, [pc, #84]	@ (800128c <MX_SPI1_Init+0x68>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800123c:	4b13      	ldr	r3, [pc, #76]	@ (800128c <MX_SPI1_Init+0x68>)
 800123e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001242:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001244:	4b11      	ldr	r3, [pc, #68]	@ (800128c <MX_SPI1_Init+0x68>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800124a:	4b10      	ldr	r3, [pc, #64]	@ (800128c <MX_SPI1_Init+0x68>)
 800124c:	2200      	movs	r2, #0
 800124e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001250:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <MX_SPI1_Init+0x68>)
 8001252:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001256:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001258:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <MX_SPI1_Init+0x68>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800125e:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <MX_SPI1_Init+0x68>)
 8001260:	2200      	movs	r2, #0
 8001262:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001264:	4b09      	ldr	r3, [pc, #36]	@ (800128c <MX_SPI1_Init+0x68>)
 8001266:	2200      	movs	r2, #0
 8001268:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800126a:	4b08      	ldr	r3, [pc, #32]	@ (800128c <MX_SPI1_Init+0x68>)
 800126c:	2200      	movs	r2, #0
 800126e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <MX_SPI1_Init+0x68>)
 8001272:	220a      	movs	r2, #10
 8001274:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001276:	4805      	ldr	r0, [pc, #20]	@ (800128c <MX_SPI1_Init+0x68>)
 8001278:	f001 f816 	bl	80022a8 <HAL_SPI_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001282:	f000 f867 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000304 	.word	0x20000304
 8001290:	40013000 	.word	0x40013000

08001294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129a:	f107 0310 	add.w	r3, r7, #16
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a8:	4b27      	ldr	r3, [pc, #156]	@ (8001348 <MX_GPIO_Init+0xb4>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a26      	ldr	r2, [pc, #152]	@ (8001348 <MX_GPIO_Init+0xb4>)
 80012ae:	f043 0320 	orr.w	r3, r3, #32
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b24      	ldr	r3, [pc, #144]	@ (8001348 <MX_GPIO_Init+0xb4>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0320 	and.w	r3, r3, #32
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c0:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <MX_GPIO_Init+0xb4>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a20      	ldr	r2, [pc, #128]	@ (8001348 <MX_GPIO_Init+0xb4>)
 80012c6:	f043 0304 	orr.w	r3, r3, #4
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001348 <MX_GPIO_Init+0xb4>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001348 <MX_GPIO_Init+0xb4>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001348 <MX_GPIO_Init+0xb4>)
 80012de:	f043 0308 	orr.w	r3, r3, #8
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b18      	ldr	r3, [pc, #96]	@ (8001348 <MX_GPIO_Init+0xb4>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2110      	movs	r1, #16
 80012f4:	4815      	ldr	r0, [pc, #84]	@ (800134c <MX_GPIO_Init+0xb8>)
 80012f6:	f000 fbe1 	bl	8001abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001300:	4813      	ldr	r0, [pc, #76]	@ (8001350 <MX_GPIO_Init+0xbc>)
 8001302:	f000 fbdb 	bl	8001abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001306:	2310      	movs	r3, #16
 8001308:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130a:	2301      	movs	r3, #1
 800130c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2302      	movs	r3, #2
 8001314:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	4619      	mov	r1, r3
 800131c:	480b      	ldr	r0, [pc, #44]	@ (800134c <MX_GPIO_Init+0xb8>)
 800131e:	f000 fa51 	bl	80017c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001322:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001328:	2301      	movs	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2302      	movs	r3, #2
 8001332:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	4619      	mov	r1, r3
 800133a:	4805      	ldr	r0, [pc, #20]	@ (8001350 <MX_GPIO_Init+0xbc>)
 800133c:	f000 fa42 	bl	80017c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001340:	bf00      	nop
 8001342:	3720      	adds	r7, #32
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40021000 	.word	0x40021000
 800134c:	40010800 	.word	0x40010800
 8001350:	40010c00 	.word	0x40010c00

08001354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001358:	b672      	cpsid	i
}
 800135a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <Error_Handler+0x8>

08001360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001366:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <HAL_MspInit+0x5c>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	4a14      	ldr	r2, [pc, #80]	@ (80013bc <HAL_MspInit+0x5c>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6193      	str	r3, [r2, #24]
 8001372:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <HAL_MspInit+0x5c>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <HAL_MspInit+0x5c>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	4a0e      	ldr	r2, [pc, #56]	@ (80013bc <HAL_MspInit+0x5c>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001388:	61d3      	str	r3, [r2, #28]
 800138a:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <HAL_MspInit+0x5c>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001396:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <HAL_MspInit+0x60>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	4a04      	ldr	r2, [pc, #16]	@ (80013c0 <HAL_MspInit+0x60>)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b2:	bf00      	nop
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40010000 	.word	0x40010000

080013c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a15      	ldr	r2, [pc, #84]	@ (8001434 <HAL_SPI_MspInit+0x70>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d123      	bne.n	800142c <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013e4:	4b14      	ldr	r3, [pc, #80]	@ (8001438 <HAL_SPI_MspInit+0x74>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a13      	ldr	r2, [pc, #76]	@ (8001438 <HAL_SPI_MspInit+0x74>)
 80013ea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <HAL_SPI_MspInit+0x74>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001438 <HAL_SPI_MspInit+0x74>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a0d      	ldr	r2, [pc, #52]	@ (8001438 <HAL_SPI_MspInit+0x74>)
 8001402:	f043 0304 	orr.w	r3, r3, #4
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b0b      	ldr	r3, [pc, #44]	@ (8001438 <HAL_SPI_MspInit+0x74>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001414:	23a0      	movs	r3, #160	@ 0xa0
 8001416:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	4619      	mov	r1, r3
 8001426:	4805      	ldr	r0, [pc, #20]	@ (800143c <HAL_SPI_MspInit+0x78>)
 8001428:	f000 f9cc 	bl	80017c4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800142c:	bf00      	nop
 800142e:	3720      	adds	r7, #32
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40013000 	.word	0x40013000
 8001438:	40021000 	.word	0x40021000
 800143c:	40010800 	.word	0x40010800

08001440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <NMI_Handler+0x4>

08001448 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <HardFault_Handler+0x4>

08001450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <MemManage_Handler+0x4>

08001458 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <BusFault_Handler+0x4>

08001460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <UsageFault_Handler+0x4>

08001468 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001490:	f000 f874 	bl	800157c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}

08001498 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014a4:	f7ff fff8 	bl	8001498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a8:	480b      	ldr	r0, [pc, #44]	@ (80014d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014aa:	490c      	ldr	r1, [pc, #48]	@ (80014dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014ac:	4a0c      	ldr	r2, [pc, #48]	@ (80014e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b0:	e002      	b.n	80014b8 <LoopCopyDataInit>

080014b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b6:	3304      	adds	r3, #4

080014b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014bc:	d3f9      	bcc.n	80014b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014be:	4a09      	ldr	r2, [pc, #36]	@ (80014e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014c0:	4c09      	ldr	r4, [pc, #36]	@ (80014e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c4:	e001      	b.n	80014ca <LoopFillZerobss>

080014c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c8:	3204      	adds	r2, #4

080014ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014cc:	d3fb      	bcc.n	80014c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ce:	f001 f983 	bl	80027d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014d2:	f7ff fdc1 	bl	8001058 <main>
  bx lr
 80014d6:	4770      	bx	lr
  ldr r0, =_sdata
 80014d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014dc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014e0:	08003850 	.word	0x08003850
  ldr r2, =_sbss
 80014e4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014e8:	20000360 	.word	0x20000360

080014ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014ec:	e7fe      	b.n	80014ec <ADC1_2_IRQHandler>
	...

080014f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f4:	4b08      	ldr	r3, [pc, #32]	@ (8001518 <HAL_Init+0x28>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a07      	ldr	r2, [pc, #28]	@ (8001518 <HAL_Init+0x28>)
 80014fa:	f043 0310 	orr.w	r3, r3, #16
 80014fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001500:	2003      	movs	r0, #3
 8001502:	f000 f92b 	bl	800175c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001506:	200f      	movs	r0, #15
 8001508:	f000 f808 	bl	800151c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800150c:	f7ff ff28 	bl	8001360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40022000 	.word	0x40022000

0800151c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001524:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <HAL_InitTick+0x54>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b12      	ldr	r3, [pc, #72]	@ (8001574 <HAL_InitTick+0x58>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4619      	mov	r1, r3
 800152e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001532:	fbb3 f3f1 	udiv	r3, r3, r1
 8001536:	fbb2 f3f3 	udiv	r3, r2, r3
 800153a:	4618      	mov	r0, r3
 800153c:	f000 f935 	bl	80017aa <HAL_SYSTICK_Config>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e00e      	b.n	8001568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b0f      	cmp	r3, #15
 800154e:	d80a      	bhi.n	8001566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001550:	2200      	movs	r2, #0
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	f04f 30ff 	mov.w	r0, #4294967295
 8001558:	f000 f90b 	bl	8001772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800155c:	4a06      	ldr	r2, [pc, #24]	@ (8001578 <HAL_InitTick+0x5c>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	e000      	b.n	8001568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000004 	.word	0x20000004
 8001574:	2000000c 	.word	0x2000000c
 8001578:	20000008 	.word	0x20000008

0800157c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001580:	4b05      	ldr	r3, [pc, #20]	@ (8001598 <HAL_IncTick+0x1c>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	4b05      	ldr	r3, [pc, #20]	@ (800159c <HAL_IncTick+0x20>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4413      	add	r3, r2
 800158c:	4a03      	ldr	r2, [pc, #12]	@ (800159c <HAL_IncTick+0x20>)
 800158e:	6013      	str	r3, [r2, #0]
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	2000000c 	.word	0x2000000c
 800159c:	2000035c 	.word	0x2000035c

080015a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;
 80015a4:	4b02      	ldr	r3, [pc, #8]	@ (80015b0 <HAL_GetTick+0x10>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	2000035c 	.word	0x2000035c

080015b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015bc:	f7ff fff0 	bl	80015a0 <HAL_GetTick>
 80015c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015cc:	d005      	beq.n	80015da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ce:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <HAL_Delay+0x44>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015da:	bf00      	nop
 80015dc:	f7ff ffe0 	bl	80015a0 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d8f7      	bhi.n	80015dc <HAL_Delay+0x28>
  {
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	2000000c 	.word	0x2000000c

080015fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800160c:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001618:	4013      	ands	r3, r2
 800161a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001624:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800162c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162e:	4a04      	ldr	r2, [pc, #16]	@ (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	60d3      	str	r3, [r2, #12]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001648:	4b04      	ldr	r3, [pc, #16]	@ (800165c <__NVIC_GetPriorityGrouping+0x18>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	f003 0307 	and.w	r3, r3, #7
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	6039      	str	r1, [r7, #0]
 800166a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	2b00      	cmp	r3, #0
 8001672:	db0a      	blt.n	800168a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	b2da      	uxtb	r2, r3
 8001678:	490c      	ldr	r1, [pc, #48]	@ (80016ac <__NVIC_SetPriority+0x4c>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	0112      	lsls	r2, r2, #4
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	440b      	add	r3, r1
 8001684:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001688:	e00a      	b.n	80016a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4908      	ldr	r1, [pc, #32]	@ (80016b0 <__NVIC_SetPriority+0x50>)
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	3b04      	subs	r3, #4
 8001698:	0112      	lsls	r2, r2, #4
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	440b      	add	r3, r1
 800169e:	761a      	strb	r2, [r3, #24]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000e100 	.word	0xe000e100
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b089      	sub	sp, #36	@ 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f1c3 0307 	rsb	r3, r3, #7
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	bf28      	it	cs
 80016d2:	2304      	movcs	r3, #4
 80016d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3304      	adds	r3, #4
 80016da:	2b06      	cmp	r3, #6
 80016dc:	d902      	bls.n	80016e4 <NVIC_EncodePriority+0x30>
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3b03      	subs	r3, #3
 80016e2:	e000      	b.n	80016e6 <NVIC_EncodePriority+0x32>
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43da      	mvns	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	401a      	ands	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	43d9      	mvns	r1, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	4313      	orrs	r3, r2
         );
}
 800170e:	4618      	mov	r0, r3
 8001710:	3724      	adds	r7, #36	@ 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3b01      	subs	r3, #1
 8001724:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001728:	d301      	bcc.n	800172e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172a:	2301      	movs	r3, #1
 800172c:	e00f      	b.n	800174e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172e:	4a0a      	ldr	r2, [pc, #40]	@ (8001758 <SysTick_Config+0x40>)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001736:	210f      	movs	r1, #15
 8001738:	f04f 30ff 	mov.w	r0, #4294967295
 800173c:	f7ff ff90 	bl	8001660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001740:	4b05      	ldr	r3, [pc, #20]	@ (8001758 <SysTick_Config+0x40>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001746:	4b04      	ldr	r3, [pc, #16]	@ (8001758 <SysTick_Config+0x40>)
 8001748:	2207      	movs	r2, #7
 800174a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	e000e010 	.word	0xe000e010

0800175c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ff49 	bl	80015fc <__NVIC_SetPriorityGrouping>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
 800177e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001784:	f7ff ff5e 	bl	8001644 <__NVIC_GetPriorityGrouping>
 8001788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	68b9      	ldr	r1, [r7, #8]
 800178e:	6978      	ldr	r0, [r7, #20]
 8001790:	f7ff ff90 	bl	80016b4 <NVIC_EncodePriority>
 8001794:	4602      	mov	r2, r0
 8001796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff5f 	bl	8001660 <__NVIC_SetPriority>
}
 80017a2:	bf00      	nop
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff ffb0 	bl	8001718 <SysTick_Config>
 80017b8:	4603      	mov	r3, r0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b08b      	sub	sp, #44	@ 0x2c
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d6:	e161      	b.n	8001a9c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017d8:	2201      	movs	r2, #1
 80017da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	69fa      	ldr	r2, [r7, #28]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	f040 8150 	bne.w	8001a96 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4a97      	ldr	r2, [pc, #604]	@ (8001a58 <HAL_GPIO_Init+0x294>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d05e      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001800:	4a95      	ldr	r2, [pc, #596]	@ (8001a58 <HAL_GPIO_Init+0x294>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d875      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 8001806:	4a95      	ldr	r2, [pc, #596]	@ (8001a5c <HAL_GPIO_Init+0x298>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d058      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 800180c:	4a93      	ldr	r2, [pc, #588]	@ (8001a5c <HAL_GPIO_Init+0x298>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d86f      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 8001812:	4a93      	ldr	r2, [pc, #588]	@ (8001a60 <HAL_GPIO_Init+0x29c>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d052      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001818:	4a91      	ldr	r2, [pc, #580]	@ (8001a60 <HAL_GPIO_Init+0x29c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d869      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 800181e:	4a91      	ldr	r2, [pc, #580]	@ (8001a64 <HAL_GPIO_Init+0x2a0>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d04c      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001824:	4a8f      	ldr	r2, [pc, #572]	@ (8001a64 <HAL_GPIO_Init+0x2a0>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d863      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 800182a:	4a8f      	ldr	r2, [pc, #572]	@ (8001a68 <HAL_GPIO_Init+0x2a4>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d046      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001830:	4a8d      	ldr	r2, [pc, #564]	@ (8001a68 <HAL_GPIO_Init+0x2a4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d85d      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 8001836:	2b12      	cmp	r3, #18
 8001838:	d82a      	bhi.n	8001890 <HAL_GPIO_Init+0xcc>
 800183a:	2b12      	cmp	r3, #18
 800183c:	d859      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 800183e:	a201      	add	r2, pc, #4	@ (adr r2, 8001844 <HAL_GPIO_Init+0x80>)
 8001840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001844:	080018bf 	.word	0x080018bf
 8001848:	08001899 	.word	0x08001899
 800184c:	080018ab 	.word	0x080018ab
 8001850:	080018ed 	.word	0x080018ed
 8001854:	080018f3 	.word	0x080018f3
 8001858:	080018f3 	.word	0x080018f3
 800185c:	080018f3 	.word	0x080018f3
 8001860:	080018f3 	.word	0x080018f3
 8001864:	080018f3 	.word	0x080018f3
 8001868:	080018f3 	.word	0x080018f3
 800186c:	080018f3 	.word	0x080018f3
 8001870:	080018f3 	.word	0x080018f3
 8001874:	080018f3 	.word	0x080018f3
 8001878:	080018f3 	.word	0x080018f3
 800187c:	080018f3 	.word	0x080018f3
 8001880:	080018f3 	.word	0x080018f3
 8001884:	080018f3 	.word	0x080018f3
 8001888:	080018a1 	.word	0x080018a1
 800188c:	080018b5 	.word	0x080018b5
 8001890:	4a76      	ldr	r2, [pc, #472]	@ (8001a6c <HAL_GPIO_Init+0x2a8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d013      	beq.n	80018be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001896:	e02c      	b.n	80018f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	623b      	str	r3, [r7, #32]
          break;
 800189e:	e029      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	3304      	adds	r3, #4
 80018a6:	623b      	str	r3, [r7, #32]
          break;
 80018a8:	e024      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	3308      	adds	r3, #8
 80018b0:	623b      	str	r3, [r7, #32]
          break;
 80018b2:	e01f      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	330c      	adds	r3, #12
 80018ba:	623b      	str	r3, [r7, #32]
          break;
 80018bc:	e01a      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d102      	bne.n	80018cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018c6:	2304      	movs	r3, #4
 80018c8:	623b      	str	r3, [r7, #32]
          break;
 80018ca:	e013      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d105      	bne.n	80018e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d4:	2308      	movs	r3, #8
 80018d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	611a      	str	r2, [r3, #16]
          break;
 80018de:	e009      	b.n	80018f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018e0:	2308      	movs	r3, #8
 80018e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	615a      	str	r2, [r3, #20]
          break;
 80018ea:	e003      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018ec:	2300      	movs	r3, #0
 80018ee:	623b      	str	r3, [r7, #32]
          break;
 80018f0:	e000      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          break;
 80018f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2bff      	cmp	r3, #255	@ 0xff
 80018f8:	d801      	bhi.n	80018fe <HAL_GPIO_Init+0x13a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	e001      	b.n	8001902 <HAL_GPIO_Init+0x13e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3304      	adds	r3, #4
 8001902:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	2bff      	cmp	r3, #255	@ 0xff
 8001908:	d802      	bhi.n	8001910 <HAL_GPIO_Init+0x14c>
 800190a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	e002      	b.n	8001916 <HAL_GPIO_Init+0x152>
 8001910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001912:	3b08      	subs	r3, #8
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	210f      	movs	r1, #15
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	401a      	ands	r2, r3
 8001928:	6a39      	ldr	r1, [r7, #32]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	fa01 f303 	lsl.w	r3, r1, r3
 8001930:	431a      	orrs	r2, r3
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 80a9 	beq.w	8001a96 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001944:	4b4a      	ldr	r3, [pc, #296]	@ (8001a70 <HAL_GPIO_Init+0x2ac>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4a49      	ldr	r2, [pc, #292]	@ (8001a70 <HAL_GPIO_Init+0x2ac>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6193      	str	r3, [r2, #24]
 8001950:	4b47      	ldr	r3, [pc, #284]	@ (8001a70 <HAL_GPIO_Init+0x2ac>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800195c:	4a45      	ldr	r2, [pc, #276]	@ (8001a74 <HAL_GPIO_Init+0x2b0>)
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	3302      	adds	r3, #2
 8001964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001968:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800196a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	220f      	movs	r2, #15
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	4013      	ands	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a3d      	ldr	r2, [pc, #244]	@ (8001a78 <HAL_GPIO_Init+0x2b4>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d00d      	beq.n	80019a4 <HAL_GPIO_Init+0x1e0>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a3c      	ldr	r2, [pc, #240]	@ (8001a7c <HAL_GPIO_Init+0x2b8>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d007      	beq.n	80019a0 <HAL_GPIO_Init+0x1dc>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a3b      	ldr	r2, [pc, #236]	@ (8001a80 <HAL_GPIO_Init+0x2bc>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d101      	bne.n	800199c <HAL_GPIO_Init+0x1d8>
 8001998:	2302      	movs	r3, #2
 800199a:	e004      	b.n	80019a6 <HAL_GPIO_Init+0x1e2>
 800199c:	2303      	movs	r3, #3
 800199e:	e002      	b.n	80019a6 <HAL_GPIO_Init+0x1e2>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <HAL_GPIO_Init+0x1e2>
 80019a4:	2300      	movs	r3, #0
 80019a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019a8:	f002 0203 	and.w	r2, r2, #3
 80019ac:	0092      	lsls	r2, r2, #2
 80019ae:	4093      	lsls	r3, r2
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019b6:	492f      	ldr	r1, [pc, #188]	@ (8001a74 <HAL_GPIO_Init+0x2b0>)
 80019b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ba:	089b      	lsrs	r3, r3, #2
 80019bc:	3302      	adds	r3, #2
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d006      	beq.n	80019de <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a84 <HAL_GPIO_Init+0x2c0>)
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	492b      	ldr	r1, [pc, #172]	@ (8001a84 <HAL_GPIO_Init+0x2c0>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	608b      	str	r3, [r1, #8]
 80019dc:	e006      	b.n	80019ec <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019de:	4b29      	ldr	r3, [pc, #164]	@ (8001a84 <HAL_GPIO_Init+0x2c0>)
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	4927      	ldr	r1, [pc, #156]	@ (8001a84 <HAL_GPIO_Init+0x2c0>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d006      	beq.n	8001a06 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019f8:	4b22      	ldr	r3, [pc, #136]	@ (8001a84 <HAL_GPIO_Init+0x2c0>)
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	4921      	ldr	r1, [pc, #132]	@ (8001a84 <HAL_GPIO_Init+0x2c0>)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	60cb      	str	r3, [r1, #12]
 8001a04:	e006      	b.n	8001a14 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a06:	4b1f      	ldr	r3, [pc, #124]	@ (8001a84 <HAL_GPIO_Init+0x2c0>)
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	491d      	ldr	r1, [pc, #116]	@ (8001a84 <HAL_GPIO_Init+0x2c0>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d006      	beq.n	8001a2e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a20:	4b18      	ldr	r3, [pc, #96]	@ (8001a84 <HAL_GPIO_Init+0x2c0>)
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	4917      	ldr	r1, [pc, #92]	@ (8001a84 <HAL_GPIO_Init+0x2c0>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	604b      	str	r3, [r1, #4]
 8001a2c:	e006      	b.n	8001a3c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a2e:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <HAL_GPIO_Init+0x2c0>)
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	4913      	ldr	r1, [pc, #76]	@ (8001a84 <HAL_GPIO_Init+0x2c0>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d01f      	beq.n	8001a88 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a48:	4b0e      	ldr	r3, [pc, #56]	@ (8001a84 <HAL_GPIO_Init+0x2c0>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	490d      	ldr	r1, [pc, #52]	@ (8001a84 <HAL_GPIO_Init+0x2c0>)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	600b      	str	r3, [r1, #0]
 8001a54:	e01f      	b.n	8001a96 <HAL_GPIO_Init+0x2d2>
 8001a56:	bf00      	nop
 8001a58:	10320000 	.word	0x10320000
 8001a5c:	10310000 	.word	0x10310000
 8001a60:	10220000 	.word	0x10220000
 8001a64:	10210000 	.word	0x10210000
 8001a68:	10120000 	.word	0x10120000
 8001a6c:	10110000 	.word	0x10110000
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40010000 	.word	0x40010000
 8001a78:	40010800 	.word	0x40010800
 8001a7c:	40010c00 	.word	0x40010c00
 8001a80:	40011000 	.word	0x40011000
 8001a84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a88:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab8 <HAL_GPIO_Init+0x2f4>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	4909      	ldr	r1, [pc, #36]	@ (8001ab8 <HAL_GPIO_Init+0x2f4>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	3301      	adds	r3, #1
 8001a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f47f ae96 	bne.w	80017d8 <HAL_GPIO_Init+0x14>
  }
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	372c      	adds	r7, #44	@ 0x2c
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	40010400 	.word	0x40010400

08001abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	807b      	strh	r3, [r7, #2]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001acc:	787b      	ldrb	r3, [r7, #1]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ad2:	887a      	ldrh	r2, [r7, #2]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ad8:	e003      	b.n	8001ae2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ada:	887b      	ldrh	r3, [r7, #2]
 8001adc:	041a      	lsls	r2, r3, #16
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	611a      	str	r2, [r3, #16]
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr

08001aec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e272      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 8087 	beq.w	8001c1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b0c:	4b92      	ldr	r3, [pc, #584]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 030c 	and.w	r3, r3, #12
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d00c      	beq.n	8001b32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b18:	4b8f      	ldr	r3, [pc, #572]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d112      	bne.n	8001b4a <HAL_RCC_OscConfig+0x5e>
 8001b24:	4b8c      	ldr	r3, [pc, #560]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b30:	d10b      	bne.n	8001b4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b32:	4b89      	ldr	r3, [pc, #548]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d06c      	beq.n	8001c18 <HAL_RCC_OscConfig+0x12c>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d168      	bne.n	8001c18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e24c      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b52:	d106      	bne.n	8001b62 <HAL_RCC_OscConfig+0x76>
 8001b54:	4b80      	ldr	r3, [pc, #512]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a7f      	ldr	r2, [pc, #508]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	e02e      	b.n	8001bc0 <HAL_RCC_OscConfig+0xd4>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x98>
 8001b6a:	4b7b      	ldr	r3, [pc, #492]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a7a      	ldr	r2, [pc, #488]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	4b78      	ldr	r3, [pc, #480]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a77      	ldr	r2, [pc, #476]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e01d      	b.n	8001bc0 <HAL_RCC_OscConfig+0xd4>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b8c:	d10c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0xbc>
 8001b8e:	4b72      	ldr	r3, [pc, #456]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a71      	ldr	r2, [pc, #452]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	4b6f      	ldr	r3, [pc, #444]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a6e      	ldr	r2, [pc, #440]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	e00b      	b.n	8001bc0 <HAL_RCC_OscConfig+0xd4>
 8001ba8:	4b6b      	ldr	r3, [pc, #428]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a6a      	ldr	r2, [pc, #424]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001bae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4b68      	ldr	r3, [pc, #416]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a67      	ldr	r2, [pc, #412]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001bba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d013      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fcea 	bl	80015a0 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd0:	f7ff fce6 	bl	80015a0 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b64      	cmp	r3, #100	@ 0x64
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e200      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	4b5d      	ldr	r3, [pc, #372]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0xe4>
 8001bee:	e014      	b.n	8001c1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fcd6 	bl	80015a0 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf8:	f7ff fcd2 	bl	80015a0 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b64      	cmp	r3, #100	@ 0x64
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e1ec      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0a:	4b53      	ldr	r3, [pc, #332]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x10c>
 8001c16:	e000      	b.n	8001c1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d063      	beq.n	8001cee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c26:	4b4c      	ldr	r3, [pc, #304]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00b      	beq.n	8001c4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c32:	4b49      	ldr	r3, [pc, #292]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d11c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x18c>
 8001c3e:	4b46      	ldr	r3, [pc, #280]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d116      	bne.n	8001c78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4a:	4b43      	ldr	r3, [pc, #268]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <HAL_RCC_OscConfig+0x176>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d001      	beq.n	8001c62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e1c0      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c62:	4b3d      	ldr	r3, [pc, #244]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4939      	ldr	r1, [pc, #228]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c76:	e03a      	b.n	8001cee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d020      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c80:	4b36      	ldr	r3, [pc, #216]	@ (8001d5c <HAL_RCC_OscConfig+0x270>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7ff fc8b 	bl	80015a0 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c8e:	f7ff fc87 	bl	80015a0 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e1a1      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca0:	4b2d      	ldr	r3, [pc, #180]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0f0      	beq.n	8001c8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cac:	4b2a      	ldr	r3, [pc, #168]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4927      	ldr	r1, [pc, #156]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]
 8001cc0:	e015      	b.n	8001cee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc2:	4b26      	ldr	r3, [pc, #152]	@ (8001d5c <HAL_RCC_OscConfig+0x270>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fc6a 	bl	80015a0 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd0:	f7ff fc66 	bl	80015a0 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e180      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d03a      	beq.n	8001d70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d019      	beq.n	8001d36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d02:	4b17      	ldr	r3, [pc, #92]	@ (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d08:	f7ff fc4a 	bl	80015a0 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d10:	f7ff fc46 	bl	80015a0 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e160      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d22:	4b0d      	ldr	r3, [pc, #52]	@ (8001d58 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f000 fa9c 	bl	800226c <RCC_Delay>
 8001d34:	e01c      	b.n	8001d70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d36:	4b0a      	ldr	r3, [pc, #40]	@ (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3c:	f7ff fc30 	bl	80015a0 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d42:	e00f      	b.n	8001d64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d44:	f7ff fc2c 	bl	80015a0 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d908      	bls.n	8001d64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e146      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
 8001d56:	bf00      	nop
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	42420000 	.word	0x42420000
 8001d60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d64:	4b92      	ldr	r3, [pc, #584]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1e9      	bne.n	8001d44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 80a6 	beq.w	8001eca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d82:	4b8b      	ldr	r3, [pc, #556]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10d      	bne.n	8001daa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	4b88      	ldr	r3, [pc, #544]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	4a87      	ldr	r2, [pc, #540]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d98:	61d3      	str	r3, [r2, #28]
 8001d9a:	4b85      	ldr	r3, [pc, #532]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001da6:	2301      	movs	r3, #1
 8001da8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001daa:	4b82      	ldr	r3, [pc, #520]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d118      	bne.n	8001de8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db6:	4b7f      	ldr	r3, [pc, #508]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a7e      	ldr	r2, [pc, #504]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c8>)
 8001dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dc2:	f7ff fbed 	bl	80015a0 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dca:	f7ff fbe9 	bl	80015a0 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b64      	cmp	r3, #100	@ 0x64
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e103      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ddc:	4b75      	ldr	r3, [pc, #468]	@ (8001fb4 <HAL_RCC_OscConfig+0x4c8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d106      	bne.n	8001dfe <HAL_RCC_OscConfig+0x312>
 8001df0:	4b6f      	ldr	r3, [pc, #444]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	4a6e      	ldr	r2, [pc, #440]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	6213      	str	r3, [r2, #32]
 8001dfc:	e02d      	b.n	8001e5a <HAL_RCC_OscConfig+0x36e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10c      	bne.n	8001e20 <HAL_RCC_OscConfig+0x334>
 8001e06:	4b6a      	ldr	r3, [pc, #424]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	4a69      	ldr	r2, [pc, #420]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	f023 0301 	bic.w	r3, r3, #1
 8001e10:	6213      	str	r3, [r2, #32]
 8001e12:	4b67      	ldr	r3, [pc, #412]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	4a66      	ldr	r2, [pc, #408]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	f023 0304 	bic.w	r3, r3, #4
 8001e1c:	6213      	str	r3, [r2, #32]
 8001e1e:	e01c      	b.n	8001e5a <HAL_RCC_OscConfig+0x36e>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	2b05      	cmp	r3, #5
 8001e26:	d10c      	bne.n	8001e42 <HAL_RCC_OscConfig+0x356>
 8001e28:	4b61      	ldr	r3, [pc, #388]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	4a60      	ldr	r2, [pc, #384]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	6213      	str	r3, [r2, #32]
 8001e34:	4b5e      	ldr	r3, [pc, #376]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	4a5d      	ldr	r2, [pc, #372]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6213      	str	r3, [r2, #32]
 8001e40:	e00b      	b.n	8001e5a <HAL_RCC_OscConfig+0x36e>
 8001e42:	4b5b      	ldr	r3, [pc, #364]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	4a5a      	ldr	r2, [pc, #360]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	f023 0301 	bic.w	r3, r3, #1
 8001e4c:	6213      	str	r3, [r2, #32]
 8001e4e:	4b58      	ldr	r3, [pc, #352]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	4a57      	ldr	r2, [pc, #348]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	f023 0304 	bic.w	r3, r3, #4
 8001e58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d015      	beq.n	8001e8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e62:	f7ff fb9d 	bl	80015a0 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e68:	e00a      	b.n	8001e80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6a:	f7ff fb99 	bl	80015a0 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e0b1      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e80:	4b4b      	ldr	r3, [pc, #300]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0ee      	beq.n	8001e6a <HAL_RCC_OscConfig+0x37e>
 8001e8c:	e014      	b.n	8001eb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8e:	f7ff fb87 	bl	80015a0 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e94:	e00a      	b.n	8001eac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e96:	f7ff fb83 	bl	80015a0 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e09b      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eac:	4b40      	ldr	r3, [pc, #256]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1ee      	bne.n	8001e96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001eb8:	7dfb      	ldrb	r3, [r7, #23]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d105      	bne.n	8001eca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ebe:	4b3c      	ldr	r3, [pc, #240]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	4a3b      	ldr	r2, [pc, #236]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ec8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 8087 	beq.w	8001fe2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ed4:	4b36      	ldr	r3, [pc, #216]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 030c 	and.w	r3, r3, #12
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d061      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d146      	bne.n	8001f76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee8:	4b33      	ldr	r3, [pc, #204]	@ (8001fb8 <HAL_RCC_OscConfig+0x4cc>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eee:	f7ff fb57 	bl	80015a0 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef6:	f7ff fb53 	bl	80015a0 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e06d      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f08:	4b29      	ldr	r3, [pc, #164]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1f0      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f1c:	d108      	bne.n	8001f30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f1e:	4b24      	ldr	r3, [pc, #144]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	4921      	ldr	r1, [pc, #132]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f30:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a19      	ldr	r1, [r3, #32]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f40:	430b      	orrs	r3, r1
 8001f42:	491b      	ldr	r1, [pc, #108]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f48:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb8 <HAL_RCC_OscConfig+0x4cc>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4e:	f7ff fb27 	bl	80015a0 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f56:	f7ff fb23 	bl	80015a0 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e03d      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f68:	4b11      	ldr	r3, [pc, #68]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0f0      	beq.n	8001f56 <HAL_RCC_OscConfig+0x46a>
 8001f74:	e035      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f76:	4b10      	ldr	r3, [pc, #64]	@ (8001fb8 <HAL_RCC_OscConfig+0x4cc>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7ff fb10 	bl	80015a0 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f84:	f7ff fb0c 	bl	80015a0 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e026      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f96:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x498>
 8001fa2:	e01e      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d107      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e019      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40007000 	.word	0x40007000
 8001fb8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001fec <HAL_RCC_OscConfig+0x500>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d106      	bne.n	8001fde <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d001      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40021000 	.word	0x40021000

08001ff0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0d0      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002004:	4b6a      	ldr	r3, [pc, #424]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d910      	bls.n	8002034 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002012:	4b67      	ldr	r3, [pc, #412]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 0207 	bic.w	r2, r3, #7
 800201a:	4965      	ldr	r1, [pc, #404]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	4313      	orrs	r3, r2
 8002020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002022:	4b63      	ldr	r3, [pc, #396]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d001      	beq.n	8002034 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0b8      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d020      	beq.n	8002082 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800204c:	4b59      	ldr	r3, [pc, #356]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	4a58      	ldr	r2, [pc, #352]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002056:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002064:	4b53      	ldr	r3, [pc, #332]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	4a52      	ldr	r2, [pc, #328]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800206e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002070:	4b50      	ldr	r3, [pc, #320]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	494d      	ldr	r1, [pc, #308]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	4313      	orrs	r3, r2
 8002080:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d040      	beq.n	8002110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002096:	4b47      	ldr	r3, [pc, #284]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d115      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e07f      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ae:	4b41      	ldr	r3, [pc, #260]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d109      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e073      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020be:	4b3d      	ldr	r3, [pc, #244]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e06b      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ce:	4b39      	ldr	r3, [pc, #228]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f023 0203 	bic.w	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	4936      	ldr	r1, [pc, #216]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e0:	f7ff fa5e 	bl	80015a0 <HAL_GetTick>
 80020e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	e00a      	b.n	80020fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e8:	f7ff fa5a 	bl	80015a0 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e053      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	4b2d      	ldr	r3, [pc, #180]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 020c 	and.w	r2, r3, #12
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	429a      	cmp	r2, r3
 800210e:	d1eb      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002110:	4b27      	ldr	r3, [pc, #156]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d210      	bcs.n	8002140 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211e:	4b24      	ldr	r3, [pc, #144]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 0207 	bic.w	r2, r3, #7
 8002126:	4922      	ldr	r1, [pc, #136]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	4313      	orrs	r3, r2
 800212c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800212e:	4b20      	ldr	r3, [pc, #128]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d001      	beq.n	8002140 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e032      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d008      	beq.n	800215e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800214c:	4b19      	ldr	r3, [pc, #100]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4916      	ldr	r1, [pc, #88]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	4313      	orrs	r3, r2
 800215c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d009      	beq.n	800217e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800216a:	4b12      	ldr	r3, [pc, #72]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	490e      	ldr	r1, [pc, #56]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800217e:	f000 f821 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 8002182:	4602      	mov	r2, r0
 8002184:	4b0b      	ldr	r3, [pc, #44]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	490a      	ldr	r1, [pc, #40]	@ (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002190:	5ccb      	ldrb	r3, [r1, r3]
 8002192:	fa22 f303 	lsr.w	r3, r2, r3
 8002196:	4a09      	ldr	r2, [pc, #36]	@ (80021bc <HAL_RCC_ClockConfig+0x1cc>)
 8002198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800219a:	4b09      	ldr	r3, [pc, #36]	@ (80021c0 <HAL_RCC_ClockConfig+0x1d0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff f9bc 	bl	800151c <HAL_InitTick>

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40022000 	.word	0x40022000
 80021b4:	40021000 	.word	0x40021000
 80021b8:	08003454 	.word	0x08003454
 80021bc:	20000004 	.word	0x20000004
 80021c0:	20000008 	.word	0x20000008

080021c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	2300      	movs	r3, #0
 80021d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021de:	4b1e      	ldr	r3, [pc, #120]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x94>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d002      	beq.n	80021f4 <HAL_RCC_GetSysClockFreq+0x30>
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d003      	beq.n	80021fa <HAL_RCC_GetSysClockFreq+0x36>
 80021f2:	e027      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021f4:	4b19      	ldr	r3, [pc, #100]	@ (800225c <HAL_RCC_GetSysClockFreq+0x98>)
 80021f6:	613b      	str	r3, [r7, #16]
      break;
 80021f8:	e027      	b.n	800224a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	0c9b      	lsrs	r3, r3, #18
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	4a17      	ldr	r2, [pc, #92]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002204:	5cd3      	ldrb	r3, [r2, r3]
 8002206:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d010      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002212:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x94>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	0c5b      	lsrs	r3, r3, #17
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	4a11      	ldr	r2, [pc, #68]	@ (8002264 <HAL_RCC_GetSysClockFreq+0xa0>)
 800221e:	5cd3      	ldrb	r3, [r2, r3]
 8002220:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a0d      	ldr	r2, [pc, #52]	@ (800225c <HAL_RCC_GetSysClockFreq+0x98>)
 8002226:	fb03 f202 	mul.w	r2, r3, r2
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	e004      	b.n	800223e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a0c      	ldr	r2, [pc, #48]	@ (8002268 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002238:	fb02 f303 	mul.w	r3, r2, r3
 800223c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	613b      	str	r3, [r7, #16]
      break;
 8002242:	e002      	b.n	800224a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002244:	4b05      	ldr	r3, [pc, #20]	@ (800225c <HAL_RCC_GetSysClockFreq+0x98>)
 8002246:	613b      	str	r3, [r7, #16]
      break;
 8002248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800224a:	693b      	ldr	r3, [r7, #16]
}
 800224c:	4618      	mov	r0, r3
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000
 800225c:	007a1200 	.word	0x007a1200
 8002260:	08003464 	.word	0x08003464
 8002264:	08003474 	.word	0x08003474
 8002268:	003d0900 	.word	0x003d0900

0800226c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002274:	4b0a      	ldr	r3, [pc, #40]	@ (80022a0 <RCC_Delay+0x34>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0a      	ldr	r2, [pc, #40]	@ (80022a4 <RCC_Delay+0x38>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	0a5b      	lsrs	r3, r3, #9
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002288:	bf00      	nop
  }
  while (Delay --);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1e5a      	subs	r2, r3, #1
 800228e:	60fa      	str	r2, [r7, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f9      	bne.n	8002288 <RCC_Delay+0x1c>
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	20000004 	.word	0x20000004
 80022a4:	10624dd3 	.word	0x10624dd3

080022a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e076      	b.n	80023a8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d108      	bne.n	80022d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022ca:	d009      	beq.n	80022e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	61da      	str	r2, [r3, #28]
 80022d2:	e005      	b.n	80022e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d106      	bne.n	8002300 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff f862 	bl	80013c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002316:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002364:	ea42 0103 	orr.w	r1, r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	0c1a      	lsrs	r2, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f002 0204 	and.w	r2, r2, #4
 8002386:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	69da      	ldr	r2, [r3, #28]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002396:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	603b      	str	r3, [r7, #0]
 80023bc:	4613      	mov	r3, r2
 80023be:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023c0:	f7ff f8ee 	bl	80015a0 <HAL_GetTick>
 80023c4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d001      	beq.n	80023da <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80023d6:	2302      	movs	r3, #2
 80023d8:	e12a      	b.n	8002630 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <HAL_SPI_Transmit+0x36>
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e122      	b.n	8002630 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_SPI_Transmit+0x48>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e11b      	b.n	8002630 <HAL_SPI_Transmit+0x280>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2203      	movs	r2, #3
 8002404:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	88fa      	ldrh	r2, [r7, #6]
 8002418:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	88fa      	ldrh	r2, [r7, #6]
 800241e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002446:	d10f      	bne.n	8002468 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002456:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002466:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002472:	2b40      	cmp	r3, #64	@ 0x40
 8002474:	d007      	beq.n	8002486 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002484:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800248e:	d152      	bne.n	8002536 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <HAL_SPI_Transmit+0xee>
 8002498:	8b7b      	ldrh	r3, [r7, #26]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d145      	bne.n	800252a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	881a      	ldrh	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ae:	1c9a      	adds	r2, r3, #2
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80024c2:	e032      	b.n	800252a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d112      	bne.n	80024f8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	881a      	ldrh	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e2:	1c9a      	adds	r2, r3, #2
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80024f6:	e018      	b.n	800252a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024f8:	f7ff f852 	bl	80015a0 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d803      	bhi.n	8002510 <HAL_SPI_Transmit+0x160>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250e:	d102      	bne.n	8002516 <HAL_SPI_Transmit+0x166>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d109      	bne.n	800252a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e082      	b.n	8002630 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800252e:	b29b      	uxth	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1c7      	bne.n	80024c4 <HAL_SPI_Transmit+0x114>
 8002534:	e053      	b.n	80025de <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <HAL_SPI_Transmit+0x194>
 800253e:	8b7b      	ldrh	r3, [r7, #26]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d147      	bne.n	80025d4 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	330c      	adds	r3, #12
 800254e:	7812      	ldrb	r2, [r2, #0]
 8002550:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002560:	b29b      	uxth	r3, r3
 8002562:	3b01      	subs	r3, #1
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800256a:	e033      	b.n	80025d4 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b02      	cmp	r3, #2
 8002578:	d113      	bne.n	80025a2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	330c      	adds	r3, #12
 8002584:	7812      	ldrb	r2, [r2, #0]
 8002586:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002596:	b29b      	uxth	r3, r3
 8002598:	3b01      	subs	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	86da      	strh	r2, [r3, #54]	@ 0x36
 80025a0:	e018      	b.n	80025d4 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025a2:	f7fe fffd 	bl	80015a0 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d803      	bhi.n	80025ba <HAL_SPI_Transmit+0x20a>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b8:	d102      	bne.n	80025c0 <HAL_SPI_Transmit+0x210>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d109      	bne.n	80025d4 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e02d      	b.n	8002630 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1c6      	bne.n	800256c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	6839      	ldr	r1, [r7, #0]
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 f8be 	bl	8002764 <SPI_EndRxTxTransaction>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2220      	movs	r2, #32
 80025f2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10a      	bne.n	8002612 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800262e:	2300      	movs	r3, #0
  }
}
 8002630:	4618      	mov	r0, r3
 8002632:	3720      	adds	r7, #32
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002646:	b2db      	uxtb	r3, r3
}
 8002648:	4618      	mov	r0, r3
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr
	...

08002654 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b088      	sub	sp, #32
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	4613      	mov	r3, r2
 8002662:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002664:	f7fe ff9c 	bl	80015a0 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	4413      	add	r3, r2
 8002672:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002674:	f7fe ff94 	bl	80015a0 <HAL_GetTick>
 8002678:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800267a:	4b39      	ldr	r3, [pc, #228]	@ (8002760 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	015b      	lsls	r3, r3, #5
 8002680:	0d1b      	lsrs	r3, r3, #20
 8002682:	69fa      	ldr	r2, [r7, #28]
 8002684:	fb02 f303 	mul.w	r3, r2, r3
 8002688:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800268a:	e054      	b.n	8002736 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002692:	d050      	beq.n	8002736 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002694:	f7fe ff84 	bl	80015a0 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	69fa      	ldr	r2, [r7, #28]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d902      	bls.n	80026aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d13d      	bne.n	8002726 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80026b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026c2:	d111      	bne.n	80026e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026cc:	d004      	beq.n	80026d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026d6:	d107      	bne.n	80026e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026f0:	d10f      	bne.n	8002712 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002710:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e017      	b.n	8002756 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	3b01      	subs	r3, #1
 8002734:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	4013      	ands	r3, r2
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	429a      	cmp	r2, r3
 8002744:	bf0c      	ite	eq
 8002746:	2301      	moveq	r3, #1
 8002748:	2300      	movne	r3, #0
 800274a:	b2db      	uxtb	r3, r3
 800274c:	461a      	mov	r2, r3
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	429a      	cmp	r2, r3
 8002752:	d19b      	bne.n	800268c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3720      	adds	r7, #32
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000004 	.word	0x20000004

08002764 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af02      	add	r7, sp, #8
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2201      	movs	r2, #1
 8002778:	2102      	movs	r1, #2
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f7ff ff6a 	bl	8002654 <SPI_WaitFlagStateUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d007      	beq.n	8002796 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800278a:	f043 0220 	orr.w	r2, r3, #32
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e013      	b.n	80027be <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2200      	movs	r2, #0
 800279e:	2180      	movs	r1, #128	@ 0x80
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f7ff ff57 	bl	8002654 <SPI_WaitFlagStateUntilTimeout>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d007      	beq.n	80027bc <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b0:	f043 0220 	orr.w	r2, r3, #32
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e000      	b.n	80027be <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <memset>:
 80027c6:	4603      	mov	r3, r0
 80027c8:	4402      	add	r2, r0
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d100      	bne.n	80027d0 <memset+0xa>
 80027ce:	4770      	bx	lr
 80027d0:	f803 1b01 	strb.w	r1, [r3], #1
 80027d4:	e7f9      	b.n	80027ca <memset+0x4>
	...

080027d8 <__libc_init_array>:
 80027d8:	b570      	push	{r4, r5, r6, lr}
 80027da:	2600      	movs	r6, #0
 80027dc:	4d0c      	ldr	r5, [pc, #48]	@ (8002810 <__libc_init_array+0x38>)
 80027de:	4c0d      	ldr	r4, [pc, #52]	@ (8002814 <__libc_init_array+0x3c>)
 80027e0:	1b64      	subs	r4, r4, r5
 80027e2:	10a4      	asrs	r4, r4, #2
 80027e4:	42a6      	cmp	r6, r4
 80027e6:	d109      	bne.n	80027fc <__libc_init_array+0x24>
 80027e8:	f000 fe28 	bl	800343c <_init>
 80027ec:	2600      	movs	r6, #0
 80027ee:	4d0a      	ldr	r5, [pc, #40]	@ (8002818 <__libc_init_array+0x40>)
 80027f0:	4c0a      	ldr	r4, [pc, #40]	@ (800281c <__libc_init_array+0x44>)
 80027f2:	1b64      	subs	r4, r4, r5
 80027f4:	10a4      	asrs	r4, r4, #2
 80027f6:	42a6      	cmp	r6, r4
 80027f8:	d105      	bne.n	8002806 <__libc_init_array+0x2e>
 80027fa:	bd70      	pop	{r4, r5, r6, pc}
 80027fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002800:	4798      	blx	r3
 8002802:	3601      	adds	r6, #1
 8002804:	e7ee      	b.n	80027e4 <__libc_init_array+0xc>
 8002806:	f855 3b04 	ldr.w	r3, [r5], #4
 800280a:	4798      	blx	r3
 800280c:	3601      	adds	r6, #1
 800280e:	e7f2      	b.n	80027f6 <__libc_init_array+0x1e>
 8002810:	08003848 	.word	0x08003848
 8002814:	08003848 	.word	0x08003848
 8002818:	08003848 	.word	0x08003848
 800281c:	0800384c 	.word	0x0800384c

08002820 <sinf>:
 8002820:	b507      	push	{r0, r1, r2, lr}
 8002822:	4a1b      	ldr	r2, [pc, #108]	@ (8002890 <sinf+0x70>)
 8002824:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8002828:	4293      	cmp	r3, r2
 800282a:	4601      	mov	r1, r0
 800282c:	d806      	bhi.n	800283c <sinf+0x1c>
 800282e:	2200      	movs	r2, #0
 8002830:	2100      	movs	r1, #0
 8002832:	b003      	add	sp, #12
 8002834:	f85d eb04 	ldr.w	lr, [sp], #4
 8002838:	f000 b8f2 	b.w	8002a20 <__kernel_sinf>
 800283c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8002840:	d304      	bcc.n	800284c <sinf+0x2c>
 8002842:	f7fe f8c7 	bl	80009d4 <__aeabi_fsub>
 8002846:	b003      	add	sp, #12
 8002848:	f85d fb04 	ldr.w	pc, [sp], #4
 800284c:	4669      	mov	r1, sp
 800284e:	f000 f95d 	bl	8002b0c <__ieee754_rem_pio2f>
 8002852:	f000 0003 	and.w	r0, r0, #3
 8002856:	2801      	cmp	r0, #1
 8002858:	d008      	beq.n	800286c <sinf+0x4c>
 800285a:	2802      	cmp	r0, #2
 800285c:	d00b      	beq.n	8002876 <sinf+0x56>
 800285e:	b990      	cbnz	r0, 8002886 <sinf+0x66>
 8002860:	2201      	movs	r2, #1
 8002862:	9901      	ldr	r1, [sp, #4]
 8002864:	9800      	ldr	r0, [sp, #0]
 8002866:	f000 f8db 	bl	8002a20 <__kernel_sinf>
 800286a:	e7ec      	b.n	8002846 <sinf+0x26>
 800286c:	9901      	ldr	r1, [sp, #4]
 800286e:	9800      	ldr	r0, [sp, #0]
 8002870:	f000 f856 	bl	8002920 <__kernel_cosf>
 8002874:	e7e7      	b.n	8002846 <sinf+0x26>
 8002876:	2201      	movs	r2, #1
 8002878:	9901      	ldr	r1, [sp, #4]
 800287a:	9800      	ldr	r0, [sp, #0]
 800287c:	f000 f8d0 	bl	8002a20 <__kernel_sinf>
 8002880:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8002884:	e7df      	b.n	8002846 <sinf+0x26>
 8002886:	9901      	ldr	r1, [sp, #4]
 8002888:	9800      	ldr	r0, [sp, #0]
 800288a:	f000 f849 	bl	8002920 <__kernel_cosf>
 800288e:	e7f7      	b.n	8002880 <sinf+0x60>
 8002890:	3f490fd8 	.word	0x3f490fd8

08002894 <round>:
 8002894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002896:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800289a:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 800289e:	2a13      	cmp	r2, #19
 80028a0:	4604      	mov	r4, r0
 80028a2:	460d      	mov	r5, r1
 80028a4:	460b      	mov	r3, r1
 80028a6:	dc1a      	bgt.n	80028de <round+0x4a>
 80028a8:	2a00      	cmp	r2, #0
 80028aa:	da0b      	bge.n	80028c4 <round+0x30>
 80028ac:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80028b0:	3201      	adds	r2, #1
 80028b2:	bf04      	itt	eq
 80028b4:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 80028b8:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 80028bc:	2200      	movs	r2, #0
 80028be:	461d      	mov	r5, r3
 80028c0:	4614      	mov	r4, r2
 80028c2:	e016      	b.n	80028f2 <round+0x5e>
 80028c4:	4815      	ldr	r0, [pc, #84]	@ (800291c <round+0x88>)
 80028c6:	4110      	asrs	r0, r2
 80028c8:	4001      	ands	r1, r0
 80028ca:	4321      	orrs	r1, r4
 80028cc:	d011      	beq.n	80028f2 <round+0x5e>
 80028ce:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80028d2:	fa41 f202 	asr.w	r2, r1, r2
 80028d6:	4413      	add	r3, r2
 80028d8:	ea23 0300 	bic.w	r3, r3, r0
 80028dc:	e7ee      	b.n	80028bc <round+0x28>
 80028de:	2a33      	cmp	r2, #51	@ 0x33
 80028e0:	dd0a      	ble.n	80028f8 <round+0x64>
 80028e2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80028e6:	d104      	bne.n	80028f2 <round+0x5e>
 80028e8:	4602      	mov	r2, r0
 80028ea:	f7fd fc37 	bl	800015c <__adddf3>
 80028ee:	4604      	mov	r4, r0
 80028f0:	460d      	mov	r5, r1
 80028f2:	4620      	mov	r0, r4
 80028f4:	4629      	mov	r1, r5
 80028f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028f8:	f04f 30ff 	mov.w	r0, #4294967295
 80028fc:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8002900:	40f8      	lsrs	r0, r7
 8002902:	4220      	tst	r0, r4
 8002904:	d0f5      	beq.n	80028f2 <round+0x5e>
 8002906:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800290a:	2201      	movs	r2, #1
 800290c:	408a      	lsls	r2, r1
 800290e:	1912      	adds	r2, r2, r4
 8002910:	bf28      	it	cs
 8002912:	3301      	addcs	r3, #1
 8002914:	ea22 0200 	bic.w	r2, r2, r0
 8002918:	e7d1      	b.n	80028be <round+0x2a>
 800291a:	bf00      	nop
 800291c:	000fffff 	.word	0x000fffff

08002920 <__kernel_cosf>:
 8002920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002924:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8002928:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 800292c:	4606      	mov	r6, r0
 800292e:	4688      	mov	r8, r1
 8002930:	d203      	bcs.n	800293a <__kernel_cosf+0x1a>
 8002932:	f7fe fb1f 	bl	8000f74 <__aeabi_f2iz>
 8002936:	2800      	cmp	r0, #0
 8002938:	d05c      	beq.n	80029f4 <__kernel_cosf+0xd4>
 800293a:	4631      	mov	r1, r6
 800293c:	4630      	mov	r0, r6
 800293e:	f7fe f953 	bl	8000be8 <__aeabi_fmul>
 8002942:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002946:	4604      	mov	r4, r0
 8002948:	f7fe f94e 	bl	8000be8 <__aeabi_fmul>
 800294c:	492b      	ldr	r1, [pc, #172]	@ (80029fc <__kernel_cosf+0xdc>)
 800294e:	4607      	mov	r7, r0
 8002950:	4620      	mov	r0, r4
 8002952:	f7fe f949 	bl	8000be8 <__aeabi_fmul>
 8002956:	492a      	ldr	r1, [pc, #168]	@ (8002a00 <__kernel_cosf+0xe0>)
 8002958:	f7fe f83e 	bl	80009d8 <__addsf3>
 800295c:	4621      	mov	r1, r4
 800295e:	f7fe f943 	bl	8000be8 <__aeabi_fmul>
 8002962:	4928      	ldr	r1, [pc, #160]	@ (8002a04 <__kernel_cosf+0xe4>)
 8002964:	f7fe f836 	bl	80009d4 <__aeabi_fsub>
 8002968:	4621      	mov	r1, r4
 800296a:	f7fe f93d 	bl	8000be8 <__aeabi_fmul>
 800296e:	4926      	ldr	r1, [pc, #152]	@ (8002a08 <__kernel_cosf+0xe8>)
 8002970:	f7fe f832 	bl	80009d8 <__addsf3>
 8002974:	4621      	mov	r1, r4
 8002976:	f7fe f937 	bl	8000be8 <__aeabi_fmul>
 800297a:	4924      	ldr	r1, [pc, #144]	@ (8002a0c <__kernel_cosf+0xec>)
 800297c:	f7fe f82a 	bl	80009d4 <__aeabi_fsub>
 8002980:	4621      	mov	r1, r4
 8002982:	f7fe f931 	bl	8000be8 <__aeabi_fmul>
 8002986:	4922      	ldr	r1, [pc, #136]	@ (8002a10 <__kernel_cosf+0xf0>)
 8002988:	f7fe f826 	bl	80009d8 <__addsf3>
 800298c:	4621      	mov	r1, r4
 800298e:	f7fe f92b 	bl	8000be8 <__aeabi_fmul>
 8002992:	4621      	mov	r1, r4
 8002994:	f7fe f928 	bl	8000be8 <__aeabi_fmul>
 8002998:	4641      	mov	r1, r8
 800299a:	4604      	mov	r4, r0
 800299c:	4630      	mov	r0, r6
 800299e:	f7fe f923 	bl	8000be8 <__aeabi_fmul>
 80029a2:	4601      	mov	r1, r0
 80029a4:	4620      	mov	r0, r4
 80029a6:	f7fe f815 	bl	80009d4 <__aeabi_fsub>
 80029aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002a14 <__kernel_cosf+0xf4>)
 80029ac:	4604      	mov	r4, r0
 80029ae:	429d      	cmp	r5, r3
 80029b0:	d80a      	bhi.n	80029c8 <__kernel_cosf+0xa8>
 80029b2:	4601      	mov	r1, r0
 80029b4:	4638      	mov	r0, r7
 80029b6:	f7fe f80d 	bl	80009d4 <__aeabi_fsub>
 80029ba:	4601      	mov	r1, r0
 80029bc:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80029c0:	f7fe f808 	bl	80009d4 <__aeabi_fsub>
 80029c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029c8:	4b13      	ldr	r3, [pc, #76]	@ (8002a18 <__kernel_cosf+0xf8>)
 80029ca:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80029ce:	429d      	cmp	r5, r3
 80029d0:	bf8c      	ite	hi
 80029d2:	4d12      	ldrhi	r5, [pc, #72]	@ (8002a1c <__kernel_cosf+0xfc>)
 80029d4:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 80029d8:	4629      	mov	r1, r5
 80029da:	f7fd fffb 	bl	80009d4 <__aeabi_fsub>
 80029de:	4629      	mov	r1, r5
 80029e0:	4606      	mov	r6, r0
 80029e2:	4638      	mov	r0, r7
 80029e4:	f7fd fff6 	bl	80009d4 <__aeabi_fsub>
 80029e8:	4621      	mov	r1, r4
 80029ea:	f7fd fff3 	bl	80009d4 <__aeabi_fsub>
 80029ee:	4601      	mov	r1, r0
 80029f0:	4630      	mov	r0, r6
 80029f2:	e7e5      	b.n	80029c0 <__kernel_cosf+0xa0>
 80029f4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80029f8:	e7e4      	b.n	80029c4 <__kernel_cosf+0xa4>
 80029fa:	bf00      	nop
 80029fc:	ad47d74e 	.word	0xad47d74e
 8002a00:	310f74f6 	.word	0x310f74f6
 8002a04:	3493f27c 	.word	0x3493f27c
 8002a08:	37d00d01 	.word	0x37d00d01
 8002a0c:	3ab60b61 	.word	0x3ab60b61
 8002a10:	3d2aaaab 	.word	0x3d2aaaab
 8002a14:	3e999999 	.word	0x3e999999
 8002a18:	3f480000 	.word	0x3f480000
 8002a1c:	3e900000 	.word	0x3e900000

08002a20 <__kernel_sinf>:
 8002a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a24:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8002a28:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8002a2c:	4604      	mov	r4, r0
 8002a2e:	460f      	mov	r7, r1
 8002a30:	4691      	mov	r9, r2
 8002a32:	d203      	bcs.n	8002a3c <__kernel_sinf+0x1c>
 8002a34:	f7fe fa9e 	bl	8000f74 <__aeabi_f2iz>
 8002a38:	2800      	cmp	r0, #0
 8002a3a:	d035      	beq.n	8002aa8 <__kernel_sinf+0x88>
 8002a3c:	4621      	mov	r1, r4
 8002a3e:	4620      	mov	r0, r4
 8002a40:	f7fe f8d2 	bl	8000be8 <__aeabi_fmul>
 8002a44:	4605      	mov	r5, r0
 8002a46:	4601      	mov	r1, r0
 8002a48:	4620      	mov	r0, r4
 8002a4a:	f7fe f8cd 	bl	8000be8 <__aeabi_fmul>
 8002a4e:	4929      	ldr	r1, [pc, #164]	@ (8002af4 <__kernel_sinf+0xd4>)
 8002a50:	4606      	mov	r6, r0
 8002a52:	4628      	mov	r0, r5
 8002a54:	f7fe f8c8 	bl	8000be8 <__aeabi_fmul>
 8002a58:	4927      	ldr	r1, [pc, #156]	@ (8002af8 <__kernel_sinf+0xd8>)
 8002a5a:	f7fd ffbb 	bl	80009d4 <__aeabi_fsub>
 8002a5e:	4629      	mov	r1, r5
 8002a60:	f7fe f8c2 	bl	8000be8 <__aeabi_fmul>
 8002a64:	4925      	ldr	r1, [pc, #148]	@ (8002afc <__kernel_sinf+0xdc>)
 8002a66:	f7fd ffb7 	bl	80009d8 <__addsf3>
 8002a6a:	4629      	mov	r1, r5
 8002a6c:	f7fe f8bc 	bl	8000be8 <__aeabi_fmul>
 8002a70:	4923      	ldr	r1, [pc, #140]	@ (8002b00 <__kernel_sinf+0xe0>)
 8002a72:	f7fd ffaf 	bl	80009d4 <__aeabi_fsub>
 8002a76:	4629      	mov	r1, r5
 8002a78:	f7fe f8b6 	bl	8000be8 <__aeabi_fmul>
 8002a7c:	4921      	ldr	r1, [pc, #132]	@ (8002b04 <__kernel_sinf+0xe4>)
 8002a7e:	f7fd ffab 	bl	80009d8 <__addsf3>
 8002a82:	4680      	mov	r8, r0
 8002a84:	f1b9 0f00 	cmp.w	r9, #0
 8002a88:	d111      	bne.n	8002aae <__kernel_sinf+0x8e>
 8002a8a:	4601      	mov	r1, r0
 8002a8c:	4628      	mov	r0, r5
 8002a8e:	f7fe f8ab 	bl	8000be8 <__aeabi_fmul>
 8002a92:	491d      	ldr	r1, [pc, #116]	@ (8002b08 <__kernel_sinf+0xe8>)
 8002a94:	f7fd ff9e 	bl	80009d4 <__aeabi_fsub>
 8002a98:	4631      	mov	r1, r6
 8002a9a:	f7fe f8a5 	bl	8000be8 <__aeabi_fmul>
 8002a9e:	4601      	mov	r1, r0
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	f7fd ff99 	bl	80009d8 <__addsf3>
 8002aa6:	4604      	mov	r4, r0
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002aae:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002ab2:	4638      	mov	r0, r7
 8002ab4:	f7fe f898 	bl	8000be8 <__aeabi_fmul>
 8002ab8:	4641      	mov	r1, r8
 8002aba:	4681      	mov	r9, r0
 8002abc:	4630      	mov	r0, r6
 8002abe:	f7fe f893 	bl	8000be8 <__aeabi_fmul>
 8002ac2:	4601      	mov	r1, r0
 8002ac4:	4648      	mov	r0, r9
 8002ac6:	f7fd ff85 	bl	80009d4 <__aeabi_fsub>
 8002aca:	4629      	mov	r1, r5
 8002acc:	f7fe f88c 	bl	8000be8 <__aeabi_fmul>
 8002ad0:	4639      	mov	r1, r7
 8002ad2:	f7fd ff7f 	bl	80009d4 <__aeabi_fsub>
 8002ad6:	490c      	ldr	r1, [pc, #48]	@ (8002b08 <__kernel_sinf+0xe8>)
 8002ad8:	4605      	mov	r5, r0
 8002ada:	4630      	mov	r0, r6
 8002adc:	f7fe f884 	bl	8000be8 <__aeabi_fmul>
 8002ae0:	4601      	mov	r1, r0
 8002ae2:	4628      	mov	r0, r5
 8002ae4:	f7fd ff78 	bl	80009d8 <__addsf3>
 8002ae8:	4601      	mov	r1, r0
 8002aea:	4620      	mov	r0, r4
 8002aec:	f7fd ff72 	bl	80009d4 <__aeabi_fsub>
 8002af0:	e7d9      	b.n	8002aa6 <__kernel_sinf+0x86>
 8002af2:	bf00      	nop
 8002af4:	2f2ec9d3 	.word	0x2f2ec9d3
 8002af8:	32d72f34 	.word	0x32d72f34
 8002afc:	3638ef1b 	.word	0x3638ef1b
 8002b00:	39500d01 	.word	0x39500d01
 8002b04:	3c088889 	.word	0x3c088889
 8002b08:	3e2aaaab 	.word	0x3e2aaaab

08002b0c <__ieee754_rem_pio2f>:
 8002b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b10:	4aa4      	ldr	r2, [pc, #656]	@ (8002da4 <__ieee754_rem_pio2f+0x298>)
 8002b12:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8002b16:	4590      	cmp	r8, r2
 8002b18:	460c      	mov	r4, r1
 8002b1a:	4682      	mov	sl, r0
 8002b1c:	b087      	sub	sp, #28
 8002b1e:	d804      	bhi.n	8002b2a <__ieee754_rem_pio2f+0x1e>
 8002b20:	2300      	movs	r3, #0
 8002b22:	6008      	str	r0, [r1, #0]
 8002b24:	604b      	str	r3, [r1, #4]
 8002b26:	2500      	movs	r5, #0
 8002b28:	e01d      	b.n	8002b66 <__ieee754_rem_pio2f+0x5a>
 8002b2a:	4a9f      	ldr	r2, [pc, #636]	@ (8002da8 <__ieee754_rem_pio2f+0x29c>)
 8002b2c:	4590      	cmp	r8, r2
 8002b2e:	d84f      	bhi.n	8002bd0 <__ieee754_rem_pio2f+0xc4>
 8002b30:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8002b34:	2800      	cmp	r0, #0
 8002b36:	499d      	ldr	r1, [pc, #628]	@ (8002dac <__ieee754_rem_pio2f+0x2a0>)
 8002b38:	4f9d      	ldr	r7, [pc, #628]	@ (8002db0 <__ieee754_rem_pio2f+0x2a4>)
 8002b3a:	f025 050f 	bic.w	r5, r5, #15
 8002b3e:	dd24      	ble.n	8002b8a <__ieee754_rem_pio2f+0x7e>
 8002b40:	f7fd ff48 	bl	80009d4 <__aeabi_fsub>
 8002b44:	42bd      	cmp	r5, r7
 8002b46:	4606      	mov	r6, r0
 8002b48:	d011      	beq.n	8002b6e <__ieee754_rem_pio2f+0x62>
 8002b4a:	499a      	ldr	r1, [pc, #616]	@ (8002db4 <__ieee754_rem_pio2f+0x2a8>)
 8002b4c:	f7fd ff42 	bl	80009d4 <__aeabi_fsub>
 8002b50:	4601      	mov	r1, r0
 8002b52:	4605      	mov	r5, r0
 8002b54:	4630      	mov	r0, r6
 8002b56:	f7fd ff3d 	bl	80009d4 <__aeabi_fsub>
 8002b5a:	4996      	ldr	r1, [pc, #600]	@ (8002db4 <__ieee754_rem_pio2f+0x2a8>)
 8002b5c:	f7fd ff3a 	bl	80009d4 <__aeabi_fsub>
 8002b60:	6025      	str	r5, [r4, #0]
 8002b62:	2501      	movs	r5, #1
 8002b64:	6060      	str	r0, [r4, #4]
 8002b66:	4628      	mov	r0, r5
 8002b68:	b007      	add	sp, #28
 8002b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b6e:	4992      	ldr	r1, [pc, #584]	@ (8002db8 <__ieee754_rem_pio2f+0x2ac>)
 8002b70:	f7fd ff30 	bl	80009d4 <__aeabi_fsub>
 8002b74:	4991      	ldr	r1, [pc, #580]	@ (8002dbc <__ieee754_rem_pio2f+0x2b0>)
 8002b76:	4606      	mov	r6, r0
 8002b78:	f7fd ff2c 	bl	80009d4 <__aeabi_fsub>
 8002b7c:	4601      	mov	r1, r0
 8002b7e:	4605      	mov	r5, r0
 8002b80:	4630      	mov	r0, r6
 8002b82:	f7fd ff27 	bl	80009d4 <__aeabi_fsub>
 8002b86:	498d      	ldr	r1, [pc, #564]	@ (8002dbc <__ieee754_rem_pio2f+0x2b0>)
 8002b88:	e7e8      	b.n	8002b5c <__ieee754_rem_pio2f+0x50>
 8002b8a:	f7fd ff25 	bl	80009d8 <__addsf3>
 8002b8e:	42bd      	cmp	r5, r7
 8002b90:	4606      	mov	r6, r0
 8002b92:	d00f      	beq.n	8002bb4 <__ieee754_rem_pio2f+0xa8>
 8002b94:	4987      	ldr	r1, [pc, #540]	@ (8002db4 <__ieee754_rem_pio2f+0x2a8>)
 8002b96:	f7fd ff1f 	bl	80009d8 <__addsf3>
 8002b9a:	4601      	mov	r1, r0
 8002b9c:	4605      	mov	r5, r0
 8002b9e:	4630      	mov	r0, r6
 8002ba0:	f7fd ff18 	bl	80009d4 <__aeabi_fsub>
 8002ba4:	4983      	ldr	r1, [pc, #524]	@ (8002db4 <__ieee754_rem_pio2f+0x2a8>)
 8002ba6:	f7fd ff17 	bl	80009d8 <__addsf3>
 8002baa:	6025      	str	r5, [r4, #0]
 8002bac:	6060      	str	r0, [r4, #4]
 8002bae:	f04f 35ff 	mov.w	r5, #4294967295
 8002bb2:	e7d8      	b.n	8002b66 <__ieee754_rem_pio2f+0x5a>
 8002bb4:	4980      	ldr	r1, [pc, #512]	@ (8002db8 <__ieee754_rem_pio2f+0x2ac>)
 8002bb6:	f7fd ff0f 	bl	80009d8 <__addsf3>
 8002bba:	4980      	ldr	r1, [pc, #512]	@ (8002dbc <__ieee754_rem_pio2f+0x2b0>)
 8002bbc:	4606      	mov	r6, r0
 8002bbe:	f7fd ff0b 	bl	80009d8 <__addsf3>
 8002bc2:	4601      	mov	r1, r0
 8002bc4:	4605      	mov	r5, r0
 8002bc6:	4630      	mov	r0, r6
 8002bc8:	f7fd ff04 	bl	80009d4 <__aeabi_fsub>
 8002bcc:	497b      	ldr	r1, [pc, #492]	@ (8002dbc <__ieee754_rem_pio2f+0x2b0>)
 8002bce:	e7ea      	b.n	8002ba6 <__ieee754_rem_pio2f+0x9a>
 8002bd0:	4a7b      	ldr	r2, [pc, #492]	@ (8002dc0 <__ieee754_rem_pio2f+0x2b4>)
 8002bd2:	4590      	cmp	r8, r2
 8002bd4:	f200 8095 	bhi.w	8002d02 <__ieee754_rem_pio2f+0x1f6>
 8002bd8:	f000 f8fe 	bl	8002dd8 <fabsf>
 8002bdc:	4979      	ldr	r1, [pc, #484]	@ (8002dc4 <__ieee754_rem_pio2f+0x2b8>)
 8002bde:	4606      	mov	r6, r0
 8002be0:	f7fe f802 	bl	8000be8 <__aeabi_fmul>
 8002be4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002be8:	f7fd fef6 	bl	80009d8 <__addsf3>
 8002bec:	f7fe f9c2 	bl	8000f74 <__aeabi_f2iz>
 8002bf0:	4605      	mov	r5, r0
 8002bf2:	f7fd ffa5 	bl	8000b40 <__aeabi_i2f>
 8002bf6:	496d      	ldr	r1, [pc, #436]	@ (8002dac <__ieee754_rem_pio2f+0x2a0>)
 8002bf8:	4681      	mov	r9, r0
 8002bfa:	f7fd fff5 	bl	8000be8 <__aeabi_fmul>
 8002bfe:	4601      	mov	r1, r0
 8002c00:	4630      	mov	r0, r6
 8002c02:	f7fd fee7 	bl	80009d4 <__aeabi_fsub>
 8002c06:	496b      	ldr	r1, [pc, #428]	@ (8002db4 <__ieee754_rem_pio2f+0x2a8>)
 8002c08:	4607      	mov	r7, r0
 8002c0a:	4648      	mov	r0, r9
 8002c0c:	f7fd ffec 	bl	8000be8 <__aeabi_fmul>
 8002c10:	2d1f      	cmp	r5, #31
 8002c12:	4606      	mov	r6, r0
 8002c14:	dc0e      	bgt.n	8002c34 <__ieee754_rem_pio2f+0x128>
 8002c16:	4a6c      	ldr	r2, [pc, #432]	@ (8002dc8 <__ieee754_rem_pio2f+0x2bc>)
 8002c18:	1e69      	subs	r1, r5, #1
 8002c1a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002c1e:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 8002c22:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d004      	beq.n	8002c34 <__ieee754_rem_pio2f+0x128>
 8002c2a:	4631      	mov	r1, r6
 8002c2c:	4638      	mov	r0, r7
 8002c2e:	f7fd fed1 	bl	80009d4 <__aeabi_fsub>
 8002c32:	e00b      	b.n	8002c4c <__ieee754_rem_pio2f+0x140>
 8002c34:	4631      	mov	r1, r6
 8002c36:	4638      	mov	r0, r7
 8002c38:	f7fd fecc 	bl	80009d4 <__aeabi_fsub>
 8002c3c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8002c40:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	ea4f 5be8 	mov.w	fp, r8, asr #23
 8002c4a:	dc01      	bgt.n	8002c50 <__ieee754_rem_pio2f+0x144>
 8002c4c:	6020      	str	r0, [r4, #0]
 8002c4e:	e026      	b.n	8002c9e <__ieee754_rem_pio2f+0x192>
 8002c50:	4959      	ldr	r1, [pc, #356]	@ (8002db8 <__ieee754_rem_pio2f+0x2ac>)
 8002c52:	4648      	mov	r0, r9
 8002c54:	f7fd ffc8 	bl	8000be8 <__aeabi_fmul>
 8002c58:	4606      	mov	r6, r0
 8002c5a:	4601      	mov	r1, r0
 8002c5c:	4638      	mov	r0, r7
 8002c5e:	f7fd feb9 	bl	80009d4 <__aeabi_fsub>
 8002c62:	4601      	mov	r1, r0
 8002c64:	4680      	mov	r8, r0
 8002c66:	4638      	mov	r0, r7
 8002c68:	f7fd feb4 	bl	80009d4 <__aeabi_fsub>
 8002c6c:	4631      	mov	r1, r6
 8002c6e:	f7fd feb1 	bl	80009d4 <__aeabi_fsub>
 8002c72:	4606      	mov	r6, r0
 8002c74:	4951      	ldr	r1, [pc, #324]	@ (8002dbc <__ieee754_rem_pio2f+0x2b0>)
 8002c76:	4648      	mov	r0, r9
 8002c78:	f7fd ffb6 	bl	8000be8 <__aeabi_fmul>
 8002c7c:	4631      	mov	r1, r6
 8002c7e:	f7fd fea9 	bl	80009d4 <__aeabi_fsub>
 8002c82:	4601      	mov	r1, r0
 8002c84:	4606      	mov	r6, r0
 8002c86:	4640      	mov	r0, r8
 8002c88:	f7fd fea4 	bl	80009d4 <__aeabi_fsub>
 8002c8c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8002c90:	ebab 0b03 	sub.w	fp, fp, r3
 8002c94:	f1bb 0f19 	cmp.w	fp, #25
 8002c98:	dc18      	bgt.n	8002ccc <__ieee754_rem_pio2f+0x1c0>
 8002c9a:	4647      	mov	r7, r8
 8002c9c:	6020      	str	r0, [r4, #0]
 8002c9e:	f8d4 8000 	ldr.w	r8, [r4]
 8002ca2:	4638      	mov	r0, r7
 8002ca4:	4641      	mov	r1, r8
 8002ca6:	f7fd fe95 	bl	80009d4 <__aeabi_fsub>
 8002caa:	4631      	mov	r1, r6
 8002cac:	f7fd fe92 	bl	80009d4 <__aeabi_fsub>
 8002cb0:	f1ba 0f00 	cmp.w	sl, #0
 8002cb4:	6060      	str	r0, [r4, #4]
 8002cb6:	f6bf af56 	bge.w	8002b66 <__ieee754_rem_pio2f+0x5a>
 8002cba:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 8002cbe:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8002cc2:	f8c4 8000 	str.w	r8, [r4]
 8002cc6:	6060      	str	r0, [r4, #4]
 8002cc8:	426d      	negs	r5, r5
 8002cca:	e74c      	b.n	8002b66 <__ieee754_rem_pio2f+0x5a>
 8002ccc:	493f      	ldr	r1, [pc, #252]	@ (8002dcc <__ieee754_rem_pio2f+0x2c0>)
 8002cce:	4648      	mov	r0, r9
 8002cd0:	f7fd ff8a 	bl	8000be8 <__aeabi_fmul>
 8002cd4:	4606      	mov	r6, r0
 8002cd6:	4601      	mov	r1, r0
 8002cd8:	4640      	mov	r0, r8
 8002cda:	f7fd fe7b 	bl	80009d4 <__aeabi_fsub>
 8002cde:	4601      	mov	r1, r0
 8002ce0:	4607      	mov	r7, r0
 8002ce2:	4640      	mov	r0, r8
 8002ce4:	f7fd fe76 	bl	80009d4 <__aeabi_fsub>
 8002ce8:	4631      	mov	r1, r6
 8002cea:	f7fd fe73 	bl	80009d4 <__aeabi_fsub>
 8002cee:	4606      	mov	r6, r0
 8002cf0:	4937      	ldr	r1, [pc, #220]	@ (8002dd0 <__ieee754_rem_pio2f+0x2c4>)
 8002cf2:	4648      	mov	r0, r9
 8002cf4:	f7fd ff78 	bl	8000be8 <__aeabi_fmul>
 8002cf8:	4631      	mov	r1, r6
 8002cfa:	f7fd fe6b 	bl	80009d4 <__aeabi_fsub>
 8002cfe:	4606      	mov	r6, r0
 8002d00:	e793      	b.n	8002c2a <__ieee754_rem_pio2f+0x11e>
 8002d02:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8002d06:	d305      	bcc.n	8002d14 <__ieee754_rem_pio2f+0x208>
 8002d08:	4601      	mov	r1, r0
 8002d0a:	f7fd fe63 	bl	80009d4 <__aeabi_fsub>
 8002d0e:	6060      	str	r0, [r4, #4]
 8002d10:	6020      	str	r0, [r4, #0]
 8002d12:	e708      	b.n	8002b26 <__ieee754_rem_pio2f+0x1a>
 8002d14:	ea4f 56e8 	mov.w	r6, r8, asr #23
 8002d18:	3e86      	subs	r6, #134	@ 0x86
 8002d1a:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 8002d1e:	4640      	mov	r0, r8
 8002d20:	f7fe f928 	bl	8000f74 <__aeabi_f2iz>
 8002d24:	f7fd ff0c 	bl	8000b40 <__aeabi_i2f>
 8002d28:	4601      	mov	r1, r0
 8002d2a:	9003      	str	r0, [sp, #12]
 8002d2c:	4640      	mov	r0, r8
 8002d2e:	f7fd fe51 	bl	80009d4 <__aeabi_fsub>
 8002d32:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8002d36:	f7fd ff57 	bl	8000be8 <__aeabi_fmul>
 8002d3a:	4607      	mov	r7, r0
 8002d3c:	f7fe f91a 	bl	8000f74 <__aeabi_f2iz>
 8002d40:	f7fd fefe 	bl	8000b40 <__aeabi_i2f>
 8002d44:	4601      	mov	r1, r0
 8002d46:	9004      	str	r0, [sp, #16]
 8002d48:	4605      	mov	r5, r0
 8002d4a:	4638      	mov	r0, r7
 8002d4c:	f7fd fe42 	bl	80009d4 <__aeabi_fsub>
 8002d50:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8002d54:	f7fd ff48 	bl	8000be8 <__aeabi_fmul>
 8002d58:	2100      	movs	r1, #0
 8002d5a:	9005      	str	r0, [sp, #20]
 8002d5c:	f7fe f8d8 	bl	8000f10 <__aeabi_fcmpeq>
 8002d60:	b1f0      	cbz	r0, 8002da0 <__ieee754_rem_pio2f+0x294>
 8002d62:	2100      	movs	r1, #0
 8002d64:	4628      	mov	r0, r5
 8002d66:	f7fe f8d3 	bl	8000f10 <__aeabi_fcmpeq>
 8002d6a:	2800      	cmp	r0, #0
 8002d6c:	bf14      	ite	ne
 8002d6e:	2301      	movne	r3, #1
 8002d70:	2302      	moveq	r3, #2
 8002d72:	4a18      	ldr	r2, [pc, #96]	@ (8002dd4 <__ieee754_rem_pio2f+0x2c8>)
 8002d74:	4621      	mov	r1, r4
 8002d76:	9201      	str	r2, [sp, #4]
 8002d78:	2202      	movs	r2, #2
 8002d7a:	a803      	add	r0, sp, #12
 8002d7c:	9200      	str	r2, [sp, #0]
 8002d7e:	4632      	mov	r2, r6
 8002d80:	f000 f82e 	bl	8002de0 <__kernel_rem_pio2f>
 8002d84:	f1ba 0f00 	cmp.w	sl, #0
 8002d88:	4605      	mov	r5, r0
 8002d8a:	f6bf aeec 	bge.w	8002b66 <__ieee754_rem_pio2f+0x5a>
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8002d94:	6023      	str	r3, [r4, #0]
 8002d96:	6863      	ldr	r3, [r4, #4]
 8002d98:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8002d9c:	6063      	str	r3, [r4, #4]
 8002d9e:	e793      	b.n	8002cc8 <__ieee754_rem_pio2f+0x1bc>
 8002da0:	2303      	movs	r3, #3
 8002da2:	e7e6      	b.n	8002d72 <__ieee754_rem_pio2f+0x266>
 8002da4:	3f490fd8 	.word	0x3f490fd8
 8002da8:	4016cbe3 	.word	0x4016cbe3
 8002dac:	3fc90f80 	.word	0x3fc90f80
 8002db0:	3fc90fd0 	.word	0x3fc90fd0
 8002db4:	37354443 	.word	0x37354443
 8002db8:	37354400 	.word	0x37354400
 8002dbc:	2e85a308 	.word	0x2e85a308
 8002dc0:	43490f80 	.word	0x43490f80
 8002dc4:	3f22f984 	.word	0x3f22f984
 8002dc8:	08003478 	.word	0x08003478
 8002dcc:	2e85a300 	.word	0x2e85a300
 8002dd0:	248d3132 	.word	0x248d3132
 8002dd4:	080034f8 	.word	0x080034f8

08002dd8 <fabsf>:
 8002dd8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002ddc:	4770      	bx	lr
	...

08002de0 <__kernel_rem_pio2f>:
 8002de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002de4:	b0db      	sub	sp, #364	@ 0x16c
 8002de6:	9202      	str	r2, [sp, #8]
 8002de8:	9304      	str	r3, [sp, #16]
 8002dea:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8002dec:	4bad      	ldr	r3, [pc, #692]	@ (80030a4 <__kernel_rem_pio2f+0x2c4>)
 8002dee:	9005      	str	r0, [sp, #20]
 8002df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002df4:	9100      	str	r1, [sp, #0]
 8002df6:	9301      	str	r3, [sp, #4]
 8002df8:	9b04      	ldr	r3, [sp, #16]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	9303      	str	r3, [sp, #12]
 8002dfe:	9b02      	ldr	r3, [sp, #8]
 8002e00:	1d1a      	adds	r2, r3, #4
 8002e02:	f2c0 8099 	blt.w	8002f38 <__kernel_rem_pio2f+0x158>
 8002e06:	1edc      	subs	r4, r3, #3
 8002e08:	bf48      	it	mi
 8002e0a:	1d1c      	addmi	r4, r3, #4
 8002e0c:	10e4      	asrs	r4, r4, #3
 8002e0e:	2500      	movs	r5, #0
 8002e10:	f04f 0b00 	mov.w	fp, #0
 8002e14:	1c67      	adds	r7, r4, #1
 8002e16:	00fb      	lsls	r3, r7, #3
 8002e18:	9306      	str	r3, [sp, #24]
 8002e1a:	9b02      	ldr	r3, [sp, #8]
 8002e1c:	9a03      	ldr	r2, [sp, #12]
 8002e1e:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8002e22:	9b01      	ldr	r3, [sp, #4]
 8002e24:	eba4 0802 	sub.w	r8, r4, r2
 8002e28:	eb03 0902 	add.w	r9, r3, r2
 8002e2c:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8002e2e:	ae1e      	add	r6, sp, #120	@ 0x78
 8002e30:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8002e34:	454d      	cmp	r5, r9
 8002e36:	f340 8081 	ble.w	8002f3c <__kernel_rem_pio2f+0x15c>
 8002e3a:	9a04      	ldr	r2, [sp, #16]
 8002e3c:	ab1e      	add	r3, sp, #120	@ 0x78
 8002e3e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8002e42:	f04f 0900 	mov.w	r9, #0
 8002e46:	2300      	movs	r3, #0
 8002e48:	f50d 7b8c 	add.w	fp, sp, #280	@ 0x118
 8002e4c:	9a01      	ldr	r2, [sp, #4]
 8002e4e:	4591      	cmp	r9, r2
 8002e50:	f340 809c 	ble.w	8002f8c <__kernel_rem_pio2f+0x1ac>
 8002e54:	4613      	mov	r3, r2
 8002e56:	aa0a      	add	r2, sp, #40	@ 0x28
 8002e58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002e5c:	9308      	str	r3, [sp, #32]
 8002e5e:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8002e60:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002e64:	9c01      	ldr	r4, [sp, #4]
 8002e66:	9307      	str	r3, [sp, #28]
 8002e68:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8002e6c:	4646      	mov	r6, r8
 8002e6e:	4625      	mov	r5, r4
 8002e70:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 8002e74:	ab5a      	add	r3, sp, #360	@ 0x168
 8002e76:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002e7a:	f853 bc50 	ldr.w	fp, [r3, #-80]
 8002e7e:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8002e82:	2d00      	cmp	r5, #0
 8002e84:	f300 8087 	bgt.w	8002f96 <__kernel_rem_pio2f+0x1b6>
 8002e88:	4639      	mov	r1, r7
 8002e8a:	4658      	mov	r0, fp
 8002e8c:	f000 fa48 	bl	8003320 <scalbnf>
 8002e90:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8002e94:	4605      	mov	r5, r0
 8002e96:	f7fd fea7 	bl	8000be8 <__aeabi_fmul>
 8002e9a:	f000 fa8d 	bl	80033b8 <floorf>
 8002e9e:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8002ea2:	f7fd fea1 	bl	8000be8 <__aeabi_fmul>
 8002ea6:	4601      	mov	r1, r0
 8002ea8:	4628      	mov	r0, r5
 8002eaa:	f7fd fd93 	bl	80009d4 <__aeabi_fsub>
 8002eae:	4605      	mov	r5, r0
 8002eb0:	f7fe f860 	bl	8000f74 <__aeabi_f2iz>
 8002eb4:	4606      	mov	r6, r0
 8002eb6:	f7fd fe43 	bl	8000b40 <__aeabi_i2f>
 8002eba:	4601      	mov	r1, r0
 8002ebc:	4628      	mov	r0, r5
 8002ebe:	f7fd fd89 	bl	80009d4 <__aeabi_fsub>
 8002ec2:	2f00      	cmp	r7, #0
 8002ec4:	4681      	mov	r9, r0
 8002ec6:	f340 8083 	ble.w	8002fd0 <__kernel_rem_pio2f+0x1f0>
 8002eca:	1e62      	subs	r2, r4, #1
 8002ecc:	ab0a      	add	r3, sp, #40	@ 0x28
 8002ece:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8002ed2:	f1c7 0108 	rsb	r1, r7, #8
 8002ed6:	fa45 f301 	asr.w	r3, r5, r1
 8002eda:	441e      	add	r6, r3
 8002edc:	408b      	lsls	r3, r1
 8002ede:	1aed      	subs	r5, r5, r3
 8002ee0:	ab0a      	add	r3, sp, #40	@ 0x28
 8002ee2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8002ee6:	f1c7 0307 	rsb	r3, r7, #7
 8002eea:	411d      	asrs	r5, r3
 8002eec:	2d00      	cmp	r5, #0
 8002eee:	dd7c      	ble.n	8002fea <__kernel_rem_pio2f+0x20a>
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	4692      	mov	sl, r2
 8002ef4:	3601      	adds	r6, #1
 8002ef6:	4294      	cmp	r4, r2
 8002ef8:	f300 80ac 	bgt.w	8003054 <__kernel_rem_pio2f+0x274>
 8002efc:	2f00      	cmp	r7, #0
 8002efe:	dd05      	ble.n	8002f0c <__kernel_rem_pio2f+0x12c>
 8002f00:	2f01      	cmp	r7, #1
 8002f02:	f000 80b8 	beq.w	8003076 <__kernel_rem_pio2f+0x296>
 8002f06:	2f02      	cmp	r7, #2
 8002f08:	f000 80bf 	beq.w	800308a <__kernel_rem_pio2f+0x2aa>
 8002f0c:	2d02      	cmp	r5, #2
 8002f0e:	d16c      	bne.n	8002fea <__kernel_rem_pio2f+0x20a>
 8002f10:	4649      	mov	r1, r9
 8002f12:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002f16:	f7fd fd5d 	bl	80009d4 <__aeabi_fsub>
 8002f1a:	4681      	mov	r9, r0
 8002f1c:	f1ba 0f00 	cmp.w	sl, #0
 8002f20:	d063      	beq.n	8002fea <__kernel_rem_pio2f+0x20a>
 8002f22:	4639      	mov	r1, r7
 8002f24:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002f28:	f000 f9fa 	bl	8003320 <scalbnf>
 8002f2c:	4601      	mov	r1, r0
 8002f2e:	4648      	mov	r0, r9
 8002f30:	f7fd fd50 	bl	80009d4 <__aeabi_fsub>
 8002f34:	4681      	mov	r9, r0
 8002f36:	e058      	b.n	8002fea <__kernel_rem_pio2f+0x20a>
 8002f38:	2400      	movs	r4, #0
 8002f3a:	e768      	b.n	8002e0e <__kernel_rem_pio2f+0x2e>
 8002f3c:	eb18 0f05 	cmn.w	r8, r5
 8002f40:	d407      	bmi.n	8002f52 <__kernel_rem_pio2f+0x172>
 8002f42:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8002f46:	f7fd fdfb 	bl	8000b40 <__aeabi_i2f>
 8002f4a:	f846 0b04 	str.w	r0, [r6], #4
 8002f4e:	3501      	adds	r5, #1
 8002f50:	e770      	b.n	8002e34 <__kernel_rem_pio2f+0x54>
 8002f52:	4658      	mov	r0, fp
 8002f54:	e7f9      	b.n	8002f4a <__kernel_rem_pio2f+0x16a>
 8002f56:	9307      	str	r3, [sp, #28]
 8002f58:	9b05      	ldr	r3, [sp, #20]
 8002f5a:	f8da 1000 	ldr.w	r1, [sl]
 8002f5e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8002f62:	f7fd fe41 	bl	8000be8 <__aeabi_fmul>
 8002f66:	4601      	mov	r1, r0
 8002f68:	4630      	mov	r0, r6
 8002f6a:	f7fd fd35 	bl	80009d8 <__addsf3>
 8002f6e:	4606      	mov	r6, r0
 8002f70:	9b07      	ldr	r3, [sp, #28]
 8002f72:	f108 0801 	add.w	r8, r8, #1
 8002f76:	9a03      	ldr	r2, [sp, #12]
 8002f78:	f1aa 0a04 	sub.w	sl, sl, #4
 8002f7c:	4590      	cmp	r8, r2
 8002f7e:	ddea      	ble.n	8002f56 <__kernel_rem_pio2f+0x176>
 8002f80:	f84b 6b04 	str.w	r6, [fp], #4
 8002f84:	f109 0901 	add.w	r9, r9, #1
 8002f88:	3504      	adds	r5, #4
 8002f8a:	e75f      	b.n	8002e4c <__kernel_rem_pio2f+0x6c>
 8002f8c:	46aa      	mov	sl, r5
 8002f8e:	461e      	mov	r6, r3
 8002f90:	f04f 0800 	mov.w	r8, #0
 8002f94:	e7ef      	b.n	8002f76 <__kernel_rem_pio2f+0x196>
 8002f96:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8002f9a:	4658      	mov	r0, fp
 8002f9c:	f7fd fe24 	bl	8000be8 <__aeabi_fmul>
 8002fa0:	f7fd ffe8 	bl	8000f74 <__aeabi_f2iz>
 8002fa4:	f7fd fdcc 	bl	8000b40 <__aeabi_i2f>
 8002fa8:	4649      	mov	r1, r9
 8002faa:	9009      	str	r0, [sp, #36]	@ 0x24
 8002fac:	f7fd fe1c 	bl	8000be8 <__aeabi_fmul>
 8002fb0:	4601      	mov	r1, r0
 8002fb2:	4658      	mov	r0, fp
 8002fb4:	f7fd fd0e 	bl	80009d4 <__aeabi_fsub>
 8002fb8:	f7fd ffdc 	bl	8000f74 <__aeabi_f2iz>
 8002fbc:	3d01      	subs	r5, #1
 8002fbe:	f846 0b04 	str.w	r0, [r6], #4
 8002fc2:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 8002fc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002fc8:	f7fd fd06 	bl	80009d8 <__addsf3>
 8002fcc:	4683      	mov	fp, r0
 8002fce:	e758      	b.n	8002e82 <__kernel_rem_pio2f+0xa2>
 8002fd0:	d105      	bne.n	8002fde <__kernel_rem_pio2f+0x1fe>
 8002fd2:	1e63      	subs	r3, r4, #1
 8002fd4:	aa0a      	add	r2, sp, #40	@ 0x28
 8002fd6:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8002fda:	11ed      	asrs	r5, r5, #7
 8002fdc:	e786      	b.n	8002eec <__kernel_rem_pio2f+0x10c>
 8002fde:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002fe2:	f7fd ffb3 	bl	8000f4c <__aeabi_fcmpge>
 8002fe6:	4605      	mov	r5, r0
 8002fe8:	bb90      	cbnz	r0, 8003050 <__kernel_rem_pio2f+0x270>
 8002fea:	2100      	movs	r1, #0
 8002fec:	4648      	mov	r0, r9
 8002fee:	f7fd ff8f 	bl	8000f10 <__aeabi_fcmpeq>
 8002ff2:	2800      	cmp	r0, #0
 8002ff4:	f000 8090 	beq.w	8003118 <__kernel_rem_pio2f+0x338>
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	1e63      	subs	r3, r4, #1
 8002ffc:	9901      	ldr	r1, [sp, #4]
 8002ffe:	428b      	cmp	r3, r1
 8003000:	da4a      	bge.n	8003098 <__kernel_rem_pio2f+0x2b8>
 8003002:	2a00      	cmp	r2, #0
 8003004:	d076      	beq.n	80030f4 <__kernel_rem_pio2f+0x314>
 8003006:	3c01      	subs	r4, #1
 8003008:	ab0a      	add	r3, sp, #40	@ 0x28
 800300a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800300e:	3f08      	subs	r7, #8
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f8      	beq.n	8003006 <__kernel_rem_pio2f+0x226>
 8003014:	4639      	mov	r1, r7
 8003016:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800301a:	f000 f981 	bl	8003320 <scalbnf>
 800301e:	46a2      	mov	sl, r4
 8003020:	4607      	mov	r7, r0
 8003022:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 8003026:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 800302a:	f1ba 0f00 	cmp.w	sl, #0
 800302e:	f280 80a1 	bge.w	8003174 <__kernel_rem_pio2f+0x394>
 8003032:	4627      	mov	r7, r4
 8003034:	2200      	movs	r2, #0
 8003036:	2f00      	cmp	r7, #0
 8003038:	f2c0 80cb 	blt.w	80031d2 <__kernel_rem_pio2f+0x3f2>
 800303c:	a946      	add	r1, sp, #280	@ 0x118
 800303e:	4690      	mov	r8, r2
 8003040:	f04f 0a00 	mov.w	sl, #0
 8003044:	4b18      	ldr	r3, [pc, #96]	@ (80030a8 <__kernel_rem_pio2f+0x2c8>)
 8003046:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800304a:	eba4 0907 	sub.w	r9, r4, r7
 800304e:	e0b4      	b.n	80031ba <__kernel_rem_pio2f+0x3da>
 8003050:	2502      	movs	r5, #2
 8003052:	e74d      	b.n	8002ef0 <__kernel_rem_pio2f+0x110>
 8003054:	f858 3b04 	ldr.w	r3, [r8], #4
 8003058:	f1ba 0f00 	cmp.w	sl, #0
 800305c:	d108      	bne.n	8003070 <__kernel_rem_pio2f+0x290>
 800305e:	b123      	cbz	r3, 800306a <__kernel_rem_pio2f+0x28a>
 8003060:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003064:	f848 3c04 	str.w	r3, [r8, #-4]
 8003068:	2301      	movs	r3, #1
 800306a:	469a      	mov	sl, r3
 800306c:	3201      	adds	r2, #1
 800306e:	e742      	b.n	8002ef6 <__kernel_rem_pio2f+0x116>
 8003070:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8003074:	e7f6      	b.n	8003064 <__kernel_rem_pio2f+0x284>
 8003076:	1e62      	subs	r2, r4, #1
 8003078:	ab0a      	add	r3, sp, #40	@ 0x28
 800307a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003082:	a90a      	add	r1, sp, #40	@ 0x28
 8003084:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003088:	e740      	b.n	8002f0c <__kernel_rem_pio2f+0x12c>
 800308a:	1e62      	subs	r2, r4, #1
 800308c:	ab0a      	add	r3, sp, #40	@ 0x28
 800308e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003092:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003096:	e7f4      	b.n	8003082 <__kernel_rem_pio2f+0x2a2>
 8003098:	a90a      	add	r1, sp, #40	@ 0x28
 800309a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800309e:	3b01      	subs	r3, #1
 80030a0:	430a      	orrs	r2, r1
 80030a2:	e7ab      	b.n	8002ffc <__kernel_rem_pio2f+0x21c>
 80030a4:	0800383c 	.word	0x0800383c
 80030a8:	08003810 	.word	0x08003810
 80030ac:	3301      	adds	r3, #1
 80030ae:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80030b2:	2900      	cmp	r1, #0
 80030b4:	d0fa      	beq.n	80030ac <__kernel_rem_pio2f+0x2cc>
 80030b6:	9a04      	ldr	r2, [sp, #16]
 80030b8:	a91e      	add	r1, sp, #120	@ 0x78
 80030ba:	18a2      	adds	r2, r4, r2
 80030bc:	1c66      	adds	r6, r4, #1
 80030be:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 80030c2:	441c      	add	r4, r3
 80030c4:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 80030c8:	42b4      	cmp	r4, r6
 80030ca:	f6ff aecd 	blt.w	8002e68 <__kernel_rem_pio2f+0x88>
 80030ce:	9b07      	ldr	r3, [sp, #28]
 80030d0:	46ab      	mov	fp, r5
 80030d2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80030d6:	f7fd fd33 	bl	8000b40 <__aeabi_i2f>
 80030da:	f04f 0a00 	mov.w	sl, #0
 80030de:	f04f 0800 	mov.w	r8, #0
 80030e2:	6028      	str	r0, [r5, #0]
 80030e4:	9b03      	ldr	r3, [sp, #12]
 80030e6:	459a      	cmp	sl, r3
 80030e8:	dd07      	ble.n	80030fa <__kernel_rem_pio2f+0x31a>
 80030ea:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 80030ee:	3504      	adds	r5, #4
 80030f0:	3601      	adds	r6, #1
 80030f2:	e7e9      	b.n	80030c8 <__kernel_rem_pio2f+0x2e8>
 80030f4:	2301      	movs	r3, #1
 80030f6:	9a08      	ldr	r2, [sp, #32]
 80030f8:	e7d9      	b.n	80030ae <__kernel_rem_pio2f+0x2ce>
 80030fa:	9b05      	ldr	r3, [sp, #20]
 80030fc:	f85b 0904 	ldr.w	r0, [fp], #-4
 8003100:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8003104:	f7fd fd70 	bl	8000be8 <__aeabi_fmul>
 8003108:	4601      	mov	r1, r0
 800310a:	4640      	mov	r0, r8
 800310c:	f7fd fc64 	bl	80009d8 <__addsf3>
 8003110:	f10a 0a01 	add.w	sl, sl, #1
 8003114:	4680      	mov	r8, r0
 8003116:	e7e5      	b.n	80030e4 <__kernel_rem_pio2f+0x304>
 8003118:	9b06      	ldr	r3, [sp, #24]
 800311a:	9a02      	ldr	r2, [sp, #8]
 800311c:	4648      	mov	r0, r9
 800311e:	1a99      	subs	r1, r3, r2
 8003120:	f000 f8fe 	bl	8003320 <scalbnf>
 8003124:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8003128:	4680      	mov	r8, r0
 800312a:	f7fd ff0f 	bl	8000f4c <__aeabi_fcmpge>
 800312e:	b1f8      	cbz	r0, 8003170 <__kernel_rem_pio2f+0x390>
 8003130:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8003134:	4640      	mov	r0, r8
 8003136:	f7fd fd57 	bl	8000be8 <__aeabi_fmul>
 800313a:	f7fd ff1b 	bl	8000f74 <__aeabi_f2iz>
 800313e:	f7fd fcff 	bl	8000b40 <__aeabi_i2f>
 8003142:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8003146:	4681      	mov	r9, r0
 8003148:	f7fd fd4e 	bl	8000be8 <__aeabi_fmul>
 800314c:	4601      	mov	r1, r0
 800314e:	4640      	mov	r0, r8
 8003150:	f7fd fc40 	bl	80009d4 <__aeabi_fsub>
 8003154:	f7fd ff0e 	bl	8000f74 <__aeabi_f2iz>
 8003158:	ab0a      	add	r3, sp, #40	@ 0x28
 800315a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800315e:	4648      	mov	r0, r9
 8003160:	3401      	adds	r4, #1
 8003162:	3708      	adds	r7, #8
 8003164:	f7fd ff06 	bl	8000f74 <__aeabi_f2iz>
 8003168:	ab0a      	add	r3, sp, #40	@ 0x28
 800316a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800316e:	e751      	b.n	8003014 <__kernel_rem_pio2f+0x234>
 8003170:	4640      	mov	r0, r8
 8003172:	e7f7      	b.n	8003164 <__kernel_rem_pio2f+0x384>
 8003174:	ab0a      	add	r3, sp, #40	@ 0x28
 8003176:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800317a:	f7fd fce1 	bl	8000b40 <__aeabi_i2f>
 800317e:	4639      	mov	r1, r7
 8003180:	f7fd fd32 	bl	8000be8 <__aeabi_fmul>
 8003184:	4649      	mov	r1, r9
 8003186:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 800318a:	4638      	mov	r0, r7
 800318c:	f7fd fd2c 	bl	8000be8 <__aeabi_fmul>
 8003190:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003194:	4607      	mov	r7, r0
 8003196:	e748      	b.n	800302a <__kernel_rem_pio2f+0x24a>
 8003198:	f853 0b04 	ldr.w	r0, [r3], #4
 800319c:	f85b 1b04 	ldr.w	r1, [fp], #4
 80031a0:	9203      	str	r2, [sp, #12]
 80031a2:	9302      	str	r3, [sp, #8]
 80031a4:	f7fd fd20 	bl	8000be8 <__aeabi_fmul>
 80031a8:	4601      	mov	r1, r0
 80031aa:	4640      	mov	r0, r8
 80031ac:	f7fd fc14 	bl	80009d8 <__addsf3>
 80031b0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80031b4:	4680      	mov	r8, r0
 80031b6:	f10a 0a01 	add.w	sl, sl, #1
 80031ba:	9901      	ldr	r1, [sp, #4]
 80031bc:	458a      	cmp	sl, r1
 80031be:	dc01      	bgt.n	80031c4 <__kernel_rem_pio2f+0x3e4>
 80031c0:	45d1      	cmp	r9, sl
 80031c2:	dae9      	bge.n	8003198 <__kernel_rem_pio2f+0x3b8>
 80031c4:	ab5a      	add	r3, sp, #360	@ 0x168
 80031c6:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 80031ca:	f849 8ca0 	str.w	r8, [r9, #-160]
 80031ce:	3f01      	subs	r7, #1
 80031d0:	e731      	b.n	8003036 <__kernel_rem_pio2f+0x256>
 80031d2:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	dc07      	bgt.n	80031e8 <__kernel_rem_pio2f+0x408>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	dc4e      	bgt.n	800327a <__kernel_rem_pio2f+0x49a>
 80031dc:	d02e      	beq.n	800323c <__kernel_rem_pio2f+0x45c>
 80031de:	f006 0007 	and.w	r0, r6, #7
 80031e2:	b05b      	add	sp, #364	@ 0x16c
 80031e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031e8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d1f7      	bne.n	80031de <__kernel_rem_pio2f+0x3fe>
 80031ee:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 80031f2:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 80031f6:	46b8      	mov	r8, r7
 80031f8:	46a2      	mov	sl, r4
 80031fa:	f1ba 0f00 	cmp.w	sl, #0
 80031fe:	dc49      	bgt.n	8003294 <__kernel_rem_pio2f+0x4b4>
 8003200:	46a1      	mov	r9, r4
 8003202:	f1b9 0f01 	cmp.w	r9, #1
 8003206:	dc60      	bgt.n	80032ca <__kernel_rem_pio2f+0x4ea>
 8003208:	2000      	movs	r0, #0
 800320a:	2c01      	cmp	r4, #1
 800320c:	dc76      	bgt.n	80032fc <__kernel_rem_pio2f+0x51c>
 800320e:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8003210:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8003212:	2d00      	cmp	r5, #0
 8003214:	d178      	bne.n	8003308 <__kernel_rem_pio2f+0x528>
 8003216:	9900      	ldr	r1, [sp, #0]
 8003218:	600a      	str	r2, [r1, #0]
 800321a:	460a      	mov	r2, r1
 800321c:	604b      	str	r3, [r1, #4]
 800321e:	6090      	str	r0, [r2, #8]
 8003220:	e7dd      	b.n	80031de <__kernel_rem_pio2f+0x3fe>
 8003222:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8003226:	f7fd fbd7 	bl	80009d8 <__addsf3>
 800322a:	3c01      	subs	r4, #1
 800322c:	2c00      	cmp	r4, #0
 800322e:	daf8      	bge.n	8003222 <__kernel_rem_pio2f+0x442>
 8003230:	b10d      	cbz	r5, 8003236 <__kernel_rem_pio2f+0x456>
 8003232:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8003236:	9b00      	ldr	r3, [sp, #0]
 8003238:	6018      	str	r0, [r3, #0]
 800323a:	e7d0      	b.n	80031de <__kernel_rem_pio2f+0x3fe>
 800323c:	2000      	movs	r0, #0
 800323e:	af32      	add	r7, sp, #200	@ 0xc8
 8003240:	e7f4      	b.n	800322c <__kernel_rem_pio2f+0x44c>
 8003242:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8003246:	f7fd fbc7 	bl	80009d8 <__addsf3>
 800324a:	f108 38ff 	add.w	r8, r8, #4294967295
 800324e:	f1b8 0f00 	cmp.w	r8, #0
 8003252:	daf6      	bge.n	8003242 <__kernel_rem_pio2f+0x462>
 8003254:	b1ad      	cbz	r5, 8003282 <__kernel_rem_pio2f+0x4a2>
 8003256:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 800325a:	9a00      	ldr	r2, [sp, #0]
 800325c:	4601      	mov	r1, r0
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8003262:	f7fd fbb7 	bl	80009d4 <__aeabi_fsub>
 8003266:	f04f 0801 	mov.w	r8, #1
 800326a:	4544      	cmp	r4, r8
 800326c:	da0b      	bge.n	8003286 <__kernel_rem_pio2f+0x4a6>
 800326e:	b10d      	cbz	r5, 8003274 <__kernel_rem_pio2f+0x494>
 8003270:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8003274:	9b00      	ldr	r3, [sp, #0]
 8003276:	6058      	str	r0, [r3, #4]
 8003278:	e7b1      	b.n	80031de <__kernel_rem_pio2f+0x3fe>
 800327a:	46a0      	mov	r8, r4
 800327c:	2000      	movs	r0, #0
 800327e:	af32      	add	r7, sp, #200	@ 0xc8
 8003280:	e7e5      	b.n	800324e <__kernel_rem_pio2f+0x46e>
 8003282:	4603      	mov	r3, r0
 8003284:	e7e9      	b.n	800325a <__kernel_rem_pio2f+0x47a>
 8003286:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800328a:	f7fd fba5 	bl	80009d8 <__addsf3>
 800328e:	f108 0801 	add.w	r8, r8, #1
 8003292:	e7ea      	b.n	800326a <__kernel_rem_pio2f+0x48a>
 8003294:	f8d8 3000 	ldr.w	r3, [r8]
 8003298:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800329c:	4619      	mov	r1, r3
 800329e:	4610      	mov	r0, r2
 80032a0:	9302      	str	r3, [sp, #8]
 80032a2:	9201      	str	r2, [sp, #4]
 80032a4:	f7fd fb98 	bl	80009d8 <__addsf3>
 80032a8:	9a01      	ldr	r2, [sp, #4]
 80032aa:	4601      	mov	r1, r0
 80032ac:	4681      	mov	r9, r0
 80032ae:	4610      	mov	r0, r2
 80032b0:	f7fd fb90 	bl	80009d4 <__aeabi_fsub>
 80032b4:	9b02      	ldr	r3, [sp, #8]
 80032b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80032ba:	4619      	mov	r1, r3
 80032bc:	f7fd fb8c 	bl	80009d8 <__addsf3>
 80032c0:	f848 0904 	str.w	r0, [r8], #-4
 80032c4:	f8c8 9000 	str.w	r9, [r8]
 80032c8:	e797      	b.n	80031fa <__kernel_rem_pio2f+0x41a>
 80032ca:	f857 3c04 	ldr.w	r3, [r7, #-4]
 80032ce:	f8d7 a000 	ldr.w	sl, [r7]
 80032d2:	4618      	mov	r0, r3
 80032d4:	4651      	mov	r1, sl
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	f7fd fb7e 	bl	80009d8 <__addsf3>
 80032dc:	9b01      	ldr	r3, [sp, #4]
 80032de:	4601      	mov	r1, r0
 80032e0:	4680      	mov	r8, r0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fd fb76 	bl	80009d4 <__aeabi_fsub>
 80032e8:	4651      	mov	r1, sl
 80032ea:	f7fd fb75 	bl	80009d8 <__addsf3>
 80032ee:	f847 0904 	str.w	r0, [r7], #-4
 80032f2:	f109 39ff 	add.w	r9, r9, #4294967295
 80032f6:	f8c7 8000 	str.w	r8, [r7]
 80032fa:	e782      	b.n	8003202 <__kernel_rem_pio2f+0x422>
 80032fc:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8003300:	f7fd fb6a 	bl	80009d8 <__addsf3>
 8003304:	3c01      	subs	r4, #1
 8003306:	e780      	b.n	800320a <__kernel_rem_pio2f+0x42a>
 8003308:	9900      	ldr	r1, [sp, #0]
 800330a:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 800330e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8003312:	600a      	str	r2, [r1, #0]
 8003314:	604b      	str	r3, [r1, #4]
 8003316:	460a      	mov	r2, r1
 8003318:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800331c:	e77f      	b.n	800321e <__kernel_rem_pio2f+0x43e>
 800331e:	bf00      	nop

08003320 <scalbnf>:
 8003320:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8003324:	b538      	push	{r3, r4, r5, lr}
 8003326:	4603      	mov	r3, r0
 8003328:	460d      	mov	r5, r1
 800332a:	4604      	mov	r4, r0
 800332c:	d02e      	beq.n	800338c <scalbnf+0x6c>
 800332e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8003332:	d304      	bcc.n	800333e <scalbnf+0x1e>
 8003334:	4601      	mov	r1, r0
 8003336:	f7fd fb4f 	bl	80009d8 <__addsf3>
 800333a:	4603      	mov	r3, r0
 800333c:	e026      	b.n	800338c <scalbnf+0x6c>
 800333e:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8003342:	d118      	bne.n	8003376 <scalbnf+0x56>
 8003344:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8003348:	f7fd fc4e 	bl	8000be8 <__aeabi_fmul>
 800334c:	4a17      	ldr	r2, [pc, #92]	@ (80033ac <scalbnf+0x8c>)
 800334e:	4603      	mov	r3, r0
 8003350:	4295      	cmp	r5, r2
 8003352:	db0c      	blt.n	800336e <scalbnf+0x4e>
 8003354:	4604      	mov	r4, r0
 8003356:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800335a:	3a19      	subs	r2, #25
 800335c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8003360:	428d      	cmp	r5, r1
 8003362:	dd0a      	ble.n	800337a <scalbnf+0x5a>
 8003364:	4912      	ldr	r1, [pc, #72]	@ (80033b0 <scalbnf+0x90>)
 8003366:	4618      	mov	r0, r3
 8003368:	f361 001e 	bfi	r0, r1, #0, #31
 800336c:	e000      	b.n	8003370 <scalbnf+0x50>
 800336e:	4911      	ldr	r1, [pc, #68]	@ (80033b4 <scalbnf+0x94>)
 8003370:	f7fd fc3a 	bl	8000be8 <__aeabi_fmul>
 8003374:	e7e1      	b.n	800333a <scalbnf+0x1a>
 8003376:	0dd2      	lsrs	r2, r2, #23
 8003378:	e7f0      	b.n	800335c <scalbnf+0x3c>
 800337a:	1951      	adds	r1, r2, r5
 800337c:	29fe      	cmp	r1, #254	@ 0xfe
 800337e:	dcf1      	bgt.n	8003364 <scalbnf+0x44>
 8003380:	2900      	cmp	r1, #0
 8003382:	dd05      	ble.n	8003390 <scalbnf+0x70>
 8003384:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8003388:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 800338c:	4618      	mov	r0, r3
 800338e:	bd38      	pop	{r3, r4, r5, pc}
 8003390:	f111 0f16 	cmn.w	r1, #22
 8003394:	da01      	bge.n	800339a <scalbnf+0x7a>
 8003396:	4907      	ldr	r1, [pc, #28]	@ (80033b4 <scalbnf+0x94>)
 8003398:	e7e5      	b.n	8003366 <scalbnf+0x46>
 800339a:	f101 0019 	add.w	r0, r1, #25
 800339e:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 80033a2:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 80033a6:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 80033aa:	e7e1      	b.n	8003370 <scalbnf+0x50>
 80033ac:	ffff3cb0 	.word	0xffff3cb0
 80033b0:	7149f2ca 	.word	0x7149f2ca
 80033b4:	0da24260 	.word	0x0da24260

080033b8 <floorf>:
 80033b8:	b570      	push	{r4, r5, r6, lr}
 80033ba:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 80033be:	3d7f      	subs	r5, #127	@ 0x7f
 80033c0:	2d16      	cmp	r5, #22
 80033c2:	4601      	mov	r1, r0
 80033c4:	4604      	mov	r4, r0
 80033c6:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 80033ca:	dc26      	bgt.n	800341a <floorf+0x62>
 80033cc:	2d00      	cmp	r5, #0
 80033ce:	da0f      	bge.n	80033f0 <floorf+0x38>
 80033d0:	4917      	ldr	r1, [pc, #92]	@ (8003430 <floorf+0x78>)
 80033d2:	f7fd fb01 	bl	80009d8 <__addsf3>
 80033d6:	2100      	movs	r1, #0
 80033d8:	f7fd fdc2 	bl	8000f60 <__aeabi_fcmpgt>
 80033dc:	b130      	cbz	r0, 80033ec <floorf+0x34>
 80033de:	2c00      	cmp	r4, #0
 80033e0:	da23      	bge.n	800342a <floorf+0x72>
 80033e2:	2e00      	cmp	r6, #0
 80033e4:	4c13      	ldr	r4, [pc, #76]	@ (8003434 <floorf+0x7c>)
 80033e6:	bf08      	it	eq
 80033e8:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80033ec:	4621      	mov	r1, r4
 80033ee:	e01a      	b.n	8003426 <floorf+0x6e>
 80033f0:	4e11      	ldr	r6, [pc, #68]	@ (8003438 <floorf+0x80>)
 80033f2:	412e      	asrs	r6, r5
 80033f4:	4230      	tst	r0, r6
 80033f6:	d016      	beq.n	8003426 <floorf+0x6e>
 80033f8:	490d      	ldr	r1, [pc, #52]	@ (8003430 <floorf+0x78>)
 80033fa:	f7fd faed 	bl	80009d8 <__addsf3>
 80033fe:	2100      	movs	r1, #0
 8003400:	f7fd fdae 	bl	8000f60 <__aeabi_fcmpgt>
 8003404:	2800      	cmp	r0, #0
 8003406:	d0f1      	beq.n	80033ec <floorf+0x34>
 8003408:	2c00      	cmp	r4, #0
 800340a:	bfbe      	ittt	lt
 800340c:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 8003410:	412b      	asrlt	r3, r5
 8003412:	18e4      	addlt	r4, r4, r3
 8003414:	ea24 0406 	bic.w	r4, r4, r6
 8003418:	e7e8      	b.n	80033ec <floorf+0x34>
 800341a:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800341e:	d302      	bcc.n	8003426 <floorf+0x6e>
 8003420:	f7fd fada 	bl	80009d8 <__addsf3>
 8003424:	4601      	mov	r1, r0
 8003426:	4608      	mov	r0, r1
 8003428:	bd70      	pop	{r4, r5, r6, pc}
 800342a:	2400      	movs	r4, #0
 800342c:	e7de      	b.n	80033ec <floorf+0x34>
 800342e:	bf00      	nop
 8003430:	7149f2ca 	.word	0x7149f2ca
 8003434:	bf800000 	.word	0xbf800000
 8003438:	007fffff 	.word	0x007fffff

0800343c <_init>:
 800343c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343e:	bf00      	nop
 8003440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003442:	bc08      	pop	{r3}
 8003444:	469e      	mov	lr, r3
 8003446:	4770      	bx	lr

08003448 <_fini>:
 8003448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344a:	bf00      	nop
 800344c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800344e:	bc08      	pop	{r3}
 8003450:	469e      	mov	lr, r3
 8003452:	4770      	bx	lr
