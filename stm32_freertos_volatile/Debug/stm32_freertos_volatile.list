
stm32_freertos_volatile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001468  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080015f0  080015f0  000025f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001600  08001600  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  08001600  08001600  00002600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001608  08001608  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001608  08001608  00002608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800160c  0800160c  0000260c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001610  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000300c  2**0
                  CONTENTS
 10 .bss          0000006c  2000000c  2000000c  0000300c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  0000300c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bd8f  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a71  00000000  00000000  0000edcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000890  00000000  00000000  00010840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b47  00000000  00000000  000110d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fb38  00000000  00000000  00011c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dca3  00000000  00000000  0003174f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4d40  00000000  00000000  0003f3f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00104132  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000016f0  00000000  00000000  00104178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00006607  00000000  00000000  00105868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000073  00000000  00000000  0010be6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080015d8 	.word	0x080015d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080015d8 	.word	0x080015d8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance == TIM2)
 80004b8:	6803      	ldr	r3, [r0, #0]
 80004ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80004be:	d000      	beq.n	80004c2 <HAL_TIM_PeriodElapsedCallback+0xa>
	{
		control_value = 1;
	}
}
 80004c0:	4770      	bx	lr
		control_value = 1;
 80004c2:	4b02      	ldr	r3, [pc, #8]	@ (80004cc <HAL_TIM_PeriodElapsedCallback+0x14>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	701a      	strb	r2, [r3, #0]
}
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	20000070 	.word	0x20000070

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d2:	2300      	movs	r3, #0
{
 80004d4:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 80004da:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004de:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80004e2:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e6:	4920      	ldr	r1, [pc, #128]	@ (8000568 <SystemClock_Config+0x98>)
 80004e8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ea:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ec:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ee:	4a1f      	ldr	r2, [pc, #124]	@ (800056c <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f0:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 80004f4:	6408      	str	r0, [r1, #64]	@ 0x40
 80004f6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80004f8:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 80004fc:	9101      	str	r1, [sp, #4]
 80004fe:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000500:	9302      	str	r3, [sp, #8]
 8000502:	6813      	ldr	r3, [r2, #0]
 8000504:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000508:	6013      	str	r3, [r2, #0]
 800050a:	6813      	ldr	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800050c:	2001      	movs	r0, #1
 800050e:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000512:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000516:	e9cd 0108 	strd	r0, r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051a:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800051c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000520:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000522:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000526:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 84;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000528:	2104      	movs	r1, #4
 800052a:	2002      	movs	r0, #2
 800052c:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000530:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000532:	2354      	movs	r3, #84	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000534:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000536:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000538:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053a:	f000 fb11 	bl	8000b60 <HAL_RCC_OscConfig>
 800053e:	b108      	cbz	r0, 8000544 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000540:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000542:	e7fe      	b.n	8000542 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000544:	210f      	movs	r1, #15
 8000546:	4603      	mov	r3, r0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000548:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054c:	9103      	str	r1, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800054e:	a803      	add	r0, sp, #12
 8000550:	4621      	mov	r1, r4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000552:	e9cd 4304 	strd	r4, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000556:	e9cd 2206 	strd	r2, r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800055a:	f000 fd17 	bl	8000f8c <HAL_RCC_ClockConfig>
 800055e:	b108      	cbz	r0, 8000564 <SystemClock_Config+0x94>
 8000560:	b672      	cpsid	i
  while (1)
 8000562:	e7fe      	b.n	8000562 <SystemClock_Config+0x92>
}
 8000564:	b014      	add	sp, #80	@ 0x50
 8000566:	bd10      	pop	{r4, pc}
 8000568:	40023800 	.word	0x40023800
 800056c:	40007000 	.word	0x40007000

08000570 <main>:
{
 8000570:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	2400      	movs	r4, #0
{
 8000574:	b08d      	sub	sp, #52	@ 0x34
  HAL_Init();
 8000576:	f000 f925 	bl	80007c4 <HAL_Init>
  SystemClock_Config();
 800057a:	f7ff ffa9 	bl	80004d0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8000582:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000586:	4b36      	ldr	r3, [pc, #216]	@ (8000660 <main+0xf0>)
 8000588:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	940b      	str	r4, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800058e:	4835      	ldr	r0, [pc, #212]	@ (8000664 <main+0xf4>)
  htim2.Instance = TIM2;
 8000590:	4d35      	ldr	r5, [pc, #212]	@ (8000668 <main+0xf8>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000592:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8000596:	6319      	str	r1, [r3, #48]	@ 0x30
 8000598:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800059a:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800059e:	9101      	str	r1, [sp, #4]
 80005a0:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005a2:	9402      	str	r4, [sp, #8]
 80005a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80005a6:	f041 0108 	orr.w	r1, r1, #8
 80005aa:	6319      	str	r1, [r3, #48]	@ 0x30
 80005ac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80005ae:	f001 0108 	and.w	r1, r1, #8
 80005b2:	9102      	str	r1, [sp, #8]
 80005b4:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	9403      	str	r4, [sp, #12]
 80005b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80005ba:	f041 0101 	orr.w	r1, r1, #1
 80005be:	6319      	str	r1, [r3, #48]	@ 0x30
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80005c6:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c8:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80005ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ce:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80005d0:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80005d4:	f000 fab6 	bl	8000b44 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005da:	4822      	ldr	r0, [pc, #136]	@ (8000664 <main+0xf4>)
 80005dc:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80005de:	e9cd 6307 	strd	r6, r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005e6:	f000 f98f 	bl	8000908 <HAL_GPIO_Init>
  htim2.Init.Prescaler = 8399;
 80005ea:	f242 03cf 	movw	r3, #8399	@ 0x20cf
 80005ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005f2:	e9c5 2300 	strd	r2, r3, [r5]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005f6:	4628      	mov	r0, r5
  htim2.Init.Period = 9999;
 80005f8:	f242 730f 	movw	r3, #9999	@ 0x270f
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005fc:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8000600:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000604:	9404      	str	r4, [sp, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000606:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000608:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800060a:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800060c:	9405      	str	r4, [sp, #20]
  htim2.Init.Period = 9999;
 800060e:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000610:	f000 fd5a 	bl	80010c8 <HAL_TIM_Base_Init>
 8000614:	b108      	cbz	r0, 800061a <main+0xaa>
 8000616:	b672      	cpsid	i
  while (1)
 8000618:	e7fe      	b.n	8000618 <main+0xa8>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800061a:	a907      	add	r1, sp, #28
 800061c:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800061e:	9607      	str	r6, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000620:	f000 fe24 	bl	800126c <HAL_TIM_ConfigClockSource>
 8000624:	b108      	cbz	r0, 800062a <main+0xba>
 8000626:	b672      	cpsid	i
  while (1)
 8000628:	e7fe      	b.n	8000628 <main+0xb8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800062a:	2200      	movs	r2, #0
 800062c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800062e:	a904      	add	r1, sp, #16
 8000630:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000632:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000636:	f000 ff67 	bl	8001508 <HAL_TIMEx_MasterConfigSynchronization>
 800063a:	4606      	mov	r6, r0
 800063c:	b108      	cbz	r0, 8000642 <main+0xd2>
 800063e:	b672      	cpsid	i
  while (1)
 8000640:	e7fe      	b.n	8000640 <main+0xd0>
  HAL_TIM_Base_Start_IT(&htim2);
 8000642:	4628      	mov	r0, r5
 8000644:	f000 fdd8 	bl	80011f8 <HAL_TIM_Base_Start_IT>
 8000648:	4c08      	ldr	r4, [pc, #32]	@ (800066c <main+0xfc>)
		  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 800064a:	4d06      	ldr	r5, [pc, #24]	@ (8000664 <main+0xf4>)
	  if(control_value)
 800064c:	7823      	ldrb	r3, [r4, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d0fc      	beq.n	800064c <main+0xdc>
		  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 8000652:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000656:	4628      	mov	r0, r5
 8000658:	f000 fa78 	bl	8000b4c <HAL_GPIO_TogglePin>
		  control_value = 0;
 800065c:	7026      	strb	r6, [r4, #0]
 800065e:	e7f5      	b.n	800064c <main+0xdc>
 8000660:	40023800 	.word	0x40023800
 8000664:	40020c00 	.word	0x40020c00
 8000668:	20000028 	.word	0x20000028
 800066c:	20000070 	.word	0x20000070

08000670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000670:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000672:	4b0c      	ldr	r3, [pc, #48]	@ (80006a4 <HAL_MspInit+0x34>)
 8000674:	2100      	movs	r1, #0
 8000676:	9100      	str	r1, [sp, #0]
 8000678:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800067a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000680:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000682:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800068a:	9101      	str	r1, [sp, #4]
 800068c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800068e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000692:	641a      	str	r2, [r3, #64]	@ 0x40
 8000694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800069a:	9301      	str	r3, [sp, #4]
 800069c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069e:	b002      	add	sp, #8
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800

080006a8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80006a8:	6803      	ldr	r3, [r0, #0]
 80006aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80006ae:	d000      	beq.n	80006b2 <HAL_TIM_Base_MspInit+0xa>
 80006b0:	4770      	bx	lr
{
 80006b2:	b500      	push	{lr}
 80006b4:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006b6:	2200      	movs	r2, #0
 80006b8:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 80006bc:	9201      	str	r2, [sp, #4]
 80006be:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80006c0:	f041 0101 	orr.w	r1, r1, #1
 80006c4:	6419      	str	r1, [r3, #64]	@ 0x40
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	9301      	str	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006ce:	201c      	movs	r0, #28
 80006d0:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006d2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006d4:	f000 f8b4 	bl	8000840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006d8:	201c      	movs	r0, #28

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80006da:	b003      	add	sp, #12
 80006dc:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006e0:	f000 b8ea 	b.w	80008b8 <HAL_NVIC_EnableIRQ>

080006e4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e4:	e7fe      	b.n	80006e4 <NMI_Handler>
 80006e6:	bf00      	nop

080006e8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <HardFault_Handler>
 80006ea:	bf00      	nop

080006ec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <MemManage_Handler>
 80006ee:	bf00      	nop

080006f0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <BusFault_Handler>
 80006f2:	bf00      	nop

080006f4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <UsageFault_Handler>
 80006f6:	bf00      	nop

080006f8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop

080006fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop

08000700 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000704:	f000 b878 	b.w	80007f8 <HAL_IncTick>

08000708 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000708:	4801      	ldr	r0, [pc, #4]	@ (8000710 <TIM2_IRQHandler+0x8>)
 800070a:	f000 be61 	b.w	80013d0 <HAL_TIM_IRQHandler>
 800070e:	bf00      	nop
 8000710:	20000028 	.word	0x20000028

08000714 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000714:	4a03      	ldr	r2, [pc, #12]	@ (8000724 <SystemInit+0x10>)
 8000716:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800071a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800071e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000722:	4770      	bx	lr
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000728:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000760 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800072c:	f7ff fff2 	bl	8000714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000730:	480c      	ldr	r0, [pc, #48]	@ (8000764 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000732:	490d      	ldr	r1, [pc, #52]	@ (8000768 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000734:	4a0d      	ldr	r2, [pc, #52]	@ (800076c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000738:	e002      	b.n	8000740 <LoopCopyDataInit>

0800073a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800073c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800073e:	3304      	adds	r3, #4

08000740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000744:	d3f9      	bcc.n	800073a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000746:	4a0a      	ldr	r2, [pc, #40]	@ (8000770 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000748:	4c0a      	ldr	r4, [pc, #40]	@ (8000774 <LoopFillZerobss+0x22>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800074c:	e001      	b.n	8000752 <LoopFillZerobss>

0800074e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800074e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000750:	3204      	adds	r2, #4

08000752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000754:	d3fb      	bcc.n	800074e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000756:	f000 ff1b 	bl	8001590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800075a:	f7ff ff09 	bl	8000570 <main>
  bx  lr    
 800075e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000760:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000768:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800076c:	08001610 	.word	0x08001610
  ldr r2, =_sbss
 8000770:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000774:	20000078 	.word	0x20000078

08000778 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000778:	e7fe      	b.n	8000778 <ADC_IRQHandler>
	...

0800077c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800077c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800077e:	4a0e      	ldr	r2, [pc, #56]	@ (80007b8 <HAL_InitTick+0x3c>)
 8000780:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <HAL_InitTick+0x40>)
 8000782:	7812      	ldrb	r2, [r2, #0]
 8000784:	681b      	ldr	r3, [r3, #0]
{
 8000786:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000788:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800078c:	fbb0 f0f2 	udiv	r0, r0, r2
 8000790:	fbb3 f0f0 	udiv	r0, r3, r0
 8000794:	f000 f89e 	bl	80008d4 <HAL_SYSTICK_Config>
 8000798:	b908      	cbnz	r0, 800079e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800079a:	2d0f      	cmp	r5, #15
 800079c:	d901      	bls.n	80007a2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800079e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80007a0:	bd38      	pop	{r3, r4, r5, pc}
 80007a2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a4:	4602      	mov	r2, r0
 80007a6:	4629      	mov	r1, r5
 80007a8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ac:	f000 f848 	bl	8000840 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b0:	4b03      	ldr	r3, [pc, #12]	@ (80007c0 <HAL_InitTick+0x44>)
 80007b2:	4620      	mov	r0, r4
 80007b4:	601d      	str	r5, [r3, #0]
}
 80007b6:	bd38      	pop	{r3, r4, r5, pc}
 80007b8:	20000004 	.word	0x20000004
 80007bc:	20000000 	.word	0x20000000
 80007c0:	20000008 	.word	0x20000008

080007c4 <HAL_Init>:
{
 80007c4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007c6:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <HAL_Init+0x30>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80007ce:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80007d6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80007de:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e0:	2003      	movs	r0, #3
 80007e2:	f000 f81b 	bl	800081c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80007e6:	200f      	movs	r0, #15
 80007e8:	f7ff ffc8 	bl	800077c <HAL_InitTick>
  HAL_MspInit();
 80007ec:	f7ff ff40 	bl	8000670 <HAL_MspInit>
}
 80007f0:	2000      	movs	r0, #0
 80007f2:	bd08      	pop	{r3, pc}
 80007f4:	40023c00 	.word	0x40023c00

080007f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80007f8:	4a03      	ldr	r2, [pc, #12]	@ (8000808 <HAL_IncTick+0x10>)
 80007fa:	4b04      	ldr	r3, [pc, #16]	@ (800080c <HAL_IncTick+0x14>)
 80007fc:	6811      	ldr	r1, [r2, #0]
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	440b      	add	r3, r1
 8000802:	6013      	str	r3, [r2, #0]
}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	20000074 	.word	0x20000074
 800080c:	20000004 	.word	0x20000004

08000810 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000810:	4b01      	ldr	r3, [pc, #4]	@ (8000818 <HAL_GetTick+0x8>)
 8000812:	6818      	ldr	r0, [r3, #0]
}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20000074 	.word	0x20000074

0800081c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800081c:	4907      	ldr	r1, [pc, #28]	@ (800083c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800081e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000820:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000822:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000826:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800082a:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800082c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800082e:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000832:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000836:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000840:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <HAL_NVIC_SetPriority+0x70>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000848:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800084a:	f1c3 0e07 	rsb	lr, r3, #7
 800084e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000852:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000856:	bf28      	it	cs
 8000858:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800085c:	f1bc 0f06 	cmp.w	ip, #6
 8000860:	d91c      	bls.n	800089c <HAL_NVIC_SetPriority+0x5c>
 8000862:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
 800086a:	fa03 f30c 	lsl.w	r3, r3, ip
 800086e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
 8000876:	fa03 f30e 	lsl.w	r3, r3, lr
 800087a:	ea21 0303 	bic.w	r3, r1, r3
 800087e:	fa03 f30c 	lsl.w	r3, r3, ip
 8000882:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000884:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8000886:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000888:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800088a:	db0a      	blt.n	80008a2 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000890:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000894:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000898:	f85d fb04 	ldr.w	pc, [sp], #4
 800089c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800089e:	4694      	mov	ip, r2
 80008a0:	e7e7      	b.n	8000872 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a2:	4a04      	ldr	r2, [pc, #16]	@ (80008b4 <HAL_NVIC_SetPriority+0x74>)
 80008a4:	f000 000f 	and.w	r0, r0, #15
 80008a8:	4402      	add	r2, r0
 80008aa:	7613      	strb	r3, [r2, #24]
 80008ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80008b0:	e000ed00 	.word	0xe000ed00
 80008b4:	e000ecfc 	.word	0xe000ecfc

080008b8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80008b8:	2800      	cmp	r0, #0
 80008ba:	db07      	blt.n	80008cc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008bc:	4a04      	ldr	r2, [pc, #16]	@ (80008d0 <HAL_NVIC_EnableIRQ+0x18>)
 80008be:	0941      	lsrs	r1, r0, #5
 80008c0:	2301      	movs	r3, #1
 80008c2:	f000 001f 	and.w	r0, r0, #31
 80008c6:	4083      	lsls	r3, r0
 80008c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000e100 	.word	0xe000e100

080008d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d4:	3801      	subs	r0, #1
 80008d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80008da:	d301      	bcc.n	80008e0 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008dc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008de:	4770      	bx	lr
{
 80008e0:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008e2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e6:	4c07      	ldr	r4, [pc, #28]	@ (8000904 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008e8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ea:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 80008ee:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f4:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f8:	619a      	str	r2, [r3, #24]
}
 80008fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008fe:	6119      	str	r1, [r3, #16]
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800090c:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800090e:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000910:	f8df a218 	ldr.w	sl, [pc, #536]	@ 8000b2c <HAL_GPIO_Init+0x224>
{
 8000914:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 8000916:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800091a:	4689      	mov	r9, r1
 800091c:	e003      	b.n	8000926 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800091e:	3301      	adds	r3, #1
 8000920:	2b10      	cmp	r3, #16
 8000922:	f000 8091 	beq.w	8000a48 <HAL_GPIO_Init+0x140>
    ioposition = 0x01U << position;
 8000926:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800092a:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 800092e:	43a2      	bics	r2, r4
 8000930:	d1f5      	bne.n	800091e <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000932:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8000936:	f001 0203 	and.w	r2, r1, #3
 800093a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800093e:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000940:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000942:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000946:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000948:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800094c:	d97f      	bls.n	8000a4e <HAL_GPIO_Init+0x146>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800094e:	2a03      	cmp	r2, #3
 8000950:	f040 80b6 	bne.w	8000ac0 <HAL_GPIO_Init+0x1b8>
      temp = GPIOx->MODER;
 8000954:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000956:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800095a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800095c:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800095e:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8000962:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000964:	d0db      	beq.n	800091e <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	2200      	movs	r2, #0
 8000968:	9203      	str	r2, [sp, #12]
 800096a:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 800096e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000972:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8000976:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 800097a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800097e:	9203      	str	r2, [sp, #12]
 8000980:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000982:	f023 0203 	bic.w	r2, r3, #3
 8000986:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800098a:	f003 0703 	and.w	r7, r3, #3
 800098e:	260f      	movs	r6, #15
 8000990:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8000994:	00bf      	lsls	r7, r7, #2
 8000996:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800099a:	4e61      	ldr	r6, [pc, #388]	@ (8000b20 <HAL_GPIO_Init+0x218>)
        temp = SYSCFG->EXTICR[position >> 2U];
 800099c:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800099e:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009a0:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009a4:	d027      	beq.n	80009f6 <HAL_GPIO_Init+0xee>
 80009a6:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80009aa:	42b0      	cmp	r0, r6
 80009ac:	f000 8093 	beq.w	8000ad6 <HAL_GPIO_Init+0x1ce>
 80009b0:	4e5c      	ldr	r6, [pc, #368]	@ (8000b24 <HAL_GPIO_Init+0x21c>)
 80009b2:	42b0      	cmp	r0, r6
 80009b4:	f000 8095 	beq.w	8000ae2 <HAL_GPIO_Init+0x1da>
 80009b8:	f8df c174 	ldr.w	ip, [pc, #372]	@ 8000b30 <HAL_GPIO_Init+0x228>
 80009bc:	4560      	cmp	r0, ip
 80009be:	f000 8096 	beq.w	8000aee <HAL_GPIO_Init+0x1e6>
 80009c2:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8000b34 <HAL_GPIO_Init+0x22c>
 80009c6:	4560      	cmp	r0, ip
 80009c8:	f000 8097 	beq.w	8000afa <HAL_GPIO_Init+0x1f2>
 80009cc:	f8df c168 	ldr.w	ip, [pc, #360]	@ 8000b38 <HAL_GPIO_Init+0x230>
 80009d0:	4560      	cmp	r0, ip
 80009d2:	f000 8098 	beq.w	8000b06 <HAL_GPIO_Init+0x1fe>
 80009d6:	f8df c164 	ldr.w	ip, [pc, #356]	@ 8000b3c <HAL_GPIO_Init+0x234>
 80009da:	4560      	cmp	r0, ip
 80009dc:	f000 8099 	beq.w	8000b12 <HAL_GPIO_Init+0x20a>
 80009e0:	f8df c15c 	ldr.w	ip, [pc, #348]	@ 8000b40 <HAL_GPIO_Init+0x238>
 80009e4:	4560      	cmp	r0, ip
 80009e6:	bf0c      	ite	eq
 80009e8:	f04f 0c07 	moveq.w	ip, #7
 80009ec:	f04f 0c08 	movne.w	ip, #8
 80009f0:	fa0c f707 	lsl.w	r7, ip, r7
 80009f4:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009f6:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009f8:	4a4b      	ldr	r2, [pc, #300]	@ (8000b28 <HAL_GPIO_Init+0x220>)
 80009fa:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80009fc:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 80009fe:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000a02:	4e49      	ldr	r6, [pc, #292]	@ (8000b28 <HAL_GPIO_Init+0x220>)
        temp &= ~((uint32_t)iocurrent);
 8000a04:	bf54      	ite	pl
 8000a06:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8000a08:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 8000a0c:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8000a0e:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8000a10:	4e45      	ldr	r6, [pc, #276]	@ (8000b28 <HAL_GPIO_Init+0x220>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a12:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 8000a14:	bf54      	ite	pl
 8000a16:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8000a18:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8000a1c:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8000a1e:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a20:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000a22:	4e41      	ldr	r6, [pc, #260]	@ (8000b28 <HAL_GPIO_Init+0x220>)
        temp &= ~((uint32_t)iocurrent);
 8000a24:	bf54      	ite	pl
 8000a26:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8000a28:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8000a2c:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a2e:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a30:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a32:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000a36:	493c      	ldr	r1, [pc, #240]	@ (8000b28 <HAL_GPIO_Init+0x220>)
        temp &= ~((uint32_t)iocurrent);
 8000a38:	bf54      	ite	pl
 8000a3a:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8000a3c:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a40:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8000a42:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a44:	f47f af6f 	bne.w	8000926 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8000a48:	b005      	add	sp, #20
 8000a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8000a4e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a50:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a54:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8000a58:	fa07 f70c 	lsl.w	r7, r7, ip
 8000a5c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000a60:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a62:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a64:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a68:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8000a6c:	409f      	lsls	r7, r3
 8000a6e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000a72:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000a74:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a76:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a7a:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8000a7e:	fa07 f70c 	lsl.w	r7, r7, ip
 8000a82:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a86:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8000a88:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a8a:	f47f af63 	bne.w	8000954 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 8000a8e:	08df      	lsrs	r7, r3, #3
 8000a90:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8000a94:	9701      	str	r7, [sp, #4]
 8000a96:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a98:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8000a9c:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a9e:	f003 0e07 	and.w	lr, r3, #7
 8000aa2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000aa6:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000aa8:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000aac:	fa06 fe0e 	lsl.w	lr, r6, lr
 8000ab0:	9e00      	ldr	r6, [sp, #0]
 8000ab2:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000ab6:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ab8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000abc:	6237      	str	r7, [r6, #32]
 8000abe:	e749      	b.n	8000954 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 8000ac0:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ac2:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ac6:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8000aca:	fa07 f70c 	lsl.w	r7, r7, ip
 8000ace:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8000ad2:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ad4:	e73e      	b.n	8000954 <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ad6:	f04f 0c01 	mov.w	ip, #1
 8000ada:	fa0c f707 	lsl.w	r7, ip, r7
 8000ade:	433d      	orrs	r5, r7
 8000ae0:	e789      	b.n	80009f6 <HAL_GPIO_Init+0xee>
 8000ae2:	f04f 0c02 	mov.w	ip, #2
 8000ae6:	fa0c f707 	lsl.w	r7, ip, r7
 8000aea:	433d      	orrs	r5, r7
 8000aec:	e783      	b.n	80009f6 <HAL_GPIO_Init+0xee>
 8000aee:	f04f 0c03 	mov.w	ip, #3
 8000af2:	fa0c f707 	lsl.w	r7, ip, r7
 8000af6:	433d      	orrs	r5, r7
 8000af8:	e77d      	b.n	80009f6 <HAL_GPIO_Init+0xee>
 8000afa:	f04f 0c04 	mov.w	ip, #4
 8000afe:	fa0c f707 	lsl.w	r7, ip, r7
 8000b02:	433d      	orrs	r5, r7
 8000b04:	e777      	b.n	80009f6 <HAL_GPIO_Init+0xee>
 8000b06:	f04f 0c05 	mov.w	ip, #5
 8000b0a:	fa0c f707 	lsl.w	r7, ip, r7
 8000b0e:	433d      	orrs	r5, r7
 8000b10:	e771      	b.n	80009f6 <HAL_GPIO_Init+0xee>
 8000b12:	f04f 0c06 	mov.w	ip, #6
 8000b16:	fa0c f707 	lsl.w	r7, ip, r7
 8000b1a:	433d      	orrs	r5, r7
 8000b1c:	e76b      	b.n	80009f6 <HAL_GPIO_Init+0xee>
 8000b1e:	bf00      	nop
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020800 	.word	0x40020800
 8000b28:	40013c00 	.word	0x40013c00
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020c00 	.word	0x40020c00
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40021400 	.word	0x40021400
 8000b3c:	40021800 	.word	0x40021800
 8000b40:	40021c00 	.word	0x40021c00

08000b44 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b44:	b902      	cbnz	r2, 8000b48 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b46:	0409      	lsls	r1, r1, #16
 8000b48:	6181      	str	r1, [r0, #24]
  }
}
 8000b4a:	4770      	bx	lr

08000b4c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b4c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b4e:	ea01 0203 	and.w	r2, r1, r3
 8000b52:	ea21 0103 	bic.w	r1, r1, r3
 8000b56:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000b5a:	6181      	str	r1, [r0, #24]
}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b60:	2800      	cmp	r0, #0
 8000b62:	f000 81d8 	beq.w	8000f16 <HAL_RCC_OscConfig+0x3b6>
{
 8000b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b6a:	6803      	ldr	r3, [r0, #0]
 8000b6c:	07dd      	lsls	r5, r3, #31
{
 8000b6e:	b082      	sub	sp, #8
 8000b70:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b72:	d52f      	bpl.n	8000bd4 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000b74:	499d      	ldr	r1, [pc, #628]	@ (8000dec <HAL_RCC_OscConfig+0x28c>)
 8000b76:	688a      	ldr	r2, [r1, #8]
 8000b78:	f002 020c 	and.w	r2, r2, #12
 8000b7c:	2a04      	cmp	r2, #4
 8000b7e:	f000 80ec 	beq.w	8000d5a <HAL_RCC_OscConfig+0x1fa>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b82:	688a      	ldr	r2, [r1, #8]
 8000b84:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000b88:	2a08      	cmp	r2, #8
 8000b8a:	f000 80e2 	beq.w	8000d52 <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b8e:	6863      	ldr	r3, [r4, #4]
 8000b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b94:	f000 80eb 	beq.w	8000d6e <HAL_RCC_OscConfig+0x20e>
 8000b98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000b9c:	f000 8173 	beq.w	8000e86 <HAL_RCC_OscConfig+0x326>
 8000ba0:	4d92      	ldr	r5, [pc, #584]	@ (8000dec <HAL_RCC_OscConfig+0x28c>)
 8000ba2:	682a      	ldr	r2, [r5, #0]
 8000ba4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000ba8:	602a      	str	r2, [r5, #0]
 8000baa:	682a      	ldr	r2, [r5, #0]
 8000bac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000bb0:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f040 80e0 	bne.w	8000d78 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb8:	f7ff fe2a 	bl	8000810 <HAL_GetTick>
 8000bbc:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bbe:	e005      	b.n	8000bcc <HAL_RCC_OscConfig+0x6c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bc0:	f7ff fe26 	bl	8000810 <HAL_GetTick>
 8000bc4:	1b80      	subs	r0, r0, r6
 8000bc6:	2864      	cmp	r0, #100	@ 0x64
 8000bc8:	f200 8100 	bhi.w	8000dcc <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bcc:	682b      	ldr	r3, [r5, #0]
 8000bce:	039f      	lsls	r7, r3, #14
 8000bd0:	d4f6      	bmi.n	8000bc0 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bd2:	6823      	ldr	r3, [r4, #0]
 8000bd4:	079d      	lsls	r5, r3, #30
 8000bd6:	d528      	bpl.n	8000c2a <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000bd8:	4a84      	ldr	r2, [pc, #528]	@ (8000dec <HAL_RCC_OscConfig+0x28c>)
 8000bda:	6891      	ldr	r1, [r2, #8]
 8000bdc:	f011 0f0c 	tst.w	r1, #12
 8000be0:	f000 809b 	beq.w	8000d1a <HAL_RCC_OscConfig+0x1ba>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000be4:	6891      	ldr	r1, [r2, #8]
 8000be6:	f001 010c 	and.w	r1, r1, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000bea:	2908      	cmp	r1, #8
 8000bec:	f000 8091 	beq.w	8000d12 <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000bf0:	68e3      	ldr	r3, [r4, #12]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f000 810c 	beq.w	8000e10 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bf8:	4b7d      	ldr	r3, [pc, #500]	@ (8000df0 <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bfa:	4e7c      	ldr	r6, [pc, #496]	@ (8000dec <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c00:	f7ff fe06 	bl	8000810 <HAL_GetTick>
 8000c04:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c06:	e005      	b.n	8000c14 <HAL_RCC_OscConfig+0xb4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c08:	f7ff fe02 	bl	8000810 <HAL_GetTick>
 8000c0c:	1b40      	subs	r0, r0, r5
 8000c0e:	2802      	cmp	r0, #2
 8000c10:	f200 80dc 	bhi.w	8000dcc <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c14:	6833      	ldr	r3, [r6, #0]
 8000c16:	079f      	lsls	r7, r3, #30
 8000c18:	d5f6      	bpl.n	8000c08 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c1a:	6833      	ldr	r3, [r6, #0]
 8000c1c:	6922      	ldr	r2, [r4, #16]
 8000c1e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000c22:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c26:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c28:	6823      	ldr	r3, [r4, #0]
 8000c2a:	071a      	lsls	r2, r3, #28
 8000c2c:	d45c      	bmi.n	8000ce8 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c2e:	075d      	lsls	r5, r3, #29
 8000c30:	d53a      	bpl.n	8000ca8 <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c32:	4a6e      	ldr	r2, [pc, #440]	@ (8000dec <HAL_RCC_OscConfig+0x28c>)
 8000c34:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000c36:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 8000c3a:	f040 8088 	bne.w	8000d4e <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	9301      	str	r3, [sp, #4]
 8000c40:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000c42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c46:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c48:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c4e:	9301      	str	r3, [sp, #4]
 8000c50:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c52:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c54:	4e67      	ldr	r6, [pc, #412]	@ (8000df4 <HAL_RCC_OscConfig+0x294>)
 8000c56:	6833      	ldr	r3, [r6, #0]
 8000c58:	05d8      	lsls	r0, r3, #23
 8000c5a:	f140 80a7 	bpl.w	8000dac <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c5e:	68a3      	ldr	r3, [r4, #8]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	f000 80b7 	beq.w	8000dd4 <HAL_RCC_OscConfig+0x274>
 8000c66:	2b05      	cmp	r3, #5
 8000c68:	f000 811d 	beq.w	8000ea6 <HAL_RCC_OscConfig+0x346>
 8000c6c:	4e5f      	ldr	r6, [pc, #380]	@ (8000dec <HAL_RCC_OscConfig+0x28c>)
 8000c6e:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8000c70:	f022 0201 	bic.w	r2, r2, #1
 8000c74:	6732      	str	r2, [r6, #112]	@ 0x70
 8000c76:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8000c78:	f022 0204 	bic.w	r2, r2, #4
 8000c7c:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f040 80ad 	bne.w	8000dde <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c84:	f7ff fdc4 	bl	8000810 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c88:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8000c8c:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c8e:	e005      	b.n	8000c9c <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c90:	f7ff fdbe 	bl	8000810 <HAL_GetTick>
 8000c94:	1bc0      	subs	r0, r0, r7
 8000c96:	4540      	cmp	r0, r8
 8000c98:	f200 8098 	bhi.w	8000dcc <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c9c:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8000c9e:	079b      	lsls	r3, r3, #30
 8000ca0:	d4f6      	bmi.n	8000c90 <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000ca2:	2d00      	cmp	r5, #0
 8000ca4:	f040 80f9 	bne.w	8000e9a <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ca8:	69a3      	ldr	r3, [r4, #24]
 8000caa:	b1cb      	cbz	r3, 8000ce0 <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000cac:	4d4f      	ldr	r5, [pc, #316]	@ (8000dec <HAL_RCC_OscConfig+0x28c>)
 8000cae:	68aa      	ldr	r2, [r5, #8]
 8000cb0:	f002 020c 	and.w	r2, r2, #12
 8000cb4:	2a08      	cmp	r2, #8
 8000cb6:	f000 80bc 	beq.w	8000e32 <HAL_RCC_OscConfig+0x2d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cba:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cbc:	4b4c      	ldr	r3, [pc, #304]	@ (8000df0 <HAL_RCC_OscConfig+0x290>)
 8000cbe:	f04f 0200 	mov.w	r2, #0
 8000cc2:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cc4:	f000 80f9 	beq.w	8000eba <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc8:	f7ff fda2 	bl	8000810 <HAL_GetTick>
 8000ccc:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000cce:	e004      	b.n	8000cda <HAL_RCC_OscConfig+0x17a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cd0:	f7ff fd9e 	bl	8000810 <HAL_GetTick>
 8000cd4:	1b00      	subs	r0, r0, r4
 8000cd6:	2802      	cmp	r0, #2
 8000cd8:	d878      	bhi.n	8000dcc <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000cda:	682b      	ldr	r3, [r5, #0]
 8000cdc:	019b      	lsls	r3, r3, #6
 8000cde:	d4f7      	bmi.n	8000cd0 <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000ce0:	2000      	movs	r0, #0
}
 8000ce2:	b002      	add	sp, #8
 8000ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000ce8:	6963      	ldr	r3, [r4, #20]
 8000cea:	b1fb      	cbz	r3, 8000d2c <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 8000cec:	4b40      	ldr	r3, [pc, #256]	@ (8000df0 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cee:	4e3f      	ldr	r6, [pc, #252]	@ (8000dec <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8000cf6:	f7ff fd8b 	bl	8000810 <HAL_GetTick>
 8000cfa:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cfc:	e004      	b.n	8000d08 <HAL_RCC_OscConfig+0x1a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cfe:	f7ff fd87 	bl	8000810 <HAL_GetTick>
 8000d02:	1b40      	subs	r0, r0, r5
 8000d04:	2802      	cmp	r0, #2
 8000d06:	d861      	bhi.n	8000dcc <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d08:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8000d0a:	079b      	lsls	r3, r3, #30
 8000d0c:	d5f7      	bpl.n	8000cfe <HAL_RCC_OscConfig+0x19e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d0e:	6823      	ldr	r3, [r4, #0]
 8000d10:	e78d      	b.n	8000c2e <HAL_RCC_OscConfig+0xce>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d12:	6852      	ldr	r2, [r2, #4]
 8000d14:	0251      	lsls	r1, r2, #9
 8000d16:	f53f af6b 	bmi.w	8000bf0 <HAL_RCC_OscConfig+0x90>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d1a:	4a34      	ldr	r2, [pc, #208]	@ (8000dec <HAL_RCC_OscConfig+0x28c>)
 8000d1c:	6812      	ldr	r2, [r2, #0]
 8000d1e:	0792      	lsls	r2, r2, #30
 8000d20:	d538      	bpl.n	8000d94 <HAL_RCC_OscConfig+0x234>
 8000d22:	68e2      	ldr	r2, [r4, #12]
 8000d24:	2a01      	cmp	r2, #1
 8000d26:	d035      	beq.n	8000d94 <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 8000d28:	2001      	movs	r0, #1
 8000d2a:	e7da      	b.n	8000ce2 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 8000d2c:	4a30      	ldr	r2, [pc, #192]	@ (8000df0 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d2e:	4e2f      	ldr	r6, [pc, #188]	@ (8000dec <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 8000d30:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8000d34:	f7ff fd6c 	bl	8000810 <HAL_GetTick>
 8000d38:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d3a:	e004      	b.n	8000d46 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d3c:	f7ff fd68 	bl	8000810 <HAL_GetTick>
 8000d40:	1b40      	subs	r0, r0, r5
 8000d42:	2802      	cmp	r0, #2
 8000d44:	d842      	bhi.n	8000dcc <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d46:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8000d48:	079f      	lsls	r7, r3, #30
 8000d4a:	d4f7      	bmi.n	8000d3c <HAL_RCC_OscConfig+0x1dc>
 8000d4c:	e7df      	b.n	8000d0e <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 8000d4e:	2500      	movs	r5, #0
 8000d50:	e780      	b.n	8000c54 <HAL_RCC_OscConfig+0xf4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d52:	684a      	ldr	r2, [r1, #4]
 8000d54:	0251      	lsls	r1, r2, #9
 8000d56:	f57f af1a 	bpl.w	8000b8e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5a:	4a24      	ldr	r2, [pc, #144]	@ (8000dec <HAL_RCC_OscConfig+0x28c>)
 8000d5c:	6812      	ldr	r2, [r2, #0]
 8000d5e:	0392      	lsls	r2, r2, #14
 8000d60:	f57f af38 	bpl.w	8000bd4 <HAL_RCC_OscConfig+0x74>
 8000d64:	6862      	ldr	r2, [r4, #4]
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f47f af34 	bne.w	8000bd4 <HAL_RCC_OscConfig+0x74>
 8000d6c:	e7dc      	b.n	8000d28 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8000dec <HAL_RCC_OscConfig+0x28c>)
 8000d70:	6813      	ldr	r3, [r2, #0]
 8000d72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d76:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000d78:	f7ff fd4a 	bl	8000810 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d7c:	4e1b      	ldr	r6, [pc, #108]	@ (8000dec <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000d7e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d80:	e004      	b.n	8000d8c <HAL_RCC_OscConfig+0x22c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d82:	f7ff fd45 	bl	8000810 <HAL_GetTick>
 8000d86:	1b40      	subs	r0, r0, r5
 8000d88:	2864      	cmp	r0, #100	@ 0x64
 8000d8a:	d81f      	bhi.n	8000dcc <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d8c:	6833      	ldr	r3, [r6, #0]
 8000d8e:	039b      	lsls	r3, r3, #14
 8000d90:	d5f7      	bpl.n	8000d82 <HAL_RCC_OscConfig+0x222>
 8000d92:	e71e      	b.n	8000bd2 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d94:	4915      	ldr	r1, [pc, #84]	@ (8000dec <HAL_RCC_OscConfig+0x28c>)
 8000d96:	6920      	ldr	r0, [r4, #16]
 8000d98:	680a      	ldr	r2, [r1, #0]
 8000d9a:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8000d9e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8000da2:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000da4:	071a      	lsls	r2, r3, #28
 8000da6:	f57f af42 	bpl.w	8000c2e <HAL_RCC_OscConfig+0xce>
 8000daa:	e79d      	b.n	8000ce8 <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dac:	6833      	ldr	r3, [r6, #0]
 8000dae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000db2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000db4:	f7ff fd2c 	bl	8000810 <HAL_GetTick>
 8000db8:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dba:	6833      	ldr	r3, [r6, #0]
 8000dbc:	05d9      	lsls	r1, r3, #23
 8000dbe:	f53f af4e 	bmi.w	8000c5e <HAL_RCC_OscConfig+0xfe>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dc2:	f7ff fd25 	bl	8000810 <HAL_GetTick>
 8000dc6:	1bc0      	subs	r0, r0, r7
 8000dc8:	2802      	cmp	r0, #2
 8000dca:	d9f6      	bls.n	8000dba <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8000dcc:	2003      	movs	r0, #3
}
 8000dce:	b002      	add	sp, #8
 8000dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dd4:	4a05      	ldr	r2, [pc, #20]	@ (8000dec <HAL_RCC_OscConfig+0x28c>)
 8000dd6:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8000dde:	f7ff fd17 	bl	8000810 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000de2:	4f02      	ldr	r7, [pc, #8]	@ (8000dec <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000de4:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000de6:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dea:	e00a      	b.n	8000e02 <HAL_RCC_OscConfig+0x2a2>
 8000dec:	40023800 	.word	0x40023800
 8000df0:	42470000 	.word	0x42470000
 8000df4:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000df8:	f7ff fd0a 	bl	8000810 <HAL_GetTick>
 8000dfc:	1b80      	subs	r0, r0, r6
 8000dfe:	4540      	cmp	r0, r8
 8000e00:	d8e4      	bhi.n	8000dcc <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000e04:	079a      	lsls	r2, r3, #30
 8000e06:	d5f7      	bpl.n	8000df8 <HAL_RCC_OscConfig+0x298>
    if (pwrclkchanged == SET)
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	f43f af4d 	beq.w	8000ca8 <HAL_RCC_OscConfig+0x148>
 8000e0e:	e044      	b.n	8000e9a <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 8000e10:	4a42      	ldr	r2, [pc, #264]	@ (8000f1c <HAL_RCC_OscConfig+0x3bc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e12:	4e43      	ldr	r6, [pc, #268]	@ (8000f20 <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 8000e14:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000e16:	f7ff fcfb 	bl	8000810 <HAL_GetTick>
 8000e1a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e1c:	e004      	b.n	8000e28 <HAL_RCC_OscConfig+0x2c8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e1e:	f7ff fcf7 	bl	8000810 <HAL_GetTick>
 8000e22:	1b40      	subs	r0, r0, r5
 8000e24:	2802      	cmp	r0, #2
 8000e26:	d8d1      	bhi.n	8000dcc <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e28:	6833      	ldr	r3, [r6, #0]
 8000e2a:	0799      	lsls	r1, r3, #30
 8000e2c:	d4f7      	bmi.n	8000e1e <HAL_RCC_OscConfig+0x2be>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e2e:	6823      	ldr	r3, [r4, #0]
 8000e30:	e6fb      	b.n	8000c2a <HAL_RCC_OscConfig+0xca>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	f43f af78 	beq.w	8000d28 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 8000e38:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000e3a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e3c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000e40:	4291      	cmp	r1, r2
 8000e42:	f47f af71 	bne.w	8000d28 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e46:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000e48:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e4c:	4291      	cmp	r1, r2
 8000e4e:	f47f af6b 	bne.w	8000d28 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000e52:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000e54:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8000e58:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000e5a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000e5e:	f47f af63 	bne.w	8000d28 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000e62:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000e64:	0852      	lsrs	r2, r2, #1
 8000e66:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8000e6a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000e6c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000e70:	f47f af5a 	bne.w	8000d28 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000e74:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000e76:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000e7a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8000e7e:	bf14      	ite	ne
 8000e80:	2001      	movne	r0, #1
 8000e82:	2000      	moveq	r0, #0
 8000e84:	e72d      	b.n	8000ce2 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e86:	4b26      	ldr	r3, [pc, #152]	@ (8000f20 <HAL_RCC_OscConfig+0x3c0>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000e96:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e98:	e76e      	b.n	8000d78 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e9a:	4a21      	ldr	r2, [pc, #132]	@ (8000f20 <HAL_RCC_OscConfig+0x3c0>)
 8000e9c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000e9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000ea2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea4:	e700      	b.n	8000ca8 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f20 <HAL_RCC_OscConfig+0x3c0>)
 8000ea8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000eaa:	f042 0204 	orr.w	r2, r2, #4
 8000eae:	671a      	str	r2, [r3, #112]	@ 0x70
 8000eb0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000eb2:	f042 0201 	orr.w	r2, r2, #1
 8000eb6:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000eb8:	e791      	b.n	8000dde <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8000eba:	f7ff fca9 	bl	8000810 <HAL_GetTick>
 8000ebe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ec0:	e005      	b.n	8000ece <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ec2:	f7ff fca5 	bl	8000810 <HAL_GetTick>
 8000ec6:	1b80      	subs	r0, r0, r6
 8000ec8:	2802      	cmp	r0, #2
 8000eca:	f63f af7f 	bhi.w	8000dcc <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ece:	682b      	ldr	r3, [r5, #0]
 8000ed0:	0199      	lsls	r1, r3, #6
 8000ed2:	d4f6      	bmi.n	8000ec2 <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ed4:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8000ed8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8000eda:	430b      	orrs	r3, r1
 8000edc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ee0:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	@ 0x28
 8000ee4:	0852      	lsrs	r2, r2, #1
 8000ee6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000eea:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8000eec:	490b      	ldr	r1, [pc, #44]	@ (8000f1c <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000eee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8000ef2:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ef4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ef6:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000ef8:	f7ff fc8a 	bl	8000810 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000efc:	4d08      	ldr	r5, [pc, #32]	@ (8000f20 <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 8000efe:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f00:	e005      	b.n	8000f0e <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f02:	f7ff fc85 	bl	8000810 <HAL_GetTick>
 8000f06:	1b00      	subs	r0, r0, r4
 8000f08:	2802      	cmp	r0, #2
 8000f0a:	f63f af5f 	bhi.w	8000dcc <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f0e:	682b      	ldr	r3, [r5, #0]
 8000f10:	019a      	lsls	r2, r3, #6
 8000f12:	d5f6      	bpl.n	8000f02 <HAL_RCC_OscConfig+0x3a2>
 8000f14:	e6e4      	b.n	8000ce0 <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 8000f16:	2001      	movs	r0, #1
}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	42470000 	.word	0x42470000
 8000f20:	40023800 	.word	0x40023800

08000f24 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f24:	4916      	ldr	r1, [pc, #88]	@ (8000f80 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8000f26:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f28:	688b      	ldr	r3, [r1, #8]
 8000f2a:	f003 030c 	and.w	r3, r3, #12
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	d01b      	beq.n	8000f6a <HAL_RCC_GetSysClockFreq+0x46>
 8000f32:	2b08      	cmp	r3, #8
 8000f34:	d117      	bne.n	8000f66 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f36:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f38:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f3a:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f3c:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f40:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f44:	d113      	bne.n	8000f6e <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f46:	480f      	ldr	r0, [pc, #60]	@ (8000f84 <HAL_RCC_GetSysClockFreq+0x60>)
 8000f48:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000f4c:	fba1 0100 	umull	r0, r1, r1, r0
 8000f50:	f7ff f93a 	bl	80001c8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8000f54:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8000f60:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000f64:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8000f66:	4807      	ldr	r0, [pc, #28]	@ (8000f84 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8000f68:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f6a:	4807      	ldr	r0, [pc, #28]	@ (8000f88 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8000f6c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f6e:	4806      	ldr	r0, [pc, #24]	@ (8000f88 <HAL_RCC_GetSysClockFreq+0x64>)
 8000f70:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000f74:	2300      	movs	r3, #0
 8000f76:	fba1 0100 	umull	r0, r1, r1, r0
 8000f7a:	f7ff f925 	bl	80001c8 <__aeabi_uldivmod>
 8000f7e:	e7e9      	b.n	8000f54 <HAL_RCC_GetSysClockFreq+0x30>
 8000f80:	40023800 	.word	0x40023800
 8000f84:	00f42400 	.word	0x00f42400
 8000f88:	007a1200 	.word	0x007a1200

08000f8c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8000f8c:	2800      	cmp	r0, #0
 8000f8e:	f000 8087 	beq.w	80010a0 <HAL_RCC_ClockConfig+0x114>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f92:	4a48      	ldr	r2, [pc, #288]	@ (80010b4 <HAL_RCC_ClockConfig+0x128>)
 8000f94:	6813      	ldr	r3, [r2, #0]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	428b      	cmp	r3, r1
{
 8000f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fa0:	460d      	mov	r5, r1
 8000fa2:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fa4:	d209      	bcs.n	8000fba <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fa6:	b2cb      	uxtb	r3, r1
 8000fa8:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000faa:	6813      	ldr	r3, [r2, #0]
 8000fac:	f003 0307 	and.w	r3, r3, #7
 8000fb0:	428b      	cmp	r3, r1
 8000fb2:	d002      	beq.n	8000fba <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8000fb4:	2001      	movs	r0, #1
}
 8000fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fba:	6823      	ldr	r3, [r4, #0]
 8000fbc:	0798      	lsls	r0, r3, #30
 8000fbe:	d514      	bpl.n	8000fea <HAL_RCC_ClockConfig+0x5e>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fc0:	0759      	lsls	r1, r3, #29
 8000fc2:	d504      	bpl.n	8000fce <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fc4:	493c      	ldr	r1, [pc, #240]	@ (80010b8 <HAL_RCC_ClockConfig+0x12c>)
 8000fc6:	688a      	ldr	r2, [r1, #8]
 8000fc8:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8000fcc:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fce:	071a      	lsls	r2, r3, #28
 8000fd0:	d504      	bpl.n	8000fdc <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fd2:	4939      	ldr	r1, [pc, #228]	@ (80010b8 <HAL_RCC_ClockConfig+0x12c>)
 8000fd4:	688a      	ldr	r2, [r1, #8]
 8000fd6:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8000fda:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fdc:	4936      	ldr	r1, [pc, #216]	@ (80010b8 <HAL_RCC_ClockConfig+0x12c>)
 8000fde:	68a0      	ldr	r0, [r4, #8]
 8000fe0:	688a      	ldr	r2, [r1, #8]
 8000fe2:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8000fe6:	4302      	orrs	r2, r0
 8000fe8:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fea:	07df      	lsls	r7, r3, #31
 8000fec:	d521      	bpl.n	8001032 <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fee:	6862      	ldr	r2, [r4, #4]
 8000ff0:	2a01      	cmp	r2, #1
 8000ff2:	d057      	beq.n	80010a4 <HAL_RCC_ClockConfig+0x118>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ff4:	1e93      	subs	r3, r2, #2
 8000ff6:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ff8:	4b2f      	ldr	r3, [pc, #188]	@ (80010b8 <HAL_RCC_ClockConfig+0x12c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ffc:	d94d      	bls.n	800109a <HAL_RCC_ClockConfig+0x10e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ffe:	0799      	lsls	r1, r3, #30
 8001000:	d5d8      	bpl.n	8000fb4 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001002:	4e2d      	ldr	r6, [pc, #180]	@ (80010b8 <HAL_RCC_ClockConfig+0x12c>)
 8001004:	68b3      	ldr	r3, [r6, #8]
 8001006:	f023 0303 	bic.w	r3, r3, #3
 800100a:	4313      	orrs	r3, r2
 800100c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800100e:	f7ff fbff 	bl	8000810 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001012:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8001016:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001018:	e004      	b.n	8001024 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800101a:	f7ff fbf9 	bl	8000810 <HAL_GetTick>
 800101e:	1bc0      	subs	r0, r0, r7
 8001020:	4540      	cmp	r0, r8
 8001022:	d844      	bhi.n	80010ae <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001024:	68b3      	ldr	r3, [r6, #8]
 8001026:	6862      	ldr	r2, [r4, #4]
 8001028:	f003 030c 	and.w	r3, r3, #12
 800102c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001030:	d1f3      	bne.n	800101a <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001032:	4a20      	ldr	r2, [pc, #128]	@ (80010b4 <HAL_RCC_ClockConfig+0x128>)
 8001034:	6813      	ldr	r3, [r2, #0]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	42ab      	cmp	r3, r5
 800103c:	d906      	bls.n	800104c <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800103e:	b2eb      	uxtb	r3, r5
 8001040:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001042:	6813      	ldr	r3, [r2, #0]
 8001044:	f003 0307 	and.w	r3, r3, #7
 8001048:	42ab      	cmp	r3, r5
 800104a:	d1b3      	bne.n	8000fb4 <HAL_RCC_ClockConfig+0x28>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800104c:	6823      	ldr	r3, [r4, #0]
 800104e:	075a      	lsls	r2, r3, #29
 8001050:	d506      	bpl.n	8001060 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001052:	4919      	ldr	r1, [pc, #100]	@ (80010b8 <HAL_RCC_ClockConfig+0x12c>)
 8001054:	68e0      	ldr	r0, [r4, #12]
 8001056:	688a      	ldr	r2, [r1, #8]
 8001058:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 800105c:	4302      	orrs	r2, r0
 800105e:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001060:	071b      	lsls	r3, r3, #28
 8001062:	d507      	bpl.n	8001074 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001064:	4a14      	ldr	r2, [pc, #80]	@ (80010b8 <HAL_RCC_ClockConfig+0x12c>)
 8001066:	6921      	ldr	r1, [r4, #16]
 8001068:	6893      	ldr	r3, [r2, #8]
 800106a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800106e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001072:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001074:	f7ff ff56 	bl	8000f24 <HAL_RCC_GetSysClockFreq>
 8001078:	4a0f      	ldr	r2, [pc, #60]	@ (80010b8 <HAL_RCC_ClockConfig+0x12c>)
 800107a:	4c10      	ldr	r4, [pc, #64]	@ (80010bc <HAL_RCC_ClockConfig+0x130>)
 800107c:	6892      	ldr	r2, [r2, #8]
 800107e:	4910      	ldr	r1, [pc, #64]	@ (80010c0 <HAL_RCC_ClockConfig+0x134>)
 8001080:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001084:	4603      	mov	r3, r0
 8001086:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick(uwTickPrio);
 8001088:	480e      	ldr	r0, [pc, #56]	@ (80010c4 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800108a:	40d3      	lsrs	r3, r2
  HAL_InitTick(uwTickPrio);
 800108c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800108e:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8001090:	f7ff fb74 	bl	800077c <HAL_InitTick>
  return HAL_OK;
 8001094:	2000      	movs	r0, #0
}
 8001096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800109a:	0198      	lsls	r0, r3, #6
 800109c:	d4b1      	bmi.n	8001002 <HAL_RCC_ClockConfig+0x76>
 800109e:	e789      	b.n	8000fb4 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80010a0:	2001      	movs	r0, #1
}
 80010a2:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a4:	4b04      	ldr	r3, [pc, #16]	@ (80010b8 <HAL_RCC_ClockConfig+0x12c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	039e      	lsls	r6, r3, #14
 80010aa:	d4aa      	bmi.n	8001002 <HAL_RCC_ClockConfig+0x76>
 80010ac:	e782      	b.n	8000fb4 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80010ae:	2003      	movs	r0, #3
 80010b0:	e781      	b.n	8000fb6 <HAL_RCC_ClockConfig+0x2a>
 80010b2:	bf00      	nop
 80010b4:	40023c00 	.word	0x40023c00
 80010b8:	40023800 	.word	0x40023800
 80010bc:	080015f0 	.word	0x080015f0
 80010c0:	20000000 	.word	0x20000000
 80010c4:	20000008 	.word	0x20000008

080010c8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80010c8:	2800      	cmp	r0, #0
 80010ca:	f000 808f 	beq.w	80011ec <HAL_TIM_Base_Init+0x124>
{
 80010ce:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80010d0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80010d4:	4604      	mov	r4, r0
 80010d6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 8081 	beq.w	80011e2 <HAL_TIM_Base_Init+0x11a>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80010e0:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80010e2:	4943      	ldr	r1, [pc, #268]	@ (80011f0 <HAL_TIM_Base_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 80010e4:	2302      	movs	r3, #2
 80010e6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80010ea:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80010ec:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80010ee:	d064      	beq.n	80011ba <HAL_TIM_Base_Init+0xf2>
 80010f0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80010f4:	d030      	beq.n	8001158 <HAL_TIM_Base_Init+0x90>
 80010f6:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 80010fa:	428a      	cmp	r2, r1
 80010fc:	d02c      	beq.n	8001158 <HAL_TIM_Base_Init+0x90>
 80010fe:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8001102:	428a      	cmp	r2, r1
 8001104:	d028      	beq.n	8001158 <HAL_TIM_Base_Init+0x90>
 8001106:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800110a:	428a      	cmp	r2, r1
 800110c:	d024      	beq.n	8001158 <HAL_TIM_Base_Init+0x90>
 800110e:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 8001112:	428a      	cmp	r2, r1
 8001114:	d051      	beq.n	80011ba <HAL_TIM_Base_Init+0xf2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001116:	f501 5170 	add.w	r1, r1, #15360	@ 0x3c00
 800111a:	428a      	cmp	r2, r1
 800111c:	d020      	beq.n	8001160 <HAL_TIM_Base_Init+0x98>
 800111e:	4935      	ldr	r1, [pc, #212]	@ (80011f4 <HAL_TIM_Base_Init+0x12c>)
 8001120:	428a      	cmp	r2, r1
 8001122:	d01d      	beq.n	8001160 <HAL_TIM_Base_Init+0x98>
 8001124:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8001128:	428a      	cmp	r2, r1
 800112a:	d019      	beq.n	8001160 <HAL_TIM_Base_Init+0x98>
 800112c:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 8001130:	428a      	cmp	r2, r1
 8001132:	d015      	beq.n	8001160 <HAL_TIM_Base_Init+0x98>
 8001134:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8001138:	428a      	cmp	r2, r1
 800113a:	d011      	beq.n	8001160 <HAL_TIM_Base_Init+0x98>
 800113c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8001140:	428a      	cmp	r2, r1
 8001142:	d00d      	beq.n	8001160 <HAL_TIM_Base_Init+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001144:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001146:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001148:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800114a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800114e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001150:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001152:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001154:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001156:	e010      	b.n	800117a <HAL_TIM_Base_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8001158:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800115a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800115e:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001160:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001162:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001164:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001168:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800116a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800116e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001170:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8001172:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8001174:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001176:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001178:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800117a:	2301      	movs	r3, #1
 800117c:	6153      	str	r3, [r2, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800117e:	6913      	ldr	r3, [r2, #16]
 8001180:	07db      	lsls	r3, r3, #31
 8001182:	d503      	bpl.n	800118c <HAL_TIM_Base_Init+0xc4>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001184:	6913      	ldr	r3, [r2, #16]
 8001186:	f023 0301 	bic.w	r3, r3, #1
 800118a:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800118c:	2301      	movs	r3, #1
 800118e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001192:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001196:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800119a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800119e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80011a2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80011a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80011aa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80011ae:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80011b2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80011b6:	2000      	movs	r0, #0
}
 80011b8:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 80011ba:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011bc:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80011be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80011c2:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80011c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011c8:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80011ca:	69a1      	ldr	r1, [r4, #24]
 80011cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80011d0:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80011d2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011d4:	68e3      	ldr	r3, [r4, #12]
 80011d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80011d8:	6863      	ldr	r3, [r4, #4]
 80011da:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80011dc:	6963      	ldr	r3, [r4, #20]
 80011de:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e0:	e7cb      	b.n	800117a <HAL_TIM_Base_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 80011e2:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80011e6:	f7ff fa5f 	bl	80006a8 <HAL_TIM_Base_MspInit>
 80011ea:	e779      	b.n	80010e0 <HAL_TIM_Base_Init+0x18>
    return HAL_ERROR;
 80011ec:	2001      	movs	r0, #1
}
 80011ee:	4770      	bx	lr
 80011f0:	40010000 	.word	0x40010000
 80011f4:	40014400 	.word	0x40014400

080011f8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80011f8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d12f      	bne.n	8001260 <HAL_TIM_Base_Start_IT+0x68>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001200:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001202:	4918      	ldr	r1, [pc, #96]	@ (8001264 <HAL_TIM_Base_Start_IT+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001204:	2202      	movs	r2, #2
 8001206:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800120a:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800120c:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800120e:	f042 0201 	orr.w	r2, r2, #1
 8001212:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001214:	d019      	beq.n	800124a <HAL_TIM_Base_Start_IT+0x52>
 8001216:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800121a:	d016      	beq.n	800124a <HAL_TIM_Base_Start_IT+0x52>
 800121c:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <HAL_TIM_Base_Start_IT+0x70>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d013      	beq.n	800124a <HAL_TIM_Base_Start_IT+0x52>
 8001222:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001226:	4293      	cmp	r3, r2
 8001228:	d00f      	beq.n	800124a <HAL_TIM_Base_Start_IT+0x52>
 800122a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800122e:	4293      	cmp	r3, r2
 8001230:	d00b      	beq.n	800124a <HAL_TIM_Base_Start_IT+0x52>
 8001232:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8001236:	4293      	cmp	r3, r2
 8001238:	d007      	beq.n	800124a <HAL_TIM_Base_Start_IT+0x52>
 800123a:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800123e:	4293      	cmp	r3, r2
 8001240:	d003      	beq.n	800124a <HAL_TIM_Base_Start_IT+0x52>
 8001242:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8001246:	4293      	cmp	r3, r2
 8001248:	d104      	bne.n	8001254 <HAL_TIM_Base_Start_IT+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001250:	2a06      	cmp	r2, #6
 8001252:	d003      	beq.n	800125c <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	f042 0201 	orr.w	r2, r2, #1
 800125a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800125c:	2000      	movs	r0, #0
 800125e:	4770      	bx	lr
    return HAL_ERROR;
 8001260:	2001      	movs	r0, #1
}
 8001262:	4770      	bx	lr
 8001264:	40010000 	.word	0x40010000
 8001268:	40000400 	.word	0x40000400

0800126c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800126c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001270:	2b01      	cmp	r3, #1
 8001272:	d071      	beq.n	8001358 <HAL_TIM_ConfigClockSource+0xec>
 8001274:	4602      	mov	r2, r0
{
 8001276:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8001278:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 800127a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800127c:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8001280:	2001      	movs	r0, #1
 8001282:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001286:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001288:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800128c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001290:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8001292:	680b      	ldr	r3, [r1, #0]
 8001294:	2b60      	cmp	r3, #96	@ 0x60
 8001296:	d061      	beq.n	800135c <HAL_TIM_ConfigClockSource+0xf0>
 8001298:	d824      	bhi.n	80012e4 <HAL_TIM_ConfigClockSource+0x78>
 800129a:	2b40      	cmp	r3, #64	@ 0x40
 800129c:	d077      	beq.n	800138e <HAL_TIM_ConfigClockSource+0x122>
 800129e:	d94a      	bls.n	8001336 <HAL_TIM_ConfigClockSource+0xca>
 80012a0:	2b50      	cmp	r3, #80	@ 0x50
 80012a2:	d117      	bne.n	80012d4 <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 80012a4:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80012a6:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80012a8:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80012aa:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80012ae:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012b0:	6a23      	ldr	r3, [r4, #32]
 80012b2:	f023 0301 	bic.w	r3, r3, #1
 80012b6:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012b8:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80012ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80012be:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80012c2:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80012c4:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80012c6:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80012c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80012cc:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80012d0:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80012d2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80012d4:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80012d6:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80012d8:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80012dc:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 80012e0:	bc30      	pop	{r4, r5}
 80012e2:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80012e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80012e8:	d0f3      	beq.n	80012d2 <HAL_TIM_ConfigClockSource+0x66>
 80012ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012ee:	d110      	bne.n	8001312 <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80012f0:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80012f4:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80012f6:	432b      	orrs	r3, r5
 80012f8:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80012fa:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80012fe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8001302:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001304:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001306:	68a3      	ldr	r3, [r4, #8]
 8001308:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800130c:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800130e:	2000      	movs	r0, #0
 8001310:	e7e0      	b.n	80012d4 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8001312:	2b70      	cmp	r3, #112	@ 0x70
 8001314:	d1de      	bne.n	80012d4 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001316:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800131a:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800131c:	432b      	orrs	r3, r5
 800131e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001320:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001324:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8001328:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800132a:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 800132c:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800132e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001332:	60a3      	str	r3, [r4, #8]
      break;
 8001334:	e7cd      	b.n	80012d2 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8001336:	2b20      	cmp	r3, #32
 8001338:	d002      	beq.n	8001340 <HAL_TIM_ConfigClockSource+0xd4>
 800133a:	d909      	bls.n	8001350 <HAL_TIM_ConfigClockSource+0xe4>
 800133c:	2b30      	cmp	r3, #48	@ 0x30
 800133e:	d1c9      	bne.n	80012d4 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8001340:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001342:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001346:	430b      	orrs	r3, r1
 8001348:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800134c:	60a3      	str	r3, [r4, #8]
}
 800134e:	e7c0      	b.n	80012d2 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8001350:	f033 0110 	bics.w	r1, r3, #16
 8001354:	d1be      	bne.n	80012d4 <HAL_TIM_ConfigClockSource+0x68>
 8001356:	e7f3      	b.n	8001340 <HAL_TIM_ConfigClockSource+0xd4>
  __HAL_LOCK(htim);
 8001358:	2002      	movs	r0, #2
}
 800135a:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 800135c:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 800135e:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001360:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001362:	6a21      	ldr	r1, [r4, #32]
 8001364:	f021 0110 	bic.w	r1, r1, #16
 8001368:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800136a:	69a1      	ldr	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800136c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001370:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8001374:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001378:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800137c:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800137e:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8001380:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001386:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 800138a:	60a3      	str	r3, [r4, #8]
}
 800138c:	e7a1      	b.n	80012d2 <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 800138e:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001390:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8001392:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001394:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8001398:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800139a:	6a23      	ldr	r3, [r4, #32]
 800139c:	f023 0301 	bic.w	r3, r3, #1
 80013a0:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80013a2:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80013a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80013a8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80013ac:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80013ae:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80013b0:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80013b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80013b6:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80013ba:	60a3      	str	r3, [r4, #8]
}
 80013bc:	e789      	b.n	80012d2 <HAL_TIM_ConfigClockSource+0x66>
 80013be:	bf00      	nop

080013c0 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop

080013c4 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop

080013c8 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop

080013cc <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop

080013d0 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 80013d0:	6803      	ldr	r3, [r0, #0]
{
 80013d2:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 80013d4:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80013d6:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80013d8:	07a9      	lsls	r1, r5, #30
{
 80013da:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80013dc:	d501      	bpl.n	80013e2 <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80013de:	07b2      	lsls	r2, r6, #30
 80013e0:	d451      	bmi.n	8001486 <HAL_TIM_IRQHandler+0xb6>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80013e2:	0769      	lsls	r1, r5, #29
 80013e4:	d501      	bpl.n	80013ea <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80013e6:	0772      	lsls	r2, r6, #29
 80013e8:	d43a      	bmi.n	8001460 <HAL_TIM_IRQHandler+0x90>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80013ea:	072b      	lsls	r3, r5, #28
 80013ec:	d501      	bpl.n	80013f2 <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80013ee:	0730      	lsls	r0, r6, #28
 80013f0:	d424      	bmi.n	800143c <HAL_TIM_IRQHandler+0x6c>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80013f2:	06ea      	lsls	r2, r5, #27
 80013f4:	d501      	bpl.n	80013fa <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80013f6:	06f3      	lsls	r3, r6, #27
 80013f8:	d410      	bmi.n	800141c <HAL_TIM_IRQHandler+0x4c>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80013fa:	07e8      	lsls	r0, r5, #31
 80013fc:	d501      	bpl.n	8001402 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80013fe:	07f1      	lsls	r1, r6, #31
 8001400:	d457      	bmi.n	80014b2 <HAL_TIM_IRQHandler+0xe2>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001402:	062a      	lsls	r2, r5, #24
 8001404:	d501      	bpl.n	800140a <HAL_TIM_IRQHandler+0x3a>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001406:	0633      	lsls	r3, r6, #24
 8001408:	d45b      	bmi.n	80014c2 <HAL_TIM_IRQHandler+0xf2>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800140a:	0668      	lsls	r0, r5, #25
 800140c:	d501      	bpl.n	8001412 <HAL_TIM_IRQHandler+0x42>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800140e:	0671      	lsls	r1, r6, #25
 8001410:	d45f      	bmi.n	80014d2 <HAL_TIM_IRQHandler+0x102>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001412:	06aa      	lsls	r2, r5, #26
 8001414:	d501      	bpl.n	800141a <HAL_TIM_IRQHandler+0x4a>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001416:	06b3      	lsls	r3, r6, #26
 8001418:	d442      	bmi.n	80014a0 <HAL_TIM_IRQHandler+0xd0>
}
 800141a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800141c:	6823      	ldr	r3, [r4, #0]
 800141e:	f06f 0210 	mvn.w	r2, #16
 8001422:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001424:	2208      	movs	r2, #8
 8001426:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800142e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001430:	d063      	beq.n	80014fa <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001432:	f7ff ffc7 	bl	80013c4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001436:	2300      	movs	r3, #0
 8001438:	7723      	strb	r3, [r4, #28]
 800143a:	e7de      	b.n	80013fa <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800143c:	6823      	ldr	r3, [r4, #0]
 800143e:	f06f 0208 	mvn.w	r2, #8
 8001442:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001444:	2204      	movs	r2, #4
 8001446:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800144c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800144e:	d151      	bne.n	80014f4 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001450:	f7ff ffb6 	bl	80013c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001454:	4620      	mov	r0, r4
 8001456:	f7ff ffb7 	bl	80013c8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800145a:	2300      	movs	r3, #0
 800145c:	7723      	strb	r3, [r4, #28]
 800145e:	e7c8      	b.n	80013f2 <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001460:	6823      	ldr	r3, [r4, #0]
 8001462:	f06f 0204 	mvn.w	r2, #4
 8001466:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001468:	2202      	movs	r2, #2
 800146a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001472:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001474:	d13b      	bne.n	80014ee <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001476:	f7ff ffa3 	bl	80013c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800147a:	4620      	mov	r0, r4
 800147c:	f7ff ffa4 	bl	80013c8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001480:	2300      	movs	r3, #0
 8001482:	7723      	strb	r3, [r4, #28]
 8001484:	e7b1      	b.n	80013ea <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001486:	f06f 0202 	mvn.w	r2, #2
 800148a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800148c:	2201      	movs	r2, #1
 800148e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	079b      	lsls	r3, r3, #30
 8001494:	d025      	beq.n	80014e2 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001496:	f7ff ff95 	bl	80013c4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800149a:	2300      	movs	r3, #0
 800149c:	7723      	strb	r3, [r4, #28]
 800149e:	e7a0      	b.n	80013e2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80014a0:	6823      	ldr	r3, [r4, #0]
 80014a2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80014a6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80014a8:	611a      	str	r2, [r3, #16]
}
 80014aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 80014ae:	f000 b86b 	b.w	8001588 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80014b2:	6823      	ldr	r3, [r4, #0]
 80014b4:	f06f 0201 	mvn.w	r2, #1
 80014b8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80014ba:	4620      	mov	r0, r4
 80014bc:	f7fe fffc 	bl	80004b8 <HAL_TIM_PeriodElapsedCallback>
 80014c0:	e79f      	b.n	8001402 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80014c2:	6823      	ldr	r3, [r4, #0]
 80014c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80014c8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80014ca:	4620      	mov	r0, r4
 80014cc:	f000 f85e 	bl	800158c <HAL_TIMEx_BreakCallback>
 80014d0:	e79b      	b.n	800140a <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80014d2:	6823      	ldr	r3, [r4, #0]
 80014d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80014d8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80014da:	4620      	mov	r0, r4
 80014dc:	f7ff ff76 	bl	80013cc <HAL_TIM_TriggerCallback>
 80014e0:	e797      	b.n	8001412 <HAL_TIM_IRQHandler+0x42>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014e2:	f7ff ff6d 	bl	80013c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014e6:	4620      	mov	r0, r4
 80014e8:	f7ff ff6e 	bl	80013c8 <HAL_TIM_PWM_PulseFinishedCallback>
 80014ec:	e7d5      	b.n	800149a <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 80014ee:	f7ff ff69 	bl	80013c4 <HAL_TIM_IC_CaptureCallback>
 80014f2:	e7c5      	b.n	8001480 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_IC_CaptureCallback(htim);
 80014f4:	f7ff ff66 	bl	80013c4 <HAL_TIM_IC_CaptureCallback>
 80014f8:	e7af      	b.n	800145a <HAL_TIM_IRQHandler+0x8a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014fa:	f7ff ff61 	bl	80013c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014fe:	4620      	mov	r0, r4
 8001500:	f7ff ff62 	bl	80013c8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001504:	e797      	b.n	8001436 <HAL_TIM_IRQHandler+0x66>
 8001506:	bf00      	nop

08001508 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001508:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800150c:	2a01      	cmp	r2, #1
 800150e:	d037      	beq.n	8001580 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8001510:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001512:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001514:	2002      	movs	r0, #2
{
 8001516:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8001518:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 800151c:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800151e:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001520:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001522:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001526:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001528:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800152a:	4816      	ldr	r0, [pc, #88]	@ (8001584 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 800152c:	4282      	cmp	r2, r0
 800152e:	d01a      	beq.n	8001566 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8001530:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8001534:	d017      	beq.n	8001566 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8001536:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 800153a:	4282      	cmp	r2, r0
 800153c:	d013      	beq.n	8001566 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800153e:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8001542:	4282      	cmp	r2, r0
 8001544:	d00f      	beq.n	8001566 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8001546:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800154a:	4282      	cmp	r2, r0
 800154c:	d00b      	beq.n	8001566 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800154e:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8001552:	4282      	cmp	r2, r0
 8001554:	d007      	beq.n	8001566 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8001556:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 800155a:	4282      	cmp	r2, r0
 800155c:	d003      	beq.n	8001566 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800155e:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8001562:	4282      	cmp	r2, r0
 8001564:	d104      	bne.n	8001570 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001566:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001568:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800156c:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800156e:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8001570:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001572:	2201      	movs	r2, #1
 8001574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8001578:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800157c:	bc30      	pop	{r4, r5}
 800157e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001580:	2002      	movs	r0, #2
}
 8001582:	4770      	bx	lr
 8001584:	40010000 	.word	0x40010000

08001588 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop

0800158c <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop

08001590 <__libc_init_array>:
 8001590:	b570      	push	{r4, r5, r6, lr}
 8001592:	4d0d      	ldr	r5, [pc, #52]	@ (80015c8 <__libc_init_array+0x38>)
 8001594:	4c0d      	ldr	r4, [pc, #52]	@ (80015cc <__libc_init_array+0x3c>)
 8001596:	1b64      	subs	r4, r4, r5
 8001598:	10a4      	asrs	r4, r4, #2
 800159a:	2600      	movs	r6, #0
 800159c:	42a6      	cmp	r6, r4
 800159e:	d109      	bne.n	80015b4 <__libc_init_array+0x24>
 80015a0:	4d0b      	ldr	r5, [pc, #44]	@ (80015d0 <__libc_init_array+0x40>)
 80015a2:	4c0c      	ldr	r4, [pc, #48]	@ (80015d4 <__libc_init_array+0x44>)
 80015a4:	f000 f818 	bl	80015d8 <_init>
 80015a8:	1b64      	subs	r4, r4, r5
 80015aa:	10a4      	asrs	r4, r4, #2
 80015ac:	2600      	movs	r6, #0
 80015ae:	42a6      	cmp	r6, r4
 80015b0:	d105      	bne.n	80015be <__libc_init_array+0x2e>
 80015b2:	bd70      	pop	{r4, r5, r6, pc}
 80015b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80015b8:	4798      	blx	r3
 80015ba:	3601      	adds	r6, #1
 80015bc:	e7ee      	b.n	800159c <__libc_init_array+0xc>
 80015be:	f855 3b04 	ldr.w	r3, [r5], #4
 80015c2:	4798      	blx	r3
 80015c4:	3601      	adds	r6, #1
 80015c6:	e7f2      	b.n	80015ae <__libc_init_array+0x1e>
 80015c8:	08001608 	.word	0x08001608
 80015cc:	08001608 	.word	0x08001608
 80015d0:	08001608 	.word	0x08001608
 80015d4:	0800160c 	.word	0x0800160c

080015d8 <_init>:
 80015d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015da:	bf00      	nop
 80015dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015de:	bc08      	pop	{r3}
 80015e0:	469e      	mov	lr, r3
 80015e2:	4770      	bx	lr

080015e4 <_fini>:
 80015e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015e6:	bf00      	nop
 80015e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ea:	bc08      	pop	{r3}
 80015ec:	469e      	mov	lr, r3
 80015ee:	4770      	bx	lr
