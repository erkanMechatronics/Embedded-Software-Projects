
HAL_UART_012.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003780  08003780  00013780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037f4  080037f4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080037f4  080037f4  000137f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037fc  080037fc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037fc  080037fc  000137fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003800  08003800  00013800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000278  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002d4  200002d4  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000080f6  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000170a  00000000  00000000  000281c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006d0  00000000  00000000  000298d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000532  00000000  00000000  00029fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020198  00000000  00000000  0002a4d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000906f  00000000  00000000  0004a66a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c2615  00000000  00000000  000536d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001fc8  00000000  00000000  00115cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00117cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003768 	.word	0x08003768

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08003768 	.word	0x08003768

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	if(RxData[0] == 'o' && RxData[1] == '1')
 8000574:	4b1c      	ldr	r3, [pc, #112]	; (80005e8 <HAL_UART_RxCpltCallback+0x7c>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b6f      	cmp	r3, #111	; 0x6f
 800057a:	d113      	bne.n	80005a4 <HAL_UART_RxCpltCallback+0x38>
 800057c:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <HAL_UART_RxCpltCallback+0x7c>)
 800057e:	785b      	ldrb	r3, [r3, #1]
 8000580:	2b31      	cmp	r3, #49	; 0x31
 8000582:	d10f      	bne.n	80005a4 <HAL_UART_RxCpltCallback+0x38>
	{
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,1);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800058a:	4818      	ldr	r0, [pc, #96]	; (80005ec <HAL_UART_RxCpltCallback+0x80>)
 800058c:	f001 f962 	bl	8001854 <HAL_GPIO_WritePin>
		sprintf(TxData,"\n\rLed is on.\n\r");
 8000590:	4917      	ldr	r1, [pc, #92]	; (80005f0 <HAL_UART_RxCpltCallback+0x84>)
 8000592:	4818      	ldr	r0, [pc, #96]	; (80005f4 <HAL_UART_RxCpltCallback+0x88>)
 8000594:	f002 fc44 	bl	8002e20 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)&TxData,sizeof(TxData),100);
 8000598:	2364      	movs	r3, #100	; 0x64
 800059a:	2232      	movs	r2, #50	; 0x32
 800059c:	4915      	ldr	r1, [pc, #84]	; (80005f4 <HAL_UART_RxCpltCallback+0x88>)
 800059e:	4816      	ldr	r0, [pc, #88]	; (80005f8 <HAL_UART_RxCpltCallback+0x8c>)
 80005a0:	f001 fe57 	bl	8002252 <HAL_UART_Transmit>
	}
	if(RxData[0] == 'c' && RxData[1] == '1')
 80005a4:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <HAL_UART_RxCpltCallback+0x7c>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b63      	cmp	r3, #99	; 0x63
 80005aa:	d113      	bne.n	80005d4 <HAL_UART_RxCpltCallback+0x68>
 80005ac:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <HAL_UART_RxCpltCallback+0x7c>)
 80005ae:	785b      	ldrb	r3, [r3, #1]
 80005b0:	2b31      	cmp	r3, #49	; 0x31
 80005b2:	d10f      	bne.n	80005d4 <HAL_UART_RxCpltCallback+0x68>
	{
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,0);
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ba:	480c      	ldr	r0, [pc, #48]	; (80005ec <HAL_UART_RxCpltCallback+0x80>)
 80005bc:	f001 f94a 	bl	8001854 <HAL_GPIO_WritePin>
		sprintf(TxData,"\n\rLed is off.\n\r");
 80005c0:	490e      	ldr	r1, [pc, #56]	; (80005fc <HAL_UART_RxCpltCallback+0x90>)
 80005c2:	480c      	ldr	r0, [pc, #48]	; (80005f4 <HAL_UART_RxCpltCallback+0x88>)
 80005c4:	f002 fc2c 	bl	8002e20 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)&TxData,sizeof(TxData),100);
 80005c8:	2364      	movs	r3, #100	; 0x64
 80005ca:	2232      	movs	r2, #50	; 0x32
 80005cc:	4909      	ldr	r1, [pc, #36]	; (80005f4 <HAL_UART_RxCpltCallback+0x88>)
 80005ce:	480a      	ldr	r0, [pc, #40]	; (80005f8 <HAL_UART_RxCpltCallback+0x8c>)
 80005d0:	f001 fe3f 	bl	8002252 <HAL_UART_Transmit>
	}

	HAL_UART_Receive_DMA(&huart2, (uint8_t*)&RxData,2);
 80005d4:	2202      	movs	r2, #2
 80005d6:	4904      	ldr	r1, [pc, #16]	; (80005e8 <HAL_UART_RxCpltCallback+0x7c>)
 80005d8:	4807      	ldr	r0, [pc, #28]	; (80005f8 <HAL_UART_RxCpltCallback+0x8c>)
 80005da:	f001 fecc 	bl	8002376 <HAL_UART_Receive_DMA>
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000078 	.word	0x20000078
 80005ec:	40020c00 	.word	0x40020c00
 80005f0:	08003780 	.word	0x08003780
 80005f4:	200000ac 	.word	0x200000ac
 80005f8:	200000e0 	.word	0x200000e0
 80005fc:	08003790 	.word	0x08003790

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fa7e 	bl	8000b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f828 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f8da 	bl	80007c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000610:	f000 f8b8 	bl	8000784 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000614:	f000 f88c 	bl	8000730 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart2, (uint8_t*)&RxData,2);
 8000618:	2202      	movs	r2, #2
 800061a:	490d      	ldr	r1, [pc, #52]	; (8000650 <main+0x50>)
 800061c:	480d      	ldr	r0, [pc, #52]	; (8000654 <main+0x54>)
 800061e:	f001 feaa 	bl	8002376 <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == 1)
 8000622:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000626:	480c      	ldr	r0, [pc, #48]	; (8000658 <main+0x58>)
 8000628:	f001 f8fc 	bl	8001824 <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	2b01      	cmp	r3, #1
 8000630:	d106      	bne.n	8000640 <main+0x40>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000632:	2201      	movs	r2, #1
 8000634:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000638:	4807      	ldr	r0, [pc, #28]	; (8000658 <main+0x58>)
 800063a:	f001 f90b 	bl	8001854 <HAL_GPIO_WritePin>
 800063e:	e7f0      	b.n	8000622 <main+0x22>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,0);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000646:	4804      	ldr	r0, [pc, #16]	; (8000658 <main+0x58>)
 8000648:	f001 f904 	bl	8001854 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == 1)
 800064c:	e7e9      	b.n	8000622 <main+0x22>
 800064e:	bf00      	nop
 8000650:	20000078 	.word	0x20000078
 8000654:	200000e0 	.word	0x200000e0
 8000658:	40020c00 	.word	0x40020c00

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f002 fbf8 	bl	8002e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b28      	ldr	r3, [pc, #160]	; (8000728 <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a27      	ldr	r2, [pc, #156]	; (8000728 <SystemClock_Config+0xcc>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b25      	ldr	r3, [pc, #148]	; (8000728 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b22      	ldr	r3, [pc, #136]	; (800072c <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a21      	ldr	r2, [pc, #132]	; (800072c <SystemClock_Config+0xd0>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b8:	2301      	movs	r3, #1
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006cc:	2304      	movs	r3, #4
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006d0:	23a8      	movs	r3, #168	; 0xa8
 80006d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d8:	2304      	movs	r3, #4
 80006da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 f8d1 	bl	8001888 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ec:	f000 f8bc 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2105      	movs	r1, #5
 800070e:	4618      	mov	r0, r3
 8000710:	f001 fb32 	bl	8001d78 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800071a:	f000 f8a5 	bl	8000868 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	; 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000736:	4a12      	ldr	r2, [pc, #72]	; (8000780 <MX_USART2_UART_Init+0x50>)
 8000738:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800073c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000740:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000768:	f001 fd26 	bl	80021b8 <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000772:	f000 f879 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200000e0 	.word	0x200000e0
 8000780:	40004400 	.word	0x40004400

08000784 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_DMA_Init+0x3c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <MX_DMA_Init+0x3c>)
 8000794:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_DMA_Init+0x3c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	2010      	movs	r0, #16
 80007ac:	f000 faf7 	bl	8000d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80007b0:	2010      	movs	r0, #16
 80007b2:	f000 fb10 	bl	8000dd6 <HAL_NVIC_EnableIRQ>

}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b20      	ldr	r3, [pc, #128]	; (8000860 <MX_GPIO_Init+0x9c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a1f      	ldr	r2, [pc, #124]	; (8000860 <MX_GPIO_Init+0x9c>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <MX_GPIO_Init+0x9c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <MX_GPIO_Init+0x9c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a18      	ldr	r2, [pc, #96]	; (8000860 <MX_GPIO_Init+0x9c>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MX_GPIO_Init+0x9c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_GPIO_Init+0x9c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a11      	ldr	r2, [pc, #68]	; (8000860 <MX_GPIO_Init+0x9c>)
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_GPIO_Init+0x9c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0308 	and.w	r3, r3, #8
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000834:	480b      	ldr	r0, [pc, #44]	; (8000864 <MX_GPIO_Init+0xa0>)
 8000836:	f001 f80d 	bl	8001854 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800083a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800083e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	4619      	mov	r1, r3
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_GPIO_Init+0xa0>)
 8000854:	f000 fe4a 	bl	80014ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000858:	bf00      	nop
 800085a:	3720      	adds	r7, #32
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40023800 	.word	0x40023800
 8000864:	40020c00 	.word	0x40020c00

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	e7fe      	b.n	8000870 <Error_Handler+0x8>
	...

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <HAL_MspInit+0x4c>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	4a0f      	ldr	r2, [pc, #60]	; (80008c0 <HAL_MspInit+0x4c>)
 8000884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000888:	6453      	str	r3, [r2, #68]	; 0x44
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <HAL_MspInit+0x4c>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <HAL_MspInit+0x4c>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a4:	6413      	str	r3, [r2, #64]	; 0x40
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_MspInit+0x4c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800

080008c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	; 0x28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a30      	ldr	r2, [pc, #192]	; (80009a4 <HAL_UART_MspInit+0xe0>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d159      	bne.n	800099a <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4b2f      	ldr	r3, [pc, #188]	; (80009a8 <HAL_UART_MspInit+0xe4>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	4a2e      	ldr	r2, [pc, #184]	; (80009a8 <HAL_UART_MspInit+0xe4>)
 80008f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f4:	6413      	str	r3, [r2, #64]	; 0x40
 80008f6:	4b2c      	ldr	r3, [pc, #176]	; (80009a8 <HAL_UART_MspInit+0xe4>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b28      	ldr	r3, [pc, #160]	; (80009a8 <HAL_UART_MspInit+0xe4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a27      	ldr	r2, [pc, #156]	; (80009a8 <HAL_UART_MspInit+0xe4>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b25      	ldr	r3, [pc, #148]	; (80009a8 <HAL_UART_MspInit+0xe4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800091e:	230c      	movs	r3, #12
 8000920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092a:	2303      	movs	r3, #3
 800092c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800092e:	2307      	movs	r3, #7
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	481c      	ldr	r0, [pc, #112]	; (80009ac <HAL_UART_MspInit+0xe8>)
 800093a:	f000 fdd7 	bl	80014ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <HAL_UART_MspInit+0xec>)
 8000940:	4a1c      	ldr	r2, [pc, #112]	; (80009b4 <HAL_UART_MspInit+0xf0>)
 8000942:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000944:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <HAL_UART_MspInit+0xec>)
 8000946:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800094a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <HAL_UART_MspInit+0xec>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <HAL_UART_MspInit+0xec>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_UART_MspInit+0xec>)
 800095a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800095e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <HAL_UART_MspInit+0xec>)
 8000962:	2200      	movs	r2, #0
 8000964:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_UART_MspInit+0xec>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800096c:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <HAL_UART_MspInit+0xec>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <HAL_UART_MspInit+0xec>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000978:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <HAL_UART_MspInit+0xec>)
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800097e:	480c      	ldr	r0, [pc, #48]	; (80009b0 <HAL_UART_MspInit+0xec>)
 8000980:	f000 fa44 	bl	8000e0c <HAL_DMA_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800098a:	f7ff ff6d 	bl	8000868 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <HAL_UART_MspInit+0xec>)
 8000992:	639a      	str	r2, [r3, #56]	; 0x38
 8000994:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <HAL_UART_MspInit+0xec>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800099a:	bf00      	nop
 800099c:	3728      	adds	r7, #40	; 0x28
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40004400 	.word	0x40004400
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020000 	.word	0x40020000
 80009b0:	20000124 	.word	0x20000124
 80009b4:	40026088 	.word	0x40026088

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <NMI_Handler+0x4>

080009be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <MemManage_Handler+0x4>

080009ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a04:	f000 f8d0 	bl	8000ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <DMA1_Stream5_IRQHandler+0x10>)
 8000a12:	f000 fb01 	bl	8001018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000124 	.word	0x20000124

08000a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a28:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <_sbrk+0x5c>)
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <_sbrk+0x60>)
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a34:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <_sbrk+0x64>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d102      	bne.n	8000a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <_sbrk+0x64>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <_sbrk+0x68>)
 8000a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <_sbrk+0x64>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d207      	bcs.n	8000a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a50:	f002 fa0e 	bl	8002e70 <__errno>
 8000a54:	4603      	mov	r3, r0
 8000a56:	220c      	movs	r2, #12
 8000a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5e:	e009      	b.n	8000a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <_sbrk+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <_sbrk+0x64>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <_sbrk+0x64>)
 8000a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a72:	68fb      	ldr	r3, [r7, #12]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20020000 	.word	0x20020000
 8000a80:	00000400 	.word	0x00000400
 8000a84:	20000184 	.word	0x20000184
 8000a88:	200002d8 	.word	0x200002d8

08000a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <SystemInit+0x20>)
 8000a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a96:	4a05      	ldr	r2, [pc, #20]	; (8000aac <SystemInit+0x20>)
 8000a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab4:	480d      	ldr	r0, [pc, #52]	; (8000aec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ab6:	490e      	ldr	r1, [pc, #56]	; (8000af0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ab8:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000abc:	e002      	b.n	8000ac4 <LoopCopyDataInit>

08000abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac2:	3304      	adds	r3, #4

08000ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac8:	d3f9      	bcc.n	8000abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aca:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000acc:	4c0b      	ldr	r4, [pc, #44]	; (8000afc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad0:	e001      	b.n	8000ad6 <LoopFillZerobss>

08000ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad4:	3204      	adds	r2, #4

08000ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad8:	d3fb      	bcc.n	8000ad2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ada:	f7ff ffd7 	bl	8000a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ade:	f002 f9cd 	bl	8002e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ae2:	f7ff fd8d 	bl	8000600 <main>
  bx  lr    
 8000ae6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ae8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000af4:	08003804 	.word	0x08003804
  ldr r2, =_sbss
 8000af8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000afc:	200002d4 	.word	0x200002d4

08000b00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b00:	e7fe      	b.n	8000b00 <ADC_IRQHandler>
	...

08000b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <HAL_Init+0x40>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	; (8000b44 <HAL_Init+0x40>)
 8000b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <HAL_Init+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <HAL_Init+0x40>)
 8000b1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HAL_Init+0x40>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <HAL_Init+0x40>)
 8000b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f000 f92b 	bl	8000d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b32:	200f      	movs	r0, #15
 8000b34:	f000 f808 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b38:	f7ff fe9c 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023c00 	.word	0x40023c00

08000b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_InitTick+0x54>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_InitTick+0x58>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 f943 	bl	8000df2 <HAL_SYSTICK_Config>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00e      	b.n	8000b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	d80a      	bhi.n	8000b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	f000 f90b 	bl	8000d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b88:	4a06      	ldr	r2, [pc, #24]	; (8000ba4 <HAL_InitTick+0x5c>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e000      	b.n	8000b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	20000004 	.word	0x20000004

08000ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_IncTick+0x20>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x24>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <HAL_IncTick+0x24>)
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	20000188 	.word	0x20000188

08000bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <HAL_GetTick+0x14>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000188 	.word	0x20000188

08000be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c04:	4013      	ands	r3, r2
 8000c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1a:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	60d3      	str	r3, [r2, #12]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <__NVIC_GetPriorityGrouping+0x18>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	f003 0307 	and.w	r3, r3, #7
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db0b      	blt.n	8000c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	f003 021f 	and.w	r2, r3, #31
 8000c64:	4907      	ldr	r1, [pc, #28]	; (8000c84 <__NVIC_EnableIRQ+0x38>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	095b      	lsrs	r3, r3, #5
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000e100 	.word	0xe000e100

08000c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db0a      	blt.n	8000cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	490c      	ldr	r1, [pc, #48]	; (8000cd4 <__NVIC_SetPriority+0x4c>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	0112      	lsls	r2, r2, #4
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	440b      	add	r3, r1
 8000cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb0:	e00a      	b.n	8000cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4908      	ldr	r1, [pc, #32]	; (8000cd8 <__NVIC_SetPriority+0x50>)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	3b04      	subs	r3, #4
 8000cc0:	0112      	lsls	r2, r2, #4
 8000cc2:	b2d2      	uxtb	r2, r2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	761a      	strb	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000e100 	.word	0xe000e100
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b089      	sub	sp, #36	; 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f1c3 0307 	rsb	r3, r3, #7
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	bf28      	it	cs
 8000cfa:	2304      	movcs	r3, #4
 8000cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3304      	adds	r3, #4
 8000d02:	2b06      	cmp	r3, #6
 8000d04:	d902      	bls.n	8000d0c <NVIC_EncodePriority+0x30>
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3b03      	subs	r3, #3
 8000d0a:	e000      	b.n	8000d0e <NVIC_EncodePriority+0x32>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	f04f 32ff 	mov.w	r2, #4294967295
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	401a      	ands	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d24:	f04f 31ff 	mov.w	r1, #4294967295
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	43d9      	mvns	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	4313      	orrs	r3, r2
         );
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3724      	adds	r7, #36	; 0x24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
	...

08000d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d54:	d301      	bcc.n	8000d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00f      	b.n	8000d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <SysTick_Config+0x40>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d62:	210f      	movs	r1, #15
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f7ff ff8e 	bl	8000c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <SysTick_Config+0x40>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d72:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <SysTick_Config+0x40>)
 8000d74:	2207      	movs	r2, #7
 8000d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	e000e010 	.word	0xe000e010

08000d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ff29 	bl	8000be8 <__NVIC_SetPriorityGrouping>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b086      	sub	sp, #24
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	4603      	mov	r3, r0
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
 8000daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db0:	f7ff ff3e 	bl	8000c30 <__NVIC_GetPriorityGrouping>
 8000db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	68b9      	ldr	r1, [r7, #8]
 8000dba:	6978      	ldr	r0, [r7, #20]
 8000dbc:	f7ff ff8e 	bl	8000cdc <NVIC_EncodePriority>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff5d 	bl	8000c88 <__NVIC_SetPriority>
}
 8000dce:	bf00      	nop
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff31 	bl	8000c4c <__NVIC_EnableIRQ>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ffa2 	bl	8000d44 <SysTick_Config>
 8000e00:	4603      	mov	r3, r0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e18:	f7ff feda 	bl	8000bd0 <HAL_GetTick>
 8000e1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d101      	bne.n	8000e28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	e099      	b.n	8000f5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f022 0201 	bic.w	r2, r2, #1
 8000e46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e48:	e00f      	b.n	8000e6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e4a:	f7ff fec1 	bl	8000bd0 <HAL_GetTick>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	2b05      	cmp	r3, #5
 8000e56:	d908      	bls.n	8000e6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2220      	movs	r2, #32
 8000e5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2203      	movs	r2, #3
 8000e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e078      	b.n	8000f5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d1e8      	bne.n	8000e4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	4b38      	ldr	r3, [pc, #224]	; (8000f64 <HAL_DMA_Init+0x158>)
 8000e84:	4013      	ands	r3, r2
 8000e86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	691b      	ldr	r3, [r3, #16]
 8000e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a1b      	ldr	r3, [r3, #32]
 8000eb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	d107      	bne.n	8000ed4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	697a      	ldr	r2, [r7, #20]
 8000eda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	f023 0307 	bic.w	r3, r3, #7
 8000eea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	d117      	bne.n	8000f2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d00e      	beq.n	8000f2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f000 fa6f 	bl	80013f4 <DMA_CheckFifoParam>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d008      	beq.n	8000f2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2240      	movs	r2, #64	; 0x40
 8000f20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2201      	movs	r2, #1
 8000f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e016      	b.n	8000f5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 fa26 	bl	8001388 <DMA_CalcBaseAndBitshift>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f44:	223f      	movs	r2, #63	; 0x3f
 8000f46:	409a      	lsls	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	f010803f 	.word	0xf010803f

08000f68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d101      	bne.n	8000f8e <HAL_DMA_Start_IT+0x26>
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	e040      	b.n	8001010 <HAL_DMA_Start_IT+0xa8>
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2201      	movs	r2, #1
 8000f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d12f      	bne.n	8001002 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2200      	movs	r2, #0
 8000fae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	68b9      	ldr	r1, [r7, #8]
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f000 f9b8 	bl	800132c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fc0:	223f      	movs	r2, #63	; 0x3f
 8000fc2:	409a      	lsls	r2, r3
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f042 0216 	orr.w	r2, r2, #22
 8000fd6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d007      	beq.n	8000ff0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f042 0208 	orr.w	r2, r2, #8
 8000fee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f042 0201 	orr.w	r2, r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	e005      	b.n	800100e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800100a:	2302      	movs	r3, #2
 800100c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800100e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001024:	4b8e      	ldr	r3, [pc, #568]	; (8001260 <HAL_DMA_IRQHandler+0x248>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a8e      	ldr	r2, [pc, #568]	; (8001264 <HAL_DMA_IRQHandler+0x24c>)
 800102a:	fba2 2303 	umull	r2, r3, r2, r3
 800102e:	0a9b      	lsrs	r3, r3, #10
 8001030:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001036:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001042:	2208      	movs	r2, #8
 8001044:	409a      	lsls	r2, r3
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4013      	ands	r3, r2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d01a      	beq.n	8001084 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	2b00      	cmp	r3, #0
 800105a:	d013      	beq.n	8001084 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0204 	bic.w	r2, r2, #4
 800106a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001070:	2208      	movs	r2, #8
 8001072:	409a      	lsls	r2, r3
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800107c:	f043 0201 	orr.w	r2, r3, #1
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001088:	2201      	movs	r2, #1
 800108a:	409a      	lsls	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4013      	ands	r3, r2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d012      	beq.n	80010ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d00b      	beq.n	80010ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a6:	2201      	movs	r2, #1
 80010a8:	409a      	lsls	r2, r3
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b2:	f043 0202 	orr.w	r2, r3, #2
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010be:	2204      	movs	r2, #4
 80010c0:	409a      	lsls	r2, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	4013      	ands	r3, r2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d012      	beq.n	80010f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d00b      	beq.n	80010f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010dc:	2204      	movs	r2, #4
 80010de:	409a      	lsls	r2, r3
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010e8:	f043 0204 	orr.w	r2, r3, #4
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f4:	2210      	movs	r2, #16
 80010f6:	409a      	lsls	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4013      	ands	r3, r2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d043      	beq.n	8001188 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0308 	and.w	r3, r3, #8
 800110a:	2b00      	cmp	r3, #0
 800110c:	d03c      	beq.n	8001188 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001112:	2210      	movs	r2, #16
 8001114:	409a      	lsls	r2, r3
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d018      	beq.n	800115a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d108      	bne.n	8001148 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	2b00      	cmp	r3, #0
 800113c:	d024      	beq.n	8001188 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	4798      	blx	r3
 8001146:	e01f      	b.n	8001188 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800114c:	2b00      	cmp	r3, #0
 800114e:	d01b      	beq.n	8001188 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	4798      	blx	r3
 8001158:	e016      	b.n	8001188 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001164:	2b00      	cmp	r3, #0
 8001166:	d107      	bne.n	8001178 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0208 	bic.w	r2, r2, #8
 8001176:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800118c:	2220      	movs	r2, #32
 800118e:	409a      	lsls	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4013      	ands	r3, r2
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 808f 	beq.w	80012b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0310 	and.w	r3, r3, #16
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 8087 	beq.w	80012b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ae:	2220      	movs	r2, #32
 80011b0:	409a      	lsls	r2, r3
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b05      	cmp	r3, #5
 80011c0:	d136      	bne.n	8001230 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0216 	bic.w	r2, r2, #22
 80011d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	695a      	ldr	r2, [r3, #20]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d103      	bne.n	80011f2 <HAL_DMA_IRQHandler+0x1da>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d007      	beq.n	8001202 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f022 0208 	bic.w	r2, r2, #8
 8001200:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001206:	223f      	movs	r2, #63	; 0x3f
 8001208:	409a      	lsls	r2, r3
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2201      	movs	r2, #1
 8001212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001222:	2b00      	cmp	r3, #0
 8001224:	d07e      	beq.n	8001324 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	4798      	blx	r3
        }
        return;
 800122e:	e079      	b.n	8001324 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d01d      	beq.n	800127a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d10d      	bne.n	8001268 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001250:	2b00      	cmp	r3, #0
 8001252:	d031      	beq.n	80012b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	4798      	blx	r3
 800125c:	e02c      	b.n	80012b8 <HAL_DMA_IRQHandler+0x2a0>
 800125e:	bf00      	nop
 8001260:	20000000 	.word	0x20000000
 8001264:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800126c:	2b00      	cmp	r3, #0
 800126e:	d023      	beq.n	80012b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	4798      	blx	r3
 8001278:	e01e      	b.n	80012b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001284:	2b00      	cmp	r3, #0
 8001286:	d10f      	bne.n	80012a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0210 	bic.w	r2, r2, #16
 8001296:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d032      	beq.n	8001326 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d022      	beq.n	8001312 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2205      	movs	r2, #5
 80012d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0201 	bic.w	r2, r2, #1
 80012e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	3301      	adds	r3, #1
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d307      	bcc.n	8001300 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f2      	bne.n	80012e4 <HAL_DMA_IRQHandler+0x2cc>
 80012fe:	e000      	b.n	8001302 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001300:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2201      	movs	r2, #1
 8001306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	2b00      	cmp	r3, #0
 8001318:	d005      	beq.n	8001326 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	4798      	blx	r3
 8001322:	e000      	b.n	8001326 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001324:	bf00      	nop
    }
  }
}
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
 8001338:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001348:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	2b40      	cmp	r3, #64	; 0x40
 8001358:	d108      	bne.n	800136c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800136a:	e007      	b.n	800137c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68ba      	ldr	r2, [r7, #8]
 8001372:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	60da      	str	r2, [r3, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	3b10      	subs	r3, #16
 8001398:	4a14      	ldr	r2, [pc, #80]	; (80013ec <DMA_CalcBaseAndBitshift+0x64>)
 800139a:	fba2 2303 	umull	r2, r3, r2, r3
 800139e:	091b      	lsrs	r3, r3, #4
 80013a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013a2:	4a13      	ldr	r2, [pc, #76]	; (80013f0 <DMA_CalcBaseAndBitshift+0x68>)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	d909      	bls.n	80013ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013be:	f023 0303 	bic.w	r3, r3, #3
 80013c2:	1d1a      	adds	r2, r3, #4
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	659a      	str	r2, [r3, #88]	; 0x58
 80013c8:	e007      	b.n	80013da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013d2:	f023 0303 	bic.w	r3, r3, #3
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	aaaaaaab 	.word	0xaaaaaaab
 80013f0:	080037b8 	.word	0x080037b8

080013f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001404:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d11f      	bne.n	800144e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	2b03      	cmp	r3, #3
 8001412:	d856      	bhi.n	80014c2 <DMA_CheckFifoParam+0xce>
 8001414:	a201      	add	r2, pc, #4	; (adr r2, 800141c <DMA_CheckFifoParam+0x28>)
 8001416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141a:	bf00      	nop
 800141c:	0800142d 	.word	0x0800142d
 8001420:	0800143f 	.word	0x0800143f
 8001424:	0800142d 	.word	0x0800142d
 8001428:	080014c3 	.word	0x080014c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001430:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d046      	beq.n	80014c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800143c:	e043      	b.n	80014c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001442:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001446:	d140      	bne.n	80014ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800144c:	e03d      	b.n	80014ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001456:	d121      	bne.n	800149c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	2b03      	cmp	r3, #3
 800145c:	d837      	bhi.n	80014ce <DMA_CheckFifoParam+0xda>
 800145e:	a201      	add	r2, pc, #4	; (adr r2, 8001464 <DMA_CheckFifoParam+0x70>)
 8001460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001464:	08001475 	.word	0x08001475
 8001468:	0800147b 	.word	0x0800147b
 800146c:	08001475 	.word	0x08001475
 8001470:	0800148d 	.word	0x0800148d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
      break;
 8001478:	e030      	b.n	80014dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d025      	beq.n	80014d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800148a:	e022      	b.n	80014d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001494:	d11f      	bne.n	80014d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800149a:	e01c      	b.n	80014d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d903      	bls.n	80014aa <DMA_CheckFifoParam+0xb6>
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	d003      	beq.n	80014b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80014a8:	e018      	b.n	80014dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	73fb      	strb	r3, [r7, #15]
      break;
 80014ae:	e015      	b.n	80014dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00e      	beq.n	80014da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	73fb      	strb	r3, [r7, #15]
      break;
 80014c0:	e00b      	b.n	80014da <DMA_CheckFifoParam+0xe6>
      break;
 80014c2:	bf00      	nop
 80014c4:	e00a      	b.n	80014dc <DMA_CheckFifoParam+0xe8>
      break;
 80014c6:	bf00      	nop
 80014c8:	e008      	b.n	80014dc <DMA_CheckFifoParam+0xe8>
      break;
 80014ca:	bf00      	nop
 80014cc:	e006      	b.n	80014dc <DMA_CheckFifoParam+0xe8>
      break;
 80014ce:	bf00      	nop
 80014d0:	e004      	b.n	80014dc <DMA_CheckFifoParam+0xe8>
      break;
 80014d2:	bf00      	nop
 80014d4:	e002      	b.n	80014dc <DMA_CheckFifoParam+0xe8>
      break;   
 80014d6:	bf00      	nop
 80014d8:	e000      	b.n	80014dc <DMA_CheckFifoParam+0xe8>
      break;
 80014da:	bf00      	nop
    }
  } 
  
  return status; 
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop

080014ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
 8001506:	e16b      	b.n	80017e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001508:	2201      	movs	r2, #1
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	429a      	cmp	r2, r3
 8001522:	f040 815a 	bne.w	80017da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 0303 	and.w	r3, r3, #3
 800152e:	2b01      	cmp	r3, #1
 8001530:	d005      	beq.n	800153e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800153a:	2b02      	cmp	r3, #2
 800153c:	d130      	bne.n	80015a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	2203      	movs	r2, #3
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	68da      	ldr	r2, [r3, #12]
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001574:	2201      	movs	r2, #1
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	091b      	lsrs	r3, r3, #4
 800158a:	f003 0201 	and.w	r2, r3, #1
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	d017      	beq.n	80015dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	2203      	movs	r2, #3
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d123      	bne.n	8001630 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	08da      	lsrs	r2, r3, #3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3208      	adds	r2, #8
 80015f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	220f      	movs	r2, #15
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	691a      	ldr	r2, [r3, #16]
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	08da      	lsrs	r2, r3, #3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3208      	adds	r2, #8
 800162a:	69b9      	ldr	r1, [r7, #24]
 800162c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	2203      	movs	r2, #3
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0203 	and.w	r2, r3, #3
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 80b4 	beq.w	80017da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b60      	ldr	r3, [pc, #384]	; (80017f8 <HAL_GPIO_Init+0x30c>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	4a5f      	ldr	r2, [pc, #380]	; (80017f8 <HAL_GPIO_Init+0x30c>)
 800167c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001680:	6453      	str	r3, [r2, #68]	; 0x44
 8001682:	4b5d      	ldr	r3, [pc, #372]	; (80017f8 <HAL_GPIO_Init+0x30c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800168e:	4a5b      	ldr	r2, [pc, #364]	; (80017fc <HAL_GPIO_Init+0x310>)
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	089b      	lsrs	r3, r3, #2
 8001694:	3302      	adds	r3, #2
 8001696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	220f      	movs	r2, #15
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4013      	ands	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a52      	ldr	r2, [pc, #328]	; (8001800 <HAL_GPIO_Init+0x314>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d02b      	beq.n	8001712 <HAL_GPIO_Init+0x226>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a51      	ldr	r2, [pc, #324]	; (8001804 <HAL_GPIO_Init+0x318>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d025      	beq.n	800170e <HAL_GPIO_Init+0x222>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a50      	ldr	r2, [pc, #320]	; (8001808 <HAL_GPIO_Init+0x31c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d01f      	beq.n	800170a <HAL_GPIO_Init+0x21e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a4f      	ldr	r2, [pc, #316]	; (800180c <HAL_GPIO_Init+0x320>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <HAL_GPIO_Init+0x21a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a4e      	ldr	r2, [pc, #312]	; (8001810 <HAL_GPIO_Init+0x324>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d013      	beq.n	8001702 <HAL_GPIO_Init+0x216>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a4d      	ldr	r2, [pc, #308]	; (8001814 <HAL_GPIO_Init+0x328>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d00d      	beq.n	80016fe <HAL_GPIO_Init+0x212>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4c      	ldr	r2, [pc, #304]	; (8001818 <HAL_GPIO_Init+0x32c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d007      	beq.n	80016fa <HAL_GPIO_Init+0x20e>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4b      	ldr	r2, [pc, #300]	; (800181c <HAL_GPIO_Init+0x330>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d101      	bne.n	80016f6 <HAL_GPIO_Init+0x20a>
 80016f2:	2307      	movs	r3, #7
 80016f4:	e00e      	b.n	8001714 <HAL_GPIO_Init+0x228>
 80016f6:	2308      	movs	r3, #8
 80016f8:	e00c      	b.n	8001714 <HAL_GPIO_Init+0x228>
 80016fa:	2306      	movs	r3, #6
 80016fc:	e00a      	b.n	8001714 <HAL_GPIO_Init+0x228>
 80016fe:	2305      	movs	r3, #5
 8001700:	e008      	b.n	8001714 <HAL_GPIO_Init+0x228>
 8001702:	2304      	movs	r3, #4
 8001704:	e006      	b.n	8001714 <HAL_GPIO_Init+0x228>
 8001706:	2303      	movs	r3, #3
 8001708:	e004      	b.n	8001714 <HAL_GPIO_Init+0x228>
 800170a:	2302      	movs	r3, #2
 800170c:	e002      	b.n	8001714 <HAL_GPIO_Init+0x228>
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <HAL_GPIO_Init+0x228>
 8001712:	2300      	movs	r3, #0
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	f002 0203 	and.w	r2, r2, #3
 800171a:	0092      	lsls	r2, r2, #2
 800171c:	4093      	lsls	r3, r2
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001724:	4935      	ldr	r1, [pc, #212]	; (80017fc <HAL_GPIO_Init+0x310>)
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	089b      	lsrs	r3, r3, #2
 800172a:	3302      	adds	r3, #2
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001732:	4b3b      	ldr	r3, [pc, #236]	; (8001820 <HAL_GPIO_Init+0x334>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	43db      	mvns	r3, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001756:	4a32      	ldr	r2, [pc, #200]	; (8001820 <HAL_GPIO_Init+0x334>)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800175c:	4b30      	ldr	r3, [pc, #192]	; (8001820 <HAL_GPIO_Init+0x334>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001780:	4a27      	ldr	r2, [pc, #156]	; (8001820 <HAL_GPIO_Init+0x334>)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <HAL_GPIO_Init+0x334>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017aa:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <HAL_GPIO_Init+0x334>)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <HAL_GPIO_Init+0x334>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017d4:	4a12      	ldr	r2, [pc, #72]	; (8001820 <HAL_GPIO_Init+0x334>)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3301      	adds	r3, #1
 80017de:	61fb      	str	r3, [r7, #28]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	2b0f      	cmp	r3, #15
 80017e4:	f67f ae90 	bls.w	8001508 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	3724      	adds	r7, #36	; 0x24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40013800 	.word	0x40013800
 8001800:	40020000 	.word	0x40020000
 8001804:	40020400 	.word	0x40020400
 8001808:	40020800 	.word	0x40020800
 800180c:	40020c00 	.word	0x40020c00
 8001810:	40021000 	.word	0x40021000
 8001814:	40021400 	.word	0x40021400
 8001818:	40021800 	.word	0x40021800
 800181c:	40021c00 	.word	0x40021c00
 8001820:	40013c00 	.word	0x40013c00

08001824 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691a      	ldr	r2, [r3, #16]
 8001834:	887b      	ldrh	r3, [r7, #2]
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d002      	beq.n	8001842 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800183c:	2301      	movs	r3, #1
 800183e:	73fb      	strb	r3, [r7, #15]
 8001840:	e001      	b.n	8001846 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001846:	7bfb      	ldrb	r3, [r7, #15]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]
 8001860:	4613      	mov	r3, r2
 8001862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001864:	787b      	ldrb	r3, [r7, #1]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800186a:	887a      	ldrh	r2, [r7, #2]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001870:	e003      	b.n	800187a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001872:	887b      	ldrh	r3, [r7, #2]
 8001874:	041a      	lsls	r2, r3, #16
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	619a      	str	r2, [r3, #24]
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e267      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d075      	beq.n	8001992 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018a6:	4b88      	ldr	r3, [pc, #544]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d00c      	beq.n	80018cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018b2:	4b85      	ldr	r3, [pc, #532]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ba:	2b08      	cmp	r3, #8
 80018bc:	d112      	bne.n	80018e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018be:	4b82      	ldr	r3, [pc, #520]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018ca:	d10b      	bne.n	80018e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018cc:	4b7e      	ldr	r3, [pc, #504]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d05b      	beq.n	8001990 <HAL_RCC_OscConfig+0x108>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d157      	bne.n	8001990 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e242      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ec:	d106      	bne.n	80018fc <HAL_RCC_OscConfig+0x74>
 80018ee:	4b76      	ldr	r3, [pc, #472]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a75      	ldr	r2, [pc, #468]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80018f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e01d      	b.n	8001938 <HAL_RCC_OscConfig+0xb0>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001904:	d10c      	bne.n	8001920 <HAL_RCC_OscConfig+0x98>
 8001906:	4b70      	ldr	r3, [pc, #448]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a6f      	ldr	r2, [pc, #444]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 800190c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b6d      	ldr	r3, [pc, #436]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a6c      	ldr	r2, [pc, #432]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e00b      	b.n	8001938 <HAL_RCC_OscConfig+0xb0>
 8001920:	4b69      	ldr	r3, [pc, #420]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a68      	ldr	r2, [pc, #416]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	4b66      	ldr	r3, [pc, #408]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a65      	ldr	r2, [pc, #404]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001936:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d013      	beq.n	8001968 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7ff f946 	bl	8000bd0 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001948:	f7ff f942 	bl	8000bd0 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b64      	cmp	r3, #100	; 0x64
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e207      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	4b5b      	ldr	r3, [pc, #364]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0xc0>
 8001966:	e014      	b.n	8001992 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff f932 	bl	8000bd0 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001970:	f7ff f92e 	bl	8000bd0 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b64      	cmp	r3, #100	; 0x64
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e1f3      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001982:	4b51      	ldr	r3, [pc, #324]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0xe8>
 800198e:	e000      	b.n	8001992 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d063      	beq.n	8001a66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800199e:	4b4a      	ldr	r3, [pc, #296]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00b      	beq.n	80019c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019aa:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d11c      	bne.n	80019f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019b6:	4b44      	ldr	r3, [pc, #272]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d116      	bne.n	80019f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c2:	4b41      	ldr	r3, [pc, #260]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d005      	beq.n	80019da <HAL_RCC_OscConfig+0x152>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d001      	beq.n	80019da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e1c7      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019da:	4b3b      	ldr	r3, [pc, #236]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	4937      	ldr	r1, [pc, #220]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ee:	e03a      	b.n	8001a66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d020      	beq.n	8001a3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f8:	4b34      	ldr	r3, [pc, #208]	; (8001acc <HAL_RCC_OscConfig+0x244>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fe:	f7ff f8e7 	bl	8000bd0 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a06:	f7ff f8e3 	bl	8000bd0 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e1a8      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a18:	4b2b      	ldr	r3, [pc, #172]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a24:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	4925      	ldr	r1, [pc, #148]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]
 8001a38:	e015      	b.n	8001a66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a3a:	4b24      	ldr	r3, [pc, #144]	; (8001acc <HAL_RCC_OscConfig+0x244>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff f8c6 	bl	8000bd0 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a48:	f7ff f8c2 	bl	8000bd0 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e187      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d036      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d016      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <HAL_RCC_OscConfig+0x248>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a80:	f7ff f8a6 	bl	8000bd0 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a88:	f7ff f8a2 	bl	8000bd0 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e167      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0x200>
 8001aa6:	e01b      	b.n	8001ae0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <HAL_RCC_OscConfig+0x248>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aae:	f7ff f88f 	bl	8000bd0 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab4:	e00e      	b.n	8001ad4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ab6:	f7ff f88b 	bl	8000bd0 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d907      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e150      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	42470000 	.word	0x42470000
 8001ad0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad4:	4b88      	ldr	r3, [pc, #544]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1ea      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 8097 	beq.w	8001c1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aee:	2300      	movs	r3, #0
 8001af0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001af2:	4b81      	ldr	r3, [pc, #516]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10f      	bne.n	8001b1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	4b7d      	ldr	r3, [pc, #500]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	4a7c      	ldr	r2, [pc, #496]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0e:	4b7a      	ldr	r3, [pc, #488]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1e:	4b77      	ldr	r3, [pc, #476]	; (8001cfc <HAL_RCC_OscConfig+0x474>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d118      	bne.n	8001b5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b2a:	4b74      	ldr	r3, [pc, #464]	; (8001cfc <HAL_RCC_OscConfig+0x474>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a73      	ldr	r2, [pc, #460]	; (8001cfc <HAL_RCC_OscConfig+0x474>)
 8001b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b36:	f7ff f84b 	bl	8000bd0 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3e:	f7ff f847 	bl	8000bd0 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e10c      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b50:	4b6a      	ldr	r3, [pc, #424]	; (8001cfc <HAL_RCC_OscConfig+0x474>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d106      	bne.n	8001b72 <HAL_RCC_OscConfig+0x2ea>
 8001b64:	4b64      	ldr	r3, [pc, #400]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b68:	4a63      	ldr	r2, [pc, #396]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b70:	e01c      	b.n	8001bac <HAL_RCC_OscConfig+0x324>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b05      	cmp	r3, #5
 8001b78:	d10c      	bne.n	8001b94 <HAL_RCC_OscConfig+0x30c>
 8001b7a:	4b5f      	ldr	r3, [pc, #380]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7e:	4a5e      	ldr	r2, [pc, #376]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	6713      	str	r3, [r2, #112]	; 0x70
 8001b86:	4b5c      	ldr	r3, [pc, #368]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8a:	4a5b      	ldr	r2, [pc, #364]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6713      	str	r3, [r2, #112]	; 0x70
 8001b92:	e00b      	b.n	8001bac <HAL_RCC_OscConfig+0x324>
 8001b94:	4b58      	ldr	r3, [pc, #352]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b98:	4a57      	ldr	r2, [pc, #348]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b9a:	f023 0301 	bic.w	r3, r3, #1
 8001b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba0:	4b55      	ldr	r3, [pc, #340]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba4:	4a54      	ldr	r2, [pc, #336]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001ba6:	f023 0304 	bic.w	r3, r3, #4
 8001baa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d015      	beq.n	8001be0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb4:	f7ff f80c 	bl	8000bd0 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bba:	e00a      	b.n	8001bd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bbc:	f7ff f808 	bl	8000bd0 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e0cb      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd2:	4b49      	ldr	r3, [pc, #292]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0ee      	beq.n	8001bbc <HAL_RCC_OscConfig+0x334>
 8001bde:	e014      	b.n	8001c0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be0:	f7fe fff6 	bl	8000bd0 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be6:	e00a      	b.n	8001bfe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be8:	f7fe fff2 	bl	8000bd0 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e0b5      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfe:	4b3e      	ldr	r3, [pc, #248]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1ee      	bne.n	8001be8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c0a:	7dfb      	ldrb	r3, [r7, #23]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d105      	bne.n	8001c1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c10:	4b39      	ldr	r3, [pc, #228]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	4a38      	ldr	r2, [pc, #224]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 80a1 	beq.w	8001d68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c26:	4b34      	ldr	r3, [pc, #208]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d05c      	beq.n	8001cec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d141      	bne.n	8001cbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3a:	4b31      	ldr	r3, [pc, #196]	; (8001d00 <HAL_RCC_OscConfig+0x478>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7fe ffc6 	bl	8000bd0 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c48:	f7fe ffc2 	bl	8000bd0 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e087      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5a:	4b27      	ldr	r3, [pc, #156]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69da      	ldr	r2, [r3, #28]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	019b      	lsls	r3, r3, #6
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	085b      	lsrs	r3, r3, #1
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	041b      	lsls	r3, r3, #16
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c88:	061b      	lsls	r3, r3, #24
 8001c8a:	491b      	ldr	r1, [pc, #108]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c90:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <HAL_RCC_OscConfig+0x478>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7fe ff9b 	bl	8000bd0 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9e:	f7fe ff97 	bl	8000bd0 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e05c      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x416>
 8001cbc:	e054      	b.n	8001d68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cbe:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <HAL_RCC_OscConfig+0x478>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7fe ff84 	bl	8000bd0 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ccc:	f7fe ff80 	bl	8000bd0 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e045      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x444>
 8001cea:	e03d      	b.n	8001d68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d107      	bne.n	8001d04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e038      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40007000 	.word	0x40007000
 8001d00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <HAL_RCC_OscConfig+0x4ec>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d028      	beq.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d121      	bne.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d11a      	bne.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d34:	4013      	ands	r3, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d111      	bne.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4a:	085b      	lsrs	r3, r3, #1
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d107      	bne.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800

08001d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0cc      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d8c:	4b68      	ldr	r3, [pc, #416]	; (8001f30 <HAL_RCC_ClockConfig+0x1b8>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d90c      	bls.n	8001db4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9a:	4b65      	ldr	r3, [pc, #404]	; (8001f30 <HAL_RCC_ClockConfig+0x1b8>)
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da2:	4b63      	ldr	r3, [pc, #396]	; (8001f30 <HAL_RCC_ClockConfig+0x1b8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d001      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0b8      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d020      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dcc:	4b59      	ldr	r3, [pc, #356]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	4a58      	ldr	r2, [pc, #352]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0308 	and.w	r3, r3, #8
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001de4:	4b53      	ldr	r3, [pc, #332]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	4a52      	ldr	r2, [pc, #328]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df0:	4b50      	ldr	r3, [pc, #320]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	494d      	ldr	r1, [pc, #308]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d044      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d107      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e16:	4b47      	ldr	r3, [pc, #284]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d119      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e07f      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d003      	beq.n	8001e36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d107      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e36:	4b3f      	ldr	r3, [pc, #252]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d109      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e06f      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e46:	4b3b      	ldr	r3, [pc, #236]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e067      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e56:	4b37      	ldr	r3, [pc, #220]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f023 0203 	bic.w	r2, r3, #3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	4934      	ldr	r1, [pc, #208]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e68:	f7fe feb2 	bl	8000bd0 <HAL_GetTick>
 8001e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6e:	e00a      	b.n	8001e86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e70:	f7fe feae 	bl	8000bd0 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e04f      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e86:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 020c 	and.w	r2, r3, #12
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d1eb      	bne.n	8001e70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e98:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <HAL_RCC_ClockConfig+0x1b8>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d20c      	bcs.n	8001ec0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d001      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e032      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d008      	beq.n	8001ede <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ecc:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	4916      	ldr	r1, [pc, #88]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d009      	beq.n	8001efe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eea:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	490e      	ldr	r1, [pc, #56]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001efe:	f000 f821 	bl	8001f44 <HAL_RCC_GetSysClockFreq>
 8001f02:	4602      	mov	r2, r0
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	490a      	ldr	r1, [pc, #40]	; (8001f38 <HAL_RCC_ClockConfig+0x1c0>)
 8001f10:	5ccb      	ldrb	r3, [r1, r3]
 8001f12:	fa22 f303 	lsr.w	r3, r2, r3
 8001f16:	4a09      	ldr	r2, [pc, #36]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fe12 	bl	8000b48 <HAL_InitTick>

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40023c00 	.word	0x40023c00
 8001f34:	40023800 	.word	0x40023800
 8001f38:	080037a0 	.word	0x080037a0
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	20000004 	.word	0x20000004

08001f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f48:	b094      	sub	sp, #80	; 0x50
 8001f4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	647b      	str	r3, [r7, #68]	; 0x44
 8001f50:	2300      	movs	r3, #0
 8001f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f54:	2300      	movs	r3, #0
 8001f56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f5c:	4b79      	ldr	r3, [pc, #484]	; (8002144 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d00d      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0x40>
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	f200 80e1 	bhi.w	8002130 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d002      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0x34>
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d003      	beq.n	8001f7e <HAL_RCC_GetSysClockFreq+0x3a>
 8001f76:	e0db      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f78:	4b73      	ldr	r3, [pc, #460]	; (8002148 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f7a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f7c:	e0db      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f7e:	4b73      	ldr	r3, [pc, #460]	; (800214c <HAL_RCC_GetSysClockFreq+0x208>)
 8001f80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f82:	e0d8      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f84:	4b6f      	ldr	r3, [pc, #444]	; (8002144 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f8c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f8e:	4b6d      	ldr	r3, [pc, #436]	; (8002144 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d063      	beq.n	8002062 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f9a:	4b6a      	ldr	r3, [pc, #424]	; (8002144 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	099b      	lsrs	r3, r3, #6
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fa4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fac:	633b      	str	r3, [r7, #48]	; 0x30
 8001fae:	2300      	movs	r3, #0
 8001fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8001fb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001fb6:	4622      	mov	r2, r4
 8001fb8:	462b      	mov	r3, r5
 8001fba:	f04f 0000 	mov.w	r0, #0
 8001fbe:	f04f 0100 	mov.w	r1, #0
 8001fc2:	0159      	lsls	r1, r3, #5
 8001fc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fc8:	0150      	lsls	r0, r2, #5
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4621      	mov	r1, r4
 8001fd0:	1a51      	subs	r1, r2, r1
 8001fd2:	6139      	str	r1, [r7, #16]
 8001fd4:	4629      	mov	r1, r5
 8001fd6:	eb63 0301 	sbc.w	r3, r3, r1
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	f04f 0300 	mov.w	r3, #0
 8001fe4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fe8:	4659      	mov	r1, fp
 8001fea:	018b      	lsls	r3, r1, #6
 8001fec:	4651      	mov	r1, sl
 8001fee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ff2:	4651      	mov	r1, sl
 8001ff4:	018a      	lsls	r2, r1, #6
 8001ff6:	4651      	mov	r1, sl
 8001ff8:	ebb2 0801 	subs.w	r8, r2, r1
 8001ffc:	4659      	mov	r1, fp
 8001ffe:	eb63 0901 	sbc.w	r9, r3, r1
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800200e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002012:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002016:	4690      	mov	r8, r2
 8002018:	4699      	mov	r9, r3
 800201a:	4623      	mov	r3, r4
 800201c:	eb18 0303 	adds.w	r3, r8, r3
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	462b      	mov	r3, r5
 8002024:	eb49 0303 	adc.w	r3, r9, r3
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002036:	4629      	mov	r1, r5
 8002038:	024b      	lsls	r3, r1, #9
 800203a:	4621      	mov	r1, r4
 800203c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002040:	4621      	mov	r1, r4
 8002042:	024a      	lsls	r2, r1, #9
 8002044:	4610      	mov	r0, r2
 8002046:	4619      	mov	r1, r3
 8002048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800204a:	2200      	movs	r2, #0
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
 800204e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002050:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002054:	f7fe f90c 	bl	8000270 <__aeabi_uldivmod>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4613      	mov	r3, r2
 800205e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002060:	e058      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002062:	4b38      	ldr	r3, [pc, #224]	; (8002144 <HAL_RCC_GetSysClockFreq+0x200>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	099b      	lsrs	r3, r3, #6
 8002068:	2200      	movs	r2, #0
 800206a:	4618      	mov	r0, r3
 800206c:	4611      	mov	r1, r2
 800206e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002072:	623b      	str	r3, [r7, #32]
 8002074:	2300      	movs	r3, #0
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
 8002078:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800207c:	4642      	mov	r2, r8
 800207e:	464b      	mov	r3, r9
 8002080:	f04f 0000 	mov.w	r0, #0
 8002084:	f04f 0100 	mov.w	r1, #0
 8002088:	0159      	lsls	r1, r3, #5
 800208a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800208e:	0150      	lsls	r0, r2, #5
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4641      	mov	r1, r8
 8002096:	ebb2 0a01 	subs.w	sl, r2, r1
 800209a:	4649      	mov	r1, r9
 800209c:	eb63 0b01 	sbc.w	fp, r3, r1
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	f04f 0300 	mov.w	r3, #0
 80020a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020b4:	ebb2 040a 	subs.w	r4, r2, sl
 80020b8:	eb63 050b 	sbc.w	r5, r3, fp
 80020bc:	f04f 0200 	mov.w	r2, #0
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	00eb      	lsls	r3, r5, #3
 80020c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020ca:	00e2      	lsls	r2, r4, #3
 80020cc:	4614      	mov	r4, r2
 80020ce:	461d      	mov	r5, r3
 80020d0:	4643      	mov	r3, r8
 80020d2:	18e3      	adds	r3, r4, r3
 80020d4:	603b      	str	r3, [r7, #0]
 80020d6:	464b      	mov	r3, r9
 80020d8:	eb45 0303 	adc.w	r3, r5, r3
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020ea:	4629      	mov	r1, r5
 80020ec:	028b      	lsls	r3, r1, #10
 80020ee:	4621      	mov	r1, r4
 80020f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020f4:	4621      	mov	r1, r4
 80020f6:	028a      	lsls	r2, r1, #10
 80020f8:	4610      	mov	r0, r2
 80020fa:	4619      	mov	r1, r3
 80020fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020fe:	2200      	movs	r2, #0
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	61fa      	str	r2, [r7, #28]
 8002104:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002108:	f7fe f8b2 	bl	8000270 <__aeabi_uldivmod>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4613      	mov	r3, r2
 8002112:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_RCC_GetSysClockFreq+0x200>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	0c1b      	lsrs	r3, r3, #16
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	3301      	adds	r3, #1
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002124:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002128:	fbb2 f3f3 	udiv	r3, r2, r3
 800212c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800212e:	e002      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_RCC_GetSysClockFreq+0x204>)
 8002132:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002134:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002138:	4618      	mov	r0, r3
 800213a:	3750      	adds	r7, #80	; 0x50
 800213c:	46bd      	mov	sp, r7
 800213e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800
 8002148:	00f42400 	.word	0x00f42400
 800214c:	007a1200 	.word	0x007a1200

08002150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <HAL_RCC_GetHCLKFreq+0x14>)
 8002156:	681b      	ldr	r3, [r3, #0]
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000000 	.word	0x20000000

08002168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800216c:	f7ff fff0 	bl	8002150 <HAL_RCC_GetHCLKFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	0a9b      	lsrs	r3, r3, #10
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4903      	ldr	r1, [pc, #12]	; (800218c <HAL_RCC_GetPCLK1Freq+0x24>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40023800 	.word	0x40023800
 800218c:	080037b0 	.word	0x080037b0

08002190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002194:	f7ff ffdc 	bl	8002150 <HAL_RCC_GetHCLKFreq>
 8002198:	4602      	mov	r2, r0
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	0b5b      	lsrs	r3, r3, #13
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	4903      	ldr	r1, [pc, #12]	; (80021b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021a6:	5ccb      	ldrb	r3, [r1, r3]
 80021a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40023800 	.word	0x40023800
 80021b4:	080037b0 	.word	0x080037b0

080021b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e03f      	b.n	800224a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d106      	bne.n	80021e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7fe fb70 	bl	80008c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2224      	movs	r2, #36	; 0x24
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 fb9b 	bl	8002938 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002210:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002220:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002230:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2220      	movs	r2, #32
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b08a      	sub	sp, #40	; 0x28
 8002256:	af02      	add	r7, sp, #8
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	4613      	mov	r3, r2
 8002260:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b20      	cmp	r3, #32
 8002270:	d17c      	bne.n	800236c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <HAL_UART_Transmit+0x2c>
 8002278:	88fb      	ldrh	r3, [r7, #6]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e075      	b.n	800236e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_UART_Transmit+0x3e>
 800228c:	2302      	movs	r3, #2
 800228e:	e06e      	b.n	800236e <HAL_UART_Transmit+0x11c>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2221      	movs	r2, #33	; 0x21
 80022a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022a6:	f7fe fc93 	bl	8000bd0 <HAL_GetTick>
 80022aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	88fa      	ldrh	r2, [r7, #6]
 80022b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	88fa      	ldrh	r2, [r7, #6]
 80022b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c0:	d108      	bne.n	80022d4 <HAL_UART_Transmit+0x82>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d104      	bne.n	80022d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	e003      	b.n	80022dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80022e4:	e02a      	b.n	800233c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2200      	movs	r2, #0
 80022ee:	2180      	movs	r1, #128	; 0x80
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 f988 	bl	8002606 <UART_WaitOnFlagUntilTimeout>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e036      	b.n	800236e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10b      	bne.n	800231e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002314:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	3302      	adds	r3, #2
 800231a:	61bb      	str	r3, [r7, #24]
 800231c:	e007      	b.n	800232e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	781a      	ldrb	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	3301      	adds	r3, #1
 800232c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002332:	b29b      	uxth	r3, r3
 8002334:	3b01      	subs	r3, #1
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002340:	b29b      	uxth	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1cf      	bne.n	80022e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2200      	movs	r2, #0
 800234e:	2140      	movs	r1, #64	; 0x40
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f958 	bl	8002606 <UART_WaitOnFlagUntilTimeout>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e006      	b.n	800236e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	e000      	b.n	800236e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800236c:	2302      	movs	r3, #2
  }
}
 800236e:	4618      	mov	r0, r3
 8002370:	3720      	adds	r7, #32
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	4613      	mov	r3, r2
 8002382:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b20      	cmp	r3, #32
 800238e:	d11d      	bne.n	80023cc <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <HAL_UART_Receive_DMA+0x26>
 8002396:	88fb      	ldrh	r3, [r7, #6]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e016      	b.n	80023ce <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_UART_Receive_DMA+0x38>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e00f      	b.n	80023ce <HAL_UART_Receive_DMA+0x58>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	461a      	mov	r2, r3
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 f98e 	bl	80026e4 <UART_Start_Receive_DMA>
 80023c8:	4603      	mov	r3, r0
 80023ca:	e000      	b.n	80023ce <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80023cc:	2302      	movs	r3, #2
  }
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	460b      	mov	r3, r1
 8002408:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b09c      	sub	sp, #112	; 0x70
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002422:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d172      	bne.n	8002518 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002434:	2200      	movs	r2, #0
 8002436:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	330c      	adds	r3, #12
 800243e:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002442:	e853 3f00 	ldrex	r3, [r3]
 8002446:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800244a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800244e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	330c      	adds	r3, #12
 8002456:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002458:	65ba      	str	r2, [r7, #88]	; 0x58
 800245a:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800245c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800245e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002460:	e841 2300 	strex	r3, r2, [r1]
 8002464:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1e5      	bne.n	8002438 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800246c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	3314      	adds	r3, #20
 8002472:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002476:	e853 3f00 	ldrex	r3, [r3]
 800247a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800247c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800247e:	f023 0301 	bic.w	r3, r3, #1
 8002482:	667b      	str	r3, [r7, #100]	; 0x64
 8002484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	3314      	adds	r3, #20
 800248a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800248c:	647a      	str	r2, [r7, #68]	; 0x44
 800248e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002490:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002494:	e841 2300 	strex	r3, r2, [r1]
 8002498:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800249a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1e5      	bne.n	800246c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	3314      	adds	r3, #20
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	e853 3f00 	ldrex	r3, [r3]
 80024ae:	623b      	str	r3, [r7, #32]
   return(result);
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024b6:	663b      	str	r3, [r7, #96]	; 0x60
 80024b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	3314      	adds	r3, #20
 80024be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024c0:	633a      	str	r2, [r7, #48]	; 0x30
 80024c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024c8:	e841 2300 	strex	r3, r2, [r1]
 80024cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80024ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1e5      	bne.n	80024a0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80024d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d119      	bne.n	8002518 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	330c      	adds	r3, #12
 80024ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	e853 3f00 	ldrex	r3, [r3]
 80024f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f023 0310 	bic.w	r3, r3, #16
 80024fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	330c      	adds	r3, #12
 8002502:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002504:	61fa      	str	r2, [r7, #28]
 8002506:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002508:	69b9      	ldr	r1, [r7, #24]
 800250a:	69fa      	ldr	r2, [r7, #28]
 800250c:	e841 2300 	strex	r3, r2, [r1]
 8002510:	617b      	str	r3, [r7, #20]
   return(result);
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1e5      	bne.n	80024e4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	2b01      	cmp	r3, #1
 800251e:	d106      	bne.n	800252e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002522:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002524:	4619      	mov	r1, r3
 8002526:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002528:	f7ff ff69 	bl	80023fe <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800252c:	e002      	b.n	8002534 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800252e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002530:	f7fe f81c 	bl	800056c <HAL_UART_RxCpltCallback>
}
 8002534:	bf00      	nop
 8002536:	3770      	adds	r7, #112	; 0x70
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002548:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	2b01      	cmp	r3, #1
 8002550:	d108      	bne.n	8002564 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002556:	085b      	lsrs	r3, r3, #1
 8002558:	b29b      	uxth	r3, r3
 800255a:	4619      	mov	r1, r3
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f7ff ff4e 	bl	80023fe <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002562:	e002      	b.n	800256a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f7ff ff36 	bl	80023d6 <HAL_UART_RxHalfCpltCallback>
}
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b084      	sub	sp, #16
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002582:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258e:	2b80      	cmp	r3, #128	; 0x80
 8002590:	bf0c      	ite	eq
 8002592:	2301      	moveq	r3, #1
 8002594:	2300      	movne	r3, #0
 8002596:	b2db      	uxtb	r3, r3
 8002598:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b21      	cmp	r3, #33	; 0x21
 80025a4:	d108      	bne.n	80025b8 <UART_DMAError+0x46>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2200      	movs	r2, #0
 80025b0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80025b2:	68b8      	ldr	r0, [r7, #8]
 80025b4:	f000 f934 	bl	8002820 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c2:	2b40      	cmp	r3, #64	; 0x40
 80025c4:	bf0c      	ite	eq
 80025c6:	2301      	moveq	r3, #1
 80025c8:	2300      	movne	r3, #0
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b22      	cmp	r3, #34	; 0x22
 80025d8:	d108      	bne.n	80025ec <UART_DMAError+0x7a>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2200      	movs	r2, #0
 80025e4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80025e6:	68b8      	ldr	r0, [r7, #8]
 80025e8:	f000 f942 	bl	8002870 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	f043 0210 	orr.w	r2, r3, #16
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025f8:	68b8      	ldr	r0, [r7, #8]
 80025fa:	f7ff fef6 	bl	80023ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025fe:	bf00      	nop
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b090      	sub	sp, #64	; 0x40
 800260a:	af00      	add	r7, sp, #0
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	603b      	str	r3, [r7, #0]
 8002612:	4613      	mov	r3, r2
 8002614:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002616:	e050      	b.n	80026ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800261a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261e:	d04c      	beq.n	80026ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002622:	2b00      	cmp	r3, #0
 8002624:	d007      	beq.n	8002636 <UART_WaitOnFlagUntilTimeout+0x30>
 8002626:	f7fe fad3 	bl	8000bd0 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002632:	429a      	cmp	r2, r3
 8002634:	d241      	bcs.n	80026ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	330c      	adds	r3, #12
 800263c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800263e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002640:	e853 3f00 	ldrex	r3, [r3]
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800264c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	330c      	adds	r3, #12
 8002654:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002656:	637a      	str	r2, [r7, #52]	; 0x34
 8002658:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800265a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800265c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800265e:	e841 2300 	strex	r3, r2, [r1]
 8002662:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1e5      	bne.n	8002636 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	3314      	adds	r3, #20
 8002670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	e853 3f00 	ldrex	r3, [r3]
 8002678:	613b      	str	r3, [r7, #16]
   return(result);
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	f023 0301 	bic.w	r3, r3, #1
 8002680:	63bb      	str	r3, [r7, #56]	; 0x38
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	3314      	adds	r3, #20
 8002688:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800268a:	623a      	str	r2, [r7, #32]
 800268c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268e:	69f9      	ldr	r1, [r7, #28]
 8002690:	6a3a      	ldr	r2, [r7, #32]
 8002692:	e841 2300 	strex	r3, r2, [r1]
 8002696:	61bb      	str	r3, [r7, #24]
   return(result);
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1e5      	bne.n	800266a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2220      	movs	r2, #32
 80026aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e00f      	b.n	80026da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	4013      	ands	r3, r2
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	bf0c      	ite	eq
 80026ca:	2301      	moveq	r3, #1
 80026cc:	2300      	movne	r3, #0
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d09f      	beq.n	8002618 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3740      	adds	r7, #64	; 0x40
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b098      	sub	sp, #96	; 0x60
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	4613      	mov	r3, r2
 80026f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	88fa      	ldrh	r2, [r7, #6]
 80026fc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2222      	movs	r2, #34	; 0x22
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002710:	4a40      	ldr	r2, [pc, #256]	; (8002814 <UART_Start_Receive_DMA+0x130>)
 8002712:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002718:	4a3f      	ldr	r2, [pc, #252]	; (8002818 <UART_Start_Receive_DMA+0x134>)
 800271a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002720:	4a3e      	ldr	r2, [pc, #248]	; (800281c <UART_Start_Receive_DMA+0x138>)
 8002722:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002728:	2200      	movs	r2, #0
 800272a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800272c:	f107 0308 	add.w	r3, r7, #8
 8002730:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	3304      	adds	r3, #4
 800273c:	4619      	mov	r1, r3
 800273e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	88fb      	ldrh	r3, [r7, #6]
 8002744:	f7fe fc10 	bl	8000f68 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002748:	2300      	movs	r3, #0
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d019      	beq.n	80027a2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	330c      	adds	r3, #12
 8002774:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002778:	e853 3f00 	ldrex	r3, [r3]
 800277c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800277e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002784:	65bb      	str	r3, [r7, #88]	; 0x58
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	330c      	adds	r3, #12
 800278c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800278e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002790:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002792:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002794:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002796:	e841 2300 	strex	r3, r2, [r1]
 800279a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800279c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1e5      	bne.n	800276e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	3314      	adds	r3, #20
 80027a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ac:	e853 3f00 	ldrex	r3, [r3]
 80027b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80027b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	657b      	str	r3, [r7, #84]	; 0x54
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	3314      	adds	r3, #20
 80027c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027c2:	63ba      	str	r2, [r7, #56]	; 0x38
 80027c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80027c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027ca:	e841 2300 	strex	r3, r2, [r1]
 80027ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80027d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1e5      	bne.n	80027a2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	3314      	adds	r3, #20
 80027dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	e853 3f00 	ldrex	r3, [r3]
 80027e4:	617b      	str	r3, [r7, #20]
   return(result);
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ec:	653b      	str	r3, [r7, #80]	; 0x50
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	3314      	adds	r3, #20
 80027f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80027f6:	627a      	str	r2, [r7, #36]	; 0x24
 80027f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fa:	6a39      	ldr	r1, [r7, #32]
 80027fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fe:	e841 2300 	strex	r3, r2, [r1]
 8002802:	61fb      	str	r3, [r7, #28]
   return(result);
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1e5      	bne.n	80027d6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3760      	adds	r7, #96	; 0x60
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	08002417 	.word	0x08002417
 8002818:	0800253d 	.word	0x0800253d
 800281c:	08002573 	.word	0x08002573

08002820 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002820:	b480      	push	{r7}
 8002822:	b089      	sub	sp, #36	; 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	330c      	adds	r3, #12
 800282e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	e853 3f00 	ldrex	r3, [r3]
 8002836:	60bb      	str	r3, [r7, #8]
   return(result);
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800283e:	61fb      	str	r3, [r7, #28]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	330c      	adds	r3, #12
 8002846:	69fa      	ldr	r2, [r7, #28]
 8002848:	61ba      	str	r2, [r7, #24]
 800284a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284c:	6979      	ldr	r1, [r7, #20]
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	e841 2300 	strex	r3, r2, [r1]
 8002854:	613b      	str	r3, [r7, #16]
   return(result);
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1e5      	bne.n	8002828 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002864:	bf00      	nop
 8002866:	3724      	adds	r7, #36	; 0x24
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002870:	b480      	push	{r7}
 8002872:	b095      	sub	sp, #84	; 0x54
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	330c      	adds	r3, #12
 800287e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002882:	e853 3f00 	ldrex	r3, [r3]
 8002886:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800288e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	330c      	adds	r3, #12
 8002896:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002898:	643a      	str	r2, [r7, #64]	; 0x40
 800289a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800289c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800289e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028a0:	e841 2300 	strex	r3, r2, [r1]
 80028a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80028a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1e5      	bne.n	8002878 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3314      	adds	r3, #20
 80028b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	e853 3f00 	ldrex	r3, [r3]
 80028ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f023 0301 	bic.w	r3, r3, #1
 80028c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	3314      	adds	r3, #20
 80028ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028d4:	e841 2300 	strex	r3, r2, [r1]
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1e5      	bne.n	80028ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d119      	bne.n	800291c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	330c      	adds	r3, #12
 80028ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	e853 3f00 	ldrex	r3, [r3]
 80028f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f023 0310 	bic.w	r3, r3, #16
 80028fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	330c      	adds	r3, #12
 8002906:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002908:	61ba      	str	r2, [r7, #24]
 800290a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290c:	6979      	ldr	r1, [r7, #20]
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	e841 2300 	strex	r3, r2, [r1]
 8002914:	613b      	str	r3, [r7, #16]
   return(result);
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1e5      	bne.n	80028e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	631a      	str	r2, [r3, #48]	; 0x30
}
 800292a:	bf00      	nop
 800292c:	3754      	adds	r7, #84	; 0x54
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800293c:	b0c0      	sub	sp, #256	; 0x100
 800293e:	af00      	add	r7, sp, #0
 8002940:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002954:	68d9      	ldr	r1, [r3, #12]
 8002956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	ea40 0301 	orr.w	r3, r0, r1
 8002960:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	431a      	orrs	r2, r3
 8002970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	431a      	orrs	r2, r3
 8002978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002990:	f021 010c 	bic.w	r1, r1, #12
 8002994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800299e:	430b      	orrs	r3, r1
 80029a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80029ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b2:	6999      	ldr	r1, [r3, #24]
 80029b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	ea40 0301 	orr.w	r3, r0, r1
 80029be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	4b8f      	ldr	r3, [pc, #572]	; (8002c04 <UART_SetConfig+0x2cc>)
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d005      	beq.n	80029d8 <UART_SetConfig+0xa0>
 80029cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	4b8d      	ldr	r3, [pc, #564]	; (8002c08 <UART_SetConfig+0x2d0>)
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d104      	bne.n	80029e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029d8:	f7ff fbda 	bl	8002190 <HAL_RCC_GetPCLK2Freq>
 80029dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80029e0:	e003      	b.n	80029ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029e2:	f7ff fbc1 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 80029e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029f4:	f040 810c 	bne.w	8002c10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029fc:	2200      	movs	r2, #0
 80029fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a0a:	4622      	mov	r2, r4
 8002a0c:	462b      	mov	r3, r5
 8002a0e:	1891      	adds	r1, r2, r2
 8002a10:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a12:	415b      	adcs	r3, r3
 8002a14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a1a:	4621      	mov	r1, r4
 8002a1c:	eb12 0801 	adds.w	r8, r2, r1
 8002a20:	4629      	mov	r1, r5
 8002a22:	eb43 0901 	adc.w	r9, r3, r1
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	f04f 0300 	mov.w	r3, #0
 8002a2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a3a:	4690      	mov	r8, r2
 8002a3c:	4699      	mov	r9, r3
 8002a3e:	4623      	mov	r3, r4
 8002a40:	eb18 0303 	adds.w	r3, r8, r3
 8002a44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a48:	462b      	mov	r3, r5
 8002a4a:	eb49 0303 	adc.w	r3, r9, r3
 8002a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a66:	460b      	mov	r3, r1
 8002a68:	18db      	adds	r3, r3, r3
 8002a6a:	653b      	str	r3, [r7, #80]	; 0x50
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	eb42 0303 	adc.w	r3, r2, r3
 8002a72:	657b      	str	r3, [r7, #84]	; 0x54
 8002a74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a7c:	f7fd fbf8 	bl	8000270 <__aeabi_uldivmod>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4b61      	ldr	r3, [pc, #388]	; (8002c0c <UART_SetConfig+0x2d4>)
 8002a86:	fba3 2302 	umull	r2, r3, r3, r2
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	011c      	lsls	r4, r3, #4
 8002a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a92:	2200      	movs	r2, #0
 8002a94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	464b      	mov	r3, r9
 8002aa4:	1891      	adds	r1, r2, r2
 8002aa6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002aa8:	415b      	adcs	r3, r3
 8002aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ab0:	4641      	mov	r1, r8
 8002ab2:	eb12 0a01 	adds.w	sl, r2, r1
 8002ab6:	4649      	mov	r1, r9
 8002ab8:	eb43 0b01 	adc.w	fp, r3, r1
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ac8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002acc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ad0:	4692      	mov	sl, r2
 8002ad2:	469b      	mov	fp, r3
 8002ad4:	4643      	mov	r3, r8
 8002ad6:	eb1a 0303 	adds.w	r3, sl, r3
 8002ada:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ade:	464b      	mov	r3, r9
 8002ae0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ae4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002af4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002af8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002afc:	460b      	mov	r3, r1
 8002afe:	18db      	adds	r3, r3, r3
 8002b00:	643b      	str	r3, [r7, #64]	; 0x40
 8002b02:	4613      	mov	r3, r2
 8002b04:	eb42 0303 	adc.w	r3, r2, r3
 8002b08:	647b      	str	r3, [r7, #68]	; 0x44
 8002b0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b12:	f7fd fbad 	bl	8000270 <__aeabi_uldivmod>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4b3b      	ldr	r3, [pc, #236]	; (8002c0c <UART_SetConfig+0x2d4>)
 8002b1e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	2264      	movs	r2, #100	; 0x64
 8002b26:	fb02 f303 	mul.w	r3, r2, r3
 8002b2a:	1acb      	subs	r3, r1, r3
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b32:	4b36      	ldr	r3, [pc, #216]	; (8002c0c <UART_SetConfig+0x2d4>)
 8002b34:	fba3 2302 	umull	r2, r3, r3, r2
 8002b38:	095b      	lsrs	r3, r3, #5
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b40:	441c      	add	r4, r3
 8002b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b46:	2200      	movs	r2, #0
 8002b48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b54:	4642      	mov	r2, r8
 8002b56:	464b      	mov	r3, r9
 8002b58:	1891      	adds	r1, r2, r2
 8002b5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b5c:	415b      	adcs	r3, r3
 8002b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b64:	4641      	mov	r1, r8
 8002b66:	1851      	adds	r1, r2, r1
 8002b68:	6339      	str	r1, [r7, #48]	; 0x30
 8002b6a:	4649      	mov	r1, r9
 8002b6c:	414b      	adcs	r3, r1
 8002b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b7c:	4659      	mov	r1, fp
 8002b7e:	00cb      	lsls	r3, r1, #3
 8002b80:	4651      	mov	r1, sl
 8002b82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b86:	4651      	mov	r1, sl
 8002b88:	00ca      	lsls	r2, r1, #3
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4603      	mov	r3, r0
 8002b90:	4642      	mov	r2, r8
 8002b92:	189b      	adds	r3, r3, r2
 8002b94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b98:	464b      	mov	r3, r9
 8002b9a:	460a      	mov	r2, r1
 8002b9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002bb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002bb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002bb8:	460b      	mov	r3, r1
 8002bba:	18db      	adds	r3, r3, r3
 8002bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	eb42 0303 	adc.w	r3, r2, r3
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002bce:	f7fd fb4f 	bl	8000270 <__aeabi_uldivmod>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <UART_SetConfig+0x2d4>)
 8002bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bdc:	095b      	lsrs	r3, r3, #5
 8002bde:	2164      	movs	r1, #100	; 0x64
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	3332      	adds	r3, #50	; 0x32
 8002bea:	4a08      	ldr	r2, [pc, #32]	; (8002c0c <UART_SetConfig+0x2d4>)
 8002bec:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	f003 0207 	and.w	r2, r3, #7
 8002bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4422      	add	r2, r4
 8002bfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c00:	e106      	b.n	8002e10 <UART_SetConfig+0x4d8>
 8002c02:	bf00      	nop
 8002c04:	40011000 	.word	0x40011000
 8002c08:	40011400 	.word	0x40011400
 8002c0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c14:	2200      	movs	r2, #0
 8002c16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c22:	4642      	mov	r2, r8
 8002c24:	464b      	mov	r3, r9
 8002c26:	1891      	adds	r1, r2, r2
 8002c28:	6239      	str	r1, [r7, #32]
 8002c2a:	415b      	adcs	r3, r3
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c32:	4641      	mov	r1, r8
 8002c34:	1854      	adds	r4, r2, r1
 8002c36:	4649      	mov	r1, r9
 8002c38:	eb43 0501 	adc.w	r5, r3, r1
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	00eb      	lsls	r3, r5, #3
 8002c46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c4a:	00e2      	lsls	r2, r4, #3
 8002c4c:	4614      	mov	r4, r2
 8002c4e:	461d      	mov	r5, r3
 8002c50:	4643      	mov	r3, r8
 8002c52:	18e3      	adds	r3, r4, r3
 8002c54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c58:	464b      	mov	r3, r9
 8002c5a:	eb45 0303 	adc.w	r3, r5, r3
 8002c5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c7e:	4629      	mov	r1, r5
 8002c80:	008b      	lsls	r3, r1, #2
 8002c82:	4621      	mov	r1, r4
 8002c84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c88:	4621      	mov	r1, r4
 8002c8a:	008a      	lsls	r2, r1, #2
 8002c8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002c90:	f7fd faee 	bl	8000270 <__aeabi_uldivmod>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	4b60      	ldr	r3, [pc, #384]	; (8002e1c <UART_SetConfig+0x4e4>)
 8002c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	011c      	lsls	r4, r3, #4
 8002ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002cac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002cb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002cb4:	4642      	mov	r2, r8
 8002cb6:	464b      	mov	r3, r9
 8002cb8:	1891      	adds	r1, r2, r2
 8002cba:	61b9      	str	r1, [r7, #24]
 8002cbc:	415b      	adcs	r3, r3
 8002cbe:	61fb      	str	r3, [r7, #28]
 8002cc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cc4:	4641      	mov	r1, r8
 8002cc6:	1851      	adds	r1, r2, r1
 8002cc8:	6139      	str	r1, [r7, #16]
 8002cca:	4649      	mov	r1, r9
 8002ccc:	414b      	adcs	r3, r1
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cdc:	4659      	mov	r1, fp
 8002cde:	00cb      	lsls	r3, r1, #3
 8002ce0:	4651      	mov	r1, sl
 8002ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ce6:	4651      	mov	r1, sl
 8002ce8:	00ca      	lsls	r2, r1, #3
 8002cea:	4610      	mov	r0, r2
 8002cec:	4619      	mov	r1, r3
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4642      	mov	r2, r8
 8002cf2:	189b      	adds	r3, r3, r2
 8002cf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cf8:	464b      	mov	r3, r9
 8002cfa:	460a      	mov	r2, r1
 8002cfc:	eb42 0303 	adc.w	r3, r2, r3
 8002d00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d1c:	4649      	mov	r1, r9
 8002d1e:	008b      	lsls	r3, r1, #2
 8002d20:	4641      	mov	r1, r8
 8002d22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d26:	4641      	mov	r1, r8
 8002d28:	008a      	lsls	r2, r1, #2
 8002d2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d2e:	f7fd fa9f 	bl	8000270 <__aeabi_uldivmod>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4611      	mov	r1, r2
 8002d38:	4b38      	ldr	r3, [pc, #224]	; (8002e1c <UART_SetConfig+0x4e4>)
 8002d3a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	2264      	movs	r2, #100	; 0x64
 8002d42:	fb02 f303 	mul.w	r3, r2, r3
 8002d46:	1acb      	subs	r3, r1, r3
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	3332      	adds	r3, #50	; 0x32
 8002d4c:	4a33      	ldr	r2, [pc, #204]	; (8002e1c <UART_SetConfig+0x4e4>)
 8002d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d52:	095b      	lsrs	r3, r3, #5
 8002d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d58:	441c      	add	r4, r3
 8002d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d5e:	2200      	movs	r2, #0
 8002d60:	673b      	str	r3, [r7, #112]	; 0x70
 8002d62:	677a      	str	r2, [r7, #116]	; 0x74
 8002d64:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d68:	4642      	mov	r2, r8
 8002d6a:	464b      	mov	r3, r9
 8002d6c:	1891      	adds	r1, r2, r2
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	415b      	adcs	r3, r3
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d78:	4641      	mov	r1, r8
 8002d7a:	1851      	adds	r1, r2, r1
 8002d7c:	6039      	str	r1, [r7, #0]
 8002d7e:	4649      	mov	r1, r9
 8002d80:	414b      	adcs	r3, r1
 8002d82:	607b      	str	r3, [r7, #4]
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d90:	4659      	mov	r1, fp
 8002d92:	00cb      	lsls	r3, r1, #3
 8002d94:	4651      	mov	r1, sl
 8002d96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d9a:	4651      	mov	r1, sl
 8002d9c:	00ca      	lsls	r2, r1, #3
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4619      	mov	r1, r3
 8002da2:	4603      	mov	r3, r0
 8002da4:	4642      	mov	r2, r8
 8002da6:	189b      	adds	r3, r3, r2
 8002da8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002daa:	464b      	mov	r3, r9
 8002dac:	460a      	mov	r2, r1
 8002dae:	eb42 0303 	adc.w	r3, r2, r3
 8002db2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	663b      	str	r3, [r7, #96]	; 0x60
 8002dbe:	667a      	str	r2, [r7, #100]	; 0x64
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002dcc:	4649      	mov	r1, r9
 8002dce:	008b      	lsls	r3, r1, #2
 8002dd0:	4641      	mov	r1, r8
 8002dd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dd6:	4641      	mov	r1, r8
 8002dd8:	008a      	lsls	r2, r1, #2
 8002dda:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002dde:	f7fd fa47 	bl	8000270 <__aeabi_uldivmod>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <UART_SetConfig+0x4e4>)
 8002de8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	2164      	movs	r1, #100	; 0x64
 8002df0:	fb01 f303 	mul.w	r3, r1, r3
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	3332      	adds	r3, #50	; 0x32
 8002dfa:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <UART_SetConfig+0x4e4>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	095b      	lsrs	r3, r3, #5
 8002e02:	f003 020f 	and.w	r2, r3, #15
 8002e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4422      	add	r2, r4
 8002e0e:	609a      	str	r2, [r3, #8]
}
 8002e10:	bf00      	nop
 8002e12:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e16:	46bd      	mov	sp, r7
 8002e18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e1c:	51eb851f 	.word	0x51eb851f

08002e20 <siprintf>:
 8002e20:	b40e      	push	{r1, r2, r3}
 8002e22:	b500      	push	{lr}
 8002e24:	b09c      	sub	sp, #112	; 0x70
 8002e26:	ab1d      	add	r3, sp, #116	; 0x74
 8002e28:	9002      	str	r0, [sp, #8]
 8002e2a:	9006      	str	r0, [sp, #24]
 8002e2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e30:	4809      	ldr	r0, [pc, #36]	; (8002e58 <siprintf+0x38>)
 8002e32:	9107      	str	r1, [sp, #28]
 8002e34:	9104      	str	r1, [sp, #16]
 8002e36:	4909      	ldr	r1, [pc, #36]	; (8002e5c <siprintf+0x3c>)
 8002e38:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e3c:	9105      	str	r1, [sp, #20]
 8002e3e:	6800      	ldr	r0, [r0, #0]
 8002e40:	9301      	str	r3, [sp, #4]
 8002e42:	a902      	add	r1, sp, #8
 8002e44:	f000 f992 	bl	800316c <_svfiprintf_r>
 8002e48:	9b02      	ldr	r3, [sp, #8]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	701a      	strb	r2, [r3, #0]
 8002e4e:	b01c      	add	sp, #112	; 0x70
 8002e50:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e54:	b003      	add	sp, #12
 8002e56:	4770      	bx	lr
 8002e58:	20000058 	.word	0x20000058
 8002e5c:	ffff0208 	.word	0xffff0208

08002e60 <memset>:
 8002e60:	4402      	add	r2, r0
 8002e62:	4603      	mov	r3, r0
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d100      	bne.n	8002e6a <memset+0xa>
 8002e68:	4770      	bx	lr
 8002e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e6e:	e7f9      	b.n	8002e64 <memset+0x4>

08002e70 <__errno>:
 8002e70:	4b01      	ldr	r3, [pc, #4]	; (8002e78 <__errno+0x8>)
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20000058 	.word	0x20000058

08002e7c <__libc_init_array>:
 8002e7c:	b570      	push	{r4, r5, r6, lr}
 8002e7e:	4d0d      	ldr	r5, [pc, #52]	; (8002eb4 <__libc_init_array+0x38>)
 8002e80:	4c0d      	ldr	r4, [pc, #52]	; (8002eb8 <__libc_init_array+0x3c>)
 8002e82:	1b64      	subs	r4, r4, r5
 8002e84:	10a4      	asrs	r4, r4, #2
 8002e86:	2600      	movs	r6, #0
 8002e88:	42a6      	cmp	r6, r4
 8002e8a:	d109      	bne.n	8002ea0 <__libc_init_array+0x24>
 8002e8c:	4d0b      	ldr	r5, [pc, #44]	; (8002ebc <__libc_init_array+0x40>)
 8002e8e:	4c0c      	ldr	r4, [pc, #48]	; (8002ec0 <__libc_init_array+0x44>)
 8002e90:	f000 fc6a 	bl	8003768 <_init>
 8002e94:	1b64      	subs	r4, r4, r5
 8002e96:	10a4      	asrs	r4, r4, #2
 8002e98:	2600      	movs	r6, #0
 8002e9a:	42a6      	cmp	r6, r4
 8002e9c:	d105      	bne.n	8002eaa <__libc_init_array+0x2e>
 8002e9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ea4:	4798      	blx	r3
 8002ea6:	3601      	adds	r6, #1
 8002ea8:	e7ee      	b.n	8002e88 <__libc_init_array+0xc>
 8002eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eae:	4798      	blx	r3
 8002eb0:	3601      	adds	r6, #1
 8002eb2:	e7f2      	b.n	8002e9a <__libc_init_array+0x1e>
 8002eb4:	080037fc 	.word	0x080037fc
 8002eb8:	080037fc 	.word	0x080037fc
 8002ebc:	080037fc 	.word	0x080037fc
 8002ec0:	08003800 	.word	0x08003800

08002ec4 <__retarget_lock_acquire_recursive>:
 8002ec4:	4770      	bx	lr

08002ec6 <__retarget_lock_release_recursive>:
 8002ec6:	4770      	bx	lr

08002ec8 <_free_r>:
 8002ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002eca:	2900      	cmp	r1, #0
 8002ecc:	d044      	beq.n	8002f58 <_free_r+0x90>
 8002ece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ed2:	9001      	str	r0, [sp, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f1a1 0404 	sub.w	r4, r1, #4
 8002eda:	bfb8      	it	lt
 8002edc:	18e4      	addlt	r4, r4, r3
 8002ede:	f000 f8df 	bl	80030a0 <__malloc_lock>
 8002ee2:	4a1e      	ldr	r2, [pc, #120]	; (8002f5c <_free_r+0x94>)
 8002ee4:	9801      	ldr	r0, [sp, #4]
 8002ee6:	6813      	ldr	r3, [r2, #0]
 8002ee8:	b933      	cbnz	r3, 8002ef8 <_free_r+0x30>
 8002eea:	6063      	str	r3, [r4, #4]
 8002eec:	6014      	str	r4, [r2, #0]
 8002eee:	b003      	add	sp, #12
 8002ef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002ef4:	f000 b8da 	b.w	80030ac <__malloc_unlock>
 8002ef8:	42a3      	cmp	r3, r4
 8002efa:	d908      	bls.n	8002f0e <_free_r+0x46>
 8002efc:	6825      	ldr	r5, [r4, #0]
 8002efe:	1961      	adds	r1, r4, r5
 8002f00:	428b      	cmp	r3, r1
 8002f02:	bf01      	itttt	eq
 8002f04:	6819      	ldreq	r1, [r3, #0]
 8002f06:	685b      	ldreq	r3, [r3, #4]
 8002f08:	1949      	addeq	r1, r1, r5
 8002f0a:	6021      	streq	r1, [r4, #0]
 8002f0c:	e7ed      	b.n	8002eea <_free_r+0x22>
 8002f0e:	461a      	mov	r2, r3
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	b10b      	cbz	r3, 8002f18 <_free_r+0x50>
 8002f14:	42a3      	cmp	r3, r4
 8002f16:	d9fa      	bls.n	8002f0e <_free_r+0x46>
 8002f18:	6811      	ldr	r1, [r2, #0]
 8002f1a:	1855      	adds	r5, r2, r1
 8002f1c:	42a5      	cmp	r5, r4
 8002f1e:	d10b      	bne.n	8002f38 <_free_r+0x70>
 8002f20:	6824      	ldr	r4, [r4, #0]
 8002f22:	4421      	add	r1, r4
 8002f24:	1854      	adds	r4, r2, r1
 8002f26:	42a3      	cmp	r3, r4
 8002f28:	6011      	str	r1, [r2, #0]
 8002f2a:	d1e0      	bne.n	8002eee <_free_r+0x26>
 8002f2c:	681c      	ldr	r4, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	6053      	str	r3, [r2, #4]
 8002f32:	440c      	add	r4, r1
 8002f34:	6014      	str	r4, [r2, #0]
 8002f36:	e7da      	b.n	8002eee <_free_r+0x26>
 8002f38:	d902      	bls.n	8002f40 <_free_r+0x78>
 8002f3a:	230c      	movs	r3, #12
 8002f3c:	6003      	str	r3, [r0, #0]
 8002f3e:	e7d6      	b.n	8002eee <_free_r+0x26>
 8002f40:	6825      	ldr	r5, [r4, #0]
 8002f42:	1961      	adds	r1, r4, r5
 8002f44:	428b      	cmp	r3, r1
 8002f46:	bf04      	itt	eq
 8002f48:	6819      	ldreq	r1, [r3, #0]
 8002f4a:	685b      	ldreq	r3, [r3, #4]
 8002f4c:	6063      	str	r3, [r4, #4]
 8002f4e:	bf04      	itt	eq
 8002f50:	1949      	addeq	r1, r1, r5
 8002f52:	6021      	streq	r1, [r4, #0]
 8002f54:	6054      	str	r4, [r2, #4]
 8002f56:	e7ca      	b.n	8002eee <_free_r+0x26>
 8002f58:	b003      	add	sp, #12
 8002f5a:	bd30      	pop	{r4, r5, pc}
 8002f5c:	200002cc 	.word	0x200002cc

08002f60 <sbrk_aligned>:
 8002f60:	b570      	push	{r4, r5, r6, lr}
 8002f62:	4e0e      	ldr	r6, [pc, #56]	; (8002f9c <sbrk_aligned+0x3c>)
 8002f64:	460c      	mov	r4, r1
 8002f66:	6831      	ldr	r1, [r6, #0]
 8002f68:	4605      	mov	r5, r0
 8002f6a:	b911      	cbnz	r1, 8002f72 <sbrk_aligned+0x12>
 8002f6c:	f000 fba6 	bl	80036bc <_sbrk_r>
 8002f70:	6030      	str	r0, [r6, #0]
 8002f72:	4621      	mov	r1, r4
 8002f74:	4628      	mov	r0, r5
 8002f76:	f000 fba1 	bl	80036bc <_sbrk_r>
 8002f7a:	1c43      	adds	r3, r0, #1
 8002f7c:	d00a      	beq.n	8002f94 <sbrk_aligned+0x34>
 8002f7e:	1cc4      	adds	r4, r0, #3
 8002f80:	f024 0403 	bic.w	r4, r4, #3
 8002f84:	42a0      	cmp	r0, r4
 8002f86:	d007      	beq.n	8002f98 <sbrk_aligned+0x38>
 8002f88:	1a21      	subs	r1, r4, r0
 8002f8a:	4628      	mov	r0, r5
 8002f8c:	f000 fb96 	bl	80036bc <_sbrk_r>
 8002f90:	3001      	adds	r0, #1
 8002f92:	d101      	bne.n	8002f98 <sbrk_aligned+0x38>
 8002f94:	f04f 34ff 	mov.w	r4, #4294967295
 8002f98:	4620      	mov	r0, r4
 8002f9a:	bd70      	pop	{r4, r5, r6, pc}
 8002f9c:	200002d0 	.word	0x200002d0

08002fa0 <_malloc_r>:
 8002fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fa4:	1ccd      	adds	r5, r1, #3
 8002fa6:	f025 0503 	bic.w	r5, r5, #3
 8002faa:	3508      	adds	r5, #8
 8002fac:	2d0c      	cmp	r5, #12
 8002fae:	bf38      	it	cc
 8002fb0:	250c      	movcc	r5, #12
 8002fb2:	2d00      	cmp	r5, #0
 8002fb4:	4607      	mov	r7, r0
 8002fb6:	db01      	blt.n	8002fbc <_malloc_r+0x1c>
 8002fb8:	42a9      	cmp	r1, r5
 8002fba:	d905      	bls.n	8002fc8 <_malloc_r+0x28>
 8002fbc:	230c      	movs	r3, #12
 8002fbe:	603b      	str	r3, [r7, #0]
 8002fc0:	2600      	movs	r6, #0
 8002fc2:	4630      	mov	r0, r6
 8002fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fc8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800309c <_malloc_r+0xfc>
 8002fcc:	f000 f868 	bl	80030a0 <__malloc_lock>
 8002fd0:	f8d8 3000 	ldr.w	r3, [r8]
 8002fd4:	461c      	mov	r4, r3
 8002fd6:	bb5c      	cbnz	r4, 8003030 <_malloc_r+0x90>
 8002fd8:	4629      	mov	r1, r5
 8002fda:	4638      	mov	r0, r7
 8002fdc:	f7ff ffc0 	bl	8002f60 <sbrk_aligned>
 8002fe0:	1c43      	adds	r3, r0, #1
 8002fe2:	4604      	mov	r4, r0
 8002fe4:	d155      	bne.n	8003092 <_malloc_r+0xf2>
 8002fe6:	f8d8 4000 	ldr.w	r4, [r8]
 8002fea:	4626      	mov	r6, r4
 8002fec:	2e00      	cmp	r6, #0
 8002fee:	d145      	bne.n	800307c <_malloc_r+0xdc>
 8002ff0:	2c00      	cmp	r4, #0
 8002ff2:	d048      	beq.n	8003086 <_malloc_r+0xe6>
 8002ff4:	6823      	ldr	r3, [r4, #0]
 8002ff6:	4631      	mov	r1, r6
 8002ff8:	4638      	mov	r0, r7
 8002ffa:	eb04 0903 	add.w	r9, r4, r3
 8002ffe:	f000 fb5d 	bl	80036bc <_sbrk_r>
 8003002:	4581      	cmp	r9, r0
 8003004:	d13f      	bne.n	8003086 <_malloc_r+0xe6>
 8003006:	6821      	ldr	r1, [r4, #0]
 8003008:	1a6d      	subs	r5, r5, r1
 800300a:	4629      	mov	r1, r5
 800300c:	4638      	mov	r0, r7
 800300e:	f7ff ffa7 	bl	8002f60 <sbrk_aligned>
 8003012:	3001      	adds	r0, #1
 8003014:	d037      	beq.n	8003086 <_malloc_r+0xe6>
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	442b      	add	r3, r5
 800301a:	6023      	str	r3, [r4, #0]
 800301c:	f8d8 3000 	ldr.w	r3, [r8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d038      	beq.n	8003096 <_malloc_r+0xf6>
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	42a2      	cmp	r2, r4
 8003028:	d12b      	bne.n	8003082 <_malloc_r+0xe2>
 800302a:	2200      	movs	r2, #0
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	e00f      	b.n	8003050 <_malloc_r+0xb0>
 8003030:	6822      	ldr	r2, [r4, #0]
 8003032:	1b52      	subs	r2, r2, r5
 8003034:	d41f      	bmi.n	8003076 <_malloc_r+0xd6>
 8003036:	2a0b      	cmp	r2, #11
 8003038:	d917      	bls.n	800306a <_malloc_r+0xca>
 800303a:	1961      	adds	r1, r4, r5
 800303c:	42a3      	cmp	r3, r4
 800303e:	6025      	str	r5, [r4, #0]
 8003040:	bf18      	it	ne
 8003042:	6059      	strne	r1, [r3, #4]
 8003044:	6863      	ldr	r3, [r4, #4]
 8003046:	bf08      	it	eq
 8003048:	f8c8 1000 	streq.w	r1, [r8]
 800304c:	5162      	str	r2, [r4, r5]
 800304e:	604b      	str	r3, [r1, #4]
 8003050:	4638      	mov	r0, r7
 8003052:	f104 060b 	add.w	r6, r4, #11
 8003056:	f000 f829 	bl	80030ac <__malloc_unlock>
 800305a:	f026 0607 	bic.w	r6, r6, #7
 800305e:	1d23      	adds	r3, r4, #4
 8003060:	1af2      	subs	r2, r6, r3
 8003062:	d0ae      	beq.n	8002fc2 <_malloc_r+0x22>
 8003064:	1b9b      	subs	r3, r3, r6
 8003066:	50a3      	str	r3, [r4, r2]
 8003068:	e7ab      	b.n	8002fc2 <_malloc_r+0x22>
 800306a:	42a3      	cmp	r3, r4
 800306c:	6862      	ldr	r2, [r4, #4]
 800306e:	d1dd      	bne.n	800302c <_malloc_r+0x8c>
 8003070:	f8c8 2000 	str.w	r2, [r8]
 8003074:	e7ec      	b.n	8003050 <_malloc_r+0xb0>
 8003076:	4623      	mov	r3, r4
 8003078:	6864      	ldr	r4, [r4, #4]
 800307a:	e7ac      	b.n	8002fd6 <_malloc_r+0x36>
 800307c:	4634      	mov	r4, r6
 800307e:	6876      	ldr	r6, [r6, #4]
 8003080:	e7b4      	b.n	8002fec <_malloc_r+0x4c>
 8003082:	4613      	mov	r3, r2
 8003084:	e7cc      	b.n	8003020 <_malloc_r+0x80>
 8003086:	230c      	movs	r3, #12
 8003088:	603b      	str	r3, [r7, #0]
 800308a:	4638      	mov	r0, r7
 800308c:	f000 f80e 	bl	80030ac <__malloc_unlock>
 8003090:	e797      	b.n	8002fc2 <_malloc_r+0x22>
 8003092:	6025      	str	r5, [r4, #0]
 8003094:	e7dc      	b.n	8003050 <_malloc_r+0xb0>
 8003096:	605b      	str	r3, [r3, #4]
 8003098:	deff      	udf	#255	; 0xff
 800309a:	bf00      	nop
 800309c:	200002cc 	.word	0x200002cc

080030a0 <__malloc_lock>:
 80030a0:	4801      	ldr	r0, [pc, #4]	; (80030a8 <__malloc_lock+0x8>)
 80030a2:	f7ff bf0f 	b.w	8002ec4 <__retarget_lock_acquire_recursive>
 80030a6:	bf00      	nop
 80030a8:	200002c8 	.word	0x200002c8

080030ac <__malloc_unlock>:
 80030ac:	4801      	ldr	r0, [pc, #4]	; (80030b4 <__malloc_unlock+0x8>)
 80030ae:	f7ff bf0a 	b.w	8002ec6 <__retarget_lock_release_recursive>
 80030b2:	bf00      	nop
 80030b4:	200002c8 	.word	0x200002c8

080030b8 <__ssputs_r>:
 80030b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030bc:	688e      	ldr	r6, [r1, #8]
 80030be:	461f      	mov	r7, r3
 80030c0:	42be      	cmp	r6, r7
 80030c2:	680b      	ldr	r3, [r1, #0]
 80030c4:	4682      	mov	sl, r0
 80030c6:	460c      	mov	r4, r1
 80030c8:	4690      	mov	r8, r2
 80030ca:	d82c      	bhi.n	8003126 <__ssputs_r+0x6e>
 80030cc:	898a      	ldrh	r2, [r1, #12]
 80030ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80030d2:	d026      	beq.n	8003122 <__ssputs_r+0x6a>
 80030d4:	6965      	ldr	r5, [r4, #20]
 80030d6:	6909      	ldr	r1, [r1, #16]
 80030d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030dc:	eba3 0901 	sub.w	r9, r3, r1
 80030e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80030e4:	1c7b      	adds	r3, r7, #1
 80030e6:	444b      	add	r3, r9
 80030e8:	106d      	asrs	r5, r5, #1
 80030ea:	429d      	cmp	r5, r3
 80030ec:	bf38      	it	cc
 80030ee:	461d      	movcc	r5, r3
 80030f0:	0553      	lsls	r3, r2, #21
 80030f2:	d527      	bpl.n	8003144 <__ssputs_r+0x8c>
 80030f4:	4629      	mov	r1, r5
 80030f6:	f7ff ff53 	bl	8002fa0 <_malloc_r>
 80030fa:	4606      	mov	r6, r0
 80030fc:	b360      	cbz	r0, 8003158 <__ssputs_r+0xa0>
 80030fe:	6921      	ldr	r1, [r4, #16]
 8003100:	464a      	mov	r2, r9
 8003102:	f000 faeb 	bl	80036dc <memcpy>
 8003106:	89a3      	ldrh	r3, [r4, #12]
 8003108:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800310c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003110:	81a3      	strh	r3, [r4, #12]
 8003112:	6126      	str	r6, [r4, #16]
 8003114:	6165      	str	r5, [r4, #20]
 8003116:	444e      	add	r6, r9
 8003118:	eba5 0509 	sub.w	r5, r5, r9
 800311c:	6026      	str	r6, [r4, #0]
 800311e:	60a5      	str	r5, [r4, #8]
 8003120:	463e      	mov	r6, r7
 8003122:	42be      	cmp	r6, r7
 8003124:	d900      	bls.n	8003128 <__ssputs_r+0x70>
 8003126:	463e      	mov	r6, r7
 8003128:	6820      	ldr	r0, [r4, #0]
 800312a:	4632      	mov	r2, r6
 800312c:	4641      	mov	r1, r8
 800312e:	f000 faab 	bl	8003688 <memmove>
 8003132:	68a3      	ldr	r3, [r4, #8]
 8003134:	1b9b      	subs	r3, r3, r6
 8003136:	60a3      	str	r3, [r4, #8]
 8003138:	6823      	ldr	r3, [r4, #0]
 800313a:	4433      	add	r3, r6
 800313c:	6023      	str	r3, [r4, #0]
 800313e:	2000      	movs	r0, #0
 8003140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003144:	462a      	mov	r2, r5
 8003146:	f000 fad7 	bl	80036f8 <_realloc_r>
 800314a:	4606      	mov	r6, r0
 800314c:	2800      	cmp	r0, #0
 800314e:	d1e0      	bne.n	8003112 <__ssputs_r+0x5a>
 8003150:	6921      	ldr	r1, [r4, #16]
 8003152:	4650      	mov	r0, sl
 8003154:	f7ff feb8 	bl	8002ec8 <_free_r>
 8003158:	230c      	movs	r3, #12
 800315a:	f8ca 3000 	str.w	r3, [sl]
 800315e:	89a3      	ldrh	r3, [r4, #12]
 8003160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003164:	81a3      	strh	r3, [r4, #12]
 8003166:	f04f 30ff 	mov.w	r0, #4294967295
 800316a:	e7e9      	b.n	8003140 <__ssputs_r+0x88>

0800316c <_svfiprintf_r>:
 800316c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003170:	4698      	mov	r8, r3
 8003172:	898b      	ldrh	r3, [r1, #12]
 8003174:	061b      	lsls	r3, r3, #24
 8003176:	b09d      	sub	sp, #116	; 0x74
 8003178:	4607      	mov	r7, r0
 800317a:	460d      	mov	r5, r1
 800317c:	4614      	mov	r4, r2
 800317e:	d50e      	bpl.n	800319e <_svfiprintf_r+0x32>
 8003180:	690b      	ldr	r3, [r1, #16]
 8003182:	b963      	cbnz	r3, 800319e <_svfiprintf_r+0x32>
 8003184:	2140      	movs	r1, #64	; 0x40
 8003186:	f7ff ff0b 	bl	8002fa0 <_malloc_r>
 800318a:	6028      	str	r0, [r5, #0]
 800318c:	6128      	str	r0, [r5, #16]
 800318e:	b920      	cbnz	r0, 800319a <_svfiprintf_r+0x2e>
 8003190:	230c      	movs	r3, #12
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	f04f 30ff 	mov.w	r0, #4294967295
 8003198:	e0d0      	b.n	800333c <_svfiprintf_r+0x1d0>
 800319a:	2340      	movs	r3, #64	; 0x40
 800319c:	616b      	str	r3, [r5, #20]
 800319e:	2300      	movs	r3, #0
 80031a0:	9309      	str	r3, [sp, #36]	; 0x24
 80031a2:	2320      	movs	r3, #32
 80031a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80031ac:	2330      	movs	r3, #48	; 0x30
 80031ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003354 <_svfiprintf_r+0x1e8>
 80031b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031b6:	f04f 0901 	mov.w	r9, #1
 80031ba:	4623      	mov	r3, r4
 80031bc:	469a      	mov	sl, r3
 80031be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031c2:	b10a      	cbz	r2, 80031c8 <_svfiprintf_r+0x5c>
 80031c4:	2a25      	cmp	r2, #37	; 0x25
 80031c6:	d1f9      	bne.n	80031bc <_svfiprintf_r+0x50>
 80031c8:	ebba 0b04 	subs.w	fp, sl, r4
 80031cc:	d00b      	beq.n	80031e6 <_svfiprintf_r+0x7a>
 80031ce:	465b      	mov	r3, fp
 80031d0:	4622      	mov	r2, r4
 80031d2:	4629      	mov	r1, r5
 80031d4:	4638      	mov	r0, r7
 80031d6:	f7ff ff6f 	bl	80030b8 <__ssputs_r>
 80031da:	3001      	adds	r0, #1
 80031dc:	f000 80a9 	beq.w	8003332 <_svfiprintf_r+0x1c6>
 80031e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031e2:	445a      	add	r2, fp
 80031e4:	9209      	str	r2, [sp, #36]	; 0x24
 80031e6:	f89a 3000 	ldrb.w	r3, [sl]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 80a1 	beq.w	8003332 <_svfiprintf_r+0x1c6>
 80031f0:	2300      	movs	r3, #0
 80031f2:	f04f 32ff 	mov.w	r2, #4294967295
 80031f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031fa:	f10a 0a01 	add.w	sl, sl, #1
 80031fe:	9304      	str	r3, [sp, #16]
 8003200:	9307      	str	r3, [sp, #28]
 8003202:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003206:	931a      	str	r3, [sp, #104]	; 0x68
 8003208:	4654      	mov	r4, sl
 800320a:	2205      	movs	r2, #5
 800320c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003210:	4850      	ldr	r0, [pc, #320]	; (8003354 <_svfiprintf_r+0x1e8>)
 8003212:	f7fc ffdd 	bl	80001d0 <memchr>
 8003216:	9a04      	ldr	r2, [sp, #16]
 8003218:	b9d8      	cbnz	r0, 8003252 <_svfiprintf_r+0xe6>
 800321a:	06d0      	lsls	r0, r2, #27
 800321c:	bf44      	itt	mi
 800321e:	2320      	movmi	r3, #32
 8003220:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003224:	0711      	lsls	r1, r2, #28
 8003226:	bf44      	itt	mi
 8003228:	232b      	movmi	r3, #43	; 0x2b
 800322a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800322e:	f89a 3000 	ldrb.w	r3, [sl]
 8003232:	2b2a      	cmp	r3, #42	; 0x2a
 8003234:	d015      	beq.n	8003262 <_svfiprintf_r+0xf6>
 8003236:	9a07      	ldr	r2, [sp, #28]
 8003238:	4654      	mov	r4, sl
 800323a:	2000      	movs	r0, #0
 800323c:	f04f 0c0a 	mov.w	ip, #10
 8003240:	4621      	mov	r1, r4
 8003242:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003246:	3b30      	subs	r3, #48	; 0x30
 8003248:	2b09      	cmp	r3, #9
 800324a:	d94d      	bls.n	80032e8 <_svfiprintf_r+0x17c>
 800324c:	b1b0      	cbz	r0, 800327c <_svfiprintf_r+0x110>
 800324e:	9207      	str	r2, [sp, #28]
 8003250:	e014      	b.n	800327c <_svfiprintf_r+0x110>
 8003252:	eba0 0308 	sub.w	r3, r0, r8
 8003256:	fa09 f303 	lsl.w	r3, r9, r3
 800325a:	4313      	orrs	r3, r2
 800325c:	9304      	str	r3, [sp, #16]
 800325e:	46a2      	mov	sl, r4
 8003260:	e7d2      	b.n	8003208 <_svfiprintf_r+0x9c>
 8003262:	9b03      	ldr	r3, [sp, #12]
 8003264:	1d19      	adds	r1, r3, #4
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	9103      	str	r1, [sp, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	bfbb      	ittet	lt
 800326e:	425b      	neglt	r3, r3
 8003270:	f042 0202 	orrlt.w	r2, r2, #2
 8003274:	9307      	strge	r3, [sp, #28]
 8003276:	9307      	strlt	r3, [sp, #28]
 8003278:	bfb8      	it	lt
 800327a:	9204      	strlt	r2, [sp, #16]
 800327c:	7823      	ldrb	r3, [r4, #0]
 800327e:	2b2e      	cmp	r3, #46	; 0x2e
 8003280:	d10c      	bne.n	800329c <_svfiprintf_r+0x130>
 8003282:	7863      	ldrb	r3, [r4, #1]
 8003284:	2b2a      	cmp	r3, #42	; 0x2a
 8003286:	d134      	bne.n	80032f2 <_svfiprintf_r+0x186>
 8003288:	9b03      	ldr	r3, [sp, #12]
 800328a:	1d1a      	adds	r2, r3, #4
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	9203      	str	r2, [sp, #12]
 8003290:	2b00      	cmp	r3, #0
 8003292:	bfb8      	it	lt
 8003294:	f04f 33ff 	movlt.w	r3, #4294967295
 8003298:	3402      	adds	r4, #2
 800329a:	9305      	str	r3, [sp, #20]
 800329c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003364 <_svfiprintf_r+0x1f8>
 80032a0:	7821      	ldrb	r1, [r4, #0]
 80032a2:	2203      	movs	r2, #3
 80032a4:	4650      	mov	r0, sl
 80032a6:	f7fc ff93 	bl	80001d0 <memchr>
 80032aa:	b138      	cbz	r0, 80032bc <_svfiprintf_r+0x150>
 80032ac:	9b04      	ldr	r3, [sp, #16]
 80032ae:	eba0 000a 	sub.w	r0, r0, sl
 80032b2:	2240      	movs	r2, #64	; 0x40
 80032b4:	4082      	lsls	r2, r0
 80032b6:	4313      	orrs	r3, r2
 80032b8:	3401      	adds	r4, #1
 80032ba:	9304      	str	r3, [sp, #16]
 80032bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032c0:	4825      	ldr	r0, [pc, #148]	; (8003358 <_svfiprintf_r+0x1ec>)
 80032c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032c6:	2206      	movs	r2, #6
 80032c8:	f7fc ff82 	bl	80001d0 <memchr>
 80032cc:	2800      	cmp	r0, #0
 80032ce:	d038      	beq.n	8003342 <_svfiprintf_r+0x1d6>
 80032d0:	4b22      	ldr	r3, [pc, #136]	; (800335c <_svfiprintf_r+0x1f0>)
 80032d2:	bb1b      	cbnz	r3, 800331c <_svfiprintf_r+0x1b0>
 80032d4:	9b03      	ldr	r3, [sp, #12]
 80032d6:	3307      	adds	r3, #7
 80032d8:	f023 0307 	bic.w	r3, r3, #7
 80032dc:	3308      	adds	r3, #8
 80032de:	9303      	str	r3, [sp, #12]
 80032e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032e2:	4433      	add	r3, r6
 80032e4:	9309      	str	r3, [sp, #36]	; 0x24
 80032e6:	e768      	b.n	80031ba <_svfiprintf_r+0x4e>
 80032e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80032ec:	460c      	mov	r4, r1
 80032ee:	2001      	movs	r0, #1
 80032f0:	e7a6      	b.n	8003240 <_svfiprintf_r+0xd4>
 80032f2:	2300      	movs	r3, #0
 80032f4:	3401      	adds	r4, #1
 80032f6:	9305      	str	r3, [sp, #20]
 80032f8:	4619      	mov	r1, r3
 80032fa:	f04f 0c0a 	mov.w	ip, #10
 80032fe:	4620      	mov	r0, r4
 8003300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003304:	3a30      	subs	r2, #48	; 0x30
 8003306:	2a09      	cmp	r2, #9
 8003308:	d903      	bls.n	8003312 <_svfiprintf_r+0x1a6>
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0c6      	beq.n	800329c <_svfiprintf_r+0x130>
 800330e:	9105      	str	r1, [sp, #20]
 8003310:	e7c4      	b.n	800329c <_svfiprintf_r+0x130>
 8003312:	fb0c 2101 	mla	r1, ip, r1, r2
 8003316:	4604      	mov	r4, r0
 8003318:	2301      	movs	r3, #1
 800331a:	e7f0      	b.n	80032fe <_svfiprintf_r+0x192>
 800331c:	ab03      	add	r3, sp, #12
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	462a      	mov	r2, r5
 8003322:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <_svfiprintf_r+0x1f4>)
 8003324:	a904      	add	r1, sp, #16
 8003326:	4638      	mov	r0, r7
 8003328:	f3af 8000 	nop.w
 800332c:	1c42      	adds	r2, r0, #1
 800332e:	4606      	mov	r6, r0
 8003330:	d1d6      	bne.n	80032e0 <_svfiprintf_r+0x174>
 8003332:	89ab      	ldrh	r3, [r5, #12]
 8003334:	065b      	lsls	r3, r3, #25
 8003336:	f53f af2d 	bmi.w	8003194 <_svfiprintf_r+0x28>
 800333a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800333c:	b01d      	add	sp, #116	; 0x74
 800333e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003342:	ab03      	add	r3, sp, #12
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	462a      	mov	r2, r5
 8003348:	4b05      	ldr	r3, [pc, #20]	; (8003360 <_svfiprintf_r+0x1f4>)
 800334a:	a904      	add	r1, sp, #16
 800334c:	4638      	mov	r0, r7
 800334e:	f000 f879 	bl	8003444 <_printf_i>
 8003352:	e7eb      	b.n	800332c <_svfiprintf_r+0x1c0>
 8003354:	080037c0 	.word	0x080037c0
 8003358:	080037ca 	.word	0x080037ca
 800335c:	00000000 	.word	0x00000000
 8003360:	080030b9 	.word	0x080030b9
 8003364:	080037c6 	.word	0x080037c6

08003368 <_printf_common>:
 8003368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800336c:	4616      	mov	r6, r2
 800336e:	4699      	mov	r9, r3
 8003370:	688a      	ldr	r2, [r1, #8]
 8003372:	690b      	ldr	r3, [r1, #16]
 8003374:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003378:	4293      	cmp	r3, r2
 800337a:	bfb8      	it	lt
 800337c:	4613      	movlt	r3, r2
 800337e:	6033      	str	r3, [r6, #0]
 8003380:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003384:	4607      	mov	r7, r0
 8003386:	460c      	mov	r4, r1
 8003388:	b10a      	cbz	r2, 800338e <_printf_common+0x26>
 800338a:	3301      	adds	r3, #1
 800338c:	6033      	str	r3, [r6, #0]
 800338e:	6823      	ldr	r3, [r4, #0]
 8003390:	0699      	lsls	r1, r3, #26
 8003392:	bf42      	ittt	mi
 8003394:	6833      	ldrmi	r3, [r6, #0]
 8003396:	3302      	addmi	r3, #2
 8003398:	6033      	strmi	r3, [r6, #0]
 800339a:	6825      	ldr	r5, [r4, #0]
 800339c:	f015 0506 	ands.w	r5, r5, #6
 80033a0:	d106      	bne.n	80033b0 <_printf_common+0x48>
 80033a2:	f104 0a19 	add.w	sl, r4, #25
 80033a6:	68e3      	ldr	r3, [r4, #12]
 80033a8:	6832      	ldr	r2, [r6, #0]
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	42ab      	cmp	r3, r5
 80033ae:	dc26      	bgt.n	80033fe <_printf_common+0x96>
 80033b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80033b4:	1e13      	subs	r3, r2, #0
 80033b6:	6822      	ldr	r2, [r4, #0]
 80033b8:	bf18      	it	ne
 80033ba:	2301      	movne	r3, #1
 80033bc:	0692      	lsls	r2, r2, #26
 80033be:	d42b      	bmi.n	8003418 <_printf_common+0xb0>
 80033c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033c4:	4649      	mov	r1, r9
 80033c6:	4638      	mov	r0, r7
 80033c8:	47c0      	blx	r8
 80033ca:	3001      	adds	r0, #1
 80033cc:	d01e      	beq.n	800340c <_printf_common+0xa4>
 80033ce:	6823      	ldr	r3, [r4, #0]
 80033d0:	6922      	ldr	r2, [r4, #16]
 80033d2:	f003 0306 	and.w	r3, r3, #6
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	bf02      	ittt	eq
 80033da:	68e5      	ldreq	r5, [r4, #12]
 80033dc:	6833      	ldreq	r3, [r6, #0]
 80033de:	1aed      	subeq	r5, r5, r3
 80033e0:	68a3      	ldr	r3, [r4, #8]
 80033e2:	bf0c      	ite	eq
 80033e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033e8:	2500      	movne	r5, #0
 80033ea:	4293      	cmp	r3, r2
 80033ec:	bfc4      	itt	gt
 80033ee:	1a9b      	subgt	r3, r3, r2
 80033f0:	18ed      	addgt	r5, r5, r3
 80033f2:	2600      	movs	r6, #0
 80033f4:	341a      	adds	r4, #26
 80033f6:	42b5      	cmp	r5, r6
 80033f8:	d11a      	bne.n	8003430 <_printf_common+0xc8>
 80033fa:	2000      	movs	r0, #0
 80033fc:	e008      	b.n	8003410 <_printf_common+0xa8>
 80033fe:	2301      	movs	r3, #1
 8003400:	4652      	mov	r2, sl
 8003402:	4649      	mov	r1, r9
 8003404:	4638      	mov	r0, r7
 8003406:	47c0      	blx	r8
 8003408:	3001      	adds	r0, #1
 800340a:	d103      	bne.n	8003414 <_printf_common+0xac>
 800340c:	f04f 30ff 	mov.w	r0, #4294967295
 8003410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003414:	3501      	adds	r5, #1
 8003416:	e7c6      	b.n	80033a6 <_printf_common+0x3e>
 8003418:	18e1      	adds	r1, r4, r3
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	2030      	movs	r0, #48	; 0x30
 800341e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003422:	4422      	add	r2, r4
 8003424:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003428:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800342c:	3302      	adds	r3, #2
 800342e:	e7c7      	b.n	80033c0 <_printf_common+0x58>
 8003430:	2301      	movs	r3, #1
 8003432:	4622      	mov	r2, r4
 8003434:	4649      	mov	r1, r9
 8003436:	4638      	mov	r0, r7
 8003438:	47c0      	blx	r8
 800343a:	3001      	adds	r0, #1
 800343c:	d0e6      	beq.n	800340c <_printf_common+0xa4>
 800343e:	3601      	adds	r6, #1
 8003440:	e7d9      	b.n	80033f6 <_printf_common+0x8e>
	...

08003444 <_printf_i>:
 8003444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003448:	7e0f      	ldrb	r7, [r1, #24]
 800344a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800344c:	2f78      	cmp	r7, #120	; 0x78
 800344e:	4691      	mov	r9, r2
 8003450:	4680      	mov	r8, r0
 8003452:	460c      	mov	r4, r1
 8003454:	469a      	mov	sl, r3
 8003456:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800345a:	d807      	bhi.n	800346c <_printf_i+0x28>
 800345c:	2f62      	cmp	r7, #98	; 0x62
 800345e:	d80a      	bhi.n	8003476 <_printf_i+0x32>
 8003460:	2f00      	cmp	r7, #0
 8003462:	f000 80d4 	beq.w	800360e <_printf_i+0x1ca>
 8003466:	2f58      	cmp	r7, #88	; 0x58
 8003468:	f000 80c0 	beq.w	80035ec <_printf_i+0x1a8>
 800346c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003470:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003474:	e03a      	b.n	80034ec <_printf_i+0xa8>
 8003476:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800347a:	2b15      	cmp	r3, #21
 800347c:	d8f6      	bhi.n	800346c <_printf_i+0x28>
 800347e:	a101      	add	r1, pc, #4	; (adr r1, 8003484 <_printf_i+0x40>)
 8003480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003484:	080034dd 	.word	0x080034dd
 8003488:	080034f1 	.word	0x080034f1
 800348c:	0800346d 	.word	0x0800346d
 8003490:	0800346d 	.word	0x0800346d
 8003494:	0800346d 	.word	0x0800346d
 8003498:	0800346d 	.word	0x0800346d
 800349c:	080034f1 	.word	0x080034f1
 80034a0:	0800346d 	.word	0x0800346d
 80034a4:	0800346d 	.word	0x0800346d
 80034a8:	0800346d 	.word	0x0800346d
 80034ac:	0800346d 	.word	0x0800346d
 80034b0:	080035f5 	.word	0x080035f5
 80034b4:	0800351d 	.word	0x0800351d
 80034b8:	080035af 	.word	0x080035af
 80034bc:	0800346d 	.word	0x0800346d
 80034c0:	0800346d 	.word	0x0800346d
 80034c4:	08003617 	.word	0x08003617
 80034c8:	0800346d 	.word	0x0800346d
 80034cc:	0800351d 	.word	0x0800351d
 80034d0:	0800346d 	.word	0x0800346d
 80034d4:	0800346d 	.word	0x0800346d
 80034d8:	080035b7 	.word	0x080035b7
 80034dc:	682b      	ldr	r3, [r5, #0]
 80034de:	1d1a      	adds	r2, r3, #4
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	602a      	str	r2, [r5, #0]
 80034e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034ec:	2301      	movs	r3, #1
 80034ee:	e09f      	b.n	8003630 <_printf_i+0x1ec>
 80034f0:	6820      	ldr	r0, [r4, #0]
 80034f2:	682b      	ldr	r3, [r5, #0]
 80034f4:	0607      	lsls	r7, r0, #24
 80034f6:	f103 0104 	add.w	r1, r3, #4
 80034fa:	6029      	str	r1, [r5, #0]
 80034fc:	d501      	bpl.n	8003502 <_printf_i+0xbe>
 80034fe:	681e      	ldr	r6, [r3, #0]
 8003500:	e003      	b.n	800350a <_printf_i+0xc6>
 8003502:	0646      	lsls	r6, r0, #25
 8003504:	d5fb      	bpl.n	80034fe <_printf_i+0xba>
 8003506:	f9b3 6000 	ldrsh.w	r6, [r3]
 800350a:	2e00      	cmp	r6, #0
 800350c:	da03      	bge.n	8003516 <_printf_i+0xd2>
 800350e:	232d      	movs	r3, #45	; 0x2d
 8003510:	4276      	negs	r6, r6
 8003512:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003516:	485a      	ldr	r0, [pc, #360]	; (8003680 <_printf_i+0x23c>)
 8003518:	230a      	movs	r3, #10
 800351a:	e012      	b.n	8003542 <_printf_i+0xfe>
 800351c:	682b      	ldr	r3, [r5, #0]
 800351e:	6820      	ldr	r0, [r4, #0]
 8003520:	1d19      	adds	r1, r3, #4
 8003522:	6029      	str	r1, [r5, #0]
 8003524:	0605      	lsls	r5, r0, #24
 8003526:	d501      	bpl.n	800352c <_printf_i+0xe8>
 8003528:	681e      	ldr	r6, [r3, #0]
 800352a:	e002      	b.n	8003532 <_printf_i+0xee>
 800352c:	0641      	lsls	r1, r0, #25
 800352e:	d5fb      	bpl.n	8003528 <_printf_i+0xe4>
 8003530:	881e      	ldrh	r6, [r3, #0]
 8003532:	4853      	ldr	r0, [pc, #332]	; (8003680 <_printf_i+0x23c>)
 8003534:	2f6f      	cmp	r7, #111	; 0x6f
 8003536:	bf0c      	ite	eq
 8003538:	2308      	moveq	r3, #8
 800353a:	230a      	movne	r3, #10
 800353c:	2100      	movs	r1, #0
 800353e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003542:	6865      	ldr	r5, [r4, #4]
 8003544:	60a5      	str	r5, [r4, #8]
 8003546:	2d00      	cmp	r5, #0
 8003548:	bfa2      	ittt	ge
 800354a:	6821      	ldrge	r1, [r4, #0]
 800354c:	f021 0104 	bicge.w	r1, r1, #4
 8003550:	6021      	strge	r1, [r4, #0]
 8003552:	b90e      	cbnz	r6, 8003558 <_printf_i+0x114>
 8003554:	2d00      	cmp	r5, #0
 8003556:	d04b      	beq.n	80035f0 <_printf_i+0x1ac>
 8003558:	4615      	mov	r5, r2
 800355a:	fbb6 f1f3 	udiv	r1, r6, r3
 800355e:	fb03 6711 	mls	r7, r3, r1, r6
 8003562:	5dc7      	ldrb	r7, [r0, r7]
 8003564:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003568:	4637      	mov	r7, r6
 800356a:	42bb      	cmp	r3, r7
 800356c:	460e      	mov	r6, r1
 800356e:	d9f4      	bls.n	800355a <_printf_i+0x116>
 8003570:	2b08      	cmp	r3, #8
 8003572:	d10b      	bne.n	800358c <_printf_i+0x148>
 8003574:	6823      	ldr	r3, [r4, #0]
 8003576:	07de      	lsls	r6, r3, #31
 8003578:	d508      	bpl.n	800358c <_printf_i+0x148>
 800357a:	6923      	ldr	r3, [r4, #16]
 800357c:	6861      	ldr	r1, [r4, #4]
 800357e:	4299      	cmp	r1, r3
 8003580:	bfde      	ittt	le
 8003582:	2330      	movle	r3, #48	; 0x30
 8003584:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003588:	f105 35ff 	addle.w	r5, r5, #4294967295
 800358c:	1b52      	subs	r2, r2, r5
 800358e:	6122      	str	r2, [r4, #16]
 8003590:	f8cd a000 	str.w	sl, [sp]
 8003594:	464b      	mov	r3, r9
 8003596:	aa03      	add	r2, sp, #12
 8003598:	4621      	mov	r1, r4
 800359a:	4640      	mov	r0, r8
 800359c:	f7ff fee4 	bl	8003368 <_printf_common>
 80035a0:	3001      	adds	r0, #1
 80035a2:	d14a      	bne.n	800363a <_printf_i+0x1f6>
 80035a4:	f04f 30ff 	mov.w	r0, #4294967295
 80035a8:	b004      	add	sp, #16
 80035aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	f043 0320 	orr.w	r3, r3, #32
 80035b4:	6023      	str	r3, [r4, #0]
 80035b6:	4833      	ldr	r0, [pc, #204]	; (8003684 <_printf_i+0x240>)
 80035b8:	2778      	movs	r7, #120	; 0x78
 80035ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80035be:	6823      	ldr	r3, [r4, #0]
 80035c0:	6829      	ldr	r1, [r5, #0]
 80035c2:	061f      	lsls	r7, r3, #24
 80035c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80035c8:	d402      	bmi.n	80035d0 <_printf_i+0x18c>
 80035ca:	065f      	lsls	r7, r3, #25
 80035cc:	bf48      	it	mi
 80035ce:	b2b6      	uxthmi	r6, r6
 80035d0:	07df      	lsls	r7, r3, #31
 80035d2:	bf48      	it	mi
 80035d4:	f043 0320 	orrmi.w	r3, r3, #32
 80035d8:	6029      	str	r1, [r5, #0]
 80035da:	bf48      	it	mi
 80035dc:	6023      	strmi	r3, [r4, #0]
 80035de:	b91e      	cbnz	r6, 80035e8 <_printf_i+0x1a4>
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	f023 0320 	bic.w	r3, r3, #32
 80035e6:	6023      	str	r3, [r4, #0]
 80035e8:	2310      	movs	r3, #16
 80035ea:	e7a7      	b.n	800353c <_printf_i+0xf8>
 80035ec:	4824      	ldr	r0, [pc, #144]	; (8003680 <_printf_i+0x23c>)
 80035ee:	e7e4      	b.n	80035ba <_printf_i+0x176>
 80035f0:	4615      	mov	r5, r2
 80035f2:	e7bd      	b.n	8003570 <_printf_i+0x12c>
 80035f4:	682b      	ldr	r3, [r5, #0]
 80035f6:	6826      	ldr	r6, [r4, #0]
 80035f8:	6961      	ldr	r1, [r4, #20]
 80035fa:	1d18      	adds	r0, r3, #4
 80035fc:	6028      	str	r0, [r5, #0]
 80035fe:	0635      	lsls	r5, r6, #24
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	d501      	bpl.n	8003608 <_printf_i+0x1c4>
 8003604:	6019      	str	r1, [r3, #0]
 8003606:	e002      	b.n	800360e <_printf_i+0x1ca>
 8003608:	0670      	lsls	r0, r6, #25
 800360a:	d5fb      	bpl.n	8003604 <_printf_i+0x1c0>
 800360c:	8019      	strh	r1, [r3, #0]
 800360e:	2300      	movs	r3, #0
 8003610:	6123      	str	r3, [r4, #16]
 8003612:	4615      	mov	r5, r2
 8003614:	e7bc      	b.n	8003590 <_printf_i+0x14c>
 8003616:	682b      	ldr	r3, [r5, #0]
 8003618:	1d1a      	adds	r2, r3, #4
 800361a:	602a      	str	r2, [r5, #0]
 800361c:	681d      	ldr	r5, [r3, #0]
 800361e:	6862      	ldr	r2, [r4, #4]
 8003620:	2100      	movs	r1, #0
 8003622:	4628      	mov	r0, r5
 8003624:	f7fc fdd4 	bl	80001d0 <memchr>
 8003628:	b108      	cbz	r0, 800362e <_printf_i+0x1ea>
 800362a:	1b40      	subs	r0, r0, r5
 800362c:	6060      	str	r0, [r4, #4]
 800362e:	6863      	ldr	r3, [r4, #4]
 8003630:	6123      	str	r3, [r4, #16]
 8003632:	2300      	movs	r3, #0
 8003634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003638:	e7aa      	b.n	8003590 <_printf_i+0x14c>
 800363a:	6923      	ldr	r3, [r4, #16]
 800363c:	462a      	mov	r2, r5
 800363e:	4649      	mov	r1, r9
 8003640:	4640      	mov	r0, r8
 8003642:	47d0      	blx	sl
 8003644:	3001      	adds	r0, #1
 8003646:	d0ad      	beq.n	80035a4 <_printf_i+0x160>
 8003648:	6823      	ldr	r3, [r4, #0]
 800364a:	079b      	lsls	r3, r3, #30
 800364c:	d413      	bmi.n	8003676 <_printf_i+0x232>
 800364e:	68e0      	ldr	r0, [r4, #12]
 8003650:	9b03      	ldr	r3, [sp, #12]
 8003652:	4298      	cmp	r0, r3
 8003654:	bfb8      	it	lt
 8003656:	4618      	movlt	r0, r3
 8003658:	e7a6      	b.n	80035a8 <_printf_i+0x164>
 800365a:	2301      	movs	r3, #1
 800365c:	4632      	mov	r2, r6
 800365e:	4649      	mov	r1, r9
 8003660:	4640      	mov	r0, r8
 8003662:	47d0      	blx	sl
 8003664:	3001      	adds	r0, #1
 8003666:	d09d      	beq.n	80035a4 <_printf_i+0x160>
 8003668:	3501      	adds	r5, #1
 800366a:	68e3      	ldr	r3, [r4, #12]
 800366c:	9903      	ldr	r1, [sp, #12]
 800366e:	1a5b      	subs	r3, r3, r1
 8003670:	42ab      	cmp	r3, r5
 8003672:	dcf2      	bgt.n	800365a <_printf_i+0x216>
 8003674:	e7eb      	b.n	800364e <_printf_i+0x20a>
 8003676:	2500      	movs	r5, #0
 8003678:	f104 0619 	add.w	r6, r4, #25
 800367c:	e7f5      	b.n	800366a <_printf_i+0x226>
 800367e:	bf00      	nop
 8003680:	080037d1 	.word	0x080037d1
 8003684:	080037e2 	.word	0x080037e2

08003688 <memmove>:
 8003688:	4288      	cmp	r0, r1
 800368a:	b510      	push	{r4, lr}
 800368c:	eb01 0402 	add.w	r4, r1, r2
 8003690:	d902      	bls.n	8003698 <memmove+0x10>
 8003692:	4284      	cmp	r4, r0
 8003694:	4623      	mov	r3, r4
 8003696:	d807      	bhi.n	80036a8 <memmove+0x20>
 8003698:	1e43      	subs	r3, r0, #1
 800369a:	42a1      	cmp	r1, r4
 800369c:	d008      	beq.n	80036b0 <memmove+0x28>
 800369e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80036a6:	e7f8      	b.n	800369a <memmove+0x12>
 80036a8:	4402      	add	r2, r0
 80036aa:	4601      	mov	r1, r0
 80036ac:	428a      	cmp	r2, r1
 80036ae:	d100      	bne.n	80036b2 <memmove+0x2a>
 80036b0:	bd10      	pop	{r4, pc}
 80036b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80036ba:	e7f7      	b.n	80036ac <memmove+0x24>

080036bc <_sbrk_r>:
 80036bc:	b538      	push	{r3, r4, r5, lr}
 80036be:	4d06      	ldr	r5, [pc, #24]	; (80036d8 <_sbrk_r+0x1c>)
 80036c0:	2300      	movs	r3, #0
 80036c2:	4604      	mov	r4, r0
 80036c4:	4608      	mov	r0, r1
 80036c6:	602b      	str	r3, [r5, #0]
 80036c8:	f7fd f9aa 	bl	8000a20 <_sbrk>
 80036cc:	1c43      	adds	r3, r0, #1
 80036ce:	d102      	bne.n	80036d6 <_sbrk_r+0x1a>
 80036d0:	682b      	ldr	r3, [r5, #0]
 80036d2:	b103      	cbz	r3, 80036d6 <_sbrk_r+0x1a>
 80036d4:	6023      	str	r3, [r4, #0]
 80036d6:	bd38      	pop	{r3, r4, r5, pc}
 80036d8:	200002c4 	.word	0x200002c4

080036dc <memcpy>:
 80036dc:	440a      	add	r2, r1
 80036de:	4291      	cmp	r1, r2
 80036e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80036e4:	d100      	bne.n	80036e8 <memcpy+0xc>
 80036e6:	4770      	bx	lr
 80036e8:	b510      	push	{r4, lr}
 80036ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036f2:	4291      	cmp	r1, r2
 80036f4:	d1f9      	bne.n	80036ea <memcpy+0xe>
 80036f6:	bd10      	pop	{r4, pc}

080036f8 <_realloc_r>:
 80036f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036fc:	4680      	mov	r8, r0
 80036fe:	4614      	mov	r4, r2
 8003700:	460e      	mov	r6, r1
 8003702:	b921      	cbnz	r1, 800370e <_realloc_r+0x16>
 8003704:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003708:	4611      	mov	r1, r2
 800370a:	f7ff bc49 	b.w	8002fa0 <_malloc_r>
 800370e:	b92a      	cbnz	r2, 800371c <_realloc_r+0x24>
 8003710:	f7ff fbda 	bl	8002ec8 <_free_r>
 8003714:	4625      	mov	r5, r4
 8003716:	4628      	mov	r0, r5
 8003718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800371c:	f000 f81b 	bl	8003756 <_malloc_usable_size_r>
 8003720:	4284      	cmp	r4, r0
 8003722:	4607      	mov	r7, r0
 8003724:	d802      	bhi.n	800372c <_realloc_r+0x34>
 8003726:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800372a:	d812      	bhi.n	8003752 <_realloc_r+0x5a>
 800372c:	4621      	mov	r1, r4
 800372e:	4640      	mov	r0, r8
 8003730:	f7ff fc36 	bl	8002fa0 <_malloc_r>
 8003734:	4605      	mov	r5, r0
 8003736:	2800      	cmp	r0, #0
 8003738:	d0ed      	beq.n	8003716 <_realloc_r+0x1e>
 800373a:	42bc      	cmp	r4, r7
 800373c:	4622      	mov	r2, r4
 800373e:	4631      	mov	r1, r6
 8003740:	bf28      	it	cs
 8003742:	463a      	movcs	r2, r7
 8003744:	f7ff ffca 	bl	80036dc <memcpy>
 8003748:	4631      	mov	r1, r6
 800374a:	4640      	mov	r0, r8
 800374c:	f7ff fbbc 	bl	8002ec8 <_free_r>
 8003750:	e7e1      	b.n	8003716 <_realloc_r+0x1e>
 8003752:	4635      	mov	r5, r6
 8003754:	e7df      	b.n	8003716 <_realloc_r+0x1e>

08003756 <_malloc_usable_size_r>:
 8003756:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800375a:	1f18      	subs	r0, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	bfbc      	itt	lt
 8003760:	580b      	ldrlt	r3, [r1, r0]
 8003762:	18c0      	addlt	r0, r0, r3
 8003764:	4770      	bx	lr
	...

08003768 <_init>:
 8003768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376a:	bf00      	nop
 800376c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800376e:	bc08      	pop	{r3}
 8003770:	469e      	mov	lr, r3
 8003772:	4770      	bx	lr

08003774 <_fini>:
 8003774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003776:	bf00      	nop
 8003778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377a:	bc08      	pop	{r3}
 800377c:	469e      	mov	lr, r3
 800377e:	4770      	bx	lr
