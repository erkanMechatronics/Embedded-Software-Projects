
HAL_UART_005.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d50  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08008ed8  08008ed8  00018ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008efc  08008efc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008efc  08008efc  00018efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f04  08008f04  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f04  08008f04  00018f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f08  08008f08  00018f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          0000084c  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008dc  200008dc  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019fa1  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c98  00000000  00000000  0003a061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c0  00000000  00000000  0003dd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001260  00000000  00000000  0003f0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e41  00000000  00000000  00040320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001af2c  00000000  00000000  00064161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdd34  00000000  00000000  0007f08d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014cdc1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054bc  00000000  00000000  0014ce14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008ec0 	.word	0x08008ec0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008ec0 	.word	0x08008ec0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fc88 	bl	8000de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f822 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f948 	bl	800076c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f888 	bl	80005f0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8b4 	bl	800064c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f8e2 	bl	80006ac <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e8:	f008 f8a2 	bl	8008630 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f914 	bl	8000718 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f0:	f008 f8c4 	bl	800867c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if(HAL_UART_Transmit(&huart2,"Test ",6 , 100) != HAL_OK)
 80004f4:	2364      	movs	r3, #100	; 0x64
 80004f6:	2206      	movs	r2, #6
 80004f8:	4906      	ldr	r1, [pc, #24]	; (8000514 <main+0x48>)
 80004fa:	4807      	ldr	r0, [pc, #28]	; (8000518 <main+0x4c>)
 80004fc:	f004 f8fe 	bl	80046fc <HAL_UART_Transmit>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <main+0x3e>
    {
    	  Error_Handler();
 8000506:	f000 fa2f 	bl	8000968 <Error_Handler>
    }
    HAL_Delay(500);
 800050a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800050e:	f000 fcdb 	bl	8000ec8 <HAL_Delay>
    MX_USB_HOST_Process();
 8000512:	e7ed      	b.n	80004f0 <main+0x24>
 8000514:	08008ed8 	.word	0x08008ed8
 8000518:	200001a0 	.word	0x200001a0

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f008 fbc2 	bl	8008cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a27      	ldr	r2, [pc, #156]	; (80005e8 <SystemClock_Config+0xcc>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <SystemClock_Config+0xd0>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000578:	2301      	movs	r3, #1
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800058c:	2308      	movs	r3, #8
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000590:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000594:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059a:	2307      	movs	r3, #7
 800059c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 f9fc 	bl	80039a0 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ae:	f000 f9db 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2302      	movs	r3, #2
 80005b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80005be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2105      	movs	r1, #5
 80005d0:	4618      	mov	r0, r3
 80005d2:	f003 fc5d 	bl	8003e90 <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005dc:	f000 f9c4 	bl	8000968 <Error_Handler>
  }
}
 80005e0:	bf00      	nop
 80005e2:	3750      	adds	r7, #80	; 0x50
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_I2C1_Init+0x50>)
 80005f6:	4a13      	ldr	r2, [pc, #76]	; (8000644 <MX_I2C1_Init+0x54>)
 80005f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_I2C1_Init+0x50>)
 80005fc:	4a12      	ldr	r2, [pc, #72]	; (8000648 <MX_I2C1_Init+0x58>)
 80005fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_I2C1_Init+0x50>)
 800060e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000612:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_I2C1_Init+0x50>)
 800062e:	f002 fbd3 	bl	8002dd8 <HAL_I2C_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000638:	f000 f996 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200000ac 	.word	0x200000ac
 8000644:	40005400 	.word	0x40005400
 8000648:	000186a0 	.word	0x000186a0

0800064c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000652:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <MX_I2S3_Init+0x58>)
 8000654:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800065c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <MX_I2S3_Init+0x54>)
 800066c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000670:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000674:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <MX_I2S3_Init+0x5c>)
 8000676:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_I2S3_Init+0x54>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_I2S3_Init+0x54>)
 800068c:	f002 fce8 	bl	8003060 <HAL_I2S_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000696:	f000 f967 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000100 	.word	0x20000100
 80006a4:	40003c00 	.word	0x40003c00
 80006a8:	00017700 	.word	0x00017700

080006ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_SPI1_Init+0x64>)
 80006b2:	4a18      	ldr	r2, [pc, #96]	; (8000714 <MX_SPI1_Init+0x68>)
 80006b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <MX_SPI1_Init+0x64>)
 80006b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_SPI1_Init+0x64>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_SPI1_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_SPI1_Init+0x64>)
 80006d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_SPI1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <MX_SPI1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_SPI1_Init+0x64>)
 80006f8:	220a      	movs	r2, #10
 80006fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_SPI1_Init+0x64>)
 80006fe:	f003 ff27 	bl	8004550 <HAL_SPI_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000708:	f000 f92e 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000148 	.word	0x20000148
 8000714:	40013000 	.word	0x40013000

08000718 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800071e:	4a12      	ldr	r2, [pc, #72]	; (8000768 <MX_USART2_UART_Init+0x50>)
 8000720:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000728:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000738:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800073c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000740:	220c      	movs	r2, #12
 8000742:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000752:	f003 ff86 	bl	8004662 <HAL_UART_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 800075c:	f000 f904 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200001a0 	.word	0x200001a0
 8000768:	40004400 	.word	0x40004400

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08c      	sub	sp, #48	; 0x30
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
 8000786:	4b72      	ldr	r3, [pc, #456]	; (8000950 <MX_GPIO_Init+0x1e4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a71      	ldr	r2, [pc, #452]	; (8000950 <MX_GPIO_Init+0x1e4>)
 800078c:	f043 0310 	orr.w	r3, r3, #16
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b6f      	ldr	r3, [pc, #444]	; (8000950 <MX_GPIO_Init+0x1e4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0310 	and.w	r3, r3, #16
 800079a:	61bb      	str	r3, [r7, #24]
 800079c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	4b6b      	ldr	r3, [pc, #428]	; (8000950 <MX_GPIO_Init+0x1e4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a6a      	ldr	r2, [pc, #424]	; (8000950 <MX_GPIO_Init+0x1e4>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b68      	ldr	r3, [pc, #416]	; (8000950 <MX_GPIO_Init+0x1e4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b64      	ldr	r3, [pc, #400]	; (8000950 <MX_GPIO_Init+0x1e4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a63      	ldr	r2, [pc, #396]	; (8000950 <MX_GPIO_Init+0x1e4>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b61      	ldr	r3, [pc, #388]	; (8000950 <MX_GPIO_Init+0x1e4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	4b5d      	ldr	r3, [pc, #372]	; (8000950 <MX_GPIO_Init+0x1e4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a5c      	ldr	r2, [pc, #368]	; (8000950 <MX_GPIO_Init+0x1e4>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b5a      	ldr	r3, [pc, #360]	; (8000950 <MX_GPIO_Init+0x1e4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b56      	ldr	r3, [pc, #344]	; (8000950 <MX_GPIO_Init+0x1e4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a55      	ldr	r2, [pc, #340]	; (8000950 <MX_GPIO_Init+0x1e4>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b53      	ldr	r3, [pc, #332]	; (8000950 <MX_GPIO_Init+0x1e4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b4f      	ldr	r3, [pc, #316]	; (8000950 <MX_GPIO_Init+0x1e4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a4e      	ldr	r2, [pc, #312]	; (8000950 <MX_GPIO_Init+0x1e4>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b4c      	ldr	r3, [pc, #304]	; (8000950 <MX_GPIO_Init+0x1e4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2108      	movs	r1, #8
 800082e:	4849      	ldr	r0, [pc, #292]	; (8000954 <MX_GPIO_Init+0x1e8>)
 8000830:	f000 feae 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	2101      	movs	r1, #1
 8000838:	4847      	ldr	r0, [pc, #284]	; (8000958 <MX_GPIO_Init+0x1ec>)
 800083a:	f000 fea9 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800083e:	2200      	movs	r2, #0
 8000840:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000844:	4845      	ldr	r0, [pc, #276]	; (800095c <MX_GPIO_Init+0x1f0>)
 8000846:	f000 fea3 	bl	8001590 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800084a:	2308      	movs	r3, #8
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	483c      	ldr	r0, [pc, #240]	; (8000954 <MX_GPIO_Init+0x1e8>)
 8000862:	f000 fcf9 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000866:	2301      	movs	r3, #1
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4836      	ldr	r0, [pc, #216]	; (8000958 <MX_GPIO_Init+0x1ec>)
 800087e:	f000 fceb 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000882:	2308      	movs	r3, #8
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000892:	2305      	movs	r3, #5
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	482e      	ldr	r0, [pc, #184]	; (8000958 <MX_GPIO_Init+0x1ec>)
 800089e:	f000 fcdb 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a2:	2301      	movs	r3, #1
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008a6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	482a      	ldr	r0, [pc, #168]	; (8000960 <MX_GPIO_Init+0x1f4>)
 80008b8:	f000 fcce 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008bc:	2304      	movs	r3, #4
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4825      	ldr	r0, [pc, #148]	; (8000964 <MX_GPIO_Init+0x1f8>)
 80008d0:	f000 fcc2 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e6:	2305      	movs	r3, #5
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	481c      	ldr	r0, [pc, #112]	; (8000964 <MX_GPIO_Init+0x1f8>)
 80008f2:	f000 fcb1 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008f6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008fa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4813      	ldr	r0, [pc, #76]	; (800095c <MX_GPIO_Init+0x1f0>)
 8000910:	f000 fca2 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000914:	2320      	movs	r3, #32
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	480d      	ldr	r0, [pc, #52]	; (800095c <MX_GPIO_Init+0x1f0>)
 8000928:	f000 fc96 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800092c:	2302      	movs	r3, #2
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000930:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_GPIO_Init+0x1e8>)
 8000942:	f000 fc89 	bl	8001258 <HAL_GPIO_Init>

}
 8000946:	bf00      	nop
 8000948:	3730      	adds	r7, #48	; 0x30
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40021000 	.word	0x40021000
 8000958:	40020800 	.word	0x40020800
 800095c:	40020c00 	.word	0x40020c00
 8000960:	40020000 	.word	0x40020000
 8000964:	40020400 	.word	0x40020400

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <HAL_MspInit+0x4c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	4a0f      	ldr	r2, [pc, #60]	; (80009c0 <HAL_MspInit+0x4c>)
 8000984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000988:	6453      	str	r3, [r2, #68]	; 0x44
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <HAL_MspInit+0x4c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <HAL_MspInit+0x4c>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009b2:	2007      	movs	r0, #7
 80009b4:	f000 fb7c 	bl	80010b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800

080009c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a19      	ldr	r2, [pc, #100]	; (8000a48 <HAL_I2C_MspInit+0x84>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d12c      	bne.n	8000a40 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_I2C_MspInit+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <HAL_I2C_MspInit+0x88>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <HAL_I2C_MspInit+0x88>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a02:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a08:	2312      	movs	r3, #18
 8000a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a14:	2304      	movs	r3, #4
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480c      	ldr	r0, [pc, #48]	; (8000a50 <HAL_I2C_MspInit+0x8c>)
 8000a20:	f000 fc1a 	bl	8001258 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HAL_I2C_MspInit+0x88>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <HAL_I2C_MspInit+0x88>)
 8000a2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a32:	6413      	str	r3, [r2, #64]	; 0x40
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <HAL_I2C_MspInit+0x88>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a40:	bf00      	nop
 8000a42:	3728      	adds	r7, #40	; 0x28
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40005400 	.word	0x40005400
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020400 	.word	0x40020400

08000a54 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08e      	sub	sp, #56	; 0x38
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a31      	ldr	r2, [pc, #196]	; (8000b44 <HAL_I2S_MspInit+0xf0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d15a      	bne.n	8000b3a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a84:	2301      	movs	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a88:	23c0      	movs	r3, #192	; 0xc0
 8000a8a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4618      	mov	r0, r3
 8000a96:	f003 fc1b 	bl	80042d0 <HAL_RCCEx_PeriphCLKConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000aa0:	f7ff ff62 	bl	8000968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <HAL_I2S_MspInit+0xf4>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	4a26      	ldr	r2, [pc, #152]	; (8000b48 <HAL_I2S_MspInit+0xf4>)
 8000aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab4:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <HAL_I2S_MspInit+0xf4>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <HAL_I2S_MspInit+0xf4>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac8:	4a1f      	ldr	r2, [pc, #124]	; (8000b48 <HAL_I2S_MspInit+0xf4>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <HAL_I2S_MspInit+0xf4>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <HAL_I2S_MspInit+0xf4>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae4:	4a18      	ldr	r2, [pc, #96]	; (8000b48 <HAL_I2S_MspInit+0xf4>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	6313      	str	r3, [r2, #48]	; 0x30
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <HAL_I2S_MspInit+0xf4>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000af8:	2310      	movs	r3, #16
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b08:	2306      	movs	r3, #6
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b10:	4619      	mov	r1, r3
 8000b12:	480e      	ldr	r0, [pc, #56]	; (8000b4c <HAL_I2S_MspInit+0xf8>)
 8000b14:	f000 fba0 	bl	8001258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b18:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b2a:	2306      	movs	r3, #6
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4619      	mov	r1, r3
 8000b34:	4806      	ldr	r0, [pc, #24]	; (8000b50 <HAL_I2S_MspInit+0xfc>)
 8000b36:	f000 fb8f 	bl	8001258 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3738      	adds	r7, #56	; 0x38
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40003c00 	.word	0x40003c00
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020000 	.word	0x40020000
 8000b50:	40020800 	.word	0x40020800

08000b54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a19      	ldr	r2, [pc, #100]	; (8000bd8 <HAL_SPI_MspInit+0x84>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d12b      	bne.n	8000bce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	4a17      	ldr	r2, [pc, #92]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b84:	6453      	str	r3, [r2, #68]	; 0x44
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a10      	ldr	r2, [pc, #64]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bae:	23e0      	movs	r3, #224	; 0xe0
 8000bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	; (8000be0 <HAL_SPI_MspInit+0x8c>)
 8000bca:	f000 fb45 	bl	8001258 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	; 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40013000 	.word	0x40013000
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a1d      	ldr	r2, [pc, #116]	; (8000c78 <HAL_UART_MspInit+0x94>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d133      	bne.n	8000c6e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <HAL_UART_MspInit+0x98>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	4a1b      	ldr	r2, [pc, #108]	; (8000c7c <HAL_UART_MspInit+0x98>)
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c14:	6413      	str	r3, [r2, #64]	; 0x40
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <HAL_UART_MspInit+0x98>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <HAL_UART_MspInit+0x98>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <HAL_UART_MspInit+0x98>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_UART_MspInit+0x98>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c3e:	230c      	movs	r3, #12
 8000c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c4e:	2307      	movs	r3, #7
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	4809      	ldr	r0, [pc, #36]	; (8000c80 <HAL_UART_MspInit+0x9c>)
 8000c5a:	f000 fafd 	bl	8001258 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	2026      	movs	r0, #38	; 0x26
 8000c64:	f000 fa2f 	bl	80010c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c68:	2026      	movs	r0, #38	; 0x26
 8000c6a:	f000 fa48 	bl	80010fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c6e:	bf00      	nop
 8000c70:	3728      	adds	r7, #40	; 0x28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40004400 	.word	0x40004400
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020000 	.word	0x40020000

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <NMI_Handler+0x4>

08000c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <MemManage_Handler+0x4>

08000c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd0:	f000 f8da 	bl	8000e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <USART2_IRQHandler+0x10>)
 8000cde:	f003 fd9f 	bl	8004820 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200001a0 	.word	0x200001a0

08000cec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <OTG_FS_IRQHandler+0x10>)
 8000cf2:	f000 fed1 	bl	8001a98 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200005c8 	.word	0x200005c8

08000d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d08:	4a14      	ldr	r2, [pc, #80]	; (8000d5c <_sbrk+0x5c>)
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <_sbrk+0x60>)
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d102      	bne.n	8000d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <_sbrk+0x64>)
 8000d1e:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <_sbrk+0x68>)
 8000d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d207      	bcs.n	8000d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d30:	f007 ff86 	bl	8008c40 <__errno>
 8000d34:	4603      	mov	r3, r0
 8000d36:	220c      	movs	r2, #12
 8000d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	e009      	b.n	8000d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d46:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	4a05      	ldr	r2, [pc, #20]	; (8000d64 <_sbrk+0x64>)
 8000d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d52:	68fb      	ldr	r3, [r7, #12]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20020000 	.word	0x20020000
 8000d60:	00000400 	.word	0x00000400
 8000d64:	200001e4 	.word	0x200001e4
 8000d68:	200008e0 	.word	0x200008e0

08000d6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <SystemInit+0x20>)
 8000d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <SystemInit+0x20>)
 8000d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d94:	480d      	ldr	r0, [pc, #52]	; (8000dcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d96:	490e      	ldr	r1, [pc, #56]	; (8000dd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d98:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a0b      	ldr	r2, [pc, #44]	; (8000dd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dac:	4c0b      	ldr	r4, [pc, #44]	; (8000ddc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dba:	f7ff ffd7 	bl	8000d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dbe:	f007 ff45 	bl	8008c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc2:	f7ff fb83 	bl	80004cc <main>
  bx  lr    
 8000dc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000dd4:	08008f0c 	.word	0x08008f0c
  ldr r2, =_sbss
 8000dd8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000ddc:	200008dc 	.word	0x200008dc

08000de0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de0:	e7fe      	b.n	8000de0 <ADC_IRQHandler>
	...

08000de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de8:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0d      	ldr	r2, [pc, #52]	; (8000e24 <HAL_Init+0x40>)
 8000dee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df4:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <HAL_Init+0x40>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <HAL_Init+0x40>)
 8000dfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <HAL_Init+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <HAL_Init+0x40>)
 8000e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f000 f94f 	bl	80010b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e12:	2000      	movs	r0, #0
 8000e14:	f000 f808 	bl	8000e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e18:	f7ff fdac 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40023c00 	.word	0x40023c00

08000e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x54>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_InitTick+0x58>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 f967 	bl	800111a <HAL_SYSTICK_Config>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e00e      	b.n	8000e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b0f      	cmp	r3, #15
 8000e5a:	d80a      	bhi.n	8000e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295
 8000e64:	f000 f92f 	bl	80010c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e68:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <HAL_InitTick+0x5c>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e000      	b.n	8000e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	20000008 	.word	0x20000008
 8000e84:	20000004 	.word	0x20000004

08000e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x20>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x24>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4413      	add	r3, r2
 8000e98:	4a04      	ldr	r2, [pc, #16]	; (8000eac <HAL_IncTick+0x24>)
 8000e9a:	6013      	str	r3, [r2, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	200001e8 	.word	0x200001e8

08000eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <HAL_GetTick+0x14>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	200001e8 	.word	0x200001e8

08000ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed0:	f7ff ffee 	bl	8000eb0 <HAL_GetTick>
 8000ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee0:	d005      	beq.n	8000eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <HAL_Delay+0x44>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4413      	add	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eee:	bf00      	nop
 8000ef0:	f7ff ffde 	bl	8000eb0 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d8f7      	bhi.n	8000ef0 <HAL_Delay+0x28>
  {
  }
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000008 	.word	0x20000008

08000f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f42:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	60d3      	str	r3, [r2, #12]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <__NVIC_GetPriorityGrouping+0x18>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	f003 0307 	and.w	r3, r3, #7
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	db0b      	blt.n	8000f9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	f003 021f 	and.w	r2, r3, #31
 8000f8c:	4907      	ldr	r1, [pc, #28]	; (8000fac <__NVIC_EnableIRQ+0x38>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	095b      	lsrs	r3, r3, #5
 8000f94:	2001      	movs	r0, #1
 8000f96:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000e100 	.word	0xe000e100

08000fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	db0a      	blt.n	8000fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	490c      	ldr	r1, [pc, #48]	; (8000ffc <__NVIC_SetPriority+0x4c>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	0112      	lsls	r2, r2, #4
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd8:	e00a      	b.n	8000ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4908      	ldr	r1, [pc, #32]	; (8001000 <__NVIC_SetPriority+0x50>)
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	f003 030f 	and.w	r3, r3, #15
 8000fe6:	3b04      	subs	r3, #4
 8000fe8:	0112      	lsls	r2, r2, #4
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	440b      	add	r3, r1
 8000fee:	761a      	strb	r2, [r3, #24]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000e100 	.word	0xe000e100
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f1c3 0307 	rsb	r3, r3, #7
 800101e:	2b04      	cmp	r3, #4
 8001020:	bf28      	it	cs
 8001022:	2304      	movcs	r3, #4
 8001024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3304      	adds	r3, #4
 800102a:	2b06      	cmp	r3, #6
 800102c:	d902      	bls.n	8001034 <NVIC_EncodePriority+0x30>
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3b03      	subs	r3, #3
 8001032:	e000      	b.n	8001036 <NVIC_EncodePriority+0x32>
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	f04f 32ff 	mov.w	r2, #4294967295
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43da      	mvns	r2, r3
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	401a      	ands	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800104c:	f04f 31ff 	mov.w	r1, #4294967295
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	fa01 f303 	lsl.w	r3, r1, r3
 8001056:	43d9      	mvns	r1, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	4313      	orrs	r3, r2
         );
}
 800105e:	4618      	mov	r0, r3
 8001060:	3724      	adds	r7, #36	; 0x24
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800107c:	d301      	bcc.n	8001082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107e:	2301      	movs	r3, #1
 8001080:	e00f      	b.n	80010a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001082:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <SysTick_Config+0x40>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108a:	210f      	movs	r1, #15
 800108c:	f04f 30ff 	mov.w	r0, #4294967295
 8001090:	f7ff ff8e 	bl	8000fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <SysTick_Config+0x40>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <SysTick_Config+0x40>)
 800109c:	2207      	movs	r2, #7
 800109e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	e000e010 	.word	0xe000e010

080010b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff ff29 	bl	8000f10 <__NVIC_SetPriorityGrouping>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b086      	sub	sp, #24
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	4603      	mov	r3, r0
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d8:	f7ff ff3e 	bl	8000f58 <__NVIC_GetPriorityGrouping>
 80010dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	68b9      	ldr	r1, [r7, #8]
 80010e2:	6978      	ldr	r0, [r7, #20]
 80010e4:	f7ff ff8e 	bl	8001004 <NVIC_EncodePriority>
 80010e8:	4602      	mov	r2, r0
 80010ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ee:	4611      	mov	r1, r2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ff5d 	bl	8000fb0 <__NVIC_SetPriority>
}
 80010f6:	bf00      	nop
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff31 	bl	8000f74 <__NVIC_EnableIRQ>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff ffa2 	bl	800106c <SysTick_Config>
 8001128:	4603      	mov	r3, r0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b084      	sub	sp, #16
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001140:	f7ff feb6 	bl	8000eb0 <HAL_GetTick>
 8001144:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d008      	beq.n	8001164 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2280      	movs	r2, #128	; 0x80
 8001156:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e052      	b.n	800120a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0216 	bic.w	r2, r2, #22
 8001172:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	695a      	ldr	r2, [r3, #20]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001182:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	2b00      	cmp	r3, #0
 800118a:	d103      	bne.n	8001194 <HAL_DMA_Abort+0x62>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001190:	2b00      	cmp	r3, #0
 8001192:	d007      	beq.n	80011a4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0208 	bic.w	r2, r2, #8
 80011a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 0201 	bic.w	r2, r2, #1
 80011b2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011b4:	e013      	b.n	80011de <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011b6:	f7ff fe7b 	bl	8000eb0 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b05      	cmp	r3, #5
 80011c2:	d90c      	bls.n	80011de <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2220      	movs	r2, #32
 80011c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2203      	movs	r2, #3
 80011ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e015      	b.n	800120a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1e4      	bne.n	80011b6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f0:	223f      	movs	r2, #63	; 0x3f
 80011f2:	409a      	lsls	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d004      	beq.n	8001230 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2280      	movs	r2, #128	; 0x80
 800122a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e00c      	b.n	800124a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2205      	movs	r2, #5
 8001234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0201 	bic.w	r2, r2, #1
 8001246:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	; 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800126a:	2300      	movs	r3, #0
 800126c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
 8001272:	e16b      	b.n	800154c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001274:	2201      	movs	r2, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	429a      	cmp	r2, r3
 800128e:	f040 815a 	bne.w	8001546 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	2b01      	cmp	r3, #1
 800129c:	d005      	beq.n	80012aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d130      	bne.n	800130c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	2203      	movs	r2, #3
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	68da      	ldr	r2, [r3, #12]
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012e0:	2201      	movs	r2, #1
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	f003 0201 	and.w	r2, r3, #1
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	2b03      	cmp	r3, #3
 8001316:	d017      	beq.n	8001348 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	2203      	movs	r2, #3
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d123      	bne.n	800139c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	08da      	lsrs	r2, r3, #3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3208      	adds	r2, #8
 800135c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	220f      	movs	r2, #15
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	691a      	ldr	r2, [r3, #16]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	08da      	lsrs	r2, r3, #3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3208      	adds	r2, #8
 8001396:	69b9      	ldr	r1, [r7, #24]
 8001398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0203 	and.w	r2, r3, #3
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 80b4 	beq.w	8001546 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b60      	ldr	r3, [pc, #384]	; (8001564 <HAL_GPIO_Init+0x30c>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	4a5f      	ldr	r2, [pc, #380]	; (8001564 <HAL_GPIO_Init+0x30c>)
 80013e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ec:	6453      	str	r3, [r2, #68]	; 0x44
 80013ee:	4b5d      	ldr	r3, [pc, #372]	; (8001564 <HAL_GPIO_Init+0x30c>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013fa:	4a5b      	ldr	r2, [pc, #364]	; (8001568 <HAL_GPIO_Init+0x310>)
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	089b      	lsrs	r3, r3, #2
 8001400:	3302      	adds	r3, #2
 8001402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	220f      	movs	r2, #15
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a52      	ldr	r2, [pc, #328]	; (800156c <HAL_GPIO_Init+0x314>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d02b      	beq.n	800147e <HAL_GPIO_Init+0x226>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a51      	ldr	r2, [pc, #324]	; (8001570 <HAL_GPIO_Init+0x318>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d025      	beq.n	800147a <HAL_GPIO_Init+0x222>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a50      	ldr	r2, [pc, #320]	; (8001574 <HAL_GPIO_Init+0x31c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d01f      	beq.n	8001476 <HAL_GPIO_Init+0x21e>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4f      	ldr	r2, [pc, #316]	; (8001578 <HAL_GPIO_Init+0x320>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d019      	beq.n	8001472 <HAL_GPIO_Init+0x21a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4e      	ldr	r2, [pc, #312]	; (800157c <HAL_GPIO_Init+0x324>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d013      	beq.n	800146e <HAL_GPIO_Init+0x216>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4d      	ldr	r2, [pc, #308]	; (8001580 <HAL_GPIO_Init+0x328>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d00d      	beq.n	800146a <HAL_GPIO_Init+0x212>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a4c      	ldr	r2, [pc, #304]	; (8001584 <HAL_GPIO_Init+0x32c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d007      	beq.n	8001466 <HAL_GPIO_Init+0x20e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a4b      	ldr	r2, [pc, #300]	; (8001588 <HAL_GPIO_Init+0x330>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d101      	bne.n	8001462 <HAL_GPIO_Init+0x20a>
 800145e:	2307      	movs	r3, #7
 8001460:	e00e      	b.n	8001480 <HAL_GPIO_Init+0x228>
 8001462:	2308      	movs	r3, #8
 8001464:	e00c      	b.n	8001480 <HAL_GPIO_Init+0x228>
 8001466:	2306      	movs	r3, #6
 8001468:	e00a      	b.n	8001480 <HAL_GPIO_Init+0x228>
 800146a:	2305      	movs	r3, #5
 800146c:	e008      	b.n	8001480 <HAL_GPIO_Init+0x228>
 800146e:	2304      	movs	r3, #4
 8001470:	e006      	b.n	8001480 <HAL_GPIO_Init+0x228>
 8001472:	2303      	movs	r3, #3
 8001474:	e004      	b.n	8001480 <HAL_GPIO_Init+0x228>
 8001476:	2302      	movs	r3, #2
 8001478:	e002      	b.n	8001480 <HAL_GPIO_Init+0x228>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <HAL_GPIO_Init+0x228>
 800147e:	2300      	movs	r3, #0
 8001480:	69fa      	ldr	r2, [r7, #28]
 8001482:	f002 0203 	and.w	r2, r2, #3
 8001486:	0092      	lsls	r2, r2, #2
 8001488:	4093      	lsls	r3, r2
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001490:	4935      	ldr	r1, [pc, #212]	; (8001568 <HAL_GPIO_Init+0x310>)
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	089b      	lsrs	r3, r3, #2
 8001496:	3302      	adds	r3, #2
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <HAL_GPIO_Init+0x334>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014c2:	4a32      	ldr	r2, [pc, #200]	; (800158c <HAL_GPIO_Init+0x334>)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014c8:	4b30      	ldr	r3, [pc, #192]	; (800158c <HAL_GPIO_Init+0x334>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014ec:	4a27      	ldr	r2, [pc, #156]	; (800158c <HAL_GPIO_Init+0x334>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014f2:	4b26      	ldr	r3, [pc, #152]	; (800158c <HAL_GPIO_Init+0x334>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001516:	4a1d      	ldr	r2, [pc, #116]	; (800158c <HAL_GPIO_Init+0x334>)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_GPIO_Init+0x334>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001540:	4a12      	ldr	r2, [pc, #72]	; (800158c <HAL_GPIO_Init+0x334>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3301      	adds	r3, #1
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	2b0f      	cmp	r3, #15
 8001550:	f67f ae90 	bls.w	8001274 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3724      	adds	r7, #36	; 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800
 8001568:	40013800 	.word	0x40013800
 800156c:	40020000 	.word	0x40020000
 8001570:	40020400 	.word	0x40020400
 8001574:	40020800 	.word	0x40020800
 8001578:	40020c00 	.word	0x40020c00
 800157c:	40021000 	.word	0x40021000
 8001580:	40021400 	.word	0x40021400
 8001584:	40021800 	.word	0x40021800
 8001588:	40021c00 	.word	0x40021c00
 800158c:	40013c00 	.word	0x40013c00

08001590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
 800159c:	4613      	mov	r3, r2
 800159e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a0:	787b      	ldrb	r3, [r7, #1]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015ac:	e003      	b.n	80015b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ae:	887b      	ldrh	r3, [r7, #2]
 80015b0:	041a      	lsls	r2, r3, #16
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	619a      	str	r2, [r3, #24]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c4:	b08f      	sub	sp, #60	; 0x3c
 80015c6:	af0a      	add	r7, sp, #40	; 0x28
 80015c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e054      	b.n	800167e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d106      	bne.n	80015f4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f007 f87c 	bl	80086ec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2203      	movs	r2, #3
 80015f8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001604:	2b00      	cmp	r3, #0
 8001606:	d102      	bne.n	800160e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f004 f8aa 	bl	800576c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	603b      	str	r3, [r7, #0]
 800161e:	687e      	ldr	r6, [r7, #4]
 8001620:	466d      	mov	r5, sp
 8001622:	f106 0410 	add.w	r4, r6, #16
 8001626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800162a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800162c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800162e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001632:	e885 0003 	stmia.w	r5, {r0, r1}
 8001636:	1d33      	adds	r3, r6, #4
 8001638:	cb0e      	ldmia	r3, {r1, r2, r3}
 800163a:	6838      	ldr	r0, [r7, #0]
 800163c:	f004 f824 	bl	8005688 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2101      	movs	r1, #1
 8001646:	4618      	mov	r0, r3
 8001648:	f004 f8a1 	bl	800578e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	687e      	ldr	r6, [r7, #4]
 8001654:	466d      	mov	r5, sp
 8001656:	f106 0410 	add.w	r4, r6, #16
 800165a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800165c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800165e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001662:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001666:	e885 0003 	stmia.w	r5, {r0, r1}
 800166a:	1d33      	adds	r3, r6, #4
 800166c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800166e:	6838      	ldr	r0, [r7, #0]
 8001670:	f004 fa2a 	bl	8005ac8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001686 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001686:	b590      	push	{r4, r7, lr}
 8001688:	b089      	sub	sp, #36	; 0x24
 800168a:	af04      	add	r7, sp, #16
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	4608      	mov	r0, r1
 8001690:	4611      	mov	r1, r2
 8001692:	461a      	mov	r2, r3
 8001694:	4603      	mov	r3, r0
 8001696:	70fb      	strb	r3, [r7, #3]
 8001698:	460b      	mov	r3, r1
 800169a:	70bb      	strb	r3, [r7, #2]
 800169c:	4613      	mov	r3, r2
 800169e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d101      	bne.n	80016ae <HAL_HCD_HC_Init+0x28>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e076      	b.n	800179c <HAL_HCD_HC_Init+0x116>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80016b6:	78fb      	ldrb	r3, [r7, #3]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	212c      	movs	r1, #44	; 0x2c
 80016bc:	fb01 f303 	mul.w	r3, r1, r3
 80016c0:	4413      	add	r3, r2
 80016c2:	333d      	adds	r3, #61	; 0x3d
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80016c8:	78fb      	ldrb	r3, [r7, #3]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	212c      	movs	r1, #44	; 0x2c
 80016ce:	fb01 f303 	mul.w	r3, r1, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	3338      	adds	r3, #56	; 0x38
 80016d6:	787a      	ldrb	r2, [r7, #1]
 80016d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	212c      	movs	r1, #44	; 0x2c
 80016e0:	fb01 f303 	mul.w	r3, r1, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	3340      	adds	r3, #64	; 0x40
 80016e8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016ea:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	212c      	movs	r1, #44	; 0x2c
 80016f2:	fb01 f303 	mul.w	r3, r1, r3
 80016f6:	4413      	add	r3, r2
 80016f8:	3339      	adds	r3, #57	; 0x39
 80016fa:	78fa      	ldrb	r2, [r7, #3]
 80016fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80016fe:	78fb      	ldrb	r3, [r7, #3]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	212c      	movs	r1, #44	; 0x2c
 8001704:	fb01 f303 	mul.w	r3, r1, r3
 8001708:	4413      	add	r3, r2
 800170a:	333f      	adds	r3, #63	; 0x3f
 800170c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001710:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001712:	78fb      	ldrb	r3, [r7, #3]
 8001714:	78ba      	ldrb	r2, [r7, #2]
 8001716:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800171a:	b2d0      	uxtb	r0, r2
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	212c      	movs	r1, #44	; 0x2c
 8001720:	fb01 f303 	mul.w	r3, r1, r3
 8001724:	4413      	add	r3, r2
 8001726:	333a      	adds	r3, #58	; 0x3a
 8001728:	4602      	mov	r2, r0
 800172a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800172c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001730:	2b00      	cmp	r3, #0
 8001732:	da09      	bge.n	8001748 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	212c      	movs	r1, #44	; 0x2c
 800173a:	fb01 f303 	mul.w	r3, r1, r3
 800173e:	4413      	add	r3, r2
 8001740:	333b      	adds	r3, #59	; 0x3b
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]
 8001746:	e008      	b.n	800175a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001748:	78fb      	ldrb	r3, [r7, #3]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	212c      	movs	r1, #44	; 0x2c
 800174e:	fb01 f303 	mul.w	r3, r1, r3
 8001752:	4413      	add	r3, r2
 8001754:	333b      	adds	r3, #59	; 0x3b
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800175a:	78fb      	ldrb	r3, [r7, #3]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	212c      	movs	r1, #44	; 0x2c
 8001760:	fb01 f303 	mul.w	r3, r1, r3
 8001764:	4413      	add	r3, r2
 8001766:	333c      	adds	r3, #60	; 0x3c
 8001768:	f897 2020 	ldrb.w	r2, [r7, #32]
 800176c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6818      	ldr	r0, [r3, #0]
 8001772:	787c      	ldrb	r4, [r7, #1]
 8001774:	78ba      	ldrb	r2, [r7, #2]
 8001776:	78f9      	ldrb	r1, [r7, #3]
 8001778:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800177a:	9302      	str	r3, [sp, #8]
 800177c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001780:	9301      	str	r3, [sp, #4]
 8001782:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	4623      	mov	r3, r4
 800178a:	f004 fb23 	bl	8005dd4 <USB_HC_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800179a:	7bfb      	ldrb	r3, [r7, #15]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd90      	pop	{r4, r7, pc}

080017a4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d101      	bne.n	80017c2 <HAL_HCD_HC_Halt+0x1e>
 80017be:	2302      	movs	r3, #2
 80017c0:	e00f      	b.n	80017e2 <HAL_HCD_HC_Halt+0x3e>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	78fa      	ldrb	r2, [r7, #3]
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f004 fd73 	bl	80062be <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	4608      	mov	r0, r1
 80017f6:	4611      	mov	r1, r2
 80017f8:	461a      	mov	r2, r3
 80017fa:	4603      	mov	r3, r0
 80017fc:	70fb      	strb	r3, [r7, #3]
 80017fe:	460b      	mov	r3, r1
 8001800:	70bb      	strb	r3, [r7, #2]
 8001802:	4613      	mov	r3, r2
 8001804:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	212c      	movs	r1, #44	; 0x2c
 800180c:	fb01 f303 	mul.w	r3, r1, r3
 8001810:	4413      	add	r3, r2
 8001812:	333b      	adds	r3, #59	; 0x3b
 8001814:	78ba      	ldrb	r2, [r7, #2]
 8001816:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	212c      	movs	r1, #44	; 0x2c
 800181e:	fb01 f303 	mul.w	r3, r1, r3
 8001822:	4413      	add	r3, r2
 8001824:	333f      	adds	r3, #63	; 0x3f
 8001826:	787a      	ldrb	r2, [r7, #1]
 8001828:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800182a:	7c3b      	ldrb	r3, [r7, #16]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d112      	bne.n	8001856 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	212c      	movs	r1, #44	; 0x2c
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	4413      	add	r3, r2
 800183c:	3342      	adds	r3, #66	; 0x42
 800183e:	2203      	movs	r2, #3
 8001840:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	212c      	movs	r1, #44	; 0x2c
 8001848:	fb01 f303 	mul.w	r3, r1, r3
 800184c:	4413      	add	r3, r2
 800184e:	333d      	adds	r3, #61	; 0x3d
 8001850:	7f3a      	ldrb	r2, [r7, #28]
 8001852:	701a      	strb	r2, [r3, #0]
 8001854:	e008      	b.n	8001868 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	212c      	movs	r1, #44	; 0x2c
 800185c:	fb01 f303 	mul.w	r3, r1, r3
 8001860:	4413      	add	r3, r2
 8001862:	3342      	adds	r3, #66	; 0x42
 8001864:	2202      	movs	r2, #2
 8001866:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001868:	787b      	ldrb	r3, [r7, #1]
 800186a:	2b03      	cmp	r3, #3
 800186c:	f200 80c6 	bhi.w	80019fc <HAL_HCD_HC_SubmitRequest+0x210>
 8001870:	a201      	add	r2, pc, #4	; (adr r2, 8001878 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001876:	bf00      	nop
 8001878:	08001889 	.word	0x08001889
 800187c:	080019e9 	.word	0x080019e9
 8001880:	080018ed 	.word	0x080018ed
 8001884:	0800196b 	.word	0x0800196b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001888:	7c3b      	ldrb	r3, [r7, #16]
 800188a:	2b01      	cmp	r3, #1
 800188c:	f040 80b8 	bne.w	8001a00 <HAL_HCD_HC_SubmitRequest+0x214>
 8001890:	78bb      	ldrb	r3, [r7, #2]
 8001892:	2b00      	cmp	r3, #0
 8001894:	f040 80b4 	bne.w	8001a00 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001898:	8b3b      	ldrh	r3, [r7, #24]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d108      	bne.n	80018b0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800189e:	78fb      	ldrb	r3, [r7, #3]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	212c      	movs	r1, #44	; 0x2c
 80018a4:	fb01 f303 	mul.w	r3, r1, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	3355      	adds	r3, #85	; 0x55
 80018ac:	2201      	movs	r2, #1
 80018ae:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	212c      	movs	r1, #44	; 0x2c
 80018b6:	fb01 f303 	mul.w	r3, r1, r3
 80018ba:	4413      	add	r3, r2
 80018bc:	3355      	adds	r3, #85	; 0x55
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d109      	bne.n	80018d8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	212c      	movs	r1, #44	; 0x2c
 80018ca:	fb01 f303 	mul.w	r3, r1, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	3342      	adds	r3, #66	; 0x42
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018d6:	e093      	b.n	8001a00 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	212c      	movs	r1, #44	; 0x2c
 80018de:	fb01 f303 	mul.w	r3, r1, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	3342      	adds	r3, #66	; 0x42
 80018e6:	2202      	movs	r2, #2
 80018e8:	701a      	strb	r2, [r3, #0]
      break;
 80018ea:	e089      	b.n	8001a00 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018ec:	78bb      	ldrb	r3, [r7, #2]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d11d      	bne.n	800192e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018f2:	78fb      	ldrb	r3, [r7, #3]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	212c      	movs	r1, #44	; 0x2c
 80018f8:	fb01 f303 	mul.w	r3, r1, r3
 80018fc:	4413      	add	r3, r2
 80018fe:	3355      	adds	r3, #85	; 0x55
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d109      	bne.n	800191a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	212c      	movs	r1, #44	; 0x2c
 800190c:	fb01 f303 	mul.w	r3, r1, r3
 8001910:	4413      	add	r3, r2
 8001912:	3342      	adds	r3, #66	; 0x42
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001918:	e073      	b.n	8001a02 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	212c      	movs	r1, #44	; 0x2c
 8001920:	fb01 f303 	mul.w	r3, r1, r3
 8001924:	4413      	add	r3, r2
 8001926:	3342      	adds	r3, #66	; 0x42
 8001928:	2202      	movs	r2, #2
 800192a:	701a      	strb	r2, [r3, #0]
      break;
 800192c:	e069      	b.n	8001a02 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800192e:	78fb      	ldrb	r3, [r7, #3]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	212c      	movs	r1, #44	; 0x2c
 8001934:	fb01 f303 	mul.w	r3, r1, r3
 8001938:	4413      	add	r3, r2
 800193a:	3354      	adds	r3, #84	; 0x54
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d109      	bne.n	8001956 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001942:	78fb      	ldrb	r3, [r7, #3]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	212c      	movs	r1, #44	; 0x2c
 8001948:	fb01 f303 	mul.w	r3, r1, r3
 800194c:	4413      	add	r3, r2
 800194e:	3342      	adds	r3, #66	; 0x42
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
      break;
 8001954:	e055      	b.n	8001a02 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	212c      	movs	r1, #44	; 0x2c
 800195c:	fb01 f303 	mul.w	r3, r1, r3
 8001960:	4413      	add	r3, r2
 8001962:	3342      	adds	r3, #66	; 0x42
 8001964:	2202      	movs	r2, #2
 8001966:	701a      	strb	r2, [r3, #0]
      break;
 8001968:	e04b      	b.n	8001a02 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800196a:	78bb      	ldrb	r3, [r7, #2]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d11d      	bne.n	80019ac <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	212c      	movs	r1, #44	; 0x2c
 8001976:	fb01 f303 	mul.w	r3, r1, r3
 800197a:	4413      	add	r3, r2
 800197c:	3355      	adds	r3, #85	; 0x55
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d109      	bne.n	8001998 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001984:	78fb      	ldrb	r3, [r7, #3]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	212c      	movs	r1, #44	; 0x2c
 800198a:	fb01 f303 	mul.w	r3, r1, r3
 800198e:	4413      	add	r3, r2
 8001990:	3342      	adds	r3, #66	; 0x42
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001996:	e034      	b.n	8001a02 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001998:	78fb      	ldrb	r3, [r7, #3]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	212c      	movs	r1, #44	; 0x2c
 800199e:	fb01 f303 	mul.w	r3, r1, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	3342      	adds	r3, #66	; 0x42
 80019a6:	2202      	movs	r2, #2
 80019a8:	701a      	strb	r2, [r3, #0]
      break;
 80019aa:	e02a      	b.n	8001a02 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019ac:	78fb      	ldrb	r3, [r7, #3]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	212c      	movs	r1, #44	; 0x2c
 80019b2:	fb01 f303 	mul.w	r3, r1, r3
 80019b6:	4413      	add	r3, r2
 80019b8:	3354      	adds	r3, #84	; 0x54
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d109      	bne.n	80019d4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	212c      	movs	r1, #44	; 0x2c
 80019c6:	fb01 f303 	mul.w	r3, r1, r3
 80019ca:	4413      	add	r3, r2
 80019cc:	3342      	adds	r3, #66	; 0x42
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
      break;
 80019d2:	e016      	b.n	8001a02 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	212c      	movs	r1, #44	; 0x2c
 80019da:	fb01 f303 	mul.w	r3, r1, r3
 80019de:	4413      	add	r3, r2
 80019e0:	3342      	adds	r3, #66	; 0x42
 80019e2:	2202      	movs	r2, #2
 80019e4:	701a      	strb	r2, [r3, #0]
      break;
 80019e6:	e00c      	b.n	8001a02 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	212c      	movs	r1, #44	; 0x2c
 80019ee:	fb01 f303 	mul.w	r3, r1, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	3342      	adds	r3, #66	; 0x42
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
      break;
 80019fa:	e002      	b.n	8001a02 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80019fc:	bf00      	nop
 80019fe:	e000      	b.n	8001a02 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001a00:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a02:	78fb      	ldrb	r3, [r7, #3]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	212c      	movs	r1, #44	; 0x2c
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3344      	adds	r3, #68	; 0x44
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a14:	78fb      	ldrb	r3, [r7, #3]
 8001a16:	8b3a      	ldrh	r2, [r7, #24]
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	202c      	movs	r0, #44	; 0x2c
 8001a1c:	fb00 f303 	mul.w	r3, r0, r3
 8001a20:	440b      	add	r3, r1
 8001a22:	334c      	adds	r3, #76	; 0x4c
 8001a24:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a26:	78fb      	ldrb	r3, [r7, #3]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	212c      	movs	r1, #44	; 0x2c
 8001a2c:	fb01 f303 	mul.w	r3, r1, r3
 8001a30:	4413      	add	r3, r2
 8001a32:	3360      	adds	r3, #96	; 0x60
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	212c      	movs	r1, #44	; 0x2c
 8001a3e:	fb01 f303 	mul.w	r3, r1, r3
 8001a42:	4413      	add	r3, r2
 8001a44:	3350      	adds	r3, #80	; 0x50
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	212c      	movs	r1, #44	; 0x2c
 8001a50:	fb01 f303 	mul.w	r3, r1, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	3339      	adds	r3, #57	; 0x39
 8001a58:	78fa      	ldrb	r2, [r7, #3]
 8001a5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	212c      	movs	r1, #44	; 0x2c
 8001a62:	fb01 f303 	mul.w	r3, r1, r3
 8001a66:	4413      	add	r3, r2
 8001a68:	3361      	adds	r3, #97	; 0x61
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6818      	ldr	r0, [r3, #0]
 8001a72:	78fb      	ldrb	r3, [r7, #3]
 8001a74:	222c      	movs	r2, #44	; 0x2c
 8001a76:	fb02 f303 	mul.w	r3, r2, r3
 8001a7a:	3338      	adds	r3, #56	; 0x38
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	18d1      	adds	r1, r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	461a      	mov	r2, r3
 8001a88:	f004 fac6 	bl	8006018 <USB_HC_StartXfer>
 8001a8c:	4603      	mov	r3, r0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop

08001a98 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f003 ffc7 	bl	8005a42 <USB_GetMode>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	f040 80f6 	bne.w	8001ca8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f003 ffab 	bl	8005a1c <USB_ReadInterrupts>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80ec 	beq.w	8001ca6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f003 ffa2 	bl	8005a1c <USB_ReadInterrupts>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ade:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ae2:	d104      	bne.n	8001aee <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001aec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f003 ff92 	bl	8005a1c <USB_ReadInterrupts>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b02:	d104      	bne.n	8001b0e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f003 ff82 	bl	8005a1c <USB_ReadInterrupts>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b22:	d104      	bne.n	8001b2e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 ff72 	bl	8005a1c <USB_ReadInterrupts>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d103      	bne.n	8001b4a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2202      	movs	r2, #2
 8001b48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 ff64 	bl	8005a1c <USB_ReadInterrupts>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b5e:	d11c      	bne.n	8001b9a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b68:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10f      	bne.n	8001b9a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b7a:	2110      	movs	r1, #16
 8001b7c:	6938      	ldr	r0, [r7, #16]
 8001b7e:	f003 fe53 	bl	8005828 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b82:	6938      	ldr	r0, [r7, #16]
 8001b84:	f003 fe84 	bl	8005890 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f004 f85a 	bl	8005c48 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f006 fe27 	bl	80087e8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 ff3c 	bl	8005a1c <USB_ReadInterrupts>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001baa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bae:	d102      	bne.n	8001bb6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f001 f89e 	bl	8002cf2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f003 ff2e 	bl	8005a1c <USB_ReadInterrupts>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d106      	bne.n	8001bd8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f006 fdf0 	bl	80087b0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2208      	movs	r2, #8
 8001bd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f003 ff1d 	bl	8005a1c <USB_ReadInterrupts>
 8001be2:	4603      	mov	r3, r0
 8001be4:	f003 0310 	and.w	r3, r3, #16
 8001be8:	2b10      	cmp	r3, #16
 8001bea:	d101      	bne.n	8001bf0 <HAL_HCD_IRQHandler+0x158>
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <HAL_HCD_IRQHandler+0x15a>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d012      	beq.n	8001c1c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	699a      	ldr	r2, [r3, #24]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0210 	bic.w	r2, r2, #16
 8001c04:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 ffa1 	bl	8002b4e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699a      	ldr	r2, [r3, #24]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0210 	orr.w	r2, r2, #16
 8001c1a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f003 fefb 	bl	8005a1c <USB_ReadInterrupts>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c30:	d13a      	bne.n	8001ca8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f004 fb30 	bl	800629c <USB_HC_ReadInterrupt>
 8001c3c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	e025      	b.n	8001c90 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d018      	beq.n	8001c8a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	015a      	lsls	r2, r3, #5
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4413      	add	r3, r2
 8001c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c6e:	d106      	bne.n	8001c7e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	4619      	mov	r1, r3
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f8ab 	bl	8001dd2 <HCD_HC_IN_IRQHandler>
 8001c7c:	e005      	b.n	8001c8a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	4619      	mov	r1, r3
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 fbf9 	bl	800247c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d3d4      	bcc.n	8001c44 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ca2:	615a      	str	r2, [r3, #20]
 8001ca4:	e000      	b.n	8001ca8 <HAL_HCD_IRQHandler+0x210>
      return;
 8001ca6:	bf00      	nop
    }
  }
}
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d101      	bne.n	8001cc4 <HAL_HCD_Start+0x16>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	e013      	b.n	8001cec <HAL_HCD_Start+0x3e>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f004 f81c 	bl	8005d10 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f003 fd34 	bl	800574a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_HCD_Stop+0x16>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e00d      	b.n	8001d26 <HAL_HCD_Stop+0x32>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f004 fc0a 	bl	8006530 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f003 ffbe 	bl	8005cbc <USB_ResetPort>
 8001d40:	4603      	mov	r3, r0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	460b      	mov	r3, r1
 8001d54:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d56:	78fb      	ldrb	r3, [r7, #3]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	212c      	movs	r1, #44	; 0x2c
 8001d5c:	fb01 f303 	mul.w	r3, r1, r3
 8001d60:	4413      	add	r3, r2
 8001d62:	3360      	adds	r3, #96	; 0x60
 8001d64:	781b      	ldrb	r3, [r3, #0]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d7e:	78fb      	ldrb	r3, [r7, #3]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	212c      	movs	r1, #44	; 0x2c
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	3350      	adds	r3, #80	; 0x50
 8001d8c:	681b      	ldr	r3, [r3, #0]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f004 f802 	bl	8005db0 <USB_GetCurrentFrame>
 8001dac:	4603      	mov	r3, r0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f003 ffdd 	bl	8005d82 <USB_GetHostSpeed>
 8001dc8:	4603      	mov	r3, r0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b086      	sub	sp, #24
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d11a      	bne.n	8001e38 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0e:	461a      	mov	r2, r3
 8001e10:	2304      	movs	r3, #4
 8001e12:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	212c      	movs	r1, #44	; 0x2c
 8001e1a:	fb01 f303 	mul.w	r3, r1, r3
 8001e1e:	4413      	add	r3, r2
 8001e20:	3361      	adds	r3, #97	; 0x61
 8001e22:	2206      	movs	r2, #6
 8001e24:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f004 fa44 	bl	80062be <USB_HC_Halt>
 8001e36:	e0af      	b.n	8001f98 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	015a      	lsls	r2, r3, #5
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4413      	add	r3, r2
 8001e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e4e:	d11b      	bne.n	8001e88 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	015a      	lsls	r2, r3, #5
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4413      	add	r3, r2
 8001e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e62:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	212c      	movs	r1, #44	; 0x2c
 8001e6a:	fb01 f303 	mul.w	r3, r1, r3
 8001e6e:	4413      	add	r3, r2
 8001e70:	3361      	adds	r3, #97	; 0x61
 8001e72:	2207      	movs	r2, #7
 8001e74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f004 fa1c 	bl	80062be <USB_HC_Halt>
 8001e86:	e087      	b.n	8001f98 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	015a      	lsls	r2, r3, #5
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4413      	add	r3, r2
 8001e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 0320 	and.w	r3, r3, #32
 8001e9a:	2b20      	cmp	r3, #32
 8001e9c:	d109      	bne.n	8001eb2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	015a      	lsls	r2, r3, #5
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eaa:	461a      	mov	r2, r3
 8001eac:	2320      	movs	r3, #32
 8001eae:	6093      	str	r3, [r2, #8]
 8001eb0:	e072      	b.n	8001f98 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	015a      	lsls	r2, r3, #5
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d11a      	bne.n	8001efe <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	015a      	lsls	r2, r3, #5
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4413      	add	r3, r2
 8001ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	2308      	movs	r3, #8
 8001ed8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	212c      	movs	r1, #44	; 0x2c
 8001ee0:	fb01 f303 	mul.w	r3, r1, r3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3361      	adds	r3, #97	; 0x61
 8001ee8:	2205      	movs	r2, #5
 8001eea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f004 f9e1 	bl	80062be <USB_HC_Halt>
 8001efc:	e04c      	b.n	8001f98 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	015a      	lsls	r2, r3, #5
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f14:	d11b      	bne.n	8001f4e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	015a      	lsls	r2, r3, #5
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f22:	461a      	mov	r2, r3
 8001f24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f28:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	212c      	movs	r1, #44	; 0x2c
 8001f30:	fb01 f303 	mul.w	r3, r1, r3
 8001f34:	4413      	add	r3, r2
 8001f36:	3361      	adds	r3, #97	; 0x61
 8001f38:	2208      	movs	r2, #8
 8001f3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f004 f9b9 	bl	80062be <USB_HC_Halt>
 8001f4c:	e024      	b.n	8001f98 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f60:	2b80      	cmp	r3, #128	; 0x80
 8001f62:	d119      	bne.n	8001f98 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	015a      	lsls	r2, r3, #5
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f70:	461a      	mov	r2, r3
 8001f72:	2380      	movs	r3, #128	; 0x80
 8001f74:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	212c      	movs	r1, #44	; 0x2c
 8001f7c:	fb01 f303 	mul.w	r3, r1, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	3361      	adds	r3, #97	; 0x61
 8001f84:	2206      	movs	r2, #6
 8001f86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	4611      	mov	r1, r2
 8001f92:	4618      	mov	r0, r3
 8001f94:	f004 f993 	bl	80062be <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	015a      	lsls	r2, r3, #5
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001faa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fae:	d112      	bne.n	8001fd6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f004 f97f 	bl	80062be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	015a      	lsls	r2, r3, #5
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fcc:	461a      	mov	r2, r3
 8001fce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fd2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001fd4:	e24e      	b.n	8002474 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	015a      	lsls	r2, r3, #5
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	f040 80df 	bne.w	80021ac <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d019      	beq.n	800202a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	212c      	movs	r1, #44	; 0x2c
 8001ffc:	fb01 f303 	mul.w	r3, r1, r3
 8002000:	4413      	add	r3, r2
 8002002:	3348      	adds	r3, #72	; 0x48
 8002004:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	0159      	lsls	r1, r3, #5
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	440b      	add	r3, r1
 800200e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002018:	1ad2      	subs	r2, r2, r3
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	202c      	movs	r0, #44	; 0x2c
 8002020:	fb00 f303 	mul.w	r3, r0, r3
 8002024:	440b      	add	r3, r1
 8002026:	3350      	adds	r3, #80	; 0x50
 8002028:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	212c      	movs	r1, #44	; 0x2c
 8002030:	fb01 f303 	mul.w	r3, r1, r3
 8002034:	4413      	add	r3, r2
 8002036:	3361      	adds	r3, #97	; 0x61
 8002038:	2201      	movs	r2, #1
 800203a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	212c      	movs	r1, #44	; 0x2c
 8002042:	fb01 f303 	mul.w	r3, r1, r3
 8002046:	4413      	add	r3, r2
 8002048:	335c      	adds	r3, #92	; 0x5c
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4413      	add	r3, r2
 8002056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205a:	461a      	mov	r2, r3
 800205c:	2301      	movs	r3, #1
 800205e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	212c      	movs	r1, #44	; 0x2c
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	4413      	add	r3, r2
 800206c:	333f      	adds	r3, #63	; 0x3f
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d009      	beq.n	8002088 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	212c      	movs	r1, #44	; 0x2c
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	4413      	add	r3, r2
 8002080:	333f      	adds	r3, #63	; 0x3f
 8002082:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002084:	2b02      	cmp	r3, #2
 8002086:	d111      	bne.n	80020ac <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f004 f913 	bl	80062be <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	015a      	lsls	r2, r3, #5
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4413      	add	r3, r2
 80020a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a4:	461a      	mov	r2, r3
 80020a6:	2310      	movs	r3, #16
 80020a8:	6093      	str	r3, [r2, #8]
 80020aa:	e03a      	b.n	8002122 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	212c      	movs	r1, #44	; 0x2c
 80020b2:	fb01 f303 	mul.w	r3, r1, r3
 80020b6:	4413      	add	r3, r2
 80020b8:	333f      	adds	r3, #63	; 0x3f
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d009      	beq.n	80020d4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	212c      	movs	r1, #44	; 0x2c
 80020c6:	fb01 f303 	mul.w	r3, r1, r3
 80020ca:	4413      	add	r3, r2
 80020cc:	333f      	adds	r3, #63	; 0x3f
 80020ce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d126      	bne.n	8002122 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	0151      	lsls	r1, r2, #5
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	440a      	add	r2, r1
 80020ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020f2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	212c      	movs	r1, #44	; 0x2c
 80020fa:	fb01 f303 	mul.w	r3, r1, r3
 80020fe:	4413      	add	r3, r2
 8002100:	3360      	adds	r3, #96	; 0x60
 8002102:	2201      	movs	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	b2d9      	uxtb	r1, r3
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	202c      	movs	r0, #44	; 0x2c
 8002110:	fb00 f303 	mul.w	r3, r0, r3
 8002114:	4413      	add	r3, r2
 8002116:	3360      	adds	r3, #96	; 0x60
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f006 fb71 	bl	8008804 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d12b      	bne.n	8002182 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	212c      	movs	r1, #44	; 0x2c
 8002130:	fb01 f303 	mul.w	r3, r1, r3
 8002134:	4413      	add	r3, r2
 8002136:	3348      	adds	r3, #72	; 0x48
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	202c      	movs	r0, #44	; 0x2c
 8002140:	fb00 f202 	mul.w	r2, r0, r2
 8002144:	440a      	add	r2, r1
 8002146:	3240      	adds	r2, #64	; 0x40
 8002148:	8812      	ldrh	r2, [r2, #0]
 800214a:	fbb3 f3f2 	udiv	r3, r3, r2
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 818e 	beq.w	8002474 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	212c      	movs	r1, #44	; 0x2c
 800215e:	fb01 f303 	mul.w	r3, r1, r3
 8002162:	4413      	add	r3, r2
 8002164:	3354      	adds	r3, #84	; 0x54
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	f083 0301 	eor.w	r3, r3, #1
 800216c:	b2d8      	uxtb	r0, r3
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	212c      	movs	r1, #44	; 0x2c
 8002174:	fb01 f303 	mul.w	r3, r1, r3
 8002178:	4413      	add	r3, r2
 800217a:	3354      	adds	r3, #84	; 0x54
 800217c:	4602      	mov	r2, r0
 800217e:	701a      	strb	r2, [r3, #0]
}
 8002180:	e178      	b.n	8002474 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	212c      	movs	r1, #44	; 0x2c
 8002188:	fb01 f303 	mul.w	r3, r1, r3
 800218c:	4413      	add	r3, r2
 800218e:	3354      	adds	r3, #84	; 0x54
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	f083 0301 	eor.w	r3, r3, #1
 8002196:	b2d8      	uxtb	r0, r3
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	212c      	movs	r1, #44	; 0x2c
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	3354      	adds	r3, #84	; 0x54
 80021a6:	4602      	mov	r2, r0
 80021a8:	701a      	strb	r2, [r3, #0]
}
 80021aa:	e163      	b.n	8002474 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	015a      	lsls	r2, r3, #5
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b02      	cmp	r3, #2
 80021c0:	f040 80f6 	bne.w	80023b0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	212c      	movs	r1, #44	; 0x2c
 80021ca:	fb01 f303 	mul.w	r3, r1, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	3361      	adds	r3, #97	; 0x61
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d109      	bne.n	80021ec <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	212c      	movs	r1, #44	; 0x2c
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	3360      	adds	r3, #96	; 0x60
 80021e6:	2201      	movs	r2, #1
 80021e8:	701a      	strb	r2, [r3, #0]
 80021ea:	e0c9      	b.n	8002380 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	212c      	movs	r1, #44	; 0x2c
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	3361      	adds	r3, #97	; 0x61
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b05      	cmp	r3, #5
 80021fe:	d109      	bne.n	8002214 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	212c      	movs	r1, #44	; 0x2c
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	4413      	add	r3, r2
 800220c:	3360      	adds	r3, #96	; 0x60
 800220e:	2205      	movs	r2, #5
 8002210:	701a      	strb	r2, [r3, #0]
 8002212:	e0b5      	b.n	8002380 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	212c      	movs	r1, #44	; 0x2c
 800221a:	fb01 f303 	mul.w	r3, r1, r3
 800221e:	4413      	add	r3, r2
 8002220:	3361      	adds	r3, #97	; 0x61
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b06      	cmp	r3, #6
 8002226:	d009      	beq.n	800223c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	212c      	movs	r1, #44	; 0x2c
 800222e:	fb01 f303 	mul.w	r3, r1, r3
 8002232:	4413      	add	r3, r2
 8002234:	3361      	adds	r3, #97	; 0x61
 8002236:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002238:	2b08      	cmp	r3, #8
 800223a:	d150      	bne.n	80022de <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	212c      	movs	r1, #44	; 0x2c
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	4413      	add	r3, r2
 8002248:	335c      	adds	r3, #92	; 0x5c
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	202c      	movs	r0, #44	; 0x2c
 8002254:	fb00 f303 	mul.w	r3, r0, r3
 8002258:	440b      	add	r3, r1
 800225a:	335c      	adds	r3, #92	; 0x5c
 800225c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	212c      	movs	r1, #44	; 0x2c
 8002264:	fb01 f303 	mul.w	r3, r1, r3
 8002268:	4413      	add	r3, r2
 800226a:	335c      	adds	r3, #92	; 0x5c
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d912      	bls.n	8002298 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	212c      	movs	r1, #44	; 0x2c
 8002278:	fb01 f303 	mul.w	r3, r1, r3
 800227c:	4413      	add	r3, r2
 800227e:	335c      	adds	r3, #92	; 0x5c
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	212c      	movs	r1, #44	; 0x2c
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	4413      	add	r3, r2
 8002290:	3360      	adds	r3, #96	; 0x60
 8002292:	2204      	movs	r2, #4
 8002294:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002296:	e073      	b.n	8002380 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	212c      	movs	r1, #44	; 0x2c
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	3360      	adds	r3, #96	; 0x60
 80022a6:	2202      	movs	r2, #2
 80022a8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	015a      	lsls	r2, r3, #5
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022c0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022c8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	015a      	lsls	r2, r3, #5
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d6:	461a      	mov	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022dc:	e050      	b.n	8002380 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	212c      	movs	r1, #44	; 0x2c
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	3361      	adds	r3, #97	; 0x61
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d122      	bne.n	8002338 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	212c      	movs	r1, #44	; 0x2c
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	3360      	adds	r3, #96	; 0x60
 8002300:	2202      	movs	r2, #2
 8002302:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	015a      	lsls	r2, r3, #5
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4413      	add	r3, r2
 800230c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800231a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002322:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	015a      	lsls	r2, r3, #5
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4413      	add	r3, r2
 800232c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002330:	461a      	mov	r2, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	e023      	b.n	8002380 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	212c      	movs	r1, #44	; 0x2c
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	4413      	add	r3, r2
 8002344:	3361      	adds	r3, #97	; 0x61
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b07      	cmp	r3, #7
 800234a:	d119      	bne.n	8002380 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	212c      	movs	r1, #44	; 0x2c
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	335c      	adds	r3, #92	; 0x5c
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	202c      	movs	r0, #44	; 0x2c
 8002364:	fb00 f303 	mul.w	r3, r0, r3
 8002368:	440b      	add	r3, r1
 800236a:	335c      	adds	r3, #92	; 0x5c
 800236c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	212c      	movs	r1, #44	; 0x2c
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	4413      	add	r3, r2
 800237a:	3360      	adds	r3, #96	; 0x60
 800237c:	2204      	movs	r2, #4
 800237e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4413      	add	r3, r2
 8002388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238c:	461a      	mov	r2, r3
 800238e:	2302      	movs	r3, #2
 8002390:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	b2d9      	uxtb	r1, r3
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	202c      	movs	r0, #44	; 0x2c
 800239c:	fb00 f303 	mul.w	r3, r0, r3
 80023a0:	4413      	add	r3, r2
 80023a2:	3360      	adds	r3, #96	; 0x60
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f006 fa2b 	bl	8008804 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80023ae:	e061      	b.n	8002474 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b10      	cmp	r3, #16
 80023c4:	d156      	bne.n	8002474 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	212c      	movs	r1, #44	; 0x2c
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	333f      	adds	r3, #63	; 0x3f
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d111      	bne.n	80023fe <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	212c      	movs	r1, #44	; 0x2c
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	335c      	adds	r3, #92	; 0x5c
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	4611      	mov	r1, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f003 ff61 	bl	80062be <USB_HC_Halt>
 80023fc:	e031      	b.n	8002462 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	212c      	movs	r1, #44	; 0x2c
 8002404:	fb01 f303 	mul.w	r3, r1, r3
 8002408:	4413      	add	r3, r2
 800240a:	333f      	adds	r3, #63	; 0x3f
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d009      	beq.n	8002426 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	212c      	movs	r1, #44	; 0x2c
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	4413      	add	r3, r2
 800241e:	333f      	adds	r3, #63	; 0x3f
 8002420:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002422:	2b02      	cmp	r3, #2
 8002424:	d11d      	bne.n	8002462 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	212c      	movs	r1, #44	; 0x2c
 800242c:	fb01 f303 	mul.w	r3, r1, r3
 8002430:	4413      	add	r3, r2
 8002432:	335c      	adds	r3, #92	; 0x5c
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d110      	bne.n	8002462 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	212c      	movs	r1, #44	; 0x2c
 8002446:	fb01 f303 	mul.w	r3, r1, r3
 800244a:	4413      	add	r3, r2
 800244c:	3361      	adds	r3, #97	; 0x61
 800244e:	2203      	movs	r2, #3
 8002450:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	4611      	mov	r1, r2
 800245c:	4618      	mov	r0, r3
 800245e:	f003 ff2e 	bl	80062be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4413      	add	r3, r2
 800246a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246e:	461a      	mov	r2, r3
 8002470:	2310      	movs	r3, #16
 8002472:	6093      	str	r3, [r2, #8]
}
 8002474:	bf00      	nop
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002492:	78fb      	ldrb	r3, [r7, #3]
 8002494:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	015a      	lsls	r2, r3, #5
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	4413      	add	r3, r2
 800249e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d11a      	bne.n	80024e2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b8:	461a      	mov	r2, r3
 80024ba:	2304      	movs	r3, #4
 80024bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	212c      	movs	r1, #44	; 0x2c
 80024c4:	fb01 f303 	mul.w	r3, r1, r3
 80024c8:	4413      	add	r3, r2
 80024ca:	3361      	adds	r3, #97	; 0x61
 80024cc:	2206      	movs	r2, #6
 80024ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	4611      	mov	r1, r2
 80024da:	4618      	mov	r0, r3
 80024dc:	f003 feef 	bl	80062be <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80024e0:	e331      	b.n	8002b46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	2b20      	cmp	r3, #32
 80024f6:	d12e      	bne.n	8002556 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002504:	461a      	mov	r2, r3
 8002506:	2320      	movs	r3, #32
 8002508:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	212c      	movs	r1, #44	; 0x2c
 8002510:	fb01 f303 	mul.w	r3, r1, r3
 8002514:	4413      	add	r3, r2
 8002516:	333d      	adds	r3, #61	; 0x3d
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b01      	cmp	r3, #1
 800251c:	f040 8313 	bne.w	8002b46 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	212c      	movs	r1, #44	; 0x2c
 8002526:	fb01 f303 	mul.w	r3, r1, r3
 800252a:	4413      	add	r3, r2
 800252c:	333d      	adds	r3, #61	; 0x3d
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	212c      	movs	r1, #44	; 0x2c
 8002538:	fb01 f303 	mul.w	r3, r1, r3
 800253c:	4413      	add	r3, r2
 800253e:	3360      	adds	r3, #96	; 0x60
 8002540:	2202      	movs	r2, #2
 8002542:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	4611      	mov	r1, r2
 800254e:	4618      	mov	r0, r3
 8002550:	f003 feb5 	bl	80062be <USB_HC_Halt>
}
 8002554:	e2f7      	b.n	8002b46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	015a      	lsls	r2, r3, #5
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	4413      	add	r3, r2
 800255e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800256c:	d112      	bne.n	8002594 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	4413      	add	r3, r2
 8002576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257a:	461a      	mov	r2, r3
 800257c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002580:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f003 fe96 	bl	80062be <USB_HC_Halt>
}
 8002592:	e2d8      	b.n	8002b46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	4413      	add	r3, r2
 800259c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d140      	bne.n	800262c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	212c      	movs	r1, #44	; 0x2c
 80025b0:	fb01 f303 	mul.w	r3, r1, r3
 80025b4:	4413      	add	r3, r2
 80025b6:	335c      	adds	r3, #92	; 0x5c
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	015a      	lsls	r2, r3, #5
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ce:	2b40      	cmp	r3, #64	; 0x40
 80025d0:	d111      	bne.n	80025f6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	212c      	movs	r1, #44	; 0x2c
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	4413      	add	r3, r2
 80025de:	333d      	adds	r3, #61	; 0x3d
 80025e0:	2201      	movs	r2, #1
 80025e2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	015a      	lsls	r2, r3, #5
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f0:	461a      	mov	r2, r3
 80025f2:	2340      	movs	r3, #64	; 0x40
 80025f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	015a      	lsls	r2, r3, #5
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002602:	461a      	mov	r2, r3
 8002604:	2301      	movs	r3, #1
 8002606:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	212c      	movs	r1, #44	; 0x2c
 800260e:	fb01 f303 	mul.w	r3, r1, r3
 8002612:	4413      	add	r3, r2
 8002614:	3361      	adds	r3, #97	; 0x61
 8002616:	2201      	movs	r2, #1
 8002618:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	4611      	mov	r1, r2
 8002624:	4618      	mov	r0, r3
 8002626:	f003 fe4a 	bl	80062be <USB_HC_Halt>
}
 800262a:	e28c      	b.n	8002b46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	4413      	add	r3, r2
 8002634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263e:	2b40      	cmp	r3, #64	; 0x40
 8002640:	d12c      	bne.n	800269c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	212c      	movs	r1, #44	; 0x2c
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	4413      	add	r3, r2
 800264e:	3361      	adds	r3, #97	; 0x61
 8002650:	2204      	movs	r2, #4
 8002652:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	212c      	movs	r1, #44	; 0x2c
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	333d      	adds	r3, #61	; 0x3d
 8002662:	2201      	movs	r2, #1
 8002664:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	335c      	adds	r3, #92	; 0x5c
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	4611      	mov	r1, r2
 8002682:	4618      	mov	r0, r3
 8002684:	f003 fe1b 	bl	80062be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	4413      	add	r3, r2
 8002690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002694:	461a      	mov	r2, r3
 8002696:	2340      	movs	r3, #64	; 0x40
 8002698:	6093      	str	r3, [r2, #8]
}
 800269a:	e254      	b.n	8002b46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	d11a      	bne.n	80026e8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026be:	461a      	mov	r2, r3
 80026c0:	2308      	movs	r3, #8
 80026c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	212c      	movs	r1, #44	; 0x2c
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	3361      	adds	r3, #97	; 0x61
 80026d2:	2205      	movs	r2, #5
 80026d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	4611      	mov	r1, r2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f003 fdec 	bl	80062be <USB_HC_Halt>
}
 80026e6:	e22e      	b.n	8002b46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	2b10      	cmp	r3, #16
 80026fc:	d140      	bne.n	8002780 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	212c      	movs	r1, #44	; 0x2c
 8002704:	fb01 f303 	mul.w	r3, r1, r3
 8002708:	4413      	add	r3, r2
 800270a:	335c      	adds	r3, #92	; 0x5c
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	212c      	movs	r1, #44	; 0x2c
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	4413      	add	r3, r2
 800271c:	3361      	adds	r3, #97	; 0x61
 800271e:	2203      	movs	r2, #3
 8002720:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	212c      	movs	r1, #44	; 0x2c
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	4413      	add	r3, r2
 800272e:	333d      	adds	r3, #61	; 0x3d
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d112      	bne.n	800275c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	212c      	movs	r1, #44	; 0x2c
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	333c      	adds	r3, #60	; 0x3c
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d108      	bne.n	800275c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	212c      	movs	r1, #44	; 0x2c
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	4413      	add	r3, r2
 8002756:	333d      	adds	r3, #61	; 0x3d
 8002758:	2201      	movs	r2, #1
 800275a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	4611      	mov	r1, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f003 fda9 	bl	80062be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002778:	461a      	mov	r2, r3
 800277a:	2310      	movs	r3, #16
 800277c:	6093      	str	r3, [r2, #8]
}
 800277e:	e1e2      	b.n	8002b46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	4413      	add	r3, r2
 8002788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002792:	2b80      	cmp	r3, #128	; 0x80
 8002794:	d164      	bne.n	8002860 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d111      	bne.n	80027c2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	212c      	movs	r1, #44	; 0x2c
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	3361      	adds	r3, #97	; 0x61
 80027ac:	2206      	movs	r2, #6
 80027ae:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	4611      	mov	r1, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f003 fd7f 	bl	80062be <USB_HC_Halt>
 80027c0:	e044      	b.n	800284c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	212c      	movs	r1, #44	; 0x2c
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	4413      	add	r3, r2
 80027ce:	335c      	adds	r3, #92	; 0x5c
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	202c      	movs	r0, #44	; 0x2c
 80027da:	fb00 f303 	mul.w	r3, r0, r3
 80027de:	440b      	add	r3, r1
 80027e0:	335c      	adds	r3, #92	; 0x5c
 80027e2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	212c      	movs	r1, #44	; 0x2c
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	335c      	adds	r3, #92	; 0x5c
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d920      	bls.n	800283a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	212c      	movs	r1, #44	; 0x2c
 80027fe:	fb01 f303 	mul.w	r3, r1, r3
 8002802:	4413      	add	r3, r2
 8002804:	335c      	adds	r3, #92	; 0x5c
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	212c      	movs	r1, #44	; 0x2c
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	4413      	add	r3, r2
 8002816:	3360      	adds	r3, #96	; 0x60
 8002818:	2204      	movs	r2, #4
 800281a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	b2d9      	uxtb	r1, r3
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	202c      	movs	r0, #44	; 0x2c
 8002826:	fb00 f303 	mul.w	r3, r0, r3
 800282a:	4413      	add	r3, r2
 800282c:	3360      	adds	r3, #96	; 0x60
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f005 ffe6 	bl	8008804 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002838:	e008      	b.n	800284c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	212c      	movs	r1, #44	; 0x2c
 8002840:	fb01 f303 	mul.w	r3, r1, r3
 8002844:	4413      	add	r3, r2
 8002846:	3360      	adds	r3, #96	; 0x60
 8002848:	2202      	movs	r2, #2
 800284a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	015a      	lsls	r2, r3, #5
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	4413      	add	r3, r2
 8002854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002858:	461a      	mov	r2, r3
 800285a:	2380      	movs	r3, #128	; 0x80
 800285c:	6093      	str	r3, [r2, #8]
}
 800285e:	e172      	b.n	8002b46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	4413      	add	r3, r2
 8002868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002876:	d11b      	bne.n	80028b0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	212c      	movs	r1, #44	; 0x2c
 800287e:	fb01 f303 	mul.w	r3, r1, r3
 8002882:	4413      	add	r3, r2
 8002884:	3361      	adds	r3, #97	; 0x61
 8002886:	2208      	movs	r2, #8
 8002888:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f003 fd12 	bl	80062be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	015a      	lsls	r2, r3, #5
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a6:	461a      	mov	r2, r3
 80028a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ac:	6093      	str	r3, [r2, #8]
}
 80028ae:	e14a      	b.n	8002b46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	f040 813f 	bne.w	8002b46 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	212c      	movs	r1, #44	; 0x2c
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	3361      	adds	r3, #97	; 0x61
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d17d      	bne.n	80029d8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	212c      	movs	r1, #44	; 0x2c
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	3360      	adds	r3, #96	; 0x60
 80028ea:	2201      	movs	r2, #1
 80028ec:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	333f      	adds	r3, #63	; 0x3f
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d00a      	beq.n	8002918 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	212c      	movs	r1, #44	; 0x2c
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	4413      	add	r3, r2
 800290e:	333f      	adds	r3, #63	; 0x3f
 8002910:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002912:	2b03      	cmp	r3, #3
 8002914:	f040 8100 	bne.w	8002b18 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d113      	bne.n	8002948 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	212c      	movs	r1, #44	; 0x2c
 8002926:	fb01 f303 	mul.w	r3, r1, r3
 800292a:	4413      	add	r3, r2
 800292c:	3355      	adds	r3, #85	; 0x55
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	f083 0301 	eor.w	r3, r3, #1
 8002934:	b2d8      	uxtb	r0, r3
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	212c      	movs	r1, #44	; 0x2c
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	4413      	add	r3, r2
 8002942:	3355      	adds	r3, #85	; 0x55
 8002944:	4602      	mov	r2, r0
 8002946:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	2b01      	cmp	r3, #1
 800294e:	f040 80e3 	bne.w	8002b18 <HCD_HC_OUT_IRQHandler+0x69c>
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	212c      	movs	r1, #44	; 0x2c
 8002958:	fb01 f303 	mul.w	r3, r1, r3
 800295c:	4413      	add	r3, r2
 800295e:	334c      	adds	r3, #76	; 0x4c
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 80d8 	beq.w	8002b18 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	212c      	movs	r1, #44	; 0x2c
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	334c      	adds	r3, #76	; 0x4c
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	202c      	movs	r0, #44	; 0x2c
 800297e:	fb00 f202 	mul.w	r2, r0, r2
 8002982:	440a      	add	r2, r1
 8002984:	3240      	adds	r2, #64	; 0x40
 8002986:	8812      	ldrh	r2, [r2, #0]
 8002988:	4413      	add	r3, r2
 800298a:	3b01      	subs	r3, #1
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	202c      	movs	r0, #44	; 0x2c
 8002992:	fb00 f202 	mul.w	r2, r0, r2
 8002996:	440a      	add	r2, r1
 8002998:	3240      	adds	r2, #64	; 0x40
 800299a:	8812      	ldrh	r2, [r2, #0]
 800299c:	fbb3 f3f2 	udiv	r3, r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80b5 	beq.w	8002b18 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	3355      	adds	r3, #85	; 0x55
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	f083 0301 	eor.w	r3, r3, #1
 80029c2:	b2d8      	uxtb	r0, r3
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	3355      	adds	r3, #85	; 0x55
 80029d2:	4602      	mov	r2, r0
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	e09f      	b.n	8002b18 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	212c      	movs	r1, #44	; 0x2c
 80029de:	fb01 f303 	mul.w	r3, r1, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	3361      	adds	r3, #97	; 0x61
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d109      	bne.n	8002a00 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	212c      	movs	r1, #44	; 0x2c
 80029f2:	fb01 f303 	mul.w	r3, r1, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	3360      	adds	r3, #96	; 0x60
 80029fa:	2202      	movs	r2, #2
 80029fc:	701a      	strb	r2, [r3, #0]
 80029fe:	e08b      	b.n	8002b18 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	212c      	movs	r1, #44	; 0x2c
 8002a06:	fb01 f303 	mul.w	r3, r1, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3361      	adds	r3, #97	; 0x61
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d109      	bne.n	8002a28 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	212c      	movs	r1, #44	; 0x2c
 8002a1a:	fb01 f303 	mul.w	r3, r1, r3
 8002a1e:	4413      	add	r3, r2
 8002a20:	3360      	adds	r3, #96	; 0x60
 8002a22:	2202      	movs	r2, #2
 8002a24:	701a      	strb	r2, [r3, #0]
 8002a26:	e077      	b.n	8002b18 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	212c      	movs	r1, #44	; 0x2c
 8002a2e:	fb01 f303 	mul.w	r3, r1, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	3361      	adds	r3, #97	; 0x61
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b05      	cmp	r3, #5
 8002a3a:	d109      	bne.n	8002a50 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	212c      	movs	r1, #44	; 0x2c
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	3360      	adds	r3, #96	; 0x60
 8002a4a:	2205      	movs	r2, #5
 8002a4c:	701a      	strb	r2, [r3, #0]
 8002a4e:	e063      	b.n	8002b18 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	212c      	movs	r1, #44	; 0x2c
 8002a56:	fb01 f303 	mul.w	r3, r1, r3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3361      	adds	r3, #97	; 0x61
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b06      	cmp	r3, #6
 8002a62:	d009      	beq.n	8002a78 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	212c      	movs	r1, #44	; 0x2c
 8002a6a:	fb01 f303 	mul.w	r3, r1, r3
 8002a6e:	4413      	add	r3, r2
 8002a70:	3361      	adds	r3, #97	; 0x61
 8002a72:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d14f      	bne.n	8002b18 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	212c      	movs	r1, #44	; 0x2c
 8002a7e:	fb01 f303 	mul.w	r3, r1, r3
 8002a82:	4413      	add	r3, r2
 8002a84:	335c      	adds	r3, #92	; 0x5c
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	202c      	movs	r0, #44	; 0x2c
 8002a90:	fb00 f303 	mul.w	r3, r0, r3
 8002a94:	440b      	add	r3, r1
 8002a96:	335c      	adds	r3, #92	; 0x5c
 8002a98:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	212c      	movs	r1, #44	; 0x2c
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	335c      	adds	r3, #92	; 0x5c
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d912      	bls.n	8002ad4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	335c      	adds	r3, #92	; 0x5c
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	212c      	movs	r1, #44	; 0x2c
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	3360      	adds	r3, #96	; 0x60
 8002ace:	2204      	movs	r2, #4
 8002ad0:	701a      	strb	r2, [r3, #0]
 8002ad2:	e021      	b.n	8002b18 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	212c      	movs	r1, #44	; 0x2c
 8002ada:	fb01 f303 	mul.w	r3, r1, r3
 8002ade:	4413      	add	r3, r2
 8002ae0:	3360      	adds	r3, #96	; 0x60
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	015a      	lsls	r2, r3, #5
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	4413      	add	r3, r2
 8002aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002afc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b04:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b12:	461a      	mov	r2, r3
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b24:	461a      	mov	r2, r3
 8002b26:	2302      	movs	r3, #2
 8002b28:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	b2d9      	uxtb	r1, r3
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	202c      	movs	r0, #44	; 0x2c
 8002b34:	fb00 f303 	mul.w	r3, r0, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	3360      	adds	r3, #96	; 0x60
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f005 fe5f 	bl	8008804 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b46:	bf00      	nop
 8002b48:	3720      	adds	r7, #32
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b08a      	sub	sp, #40	; 0x28
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	0c5b      	lsrs	r3, r3, #17
 8002b74:	f003 030f 	and.w	r3, r3, #15
 8002b78:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	091b      	lsrs	r3, r3, #4
 8002b7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b82:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d004      	beq.n	8002b94 <HCD_RXQLVL_IRQHandler+0x46>
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2b05      	cmp	r3, #5
 8002b8e:	f000 80a9 	beq.w	8002ce4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b92:	e0aa      	b.n	8002cea <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 80a6 	beq.w	8002ce8 <HCD_RXQLVL_IRQHandler+0x19a>
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	212c      	movs	r1, #44	; 0x2c
 8002ba2:	fb01 f303 	mul.w	r3, r1, r3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3344      	adds	r3, #68	; 0x44
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 809b 	beq.w	8002ce8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	212c      	movs	r1, #44	; 0x2c
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3350      	adds	r3, #80	; 0x50
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	441a      	add	r2, r3
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	202c      	movs	r0, #44	; 0x2c
 8002bcc:	fb00 f303 	mul.w	r3, r0, r3
 8002bd0:	440b      	add	r3, r1
 8002bd2:	334c      	adds	r3, #76	; 0x4c
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d87a      	bhi.n	8002cd0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	212c      	movs	r1, #44	; 0x2c
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	3344      	adds	r3, #68	; 0x44
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	b292      	uxth	r2, r2
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	f002 feba 	bl	800596c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	212c      	movs	r1, #44	; 0x2c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	3344      	adds	r3, #68	; 0x44
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	441a      	add	r2, r3
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	202c      	movs	r0, #44	; 0x2c
 8002c12:	fb00 f303 	mul.w	r3, r0, r3
 8002c16:	440b      	add	r3, r1
 8002c18:	3344      	adds	r3, #68	; 0x44
 8002c1a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	212c      	movs	r1, #44	; 0x2c
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	3350      	adds	r3, #80	; 0x50
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	441a      	add	r2, r3
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	202c      	movs	r0, #44	; 0x2c
 8002c36:	fb00 f303 	mul.w	r3, r0, r3
 8002c3a:	440b      	add	r3, r1
 8002c3c:	3350      	adds	r3, #80	; 0x50
 8002c3e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	0cdb      	lsrs	r3, r3, #19
 8002c50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c54:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	212c      	movs	r1, #44	; 0x2c
 8002c5c:	fb01 f303 	mul.w	r3, r1, r3
 8002c60:	4413      	add	r3, r2
 8002c62:	3340      	adds	r3, #64	; 0x40
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d13c      	bne.n	8002ce8 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d039      	beq.n	8002ce8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c8a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c92:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	212c      	movs	r1, #44	; 0x2c
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3354      	adds	r3, #84	; 0x54
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	f083 0301 	eor.w	r3, r3, #1
 8002cba:	b2d8      	uxtb	r0, r3
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	212c      	movs	r1, #44	; 0x2c
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3354      	adds	r3, #84	; 0x54
 8002cca:	4602      	mov	r2, r0
 8002ccc:	701a      	strb	r2, [r3, #0]
      break;
 8002cce:	e00b      	b.n	8002ce8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	212c      	movs	r1, #44	; 0x2c
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	3360      	adds	r3, #96	; 0x60
 8002cde:	2204      	movs	r2, #4
 8002ce0:	701a      	strb	r2, [r3, #0]
      break;
 8002ce2:	e001      	b.n	8002ce8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002ce4:	bf00      	nop
 8002ce6:	e000      	b.n	8002cea <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002ce8:	bf00      	nop
  }
}
 8002cea:	bf00      	nop
 8002cec:	3728      	adds	r7, #40	; 0x28
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b086      	sub	sp, #24
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d1e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d10b      	bne.n	8002d42 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d102      	bne.n	8002d3a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f005 fd49 	bl	80087cc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	f043 0302 	orr.w	r3, r3, #2
 8002d40:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d132      	bne.n	8002db2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f043 0308 	orr.w	r3, r3, #8
 8002d52:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d126      	bne.n	8002dac <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d113      	bne.n	8002d8e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d70:	d106      	bne.n	8002d80 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2102      	movs	r1, #2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f002 ff65 	bl	8005c48 <USB_InitFSLSPClkSel>
 8002d7e:	e011      	b.n	8002da4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2101      	movs	r1, #1
 8002d86:	4618      	mov	r0, r3
 8002d88:	f002 ff5e 	bl	8005c48 <USB_InitFSLSPClkSel>
 8002d8c:	e00a      	b.n	8002da4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d106      	bne.n	8002da4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002da2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f005 fd3b 	bl	8008820 <HAL_HCD_PortEnabled_Callback>
 8002daa:	e002      	b.n	8002db2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f005 fd45 	bl	800883c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f003 0320 	and.w	r3, r3, #32
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	d103      	bne.n	8002dc4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f043 0320 	orr.w	r3, r3, #32
 8002dc2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	6013      	str	r3, [r2, #0]
}
 8002dd0:	bf00      	nop
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e12b      	b.n	8003042 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d106      	bne.n	8002e04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7fd fde0 	bl	80009c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2224      	movs	r2, #36	; 0x24
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0201 	bic.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e3c:	f001 fa20 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 8002e40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	4a81      	ldr	r2, [pc, #516]	; (800304c <HAL_I2C_Init+0x274>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d807      	bhi.n	8002e5c <HAL_I2C_Init+0x84>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4a80      	ldr	r2, [pc, #512]	; (8003050 <HAL_I2C_Init+0x278>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	bf94      	ite	ls
 8002e54:	2301      	movls	r3, #1
 8002e56:	2300      	movhi	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	e006      	b.n	8002e6a <HAL_I2C_Init+0x92>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4a7d      	ldr	r2, [pc, #500]	; (8003054 <HAL_I2C_Init+0x27c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	bf94      	ite	ls
 8002e64:	2301      	movls	r3, #1
 8002e66:	2300      	movhi	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e0e7      	b.n	8003042 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4a78      	ldr	r2, [pc, #480]	; (8003058 <HAL_I2C_Init+0x280>)
 8002e76:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7a:	0c9b      	lsrs	r3, r3, #18
 8002e7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	4a6a      	ldr	r2, [pc, #424]	; (800304c <HAL_I2C_Init+0x274>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d802      	bhi.n	8002eac <HAL_I2C_Init+0xd4>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	e009      	b.n	8002ec0 <HAL_I2C_Init+0xe8>
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002eb2:	fb02 f303 	mul.w	r3, r2, r3
 8002eb6:	4a69      	ldr	r2, [pc, #420]	; (800305c <HAL_I2C_Init+0x284>)
 8002eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebc:	099b      	lsrs	r3, r3, #6
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6812      	ldr	r2, [r2, #0]
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ed2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	495c      	ldr	r1, [pc, #368]	; (800304c <HAL_I2C_Init+0x274>)
 8002edc:	428b      	cmp	r3, r1
 8002ede:	d819      	bhi.n	8002f14 <HAL_I2C_Init+0x13c>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1e59      	subs	r1, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eee:	1c59      	adds	r1, r3, #1
 8002ef0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ef4:	400b      	ands	r3, r1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <HAL_I2C_Init+0x138>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	1e59      	subs	r1, r3, #1
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f08:	3301      	adds	r3, #1
 8002f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f0e:	e051      	b.n	8002fb4 <HAL_I2C_Init+0x1dc>
 8002f10:	2304      	movs	r3, #4
 8002f12:	e04f      	b.n	8002fb4 <HAL_I2C_Init+0x1dc>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d111      	bne.n	8002f40 <HAL_I2C_Init+0x168>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1e58      	subs	r0, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	440b      	add	r3, r1
 8002f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f2e:	3301      	adds	r3, #1
 8002f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bf0c      	ite	eq
 8002f38:	2301      	moveq	r3, #1
 8002f3a:	2300      	movne	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	e012      	b.n	8002f66 <HAL_I2C_Init+0x18e>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	1e58      	subs	r0, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	0099      	lsls	r1, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f56:	3301      	adds	r3, #1
 8002f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	bf0c      	ite	eq
 8002f60:	2301      	moveq	r3, #1
 8002f62:	2300      	movne	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_I2C_Init+0x196>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e022      	b.n	8002fb4 <HAL_I2C_Init+0x1dc>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10e      	bne.n	8002f94 <HAL_I2C_Init+0x1bc>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1e58      	subs	r0, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6859      	ldr	r1, [r3, #4]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	440b      	add	r3, r1
 8002f84:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f88:	3301      	adds	r3, #1
 8002f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f92:	e00f      	b.n	8002fb4 <HAL_I2C_Init+0x1dc>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	1e58      	subs	r0, r3, #1
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6859      	ldr	r1, [r3, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	0099      	lsls	r1, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002faa:	3301      	adds	r3, #1
 8002fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	6809      	ldr	r1, [r1, #0]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69da      	ldr	r2, [r3, #28]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fe2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6911      	ldr	r1, [r2, #16]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	68d2      	ldr	r2, [r2, #12]
 8002fee:	4311      	orrs	r1, r2
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6812      	ldr	r2, [r2, #0]
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695a      	ldr	r2, [r3, #20]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	000186a0 	.word	0x000186a0
 8003050:	001e847f 	.word	0x001e847f
 8003054:	003d08ff 	.word	0x003d08ff
 8003058:	431bde83 	.word	0x431bde83
 800305c:	10624dd3 	.word	0x10624dd3

08003060 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e128      	b.n	80032c4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d109      	bne.n	8003092 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a90      	ldr	r2, [pc, #576]	; (80032cc <HAL_I2S_Init+0x26c>)
 800308a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7fd fce1 	bl	8000a54 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2202      	movs	r2, #2
 8003096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030a8:	f023 030f 	bic.w	r3, r3, #15
 80030ac:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2202      	movs	r2, #2
 80030b4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d060      	beq.n	8003180 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d102      	bne.n	80030cc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80030c6:	2310      	movs	r3, #16
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	e001      	b.n	80030d0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80030cc:	2320      	movs	r3, #32
 80030ce:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	d802      	bhi.n	80030de <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80030de:	2001      	movs	r0, #1
 80030e0:	f001 f9d8 	bl	8004494 <HAL_RCCEx_GetPeriphCLKFreq>
 80030e4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ee:	d125      	bne.n	800313c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d010      	beq.n	800311a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	461a      	mov	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	fbb2 f3f3 	udiv	r3, r2, r3
 8003114:	3305      	adds	r3, #5
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	e01f      	b.n	800315a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	fbb2 f2f3 	udiv	r2, r2, r3
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	461a      	mov	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	fbb2 f3f3 	udiv	r3, r2, r3
 8003136:	3305      	adds	r3, #5
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	e00e      	b.n	800315a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	fbb2 f2f3 	udiv	r2, r2, r3
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	461a      	mov	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	fbb2 f3f3 	udiv	r3, r2, r3
 8003156:	3305      	adds	r3, #5
 8003158:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4a5c      	ldr	r2, [pc, #368]	; (80032d0 <HAL_I2S_Init+0x270>)
 800315e:	fba2 2303 	umull	r2, r3, r2, r3
 8003162:	08db      	lsrs	r3, r3, #3
 8003164:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	085b      	lsrs	r3, r3, #1
 8003176:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	021b      	lsls	r3, r3, #8
 800317c:	61bb      	str	r3, [r7, #24]
 800317e:	e003      	b.n	8003188 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003180:	2302      	movs	r3, #2
 8003182:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d902      	bls.n	8003194 <HAL_I2S_Init+0x134>
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	2bff      	cmp	r3, #255	; 0xff
 8003192:	d907      	bls.n	80031a4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003198:	f043 0210 	orr.w	r2, r3, #16
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e08f      	b.n	80032c4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	ea42 0103 	orr.w	r1, r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031c2:	f023 030f 	bic.w	r3, r3, #15
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6851      	ldr	r1, [r2, #4]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6892      	ldr	r2, [r2, #8]
 80031ce:	4311      	orrs	r1, r2
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	68d2      	ldr	r2, [r2, #12]
 80031d4:	4311      	orrs	r1, r2
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6992      	ldr	r2, [r2, #24]
 80031da:	430a      	orrs	r2, r1
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031e6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d161      	bne.n	80032b4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a38      	ldr	r2, [pc, #224]	; (80032d4 <HAL_I2S_Init+0x274>)
 80031f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a37      	ldr	r2, [pc, #220]	; (80032d8 <HAL_I2S_Init+0x278>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d101      	bne.n	8003204 <HAL_I2S_Init+0x1a4>
 8003200:	4b36      	ldr	r3, [pc, #216]	; (80032dc <HAL_I2S_Init+0x27c>)
 8003202:	e001      	b.n	8003208 <HAL_I2S_Init+0x1a8>
 8003204:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6812      	ldr	r2, [r2, #0]
 800320e:	4932      	ldr	r1, [pc, #200]	; (80032d8 <HAL_I2S_Init+0x278>)
 8003210:	428a      	cmp	r2, r1
 8003212:	d101      	bne.n	8003218 <HAL_I2S_Init+0x1b8>
 8003214:	4a31      	ldr	r2, [pc, #196]	; (80032dc <HAL_I2S_Init+0x27c>)
 8003216:	e001      	b.n	800321c <HAL_I2S_Init+0x1bc>
 8003218:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800321c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003220:	f023 030f 	bic.w	r3, r3, #15
 8003224:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a2b      	ldr	r2, [pc, #172]	; (80032d8 <HAL_I2S_Init+0x278>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d101      	bne.n	8003234 <HAL_I2S_Init+0x1d4>
 8003230:	4b2a      	ldr	r3, [pc, #168]	; (80032dc <HAL_I2S_Init+0x27c>)
 8003232:	e001      	b.n	8003238 <HAL_I2S_Init+0x1d8>
 8003234:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003238:	2202      	movs	r2, #2
 800323a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a25      	ldr	r2, [pc, #148]	; (80032d8 <HAL_I2S_Init+0x278>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d101      	bne.n	800324a <HAL_I2S_Init+0x1ea>
 8003246:	4b25      	ldr	r3, [pc, #148]	; (80032dc <HAL_I2S_Init+0x27c>)
 8003248:	e001      	b.n	800324e <HAL_I2S_Init+0x1ee>
 800324a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800325a:	d003      	beq.n	8003264 <HAL_I2S_Init+0x204>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d103      	bne.n	800326c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003264:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	e001      	b.n	8003270 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800326c:	2300      	movs	r3, #0
 800326e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800327a:	4313      	orrs	r3, r2
 800327c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003284:	4313      	orrs	r3, r2
 8003286:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800328e:	4313      	orrs	r3, r2
 8003290:	b29a      	uxth	r2, r3
 8003292:	897b      	ldrh	r3, [r7, #10]
 8003294:	4313      	orrs	r3, r2
 8003296:	b29b      	uxth	r3, r3
 8003298:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800329c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a0d      	ldr	r2, [pc, #52]	; (80032d8 <HAL_I2S_Init+0x278>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d101      	bne.n	80032ac <HAL_I2S_Init+0x24c>
 80032a8:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <HAL_I2S_Init+0x27c>)
 80032aa:	e001      	b.n	80032b0 <HAL_I2S_Init+0x250>
 80032ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032b0:	897a      	ldrh	r2, [r7, #10]
 80032b2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3720      	adds	r7, #32
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	080033d7 	.word	0x080033d7
 80032d0:	cccccccd 	.word	0xcccccccd
 80032d4:	080034ed 	.word	0x080034ed
 80032d8:	40003800 	.word	0x40003800
 80032dc:	40003400 	.word	0x40003400

080032e0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	881a      	ldrh	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	1c9a      	adds	r2, r3, #2
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333e:	b29b      	uxth	r3, r3
 8003340:	3b01      	subs	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334c:	b29b      	uxth	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10e      	bne.n	8003370 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003360:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff ffb8 	bl	80032e0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003370:	bf00      	nop
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	b292      	uxth	r2, r2
 800338c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003392:	1c9a      	adds	r2, r3, #2
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800339c:	b29b      	uxth	r3, r3
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10e      	bne.n	80033ce <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033be:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff ff93 	bl	80032f4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033ce:	bf00      	nop
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b086      	sub	sp, #24
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d13a      	bne.n	8003468 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d109      	bne.n	8003410 <I2S_IRQHandler+0x3a>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003406:	2b40      	cmp	r3, #64	; 0x40
 8003408:	d102      	bne.n	8003410 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7ff ffb4 	bl	8003378 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003416:	2b40      	cmp	r3, #64	; 0x40
 8003418:	d126      	bne.n	8003468 <I2S_IRQHandler+0x92>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 0320 	and.w	r3, r3, #32
 8003424:	2b20      	cmp	r3, #32
 8003426:	d11f      	bne.n	8003468 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003436:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003438:	2300      	movs	r3, #0
 800343a:	613b      	str	r3, [r7, #16]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	613b      	str	r3, [r7, #16]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	f043 0202 	orr.w	r2, r3, #2
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff ff50 	bl	8003308 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b03      	cmp	r3, #3
 8003472:	d136      	bne.n	80034e2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b02      	cmp	r3, #2
 800347c:	d109      	bne.n	8003492 <I2S_IRQHandler+0xbc>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003488:	2b80      	cmp	r3, #128	; 0x80
 800348a:	d102      	bne.n	8003492 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7ff ff45 	bl	800331c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f003 0308 	and.w	r3, r3, #8
 8003498:	2b08      	cmp	r3, #8
 800349a:	d122      	bne.n	80034e2 <I2S_IRQHandler+0x10c>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	d11b      	bne.n	80034e2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034b8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034ba:	2300      	movs	r3, #0
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d4:	f043 0204 	orr.w	r2, r3, #4
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff ff13 	bl	8003308 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034e2:	bf00      	nop
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
	...

080034ec <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a92      	ldr	r2, [pc, #584]	; (800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d101      	bne.n	800350a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003506:	4b92      	ldr	r3, [pc, #584]	; (8003750 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003508:	e001      	b.n	800350e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800350a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a8b      	ldr	r2, [pc, #556]	; (800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d101      	bne.n	8003528 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003524:	4b8a      	ldr	r3, [pc, #552]	; (8003750 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003526:	e001      	b.n	800352c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003528:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003538:	d004      	beq.n	8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	f040 8099 	bne.w	8003676 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b02      	cmp	r3, #2
 800354c:	d107      	bne.n	800355e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f925 	bl	80037a8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b01      	cmp	r3, #1
 8003566:	d107      	bne.n	8003578 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f9c8 	bl	8003908 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357e:	2b40      	cmp	r3, #64	; 0x40
 8003580:	d13a      	bne.n	80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f003 0320 	and.w	r3, r3, #32
 8003588:	2b00      	cmp	r3, #0
 800358a:	d035      	beq.n	80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a6e      	ldr	r2, [pc, #440]	; (800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d101      	bne.n	800359a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003596:	4b6e      	ldr	r3, [pc, #440]	; (8003750 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003598:	e001      	b.n	800359e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800359a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4969      	ldr	r1, [pc, #420]	; (800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035a6:	428b      	cmp	r3, r1
 80035a8:	d101      	bne.n	80035ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80035aa:	4b69      	ldr	r3, [pc, #420]	; (8003750 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035ac:	e001      	b.n	80035b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80035ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035b6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035c6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	f043 0202 	orr.w	r2, r3, #2
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7ff fe88 	bl	8003308 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b08      	cmp	r3, #8
 8003600:	f040 80c3 	bne.w	800378a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 80bd 	beq.w	800378a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800361e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a49      	ldr	r2, [pc, #292]	; (800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d101      	bne.n	800362e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800362a:	4b49      	ldr	r3, [pc, #292]	; (8003750 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800362c:	e001      	b.n	8003632 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800362e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4944      	ldr	r1, [pc, #272]	; (800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800363a:	428b      	cmp	r3, r1
 800363c:	d101      	bne.n	8003642 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800363e:	4b44      	ldr	r3, [pc, #272]	; (8003750 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003640:	e001      	b.n	8003646 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003642:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003646:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800364a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800364c:	2300      	movs	r3, #0
 800364e:	60bb      	str	r3, [r7, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	60bb      	str	r3, [r7, #8]
 8003658:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003666:	f043 0204 	orr.w	r2, r3, #4
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff fe4a 	bl	8003308 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003674:	e089      	b.n	800378a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b02      	cmp	r3, #2
 800367e:	d107      	bne.n	8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f8be 	bl	800380c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b01      	cmp	r3, #1
 8003698:	d107      	bne.n	80036aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d002      	beq.n	80036aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f8fd 	bl	80038a4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b0:	2b40      	cmp	r3, #64	; 0x40
 80036b2:	d12f      	bne.n	8003714 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d02a      	beq.n	8003714 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036cc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a1e      	ldr	r2, [pc, #120]	; (800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d101      	bne.n	80036dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80036d8:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036da:	e001      	b.n	80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80036dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4919      	ldr	r1, [pc, #100]	; (800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036e8:	428b      	cmp	r3, r1
 80036ea:	d101      	bne.n	80036f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80036ec:	4b18      	ldr	r3, [pc, #96]	; (8003750 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036ee:	e001      	b.n	80036f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80036f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036f8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003706:	f043 0202 	orr.w	r2, r3, #2
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7ff fdfa 	bl	8003308 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b08      	cmp	r3, #8
 800371c:	d136      	bne.n	800378c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f003 0320 	and.w	r3, r3, #32
 8003724:	2b00      	cmp	r3, #0
 8003726:	d031      	beq.n	800378c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a07      	ldr	r2, [pc, #28]	; (800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d101      	bne.n	8003736 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003732:	4b07      	ldr	r3, [pc, #28]	; (8003750 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003734:	e001      	b.n	800373a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003736:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4902      	ldr	r1, [pc, #8]	; (800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003742:	428b      	cmp	r3, r1
 8003744:	d106      	bne.n	8003754 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003746:	4b02      	ldr	r3, [pc, #8]	; (8003750 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003748:	e006      	b.n	8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800374a:	bf00      	nop
 800374c:	40003800 	.word	0x40003800
 8003750:	40003400 	.word	0x40003400
 8003754:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003758:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800375c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800376c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	f043 0204 	orr.w	r2, r3, #4
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff fdc0 	bl	8003308 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003788:	e000      	b.n	800378c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800378a:	bf00      	nop
}
 800378c:	bf00      	nop
 800378e:	3720      	adds	r7, #32
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	1c99      	adds	r1, r3, #2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6251      	str	r1, [r2, #36]	; 0x24
 80037ba:	881a      	ldrh	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d113      	bne.n	8003802 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d106      	bne.n	8003802 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff ffc9 	bl	8003794 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003802:	bf00      	nop
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	1c99      	adds	r1, r3, #2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6251      	str	r1, [r2, #36]	; 0x24
 800381e:	8819      	ldrh	r1, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a1d      	ldr	r2, [pc, #116]	; (800389c <I2SEx_TxISR_I2SExt+0x90>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d101      	bne.n	800382e <I2SEx_TxISR_I2SExt+0x22>
 800382a:	4b1d      	ldr	r3, [pc, #116]	; (80038a0 <I2SEx_TxISR_I2SExt+0x94>)
 800382c:	e001      	b.n	8003832 <I2SEx_TxISR_I2SExt+0x26>
 800382e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003832:	460a      	mov	r2, r1
 8003834:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383a:	b29b      	uxth	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d121      	bne.n	8003892 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a12      	ldr	r2, [pc, #72]	; (800389c <I2SEx_TxISR_I2SExt+0x90>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d101      	bne.n	800385c <I2SEx_TxISR_I2SExt+0x50>
 8003858:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <I2SEx_TxISR_I2SExt+0x94>)
 800385a:	e001      	b.n	8003860 <I2SEx_TxISR_I2SExt+0x54>
 800385c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	490d      	ldr	r1, [pc, #52]	; (800389c <I2SEx_TxISR_I2SExt+0x90>)
 8003868:	428b      	cmp	r3, r1
 800386a:	d101      	bne.n	8003870 <I2SEx_TxISR_I2SExt+0x64>
 800386c:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <I2SEx_TxISR_I2SExt+0x94>)
 800386e:	e001      	b.n	8003874 <I2SEx_TxISR_I2SExt+0x68>
 8003870:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003874:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003878:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800387e:	b29b      	uxth	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d106      	bne.n	8003892 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff ff81 	bl	8003794 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40003800 	.word	0x40003800
 80038a0:	40003400 	.word	0x40003400

080038a4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68d8      	ldr	r0, [r3, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	1c99      	adds	r1, r3, #2
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	62d1      	str	r1, [r2, #44]	; 0x2c
 80038bc:	b282      	uxth	r2, r0
 80038be:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d113      	bne.n	8003900 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038e6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d106      	bne.n	8003900 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7ff ff4a 	bl	8003794 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003900:	bf00      	nop
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a20      	ldr	r2, [pc, #128]	; (8003998 <I2SEx_RxISR_I2SExt+0x90>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d101      	bne.n	800391e <I2SEx_RxISR_I2SExt+0x16>
 800391a:	4b20      	ldr	r3, [pc, #128]	; (800399c <I2SEx_RxISR_I2SExt+0x94>)
 800391c:	e001      	b.n	8003922 <I2SEx_RxISR_I2SExt+0x1a>
 800391e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003922:	68d8      	ldr	r0, [r3, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	1c99      	adds	r1, r3, #2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800392e:	b282      	uxth	r2, r0
 8003930:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d121      	bne.n	800398e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a12      	ldr	r2, [pc, #72]	; (8003998 <I2SEx_RxISR_I2SExt+0x90>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d101      	bne.n	8003958 <I2SEx_RxISR_I2SExt+0x50>
 8003954:	4b11      	ldr	r3, [pc, #68]	; (800399c <I2SEx_RxISR_I2SExt+0x94>)
 8003956:	e001      	b.n	800395c <I2SEx_RxISR_I2SExt+0x54>
 8003958:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	490d      	ldr	r1, [pc, #52]	; (8003998 <I2SEx_RxISR_I2SExt+0x90>)
 8003964:	428b      	cmp	r3, r1
 8003966:	d101      	bne.n	800396c <I2SEx_RxISR_I2SExt+0x64>
 8003968:	4b0c      	ldr	r3, [pc, #48]	; (800399c <I2SEx_RxISR_I2SExt+0x94>)
 800396a:	e001      	b.n	8003970 <I2SEx_RxISR_I2SExt+0x68>
 800396c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003970:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003974:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d106      	bne.n	800398e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff ff03 	bl	8003794 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40003800 	.word	0x40003800
 800399c:	40003400 	.word	0x40003400

080039a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e267      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d075      	beq.n	8003aaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039be:	4b88      	ldr	r3, [pc, #544]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d00c      	beq.n	80039e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ca:	4b85      	ldr	r3, [pc, #532]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d112      	bne.n	80039fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039d6:	4b82      	ldr	r3, [pc, #520]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039e2:	d10b      	bne.n	80039fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e4:	4b7e      	ldr	r3, [pc, #504]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d05b      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x108>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d157      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e242      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a04:	d106      	bne.n	8003a14 <HAL_RCC_OscConfig+0x74>
 8003a06:	4b76      	ldr	r3, [pc, #472]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a75      	ldr	r2, [pc, #468]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	e01d      	b.n	8003a50 <HAL_RCC_OscConfig+0xb0>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x98>
 8003a1e:	4b70      	ldr	r3, [pc, #448]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a6f      	ldr	r2, [pc, #444]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	4b6d      	ldr	r3, [pc, #436]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a6c      	ldr	r2, [pc, #432]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	e00b      	b.n	8003a50 <HAL_RCC_OscConfig+0xb0>
 8003a38:	4b69      	ldr	r3, [pc, #420]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a68      	ldr	r2, [pc, #416]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	4b66      	ldr	r3, [pc, #408]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a65      	ldr	r2, [pc, #404]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d013      	beq.n	8003a80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a58:	f7fd fa2a 	bl	8000eb0 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a60:	f7fd fa26 	bl	8000eb0 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b64      	cmp	r3, #100	; 0x64
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e207      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a72:	4b5b      	ldr	r3, [pc, #364]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCC_OscConfig+0xc0>
 8003a7e:	e014      	b.n	8003aaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a80:	f7fd fa16 	bl	8000eb0 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a88:	f7fd fa12 	bl	8000eb0 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b64      	cmp	r3, #100	; 0x64
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e1f3      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9a:	4b51      	ldr	r3, [pc, #324]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0xe8>
 8003aa6:	e000      	b.n	8003aaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d063      	beq.n	8003b7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ab6:	4b4a      	ldr	r3, [pc, #296]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00b      	beq.n	8003ada <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ac2:	4b47      	ldr	r3, [pc, #284]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d11c      	bne.n	8003b08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ace:	4b44      	ldr	r3, [pc, #272]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d116      	bne.n	8003b08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ada:	4b41      	ldr	r3, [pc, #260]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_RCC_OscConfig+0x152>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d001      	beq.n	8003af2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e1c7      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af2:	4b3b      	ldr	r3, [pc, #236]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4937      	ldr	r1, [pc, #220]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b06:	e03a      	b.n	8003b7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d020      	beq.n	8003b52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b10:	4b34      	ldr	r3, [pc, #208]	; (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b16:	f7fd f9cb 	bl	8000eb0 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b1e:	f7fd f9c7 	bl	8000eb0 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e1a8      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b30:	4b2b      	ldr	r3, [pc, #172]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3c:	4b28      	ldr	r3, [pc, #160]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	4925      	ldr	r1, [pc, #148]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	600b      	str	r3, [r1, #0]
 8003b50:	e015      	b.n	8003b7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b52:	4b24      	ldr	r3, [pc, #144]	; (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fd f9aa 	bl	8000eb0 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b60:	f7fd f9a6 	bl	8000eb0 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e187      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b72:	4b1b      	ldr	r3, [pc, #108]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d036      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d016      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b92:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <HAL_RCC_OscConfig+0x248>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b98:	f7fd f98a 	bl	8000eb0 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ba0:	f7fd f986 	bl	8000eb0 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e167      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb2:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x200>
 8003bbe:	e01b      	b.n	8003bf8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc0:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <HAL_RCC_OscConfig+0x248>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc6:	f7fd f973 	bl	8000eb0 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bcc:	e00e      	b.n	8003bec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bce:	f7fd f96f 	bl	8000eb0 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d907      	bls.n	8003bec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e150      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
 8003be0:	40023800 	.word	0x40023800
 8003be4:	42470000 	.word	0x42470000
 8003be8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bec:	4b88      	ldr	r3, [pc, #544]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1ea      	bne.n	8003bce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 8097 	beq.w	8003d34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c06:	2300      	movs	r3, #0
 8003c08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c0a:	4b81      	ldr	r3, [pc, #516]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10f      	bne.n	8003c36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	4b7d      	ldr	r3, [pc, #500]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	4a7c      	ldr	r2, [pc, #496]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c24:	6413      	str	r3, [r2, #64]	; 0x40
 8003c26:	4b7a      	ldr	r3, [pc, #488]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c32:	2301      	movs	r3, #1
 8003c34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c36:	4b77      	ldr	r3, [pc, #476]	; (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d118      	bne.n	8003c74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c42:	4b74      	ldr	r3, [pc, #464]	; (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a73      	ldr	r2, [pc, #460]	; (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c4e:	f7fd f92f 	bl	8000eb0 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c56:	f7fd f92b 	bl	8000eb0 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e10c      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c68:	4b6a      	ldr	r3, [pc, #424]	; (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d106      	bne.n	8003c8a <HAL_RCC_OscConfig+0x2ea>
 8003c7c:	4b64      	ldr	r3, [pc, #400]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c80:	4a63      	ldr	r2, [pc, #396]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	6713      	str	r3, [r2, #112]	; 0x70
 8003c88:	e01c      	b.n	8003cc4 <HAL_RCC_OscConfig+0x324>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	2b05      	cmp	r3, #5
 8003c90:	d10c      	bne.n	8003cac <HAL_RCC_OscConfig+0x30c>
 8003c92:	4b5f      	ldr	r3, [pc, #380]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c96:	4a5e      	ldr	r2, [pc, #376]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c98:	f043 0304 	orr.w	r3, r3, #4
 8003c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c9e:	4b5c      	ldr	r3, [pc, #368]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca2:	4a5b      	ldr	r2, [pc, #364]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8003caa:	e00b      	b.n	8003cc4 <HAL_RCC_OscConfig+0x324>
 8003cac:	4b58      	ldr	r3, [pc, #352]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb0:	4a57      	ldr	r2, [pc, #348]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb8:	4b55      	ldr	r3, [pc, #340]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbc:	4a54      	ldr	r2, [pc, #336]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cbe:	f023 0304 	bic.w	r3, r3, #4
 8003cc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d015      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ccc:	f7fd f8f0 	bl	8000eb0 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd2:	e00a      	b.n	8003cea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd4:	f7fd f8ec 	bl	8000eb0 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e0cb      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cea:	4b49      	ldr	r3, [pc, #292]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0ee      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x334>
 8003cf6:	e014      	b.n	8003d22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf8:	f7fd f8da 	bl	8000eb0 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d00:	f7fd f8d6 	bl	8000eb0 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e0b5      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d16:	4b3e      	ldr	r3, [pc, #248]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1ee      	bne.n	8003d00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d22:	7dfb      	ldrb	r3, [r7, #23]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d105      	bne.n	8003d34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d28:	4b39      	ldr	r3, [pc, #228]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	4a38      	ldr	r2, [pc, #224]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 80a1 	beq.w	8003e80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d3e:	4b34      	ldr	r3, [pc, #208]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	2b08      	cmp	r3, #8
 8003d48:	d05c      	beq.n	8003e04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d141      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d52:	4b31      	ldr	r3, [pc, #196]	; (8003e18 <HAL_RCC_OscConfig+0x478>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7fd f8aa 	bl	8000eb0 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d60:	f7fd f8a6 	bl	8000eb0 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e087      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d72:	4b27      	ldr	r3, [pc, #156]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69da      	ldr	r2, [r3, #28]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	019b      	lsls	r3, r3, #6
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d94:	085b      	lsrs	r3, r3, #1
 8003d96:	3b01      	subs	r3, #1
 8003d98:	041b      	lsls	r3, r3, #16
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	061b      	lsls	r3, r3, #24
 8003da2:	491b      	ldr	r1, [pc, #108]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da8:	4b1b      	ldr	r3, [pc, #108]	; (8003e18 <HAL_RCC_OscConfig+0x478>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dae:	f7fd f87f 	bl	8000eb0 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db6:	f7fd f87b 	bl	8000eb0 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e05c      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc8:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x416>
 8003dd4:	e054      	b.n	8003e80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd6:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <HAL_RCC_OscConfig+0x478>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7fd f868 	bl	8000eb0 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de4:	f7fd f864 	bl	8000eb0 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e045      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df6:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0x444>
 8003e02:	e03d      	b.n	8003e80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d107      	bne.n	8003e1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e038      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
 8003e10:	40023800 	.word	0x40023800
 8003e14:	40007000 	.word	0x40007000
 8003e18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e1c:	4b1b      	ldr	r3, [pc, #108]	; (8003e8c <HAL_RCC_OscConfig+0x4ec>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d028      	beq.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d121      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d11a      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d111      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e62:	085b      	lsrs	r3, r3, #1
 8003e64:	3b01      	subs	r3, #1
 8003e66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d107      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40023800 	.word	0x40023800

08003e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0cc      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea4:	4b68      	ldr	r3, [pc, #416]	; (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d90c      	bls.n	8003ecc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb2:	4b65      	ldr	r3, [pc, #404]	; (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eba:	4b63      	ldr	r3, [pc, #396]	; (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0b8      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d020      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d005      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ee4:	4b59      	ldr	r3, [pc, #356]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	4a58      	ldr	r2, [pc, #352]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003efc:	4b53      	ldr	r3, [pc, #332]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4a52      	ldr	r2, [pc, #328]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f08:	4b50      	ldr	r3, [pc, #320]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	494d      	ldr	r1, [pc, #308]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d044      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d107      	bne.n	8003f3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2e:	4b47      	ldr	r3, [pc, #284]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d119      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e07f      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d003      	beq.n	8003f4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d107      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4e:	4b3f      	ldr	r3, [pc, #252]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d109      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e06f      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5e:	4b3b      	ldr	r3, [pc, #236]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e067      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f6e:	4b37      	ldr	r3, [pc, #220]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f023 0203 	bic.w	r2, r3, #3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	4934      	ldr	r1, [pc, #208]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f80:	f7fc ff96 	bl	8000eb0 <HAL_GetTick>
 8003f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f86:	e00a      	b.n	8003f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f88:	f7fc ff92 	bl	8000eb0 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e04f      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	4b2b      	ldr	r3, [pc, #172]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 020c 	and.w	r2, r3, #12
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d1eb      	bne.n	8003f88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb0:	4b25      	ldr	r3, [pc, #148]	; (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d20c      	bcs.n	8003fd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fbe:	4b22      	ldr	r3, [pc, #136]	; (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc6:	4b20      	ldr	r3, [pc, #128]	; (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d001      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e032      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe4:	4b19      	ldr	r3, [pc, #100]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	4916      	ldr	r1, [pc, #88]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004002:	4b12      	ldr	r3, [pc, #72]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	490e      	ldr	r1, [pc, #56]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	4313      	orrs	r3, r2
 8004014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004016:	f000 f821 	bl	800405c <HAL_RCC_GetSysClockFreq>
 800401a:	4602      	mov	r2, r0
 800401c:	4b0b      	ldr	r3, [pc, #44]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	490a      	ldr	r1, [pc, #40]	; (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8004028:	5ccb      	ldrb	r3, [r1, r3]
 800402a:	fa22 f303 	lsr.w	r3, r2, r3
 800402e:	4a09      	ldr	r2, [pc, #36]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8004030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004032:	4b09      	ldr	r3, [pc, #36]	; (8004058 <HAL_RCC_ClockConfig+0x1c8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f7fc fef6 	bl	8000e28 <HAL_InitTick>

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40023c00 	.word	0x40023c00
 800404c:	40023800 	.word	0x40023800
 8004050:	08008ee4 	.word	0x08008ee4
 8004054:	20000000 	.word	0x20000000
 8004058:	20000004 	.word	0x20000004

0800405c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800405c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004060:	b094      	sub	sp, #80	; 0x50
 8004062:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	647b      	str	r3, [r7, #68]	; 0x44
 8004068:	2300      	movs	r3, #0
 800406a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800406c:	2300      	movs	r3, #0
 800406e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004074:	4b79      	ldr	r3, [pc, #484]	; (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 030c 	and.w	r3, r3, #12
 800407c:	2b08      	cmp	r3, #8
 800407e:	d00d      	beq.n	800409c <HAL_RCC_GetSysClockFreq+0x40>
 8004080:	2b08      	cmp	r3, #8
 8004082:	f200 80e1 	bhi.w	8004248 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0x34>
 800408a:	2b04      	cmp	r3, #4
 800408c:	d003      	beq.n	8004096 <HAL_RCC_GetSysClockFreq+0x3a>
 800408e:	e0db      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004090:	4b73      	ldr	r3, [pc, #460]	; (8004260 <HAL_RCC_GetSysClockFreq+0x204>)
 8004092:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004094:	e0db      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004096:	4b73      	ldr	r3, [pc, #460]	; (8004264 <HAL_RCC_GetSysClockFreq+0x208>)
 8004098:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800409a:	e0d8      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800409c:	4b6f      	ldr	r3, [pc, #444]	; (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040a6:	4b6d      	ldr	r3, [pc, #436]	; (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d063      	beq.n	800417a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040b2:	4b6a      	ldr	r3, [pc, #424]	; (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	099b      	lsrs	r3, r3, #6
 80040b8:	2200      	movs	r2, #0
 80040ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80040bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c4:	633b      	str	r3, [r7, #48]	; 0x30
 80040c6:	2300      	movs	r3, #0
 80040c8:	637b      	str	r3, [r7, #52]	; 0x34
 80040ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040ce:	4622      	mov	r2, r4
 80040d0:	462b      	mov	r3, r5
 80040d2:	f04f 0000 	mov.w	r0, #0
 80040d6:	f04f 0100 	mov.w	r1, #0
 80040da:	0159      	lsls	r1, r3, #5
 80040dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040e0:	0150      	lsls	r0, r2, #5
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4621      	mov	r1, r4
 80040e8:	1a51      	subs	r1, r2, r1
 80040ea:	6139      	str	r1, [r7, #16]
 80040ec:	4629      	mov	r1, r5
 80040ee:	eb63 0301 	sbc.w	r3, r3, r1
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004100:	4659      	mov	r1, fp
 8004102:	018b      	lsls	r3, r1, #6
 8004104:	4651      	mov	r1, sl
 8004106:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800410a:	4651      	mov	r1, sl
 800410c:	018a      	lsls	r2, r1, #6
 800410e:	4651      	mov	r1, sl
 8004110:	ebb2 0801 	subs.w	r8, r2, r1
 8004114:	4659      	mov	r1, fp
 8004116:	eb63 0901 	sbc.w	r9, r3, r1
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004126:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800412a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800412e:	4690      	mov	r8, r2
 8004130:	4699      	mov	r9, r3
 8004132:	4623      	mov	r3, r4
 8004134:	eb18 0303 	adds.w	r3, r8, r3
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	462b      	mov	r3, r5
 800413c:	eb49 0303 	adc.w	r3, r9, r3
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800414e:	4629      	mov	r1, r5
 8004150:	024b      	lsls	r3, r1, #9
 8004152:	4621      	mov	r1, r4
 8004154:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004158:	4621      	mov	r1, r4
 800415a:	024a      	lsls	r2, r1, #9
 800415c:	4610      	mov	r0, r2
 800415e:	4619      	mov	r1, r3
 8004160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004162:	2200      	movs	r2, #0
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
 8004166:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004168:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800416c:	f7fc f82c 	bl	80001c8 <__aeabi_uldivmod>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	4613      	mov	r3, r2
 8004176:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004178:	e058      	b.n	800422c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800417a:	4b38      	ldr	r3, [pc, #224]	; (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	099b      	lsrs	r3, r3, #6
 8004180:	2200      	movs	r2, #0
 8004182:	4618      	mov	r0, r3
 8004184:	4611      	mov	r1, r2
 8004186:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800418a:	623b      	str	r3, [r7, #32]
 800418c:	2300      	movs	r3, #0
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
 8004190:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004194:	4642      	mov	r2, r8
 8004196:	464b      	mov	r3, r9
 8004198:	f04f 0000 	mov.w	r0, #0
 800419c:	f04f 0100 	mov.w	r1, #0
 80041a0:	0159      	lsls	r1, r3, #5
 80041a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041a6:	0150      	lsls	r0, r2, #5
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4641      	mov	r1, r8
 80041ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80041b2:	4649      	mov	r1, r9
 80041b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041cc:	ebb2 040a 	subs.w	r4, r2, sl
 80041d0:	eb63 050b 	sbc.w	r5, r3, fp
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	00eb      	lsls	r3, r5, #3
 80041de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041e2:	00e2      	lsls	r2, r4, #3
 80041e4:	4614      	mov	r4, r2
 80041e6:	461d      	mov	r5, r3
 80041e8:	4643      	mov	r3, r8
 80041ea:	18e3      	adds	r3, r4, r3
 80041ec:	603b      	str	r3, [r7, #0]
 80041ee:	464b      	mov	r3, r9
 80041f0:	eb45 0303 	adc.w	r3, r5, r3
 80041f4:	607b      	str	r3, [r7, #4]
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	f04f 0300 	mov.w	r3, #0
 80041fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004202:	4629      	mov	r1, r5
 8004204:	028b      	lsls	r3, r1, #10
 8004206:	4621      	mov	r1, r4
 8004208:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800420c:	4621      	mov	r1, r4
 800420e:	028a      	lsls	r2, r1, #10
 8004210:	4610      	mov	r0, r2
 8004212:	4619      	mov	r1, r3
 8004214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004216:	2200      	movs	r2, #0
 8004218:	61bb      	str	r3, [r7, #24]
 800421a:	61fa      	str	r2, [r7, #28]
 800421c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004220:	f7fb ffd2 	bl	80001c8 <__aeabi_uldivmod>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4613      	mov	r3, r2
 800422a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800422c:	4b0b      	ldr	r3, [pc, #44]	; (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	0c1b      	lsrs	r3, r3, #16
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	3301      	adds	r3, #1
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800423c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800423e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004246:	e002      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004248:	4b05      	ldr	r3, [pc, #20]	; (8004260 <HAL_RCC_GetSysClockFreq+0x204>)
 800424a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800424c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800424e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004250:	4618      	mov	r0, r3
 8004252:	3750      	adds	r7, #80	; 0x50
 8004254:	46bd      	mov	sp, r7
 8004256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800425a:	bf00      	nop
 800425c:	40023800 	.word	0x40023800
 8004260:	00f42400 	.word	0x00f42400
 8004264:	007a1200 	.word	0x007a1200

08004268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800426c:	4b03      	ldr	r3, [pc, #12]	; (800427c <HAL_RCC_GetHCLKFreq+0x14>)
 800426e:	681b      	ldr	r3, [r3, #0]
}
 8004270:	4618      	mov	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	20000000 	.word	0x20000000

08004280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004284:	f7ff fff0 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 8004288:	4602      	mov	r2, r0
 800428a:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	0a9b      	lsrs	r3, r3, #10
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	4903      	ldr	r1, [pc, #12]	; (80042a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004296:	5ccb      	ldrb	r3, [r1, r3]
 8004298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800429c:	4618      	mov	r0, r3
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40023800 	.word	0x40023800
 80042a4:	08008ef4 	.word	0x08008ef4

080042a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042ac:	f7ff ffdc 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 80042b0:	4602      	mov	r2, r0
 80042b2:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	0b5b      	lsrs	r3, r3, #13
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	4903      	ldr	r1, [pc, #12]	; (80042cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042be:	5ccb      	ldrb	r3, [r1, r3]
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40023800 	.word	0x40023800
 80042cc:	08008ef4 	.word	0x08008ef4

080042d0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d105      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d035      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042f8:	4b62      	ldr	r3, [pc, #392]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042fe:	f7fc fdd7 	bl	8000eb0 <HAL_GetTick>
 8004302:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004304:	e008      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004306:	f7fc fdd3 	bl	8000eb0 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e0b0      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004318:	4b5b      	ldr	r3, [pc, #364]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1f0      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	019a      	lsls	r2, r3, #6
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	071b      	lsls	r3, r3, #28
 8004330:	4955      	ldr	r1, [pc, #340]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004338:	4b52      	ldr	r3, [pc, #328]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800433a:	2201      	movs	r2, #1
 800433c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800433e:	f7fc fdb7 	bl	8000eb0 <HAL_GetTick>
 8004342:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004344:	e008      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004346:	f7fc fdb3 	bl	8000eb0 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e090      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004358:	4b4b      	ldr	r3, [pc, #300]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0f0      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 8083 	beq.w	8004478 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	4b44      	ldr	r3, [pc, #272]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	4a43      	ldr	r2, [pc, #268]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800437c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004380:	6413      	str	r3, [r2, #64]	; 0x40
 8004382:	4b41      	ldr	r3, [pc, #260]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800438e:	4b3f      	ldr	r3, [pc, #252]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a3e      	ldr	r2, [pc, #248]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004398:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800439a:	f7fc fd89 	bl	8000eb0 <HAL_GetTick>
 800439e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043a0:	e008      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043a2:	f7fc fd85 	bl	8000eb0 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e062      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043b4:	4b35      	ldr	r3, [pc, #212]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0f0      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043c0:	4b31      	ldr	r3, [pc, #196]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d02f      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d028      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043de:	4b2a      	ldr	r3, [pc, #168]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043e8:	4b29      	ldr	r3, [pc, #164]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043ea:	2201      	movs	r2, #1
 80043ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043ee:	4b28      	ldr	r3, [pc, #160]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80043f4:	4a24      	ldr	r2, [pc, #144]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043fa:	4b23      	ldr	r3, [pc, #140]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b01      	cmp	r3, #1
 8004404:	d114      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004406:	f7fc fd53 	bl	8000eb0 <HAL_GetTick>
 800440a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800440c:	e00a      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800440e:	f7fc fd4f 	bl	8000eb0 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	f241 3288 	movw	r2, #5000	; 0x1388
 800441c:	4293      	cmp	r3, r2
 800441e:	d901      	bls.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e02a      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004424:	4b18      	ldr	r3, [pc, #96]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0ee      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800443c:	d10d      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800443e:	4b12      	ldr	r3, [pc, #72]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800444e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004452:	490d      	ldr	r1, [pc, #52]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004454:	4313      	orrs	r3, r2
 8004456:	608b      	str	r3, [r1, #8]
 8004458:	e005      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800445a:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	4a0a      	ldr	r2, [pc, #40]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004460:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004464:	6093      	str	r3, [r2, #8]
 8004466:	4b08      	ldr	r3, [pc, #32]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004468:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004472:	4905      	ldr	r1, [pc, #20]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004474:	4313      	orrs	r3, r2
 8004476:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	42470068 	.word	0x42470068
 8004488:	40023800 	.word	0x40023800
 800448c:	40007000 	.word	0x40007000
 8004490:	42470e40 	.word	0x42470e40

08004494 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d13e      	bne.n	8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80044b2:	4b23      	ldr	r3, [pc, #140]	; (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d005      	beq.n	80044ce <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d12f      	bne.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80044c8:	4b1e      	ldr	r3, [pc, #120]	; (8004544 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044ca:	617b      	str	r3, [r7, #20]
          break;
 80044cc:	e02f      	b.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044ce:	4b1c      	ldr	r3, [pc, #112]	; (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044da:	d108      	bne.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044dc:	4b18      	ldr	r3, [pc, #96]	; (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044e4:	4a18      	ldr	r2, [pc, #96]	; (8004548 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80044e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	e007      	b.n	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044ee:	4b14      	ldr	r3, [pc, #80]	; (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044f6:	4a15      	ldr	r2, [pc, #84]	; (800454c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80044f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80044fe:	4b10      	ldr	r3, [pc, #64]	; (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004504:	099b      	lsrs	r3, r3, #6
 8004506:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	fb02 f303 	mul.w	r3, r2, r3
 8004510:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004512:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004518:	0f1b      	lsrs	r3, r3, #28
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	fbb2 f3f3 	udiv	r3, r2, r3
 8004524:	617b      	str	r3, [r7, #20]
          break;
 8004526:	e002      	b.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	617b      	str	r3, [r7, #20]
          break;
 800452c:	bf00      	nop
        }
      }
      break;
 800452e:	bf00      	nop
    }
  }
  return frequency;
 8004530:	697b      	ldr	r3, [r7, #20]
}
 8004532:	4618      	mov	r0, r3
 8004534:	371c      	adds	r7, #28
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	40023800 	.word	0x40023800
 8004544:	00bb8000 	.word	0x00bb8000
 8004548:	007a1200 	.word	0x007a1200
 800454c:	00f42400 	.word	0x00f42400

08004550 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e07b      	b.n	800465a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	2b00      	cmp	r3, #0
 8004568:	d108      	bne.n	800457c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004572:	d009      	beq.n	8004588 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	61da      	str	r2, [r3, #28]
 800457a:	e005      	b.n	8004588 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d106      	bne.n	80045a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fc fad6 	bl	8000b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460c:	ea42 0103 	orr.w	r1, r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004614:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	0c1b      	lsrs	r3, r3, #16
 8004626:	f003 0104 	and.w	r1, r3, #4
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	f003 0210 	and.w	r2, r3, #16
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69da      	ldr	r2, [r3, #28]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004648:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b082      	sub	sp, #8
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e03f      	b.n	80046f4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d106      	bne.n	800468e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7fc faab 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2224      	movs	r2, #36	; 0x24
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68da      	ldr	r2, [r3, #12]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046a4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fd7a 	bl	80051a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	691a      	ldr	r2, [r3, #16]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046ba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695a      	ldr	r2, [r3, #20]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046ca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046da:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2220      	movs	r2, #32
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08a      	sub	sp, #40	; 0x28
 8004700:	af02      	add	r7, sp, #8
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	603b      	str	r3, [r7, #0]
 8004708:	4613      	mov	r3, r2
 800470a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b20      	cmp	r3, #32
 800471a:	d17c      	bne.n	8004816 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <HAL_UART_Transmit+0x2c>
 8004722:	88fb      	ldrh	r3, [r7, #6]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e075      	b.n	8004818 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_UART_Transmit+0x3e>
 8004736:	2302      	movs	r3, #2
 8004738:	e06e      	b.n	8004818 <HAL_UART_Transmit+0x11c>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2221      	movs	r2, #33	; 0x21
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004750:	f7fc fbae 	bl	8000eb0 <HAL_GetTick>
 8004754:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	88fa      	ldrh	r2, [r7, #6]
 800475a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	88fa      	ldrh	r2, [r7, #6]
 8004760:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476a:	d108      	bne.n	800477e <HAL_UART_Transmit+0x82>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d104      	bne.n	800477e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004774:	2300      	movs	r3, #0
 8004776:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	61bb      	str	r3, [r7, #24]
 800477c:	e003      	b.n	8004786 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004782:	2300      	movs	r3, #0
 8004784:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800478e:	e02a      	b.n	80047e6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2200      	movs	r2, #0
 8004798:	2180      	movs	r1, #128	; 0x80
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 faf8 	bl	8004d90 <UART_WaitOnFlagUntilTimeout>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e036      	b.n	8004818 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10b      	bne.n	80047c8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047be:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	3302      	adds	r3, #2
 80047c4:	61bb      	str	r3, [r7, #24]
 80047c6:	e007      	b.n	80047d8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	781a      	ldrb	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	3301      	adds	r3, #1
 80047d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047dc:	b29b      	uxth	r3, r3
 80047de:	3b01      	subs	r3, #1
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1cf      	bne.n	8004790 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2200      	movs	r2, #0
 80047f8:	2140      	movs	r1, #64	; 0x40
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 fac8 	bl	8004d90 <UART_WaitOnFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e006      	b.n	8004818 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	e000      	b.n	8004818 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004816:	2302      	movs	r3, #2
  }
}
 8004818:	4618      	mov	r0, r3
 800481a:	3720      	adds	r7, #32
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b0ba      	sub	sp, #232	; 0xe8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004846:	2300      	movs	r3, #0
 8004848:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800484c:	2300      	movs	r3, #0
 800484e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800485e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10f      	bne.n	8004886 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800486a:	f003 0320 	and.w	r3, r3, #32
 800486e:	2b00      	cmp	r3, #0
 8004870:	d009      	beq.n	8004886 <HAL_UART_IRQHandler+0x66>
 8004872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004876:	f003 0320 	and.w	r3, r3, #32
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fbd3 	bl	800502a <UART_Receive_IT>
      return;
 8004884:	e256      	b.n	8004d34 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004886:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 80de 	beq.w	8004a4c <HAL_UART_IRQHandler+0x22c>
 8004890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d106      	bne.n	80048aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800489c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 80d1 	beq.w	8004a4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00b      	beq.n	80048ce <HAL_UART_IRQHandler+0xae>
 80048b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d005      	beq.n	80048ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	f043 0201 	orr.w	r2, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00b      	beq.n	80048f2 <HAL_UART_IRQHandler+0xd2>
 80048da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d005      	beq.n	80048f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	f043 0202 	orr.w	r2, r3, #2
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00b      	beq.n	8004916 <HAL_UART_IRQHandler+0xf6>
 80048fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d005      	beq.n	8004916 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	f043 0204 	orr.w	r2, r3, #4
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d011      	beq.n	8004946 <HAL_UART_IRQHandler+0x126>
 8004922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b00      	cmp	r3, #0
 800492c:	d105      	bne.n	800493a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800492e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d005      	beq.n	8004946 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	f043 0208 	orr.w	r2, r3, #8
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 81ed 	beq.w	8004d2a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	2b00      	cmp	r3, #0
 800495a:	d008      	beq.n	800496e <HAL_UART_IRQHandler+0x14e>
 800495c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004960:	f003 0320 	and.w	r3, r3, #32
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fb5e 	bl	800502a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004978:	2b40      	cmp	r3, #64	; 0x40
 800497a:	bf0c      	ite	eq
 800497c:	2301      	moveq	r3, #1
 800497e:	2300      	movne	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	2b00      	cmp	r3, #0
 8004990:	d103      	bne.n	800499a <HAL_UART_IRQHandler+0x17a>
 8004992:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004996:	2b00      	cmp	r3, #0
 8004998:	d04f      	beq.n	8004a3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fa66 	bl	8004e6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049aa:	2b40      	cmp	r3, #64	; 0x40
 80049ac:	d141      	bne.n	8004a32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3314      	adds	r3, #20
 80049b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3314      	adds	r3, #20
 80049d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049ea:	e841 2300 	strex	r3, r2, [r1]
 80049ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80049f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1d9      	bne.n	80049ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d013      	beq.n	8004a2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a06:	4a7d      	ldr	r2, [pc, #500]	; (8004bfc <HAL_UART_IRQHandler+0x3dc>)
 8004a08:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fc fbff 	bl	8001212 <HAL_DMA_Abort_IT>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d016      	beq.n	8004a48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a24:	4610      	mov	r0, r2
 8004a26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a28:	e00e      	b.n	8004a48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f99a 	bl	8004d64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a30:	e00a      	b.n	8004a48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f996 	bl	8004d64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a38:	e006      	b.n	8004a48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f992 	bl	8004d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004a46:	e170      	b.n	8004d2a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a48:	bf00      	nop
    return;
 8004a4a:	e16e      	b.n	8004d2a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	f040 814a 	bne.w	8004cea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5a:	f003 0310 	and.w	r3, r3, #16
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 8143 	beq.w	8004cea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a68:	f003 0310 	and.w	r3, r3, #16
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 813c 	beq.w	8004cea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a72:	2300      	movs	r3, #0
 8004a74:	60bb      	str	r3, [r7, #8]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	60bb      	str	r3, [r7, #8]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	60bb      	str	r3, [r7, #8]
 8004a86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a92:	2b40      	cmp	r3, #64	; 0x40
 8004a94:	f040 80b4 	bne.w	8004c00 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004aa4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 8140 	beq.w	8004d2e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ab2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	f080 8139 	bcs.w	8004d2e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ac2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ace:	f000 8088 	beq.w	8004be2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	330c      	adds	r3, #12
 8004ad8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004adc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004af0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	330c      	adds	r3, #12
 8004afa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004afe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b0e:	e841 2300 	strex	r3, r2, [r1]
 8004b12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1d9      	bne.n	8004ad2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3314      	adds	r3, #20
 8004b24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b28:	e853 3f00 	ldrex	r3, [r3]
 8004b2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b30:	f023 0301 	bic.w	r3, r3, #1
 8004b34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3314      	adds	r3, #20
 8004b3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1e1      	bne.n	8004b1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3314      	adds	r3, #20
 8004b60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b64:	e853 3f00 	ldrex	r3, [r3]
 8004b68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3314      	adds	r3, #20
 8004b7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b86:	e841 2300 	strex	r3, r2, [r1]
 8004b8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1e3      	bne.n	8004b5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	330c      	adds	r3, #12
 8004ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004baa:	e853 3f00 	ldrex	r3, [r3]
 8004bae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb2:	f023 0310 	bic.w	r3, r3, #16
 8004bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	330c      	adds	r3, #12
 8004bc0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004bc4:	65ba      	str	r2, [r7, #88]	; 0x58
 8004bc6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bcc:	e841 2300 	strex	r3, r2, [r1]
 8004bd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1e3      	bne.n	8004ba0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fc faa8 	bl	8001132 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f8c0 	bl	8004d78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bf8:	e099      	b.n	8004d2e <HAL_UART_IRQHandler+0x50e>
 8004bfa:	bf00      	nop
 8004bfc:	08004f33 	.word	0x08004f33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 808b 	beq.w	8004d32 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004c1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 8086 	beq.w	8004d32 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	330c      	adds	r3, #12
 8004c2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c30:	e853 3f00 	ldrex	r3, [r3]
 8004c34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	330c      	adds	r3, #12
 8004c46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004c4a:	647a      	str	r2, [r7, #68]	; 0x44
 8004c4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c52:	e841 2300 	strex	r3, r2, [r1]
 8004c56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1e3      	bne.n	8004c26 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3314      	adds	r3, #20
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	623b      	str	r3, [r7, #32]
   return(result);
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	f023 0301 	bic.w	r3, r3, #1
 8004c74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3314      	adds	r3, #20
 8004c7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c82:	633a      	str	r2, [r7, #48]	; 0x30
 8004c84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c8a:	e841 2300 	strex	r3, r2, [r1]
 8004c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1e3      	bne.n	8004c5e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	330c      	adds	r3, #12
 8004caa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0310 	bic.w	r3, r3, #16
 8004cba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	330c      	adds	r3, #12
 8004cc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004cc8:	61fa      	str	r2, [r7, #28]
 8004cca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	69b9      	ldr	r1, [r7, #24]
 8004cce:	69fa      	ldr	r2, [r7, #28]
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	617b      	str	r3, [r7, #20]
   return(result);
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e3      	bne.n	8004ca4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f848 	bl	8004d78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ce8:	e023      	b.n	8004d32 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d009      	beq.n	8004d0a <HAL_UART_IRQHandler+0x4ea>
 8004cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f929 	bl	8004f5a <UART_Transmit_IT>
    return;
 8004d08:	e014      	b.n	8004d34 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00e      	beq.n	8004d34 <HAL_UART_IRQHandler+0x514>
 8004d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d008      	beq.n	8004d34 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f969 	bl	8004ffa <UART_EndTransmit_IT>
    return;
 8004d28:	e004      	b.n	8004d34 <HAL_UART_IRQHandler+0x514>
    return;
 8004d2a:	bf00      	nop
 8004d2c:	e002      	b.n	8004d34 <HAL_UART_IRQHandler+0x514>
      return;
 8004d2e:	bf00      	nop
 8004d30:	e000      	b.n	8004d34 <HAL_UART_IRQHandler+0x514>
      return;
 8004d32:	bf00      	nop
  }
}
 8004d34:	37e8      	adds	r7, #232	; 0xe8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop

08004d3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	460b      	mov	r3, r1
 8004d82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b090      	sub	sp, #64	; 0x40
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	603b      	str	r3, [r7, #0]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004da0:	e050      	b.n	8004e44 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da8:	d04c      	beq.n	8004e44 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d007      	beq.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004db0:	f7fc f87e 	bl	8000eb0 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d241      	bcs.n	8004e44 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dca:	e853 3f00 	ldrex	r3, [r3]
 8004dce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	330c      	adds	r3, #12
 8004dde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004de0:	637a      	str	r2, [r7, #52]	; 0x34
 8004de2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004de6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004de8:	e841 2300 	strex	r3, r2, [r1]
 8004dec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1e5      	bne.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3314      	adds	r3, #20
 8004dfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	e853 3f00 	ldrex	r3, [r3]
 8004e02:	613b      	str	r3, [r7, #16]
   return(result);
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f023 0301 	bic.w	r3, r3, #1
 8004e0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	3314      	adds	r3, #20
 8004e12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e14:	623a      	str	r2, [r7, #32]
 8004e16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e18:	69f9      	ldr	r1, [r7, #28]
 8004e1a:	6a3a      	ldr	r2, [r7, #32]
 8004e1c:	e841 2300 	strex	r3, r2, [r1]
 8004e20:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1e5      	bne.n	8004df4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2220      	movs	r2, #32
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e00f      	b.n	8004e64 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	bf0c      	ite	eq
 8004e54:	2301      	moveq	r3, #1
 8004e56:	2300      	movne	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	79fb      	ldrb	r3, [r7, #7]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d09f      	beq.n	8004da2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3740      	adds	r7, #64	; 0x40
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b095      	sub	sp, #84	; 0x54
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	330c      	adds	r3, #12
 8004e7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e7e:	e853 3f00 	ldrex	r3, [r3]
 8004e82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	330c      	adds	r3, #12
 8004e92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e94:	643a      	str	r2, [r7, #64]	; 0x40
 8004e96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e9c:	e841 2300 	strex	r3, r2, [r1]
 8004ea0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1e5      	bne.n	8004e74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	3314      	adds	r3, #20
 8004eae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	e853 3f00 	ldrex	r3, [r3]
 8004eb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	f023 0301 	bic.w	r3, r3, #1
 8004ebe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3314      	adds	r3, #20
 8004ec6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ec8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004eca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ecc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ed0:	e841 2300 	strex	r3, r2, [r1]
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1e5      	bne.n	8004ea8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d119      	bne.n	8004f18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	330c      	adds	r3, #12
 8004eea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	e853 3f00 	ldrex	r3, [r3]
 8004ef2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f023 0310 	bic.w	r3, r3, #16
 8004efa:	647b      	str	r3, [r7, #68]	; 0x44
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	330c      	adds	r3, #12
 8004f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f04:	61ba      	str	r2, [r7, #24]
 8004f06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f08:	6979      	ldr	r1, [r7, #20]
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	e841 2300 	strex	r3, r2, [r1]
 8004f10:	613b      	str	r3, [r7, #16]
   return(result);
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1e5      	bne.n	8004ee4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f26:	bf00      	nop
 8004f28:	3754      	adds	r7, #84	; 0x54
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b084      	sub	sp, #16
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f7ff ff09 	bl	8004d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f52:	bf00      	nop
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b085      	sub	sp, #20
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b21      	cmp	r3, #33	; 0x21
 8004f6c:	d13e      	bne.n	8004fec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f76:	d114      	bne.n	8004fa2 <UART_Transmit_IT+0x48>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d110      	bne.n	8004fa2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	1c9a      	adds	r2, r3, #2
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	621a      	str	r2, [r3, #32]
 8004fa0:	e008      	b.n	8004fb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	1c59      	adds	r1, r3, #1
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6211      	str	r1, [r2, #32]
 8004fac:	781a      	ldrb	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10f      	bne.n	8004fe8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fe6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	e000      	b.n	8004fee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004fec:	2302      	movs	r3, #2
  }
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b082      	sub	sp, #8
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005010:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2220      	movs	r2, #32
 8005016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7ff fe8e 	bl	8004d3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b08c      	sub	sp, #48	; 0x30
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b22      	cmp	r3, #34	; 0x22
 800503c:	f040 80ab 	bne.w	8005196 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005048:	d117      	bne.n	800507a <UART_Receive_IT+0x50>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d113      	bne.n	800507a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005052:	2300      	movs	r3, #0
 8005054:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	b29b      	uxth	r3, r3
 8005064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005068:	b29a      	uxth	r2, r3
 800506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005072:	1c9a      	adds	r2, r3, #2
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	629a      	str	r2, [r3, #40]	; 0x28
 8005078:	e026      	b.n	80050c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005080:	2300      	movs	r3, #0
 8005082:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800508c:	d007      	beq.n	800509e <UART_Receive_IT+0x74>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10a      	bne.n	80050ac <UART_Receive_IT+0x82>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d106      	bne.n	80050ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	e008      	b.n	80050be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	4619      	mov	r1, r3
 80050d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d15a      	bne.n	8005192 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0220 	bic.w	r2, r2, #32
 80050ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68da      	ldr	r2, [r3, #12]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	695a      	ldr	r2, [r3, #20]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0201 	bic.w	r2, r2, #1
 800510a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005118:	2b01      	cmp	r3, #1
 800511a:	d135      	bne.n	8005188 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	330c      	adds	r3, #12
 8005128:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	e853 3f00 	ldrex	r3, [r3]
 8005130:	613b      	str	r3, [r7, #16]
   return(result);
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f023 0310 	bic.w	r3, r3, #16
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	330c      	adds	r3, #12
 8005140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005142:	623a      	str	r2, [r7, #32]
 8005144:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005146:	69f9      	ldr	r1, [r7, #28]
 8005148:	6a3a      	ldr	r2, [r7, #32]
 800514a:	e841 2300 	strex	r3, r2, [r1]
 800514e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1e5      	bne.n	8005122 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0310 	and.w	r3, r3, #16
 8005160:	2b10      	cmp	r3, #16
 8005162:	d10a      	bne.n	800517a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800517e:	4619      	mov	r1, r3
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff fdf9 	bl	8004d78 <HAL_UARTEx_RxEventCallback>
 8005186:	e002      	b.n	800518e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f7ff fde1 	bl	8004d50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	e002      	b.n	8005198 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	e000      	b.n	8005198 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005196:	2302      	movs	r3, #2
  }
}
 8005198:	4618      	mov	r0, r3
 800519a:	3730      	adds	r7, #48	; 0x30
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051a4:	b0c0      	sub	sp, #256	; 0x100
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051bc:	68d9      	ldr	r1, [r3, #12]
 80051be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	ea40 0301 	orr.w	r3, r0, r1
 80051c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	431a      	orrs	r2, r3
 80051e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80051f8:	f021 010c 	bic.w	r1, r1, #12
 80051fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005206:	430b      	orrs	r3, r1
 8005208:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800520a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800521a:	6999      	ldr	r1, [r3, #24]
 800521c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	ea40 0301 	orr.w	r3, r0, r1
 8005226:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	4b8f      	ldr	r3, [pc, #572]	; (800546c <UART_SetConfig+0x2cc>)
 8005230:	429a      	cmp	r2, r3
 8005232:	d005      	beq.n	8005240 <UART_SetConfig+0xa0>
 8005234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	4b8d      	ldr	r3, [pc, #564]	; (8005470 <UART_SetConfig+0x2d0>)
 800523c:	429a      	cmp	r2, r3
 800523e:	d104      	bne.n	800524a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005240:	f7ff f832 	bl	80042a8 <HAL_RCC_GetPCLK2Freq>
 8005244:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005248:	e003      	b.n	8005252 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800524a:	f7ff f819 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 800524e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800525c:	f040 810c 	bne.w	8005478 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005264:	2200      	movs	r2, #0
 8005266:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800526a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800526e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005272:	4622      	mov	r2, r4
 8005274:	462b      	mov	r3, r5
 8005276:	1891      	adds	r1, r2, r2
 8005278:	65b9      	str	r1, [r7, #88]	; 0x58
 800527a:	415b      	adcs	r3, r3
 800527c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800527e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005282:	4621      	mov	r1, r4
 8005284:	eb12 0801 	adds.w	r8, r2, r1
 8005288:	4629      	mov	r1, r5
 800528a:	eb43 0901 	adc.w	r9, r3, r1
 800528e:	f04f 0200 	mov.w	r2, #0
 8005292:	f04f 0300 	mov.w	r3, #0
 8005296:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800529a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800529e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052a2:	4690      	mov	r8, r2
 80052a4:	4699      	mov	r9, r3
 80052a6:	4623      	mov	r3, r4
 80052a8:	eb18 0303 	adds.w	r3, r8, r3
 80052ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80052b0:	462b      	mov	r3, r5
 80052b2:	eb49 0303 	adc.w	r3, r9, r3
 80052b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80052ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80052ce:	460b      	mov	r3, r1
 80052d0:	18db      	adds	r3, r3, r3
 80052d2:	653b      	str	r3, [r7, #80]	; 0x50
 80052d4:	4613      	mov	r3, r2
 80052d6:	eb42 0303 	adc.w	r3, r2, r3
 80052da:	657b      	str	r3, [r7, #84]	; 0x54
 80052dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80052e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80052e4:	f7fa ff70 	bl	80001c8 <__aeabi_uldivmod>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4b61      	ldr	r3, [pc, #388]	; (8005474 <UART_SetConfig+0x2d4>)
 80052ee:	fba3 2302 	umull	r2, r3, r3, r2
 80052f2:	095b      	lsrs	r3, r3, #5
 80052f4:	011c      	lsls	r4, r3, #4
 80052f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052fa:	2200      	movs	r2, #0
 80052fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005300:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005304:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005308:	4642      	mov	r2, r8
 800530a:	464b      	mov	r3, r9
 800530c:	1891      	adds	r1, r2, r2
 800530e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005310:	415b      	adcs	r3, r3
 8005312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005314:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005318:	4641      	mov	r1, r8
 800531a:	eb12 0a01 	adds.w	sl, r2, r1
 800531e:	4649      	mov	r1, r9
 8005320:	eb43 0b01 	adc.w	fp, r3, r1
 8005324:	f04f 0200 	mov.w	r2, #0
 8005328:	f04f 0300 	mov.w	r3, #0
 800532c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005330:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005334:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005338:	4692      	mov	sl, r2
 800533a:	469b      	mov	fp, r3
 800533c:	4643      	mov	r3, r8
 800533e:	eb1a 0303 	adds.w	r3, sl, r3
 8005342:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005346:	464b      	mov	r3, r9
 8005348:	eb4b 0303 	adc.w	r3, fp, r3
 800534c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800535c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005360:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005364:	460b      	mov	r3, r1
 8005366:	18db      	adds	r3, r3, r3
 8005368:	643b      	str	r3, [r7, #64]	; 0x40
 800536a:	4613      	mov	r3, r2
 800536c:	eb42 0303 	adc.w	r3, r2, r3
 8005370:	647b      	str	r3, [r7, #68]	; 0x44
 8005372:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005376:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800537a:	f7fa ff25 	bl	80001c8 <__aeabi_uldivmod>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4611      	mov	r1, r2
 8005384:	4b3b      	ldr	r3, [pc, #236]	; (8005474 <UART_SetConfig+0x2d4>)
 8005386:	fba3 2301 	umull	r2, r3, r3, r1
 800538a:	095b      	lsrs	r3, r3, #5
 800538c:	2264      	movs	r2, #100	; 0x64
 800538e:	fb02 f303 	mul.w	r3, r2, r3
 8005392:	1acb      	subs	r3, r1, r3
 8005394:	00db      	lsls	r3, r3, #3
 8005396:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800539a:	4b36      	ldr	r3, [pc, #216]	; (8005474 <UART_SetConfig+0x2d4>)
 800539c:	fba3 2302 	umull	r2, r3, r3, r2
 80053a0:	095b      	lsrs	r3, r3, #5
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053a8:	441c      	add	r4, r3
 80053aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ae:	2200      	movs	r2, #0
 80053b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80053b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80053bc:	4642      	mov	r2, r8
 80053be:	464b      	mov	r3, r9
 80053c0:	1891      	adds	r1, r2, r2
 80053c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80053c4:	415b      	adcs	r3, r3
 80053c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80053cc:	4641      	mov	r1, r8
 80053ce:	1851      	adds	r1, r2, r1
 80053d0:	6339      	str	r1, [r7, #48]	; 0x30
 80053d2:	4649      	mov	r1, r9
 80053d4:	414b      	adcs	r3, r1
 80053d6:	637b      	str	r3, [r7, #52]	; 0x34
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	f04f 0300 	mov.w	r3, #0
 80053e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80053e4:	4659      	mov	r1, fp
 80053e6:	00cb      	lsls	r3, r1, #3
 80053e8:	4651      	mov	r1, sl
 80053ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053ee:	4651      	mov	r1, sl
 80053f0:	00ca      	lsls	r2, r1, #3
 80053f2:	4610      	mov	r0, r2
 80053f4:	4619      	mov	r1, r3
 80053f6:	4603      	mov	r3, r0
 80053f8:	4642      	mov	r2, r8
 80053fa:	189b      	adds	r3, r3, r2
 80053fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005400:	464b      	mov	r3, r9
 8005402:	460a      	mov	r2, r1
 8005404:	eb42 0303 	adc.w	r3, r2, r3
 8005408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800540c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005418:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800541c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005420:	460b      	mov	r3, r1
 8005422:	18db      	adds	r3, r3, r3
 8005424:	62bb      	str	r3, [r7, #40]	; 0x28
 8005426:	4613      	mov	r3, r2
 8005428:	eb42 0303 	adc.w	r3, r2, r3
 800542c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800542e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005432:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005436:	f7fa fec7 	bl	80001c8 <__aeabi_uldivmod>
 800543a:	4602      	mov	r2, r0
 800543c:	460b      	mov	r3, r1
 800543e:	4b0d      	ldr	r3, [pc, #52]	; (8005474 <UART_SetConfig+0x2d4>)
 8005440:	fba3 1302 	umull	r1, r3, r3, r2
 8005444:	095b      	lsrs	r3, r3, #5
 8005446:	2164      	movs	r1, #100	; 0x64
 8005448:	fb01 f303 	mul.w	r3, r1, r3
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	3332      	adds	r3, #50	; 0x32
 8005452:	4a08      	ldr	r2, [pc, #32]	; (8005474 <UART_SetConfig+0x2d4>)
 8005454:	fba2 2303 	umull	r2, r3, r2, r3
 8005458:	095b      	lsrs	r3, r3, #5
 800545a:	f003 0207 	and.w	r2, r3, #7
 800545e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4422      	add	r2, r4
 8005466:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005468:	e105      	b.n	8005676 <UART_SetConfig+0x4d6>
 800546a:	bf00      	nop
 800546c:	40011000 	.word	0x40011000
 8005470:	40011400 	.word	0x40011400
 8005474:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800547c:	2200      	movs	r2, #0
 800547e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005482:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005486:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800548a:	4642      	mov	r2, r8
 800548c:	464b      	mov	r3, r9
 800548e:	1891      	adds	r1, r2, r2
 8005490:	6239      	str	r1, [r7, #32]
 8005492:	415b      	adcs	r3, r3
 8005494:	627b      	str	r3, [r7, #36]	; 0x24
 8005496:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800549a:	4641      	mov	r1, r8
 800549c:	1854      	adds	r4, r2, r1
 800549e:	4649      	mov	r1, r9
 80054a0:	eb43 0501 	adc.w	r5, r3, r1
 80054a4:	f04f 0200 	mov.w	r2, #0
 80054a8:	f04f 0300 	mov.w	r3, #0
 80054ac:	00eb      	lsls	r3, r5, #3
 80054ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054b2:	00e2      	lsls	r2, r4, #3
 80054b4:	4614      	mov	r4, r2
 80054b6:	461d      	mov	r5, r3
 80054b8:	4643      	mov	r3, r8
 80054ba:	18e3      	adds	r3, r4, r3
 80054bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80054c0:	464b      	mov	r3, r9
 80054c2:	eb45 0303 	adc.w	r3, r5, r3
 80054c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80054ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054da:	f04f 0200 	mov.w	r2, #0
 80054de:	f04f 0300 	mov.w	r3, #0
 80054e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80054e6:	4629      	mov	r1, r5
 80054e8:	008b      	lsls	r3, r1, #2
 80054ea:	4621      	mov	r1, r4
 80054ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054f0:	4621      	mov	r1, r4
 80054f2:	008a      	lsls	r2, r1, #2
 80054f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80054f8:	f7fa fe66 	bl	80001c8 <__aeabi_uldivmod>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	4b60      	ldr	r3, [pc, #384]	; (8005684 <UART_SetConfig+0x4e4>)
 8005502:	fba3 2302 	umull	r2, r3, r3, r2
 8005506:	095b      	lsrs	r3, r3, #5
 8005508:	011c      	lsls	r4, r3, #4
 800550a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800550e:	2200      	movs	r2, #0
 8005510:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005514:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005518:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800551c:	4642      	mov	r2, r8
 800551e:	464b      	mov	r3, r9
 8005520:	1891      	adds	r1, r2, r2
 8005522:	61b9      	str	r1, [r7, #24]
 8005524:	415b      	adcs	r3, r3
 8005526:	61fb      	str	r3, [r7, #28]
 8005528:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800552c:	4641      	mov	r1, r8
 800552e:	1851      	adds	r1, r2, r1
 8005530:	6139      	str	r1, [r7, #16]
 8005532:	4649      	mov	r1, r9
 8005534:	414b      	adcs	r3, r1
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	f04f 0200 	mov.w	r2, #0
 800553c:	f04f 0300 	mov.w	r3, #0
 8005540:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005544:	4659      	mov	r1, fp
 8005546:	00cb      	lsls	r3, r1, #3
 8005548:	4651      	mov	r1, sl
 800554a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800554e:	4651      	mov	r1, sl
 8005550:	00ca      	lsls	r2, r1, #3
 8005552:	4610      	mov	r0, r2
 8005554:	4619      	mov	r1, r3
 8005556:	4603      	mov	r3, r0
 8005558:	4642      	mov	r2, r8
 800555a:	189b      	adds	r3, r3, r2
 800555c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005560:	464b      	mov	r3, r9
 8005562:	460a      	mov	r2, r1
 8005564:	eb42 0303 	adc.w	r3, r2, r3
 8005568:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800556c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	67bb      	str	r3, [r7, #120]	; 0x78
 8005576:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005578:	f04f 0200 	mov.w	r2, #0
 800557c:	f04f 0300 	mov.w	r3, #0
 8005580:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005584:	4649      	mov	r1, r9
 8005586:	008b      	lsls	r3, r1, #2
 8005588:	4641      	mov	r1, r8
 800558a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800558e:	4641      	mov	r1, r8
 8005590:	008a      	lsls	r2, r1, #2
 8005592:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005596:	f7fa fe17 	bl	80001c8 <__aeabi_uldivmod>
 800559a:	4602      	mov	r2, r0
 800559c:	460b      	mov	r3, r1
 800559e:	4b39      	ldr	r3, [pc, #228]	; (8005684 <UART_SetConfig+0x4e4>)
 80055a0:	fba3 1302 	umull	r1, r3, r3, r2
 80055a4:	095b      	lsrs	r3, r3, #5
 80055a6:	2164      	movs	r1, #100	; 0x64
 80055a8:	fb01 f303 	mul.w	r3, r1, r3
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	3332      	adds	r3, #50	; 0x32
 80055b2:	4a34      	ldr	r2, [pc, #208]	; (8005684 <UART_SetConfig+0x4e4>)
 80055b4:	fba2 2303 	umull	r2, r3, r2, r3
 80055b8:	095b      	lsrs	r3, r3, #5
 80055ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055be:	441c      	add	r4, r3
 80055c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055c4:	2200      	movs	r2, #0
 80055c6:	673b      	str	r3, [r7, #112]	; 0x70
 80055c8:	677a      	str	r2, [r7, #116]	; 0x74
 80055ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80055ce:	4642      	mov	r2, r8
 80055d0:	464b      	mov	r3, r9
 80055d2:	1891      	adds	r1, r2, r2
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	415b      	adcs	r3, r3
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055de:	4641      	mov	r1, r8
 80055e0:	1851      	adds	r1, r2, r1
 80055e2:	6039      	str	r1, [r7, #0]
 80055e4:	4649      	mov	r1, r9
 80055e6:	414b      	adcs	r3, r1
 80055e8:	607b      	str	r3, [r7, #4]
 80055ea:	f04f 0200 	mov.w	r2, #0
 80055ee:	f04f 0300 	mov.w	r3, #0
 80055f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055f6:	4659      	mov	r1, fp
 80055f8:	00cb      	lsls	r3, r1, #3
 80055fa:	4651      	mov	r1, sl
 80055fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005600:	4651      	mov	r1, sl
 8005602:	00ca      	lsls	r2, r1, #3
 8005604:	4610      	mov	r0, r2
 8005606:	4619      	mov	r1, r3
 8005608:	4603      	mov	r3, r0
 800560a:	4642      	mov	r2, r8
 800560c:	189b      	adds	r3, r3, r2
 800560e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005610:	464b      	mov	r3, r9
 8005612:	460a      	mov	r2, r1
 8005614:	eb42 0303 	adc.w	r3, r2, r3
 8005618:	66fb      	str	r3, [r7, #108]	; 0x6c
 800561a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	663b      	str	r3, [r7, #96]	; 0x60
 8005624:	667a      	str	r2, [r7, #100]	; 0x64
 8005626:	f04f 0200 	mov.w	r2, #0
 800562a:	f04f 0300 	mov.w	r3, #0
 800562e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005632:	4649      	mov	r1, r9
 8005634:	008b      	lsls	r3, r1, #2
 8005636:	4641      	mov	r1, r8
 8005638:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800563c:	4641      	mov	r1, r8
 800563e:	008a      	lsls	r2, r1, #2
 8005640:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005644:	f7fa fdc0 	bl	80001c8 <__aeabi_uldivmod>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	4b0d      	ldr	r3, [pc, #52]	; (8005684 <UART_SetConfig+0x4e4>)
 800564e:	fba3 1302 	umull	r1, r3, r3, r2
 8005652:	095b      	lsrs	r3, r3, #5
 8005654:	2164      	movs	r1, #100	; 0x64
 8005656:	fb01 f303 	mul.w	r3, r1, r3
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	011b      	lsls	r3, r3, #4
 800565e:	3332      	adds	r3, #50	; 0x32
 8005660:	4a08      	ldr	r2, [pc, #32]	; (8005684 <UART_SetConfig+0x4e4>)
 8005662:	fba2 2303 	umull	r2, r3, r2, r3
 8005666:	095b      	lsrs	r3, r3, #5
 8005668:	f003 020f 	and.w	r2, r3, #15
 800566c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4422      	add	r2, r4
 8005674:	609a      	str	r2, [r3, #8]
}
 8005676:	bf00      	nop
 8005678:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800567c:	46bd      	mov	sp, r7
 800567e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005682:	bf00      	nop
 8005684:	51eb851f 	.word	0x51eb851f

08005688 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005688:	b084      	sub	sp, #16
 800568a:	b580      	push	{r7, lr}
 800568c:	b084      	sub	sp, #16
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	f107 001c 	add.w	r0, r7, #28
 8005696:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800569a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569c:	2b01      	cmp	r3, #1
 800569e:	d122      	bne.n	80056e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80056b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d105      	bne.n	80056da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f9c0 	bl	8005a60 <USB_CoreReset>
 80056e0:	4603      	mov	r3, r0
 80056e2:	73fb      	strb	r3, [r7, #15]
 80056e4:	e01a      	b.n	800571c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f9b4 	bl	8005a60 <USB_CoreReset>
 80056f8:	4603      	mov	r3, r0
 80056fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80056fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d106      	bne.n	8005710 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005706:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	639a      	str	r2, [r3, #56]	; 0x38
 800570e:	e005      	b.n	800571c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005714:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	2b01      	cmp	r3, #1
 8005720:	d10b      	bne.n	800573a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f043 0206 	orr.w	r2, r3, #6
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f043 0220 	orr.w	r2, r3, #32
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800573a:	7bfb      	ldrb	r3, [r7, #15]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005746:	b004      	add	sp, #16
 8005748:	4770      	bx	lr

0800574a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f043 0201 	orr.w	r2, r3, #1
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f023 0201 	bic.w	r2, r3, #1
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b084      	sub	sp, #16
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
 8005796:	460b      	mov	r3, r1
 8005798:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d115      	bne.n	80057dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057bc:	2001      	movs	r0, #1
 80057be:	f7fb fb83 	bl	8000ec8 <HAL_Delay>
      ms++;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	3301      	adds	r3, #1
 80057c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f93a 	bl	8005a42 <USB_GetMode>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d01e      	beq.n	8005812 <USB_SetCurrentMode+0x84>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2b31      	cmp	r3, #49	; 0x31
 80057d8:	d9f0      	bls.n	80057bc <USB_SetCurrentMode+0x2e>
 80057da:	e01a      	b.n	8005812 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80057dc:	78fb      	ldrb	r3, [r7, #3]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d115      	bne.n	800580e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057ee:	2001      	movs	r0, #1
 80057f0:	f7fb fb6a 	bl	8000ec8 <HAL_Delay>
      ms++;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	3301      	adds	r3, #1
 80057f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f921 	bl	8005a42 <USB_GetMode>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d005      	beq.n	8005812 <USB_SetCurrentMode+0x84>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b31      	cmp	r3, #49	; 0x31
 800580a:	d9f0      	bls.n	80057ee <USB_SetCurrentMode+0x60>
 800580c:	e001      	b.n	8005812 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e005      	b.n	800581e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2b32      	cmp	r3, #50	; 0x32
 8005816:	d101      	bne.n	800581c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e000      	b.n	800581e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
	...

08005828 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005832:	2300      	movs	r3, #0
 8005834:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	3301      	adds	r3, #1
 800583a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4a13      	ldr	r2, [pc, #76]	; (800588c <USB_FlushTxFifo+0x64>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d901      	bls.n	8005848 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e01b      	b.n	8005880 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	daf2      	bge.n	8005836 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	019b      	lsls	r3, r3, #6
 8005858:	f043 0220 	orr.w	r2, r3, #32
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3301      	adds	r3, #1
 8005864:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4a08      	ldr	r2, [pc, #32]	; (800588c <USB_FlushTxFifo+0x64>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d901      	bls.n	8005872 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e006      	b.n	8005880 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	f003 0320 	and.w	r3, r3, #32
 800587a:	2b20      	cmp	r3, #32
 800587c:	d0f0      	beq.n	8005860 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	00030d40 	.word	0x00030d40

08005890 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	3301      	adds	r3, #1
 80058a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4a11      	ldr	r2, [pc, #68]	; (80058ec <USB_FlushRxFifo+0x5c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d901      	bls.n	80058ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e018      	b.n	80058e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	daf2      	bge.n	800589c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2210      	movs	r2, #16
 80058be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	3301      	adds	r3, #1
 80058c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4a08      	ldr	r2, [pc, #32]	; (80058ec <USB_FlushRxFifo+0x5c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d901      	bls.n	80058d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e006      	b.n	80058e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	f003 0310 	and.w	r3, r3, #16
 80058da:	2b10      	cmp	r3, #16
 80058dc:	d0f0      	beq.n	80058c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	00030d40 	.word	0x00030d40

080058f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b089      	sub	sp, #36	; 0x24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	4611      	mov	r1, r2
 80058fc:	461a      	mov	r2, r3
 80058fe:	460b      	mov	r3, r1
 8005900:	71fb      	strb	r3, [r7, #7]
 8005902:	4613      	mov	r3, r2
 8005904:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800590e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005912:	2b00      	cmp	r3, #0
 8005914:	d123      	bne.n	800595e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005916:	88bb      	ldrh	r3, [r7, #4]
 8005918:	3303      	adds	r3, #3
 800591a:	089b      	lsrs	r3, r3, #2
 800591c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800591e:	2300      	movs	r3, #0
 8005920:	61bb      	str	r3, [r7, #24]
 8005922:	e018      	b.n	8005956 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005924:	79fb      	ldrb	r3, [r7, #7]
 8005926:	031a      	lsls	r2, r3, #12
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	4413      	add	r3, r2
 800592c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005930:	461a      	mov	r2, r3
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	3301      	adds	r3, #1
 800593c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	3301      	adds	r3, #1
 8005942:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	3301      	adds	r3, #1
 8005948:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	3301      	adds	r3, #1
 800594e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	3301      	adds	r3, #1
 8005954:	61bb      	str	r3, [r7, #24]
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	429a      	cmp	r2, r3
 800595c:	d3e2      	bcc.n	8005924 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3724      	adds	r7, #36	; 0x24
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800596c:	b480      	push	{r7}
 800596e:	b08b      	sub	sp, #44	; 0x2c
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	4613      	mov	r3, r2
 8005978:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005982:	88fb      	ldrh	r3, [r7, #6]
 8005984:	089b      	lsrs	r3, r3, #2
 8005986:	b29b      	uxth	r3, r3
 8005988:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800598a:	88fb      	ldrh	r3, [r7, #6]
 800598c:	f003 0303 	and.w	r3, r3, #3
 8005990:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005992:	2300      	movs	r3, #0
 8005994:	623b      	str	r3, [r7, #32]
 8005996:	e014      	b.n	80059c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	3301      	adds	r3, #1
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	3301      	adds	r3, #1
 80059ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80059b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b2:	3301      	adds	r3, #1
 80059b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	3301      	adds	r3, #1
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	3301      	adds	r3, #1
 80059c0:	623b      	str	r3, [r7, #32]
 80059c2:	6a3a      	ldr	r2, [r7, #32]
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d3e6      	bcc.n	8005998 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80059ca:	8bfb      	ldrh	r3, [r7, #30]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d01e      	beq.n	8005a0e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059da:	461a      	mov	r2, r3
 80059dc:	f107 0310 	add.w	r3, r7, #16
 80059e0:	6812      	ldr	r2, [r2, #0]
 80059e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	fa22 f303 	lsr.w	r3, r2, r3
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	701a      	strb	r2, [r3, #0]
      i++;
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	3301      	adds	r3, #1
 80059fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	3301      	adds	r3, #1
 8005a00:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005a02:	8bfb      	ldrh	r3, [r7, #30]
 8005a04:	3b01      	subs	r3, #1
 8005a06:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a08:	8bfb      	ldrh	r3, [r7, #30]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1ea      	bne.n	80059e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	372c      	adds	r7, #44	; 0x2c
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4013      	ands	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a34:	68fb      	ldr	r3, [r7, #12]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	f003 0301 	and.w	r3, r3, #1
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
	...

08005a60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4a13      	ldr	r2, [pc, #76]	; (8005ac4 <USB_CoreReset+0x64>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d901      	bls.n	8005a7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e01b      	b.n	8005ab6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	daf2      	bge.n	8005a6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f043 0201 	orr.w	r2, r3, #1
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4a09      	ldr	r2, [pc, #36]	; (8005ac4 <USB_CoreReset+0x64>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d901      	bls.n	8005aa8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e006      	b.n	8005ab6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d0f0      	beq.n	8005a96 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	00030d40 	.word	0x00030d40

08005ac8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ac8:	b084      	sub	sp, #16
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b086      	sub	sp, #24
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005ad6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ae8:	461a      	mov	r2, r3
 8005aea:	2300      	movs	r3, #0
 8005aec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d018      	beq.n	8005b50 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d10a      	bne.n	8005b3a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b32:	f043 0304 	orr.w	r3, r3, #4
 8005b36:	6013      	str	r3, [r2, #0]
 8005b38:	e014      	b.n	8005b64 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b48:	f023 0304 	bic.w	r3, r3, #4
 8005b4c:	6013      	str	r3, [r2, #0]
 8005b4e:	e009      	b.n	8005b64 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b5e:	f023 0304 	bic.w	r3, r3, #4
 8005b62:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b64:	2110      	movs	r1, #16
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7ff fe5e 	bl	8005828 <USB_FlushTxFifo>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7ff fe8a 	bl	8005890 <USB_FlushRxFifo>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b86:	2300      	movs	r3, #0
 8005b88:	613b      	str	r3, [r7, #16]
 8005b8a:	e015      	b.n	8005bb8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b98:	461a      	mov	r2, r3
 8005b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b9e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bac:	461a      	mov	r2, r3
 8005bae:	2300      	movs	r3, #0
 8005bb0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	613b      	str	r3, [r7, #16]
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d3e5      	bcc.n	8005b8c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bcc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00b      	beq.n	8005bf2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a13      	ldr	r2, [pc, #76]	; (8005c34 <USB_HostInit+0x16c>)
 8005be6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a13      	ldr	r2, [pc, #76]	; (8005c38 <USB_HostInit+0x170>)
 8005bec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005bf0:	e009      	b.n	8005c06 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2280      	movs	r2, #128	; 0x80
 8005bf6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a10      	ldr	r2, [pc, #64]	; (8005c3c <USB_HostInit+0x174>)
 8005bfc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a0f      	ldr	r2, [pc, #60]	; (8005c40 <USB_HostInit+0x178>)
 8005c02:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d105      	bne.n	8005c18 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	f043 0210 	orr.w	r2, r3, #16
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	699a      	ldr	r2, [r3, #24]
 8005c1c:	4b09      	ldr	r3, [pc, #36]	; (8005c44 <USB_HostInit+0x17c>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3718      	adds	r7, #24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c30:	b004      	add	sp, #16
 8005c32:	4770      	bx	lr
 8005c34:	01000200 	.word	0x01000200
 8005c38:	00e00300 	.word	0x00e00300
 8005c3c:	00600080 	.word	0x00600080
 8005c40:	004000e0 	.word	0x004000e0
 8005c44:	a3200008 	.word	0xa3200008

08005c48 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c66:	f023 0303 	bic.w	r3, r3, #3
 8005c6a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	78fb      	ldrb	r3, [r7, #3]
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	68f9      	ldr	r1, [r7, #12]
 8005c7c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c80:	4313      	orrs	r3, r2
 8005c82:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005c84:	78fb      	ldrb	r3, [r7, #3]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d107      	bne.n	8005c9a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c90:	461a      	mov	r2, r3
 8005c92:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005c96:	6053      	str	r3, [r2, #4]
 8005c98:	e009      	b.n	8005cae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005c9a:	78fb      	ldrb	r3, [r7, #3]
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d106      	bne.n	8005cae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f241 7370 	movw	r3, #6000	; 0x1770
 8005cac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005cdc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cea:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005cec:	2064      	movs	r0, #100	; 0x64
 8005cee:	f7fb f8eb 	bl	8000ec8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cfe:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005d00:	200a      	movs	r0, #10
 8005d02:	f7fb f8e1 	bl	8000ec8 <HAL_Delay>

  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005d34:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d109      	bne.n	8005d54 <USB_DriveVbus+0x44>
 8005d40:	78fb      	ldrb	r3, [r7, #3]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d106      	bne.n	8005d54 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d52:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d5e:	d109      	bne.n	8005d74 <USB_DriveVbus+0x64>
 8005d60:	78fb      	ldrb	r3, [r7, #3]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d106      	bne.n	8005d74 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d72:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b085      	sub	sp, #20
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	0c5b      	lsrs	r3, r3, #17
 8005da0:	f003 0303 	and.w	r3, r3, #3
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	b29b      	uxth	r3, r3
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
	...

08005dd4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	4608      	mov	r0, r1
 8005dde:	4611      	mov	r1, r2
 8005de0:	461a      	mov	r2, r3
 8005de2:	4603      	mov	r3, r0
 8005de4:	70fb      	strb	r3, [r7, #3]
 8005de6:	460b      	mov	r3, r1
 8005de8:	70bb      	strb	r3, [r7, #2]
 8005dea:	4613      	mov	r3, r2
 8005dec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005df6:	78fb      	ldrb	r3, [r7, #3]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e02:	461a      	mov	r2, r3
 8005e04:	f04f 33ff 	mov.w	r3, #4294967295
 8005e08:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005e0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d87e      	bhi.n	8005f10 <USB_HC_Init+0x13c>
 8005e12:	a201      	add	r2, pc, #4	; (adr r2, 8005e18 <USB_HC_Init+0x44>)
 8005e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e18:	08005e29 	.word	0x08005e29
 8005e1c:	08005ed3 	.word	0x08005ed3
 8005e20:	08005e29 	.word	0x08005e29
 8005e24:	08005e95 	.word	0x08005e95
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e34:	461a      	mov	r2, r3
 8005e36:	f240 439d 	movw	r3, #1181	; 0x49d
 8005e3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005e3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	da10      	bge.n	8005e66 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e44:	78fb      	ldrb	r3, [r7, #3]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	78fa      	ldrb	r2, [r7, #3]
 8005e54:	0151      	lsls	r1, r2, #5
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	440a      	add	r2, r1
 8005e5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e62:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005e64:	e057      	b.n	8005f16 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d051      	beq.n	8005f16 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005e72:	78fb      	ldrb	r3, [r7, #3]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	78fa      	ldrb	r2, [r7, #3]
 8005e82:	0151      	lsls	r1, r2, #5
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	440a      	add	r2, r1
 8005e88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005e90:	60d3      	str	r3, [r2, #12]
      break;
 8005e92:	e040      	b.n	8005f16 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e94:	78fb      	ldrb	r3, [r7, #3]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	f240 639d 	movw	r3, #1693	; 0x69d
 8005ea6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ea8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	da34      	bge.n	8005f1a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	78fa      	ldrb	r2, [r7, #3]
 8005ec0:	0151      	lsls	r1, r2, #5
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	440a      	add	r2, r1
 8005ec6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ece:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005ed0:	e023      	b.n	8005f1a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ed2:	78fb      	ldrb	r3, [r7, #3]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ede:	461a      	mov	r2, r3
 8005ee0:	f240 2325 	movw	r3, #549	; 0x225
 8005ee4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ee6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	da17      	bge.n	8005f1e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005eee:	78fb      	ldrb	r3, [r7, #3]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	78fa      	ldrb	r2, [r7, #3]
 8005efe:	0151      	lsls	r1, r2, #5
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	440a      	add	r2, r1
 8005f04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f08:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005f0c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005f0e:	e006      	b.n	8005f1e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	77fb      	strb	r3, [r7, #31]
      break;
 8005f14:	e004      	b.n	8005f20 <USB_HC_Init+0x14c>
      break;
 8005f16:	bf00      	nop
 8005f18:	e002      	b.n	8005f20 <USB_HC_Init+0x14c>
      break;
 8005f1a:	bf00      	nop
 8005f1c:	e000      	b.n	8005f20 <USB_HC_Init+0x14c>
      break;
 8005f1e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005f20:	78fb      	ldrb	r3, [r7, #3]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	78fa      	ldrb	r2, [r7, #3]
 8005f30:	0151      	lsls	r1, r2, #5
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	440a      	add	r2, r1
 8005f36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f3a:	f043 0302 	orr.w	r3, r3, #2
 8005f3e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f46:	699a      	ldr	r2, [r3, #24]
 8005f48:	78fb      	ldrb	r3, [r7, #3]
 8005f4a:	f003 030f 	and.w	r3, r3, #15
 8005f4e:	2101      	movs	r1, #1
 8005f50:	fa01 f303 	lsl.w	r3, r1, r3
 8005f54:	6939      	ldr	r1, [r7, #16]
 8005f56:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005f6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	da03      	bge.n	8005f7a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f76:	61bb      	str	r3, [r7, #24]
 8005f78:	e001      	b.n	8005f7e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7ff feff 	bl	8005d82 <USB_GetHostSpeed>
 8005f84:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005f86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d106      	bne.n	8005f9c <USB_HC_Init+0x1c8>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d003      	beq.n	8005f9c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	e001      	b.n	8005fa0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005fa0:	787b      	ldrb	r3, [r7, #1]
 8005fa2:	059b      	lsls	r3, r3, #22
 8005fa4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005fa8:	78bb      	ldrb	r3, [r7, #2]
 8005faa:	02db      	lsls	r3, r3, #11
 8005fac:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005fb0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005fb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005fb6:	049b      	lsls	r3, r3, #18
 8005fb8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005fbc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005fbe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005fc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005fc4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005fca:	78fb      	ldrb	r3, [r7, #3]
 8005fcc:	0159      	lsls	r1, r3, #5
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	440b      	add	r3, r1
 8005fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005fdc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005fde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005fe2:	2b03      	cmp	r3, #3
 8005fe4:	d003      	beq.n	8005fee <USB_HC_Init+0x21a>
 8005fe6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d10f      	bne.n	800600e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005fee:	78fb      	ldrb	r3, [r7, #3]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	78fa      	ldrb	r2, [r7, #3]
 8005ffe:	0151      	lsls	r1, r2, #5
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	440a      	add	r2, r1
 8006004:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006008:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800600c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800600e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3720      	adds	r7, #32
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b08c      	sub	sp, #48	; 0x30
 800601c:	af02      	add	r7, sp, #8
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	4613      	mov	r3, r2
 8006024:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	785b      	ldrb	r3, [r3, #1]
 800602e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006030:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006034:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800603e:	2b00      	cmp	r3, #0
 8006040:	d02d      	beq.n	800609e <USB_HC_StartXfer+0x86>
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	791b      	ldrb	r3, [r3, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d129      	bne.n	800609e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800604a:	79fb      	ldrb	r3, [r7, #7]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d117      	bne.n	8006080 <USB_HC_StartXfer+0x68>
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	79db      	ldrb	r3, [r3, #7]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <USB_HC_StartXfer+0x48>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	79db      	ldrb	r3, [r3, #7]
 800605c:	2b02      	cmp	r3, #2
 800605e:	d10f      	bne.n	8006080 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	4413      	add	r3, r2
 8006068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	69fa      	ldr	r2, [r7, #28]
 8006070:	0151      	lsls	r1, r2, #5
 8006072:	6a3a      	ldr	r2, [r7, #32]
 8006074:	440a      	add	r2, r1
 8006076:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800607a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006080:	79fb      	ldrb	r3, [r7, #7]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10b      	bne.n	800609e <USB_HC_StartXfer+0x86>
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	795b      	ldrb	r3, [r3, #5]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d107      	bne.n	800609e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	785b      	ldrb	r3, [r3, #1]
 8006092:	4619      	mov	r1, r3
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 fa0f 	bl	80064b8 <USB_DoPing>
      return HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	e0f8      	b.n	8006290 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d018      	beq.n	80060d8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	8912      	ldrh	r2, [r2, #8]
 80060ae:	4413      	add	r3, r2
 80060b0:	3b01      	subs	r3, #1
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	8912      	ldrh	r2, [r2, #8]
 80060b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80060ba:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80060bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80060be:	8b7b      	ldrh	r3, [r7, #26]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d90b      	bls.n	80060dc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80060c4:	8b7b      	ldrh	r3, [r7, #26]
 80060c6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80060c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	8912      	ldrh	r2, [r2, #8]
 80060ce:	fb03 f202 	mul.w	r2, r3, r2
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	611a      	str	r2, [r3, #16]
 80060d6:	e001      	b.n	80060dc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80060d8:	2301      	movs	r3, #1
 80060da:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	78db      	ldrb	r3, [r3, #3]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d007      	beq.n	80060f4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80060e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	8912      	ldrh	r2, [r2, #8]
 80060ea:	fb03 f202 	mul.w	r2, r3, r2
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	611a      	str	r2, [r3, #16]
 80060f2:	e003      	b.n	80060fc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	695a      	ldr	r2, [r3, #20]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006104:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006106:	04d9      	lsls	r1, r3, #19
 8006108:	4b63      	ldr	r3, [pc, #396]	; (8006298 <USB_HC_StartXfer+0x280>)
 800610a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800610c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	7a9b      	ldrb	r3, [r3, #10]
 8006112:	075b      	lsls	r3, r3, #29
 8006114:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006118:	69f9      	ldr	r1, [r7, #28]
 800611a:	0148      	lsls	r0, r1, #5
 800611c:	6a39      	ldr	r1, [r7, #32]
 800611e:	4401      	add	r1, r0
 8006120:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006124:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006126:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006128:	79fb      	ldrb	r3, [r7, #7]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d009      	beq.n	8006142 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	68d9      	ldr	r1, [r3, #12]
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	4413      	add	r3, r2
 800613a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800613e:	460a      	mov	r2, r1
 8006140:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	bf0c      	ite	eq
 8006152:	2301      	moveq	r3, #1
 8006154:	2300      	movne	r3, #0
 8006156:	b2db      	uxtb	r3, r3
 8006158:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	4413      	add	r3, r2
 8006162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	69fa      	ldr	r2, [r7, #28]
 800616a:	0151      	lsls	r1, r2, #5
 800616c:	6a3a      	ldr	r2, [r7, #32]
 800616e:	440a      	add	r2, r1
 8006170:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006174:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006178:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	4413      	add	r3, r2
 8006182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	7e7b      	ldrb	r3, [r7, #25]
 800618a:	075b      	lsls	r3, r3, #29
 800618c:	69f9      	ldr	r1, [r7, #28]
 800618e:	0148      	lsls	r0, r1, #5
 8006190:	6a39      	ldr	r1, [r7, #32]
 8006192:	4401      	add	r1, r0
 8006194:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006198:	4313      	orrs	r3, r2
 800619a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061b2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	78db      	ldrb	r3, [r3, #3]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d004      	beq.n	80061c6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c2:	613b      	str	r3, [r7, #16]
 80061c4:	e003      	b.n	80061ce <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061cc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061d4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e2:	461a      	mov	r2, r3
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80061e8:	79fb      	ldrb	r3, [r7, #7]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	e04e      	b.n	8006290 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	78db      	ldrb	r3, [r3, #3]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d149      	bne.n	800628e <USB_HC_StartXfer+0x276>
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d045      	beq.n	800628e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	79db      	ldrb	r3, [r3, #7]
 8006206:	2b03      	cmp	r3, #3
 8006208:	d830      	bhi.n	800626c <USB_HC_StartXfer+0x254>
 800620a:	a201      	add	r2, pc, #4	; (adr r2, 8006210 <USB_HC_StartXfer+0x1f8>)
 800620c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006210:	08006221 	.word	0x08006221
 8006214:	08006245 	.word	0x08006245
 8006218:	08006221 	.word	0x08006221
 800621c:	08006245 	.word	0x08006245
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	3303      	adds	r3, #3
 8006226:	089b      	lsrs	r3, r3, #2
 8006228:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800622a:	8afa      	ldrh	r2, [r7, #22]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006230:	b29b      	uxth	r3, r3
 8006232:	429a      	cmp	r2, r3
 8006234:	d91c      	bls.n	8006270 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	f043 0220 	orr.w	r2, r3, #32
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	619a      	str	r2, [r3, #24]
        }
        break;
 8006242:	e015      	b.n	8006270 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	3303      	adds	r3, #3
 800624a:	089b      	lsrs	r3, r3, #2
 800624c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800624e:	8afa      	ldrh	r2, [r7, #22]
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	b29b      	uxth	r3, r3
 800625a:	429a      	cmp	r2, r3
 800625c:	d90a      	bls.n	8006274 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	619a      	str	r2, [r3, #24]
        }
        break;
 800626a:	e003      	b.n	8006274 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800626c:	bf00      	nop
 800626e:	e002      	b.n	8006276 <USB_HC_StartXfer+0x25e>
        break;
 8006270:	bf00      	nop
 8006272:	e000      	b.n	8006276 <USB_HC_StartXfer+0x25e>
        break;
 8006274:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	68d9      	ldr	r1, [r3, #12]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	785a      	ldrb	r2, [r3, #1]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	b29b      	uxth	r3, r3
 8006284:	2000      	movs	r0, #0
 8006286:	9000      	str	r0, [sp, #0]
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f7ff fb31 	bl	80058f0 <USB_WritePacket>
  }

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3728      	adds	r7, #40	; 0x28
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	1ff80000 	.word	0x1ff80000

0800629c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	b29b      	uxth	r3, r3
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80062be:	b480      	push	{r7}
 80062c0:	b089      	sub	sp, #36	; 0x24
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	460b      	mov	r3, r1
 80062c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80062ce:	78fb      	ldrb	r3, [r7, #3]
 80062d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	0c9b      	lsrs	r3, r3, #18
 80062e6:	f003 0303 	and.w	r3, r3, #3
 80062ea:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	0fdb      	lsrs	r3, r3, #31
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b20      	cmp	r3, #32
 800630c:	d104      	bne.n	8006318 <USB_HC_Halt+0x5a>
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	e0c8      	b.n	80064aa <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d002      	beq.n	8006324 <USB_HC_Halt+0x66>
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2b02      	cmp	r3, #2
 8006322:	d163      	bne.n	80063ec <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	4413      	add	r3, r2
 800632c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	0151      	lsls	r1, r2, #5
 8006336:	69fa      	ldr	r2, [r7, #28]
 8006338:	440a      	add	r2, r1
 800633a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800633e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006342:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f003 0320 	and.w	r3, r3, #32
 800634c:	2b00      	cmp	r3, #0
 800634e:	f040 80ab 	bne.w	80064a8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006356:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d133      	bne.n	80063c6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	4413      	add	r3, r2
 8006366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	0151      	lsls	r1, r2, #5
 8006370:	69fa      	ldr	r2, [r7, #28]
 8006372:	440a      	add	r2, r1
 8006374:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800637c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	4413      	add	r3, r2
 8006386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	0151      	lsls	r1, r2, #5
 8006390:	69fa      	ldr	r2, [r7, #28]
 8006392:	440a      	add	r2, r1
 8006394:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006398:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800639c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	3301      	adds	r3, #1
 80063a2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063aa:	d81d      	bhi.n	80063e8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063c2:	d0ec      	beq.n	800639e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063c4:	e070      	b.n	80064a8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	015a      	lsls	r2, r3, #5
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	4413      	add	r3, r2
 80063ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	0151      	lsls	r1, r2, #5
 80063d8:	69fa      	ldr	r2, [r7, #28]
 80063da:	440a      	add	r2, r1
 80063dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063e4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063e6:	e05f      	b.n	80064a8 <USB_HC_Halt+0x1ea>
            break;
 80063e8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063ea:	e05d      	b.n	80064a8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	0151      	lsls	r1, r2, #5
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	440a      	add	r2, r1
 8006402:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006406:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800640a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d133      	bne.n	8006484 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	4413      	add	r3, r2
 8006424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	0151      	lsls	r1, r2, #5
 800642e:	69fa      	ldr	r2, [r7, #28]
 8006430:	440a      	add	r2, r1
 8006432:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006436:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800643a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	4413      	add	r3, r2
 8006444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69ba      	ldr	r2, [r7, #24]
 800644c:	0151      	lsls	r1, r2, #5
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	440a      	add	r2, r1
 8006452:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006456:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800645a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	3301      	adds	r3, #1
 8006460:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006468:	d81d      	bhi.n	80064a6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	4413      	add	r3, r2
 8006472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800647c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006480:	d0ec      	beq.n	800645c <USB_HC_Halt+0x19e>
 8006482:	e011      	b.n	80064a8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	4413      	add	r3, r2
 800648c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	0151      	lsls	r1, r2, #5
 8006496:	69fa      	ldr	r2, [r7, #28]
 8006498:	440a      	add	r2, r1
 800649a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800649e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064a2:	6013      	str	r3, [r2, #0]
 80064a4:	e000      	b.n	80064a8 <USB_HC_Halt+0x1ea>
          break;
 80064a6:	bf00      	nop
    }
  }

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3724      	adds	r7, #36	; 0x24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
	...

080064b8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	460b      	mov	r3, r1
 80064c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80064c8:	78fb      	ldrb	r3, [r7, #3]
 80064ca:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80064cc:	2301      	movs	r3, #1
 80064ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	04da      	lsls	r2, r3, #19
 80064d4:	4b15      	ldr	r3, [pc, #84]	; (800652c <USB_DoPing+0x74>)
 80064d6:	4013      	ands	r3, r2
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	0151      	lsls	r1, r2, #5
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	440a      	add	r2, r1
 80064e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064e8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006500:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006508:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	4413      	add	r3, r2
 8006512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006516:	461a      	mov	r2, r3
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	371c      	adds	r7, #28
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	1ff80000 	.word	0x1ff80000

08006530 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff f911 	bl	800576c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800654a:	2110      	movs	r1, #16
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7ff f96b 	bl	8005828 <USB_FlushTxFifo>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7ff f997 	bl	8005890 <USB_FlushRxFifo>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d001      	beq.n	800656c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800656c:	2300      	movs	r3, #0
 800656e:	61bb      	str	r3, [r7, #24]
 8006570:	e01f      	b.n	80065b2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	4413      	add	r3, r2
 800657a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006588:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006590:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006598:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a6:	461a      	mov	r2, r3
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	3301      	adds	r3, #1
 80065b0:	61bb      	str	r3, [r7, #24]
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	2b0f      	cmp	r3, #15
 80065b6:	d9dc      	bls.n	8006572 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80065b8:	2300      	movs	r3, #0
 80065ba:	61bb      	str	r3, [r7, #24]
 80065bc:	e034      	b.n	8006628 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065d4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f2:	461a      	mov	r2, r3
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	3301      	adds	r3, #1
 80065fc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006604:	d80c      	bhi.n	8006620 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	4413      	add	r3, r2
 800660e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800661c:	d0ec      	beq.n	80065f8 <USB_StopHost+0xc8>
 800661e:	e000      	b.n	8006622 <USB_StopHost+0xf2>
        break;
 8006620:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	3301      	adds	r3, #1
 8006626:	61bb      	str	r3, [r7, #24]
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	2b0f      	cmp	r3, #15
 800662c:	d9c7      	bls.n	80065be <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006634:	461a      	mov	r2, r3
 8006636:	f04f 33ff 	mov.w	r3, #4294967295
 800663a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f04f 32ff 	mov.w	r2, #4294967295
 8006642:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f7ff f880 	bl	800574a <USB_EnableGlobalInt>

  return ret;
 800664a:	7ffb      	ldrb	r3, [r7, #31]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3720      	adds	r7, #32
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006654:	b590      	push	{r4, r7, lr}
 8006656:	b089      	sub	sp, #36	; 0x24
 8006658:	af04      	add	r7, sp, #16
 800665a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800665c:	2301      	movs	r3, #1
 800665e:	2202      	movs	r2, #2
 8006660:	2102      	movs	r1, #2
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fc66 	bl	8006f34 <USBH_FindInterface>
 8006668:	4603      	mov	r3, r0
 800666a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800666c:	7bfb      	ldrb	r3, [r7, #15]
 800666e:	2bff      	cmp	r3, #255	; 0xff
 8006670:	d002      	beq.n	8006678 <USBH_CDC_InterfaceInit+0x24>
 8006672:	7bfb      	ldrb	r3, [r7, #15]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d901      	bls.n	800667c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006678:	2302      	movs	r3, #2
 800667a:	e13d      	b.n	80068f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800667c:	7bfb      	ldrb	r3, [r7, #15]
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fc3b 	bl	8006efc <USBH_SelectInterface>
 8006686:	4603      	mov	r3, r0
 8006688:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800668a:	7bbb      	ldrb	r3, [r7, #14]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006690:	2302      	movs	r3, #2
 8006692:	e131      	b.n	80068f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800669a:	2050      	movs	r0, #80	; 0x50
 800669c:	f002 fafa 	bl	8008c94 <malloc>
 80066a0:	4603      	mov	r3, r0
 80066a2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80066b4:	2302      	movs	r3, #2
 80066b6:	e11f      	b.n	80068f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80066b8:	2250      	movs	r2, #80	; 0x50
 80066ba:	2100      	movs	r1, #0
 80066bc:	68b8      	ldr	r0, [r7, #8]
 80066be:	f002 faf9 	bl	8008cb4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	211a      	movs	r1, #26
 80066c8:	fb01 f303 	mul.w	r3, r1, r3
 80066cc:	4413      	add	r3, r2
 80066ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	b25b      	sxtb	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	da15      	bge.n	8006706 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	211a      	movs	r1, #26
 80066e0:	fb01 f303 	mul.w	r3, r1, r3
 80066e4:	4413      	add	r3, r2
 80066e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066ea:	781a      	ldrb	r2, [r3, #0]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	211a      	movs	r1, #26
 80066f6:	fb01 f303 	mul.w	r3, r1, r3
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006700:	881a      	ldrh	r2, [r3, #0]
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	785b      	ldrb	r3, [r3, #1]
 800670a:	4619      	mov	r1, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f001 ff2c 	bl	800856a <USBH_AllocPipe>
 8006712:	4603      	mov	r3, r0
 8006714:	461a      	mov	r2, r3
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	7819      	ldrb	r1, [r3, #0]
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	7858      	ldrb	r0, [r3, #1]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	8952      	ldrh	r2, [r2, #10]
 8006732:	9202      	str	r2, [sp, #8]
 8006734:	2203      	movs	r2, #3
 8006736:	9201      	str	r2, [sp, #4]
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	4623      	mov	r3, r4
 800673c:	4602      	mov	r2, r0
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f001 fee4 	bl	800850c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	2200      	movs	r2, #0
 800674a:	4619      	mov	r1, r3
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f002 f9f3 	bl	8008b38 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006752:	2300      	movs	r3, #0
 8006754:	2200      	movs	r2, #0
 8006756:	210a      	movs	r1, #10
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fbeb 	bl	8006f34 <USBH_FindInterface>
 800675e:	4603      	mov	r3, r0
 8006760:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006762:	7bfb      	ldrb	r3, [r7, #15]
 8006764:	2bff      	cmp	r3, #255	; 0xff
 8006766:	d002      	beq.n	800676e <USBH_CDC_InterfaceInit+0x11a>
 8006768:	7bfb      	ldrb	r3, [r7, #15]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d901      	bls.n	8006772 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800676e:	2302      	movs	r3, #2
 8006770:	e0c2      	b.n	80068f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006772:	7bfb      	ldrb	r3, [r7, #15]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	211a      	movs	r1, #26
 8006778:	fb01 f303 	mul.w	r3, r1, r3
 800677c:	4413      	add	r3, r2
 800677e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	b25b      	sxtb	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	da16      	bge.n	80067b8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800678a:	7bfb      	ldrb	r3, [r7, #15]
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	211a      	movs	r1, #26
 8006790:	fb01 f303 	mul.w	r3, r1, r3
 8006794:	4413      	add	r3, r2
 8006796:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800679a:	781a      	ldrb	r2, [r3, #0]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80067a0:	7bfb      	ldrb	r3, [r7, #15]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	211a      	movs	r1, #26
 80067a6:	fb01 f303 	mul.w	r3, r1, r3
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80067b0:	881a      	ldrh	r2, [r3, #0]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	835a      	strh	r2, [r3, #26]
 80067b6:	e015      	b.n	80067e4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	211a      	movs	r1, #26
 80067be:	fb01 f303 	mul.w	r3, r1, r3
 80067c2:	4413      	add	r3, r2
 80067c4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80067c8:	781a      	ldrb	r2, [r3, #0]
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80067ce:	7bfb      	ldrb	r3, [r7, #15]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	211a      	movs	r1, #26
 80067d4:	fb01 f303 	mul.w	r3, r1, r3
 80067d8:	4413      	add	r3, r2
 80067da:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80067de:	881a      	ldrh	r2, [r3, #0]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	211a      	movs	r1, #26
 80067ea:	fb01 f303 	mul.w	r3, r1, r3
 80067ee:	4413      	add	r3, r2
 80067f0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	b25b      	sxtb	r3, r3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	da16      	bge.n	800682a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	211a      	movs	r1, #26
 8006802:	fb01 f303 	mul.w	r3, r1, r3
 8006806:	4413      	add	r3, r2
 8006808:	f203 3356 	addw	r3, r3, #854	; 0x356
 800680c:	781a      	ldrb	r2, [r3, #0]
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006812:	7bfb      	ldrb	r3, [r7, #15]
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	211a      	movs	r1, #26
 8006818:	fb01 f303 	mul.w	r3, r1, r3
 800681c:	4413      	add	r3, r2
 800681e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006822:	881a      	ldrh	r2, [r3, #0]
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	835a      	strh	r2, [r3, #26]
 8006828:	e015      	b.n	8006856 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800682a:	7bfb      	ldrb	r3, [r7, #15]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	211a      	movs	r1, #26
 8006830:	fb01 f303 	mul.w	r3, r1, r3
 8006834:	4413      	add	r3, r2
 8006836:	f203 3356 	addw	r3, r3, #854	; 0x356
 800683a:	781a      	ldrb	r2, [r3, #0]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006840:	7bfb      	ldrb	r3, [r7, #15]
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	211a      	movs	r1, #26
 8006846:	fb01 f303 	mul.w	r3, r1, r3
 800684a:	4413      	add	r3, r2
 800684c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006850:	881a      	ldrh	r2, [r3, #0]
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	7b9b      	ldrb	r3, [r3, #14]
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f001 fe84 	bl	800856a <USBH_AllocPipe>
 8006862:	4603      	mov	r3, r0
 8006864:	461a      	mov	r2, r3
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	7bdb      	ldrb	r3, [r3, #15]
 800686e:	4619      	mov	r1, r3
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f001 fe7a 	bl	800856a <USBH_AllocPipe>
 8006876:	4603      	mov	r3, r0
 8006878:	461a      	mov	r2, r3
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	7b59      	ldrb	r1, [r3, #13]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	7b98      	ldrb	r0, [r3, #14]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	8b12      	ldrh	r2, [r2, #24]
 8006896:	9202      	str	r2, [sp, #8]
 8006898:	2202      	movs	r2, #2
 800689a:	9201      	str	r2, [sp, #4]
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	4623      	mov	r3, r4
 80068a0:	4602      	mov	r2, r0
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f001 fe32 	bl	800850c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	7b19      	ldrb	r1, [r3, #12]
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	7bd8      	ldrb	r0, [r3, #15]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	8b52      	ldrh	r2, [r2, #26]
 80068c0:	9202      	str	r2, [sp, #8]
 80068c2:	2202      	movs	r2, #2
 80068c4:	9201      	str	r2, [sp, #4]
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	4623      	mov	r3, r4
 80068ca:	4602      	mov	r2, r0
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f001 fe1d 	bl	800850c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	7b5b      	ldrb	r3, [r3, #13]
 80068de:	2200      	movs	r2, #0
 80068e0:	4619      	mov	r1, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f002 f928 	bl	8008b38 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	7b1b      	ldrb	r3, [r3, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f002 f921 	bl	8008b38 <USBH_LL_SetToggle>

  return USBH_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd90      	pop	{r4, r7, pc}

08006900 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800690e:	69db      	ldr	r3, [r3, #28]
 8006910:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00e      	beq.n	8006938 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	4619      	mov	r1, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f001 fe12 	bl	800854a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	4619      	mov	r1, r3
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f001 fe3d 	bl	80085ac <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	7b1b      	ldrb	r3, [r3, #12]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00e      	beq.n	800695e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	7b1b      	ldrb	r3, [r3, #12]
 8006944:	4619      	mov	r1, r3
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f001 fdff 	bl	800854a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	7b1b      	ldrb	r3, [r3, #12]
 8006950:	4619      	mov	r1, r3
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f001 fe2a 	bl	80085ac <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	7b5b      	ldrb	r3, [r3, #13]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00e      	beq.n	8006984 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	7b5b      	ldrb	r3, [r3, #13]
 800696a:	4619      	mov	r1, r3
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f001 fdec 	bl	800854a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	7b5b      	ldrb	r3, [r3, #13]
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f001 fe17 	bl	80085ac <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00b      	beq.n	80069a8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	4618      	mov	r0, r3
 800699a:	f002 f983 	bl	8008ca4 <free>
    phost->pActiveClass->pData = 0U;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069a4:	2200      	movs	r2, #0
 80069a6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b084      	sub	sp, #16
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	3340      	adds	r3, #64	; 0x40
 80069c8:	4619      	mov	r1, r3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f8b1 	bl	8006b32 <GetLineCoding>
 80069d0:	4603      	mov	r3, r0
 80069d2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80069d4:	7afb      	ldrb	r3, [r7, #11]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d105      	bne.n	80069e6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069e0:	2102      	movs	r1, #2
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80069e6:	7afb      	ldrb	r3, [r7, #11]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80069f8:	2301      	movs	r3, #1
 80069fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006a10:	2b04      	cmp	r3, #4
 8006a12:	d877      	bhi.n	8006b04 <USBH_CDC_Process+0x114>
 8006a14:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <USBH_CDC_Process+0x2c>)
 8006a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1a:	bf00      	nop
 8006a1c:	08006a31 	.word	0x08006a31
 8006a20:	08006a37 	.word	0x08006a37
 8006a24:	08006a67 	.word	0x08006a67
 8006a28:	08006adb 	.word	0x08006adb
 8006a2c:	08006ae9 	.word	0x08006ae9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	73fb      	strb	r3, [r7, #15]
      break;
 8006a34:	e06d      	b.n	8006b12 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 f897 	bl	8006b70 <SetLineCoding>
 8006a42:	4603      	mov	r3, r0
 8006a44:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a46:	7bbb      	ldrb	r3, [r7, #14]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d104      	bne.n	8006a56 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2202      	movs	r2, #2
 8006a50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a54:	e058      	b.n	8006b08 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006a56:	7bbb      	ldrb	r3, [r7, #14]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d055      	beq.n	8006b08 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2204      	movs	r2, #4
 8006a60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006a64:	e050      	b.n	8006b08 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	3340      	adds	r3, #64	; 0x40
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f860 	bl	8006b32 <GetLineCoding>
 8006a72:	4603      	mov	r3, r0
 8006a74:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a76:	7bbb      	ldrb	r3, [r7, #14]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d126      	bne.n	8006aca <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a8e:	791b      	ldrb	r3, [r3, #4]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d13b      	bne.n	8006b0c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a9e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d133      	bne.n	8006b0c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aae:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d12b      	bne.n	8006b0c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006abc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d124      	bne.n	8006b0c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f958 	bl	8006d78 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006ac8:	e020      	b.n	8006b0c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006aca:	7bbb      	ldrb	r3, [r7, #14]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d01d      	beq.n	8006b0c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	2204      	movs	r2, #4
 8006ad4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006ad8:	e018      	b.n	8006b0c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f867 	bl	8006bae <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f8da 	bl	8006c9a <CDC_ProcessReception>
      break;
 8006ae6:	e014      	b.n	8006b12 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006ae8:	2100      	movs	r1, #0
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 ffef 	bl	8007ace <USBH_ClrFeature>
 8006af0:	4603      	mov	r3, r0
 8006af2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006af4:	7bbb      	ldrb	r3, [r7, #14]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10a      	bne.n	8006b10 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006b02:	e005      	b.n	8006b10 <USBH_CDC_Process+0x120>

    default:
      break;
 8006b04:	bf00      	nop
 8006b06:	e004      	b.n	8006b12 <USBH_CDC_Process+0x122>
      break;
 8006b08:	bf00      	nop
 8006b0a:	e002      	b.n	8006b12 <USBH_CDC_Process+0x122>
      break;
 8006b0c:	bf00      	nop
 8006b0e:	e000      	b.n	8006b12 <USBH_CDC_Process+0x122>
      break;
 8006b10:	bf00      	nop

  }

  return status;
 8006b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b082      	sub	sp, #8
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	22a1      	movs	r2, #161	; 0xa1
 8006b40:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2221      	movs	r2, #33	; 0x21
 8006b46:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2207      	movs	r2, #7
 8006b58:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2207      	movs	r2, #7
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f001 fa81 	bl	8008068 <USBH_CtlReq>
 8006b66:	4603      	mov	r3, r0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3708      	adds	r7, #8
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2221      	movs	r2, #33	; 0x21
 8006b7e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2220      	movs	r2, #32
 8006b84:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2207      	movs	r2, #7
 8006b96:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	2207      	movs	r2, #7
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f001 fa62 	bl	8008068 <USBH_CtlReq>
 8006ba4:	4603      	mov	r3, r0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b086      	sub	sp, #24
 8006bb2:	af02      	add	r7, sp, #8
 8006bb4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d002      	beq.n	8006bd4 <CDC_ProcessTransmission+0x26>
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d023      	beq.n	8006c1a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006bd2:	e05e      	b.n	8006c92 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	8b12      	ldrh	r2, [r2, #24]
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d90b      	bls.n	8006bf8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	69d9      	ldr	r1, [r3, #28]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8b1a      	ldrh	r2, [r3, #24]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	7b5b      	ldrb	r3, [r3, #13]
 8006bec:	2001      	movs	r0, #1
 8006bee:	9000      	str	r0, [sp, #0]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f001 fc48 	bl	8008486 <USBH_BulkSendData>
 8006bf6:	e00b      	b.n	8006c10 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	7b5b      	ldrb	r3, [r3, #13]
 8006c06:	2001      	movs	r0, #1
 8006c08:	9000      	str	r0, [sp, #0]
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f001 fc3b 	bl	8008486 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006c18:	e03b      	b.n	8006c92 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	7b5b      	ldrb	r3, [r3, #13]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 ff5f 	bl	8008ae4 <USBH_LL_GetURBState>
 8006c26:	4603      	mov	r3, r0
 8006c28:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006c2a:	7afb      	ldrb	r3, [r7, #11]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d128      	bne.n	8006c82 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	8b12      	ldrh	r2, [r2, #24]
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d90e      	bls.n	8006c5a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	8b12      	ldrh	r2, [r2, #24]
 8006c44:	1a9a      	subs	r2, r3, r2
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	8b12      	ldrh	r2, [r2, #24]
 8006c52:	441a      	add	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	61da      	str	r2, [r3, #28]
 8006c58:	e002      	b.n	8006c60 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d004      	beq.n	8006c72 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006c70:	e00e      	b.n	8006c90 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f868 	bl	8006d50 <USBH_CDC_TransmitCallback>
      break;
 8006c80:	e006      	b.n	8006c90 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006c82:	7afb      	ldrb	r3, [r7, #11]
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d103      	bne.n	8006c90 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006c90:	bf00      	nop
  }
}
 8006c92:	bf00      	nop
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b086      	sub	sp, #24
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006cac:	2300      	movs	r3, #0
 8006cae:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d002      	beq.n	8006cc0 <CDC_ProcessReception+0x26>
 8006cba:	2b04      	cmp	r3, #4
 8006cbc:	d00e      	beq.n	8006cdc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006cbe:	e043      	b.n	8006d48 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	6a19      	ldr	r1, [r3, #32]
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	8b5a      	ldrh	r2, [r3, #26]
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	7b1b      	ldrb	r3, [r3, #12]
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f001 fbff 	bl	80084d0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	2204      	movs	r2, #4
 8006cd6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006cda:	e035      	b.n	8006d48 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	7b1b      	ldrb	r3, [r3, #12]
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f001 fefe 	bl	8008ae4 <USBH_LL_GetURBState>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006cec:	7cfb      	ldrb	r3, [r7, #19]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d129      	bne.n	8006d46 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	7b1b      	ldrb	r3, [r3, #12]
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 fe61 	bl	80089c0 <USBH_LL_GetLastXferSize>
 8006cfe:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d016      	beq.n	8006d38 <CDC_ProcessReception+0x9e>
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	8b5b      	ldrh	r3, [r3, #26]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d910      	bls.n	8006d38 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	1ad2      	subs	r2, r2, r3
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	6a1a      	ldr	r2, [r3, #32]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	441a      	add	r2, r3
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2203      	movs	r2, #3
 8006d32:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006d36:	e006      	b.n	8006d46 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f80f 	bl	8006d64 <USBH_CDC_ReceiveCallback>
      break;
 8006d46:	bf00      	nop
  }
}
 8006d48:	bf00      	nop
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	4613      	mov	r3, r2
 8006d98:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d101      	bne.n	8006da4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006da0:	2302      	movs	r3, #2
 8006da2:	e029      	b.n	8006df8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	79fa      	ldrb	r2, [r7, #7]
 8006da8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f000 f81f 	bl	8006e00 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d003      	beq.n	8006df0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f001 fd31 	bl	8008858 <USBH_LL_Init>

  return USBH_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	e009      	b.n	8006e26 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	33e0      	adds	r3, #224	; 0xe0
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	3301      	adds	r3, #1
 8006e24:	60fb      	str	r3, [r7, #12]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b0f      	cmp	r3, #15
 8006e2a:	d9f2      	bls.n	8006e12 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	60fb      	str	r3, [r7, #12]
 8006e30:	e009      	b.n	8006e46 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	3301      	adds	r3, #1
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e4c:	d3f1      	bcc.n	8006e32 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2240      	movs	r2, #64	; 0x40
 8006e72:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d016      	beq.n	8006eea <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10e      	bne.n	8006ee4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ecc:	1c59      	adds	r1, r3, #1
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	33de      	adds	r3, #222	; 0xde
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	73fb      	strb	r3, [r7, #15]
 8006ee2:	e004      	b.n	8006eee <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	73fb      	strb	r3, [r7, #15]
 8006ee8:	e001      	b.n	8006eee <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006eea:	2302      	movs	r3, #2
 8006eec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3714      	adds	r7, #20
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	460b      	mov	r3, r1
 8006f06:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006f12:	78fa      	ldrb	r2, [r7, #3]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d204      	bcs.n	8006f22 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	78fa      	ldrb	r2, [r7, #3]
 8006f1c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006f20:	e001      	b.n	8006f26 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006f22:	2302      	movs	r3, #2
 8006f24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	4608      	mov	r0, r1
 8006f3e:	4611      	mov	r1, r2
 8006f40:	461a      	mov	r2, r3
 8006f42:	4603      	mov	r3, r0
 8006f44:	70fb      	strb	r3, [r7, #3]
 8006f46:	460b      	mov	r3, r1
 8006f48:	70bb      	strb	r3, [r7, #2]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006f52:	2300      	movs	r3, #0
 8006f54:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006f5c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f5e:	e025      	b.n	8006fac <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006f60:	7dfb      	ldrb	r3, [r7, #23]
 8006f62:	221a      	movs	r2, #26
 8006f64:	fb02 f303 	mul.w	r3, r2, r3
 8006f68:	3308      	adds	r3, #8
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	3302      	adds	r3, #2
 8006f70:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	795b      	ldrb	r3, [r3, #5]
 8006f76:	78fa      	ldrb	r2, [r7, #3]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d002      	beq.n	8006f82 <USBH_FindInterface+0x4e>
 8006f7c:	78fb      	ldrb	r3, [r7, #3]
 8006f7e:	2bff      	cmp	r3, #255	; 0xff
 8006f80:	d111      	bne.n	8006fa6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f86:	78ba      	ldrb	r2, [r7, #2]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d002      	beq.n	8006f92 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f8c:	78bb      	ldrb	r3, [r7, #2]
 8006f8e:	2bff      	cmp	r3, #255	; 0xff
 8006f90:	d109      	bne.n	8006fa6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f96:	787a      	ldrb	r2, [r7, #1]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d002      	beq.n	8006fa2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f9c:	787b      	ldrb	r3, [r7, #1]
 8006f9e:	2bff      	cmp	r3, #255	; 0xff
 8006fa0:	d101      	bne.n	8006fa6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006fa2:	7dfb      	ldrb	r3, [r7, #23]
 8006fa4:	e006      	b.n	8006fb4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006fac:	7dfb      	ldrb	r3, [r7, #23]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d9d6      	bls.n	8006f60 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006fb2:	23ff      	movs	r3, #255	; 0xff
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	371c      	adds	r7, #28
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f001 fc81 	bl	80088d0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006fce:	2101      	movs	r1, #1
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f001 fd9a 	bl	8008b0a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b088      	sub	sp, #32
 8006fe4:	af04      	add	r7, sp, #16
 8006fe6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006fe8:	2302      	movs	r3, #2
 8006fea:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d102      	bne.n	8007002 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2203      	movs	r2, #3
 8007000:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b0b      	cmp	r3, #11
 800700a:	f200 81be 	bhi.w	800738a <USBH_Process+0x3aa>
 800700e:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <USBH_Process+0x34>)
 8007010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007014:	08007045 	.word	0x08007045
 8007018:	08007077 	.word	0x08007077
 800701c:	080070df 	.word	0x080070df
 8007020:	08007325 	.word	0x08007325
 8007024:	0800738b 	.word	0x0800738b
 8007028:	08007183 	.word	0x08007183
 800702c:	080072cb 	.word	0x080072cb
 8007030:	080071b9 	.word	0x080071b9
 8007034:	080071d9 	.word	0x080071d9
 8007038:	080071f9 	.word	0x080071f9
 800703c:	0800723d 	.word	0x0800723d
 8007040:	0800730d 	.word	0x0800730d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b00      	cmp	r3, #0
 800704e:	f000 819e 	beq.w	800738e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007058:	20c8      	movs	r0, #200	; 0xc8
 800705a:	f001 fd9d 	bl	8008b98 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f001 fc93 	bl	800898a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007074:	e18b      	b.n	800738e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800707c:	2b01      	cmp	r3, #1
 800707e:	d107      	bne.n	8007090 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2202      	movs	r2, #2
 800708c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800708e:	e18d      	b.n	80073ac <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800709a:	d914      	bls.n	80070c6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80070a2:	3301      	adds	r3, #1
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80070b2:	2b03      	cmp	r3, #3
 80070b4:	d903      	bls.n	80070be <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	220d      	movs	r2, #13
 80070ba:	701a      	strb	r2, [r3, #0]
      break;
 80070bc:	e176      	b.n	80073ac <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	701a      	strb	r2, [r3, #0]
      break;
 80070c4:	e172      	b.n	80073ac <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80070cc:	f103 020a 	add.w	r2, r3, #10
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80070d6:	200a      	movs	r0, #10
 80070d8:	f001 fd5e 	bl	8008b98 <USBH_Delay>
      break;
 80070dc:	e166      	b.n	80073ac <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d005      	beq.n	80070f4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070ee:	2104      	movs	r1, #4
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80070f4:	2064      	movs	r0, #100	; 0x64
 80070f6:	f001 fd4f 	bl	8008b98 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f001 fc1e 	bl	800893c <USBH_LL_GetSpeed>
 8007100:	4603      	mov	r3, r0
 8007102:	461a      	mov	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2205      	movs	r2, #5
 800710e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007110:	2100      	movs	r1, #0
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f001 fa29 	bl	800856a <USBH_AllocPipe>
 8007118:	4603      	mov	r3, r0
 800711a:	461a      	mov	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007120:	2180      	movs	r1, #128	; 0x80
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f001 fa21 	bl	800856a <USBH_AllocPipe>
 8007128:	4603      	mov	r3, r0
 800712a:	461a      	mov	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	7919      	ldrb	r1, [r3, #4]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007144:	b292      	uxth	r2, r2
 8007146:	9202      	str	r2, [sp, #8]
 8007148:	2200      	movs	r2, #0
 800714a:	9201      	str	r2, [sp, #4]
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	4603      	mov	r3, r0
 8007150:	2280      	movs	r2, #128	; 0x80
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f001 f9da 	bl	800850c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	7959      	ldrb	r1, [r3, #5]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800716c:	b292      	uxth	r2, r2
 800716e:	9202      	str	r2, [sp, #8]
 8007170:	2200      	movs	r2, #0
 8007172:	9201      	str	r2, [sp, #4]
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	4603      	mov	r3, r0
 8007178:	2200      	movs	r2, #0
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f001 f9c6 	bl	800850c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007180:	e114      	b.n	80073ac <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f918 	bl	80073b8 <USBH_HandleEnum>
 8007188:	4603      	mov	r3, r0
 800718a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800718c:	7bbb      	ldrb	r3, [r7, #14]
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	f040 80fe 	bne.w	8007392 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d103      	bne.n	80071b0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2208      	movs	r2, #8
 80071ac:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80071ae:	e0f0      	b.n	8007392 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2207      	movs	r2, #7
 80071b4:	701a      	strb	r2, [r3, #0]
      break;
 80071b6:	e0ec      	b.n	8007392 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 80e9 	beq.w	8007396 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071ca:	2101      	movs	r1, #1
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2208      	movs	r2, #8
 80071d4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80071d6:	e0de      	b.n	8007396 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80071de:	b29b      	uxth	r3, r3
 80071e0:	4619      	mov	r1, r3
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fc2c 	bl	8007a40 <USBH_SetCfg>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f040 80d5 	bne.w	800739a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2209      	movs	r2, #9
 80071f4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80071f6:	e0d0      	b.n	800739a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80071fe:	f003 0320 	and.w	r3, r3, #32
 8007202:	2b00      	cmp	r3, #0
 8007204:	d016      	beq.n	8007234 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007206:	2101      	movs	r1, #1
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fc3c 	bl	8007a86 <USBH_SetFeature>
 800720e:	4603      	mov	r3, r0
 8007210:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007212:	7bbb      	ldrb	r3, [r7, #14]
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d103      	bne.n	8007222 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	220a      	movs	r2, #10
 800721e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007220:	e0bd      	b.n	800739e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b03      	cmp	r3, #3
 8007228:	f040 80b9 	bne.w	800739e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	220a      	movs	r2, #10
 8007230:	701a      	strb	r2, [r3, #0]
      break;
 8007232:	e0b4      	b.n	800739e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	220a      	movs	r2, #10
 8007238:	701a      	strb	r2, [r3, #0]
      break;
 800723a:	e0b0      	b.n	800739e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 80ad 	beq.w	80073a2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007250:	2300      	movs	r3, #0
 8007252:	73fb      	strb	r3, [r7, #15]
 8007254:	e016      	b.n	8007284 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007256:	7bfa      	ldrb	r2, [r7, #15]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	32de      	adds	r2, #222	; 0xde
 800725c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007260:	791a      	ldrb	r2, [r3, #4]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007268:	429a      	cmp	r2, r3
 800726a:	d108      	bne.n	800727e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800726c:	7bfa      	ldrb	r2, [r7, #15]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	32de      	adds	r2, #222	; 0xde
 8007272:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800727c:	e005      	b.n	800728a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800727e:	7bfb      	ldrb	r3, [r7, #15]
 8007280:	3301      	adds	r3, #1
 8007282:	73fb      	strb	r3, [r7, #15]
 8007284:	7bfb      	ldrb	r3, [r7, #15]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0e5      	beq.n	8007256 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007290:	2b00      	cmp	r3, #0
 8007292:	d016      	beq.n	80072c2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	4798      	blx	r3
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d109      	bne.n	80072ba <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2206      	movs	r2, #6
 80072aa:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072b2:	2103      	movs	r1, #3
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072b8:	e073      	b.n	80073a2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	220d      	movs	r2, #13
 80072be:	701a      	strb	r2, [r3, #0]
      break;
 80072c0:	e06f      	b.n	80073a2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	220d      	movs	r2, #13
 80072c6:	701a      	strb	r2, [r3, #0]
      break;
 80072c8:	e06b      	b.n	80073a2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d017      	beq.n	8007304 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	4798      	blx	r3
 80072e0:	4603      	mov	r3, r0
 80072e2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80072e4:	7bbb      	ldrb	r3, [r7, #14]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d103      	bne.n	80072f4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	220b      	movs	r2, #11
 80072f0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072f2:	e058      	b.n	80073a6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80072f4:	7bbb      	ldrb	r3, [r7, #14]
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d154      	bne.n	80073a6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	220d      	movs	r2, #13
 8007300:	701a      	strb	r2, [r3, #0]
      break;
 8007302:	e050      	b.n	80073a6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	220d      	movs	r2, #13
 8007308:	701a      	strb	r2, [r3, #0]
      break;
 800730a:	e04c      	b.n	80073a6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007312:	2b00      	cmp	r3, #0
 8007314:	d049      	beq.n	80073aa <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	4798      	blx	r3
      }
      break;
 8007322:	e042      	b.n	80073aa <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7ff fd67 	bl	8006e00 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007338:	2b00      	cmp	r3, #0
 800733a:	d009      	beq.n	8007350 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007356:	2b00      	cmp	r3, #0
 8007358:	d005      	beq.n	8007366 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007360:	2105      	movs	r1, #5
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b01      	cmp	r3, #1
 8007370:	d107      	bne.n	8007382 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7ff fe20 	bl	8006fc0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007380:	e014      	b.n	80073ac <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f001 faa4 	bl	80088d0 <USBH_LL_Start>
      break;
 8007388:	e010      	b.n	80073ac <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800738a:	bf00      	nop
 800738c:	e00e      	b.n	80073ac <USBH_Process+0x3cc>
      break;
 800738e:	bf00      	nop
 8007390:	e00c      	b.n	80073ac <USBH_Process+0x3cc>
      break;
 8007392:	bf00      	nop
 8007394:	e00a      	b.n	80073ac <USBH_Process+0x3cc>
    break;
 8007396:	bf00      	nop
 8007398:	e008      	b.n	80073ac <USBH_Process+0x3cc>
      break;
 800739a:	bf00      	nop
 800739c:	e006      	b.n	80073ac <USBH_Process+0x3cc>
      break;
 800739e:	bf00      	nop
 80073a0:	e004      	b.n	80073ac <USBH_Process+0x3cc>
      break;
 80073a2:	bf00      	nop
 80073a4:	e002      	b.n	80073ac <USBH_Process+0x3cc>
      break;
 80073a6:	bf00      	nop
 80073a8:	e000      	b.n	80073ac <USBH_Process+0x3cc>
      break;
 80073aa:	bf00      	nop
  }
  return USBH_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop

080073b8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b088      	sub	sp, #32
 80073bc:	af04      	add	r7, sp, #16
 80073be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80073c0:	2301      	movs	r3, #1
 80073c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80073c4:	2301      	movs	r3, #1
 80073c6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	785b      	ldrb	r3, [r3, #1]
 80073cc:	2b07      	cmp	r3, #7
 80073ce:	f200 81c1 	bhi.w	8007754 <USBH_HandleEnum+0x39c>
 80073d2:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <USBH_HandleEnum+0x20>)
 80073d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d8:	080073f9 	.word	0x080073f9
 80073dc:	080074b7 	.word	0x080074b7
 80073e0:	08007521 	.word	0x08007521
 80073e4:	080075af 	.word	0x080075af
 80073e8:	08007619 	.word	0x08007619
 80073ec:	08007689 	.word	0x08007689
 80073f0:	080076cf 	.word	0x080076cf
 80073f4:	08007715 	.word	0x08007715
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80073f8:	2108      	movs	r1, #8
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fa50 	bl	80078a0 <USBH_Get_DevDesc>
 8007400:	4603      	mov	r3, r0
 8007402:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007404:	7bbb      	ldrb	r3, [r7, #14]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d130      	bne.n	800746c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	7919      	ldrb	r1, [r3, #4]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800742e:	b292      	uxth	r2, r2
 8007430:	9202      	str	r2, [sp, #8]
 8007432:	2200      	movs	r2, #0
 8007434:	9201      	str	r2, [sp, #4]
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	4603      	mov	r3, r0
 800743a:	2280      	movs	r2, #128	; 0x80
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f001 f865 	bl	800850c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	7959      	ldrb	r1, [r3, #5]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007456:	b292      	uxth	r2, r2
 8007458:	9202      	str	r2, [sp, #8]
 800745a:	2200      	movs	r2, #0
 800745c:	9201      	str	r2, [sp, #4]
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	4603      	mov	r3, r0
 8007462:	2200      	movs	r2, #0
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f001 f851 	bl	800850c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800746a:	e175      	b.n	8007758 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800746c:	7bbb      	ldrb	r3, [r7, #14]
 800746e:	2b03      	cmp	r3, #3
 8007470:	f040 8172 	bne.w	8007758 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800747a:	3301      	adds	r3, #1
 800747c:	b2da      	uxtb	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800748a:	2b03      	cmp	r3, #3
 800748c:	d903      	bls.n	8007496 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	220d      	movs	r2, #13
 8007492:	701a      	strb	r2, [r3, #0]
      break;
 8007494:	e160      	b.n	8007758 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	795b      	ldrb	r3, [r3, #5]
 800749a:	4619      	mov	r1, r3
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f001 f885 	bl	80085ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	791b      	ldrb	r3, [r3, #4]
 80074a6:	4619      	mov	r1, r3
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f001 f87f 	bl	80085ac <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	701a      	strb	r2, [r3, #0]
      break;
 80074b4:	e150      	b.n	8007758 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80074b6:	2112      	movs	r1, #18
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f9f1 	bl	80078a0 <USBH_Get_DevDesc>
 80074be:	4603      	mov	r3, r0
 80074c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074c2:	7bbb      	ldrb	r3, [r7, #14]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d103      	bne.n	80074d0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80074ce:	e145      	b.n	800775c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074d0:	7bbb      	ldrb	r3, [r7, #14]
 80074d2:	2b03      	cmp	r3, #3
 80074d4:	f040 8142 	bne.w	800775c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074de:	3301      	adds	r3, #1
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	d903      	bls.n	80074fa <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	220d      	movs	r2, #13
 80074f6:	701a      	strb	r2, [r3, #0]
      break;
 80074f8:	e130      	b.n	800775c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	795b      	ldrb	r3, [r3, #5]
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f001 f853 	bl	80085ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	791b      	ldrb	r3, [r3, #4]
 800750a:	4619      	mov	r1, r3
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f001 f84d 	bl	80085ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	701a      	strb	r2, [r3, #0]
      break;
 800751e:	e11d      	b.n	800775c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007520:	2101      	movs	r1, #1
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fa68 	bl	80079f8 <USBH_SetAddress>
 8007528:	4603      	mov	r3, r0
 800752a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800752c:	7bbb      	ldrb	r3, [r7, #14]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d132      	bne.n	8007598 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007532:	2002      	movs	r0, #2
 8007534:	f001 fb30 	bl	8008b98 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2203      	movs	r2, #3
 8007544:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	7919      	ldrb	r1, [r3, #4]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800755a:	b292      	uxth	r2, r2
 800755c:	9202      	str	r2, [sp, #8]
 800755e:	2200      	movs	r2, #0
 8007560:	9201      	str	r2, [sp, #4]
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	4603      	mov	r3, r0
 8007566:	2280      	movs	r2, #128	; 0x80
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 ffcf 	bl	800850c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	7959      	ldrb	r1, [r3, #5]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007582:	b292      	uxth	r2, r2
 8007584:	9202      	str	r2, [sp, #8]
 8007586:	2200      	movs	r2, #0
 8007588:	9201      	str	r2, [sp, #4]
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	4603      	mov	r3, r0
 800758e:	2200      	movs	r2, #0
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 ffbb 	bl	800850c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007596:	e0e3      	b.n	8007760 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007598:	7bbb      	ldrb	r3, [r7, #14]
 800759a:	2b03      	cmp	r3, #3
 800759c:	f040 80e0 	bne.w	8007760 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	220d      	movs	r2, #13
 80075a4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	705a      	strb	r2, [r3, #1]
      break;
 80075ac:	e0d8      	b.n	8007760 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80075ae:	2109      	movs	r1, #9
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f99d 	bl	80078f0 <USBH_Get_CfgDesc>
 80075b6:	4603      	mov	r3, r0
 80075b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075ba:	7bbb      	ldrb	r3, [r7, #14]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d103      	bne.n	80075c8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2204      	movs	r2, #4
 80075c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80075c6:	e0cd      	b.n	8007764 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075c8:	7bbb      	ldrb	r3, [r7, #14]
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	f040 80ca 	bne.w	8007764 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075d6:	3301      	adds	r3, #1
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	d903      	bls.n	80075f2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	220d      	movs	r2, #13
 80075ee:	701a      	strb	r2, [r3, #0]
      break;
 80075f0:	e0b8      	b.n	8007764 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	795b      	ldrb	r3, [r3, #5]
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 ffd7 	bl	80085ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	791b      	ldrb	r3, [r3, #4]
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 ffd1 	bl	80085ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	701a      	strb	r2, [r3, #0]
      break;
 8007616:	e0a5      	b.n	8007764 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800761e:	4619      	mov	r1, r3
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f965 	bl	80078f0 <USBH_Get_CfgDesc>
 8007626:	4603      	mov	r3, r0
 8007628:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800762a:	7bbb      	ldrb	r3, [r7, #14]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d103      	bne.n	8007638 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2205      	movs	r2, #5
 8007634:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007636:	e097      	b.n	8007768 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007638:	7bbb      	ldrb	r3, [r7, #14]
 800763a:	2b03      	cmp	r3, #3
 800763c:	f040 8094 	bne.w	8007768 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007646:	3301      	adds	r3, #1
 8007648:	b2da      	uxtb	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007656:	2b03      	cmp	r3, #3
 8007658:	d903      	bls.n	8007662 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	220d      	movs	r2, #13
 800765e:	701a      	strb	r2, [r3, #0]
      break;
 8007660:	e082      	b.n	8007768 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	795b      	ldrb	r3, [r3, #5]
 8007666:	4619      	mov	r1, r3
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 ff9f 	bl	80085ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	791b      	ldrb	r3, [r3, #4]
 8007672:	4619      	mov	r1, r3
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 ff99 	bl	80085ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	701a      	strb	r2, [r3, #0]
      break;
 8007686:	e06f      	b.n	8007768 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800768e:	2b00      	cmp	r3, #0
 8007690:	d019      	beq.n	80076c6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800769e:	23ff      	movs	r3, #255	; 0xff
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 f949 	bl	8007938 <USBH_Get_StringDesc>
 80076a6:	4603      	mov	r3, r0
 80076a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80076aa:	7bbb      	ldrb	r3, [r7, #14]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d103      	bne.n	80076b8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2206      	movs	r2, #6
 80076b4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80076b6:	e059      	b.n	800776c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076b8:	7bbb      	ldrb	r3, [r7, #14]
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d156      	bne.n	800776c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2206      	movs	r2, #6
 80076c2:	705a      	strb	r2, [r3, #1]
      break;
 80076c4:	e052      	b.n	800776c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2206      	movs	r2, #6
 80076ca:	705a      	strb	r2, [r3, #1]
      break;
 80076cc:	e04e      	b.n	800776c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d019      	beq.n	800770c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80076e4:	23ff      	movs	r3, #255	; 0xff
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f926 	bl	8007938 <USBH_Get_StringDesc>
 80076ec:	4603      	mov	r3, r0
 80076ee:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80076f0:	7bbb      	ldrb	r3, [r7, #14]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d103      	bne.n	80076fe <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2207      	movs	r2, #7
 80076fa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80076fc:	e038      	b.n	8007770 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076fe:	7bbb      	ldrb	r3, [r7, #14]
 8007700:	2b03      	cmp	r3, #3
 8007702:	d135      	bne.n	8007770 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2207      	movs	r2, #7
 8007708:	705a      	strb	r2, [r3, #1]
      break;
 800770a:	e031      	b.n	8007770 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2207      	movs	r2, #7
 8007710:	705a      	strb	r2, [r3, #1]
      break;
 8007712:	e02d      	b.n	8007770 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800771a:	2b00      	cmp	r3, #0
 800771c:	d017      	beq.n	800774e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800772a:	23ff      	movs	r3, #255	; 0xff
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f903 	bl	8007938 <USBH_Get_StringDesc>
 8007732:	4603      	mov	r3, r0
 8007734:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007736:	7bbb      	ldrb	r3, [r7, #14]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d102      	bne.n	8007742 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007740:	e018      	b.n	8007774 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007742:	7bbb      	ldrb	r3, [r7, #14]
 8007744:	2b03      	cmp	r3, #3
 8007746:	d115      	bne.n	8007774 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007748:	2300      	movs	r3, #0
 800774a:	73fb      	strb	r3, [r7, #15]
      break;
 800774c:	e012      	b.n	8007774 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	73fb      	strb	r3, [r7, #15]
      break;
 8007752:	e00f      	b.n	8007774 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007754:	bf00      	nop
 8007756:	e00e      	b.n	8007776 <USBH_HandleEnum+0x3be>
      break;
 8007758:	bf00      	nop
 800775a:	e00c      	b.n	8007776 <USBH_HandleEnum+0x3be>
      break;
 800775c:	bf00      	nop
 800775e:	e00a      	b.n	8007776 <USBH_HandleEnum+0x3be>
      break;
 8007760:	bf00      	nop
 8007762:	e008      	b.n	8007776 <USBH_HandleEnum+0x3be>
      break;
 8007764:	bf00      	nop
 8007766:	e006      	b.n	8007776 <USBH_HandleEnum+0x3be>
      break;
 8007768:	bf00      	nop
 800776a:	e004      	b.n	8007776 <USBH_HandleEnum+0x3be>
      break;
 800776c:	bf00      	nop
 800776e:	e002      	b.n	8007776 <USBH_HandleEnum+0x3be>
      break;
 8007770:	bf00      	nop
 8007772:	e000      	b.n	8007776 <USBH_HandleEnum+0x3be>
      break;
 8007774:	bf00      	nop
  }
  return Status;
 8007776:	7bfb      	ldrb	r3, [r7, #15]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007792:	bf00      	nop
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b082      	sub	sp, #8
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80077ac:	1c5a      	adds	r2, r3, #1
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f804 	bl	80077c2 <USBH_HandleSof>
}
 80077ba:	bf00      	nop
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b082      	sub	sp, #8
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b0b      	cmp	r3, #11
 80077d2:	d10a      	bne.n	80077ea <USBH_HandleSof+0x28>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d005      	beq.n	80077ea <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	4798      	blx	r3
  }
}
 80077ea:	bf00      	nop
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b083      	sub	sp, #12
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007802:	bf00      	nop
}
 8007804:	370c      	adds	r7, #12
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800780e:	b480      	push	{r7}
 8007810:	b083      	sub	sp, #12
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800781e:	bf00      	nop
}
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800782a:	b480      	push	{r7}
 800782c:	b083      	sub	sp, #12
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f001 f844 	bl	8008906 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	791b      	ldrb	r3, [r3, #4]
 8007882:	4619      	mov	r1, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fe91 	bl	80085ac <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	795b      	ldrb	r3, [r3, #5]
 800788e:	4619      	mov	r1, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fe8b 	bl	80085ac <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af02      	add	r7, sp, #8
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	460b      	mov	r3, r1
 80078aa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80078b2:	78fb      	ldrb	r3, [r7, #3]
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	4613      	mov	r3, r2
 80078ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078be:	2100      	movs	r1, #0
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f864 	bl	800798e <USBH_GetDescriptor>
 80078c6:	4603      	mov	r3, r0
 80078c8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10a      	bne.n	80078e6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f203 3026 	addw	r0, r3, #806	; 0x326
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80078dc:	78fa      	ldrb	r2, [r7, #3]
 80078de:	b292      	uxth	r2, r2
 80078e0:	4619      	mov	r1, r3
 80078e2:	f000 f918 	bl	8007b16 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af02      	add	r7, sp, #8
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	460b      	mov	r3, r1
 80078fa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	331c      	adds	r3, #28
 8007900:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007902:	887b      	ldrh	r3, [r7, #2]
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800790c:	2100      	movs	r1, #0
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f83d 	bl	800798e <USBH_GetDescriptor>
 8007914:	4603      	mov	r3, r0
 8007916:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007918:	7bfb      	ldrb	r3, [r7, #15]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d107      	bne.n	800792e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800791e:	887b      	ldrh	r3, [r7, #2]
 8007920:	461a      	mov	r2, r3
 8007922:	68b9      	ldr	r1, [r7, #8]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f987 	bl	8007c38 <USBH_ParseCfgDesc>
 800792a:	4603      	mov	r3, r0
 800792c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800792e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007930:	4618      	mov	r0, r3
 8007932:	3710      	adds	r7, #16
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b088      	sub	sp, #32
 800793c:	af02      	add	r7, sp, #8
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	607a      	str	r2, [r7, #4]
 8007942:	461a      	mov	r2, r3
 8007944:	460b      	mov	r3, r1
 8007946:	72fb      	strb	r3, [r7, #11]
 8007948:	4613      	mov	r3, r2
 800794a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800794c:	7afb      	ldrb	r3, [r7, #11]
 800794e:	b29b      	uxth	r3, r3
 8007950:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007954:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800795c:	893b      	ldrh	r3, [r7, #8]
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	460b      	mov	r3, r1
 8007962:	2100      	movs	r1, #0
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 f812 	bl	800798e <USBH_GetDescriptor>
 800796a:	4603      	mov	r3, r0
 800796c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800796e:	7dfb      	ldrb	r3, [r7, #23]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d107      	bne.n	8007984 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800797a:	893a      	ldrh	r2, [r7, #8]
 800797c:	6879      	ldr	r1, [r7, #4]
 800797e:	4618      	mov	r0, r3
 8007980:	f000 fb24 	bl	8007fcc <USBH_ParseStringDesc>
  }

  return status;
 8007984:	7dfb      	ldrb	r3, [r7, #23]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3718      	adds	r7, #24
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b084      	sub	sp, #16
 8007992:	af00      	add	r7, sp, #0
 8007994:	60f8      	str	r0, [r7, #12]
 8007996:	607b      	str	r3, [r7, #4]
 8007998:	460b      	mov	r3, r1
 800799a:	72fb      	strb	r3, [r7, #11]
 800799c:	4613      	mov	r3, r2
 800799e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	789b      	ldrb	r3, [r3, #2]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d11c      	bne.n	80079e2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80079a8:	7afb      	ldrb	r3, [r7, #11]
 80079aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2206      	movs	r2, #6
 80079b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	893a      	ldrh	r2, [r7, #8]
 80079be:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80079c0:	893b      	ldrh	r3, [r7, #8]
 80079c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80079c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079ca:	d104      	bne.n	80079d6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f240 4209 	movw	r2, #1033	; 0x409
 80079d2:	829a      	strh	r2, [r3, #20]
 80079d4:	e002      	b.n	80079dc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	8b3a      	ldrh	r2, [r7, #24]
 80079e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80079e2:	8b3b      	ldrh	r3, [r7, #24]
 80079e4:	461a      	mov	r2, r3
 80079e6:	6879      	ldr	r1, [r7, #4]
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 fb3d 	bl	8008068 <USBH_CtlReq>
 80079ee:	4603      	mov	r3, r0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	460b      	mov	r3, r1
 8007a02:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	789b      	ldrb	r3, [r3, #2]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d10f      	bne.n	8007a2c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2205      	movs	r2, #5
 8007a16:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007a18:	78fb      	ldrb	r3, [r7, #3]
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	2100      	movs	r1, #0
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fb19 	bl	8008068 <USBH_CtlReq>
 8007a36:	4603      	mov	r3, r0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	789b      	ldrb	r3, [r3, #2]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d10e      	bne.n	8007a72 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2209      	movs	r2, #9
 8007a5e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	887a      	ldrh	r2, [r7, #2]
 8007a64:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007a72:	2200      	movs	r2, #0
 8007a74:	2100      	movs	r1, #0
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 faf6 	bl	8008068 <USBH_CtlReq>
 8007a7c:	4603      	mov	r3, r0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3708      	adds	r7, #8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b082      	sub	sp, #8
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
 8007a8e:	460b      	mov	r3, r1
 8007a90:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	789b      	ldrb	r3, [r3, #2]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d10f      	bne.n	8007aba <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2203      	movs	r2, #3
 8007aa4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007aa6:	78fb      	ldrb	r3, [r7, #3]
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007aba:	2200      	movs	r2, #0
 8007abc:	2100      	movs	r1, #0
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fad2 	bl	8008068 <USBH_CtlReq>
 8007ac4:	4603      	mov	r3, r0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b082      	sub	sp, #8
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	789b      	ldrb	r3, [r3, #2]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d10f      	bne.n	8007b02 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007af4:	78fb      	ldrb	r3, [r7, #3]
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007b02:	2200      	movs	r2, #0
 8007b04:	2100      	movs	r1, #0
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 faae 	bl	8008068 <USBH_CtlReq>
 8007b0c:	4603      	mov	r3, r0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b085      	sub	sp, #20
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	60f8      	str	r0, [r7, #12]
 8007b1e:	60b9      	str	r1, [r7, #8]
 8007b20:	4613      	mov	r3, r2
 8007b22:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	781a      	ldrb	r2, [r3, #0]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	785a      	ldrb	r2, [r3, #1]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	3302      	adds	r3, #2
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	3303      	adds	r3, #3
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	021b      	lsls	r3, r3, #8
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	791a      	ldrb	r2, [r3, #4]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	795a      	ldrb	r2, [r3, #5]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	799a      	ldrb	r2, [r3, #6]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	79da      	ldrb	r2, [r3, #7]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	79db      	ldrb	r3, [r3, #7]
 8007b74:	2b20      	cmp	r3, #32
 8007b76:	dc11      	bgt.n	8007b9c <USBH_ParseDevDesc+0x86>
 8007b78:	2b08      	cmp	r3, #8
 8007b7a:	db16      	blt.n	8007baa <USBH_ParseDevDesc+0x94>
 8007b7c:	3b08      	subs	r3, #8
 8007b7e:	2201      	movs	r2, #1
 8007b80:	fa02 f303 	lsl.w	r3, r2, r3
 8007b84:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	bf14      	ite	ne
 8007b90:	2301      	movne	r3, #1
 8007b92:	2300      	moveq	r3, #0
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d102      	bne.n	8007ba0 <USBH_ParseDevDesc+0x8a>
 8007b9a:	e006      	b.n	8007baa <USBH_ParseDevDesc+0x94>
 8007b9c:	2b40      	cmp	r3, #64	; 0x40
 8007b9e:	d104      	bne.n	8007baa <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	79da      	ldrb	r2, [r3, #7]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	71da      	strb	r2, [r3, #7]
      break;
 8007ba8:	e003      	b.n	8007bb2 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2240      	movs	r2, #64	; 0x40
 8007bae:	71da      	strb	r2, [r3, #7]
      break;
 8007bb0:	bf00      	nop
  }

  if (length > 8U)
 8007bb2:	88fb      	ldrh	r3, [r7, #6]
 8007bb4:	2b08      	cmp	r3, #8
 8007bb6:	d939      	bls.n	8007c2c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	3308      	adds	r3, #8
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	3309      	adds	r3, #9
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	021b      	lsls	r3, r3, #8
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	330a      	adds	r3, #10
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	330b      	adds	r3, #11
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	021b      	lsls	r3, r3, #8
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	4313      	orrs	r3, r2
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	330c      	adds	r3, #12
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	330d      	adds	r3, #13
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	021b      	lsls	r3, r3, #8
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	4313      	orrs	r3, r2
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	7b9a      	ldrb	r2, [r3, #14]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	7bda      	ldrb	r2, [r3, #15]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	7c1a      	ldrb	r2, [r3, #16]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	7c5a      	ldrb	r2, [r3, #17]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	745a      	strb	r2, [r3, #17]
  }
}
 8007c2c:	bf00      	nop
 8007c2e:	3714      	adds	r7, #20
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b08c      	sub	sp, #48	; 0x30
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	4613      	mov	r3, r2
 8007c44:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007c4c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	781a      	ldrb	r2, [r3, #0]
 8007c6c:	6a3b      	ldr	r3, [r7, #32]
 8007c6e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	785a      	ldrb	r2, [r3, #1]
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	3302      	adds	r3, #2
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	3303      	adds	r3, #3
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	021b      	lsls	r3, r3, #8
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c94:	bf28      	it	cs
 8007c96:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	6a3b      	ldr	r3, [r7, #32]
 8007c9e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	791a      	ldrb	r2, [r3, #4]
 8007ca4:	6a3b      	ldr	r3, [r7, #32]
 8007ca6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	795a      	ldrb	r2, [r3, #5]
 8007cac:	6a3b      	ldr	r3, [r7, #32]
 8007cae:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	799a      	ldrb	r2, [r3, #6]
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	79da      	ldrb	r2, [r3, #7]
 8007cbc:	6a3b      	ldr	r3, [r7, #32]
 8007cbe:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	7a1a      	ldrb	r2, [r3, #8]
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007cc8:	6a3b      	ldr	r3, [r7, #32]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	2b09      	cmp	r3, #9
 8007cce:	d002      	beq.n	8007cd6 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007cd0:	6a3b      	ldr	r3, [r7, #32]
 8007cd2:	2209      	movs	r2, #9
 8007cd4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007cd6:	88fb      	ldrh	r3, [r7, #6]
 8007cd8:	2b09      	cmp	r3, #9
 8007cda:	f240 809d 	bls.w	8007e18 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007cde:	2309      	movs	r3, #9
 8007ce0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007ce6:	e081      	b.n	8007dec <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ce8:	f107 0316 	add.w	r3, r7, #22
 8007cec:	4619      	mov	r1, r3
 8007cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cf0:	f000 f99f 	bl	8008032 <USBH_GetNextDesc>
 8007cf4:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf8:	785b      	ldrb	r3, [r3, #1]
 8007cfa:	2b04      	cmp	r3, #4
 8007cfc:	d176      	bne.n	8007dec <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	2b09      	cmp	r3, #9
 8007d04:	d002      	beq.n	8007d0c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d08:	2209      	movs	r2, #9
 8007d0a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d10:	221a      	movs	r2, #26
 8007d12:	fb02 f303 	mul.w	r3, r2, r3
 8007d16:	3308      	adds	r3, #8
 8007d18:	6a3a      	ldr	r2, [r7, #32]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	3302      	adds	r3, #2
 8007d1e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007d20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d22:	69f8      	ldr	r0, [r7, #28]
 8007d24:	f000 f87e 	bl	8007e24 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007d32:	e043      	b.n	8007dbc <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007d34:	f107 0316 	add.w	r3, r7, #22
 8007d38:	4619      	mov	r1, r3
 8007d3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d3c:	f000 f979 	bl	8008032 <USBH_GetNextDesc>
 8007d40:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d44:	785b      	ldrb	r3, [r3, #1]
 8007d46:	2b05      	cmp	r3, #5
 8007d48:	d138      	bne.n	8007dbc <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	795b      	ldrb	r3, [r3, #5]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d10f      	bne.n	8007d72 <USBH_ParseCfgDesc+0x13a>
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	799b      	ldrb	r3, [r3, #6]
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d10b      	bne.n	8007d72 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	79db      	ldrb	r3, [r3, #7]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10f      	bne.n	8007d82 <USBH_ParseCfgDesc+0x14a>
 8007d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	2b09      	cmp	r3, #9
 8007d68:	d00b      	beq.n	8007d82 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6c:	2209      	movs	r2, #9
 8007d6e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007d70:	e007      	b.n	8007d82 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	2b07      	cmp	r3, #7
 8007d78:	d004      	beq.n	8007d84 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7c:	2207      	movs	r2, #7
 8007d7e:	701a      	strb	r2, [r3, #0]
 8007d80:	e000      	b.n	8007d84 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007d82:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007d84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d88:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d8c:	3201      	adds	r2, #1
 8007d8e:	00d2      	lsls	r2, r2, #3
 8007d90:	211a      	movs	r1, #26
 8007d92:	fb01 f303 	mul.w	r3, r1, r3
 8007d96:	4413      	add	r3, r2
 8007d98:	3308      	adds	r3, #8
 8007d9a:	6a3a      	ldr	r2, [r7, #32]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	3304      	adds	r3, #4
 8007da0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007da2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007da4:	69b9      	ldr	r1, [r7, #24]
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f000 f86b 	bl	8007e82 <USBH_ParseEPDesc>
 8007dac:	4603      	mov	r3, r0
 8007dae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007db2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007db6:	3301      	adds	r3, #1
 8007db8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	791b      	ldrb	r3, [r3, #4]
 8007dc0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d204      	bcs.n	8007dd2 <USBH_ParseCfgDesc+0x19a>
 8007dc8:	6a3b      	ldr	r3, [r7, #32]
 8007dca:	885a      	ldrh	r2, [r3, #2]
 8007dcc:	8afb      	ldrh	r3, [r7, #22]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d8b0      	bhi.n	8007d34 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	791b      	ldrb	r3, [r3, #4]
 8007dd6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d201      	bcs.n	8007de2 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e01c      	b.n	8007e1c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007de2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007de6:	3301      	adds	r3, #1
 8007de8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007dec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d805      	bhi.n	8007e00 <USBH_ParseCfgDesc+0x1c8>
 8007df4:	6a3b      	ldr	r3, [r7, #32]
 8007df6:	885a      	ldrh	r2, [r3, #2]
 8007df8:	8afb      	ldrh	r3, [r7, #22]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	f63f af74 	bhi.w	8007ce8 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007e00:	6a3b      	ldr	r3, [r7, #32]
 8007e02:	791b      	ldrb	r3, [r3, #4]
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	bf28      	it	cs
 8007e08:	2302      	movcs	r3, #2
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d201      	bcs.n	8007e18 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e001      	b.n	8007e1c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007e18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3730      	adds	r7, #48	; 0x30
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	781a      	ldrb	r2, [r3, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	785a      	ldrb	r2, [r3, #1]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	789a      	ldrb	r2, [r3, #2]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	78da      	ldrb	r2, [r3, #3]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	791a      	ldrb	r2, [r3, #4]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	795a      	ldrb	r2, [r3, #5]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	799a      	ldrb	r2, [r3, #6]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	79da      	ldrb	r2, [r3, #7]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	7a1a      	ldrb	r2, [r3, #8]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	721a      	strb	r2, [r3, #8]
}
 8007e76:	bf00      	nop
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007e82:	b480      	push	{r7}
 8007e84:	b087      	sub	sp, #28
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	60f8      	str	r0, [r7, #12]
 8007e8a:	60b9      	str	r1, [r7, #8]
 8007e8c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	781a      	ldrb	r2, [r3, #0]
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	785a      	ldrb	r2, [r3, #1]
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	789a      	ldrb	r2, [r3, #2]
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	78da      	ldrb	r2, [r3, #3]
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	3304      	adds	r3, #4
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	3305      	adds	r3, #5
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	021b      	lsls	r3, r3, #8
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	799a      	ldrb	r2, [r3, #6]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	889b      	ldrh	r3, [r3, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d102      	bne.n	8007ee4 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	75fb      	strb	r3, [r7, #23]
 8007ee2:	e033      	b.n	8007f4c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	889b      	ldrh	r3, [r3, #4]
 8007ee8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007eec:	f023 0307 	bic.w	r3, r3, #7
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	889b      	ldrh	r3, [r3, #4]
 8007efa:	b21a      	sxth	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	3304      	adds	r3, #4
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	b299      	uxth	r1, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	3305      	adds	r3, #5
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	021b      	lsls	r3, r3, #8
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	430b      	orrs	r3, r1
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d110      	bne.n	8007f3e <USBH_ParseEPDesc+0xbc>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	3304      	adds	r3, #4
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	b299      	uxth	r1, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	3305      	adds	r3, #5
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	021b      	lsls	r3, r3, #8
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	430b      	orrs	r3, r1
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	b21b      	sxth	r3, r3
 8007f36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f3a:	b21b      	sxth	r3, r3
 8007f3c:	e001      	b.n	8007f42 <USBH_ParseEPDesc+0xc0>
 8007f3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f42:	4313      	orrs	r3, r2
 8007f44:	b21b      	sxth	r3, r3
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d116      	bne.n	8007f84 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	78db      	ldrb	r3, [r3, #3]
 8007f5a:	f003 0303 	and.w	r3, r3, #3
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d005      	beq.n	8007f6e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	78db      	ldrb	r3, [r3, #3]
 8007f66:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007f6a:	2b03      	cmp	r3, #3
 8007f6c:	d127      	bne.n	8007fbe <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	799b      	ldrb	r3, [r3, #6]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d003      	beq.n	8007f7e <USBH_ParseEPDesc+0xfc>
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	799b      	ldrb	r3, [r3, #6]
 8007f7a:	2b10      	cmp	r3, #16
 8007f7c:	d91f      	bls.n	8007fbe <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	75fb      	strb	r3, [r7, #23]
 8007f82:	e01c      	b.n	8007fbe <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	78db      	ldrb	r3, [r3, #3]
 8007f88:	f003 0303 	and.w	r3, r3, #3
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d10a      	bne.n	8007fa6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	799b      	ldrb	r3, [r3, #6]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d003      	beq.n	8007fa0 <USBH_ParseEPDesc+0x11e>
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	799b      	ldrb	r3, [r3, #6]
 8007f9c:	2b10      	cmp	r3, #16
 8007f9e:	d90e      	bls.n	8007fbe <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	75fb      	strb	r3, [r7, #23]
 8007fa4:	e00b      	b.n	8007fbe <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	78db      	ldrb	r3, [r3, #3]
 8007faa:	f003 0303 	and.w	r3, r3, #3
 8007fae:	2b03      	cmp	r3, #3
 8007fb0:	d105      	bne.n	8007fbe <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	799b      	ldrb	r3, [r3, #6]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d101      	bne.n	8007fbe <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	371c      	adds	r7, #28
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b087      	sub	sp, #28
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	2b03      	cmp	r3, #3
 8007fe2:	d120      	bne.n	8008026 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	1e9a      	subs	r2, r3, #2
 8007fea:	88fb      	ldrh	r3, [r7, #6]
 8007fec:	4293      	cmp	r3, r2
 8007fee:	bf28      	it	cs
 8007ff0:	4613      	movcs	r3, r2
 8007ff2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	3302      	adds	r3, #2
 8007ff8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	82fb      	strh	r3, [r7, #22]
 8007ffe:	e00b      	b.n	8008018 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008000:	8afb      	ldrh	r3, [r7, #22]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	4413      	add	r3, r2
 8008006:	781a      	ldrb	r2, [r3, #0]
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	3301      	adds	r3, #1
 8008010:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008012:	8afb      	ldrh	r3, [r7, #22]
 8008014:	3302      	adds	r3, #2
 8008016:	82fb      	strh	r3, [r7, #22]
 8008018:	8afa      	ldrh	r2, [r7, #22]
 800801a:	8abb      	ldrh	r3, [r7, #20]
 800801c:	429a      	cmp	r2, r3
 800801e:	d3ef      	bcc.n	8008000 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	2200      	movs	r2, #0
 8008024:	701a      	strb	r2, [r3, #0]
  }
}
 8008026:	bf00      	nop
 8008028:	371c      	adds	r7, #28
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008032:	b480      	push	{r7}
 8008034:	b085      	sub	sp, #20
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	881a      	ldrh	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	b29b      	uxth	r3, r3
 8008046:	4413      	add	r3, r2
 8008048:	b29a      	uxth	r2, r3
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4413      	add	r3, r2
 8008058:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800805a:	68fb      	ldr	r3, [r7, #12]
}
 800805c:	4618      	mov	r0, r3
 800805e:	3714      	adds	r7, #20
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b086      	sub	sp, #24
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	4613      	mov	r3, r2
 8008074:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008076:	2301      	movs	r3, #1
 8008078:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	789b      	ldrb	r3, [r3, #2]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d002      	beq.n	8008088 <USBH_CtlReq+0x20>
 8008082:	2b02      	cmp	r3, #2
 8008084:	d00f      	beq.n	80080a6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008086:	e027      	b.n	80080d8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	88fa      	ldrh	r2, [r7, #6]
 8008092:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2201      	movs	r2, #1
 8008098:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2202      	movs	r2, #2
 800809e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80080a0:	2301      	movs	r3, #1
 80080a2:	75fb      	strb	r3, [r7, #23]
      break;
 80080a4:	e018      	b.n	80080d8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f000 f81c 	bl	80080e4 <USBH_HandleControl>
 80080ac:	4603      	mov	r3, r0
 80080ae:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80080b0:	7dfb      	ldrb	r3, [r7, #23]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d002      	beq.n	80080bc <USBH_CtlReq+0x54>
 80080b6:	7dfb      	ldrb	r3, [r7, #23]
 80080b8:	2b03      	cmp	r3, #3
 80080ba:	d106      	bne.n	80080ca <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2201      	movs	r2, #1
 80080c0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	761a      	strb	r2, [r3, #24]
      break;
 80080c8:	e005      	b.n	80080d6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80080ca:	7dfb      	ldrb	r3, [r7, #23]
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d102      	bne.n	80080d6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2201      	movs	r2, #1
 80080d4:	709a      	strb	r2, [r3, #2]
      break;
 80080d6:	bf00      	nop
  }
  return status;
 80080d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3718      	adds	r7, #24
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
	...

080080e4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af02      	add	r7, sp, #8
 80080ea:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80080ec:	2301      	movs	r3, #1
 80080ee:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80080f0:	2300      	movs	r3, #0
 80080f2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	7e1b      	ldrb	r3, [r3, #24]
 80080f8:	3b01      	subs	r3, #1
 80080fa:	2b0a      	cmp	r3, #10
 80080fc:	f200 8156 	bhi.w	80083ac <USBH_HandleControl+0x2c8>
 8008100:	a201      	add	r2, pc, #4	; (adr r2, 8008108 <USBH_HandleControl+0x24>)
 8008102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008106:	bf00      	nop
 8008108:	08008135 	.word	0x08008135
 800810c:	0800814f 	.word	0x0800814f
 8008110:	080081b9 	.word	0x080081b9
 8008114:	080081df 	.word	0x080081df
 8008118:	08008217 	.word	0x08008217
 800811c:	08008241 	.word	0x08008241
 8008120:	08008293 	.word	0x08008293
 8008124:	080082b5 	.word	0x080082b5
 8008128:	080082f1 	.word	0x080082f1
 800812c:	08008317 	.word	0x08008317
 8008130:	08008355 	.word	0x08008355
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f103 0110 	add.w	r1, r3, #16
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	795b      	ldrb	r3, [r3, #5]
 800813e:	461a      	mov	r2, r3
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f943 	bl	80083cc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2202      	movs	r2, #2
 800814a:	761a      	strb	r2, [r3, #24]
      break;
 800814c:	e139      	b.n	80083c2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	795b      	ldrb	r3, [r3, #5]
 8008152:	4619      	mov	r1, r3
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 fcc5 	bl	8008ae4 <USBH_LL_GetURBState>
 800815a:	4603      	mov	r3, r0
 800815c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800815e:	7bbb      	ldrb	r3, [r7, #14]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d11e      	bne.n	80081a2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	7c1b      	ldrb	r3, [r3, #16]
 8008168:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800816c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	8adb      	ldrh	r3, [r3, #22]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00a      	beq.n	800818c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008176:	7b7b      	ldrb	r3, [r7, #13]
 8008178:	2b80      	cmp	r3, #128	; 0x80
 800817a:	d103      	bne.n	8008184 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2203      	movs	r2, #3
 8008180:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008182:	e115      	b.n	80083b0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2205      	movs	r2, #5
 8008188:	761a      	strb	r2, [r3, #24]
      break;
 800818a:	e111      	b.n	80083b0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800818c:	7b7b      	ldrb	r3, [r7, #13]
 800818e:	2b80      	cmp	r3, #128	; 0x80
 8008190:	d103      	bne.n	800819a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2209      	movs	r2, #9
 8008196:	761a      	strb	r2, [r3, #24]
      break;
 8008198:	e10a      	b.n	80083b0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2207      	movs	r2, #7
 800819e:	761a      	strb	r2, [r3, #24]
      break;
 80081a0:	e106      	b.n	80083b0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80081a2:	7bbb      	ldrb	r3, [r7, #14]
 80081a4:	2b04      	cmp	r3, #4
 80081a6:	d003      	beq.n	80081b0 <USBH_HandleControl+0xcc>
 80081a8:	7bbb      	ldrb	r3, [r7, #14]
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	f040 8100 	bne.w	80083b0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	220b      	movs	r2, #11
 80081b4:	761a      	strb	r2, [r3, #24]
      break;
 80081b6:	e0fb      	b.n	80083b0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081be:	b29a      	uxth	r2, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6899      	ldr	r1, [r3, #8]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	899a      	ldrh	r2, [r3, #12]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	791b      	ldrb	r3, [r3, #4]
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f93a 	bl	800844a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2204      	movs	r2, #4
 80081da:	761a      	strb	r2, [r3, #24]
      break;
 80081dc:	e0f1      	b.n	80083c2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	791b      	ldrb	r3, [r3, #4]
 80081e2:	4619      	mov	r1, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fc7d 	bl	8008ae4 <USBH_LL_GetURBState>
 80081ea:	4603      	mov	r3, r0
 80081ec:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80081ee:	7bbb      	ldrb	r3, [r7, #14]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d102      	bne.n	80081fa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2209      	movs	r2, #9
 80081f8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80081fa:	7bbb      	ldrb	r3, [r7, #14]
 80081fc:	2b05      	cmp	r3, #5
 80081fe:	d102      	bne.n	8008206 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008200:	2303      	movs	r3, #3
 8008202:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008204:	e0d6      	b.n	80083b4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008206:	7bbb      	ldrb	r3, [r7, #14]
 8008208:	2b04      	cmp	r3, #4
 800820a:	f040 80d3 	bne.w	80083b4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	220b      	movs	r2, #11
 8008212:	761a      	strb	r2, [r3, #24]
      break;
 8008214:	e0ce      	b.n	80083b4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6899      	ldr	r1, [r3, #8]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	899a      	ldrh	r2, [r3, #12]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	795b      	ldrb	r3, [r3, #5]
 8008222:	2001      	movs	r0, #1
 8008224:	9000      	str	r0, [sp, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f8ea 	bl	8008400 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008232:	b29a      	uxth	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2206      	movs	r2, #6
 800823c:	761a      	strb	r2, [r3, #24]
      break;
 800823e:	e0c0      	b.n	80083c2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	795b      	ldrb	r3, [r3, #5]
 8008244:	4619      	mov	r1, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fc4c 	bl	8008ae4 <USBH_LL_GetURBState>
 800824c:	4603      	mov	r3, r0
 800824e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008250:	7bbb      	ldrb	r3, [r7, #14]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d103      	bne.n	800825e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2207      	movs	r2, #7
 800825a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800825c:	e0ac      	b.n	80083b8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800825e:	7bbb      	ldrb	r3, [r7, #14]
 8008260:	2b05      	cmp	r3, #5
 8008262:	d105      	bne.n	8008270 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	220c      	movs	r2, #12
 8008268:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800826a:	2303      	movs	r3, #3
 800826c:	73fb      	strb	r3, [r7, #15]
      break;
 800826e:	e0a3      	b.n	80083b8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008270:	7bbb      	ldrb	r3, [r7, #14]
 8008272:	2b02      	cmp	r3, #2
 8008274:	d103      	bne.n	800827e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2205      	movs	r2, #5
 800827a:	761a      	strb	r2, [r3, #24]
      break;
 800827c:	e09c      	b.n	80083b8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800827e:	7bbb      	ldrb	r3, [r7, #14]
 8008280:	2b04      	cmp	r3, #4
 8008282:	f040 8099 	bne.w	80083b8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	220b      	movs	r2, #11
 800828a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800828c:	2302      	movs	r3, #2
 800828e:	73fb      	strb	r3, [r7, #15]
      break;
 8008290:	e092      	b.n	80083b8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	791b      	ldrb	r3, [r3, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	2100      	movs	r1, #0
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f8d5 	bl	800844a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2208      	movs	r2, #8
 80082b0:	761a      	strb	r2, [r3, #24]

      break;
 80082b2:	e086      	b.n	80083c2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	791b      	ldrb	r3, [r3, #4]
 80082b8:	4619      	mov	r1, r3
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fc12 	bl	8008ae4 <USBH_LL_GetURBState>
 80082c0:	4603      	mov	r3, r0
 80082c2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80082c4:	7bbb      	ldrb	r3, [r7, #14]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d105      	bne.n	80082d6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	220d      	movs	r2, #13
 80082ce:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80082d0:	2300      	movs	r3, #0
 80082d2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80082d4:	e072      	b.n	80083bc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80082d6:	7bbb      	ldrb	r3, [r7, #14]
 80082d8:	2b04      	cmp	r3, #4
 80082da:	d103      	bne.n	80082e4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	220b      	movs	r2, #11
 80082e0:	761a      	strb	r2, [r3, #24]
      break;
 80082e2:	e06b      	b.n	80083bc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80082e4:	7bbb      	ldrb	r3, [r7, #14]
 80082e6:	2b05      	cmp	r3, #5
 80082e8:	d168      	bne.n	80083bc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80082ea:	2303      	movs	r3, #3
 80082ec:	73fb      	strb	r3, [r7, #15]
      break;
 80082ee:	e065      	b.n	80083bc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	795b      	ldrb	r3, [r3, #5]
 80082f4:	2201      	movs	r2, #1
 80082f6:	9200      	str	r2, [sp, #0]
 80082f8:	2200      	movs	r2, #0
 80082fa:	2100      	movs	r1, #0
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f87f 	bl	8008400 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008308:	b29a      	uxth	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	220a      	movs	r2, #10
 8008312:	761a      	strb	r2, [r3, #24]
      break;
 8008314:	e055      	b.n	80083c2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	795b      	ldrb	r3, [r3, #5]
 800831a:	4619      	mov	r1, r3
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fbe1 	bl	8008ae4 <USBH_LL_GetURBState>
 8008322:	4603      	mov	r3, r0
 8008324:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008326:	7bbb      	ldrb	r3, [r7, #14]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d105      	bne.n	8008338 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800832c:	2300      	movs	r3, #0
 800832e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	220d      	movs	r2, #13
 8008334:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008336:	e043      	b.n	80083c0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008338:	7bbb      	ldrb	r3, [r7, #14]
 800833a:	2b02      	cmp	r3, #2
 800833c:	d103      	bne.n	8008346 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2209      	movs	r2, #9
 8008342:	761a      	strb	r2, [r3, #24]
      break;
 8008344:	e03c      	b.n	80083c0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008346:	7bbb      	ldrb	r3, [r7, #14]
 8008348:	2b04      	cmp	r3, #4
 800834a:	d139      	bne.n	80083c0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	220b      	movs	r2, #11
 8008350:	761a      	strb	r2, [r3, #24]
      break;
 8008352:	e035      	b.n	80083c0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	7e5b      	ldrb	r3, [r3, #25]
 8008358:	3301      	adds	r3, #1
 800835a:	b2da      	uxtb	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	765a      	strb	r2, [r3, #25]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	7e5b      	ldrb	r3, [r3, #25]
 8008364:	2b02      	cmp	r3, #2
 8008366:	d806      	bhi.n	8008376 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2201      	movs	r2, #1
 8008372:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008374:	e025      	b.n	80083c2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800837c:	2106      	movs	r1, #6
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	795b      	ldrb	r3, [r3, #5]
 800838c:	4619      	mov	r1, r3
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f90c 	bl	80085ac <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	791b      	ldrb	r3, [r3, #4]
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f906 	bl	80085ac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80083a6:	2302      	movs	r3, #2
 80083a8:	73fb      	strb	r3, [r7, #15]
      break;
 80083aa:	e00a      	b.n	80083c2 <USBH_HandleControl+0x2de>

    default:
      break;
 80083ac:	bf00      	nop
 80083ae:	e008      	b.n	80083c2 <USBH_HandleControl+0x2de>
      break;
 80083b0:	bf00      	nop
 80083b2:	e006      	b.n	80083c2 <USBH_HandleControl+0x2de>
      break;
 80083b4:	bf00      	nop
 80083b6:	e004      	b.n	80083c2 <USBH_HandleControl+0x2de>
      break;
 80083b8:	bf00      	nop
 80083ba:	e002      	b.n	80083c2 <USBH_HandleControl+0x2de>
      break;
 80083bc:	bf00      	nop
 80083be:	e000      	b.n	80083c2 <USBH_HandleControl+0x2de>
      break;
 80083c0:	bf00      	nop
  }

  return status;
 80083c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b088      	sub	sp, #32
 80083d0:	af04      	add	r7, sp, #16
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	4613      	mov	r3, r2
 80083d8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80083da:	79f9      	ldrb	r1, [r7, #7]
 80083dc:	2300      	movs	r3, #0
 80083de:	9303      	str	r3, [sp, #12]
 80083e0:	2308      	movs	r3, #8
 80083e2:	9302      	str	r3, [sp, #8]
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	9301      	str	r3, [sp, #4]
 80083e8:	2300      	movs	r3, #0
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	2300      	movs	r3, #0
 80083ee:	2200      	movs	r2, #0
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f000 fb46 	bl	8008a82 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b088      	sub	sp, #32
 8008404:	af04      	add	r7, sp, #16
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	4611      	mov	r1, r2
 800840c:	461a      	mov	r2, r3
 800840e:	460b      	mov	r3, r1
 8008410:	80fb      	strh	r3, [r7, #6]
 8008412:	4613      	mov	r3, r2
 8008414:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800841c:	2b00      	cmp	r3, #0
 800841e:	d001      	beq.n	8008424 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008420:	2300      	movs	r3, #0
 8008422:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008424:	7979      	ldrb	r1, [r7, #5]
 8008426:	7e3b      	ldrb	r3, [r7, #24]
 8008428:	9303      	str	r3, [sp, #12]
 800842a:	88fb      	ldrh	r3, [r7, #6]
 800842c:	9302      	str	r3, [sp, #8]
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	9301      	str	r3, [sp, #4]
 8008432:	2301      	movs	r3, #1
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	2300      	movs	r3, #0
 8008438:	2200      	movs	r2, #0
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f000 fb21 	bl	8008a82 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b088      	sub	sp, #32
 800844e:	af04      	add	r7, sp, #16
 8008450:	60f8      	str	r0, [r7, #12]
 8008452:	60b9      	str	r1, [r7, #8]
 8008454:	4611      	mov	r1, r2
 8008456:	461a      	mov	r2, r3
 8008458:	460b      	mov	r3, r1
 800845a:	80fb      	strh	r3, [r7, #6]
 800845c:	4613      	mov	r3, r2
 800845e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008460:	7979      	ldrb	r1, [r7, #5]
 8008462:	2300      	movs	r3, #0
 8008464:	9303      	str	r3, [sp, #12]
 8008466:	88fb      	ldrh	r3, [r7, #6]
 8008468:	9302      	str	r3, [sp, #8]
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	9301      	str	r3, [sp, #4]
 800846e:	2301      	movs	r3, #1
 8008470:	9300      	str	r3, [sp, #0]
 8008472:	2300      	movs	r3, #0
 8008474:	2201      	movs	r2, #1
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f000 fb03 	bl	8008a82 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800847c:	2300      	movs	r3, #0

}
 800847e:	4618      	mov	r0, r3
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b088      	sub	sp, #32
 800848a:	af04      	add	r7, sp, #16
 800848c:	60f8      	str	r0, [r7, #12]
 800848e:	60b9      	str	r1, [r7, #8]
 8008490:	4611      	mov	r1, r2
 8008492:	461a      	mov	r2, r3
 8008494:	460b      	mov	r3, r1
 8008496:	80fb      	strh	r3, [r7, #6]
 8008498:	4613      	mov	r3, r2
 800849a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d001      	beq.n	80084aa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80084a6:	2300      	movs	r3, #0
 80084a8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80084aa:	7979      	ldrb	r1, [r7, #5]
 80084ac:	7e3b      	ldrb	r3, [r7, #24]
 80084ae:	9303      	str	r3, [sp, #12]
 80084b0:	88fb      	ldrh	r3, [r7, #6]
 80084b2:	9302      	str	r3, [sp, #8]
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	9301      	str	r3, [sp, #4]
 80084b8:	2301      	movs	r3, #1
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	2302      	movs	r3, #2
 80084be:	2200      	movs	r2, #0
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f000 fade 	bl	8008a82 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b088      	sub	sp, #32
 80084d4:	af04      	add	r7, sp, #16
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	4611      	mov	r1, r2
 80084dc:	461a      	mov	r2, r3
 80084de:	460b      	mov	r3, r1
 80084e0:	80fb      	strh	r3, [r7, #6]
 80084e2:	4613      	mov	r3, r2
 80084e4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80084e6:	7979      	ldrb	r1, [r7, #5]
 80084e8:	2300      	movs	r3, #0
 80084ea:	9303      	str	r3, [sp, #12]
 80084ec:	88fb      	ldrh	r3, [r7, #6]
 80084ee:	9302      	str	r3, [sp, #8]
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	9301      	str	r3, [sp, #4]
 80084f4:	2301      	movs	r3, #1
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	2302      	movs	r3, #2
 80084fa:	2201      	movs	r2, #1
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f000 fac0 	bl	8008a82 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af04      	add	r7, sp, #16
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	4608      	mov	r0, r1
 8008516:	4611      	mov	r1, r2
 8008518:	461a      	mov	r2, r3
 800851a:	4603      	mov	r3, r0
 800851c:	70fb      	strb	r3, [r7, #3]
 800851e:	460b      	mov	r3, r1
 8008520:	70bb      	strb	r3, [r7, #2]
 8008522:	4613      	mov	r3, r2
 8008524:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008526:	7878      	ldrb	r0, [r7, #1]
 8008528:	78ba      	ldrb	r2, [r7, #2]
 800852a:	78f9      	ldrb	r1, [r7, #3]
 800852c:	8b3b      	ldrh	r3, [r7, #24]
 800852e:	9302      	str	r3, [sp, #8]
 8008530:	7d3b      	ldrb	r3, [r7, #20]
 8008532:	9301      	str	r3, [sp, #4]
 8008534:	7c3b      	ldrb	r3, [r7, #16]
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	4603      	mov	r3, r0
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 fa53 	bl	80089e6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b082      	sub	sp, #8
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	460b      	mov	r3, r1
 8008554:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008556:	78fb      	ldrb	r3, [r7, #3]
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fa72 	bl	8008a44 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	460b      	mov	r3, r1
 8008574:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f836 	bl	80085e8 <USBH_GetFreePipe>
 800857c:	4603      	mov	r3, r0
 800857e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008580:	89fb      	ldrh	r3, [r7, #14]
 8008582:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008586:	4293      	cmp	r3, r2
 8008588:	d00a      	beq.n	80085a0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800858a:	78fa      	ldrb	r2, [r7, #3]
 800858c:	89fb      	ldrh	r3, [r7, #14]
 800858e:	f003 030f 	and.w	r3, r3, #15
 8008592:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008596:	6879      	ldr	r1, [r7, #4]
 8008598:	33e0      	adds	r3, #224	; 0xe0
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	440b      	add	r3, r1
 800859e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80085a0:	89fb      	ldrh	r3, [r7, #14]
 80085a2:	b2db      	uxtb	r3, r3
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80085b8:	78fb      	ldrb	r3, [r7, #3]
 80085ba:	2b0f      	cmp	r3, #15
 80085bc:	d80d      	bhi.n	80085da <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80085be:	78fb      	ldrb	r3, [r7, #3]
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	33e0      	adds	r3, #224	; 0xe0
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	685a      	ldr	r2, [r3, #4]
 80085ca:	78fb      	ldrb	r3, [r7, #3]
 80085cc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80085d0:	6879      	ldr	r1, [r7, #4]
 80085d2:	33e0      	adds	r3, #224	; 0xe0
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	440b      	add	r3, r1
 80085d8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80085f0:	2300      	movs	r3, #0
 80085f2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80085f4:	2300      	movs	r3, #0
 80085f6:	73fb      	strb	r3, [r7, #15]
 80085f8:	e00f      	b.n	800861a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80085fa:	7bfb      	ldrb	r3, [r7, #15]
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	33e0      	adds	r3, #224	; 0xe0
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4413      	add	r3, r2
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d102      	bne.n	8008614 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800860e:	7bfb      	ldrb	r3, [r7, #15]
 8008610:	b29b      	uxth	r3, r3
 8008612:	e007      	b.n	8008624 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008614:	7bfb      	ldrb	r3, [r7, #15]
 8008616:	3301      	adds	r3, #1
 8008618:	73fb      	strb	r3, [r7, #15]
 800861a:	7bfb      	ldrb	r3, [r7, #15]
 800861c:	2b0f      	cmp	r3, #15
 800861e:	d9ec      	bls.n	80085fa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008620:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008624:	4618      	mov	r0, r3
 8008626:	3714      	adds	r7, #20
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008634:	2201      	movs	r2, #1
 8008636:	490e      	ldr	r1, [pc, #56]	; (8008670 <MX_USB_HOST_Init+0x40>)
 8008638:	480e      	ldr	r0, [pc, #56]	; (8008674 <MX_USB_HOST_Init+0x44>)
 800863a:	f7fe fba7 	bl	8006d8c <USBH_Init>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d001      	beq.n	8008648 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008644:	f7f8 f990 	bl	8000968 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008648:	490b      	ldr	r1, [pc, #44]	; (8008678 <MX_USB_HOST_Init+0x48>)
 800864a:	480a      	ldr	r0, [pc, #40]	; (8008674 <MX_USB_HOST_Init+0x44>)
 800864c:	f7fe fc2c 	bl	8006ea8 <USBH_RegisterClass>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d001      	beq.n	800865a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008656:	f7f8 f987 	bl	8000968 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800865a:	4806      	ldr	r0, [pc, #24]	; (8008674 <MX_USB_HOST_Init+0x44>)
 800865c:	f7fe fcb0 	bl	8006fc0 <USBH_Start>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d001      	beq.n	800866a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008666:	f7f8 f97f 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800866a:	bf00      	nop
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	08008691 	.word	0x08008691
 8008674:	200001ec 	.word	0x200001ec
 8008678:	2000000c 	.word	0x2000000c

0800867c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008680:	4802      	ldr	r0, [pc, #8]	; (800868c <MX_USB_HOST_Process+0x10>)
 8008682:	f7fe fcad 	bl	8006fe0 <USBH_Process>
}
 8008686:	bf00      	nop
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	200001ec 	.word	0x200001ec

08008690 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	460b      	mov	r3, r1
 800869a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800869c:	78fb      	ldrb	r3, [r7, #3]
 800869e:	3b01      	subs	r3, #1
 80086a0:	2b04      	cmp	r3, #4
 80086a2:	d819      	bhi.n	80086d8 <USBH_UserProcess+0x48>
 80086a4:	a201      	add	r2, pc, #4	; (adr r2, 80086ac <USBH_UserProcess+0x1c>)
 80086a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086aa:	bf00      	nop
 80086ac:	080086d9 	.word	0x080086d9
 80086b0:	080086c9 	.word	0x080086c9
 80086b4:	080086d9 	.word	0x080086d9
 80086b8:	080086d1 	.word	0x080086d1
 80086bc:	080086c1 	.word	0x080086c1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80086c0:	4b09      	ldr	r3, [pc, #36]	; (80086e8 <USBH_UserProcess+0x58>)
 80086c2:	2203      	movs	r2, #3
 80086c4:	701a      	strb	r2, [r3, #0]
  break;
 80086c6:	e008      	b.n	80086da <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80086c8:	4b07      	ldr	r3, [pc, #28]	; (80086e8 <USBH_UserProcess+0x58>)
 80086ca:	2202      	movs	r2, #2
 80086cc:	701a      	strb	r2, [r3, #0]
  break;
 80086ce:	e004      	b.n	80086da <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80086d0:	4b05      	ldr	r3, [pc, #20]	; (80086e8 <USBH_UserProcess+0x58>)
 80086d2:	2201      	movs	r2, #1
 80086d4:	701a      	strb	r2, [r3, #0]
  break;
 80086d6:	e000      	b.n	80086da <USBH_UserProcess+0x4a>

  default:
  break;
 80086d8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80086da:	bf00      	nop
 80086dc:	370c      	adds	r7, #12
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	200005c4 	.word	0x200005c4

080086ec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b08a      	sub	sp, #40	; 0x28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086f4:	f107 0314 	add.w	r3, r7, #20
 80086f8:	2200      	movs	r2, #0
 80086fa:	601a      	str	r2, [r3, #0]
 80086fc:	605a      	str	r2, [r3, #4]
 80086fe:	609a      	str	r2, [r3, #8]
 8008700:	60da      	str	r2, [r3, #12]
 8008702:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800870c:	d147      	bne.n	800879e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800870e:	2300      	movs	r3, #0
 8008710:	613b      	str	r3, [r7, #16]
 8008712:	4b25      	ldr	r3, [pc, #148]	; (80087a8 <HAL_HCD_MspInit+0xbc>)
 8008714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008716:	4a24      	ldr	r2, [pc, #144]	; (80087a8 <HAL_HCD_MspInit+0xbc>)
 8008718:	f043 0301 	orr.w	r3, r3, #1
 800871c:	6313      	str	r3, [r2, #48]	; 0x30
 800871e:	4b22      	ldr	r3, [pc, #136]	; (80087a8 <HAL_HCD_MspInit+0xbc>)
 8008720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	613b      	str	r3, [r7, #16]
 8008728:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800872a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800872e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008730:	2300      	movs	r3, #0
 8008732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008734:	2300      	movs	r3, #0
 8008736:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008738:	f107 0314 	add.w	r3, r7, #20
 800873c:	4619      	mov	r1, r3
 800873e:	481b      	ldr	r0, [pc, #108]	; (80087ac <HAL_HCD_MspInit+0xc0>)
 8008740:	f7f8 fd8a 	bl	8001258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008744:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800874a:	2302      	movs	r3, #2
 800874c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800874e:	2300      	movs	r3, #0
 8008750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008752:	2300      	movs	r3, #0
 8008754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008756:	230a      	movs	r3, #10
 8008758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800875a:	f107 0314 	add.w	r3, r7, #20
 800875e:	4619      	mov	r1, r3
 8008760:	4812      	ldr	r0, [pc, #72]	; (80087ac <HAL_HCD_MspInit+0xc0>)
 8008762:	f7f8 fd79 	bl	8001258 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008766:	4b10      	ldr	r3, [pc, #64]	; (80087a8 <HAL_HCD_MspInit+0xbc>)
 8008768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800876a:	4a0f      	ldr	r2, [pc, #60]	; (80087a8 <HAL_HCD_MspInit+0xbc>)
 800876c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008770:	6353      	str	r3, [r2, #52]	; 0x34
 8008772:	2300      	movs	r3, #0
 8008774:	60fb      	str	r3, [r7, #12]
 8008776:	4b0c      	ldr	r3, [pc, #48]	; (80087a8 <HAL_HCD_MspInit+0xbc>)
 8008778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800877a:	4a0b      	ldr	r2, [pc, #44]	; (80087a8 <HAL_HCD_MspInit+0xbc>)
 800877c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008780:	6453      	str	r3, [r2, #68]	; 0x44
 8008782:	4b09      	ldr	r3, [pc, #36]	; (80087a8 <HAL_HCD_MspInit+0xbc>)
 8008784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800878e:	2200      	movs	r2, #0
 8008790:	2100      	movs	r1, #0
 8008792:	2043      	movs	r0, #67	; 0x43
 8008794:	f7f8 fc97 	bl	80010c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008798:	2043      	movs	r0, #67	; 0x43
 800879a:	f7f8 fcb0 	bl	80010fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800879e:	bf00      	nop
 80087a0:	3728      	adds	r7, #40	; 0x28
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	40023800 	.word	0x40023800
 80087ac:	40020000 	.word	0x40020000

080087b0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087be:	4618      	mov	r0, r3
 80087c0:	f7fe ffed 	bl	800779e <USBH_LL_IncTimer>
}
 80087c4:	bf00      	nop
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087da:	4618      	mov	r0, r3
 80087dc:	f7ff f825 	bl	800782a <USBH_LL_Connect>
}
 80087e0:	bf00      	nop
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7ff f82e 	bl	8007858 <USBH_LL_Disconnect>
}
 80087fc:	bf00      	nop
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	460b      	mov	r3, r1
 800880e:	70fb      	strb	r3, [r7, #3]
 8008810:	4613      	mov	r3, r2
 8008812:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008814:	bf00      	nop
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800882e:	4618      	mov	r0, r3
 8008830:	f7fe ffdf 	bl	80077f2 <USBH_LL_PortEnabled>
}
 8008834:	bf00      	nop
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800884a:	4618      	mov	r0, r3
 800884c:	f7fe ffdf 	bl	800780e <USBH_LL_PortDisabled>
}
 8008850:	bf00      	nop
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008866:	2b01      	cmp	r3, #1
 8008868:	d12a      	bne.n	80088c0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800886a:	4a18      	ldr	r2, [pc, #96]	; (80088cc <USBH_LL_Init+0x74>)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a15      	ldr	r2, [pc, #84]	; (80088cc <USBH_LL_Init+0x74>)
 8008876:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800887a:	4b14      	ldr	r3, [pc, #80]	; (80088cc <USBH_LL_Init+0x74>)
 800887c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008880:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008882:	4b12      	ldr	r3, [pc, #72]	; (80088cc <USBH_LL_Init+0x74>)
 8008884:	2208      	movs	r2, #8
 8008886:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008888:	4b10      	ldr	r3, [pc, #64]	; (80088cc <USBH_LL_Init+0x74>)
 800888a:	2201      	movs	r2, #1
 800888c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800888e:	4b0f      	ldr	r3, [pc, #60]	; (80088cc <USBH_LL_Init+0x74>)
 8008890:	2200      	movs	r2, #0
 8008892:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008894:	4b0d      	ldr	r3, [pc, #52]	; (80088cc <USBH_LL_Init+0x74>)
 8008896:	2202      	movs	r2, #2
 8008898:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800889a:	4b0c      	ldr	r3, [pc, #48]	; (80088cc <USBH_LL_Init+0x74>)
 800889c:	2200      	movs	r2, #0
 800889e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80088a0:	480a      	ldr	r0, [pc, #40]	; (80088cc <USBH_LL_Init+0x74>)
 80088a2:	f7f8 fe8e 	bl	80015c2 <HAL_HCD_Init>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80088ac:	f7f8 f85c 	bl	8000968 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80088b0:	4806      	ldr	r0, [pc, #24]	; (80088cc <USBH_LL_Init+0x74>)
 80088b2:	f7f9 fa72 	bl	8001d9a <HAL_HCD_GetCurrentFrame>
 80088b6:	4603      	mov	r3, r0
 80088b8:	4619      	mov	r1, r3
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f7fe ff60 	bl	8007780 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	200005c8 	.word	0x200005c8

080088d0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088dc:	2300      	movs	r3, #0
 80088de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7f9 f9e1 	bl	8001cae <HAL_HCD_Start>
 80088ec:	4603      	mov	r3, r0
 80088ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 f95c 	bl	8008bb0 <USBH_Get_USB_Status>
 80088f8:	4603      	mov	r3, r0
 80088fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b084      	sub	sp, #16
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008912:	2300      	movs	r3, #0
 8008914:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800891c:	4618      	mov	r0, r3
 800891e:	f7f9 f9e9 	bl	8001cf4 <HAL_HCD_Stop>
 8008922:	4603      	mov	r3, r0
 8008924:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008926:	7bfb      	ldrb	r3, [r7, #15]
 8008928:	4618      	mov	r0, r3
 800892a:	f000 f941 	bl	8008bb0 <USBH_Get_USB_Status>
 800892e:	4603      	mov	r3, r0
 8008930:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008932:	7bbb      	ldrb	r3, [r7, #14]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008944:	2301      	movs	r3, #1
 8008946:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800894e:	4618      	mov	r0, r3
 8008950:	f7f9 fa31 	bl	8001db6 <HAL_HCD_GetCurrentSpeed>
 8008954:	4603      	mov	r3, r0
 8008956:	2b02      	cmp	r3, #2
 8008958:	d00c      	beq.n	8008974 <USBH_LL_GetSpeed+0x38>
 800895a:	2b02      	cmp	r3, #2
 800895c:	d80d      	bhi.n	800897a <USBH_LL_GetSpeed+0x3e>
 800895e:	2b00      	cmp	r3, #0
 8008960:	d002      	beq.n	8008968 <USBH_LL_GetSpeed+0x2c>
 8008962:	2b01      	cmp	r3, #1
 8008964:	d003      	beq.n	800896e <USBH_LL_GetSpeed+0x32>
 8008966:	e008      	b.n	800897a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008968:	2300      	movs	r3, #0
 800896a:	73fb      	strb	r3, [r7, #15]
    break;
 800896c:	e008      	b.n	8008980 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800896e:	2301      	movs	r3, #1
 8008970:	73fb      	strb	r3, [r7, #15]
    break;
 8008972:	e005      	b.n	8008980 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008974:	2302      	movs	r3, #2
 8008976:	73fb      	strb	r3, [r7, #15]
    break;
 8008978:	e002      	b.n	8008980 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800897a:	2301      	movs	r3, #1
 800897c:	73fb      	strb	r3, [r7, #15]
    break;
 800897e:	bf00      	nop
  }
  return  speed;
 8008980:	7bfb      	ldrb	r3, [r7, #15]
}
 8008982:	4618      	mov	r0, r3
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b084      	sub	sp, #16
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008992:	2300      	movs	r3, #0
 8008994:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7f9 f9c4 	bl	8001d2e <HAL_HCD_ResetPort>
 80089a6:	4603      	mov	r3, r0
 80089a8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80089aa:	7bfb      	ldrb	r3, [r7, #15]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f000 f8ff 	bl	8008bb0 <USBH_Get_USB_Status>
 80089b2:	4603      	mov	r3, r0
 80089b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	460b      	mov	r3, r1
 80089ca:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089d2:	78fa      	ldrb	r2, [r7, #3]
 80089d4:	4611      	mov	r1, r2
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7f9 f9cb 	bl	8001d72 <HAL_HCD_HC_GetXferCount>
 80089dc:	4603      	mov	r3, r0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80089e6:	b590      	push	{r4, r7, lr}
 80089e8:	b089      	sub	sp, #36	; 0x24
 80089ea:	af04      	add	r7, sp, #16
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	4608      	mov	r0, r1
 80089f0:	4611      	mov	r1, r2
 80089f2:	461a      	mov	r2, r3
 80089f4:	4603      	mov	r3, r0
 80089f6:	70fb      	strb	r3, [r7, #3]
 80089f8:	460b      	mov	r3, r1
 80089fa:	70bb      	strb	r3, [r7, #2]
 80089fc:	4613      	mov	r3, r2
 80089fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a00:	2300      	movs	r3, #0
 8008a02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a04:	2300      	movs	r3, #0
 8008a06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008a0e:	787c      	ldrb	r4, [r7, #1]
 8008a10:	78ba      	ldrb	r2, [r7, #2]
 8008a12:	78f9      	ldrb	r1, [r7, #3]
 8008a14:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a16:	9302      	str	r3, [sp, #8]
 8008a18:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008a1c:	9301      	str	r3, [sp, #4]
 8008a1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	4623      	mov	r3, r4
 8008a26:	f7f8 fe2e 	bl	8001686 <HAL_HCD_HC_Init>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
 8008a30:	4618      	mov	r0, r3
 8008a32:	f000 f8bd 	bl	8008bb0 <USBH_Get_USB_Status>
 8008a36:	4603      	mov	r3, r0
 8008a38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd90      	pop	{r4, r7, pc}

08008a44 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a50:	2300      	movs	r3, #0
 8008a52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a5e:	78fa      	ldrb	r2, [r7, #3]
 8008a60:	4611      	mov	r1, r2
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7f8 fe9e 	bl	80017a4 <HAL_HCD_HC_Halt>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f000 f89e 	bl	8008bb0 <USBH_Get_USB_Status>
 8008a74:	4603      	mov	r3, r0
 8008a76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a78:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008a82:	b590      	push	{r4, r7, lr}
 8008a84:	b089      	sub	sp, #36	; 0x24
 8008a86:	af04      	add	r7, sp, #16
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	4608      	mov	r0, r1
 8008a8c:	4611      	mov	r1, r2
 8008a8e:	461a      	mov	r2, r3
 8008a90:	4603      	mov	r3, r0
 8008a92:	70fb      	strb	r3, [r7, #3]
 8008a94:	460b      	mov	r3, r1
 8008a96:	70bb      	strb	r3, [r7, #2]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008aaa:	787c      	ldrb	r4, [r7, #1]
 8008aac:	78ba      	ldrb	r2, [r7, #2]
 8008aae:	78f9      	ldrb	r1, [r7, #3]
 8008ab0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008ab4:	9303      	str	r3, [sp, #12]
 8008ab6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ab8:	9302      	str	r3, [sp, #8]
 8008aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abc:	9301      	str	r3, [sp, #4]
 8008abe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	4623      	mov	r3, r4
 8008ac6:	f7f8 fe91 	bl	80017ec <HAL_HCD_HC_SubmitRequest>
 8008aca:	4603      	mov	r3, r0
 8008acc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f000 f86d 	bl	8008bb0 <USBH_Get_USB_Status>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ada:	7bbb      	ldrb	r3, [r7, #14]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3714      	adds	r7, #20
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd90      	pop	{r4, r7, pc}

08008ae4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	460b      	mov	r3, r1
 8008aee:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008af6:	78fa      	ldrb	r2, [r7, #3]
 8008af8:	4611      	mov	r1, r2
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7f9 f925 	bl	8001d4a <HAL_HCD_HC_GetURBState>
 8008b00:	4603      	mov	r3, r0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b082      	sub	sp, #8
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	460b      	mov	r3, r1
 8008b14:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d103      	bne.n	8008b28 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008b20:	78fb      	ldrb	r3, [r7, #3]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f000 f870 	bl	8008c08 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008b28:	20c8      	movs	r0, #200	; 0xc8
 8008b2a:	f7f8 f9cd 	bl	8000ec8 <HAL_Delay>
  return USBH_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3708      	adds	r7, #8
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	70fb      	strb	r3, [r7, #3]
 8008b44:	4613      	mov	r3, r2
 8008b46:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b4e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008b50:	78fb      	ldrb	r3, [r7, #3]
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	212c      	movs	r1, #44	; 0x2c
 8008b56:	fb01 f303 	mul.w	r3, r1, r3
 8008b5a:	4413      	add	r3, r2
 8008b5c:	333b      	adds	r3, #59	; 0x3b
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d009      	beq.n	8008b78 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008b64:	78fb      	ldrb	r3, [r7, #3]
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	212c      	movs	r1, #44	; 0x2c
 8008b6a:	fb01 f303 	mul.w	r3, r1, r3
 8008b6e:	4413      	add	r3, r2
 8008b70:	3354      	adds	r3, #84	; 0x54
 8008b72:	78ba      	ldrb	r2, [r7, #2]
 8008b74:	701a      	strb	r2, [r3, #0]
 8008b76:	e008      	b.n	8008b8a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008b78:	78fb      	ldrb	r3, [r7, #3]
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	212c      	movs	r1, #44	; 0x2c
 8008b7e:	fb01 f303 	mul.w	r3, r1, r3
 8008b82:	4413      	add	r3, r2
 8008b84:	3355      	adds	r3, #85	; 0x55
 8008b86:	78ba      	ldrb	r2, [r7, #2]
 8008b88:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3714      	adds	r7, #20
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f7f8 f991 	bl	8000ec8 <HAL_Delay>
}
 8008ba6:	bf00      	nop
 8008ba8:	3708      	adds	r7, #8
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
	...

08008bb0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008bbe:	79fb      	ldrb	r3, [r7, #7]
 8008bc0:	2b03      	cmp	r3, #3
 8008bc2:	d817      	bhi.n	8008bf4 <USBH_Get_USB_Status+0x44>
 8008bc4:	a201      	add	r2, pc, #4	; (adr r2, 8008bcc <USBH_Get_USB_Status+0x1c>)
 8008bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bca:	bf00      	nop
 8008bcc:	08008bdd 	.word	0x08008bdd
 8008bd0:	08008be3 	.word	0x08008be3
 8008bd4:	08008be9 	.word	0x08008be9
 8008bd8:	08008bef 	.word	0x08008bef
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	73fb      	strb	r3, [r7, #15]
    break;
 8008be0:	e00b      	b.n	8008bfa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008be2:	2302      	movs	r3, #2
 8008be4:	73fb      	strb	r3, [r7, #15]
    break;
 8008be6:	e008      	b.n	8008bfa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008be8:	2301      	movs	r3, #1
 8008bea:	73fb      	strb	r3, [r7, #15]
    break;
 8008bec:	e005      	b.n	8008bfa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008bee:	2302      	movs	r3, #2
 8008bf0:	73fb      	strb	r3, [r7, #15]
    break;
 8008bf2:	e002      	b.n	8008bfa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	73fb      	strb	r3, [r7, #15]
    break;
 8008bf8:	bf00      	nop
  }
  return usb_status;
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3714      	adds	r7, #20
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	4603      	mov	r3, r0
 8008c10:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008c12:	79fb      	ldrb	r3, [r7, #7]
 8008c14:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008c16:	79fb      	ldrb	r3, [r7, #7]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d102      	bne.n	8008c22 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	73fb      	strb	r3, [r7, #15]
 8008c20:	e001      	b.n	8008c26 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008c22:	2301      	movs	r3, #1
 8008c24:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008c26:	7bfb      	ldrb	r3, [r7, #15]
 8008c28:	461a      	mov	r2, r3
 8008c2a:	2101      	movs	r1, #1
 8008c2c:	4803      	ldr	r0, [pc, #12]	; (8008c3c <MX_DriverVbusFS+0x34>)
 8008c2e:	f7f8 fcaf 	bl	8001590 <HAL_GPIO_WritePin>
}
 8008c32:	bf00      	nop
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	40020800 	.word	0x40020800

08008c40 <__errno>:
 8008c40:	4b01      	ldr	r3, [pc, #4]	; (8008c48 <__errno+0x8>)
 8008c42:	6818      	ldr	r0, [r3, #0]
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	2000002c 	.word	0x2000002c

08008c4c <__libc_init_array>:
 8008c4c:	b570      	push	{r4, r5, r6, lr}
 8008c4e:	4d0d      	ldr	r5, [pc, #52]	; (8008c84 <__libc_init_array+0x38>)
 8008c50:	4c0d      	ldr	r4, [pc, #52]	; (8008c88 <__libc_init_array+0x3c>)
 8008c52:	1b64      	subs	r4, r4, r5
 8008c54:	10a4      	asrs	r4, r4, #2
 8008c56:	2600      	movs	r6, #0
 8008c58:	42a6      	cmp	r6, r4
 8008c5a:	d109      	bne.n	8008c70 <__libc_init_array+0x24>
 8008c5c:	4d0b      	ldr	r5, [pc, #44]	; (8008c8c <__libc_init_array+0x40>)
 8008c5e:	4c0c      	ldr	r4, [pc, #48]	; (8008c90 <__libc_init_array+0x44>)
 8008c60:	f000 f92e 	bl	8008ec0 <_init>
 8008c64:	1b64      	subs	r4, r4, r5
 8008c66:	10a4      	asrs	r4, r4, #2
 8008c68:	2600      	movs	r6, #0
 8008c6a:	42a6      	cmp	r6, r4
 8008c6c:	d105      	bne.n	8008c7a <__libc_init_array+0x2e>
 8008c6e:	bd70      	pop	{r4, r5, r6, pc}
 8008c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c74:	4798      	blx	r3
 8008c76:	3601      	adds	r6, #1
 8008c78:	e7ee      	b.n	8008c58 <__libc_init_array+0xc>
 8008c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c7e:	4798      	blx	r3
 8008c80:	3601      	adds	r6, #1
 8008c82:	e7f2      	b.n	8008c6a <__libc_init_array+0x1e>
 8008c84:	08008f04 	.word	0x08008f04
 8008c88:	08008f04 	.word	0x08008f04
 8008c8c:	08008f04 	.word	0x08008f04
 8008c90:	08008f08 	.word	0x08008f08

08008c94 <malloc>:
 8008c94:	4b02      	ldr	r3, [pc, #8]	; (8008ca0 <malloc+0xc>)
 8008c96:	4601      	mov	r1, r0
 8008c98:	6818      	ldr	r0, [r3, #0]
 8008c9a:	f000 b87f 	b.w	8008d9c <_malloc_r>
 8008c9e:	bf00      	nop
 8008ca0:	2000002c 	.word	0x2000002c

08008ca4 <free>:
 8008ca4:	4b02      	ldr	r3, [pc, #8]	; (8008cb0 <free+0xc>)
 8008ca6:	4601      	mov	r1, r0
 8008ca8:	6818      	ldr	r0, [r3, #0]
 8008caa:	f000 b80b 	b.w	8008cc4 <_free_r>
 8008cae:	bf00      	nop
 8008cb0:	2000002c 	.word	0x2000002c

08008cb4 <memset>:
 8008cb4:	4402      	add	r2, r0
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d100      	bne.n	8008cbe <memset+0xa>
 8008cbc:	4770      	bx	lr
 8008cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8008cc2:	e7f9      	b.n	8008cb8 <memset+0x4>

08008cc4 <_free_r>:
 8008cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cc6:	2900      	cmp	r1, #0
 8008cc8:	d044      	beq.n	8008d54 <_free_r+0x90>
 8008cca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cce:	9001      	str	r0, [sp, #4]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f1a1 0404 	sub.w	r4, r1, #4
 8008cd6:	bfb8      	it	lt
 8008cd8:	18e4      	addlt	r4, r4, r3
 8008cda:	f000 f8e3 	bl	8008ea4 <__malloc_lock>
 8008cde:	4a1e      	ldr	r2, [pc, #120]	; (8008d58 <_free_r+0x94>)
 8008ce0:	9801      	ldr	r0, [sp, #4]
 8008ce2:	6813      	ldr	r3, [r2, #0]
 8008ce4:	b933      	cbnz	r3, 8008cf4 <_free_r+0x30>
 8008ce6:	6063      	str	r3, [r4, #4]
 8008ce8:	6014      	str	r4, [r2, #0]
 8008cea:	b003      	add	sp, #12
 8008cec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cf0:	f000 b8de 	b.w	8008eb0 <__malloc_unlock>
 8008cf4:	42a3      	cmp	r3, r4
 8008cf6:	d908      	bls.n	8008d0a <_free_r+0x46>
 8008cf8:	6825      	ldr	r5, [r4, #0]
 8008cfa:	1961      	adds	r1, r4, r5
 8008cfc:	428b      	cmp	r3, r1
 8008cfe:	bf01      	itttt	eq
 8008d00:	6819      	ldreq	r1, [r3, #0]
 8008d02:	685b      	ldreq	r3, [r3, #4]
 8008d04:	1949      	addeq	r1, r1, r5
 8008d06:	6021      	streq	r1, [r4, #0]
 8008d08:	e7ed      	b.n	8008ce6 <_free_r+0x22>
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	b10b      	cbz	r3, 8008d14 <_free_r+0x50>
 8008d10:	42a3      	cmp	r3, r4
 8008d12:	d9fa      	bls.n	8008d0a <_free_r+0x46>
 8008d14:	6811      	ldr	r1, [r2, #0]
 8008d16:	1855      	adds	r5, r2, r1
 8008d18:	42a5      	cmp	r5, r4
 8008d1a:	d10b      	bne.n	8008d34 <_free_r+0x70>
 8008d1c:	6824      	ldr	r4, [r4, #0]
 8008d1e:	4421      	add	r1, r4
 8008d20:	1854      	adds	r4, r2, r1
 8008d22:	42a3      	cmp	r3, r4
 8008d24:	6011      	str	r1, [r2, #0]
 8008d26:	d1e0      	bne.n	8008cea <_free_r+0x26>
 8008d28:	681c      	ldr	r4, [r3, #0]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	6053      	str	r3, [r2, #4]
 8008d2e:	4421      	add	r1, r4
 8008d30:	6011      	str	r1, [r2, #0]
 8008d32:	e7da      	b.n	8008cea <_free_r+0x26>
 8008d34:	d902      	bls.n	8008d3c <_free_r+0x78>
 8008d36:	230c      	movs	r3, #12
 8008d38:	6003      	str	r3, [r0, #0]
 8008d3a:	e7d6      	b.n	8008cea <_free_r+0x26>
 8008d3c:	6825      	ldr	r5, [r4, #0]
 8008d3e:	1961      	adds	r1, r4, r5
 8008d40:	428b      	cmp	r3, r1
 8008d42:	bf04      	itt	eq
 8008d44:	6819      	ldreq	r1, [r3, #0]
 8008d46:	685b      	ldreq	r3, [r3, #4]
 8008d48:	6063      	str	r3, [r4, #4]
 8008d4a:	bf04      	itt	eq
 8008d4c:	1949      	addeq	r1, r1, r5
 8008d4e:	6021      	streq	r1, [r4, #0]
 8008d50:	6054      	str	r4, [r2, #4]
 8008d52:	e7ca      	b.n	8008cea <_free_r+0x26>
 8008d54:	b003      	add	sp, #12
 8008d56:	bd30      	pop	{r4, r5, pc}
 8008d58:	200008cc 	.word	0x200008cc

08008d5c <sbrk_aligned>:
 8008d5c:	b570      	push	{r4, r5, r6, lr}
 8008d5e:	4e0e      	ldr	r6, [pc, #56]	; (8008d98 <sbrk_aligned+0x3c>)
 8008d60:	460c      	mov	r4, r1
 8008d62:	6831      	ldr	r1, [r6, #0]
 8008d64:	4605      	mov	r5, r0
 8008d66:	b911      	cbnz	r1, 8008d6e <sbrk_aligned+0x12>
 8008d68:	f000 f88c 	bl	8008e84 <_sbrk_r>
 8008d6c:	6030      	str	r0, [r6, #0]
 8008d6e:	4621      	mov	r1, r4
 8008d70:	4628      	mov	r0, r5
 8008d72:	f000 f887 	bl	8008e84 <_sbrk_r>
 8008d76:	1c43      	adds	r3, r0, #1
 8008d78:	d00a      	beq.n	8008d90 <sbrk_aligned+0x34>
 8008d7a:	1cc4      	adds	r4, r0, #3
 8008d7c:	f024 0403 	bic.w	r4, r4, #3
 8008d80:	42a0      	cmp	r0, r4
 8008d82:	d007      	beq.n	8008d94 <sbrk_aligned+0x38>
 8008d84:	1a21      	subs	r1, r4, r0
 8008d86:	4628      	mov	r0, r5
 8008d88:	f000 f87c 	bl	8008e84 <_sbrk_r>
 8008d8c:	3001      	adds	r0, #1
 8008d8e:	d101      	bne.n	8008d94 <sbrk_aligned+0x38>
 8008d90:	f04f 34ff 	mov.w	r4, #4294967295
 8008d94:	4620      	mov	r0, r4
 8008d96:	bd70      	pop	{r4, r5, r6, pc}
 8008d98:	200008d0 	.word	0x200008d0

08008d9c <_malloc_r>:
 8008d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008da0:	1ccd      	adds	r5, r1, #3
 8008da2:	f025 0503 	bic.w	r5, r5, #3
 8008da6:	3508      	adds	r5, #8
 8008da8:	2d0c      	cmp	r5, #12
 8008daa:	bf38      	it	cc
 8008dac:	250c      	movcc	r5, #12
 8008dae:	2d00      	cmp	r5, #0
 8008db0:	4607      	mov	r7, r0
 8008db2:	db01      	blt.n	8008db8 <_malloc_r+0x1c>
 8008db4:	42a9      	cmp	r1, r5
 8008db6:	d905      	bls.n	8008dc4 <_malloc_r+0x28>
 8008db8:	230c      	movs	r3, #12
 8008dba:	603b      	str	r3, [r7, #0]
 8008dbc:	2600      	movs	r6, #0
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dc4:	4e2e      	ldr	r6, [pc, #184]	; (8008e80 <_malloc_r+0xe4>)
 8008dc6:	f000 f86d 	bl	8008ea4 <__malloc_lock>
 8008dca:	6833      	ldr	r3, [r6, #0]
 8008dcc:	461c      	mov	r4, r3
 8008dce:	bb34      	cbnz	r4, 8008e1e <_malloc_r+0x82>
 8008dd0:	4629      	mov	r1, r5
 8008dd2:	4638      	mov	r0, r7
 8008dd4:	f7ff ffc2 	bl	8008d5c <sbrk_aligned>
 8008dd8:	1c43      	adds	r3, r0, #1
 8008dda:	4604      	mov	r4, r0
 8008ddc:	d14d      	bne.n	8008e7a <_malloc_r+0xde>
 8008dde:	6834      	ldr	r4, [r6, #0]
 8008de0:	4626      	mov	r6, r4
 8008de2:	2e00      	cmp	r6, #0
 8008de4:	d140      	bne.n	8008e68 <_malloc_r+0xcc>
 8008de6:	6823      	ldr	r3, [r4, #0]
 8008de8:	4631      	mov	r1, r6
 8008dea:	4638      	mov	r0, r7
 8008dec:	eb04 0803 	add.w	r8, r4, r3
 8008df0:	f000 f848 	bl	8008e84 <_sbrk_r>
 8008df4:	4580      	cmp	r8, r0
 8008df6:	d13a      	bne.n	8008e6e <_malloc_r+0xd2>
 8008df8:	6821      	ldr	r1, [r4, #0]
 8008dfa:	3503      	adds	r5, #3
 8008dfc:	1a6d      	subs	r5, r5, r1
 8008dfe:	f025 0503 	bic.w	r5, r5, #3
 8008e02:	3508      	adds	r5, #8
 8008e04:	2d0c      	cmp	r5, #12
 8008e06:	bf38      	it	cc
 8008e08:	250c      	movcc	r5, #12
 8008e0a:	4629      	mov	r1, r5
 8008e0c:	4638      	mov	r0, r7
 8008e0e:	f7ff ffa5 	bl	8008d5c <sbrk_aligned>
 8008e12:	3001      	adds	r0, #1
 8008e14:	d02b      	beq.n	8008e6e <_malloc_r+0xd2>
 8008e16:	6823      	ldr	r3, [r4, #0]
 8008e18:	442b      	add	r3, r5
 8008e1a:	6023      	str	r3, [r4, #0]
 8008e1c:	e00e      	b.n	8008e3c <_malloc_r+0xa0>
 8008e1e:	6822      	ldr	r2, [r4, #0]
 8008e20:	1b52      	subs	r2, r2, r5
 8008e22:	d41e      	bmi.n	8008e62 <_malloc_r+0xc6>
 8008e24:	2a0b      	cmp	r2, #11
 8008e26:	d916      	bls.n	8008e56 <_malloc_r+0xba>
 8008e28:	1961      	adds	r1, r4, r5
 8008e2a:	42a3      	cmp	r3, r4
 8008e2c:	6025      	str	r5, [r4, #0]
 8008e2e:	bf18      	it	ne
 8008e30:	6059      	strne	r1, [r3, #4]
 8008e32:	6863      	ldr	r3, [r4, #4]
 8008e34:	bf08      	it	eq
 8008e36:	6031      	streq	r1, [r6, #0]
 8008e38:	5162      	str	r2, [r4, r5]
 8008e3a:	604b      	str	r3, [r1, #4]
 8008e3c:	4638      	mov	r0, r7
 8008e3e:	f104 060b 	add.w	r6, r4, #11
 8008e42:	f000 f835 	bl	8008eb0 <__malloc_unlock>
 8008e46:	f026 0607 	bic.w	r6, r6, #7
 8008e4a:	1d23      	adds	r3, r4, #4
 8008e4c:	1af2      	subs	r2, r6, r3
 8008e4e:	d0b6      	beq.n	8008dbe <_malloc_r+0x22>
 8008e50:	1b9b      	subs	r3, r3, r6
 8008e52:	50a3      	str	r3, [r4, r2]
 8008e54:	e7b3      	b.n	8008dbe <_malloc_r+0x22>
 8008e56:	6862      	ldr	r2, [r4, #4]
 8008e58:	42a3      	cmp	r3, r4
 8008e5a:	bf0c      	ite	eq
 8008e5c:	6032      	streq	r2, [r6, #0]
 8008e5e:	605a      	strne	r2, [r3, #4]
 8008e60:	e7ec      	b.n	8008e3c <_malloc_r+0xa0>
 8008e62:	4623      	mov	r3, r4
 8008e64:	6864      	ldr	r4, [r4, #4]
 8008e66:	e7b2      	b.n	8008dce <_malloc_r+0x32>
 8008e68:	4634      	mov	r4, r6
 8008e6a:	6876      	ldr	r6, [r6, #4]
 8008e6c:	e7b9      	b.n	8008de2 <_malloc_r+0x46>
 8008e6e:	230c      	movs	r3, #12
 8008e70:	603b      	str	r3, [r7, #0]
 8008e72:	4638      	mov	r0, r7
 8008e74:	f000 f81c 	bl	8008eb0 <__malloc_unlock>
 8008e78:	e7a1      	b.n	8008dbe <_malloc_r+0x22>
 8008e7a:	6025      	str	r5, [r4, #0]
 8008e7c:	e7de      	b.n	8008e3c <_malloc_r+0xa0>
 8008e7e:	bf00      	nop
 8008e80:	200008cc 	.word	0x200008cc

08008e84 <_sbrk_r>:
 8008e84:	b538      	push	{r3, r4, r5, lr}
 8008e86:	4d06      	ldr	r5, [pc, #24]	; (8008ea0 <_sbrk_r+0x1c>)
 8008e88:	2300      	movs	r3, #0
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	4608      	mov	r0, r1
 8008e8e:	602b      	str	r3, [r5, #0]
 8008e90:	f7f7 ff36 	bl	8000d00 <_sbrk>
 8008e94:	1c43      	adds	r3, r0, #1
 8008e96:	d102      	bne.n	8008e9e <_sbrk_r+0x1a>
 8008e98:	682b      	ldr	r3, [r5, #0]
 8008e9a:	b103      	cbz	r3, 8008e9e <_sbrk_r+0x1a>
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ea0:	200008d4 	.word	0x200008d4

08008ea4 <__malloc_lock>:
 8008ea4:	4801      	ldr	r0, [pc, #4]	; (8008eac <__malloc_lock+0x8>)
 8008ea6:	f000 b809 	b.w	8008ebc <__retarget_lock_acquire_recursive>
 8008eaa:	bf00      	nop
 8008eac:	200008d8 	.word	0x200008d8

08008eb0 <__malloc_unlock>:
 8008eb0:	4801      	ldr	r0, [pc, #4]	; (8008eb8 <__malloc_unlock+0x8>)
 8008eb2:	f000 b804 	b.w	8008ebe <__retarget_lock_release_recursive>
 8008eb6:	bf00      	nop
 8008eb8:	200008d8 	.word	0x200008d8

08008ebc <__retarget_lock_acquire_recursive>:
 8008ebc:	4770      	bx	lr

08008ebe <__retarget_lock_release_recursive>:
 8008ebe:	4770      	bx	lr

08008ec0 <_init>:
 8008ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec2:	bf00      	nop
 8008ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ec6:	bc08      	pop	{r3}
 8008ec8:	469e      	mov	lr, r3
 8008eca:	4770      	bx	lr

08008ecc <_fini>:
 8008ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ece:	bf00      	nop
 8008ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ed2:	bc08      	pop	{r3}
 8008ed4:	469e      	mov	lr, r3
 8008ed6:	4770      	bx	lr
