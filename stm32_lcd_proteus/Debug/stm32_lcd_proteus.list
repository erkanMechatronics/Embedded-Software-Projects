
stm32_lcd_proteus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b08  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08001c14  08001c14  00002c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cc0  08001cc0  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001cc0  08001cc0  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cc0  08001cc0  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cc0  08001cc0  00002cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001cc4  08001cc4  00002cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001cc8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001cd4  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001cd4  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002cf4  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fcc  00000000  00000000  00005d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000460  00000000  00000000  00006cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000323  00000000  00000000  00007158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162bb  00000000  00000000  0000747b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000582b  00000000  00000000  0001d736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d34a  00000000  00000000  00022f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a02ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f28  00000000  00000000  000a02f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000a1218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001bfc 	.word	0x08001bfc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001bfc 	.word	0x08001bfc

0800014c <Delay>:
#include "stm32f1xx_hal.h"
#include "main.h"
#include "LCD.h"
 
void Delay(uint32_t nCount)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 8000154:	e002      	b.n	800015c <Delay+0x10>
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	3b01      	subs	r3, #1
 800015a:	607b      	str	r3, [r7, #4]
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	2b00      	cmp	r3, #0
 8000160:	d1f9      	bne.n	8000156 <Delay+0xa>
}
 8000162:	bf00      	nop
 8000164:	bf00      	nop
 8000166:	370c      	adds	r7, #12
 8000168:	46bd      	mov	sp, r7
 800016a:	bc80      	pop	{r7}
 800016c:	4770      	bx	lr

0800016e <lcd_delay>:
void lcd_delay(void)
{
 800016e:	b580      	push	{r7, lr}
 8000170:	af00      	add	r7, sp, #0
 Delay(1000);
 8000172:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000176:	f7ff ffe9 	bl	800014c <Delay>
}
 800017a:	bf00      	nop
 800017c:	bd80      	pop	{r7, pc}
	...

08000180 <lcd_cmd>:

void lcd_cmd(char out_char)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	4603      	mov	r3, r0
 8000188:	71fb      	strb	r3, [r7, #7]
 LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 800018a:	4b57      	ldr	r3, [pc, #348]	@ (80002e8 <lcd_cmd+0x168>)
 800018c:	2204      	movs	r2, #4
 800018e:	615a      	str	r2, [r3, #20]
 
 LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8000190:	4b55      	ldr	r3, [pc, #340]	@ (80002e8 <lcd_cmd+0x168>)
 8000192:	2202      	movs	r2, #2
 8000194:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000196:	4b54      	ldr	r3, [pc, #336]	@ (80002e8 <lcd_cmd+0x168>)
 8000198:	2210      	movs	r2, #16
 800019a:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 800019c:	4b52      	ldr	r3, [pc, #328]	@ (80002e8 <lcd_cmd+0x168>)
 800019e:	2220      	movs	r2, #32
 80001a0:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 80001a2:	4b51      	ldr	r3, [pc, #324]	@ (80002e8 <lcd_cmd+0x168>)
 80001a4:	2240      	movs	r2, #64	@ 0x40
 80001a6:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 80001a8:	4b4f      	ldr	r3, [pc, #316]	@ (80002e8 <lcd_cmd+0x168>)
 80001aa:	2280      	movs	r2, #128	@ 0x80
 80001ac:	615a      	str	r2, [r3, #20]
 
 lcd_delay();
 80001ae:	f7ff ffde 	bl	800016e <lcd_delay>
 
 LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80001b2:	4b4d      	ldr	r3, [pc, #308]	@ (80002e8 <lcd_cmd+0x168>)
 80001b4:	68db      	ldr	r3, [r3, #12]
 80001b6:	4a4c      	ldr	r2, [pc, #304]	@ (80002e8 <lcd_cmd+0x168>)
 80001b8:	f043 0302 	orr.w	r3, r3, #2
 80001bc:	60d3      	str	r3, [r2, #12]
  
 if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	f003 0310 	and.w	r3, r3, #16
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d003      	beq.n	80001d0 <lcd_cmd+0x50>
 80001c8:	4b47      	ldr	r3, [pc, #284]	@ (80002e8 <lcd_cmd+0x168>)
 80001ca:	2210      	movs	r2, #16
 80001cc:	611a      	str	r2, [r3, #16]
 80001ce:	e003      	b.n	80001d8 <lcd_cmd+0x58>
 80001d0:	4b45      	ldr	r3, [pc, #276]	@ (80002e8 <lcd_cmd+0x168>)
 80001d2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80001d6:	611a      	str	r2, [r3, #16]
 if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	f003 0320 	and.w	r3, r3, #32
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d003      	beq.n	80001ea <lcd_cmd+0x6a>
 80001e2:	4b41      	ldr	r3, [pc, #260]	@ (80002e8 <lcd_cmd+0x168>)
 80001e4:	2220      	movs	r2, #32
 80001e6:	611a      	str	r2, [r3, #16]
 80001e8:	e003      	b.n	80001f2 <lcd_cmd+0x72>
 80001ea:	4b3f      	ldr	r3, [pc, #252]	@ (80002e8 <lcd_cmd+0x168>)
 80001ec:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80001f0:	611a      	str	r2, [r3, #16]
 if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d003      	beq.n	8000204 <lcd_cmd+0x84>
 80001fc:	4b3a      	ldr	r3, [pc, #232]	@ (80002e8 <lcd_cmd+0x168>)
 80001fe:	2240      	movs	r2, #64	@ 0x40
 8000200:	611a      	str	r2, [r3, #16]
 8000202:	e003      	b.n	800020c <lcd_cmd+0x8c>
 8000204:	4b38      	ldr	r3, [pc, #224]	@ (80002e8 <lcd_cmd+0x168>)
 8000206:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800020a:	611a      	str	r2, [r3, #16]
 if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 800020c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000210:	2b00      	cmp	r3, #0
 8000212:	da03      	bge.n	800021c <lcd_cmd+0x9c>
 8000214:	4b34      	ldr	r3, [pc, #208]	@ (80002e8 <lcd_cmd+0x168>)
 8000216:	2280      	movs	r2, #128	@ 0x80
 8000218:	611a      	str	r2, [r3, #16]
 800021a:	e003      	b.n	8000224 <lcd_cmd+0xa4>
 800021c:	4b32      	ldr	r3, [pc, #200]	@ (80002e8 <lcd_cmd+0x168>)
 800021e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000222:	611a      	str	r2, [r3, #16]
 
 lcd_delay();
 8000224:	f7ff ffa3 	bl	800016e <lcd_delay>
 
 LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000228:	4b2f      	ldr	r3, [pc, #188]	@ (80002e8 <lcd_cmd+0x168>)
 800022a:	2202      	movs	r2, #2
 800022c:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800022e:	4b2e      	ldr	r3, [pc, #184]	@ (80002e8 <lcd_cmd+0x168>)
 8000230:	2210      	movs	r2, #16
 8000232:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000234:	4b2c      	ldr	r3, [pc, #176]	@ (80002e8 <lcd_cmd+0x168>)
 8000236:	2220      	movs	r2, #32
 8000238:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 800023a:	4b2b      	ldr	r3, [pc, #172]	@ (80002e8 <lcd_cmd+0x168>)
 800023c:	2240      	movs	r2, #64	@ 0x40
 800023e:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000240:	4b29      	ldr	r3, [pc, #164]	@ (80002e8 <lcd_cmd+0x168>)
 8000242:	2280      	movs	r2, #128	@ 0x80
 8000244:	615a      	str	r2, [r3, #20]
 
 lcd_delay();
 8000246:	f7ff ff92 	bl	800016e <lcd_delay>
 
 LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 800024a:	4b27      	ldr	r3, [pc, #156]	@ (80002e8 <lcd_cmd+0x168>)
 800024c:	68db      	ldr	r3, [r3, #12]
 800024e:	4a26      	ldr	r2, [pc, #152]	@ (80002e8 <lcd_cmd+0x168>)
 8000250:	f043 0302 	orr.w	r3, r3, #2
 8000254:	60d3      	str	r3, [r2, #12]
 
 if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	f003 0301 	and.w	r3, r3, #1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d003      	beq.n	8000268 <lcd_cmd+0xe8>
 8000260:	4b21      	ldr	r3, [pc, #132]	@ (80002e8 <lcd_cmd+0x168>)
 8000262:	2210      	movs	r2, #16
 8000264:	611a      	str	r2, [r3, #16]
 8000266:	e003      	b.n	8000270 <lcd_cmd+0xf0>
 8000268:	4b1f      	ldr	r3, [pc, #124]	@ (80002e8 <lcd_cmd+0x168>)
 800026a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800026e:	611a      	str	r2, [r3, #16]
 if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	f003 0302 	and.w	r3, r3, #2
 8000276:	2b00      	cmp	r3, #0
 8000278:	d003      	beq.n	8000282 <lcd_cmd+0x102>
 800027a:	4b1b      	ldr	r3, [pc, #108]	@ (80002e8 <lcd_cmd+0x168>)
 800027c:	2220      	movs	r2, #32
 800027e:	611a      	str	r2, [r3, #16]
 8000280:	e003      	b.n	800028a <lcd_cmd+0x10a>
 8000282:	4b19      	ldr	r3, [pc, #100]	@ (80002e8 <lcd_cmd+0x168>)
 8000284:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000288:	611a      	str	r2, [r3, #16]
 if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	f003 0304 	and.w	r3, r3, #4
 8000290:	2b00      	cmp	r3, #0
 8000292:	d003      	beq.n	800029c <lcd_cmd+0x11c>
 8000294:	4b14      	ldr	r3, [pc, #80]	@ (80002e8 <lcd_cmd+0x168>)
 8000296:	2240      	movs	r2, #64	@ 0x40
 8000298:	611a      	str	r2, [r3, #16]
 800029a:	e003      	b.n	80002a4 <lcd_cmd+0x124>
 800029c:	4b12      	ldr	r3, [pc, #72]	@ (80002e8 <lcd_cmd+0x168>)
 800029e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80002a2:	611a      	str	r2, [r3, #16]
 if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	f003 0308 	and.w	r3, r3, #8
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d003      	beq.n	80002b6 <lcd_cmd+0x136>
 80002ae:	4b0e      	ldr	r3, [pc, #56]	@ (80002e8 <lcd_cmd+0x168>)
 80002b0:	2280      	movs	r2, #128	@ 0x80
 80002b2:	611a      	str	r2, [r3, #16]
 80002b4:	e003      	b.n	80002be <lcd_cmd+0x13e>
 80002b6:	4b0c      	ldr	r3, [pc, #48]	@ (80002e8 <lcd_cmd+0x168>)
 80002b8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80002bc:	611a      	str	r2, [r3, #16]

 lcd_delay();
 80002be:	f7ff ff56 	bl	800016e <lcd_delay>
 
 LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80002c2:	4b09      	ldr	r3, [pc, #36]	@ (80002e8 <lcd_cmd+0x168>)
 80002c4:	2202      	movs	r2, #2
 80002c6:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80002c8:	4b07      	ldr	r3, [pc, #28]	@ (80002e8 <lcd_cmd+0x168>)
 80002ca:	2210      	movs	r2, #16
 80002cc:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80002ce:	4b06      	ldr	r3, [pc, #24]	@ (80002e8 <lcd_cmd+0x168>)
 80002d0:	2220      	movs	r2, #32
 80002d2:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <lcd_cmd+0x168>)
 80002d6:	2240      	movs	r2, #64	@ 0x40
 80002d8:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80002da:	4b03      	ldr	r3, [pc, #12]	@ (80002e8 <lcd_cmd+0x168>)
 80002dc:	2280      	movs	r2, #128	@ 0x80
 80002de:	615a      	str	r2, [r3, #20]
}
 80002e0:	bf00      	nop
 80002e2:	3708      	adds	r7, #8
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	40010800 	.word	0x40010800

080002ec <lcd_char_cp>:

void lcd_char_cp(char out_char)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
 LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 80002f6:	4b59      	ldr	r3, [pc, #356]	@ (800045c <lcd_char_cp+0x170>)
 80002f8:	68db      	ldr	r3, [r3, #12]
 80002fa:	4a58      	ldr	r2, [pc, #352]	@ (800045c <lcd_char_cp+0x170>)
 80002fc:	f043 0304 	orr.w	r3, r3, #4
 8000300:	60d3      	str	r3, [r2, #12]
 
 LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8000302:	4b56      	ldr	r3, [pc, #344]	@ (800045c <lcd_char_cp+0x170>)
 8000304:	2202      	movs	r2, #2
 8000306:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000308:	4b54      	ldr	r3, [pc, #336]	@ (800045c <lcd_char_cp+0x170>)
 800030a:	2210      	movs	r2, #16
 800030c:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 800030e:	4b53      	ldr	r3, [pc, #332]	@ (800045c <lcd_char_cp+0x170>)
 8000310:	2220      	movs	r2, #32
 8000312:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000314:	4b51      	ldr	r3, [pc, #324]	@ (800045c <lcd_char_cp+0x170>)
 8000316:	2240      	movs	r2, #64	@ 0x40
 8000318:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 800031a:	4b50      	ldr	r3, [pc, #320]	@ (800045c <lcd_char_cp+0x170>)
 800031c:	2280      	movs	r2, #128	@ 0x80
 800031e:	615a      	str	r2, [r3, #20]
 
 lcd_delay();
 8000320:	f7ff ff25 	bl	800016e <lcd_delay>
 
 LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000324:	4b4d      	ldr	r3, [pc, #308]	@ (800045c <lcd_char_cp+0x170>)
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	4a4c      	ldr	r2, [pc, #304]	@ (800045c <lcd_char_cp+0x170>)
 800032a:	f043 0302 	orr.w	r3, r3, #2
 800032e:	60d3      	str	r3, [r2, #12]
  
 if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	f003 0310 	and.w	r3, r3, #16
 8000336:	2b00      	cmp	r3, #0
 8000338:	d003      	beq.n	8000342 <lcd_char_cp+0x56>
 800033a:	4b48      	ldr	r3, [pc, #288]	@ (800045c <lcd_char_cp+0x170>)
 800033c:	2210      	movs	r2, #16
 800033e:	611a      	str	r2, [r3, #16]
 8000340:	e003      	b.n	800034a <lcd_char_cp+0x5e>
 8000342:	4b46      	ldr	r3, [pc, #280]	@ (800045c <lcd_char_cp+0x170>)
 8000344:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000348:	611a      	str	r2, [r3, #16]
 if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	f003 0320 	and.w	r3, r3, #32
 8000350:	2b00      	cmp	r3, #0
 8000352:	d003      	beq.n	800035c <lcd_char_cp+0x70>
 8000354:	4b41      	ldr	r3, [pc, #260]	@ (800045c <lcd_char_cp+0x170>)
 8000356:	2220      	movs	r2, #32
 8000358:	611a      	str	r2, [r3, #16]
 800035a:	e003      	b.n	8000364 <lcd_char_cp+0x78>
 800035c:	4b3f      	ldr	r3, [pc, #252]	@ (800045c <lcd_char_cp+0x170>)
 800035e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000362:	611a      	str	r2, [r3, #16]
 if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800036a:	2b00      	cmp	r3, #0
 800036c:	d003      	beq.n	8000376 <lcd_char_cp+0x8a>
 800036e:	4b3b      	ldr	r3, [pc, #236]	@ (800045c <lcd_char_cp+0x170>)
 8000370:	2240      	movs	r2, #64	@ 0x40
 8000372:	611a      	str	r2, [r3, #16]
 8000374:	e003      	b.n	800037e <lcd_char_cp+0x92>
 8000376:	4b39      	ldr	r3, [pc, #228]	@ (800045c <lcd_char_cp+0x170>)
 8000378:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800037c:	611a      	str	r2, [r3, #16]
 if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 800037e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000382:	2b00      	cmp	r3, #0
 8000384:	da03      	bge.n	800038e <lcd_char_cp+0xa2>
 8000386:	4b35      	ldr	r3, [pc, #212]	@ (800045c <lcd_char_cp+0x170>)
 8000388:	2280      	movs	r2, #128	@ 0x80
 800038a:	611a      	str	r2, [r3, #16]
 800038c:	e003      	b.n	8000396 <lcd_char_cp+0xaa>
 800038e:	4b33      	ldr	r3, [pc, #204]	@ (800045c <lcd_char_cp+0x170>)
 8000390:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000394:	611a      	str	r2, [r3, #16]
 
 lcd_delay();
 8000396:	f7ff feea 	bl	800016e <lcd_delay>
 
 LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 800039a:	4b30      	ldr	r3, [pc, #192]	@ (800045c <lcd_char_cp+0x170>)
 800039c:	2202      	movs	r2, #2
 800039e:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80003a0:	4b2e      	ldr	r3, [pc, #184]	@ (800045c <lcd_char_cp+0x170>)
 80003a2:	2210      	movs	r2, #16
 80003a4:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80003a6:	4b2d      	ldr	r3, [pc, #180]	@ (800045c <lcd_char_cp+0x170>)
 80003a8:	2220      	movs	r2, #32
 80003aa:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80003ac:	4b2b      	ldr	r3, [pc, #172]	@ (800045c <lcd_char_cp+0x170>)
 80003ae:	2240      	movs	r2, #64	@ 0x40
 80003b0:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80003b2:	4b2a      	ldr	r3, [pc, #168]	@ (800045c <lcd_char_cp+0x170>)
 80003b4:	2280      	movs	r2, #128	@ 0x80
 80003b6:	615a      	str	r2, [r3, #20]
 
 lcd_delay();
 80003b8:	f7ff fed9 	bl	800016e <lcd_delay>
 
 LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80003bc:	4b27      	ldr	r3, [pc, #156]	@ (800045c <lcd_char_cp+0x170>)
 80003be:	68db      	ldr	r3, [r3, #12]
 80003c0:	4a26      	ldr	r2, [pc, #152]	@ (800045c <lcd_char_cp+0x170>)
 80003c2:	f043 0302 	orr.w	r3, r3, #2
 80003c6:	60d3      	str	r3, [r2, #12]
 
 if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	f003 0301 	and.w	r3, r3, #1
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d003      	beq.n	80003da <lcd_char_cp+0xee>
 80003d2:	4b22      	ldr	r3, [pc, #136]	@ (800045c <lcd_char_cp+0x170>)
 80003d4:	2210      	movs	r2, #16
 80003d6:	611a      	str	r2, [r3, #16]
 80003d8:	e003      	b.n	80003e2 <lcd_char_cp+0xf6>
 80003da:	4b20      	ldr	r3, [pc, #128]	@ (800045c <lcd_char_cp+0x170>)
 80003dc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80003e0:	611a      	str	r2, [r3, #16]
 if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	f003 0302 	and.w	r3, r3, #2
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d003      	beq.n	80003f4 <lcd_char_cp+0x108>
 80003ec:	4b1b      	ldr	r3, [pc, #108]	@ (800045c <lcd_char_cp+0x170>)
 80003ee:	2220      	movs	r2, #32
 80003f0:	611a      	str	r2, [r3, #16]
 80003f2:	e003      	b.n	80003fc <lcd_char_cp+0x110>
 80003f4:	4b19      	ldr	r3, [pc, #100]	@ (800045c <lcd_char_cp+0x170>)
 80003f6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80003fa:	611a      	str	r2, [r3, #16]
 if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	f003 0304 	and.w	r3, r3, #4
 8000402:	2b00      	cmp	r3, #0
 8000404:	d003      	beq.n	800040e <lcd_char_cp+0x122>
 8000406:	4b15      	ldr	r3, [pc, #84]	@ (800045c <lcd_char_cp+0x170>)
 8000408:	2240      	movs	r2, #64	@ 0x40
 800040a:	611a      	str	r2, [r3, #16]
 800040c:	e003      	b.n	8000416 <lcd_char_cp+0x12a>
 800040e:	4b13      	ldr	r3, [pc, #76]	@ (800045c <lcd_char_cp+0x170>)
 8000410:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000414:	611a      	str	r2, [r3, #16]
 if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	f003 0308 	and.w	r3, r3, #8
 800041c:	2b00      	cmp	r3, #0
 800041e:	d003      	beq.n	8000428 <lcd_char_cp+0x13c>
 8000420:	4b0e      	ldr	r3, [pc, #56]	@ (800045c <lcd_char_cp+0x170>)
 8000422:	2280      	movs	r2, #128	@ 0x80
 8000424:	611a      	str	r2, [r3, #16]
 8000426:	e003      	b.n	8000430 <lcd_char_cp+0x144>
 8000428:	4b0c      	ldr	r3, [pc, #48]	@ (800045c <lcd_char_cp+0x170>)
 800042a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800042e:	611a      	str	r2, [r3, #16]

 lcd_delay();
 8000430:	f7ff fe9d 	bl	800016e <lcd_delay>
 
 LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000434:	4b09      	ldr	r3, [pc, #36]	@ (800045c <lcd_char_cp+0x170>)
 8000436:	2202      	movs	r2, #2
 8000438:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800043a:	4b08      	ldr	r3, [pc, #32]	@ (800045c <lcd_char_cp+0x170>)
 800043c:	2210      	movs	r2, #16
 800043e:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000440:	4b06      	ldr	r3, [pc, #24]	@ (800045c <lcd_char_cp+0x170>)
 8000442:	2220      	movs	r2, #32
 8000444:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000446:	4b05      	ldr	r3, [pc, #20]	@ (800045c <lcd_char_cp+0x170>)
 8000448:	2240      	movs	r2, #64	@ 0x40
 800044a:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 800044c:	4b03      	ldr	r3, [pc, #12]	@ (800045c <lcd_char_cp+0x170>)
 800044e:	2280      	movs	r2, #128	@ 0x80
 8000450:	615a      	str	r2, [r3, #20]
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40010800 	.word	0x40010800

08000460 <lcd_out_cp>:

void lcd_out_cp(char *out_char)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 while(*out_char)
 8000468:	e008      	b.n	800047c <lcd_out_cp+0x1c>
 {
  lcd_delay();
 800046a:	f7ff fe80 	bl	800016e <lcd_delay>
  lcd_char_cp(*out_char++);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	1c5a      	adds	r2, r3, #1
 8000472:	607a      	str	r2, [r7, #4]
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ff38 	bl	80002ec <lcd_char_cp>
 while(*out_char)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d1f2      	bne.n	800046a <lcd_out_cp+0xa>
 }
 lcd_delay();
 8000484:	f7ff fe73 	bl	800016e <lcd_delay>
}
 8000488:	bf00      	nop
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <lcd_init>:


void lcd_init(char bits, char font, char lines)
{  
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]
 800049a:	460b      	mov	r3, r1
 800049c:	71bb      	strb	r3, [r7, #6]
 800049e:	4613      	mov	r3, r2
 80004a0:	717b      	strb	r3, [r7, #5]
    HAL_Delay(250);
 80004a2:	20fa      	movs	r0, #250	@ 0xfa
 80004a4:	f000 fcec 	bl	8000e80 <HAL_Delay>
 lcd_cmd(_RETURN_HOME);
 80004a8:	2002      	movs	r0, #2
 80004aa:	f7ff fe69 	bl	8000180 <lcd_cmd>
    HAL_Delay(50);
 80004ae:	2032      	movs	r0, #50	@ 0x32
 80004b0:	f000 fce6 	bl	8000e80 <HAL_Delay>
    lcd_cmd(0x20 | bits | font | lines);
 80004b4:	79fa      	ldrb	r2, [r7, #7]
 80004b6:	79bb      	ldrb	r3, [r7, #6]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	b2da      	uxtb	r2, r3
 80004bc:	797b      	ldrb	r3, [r7, #5]
 80004be:	4313      	orrs	r3, r2
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	f043 0320 	orr.w	r3, r3, #32
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff fe59 	bl	8000180 <lcd_cmd>
    HAL_Delay(50);
 80004ce:	2032      	movs	r0, #50	@ 0x32
 80004d0:	f000 fcd6 	bl	8000e80 <HAL_Delay>
    lcd_cmd(_LCD_INIT);
 80004d4:	2006      	movs	r0, #6
 80004d6:	f7ff fe53 	bl	8000180 <lcd_cmd>
    HAL_Delay(50);
 80004da:	2032      	movs	r0, #50	@ 0x32
 80004dc:	f000 fcd0 	bl	8000e80 <HAL_Delay>
    lcd_cmd(0x0E);
 80004e0:	200e      	movs	r0, #14
 80004e2:	f7ff fe4d 	bl	8000180 <lcd_cmd>
    HAL_Delay(50);
 80004e6:	2032      	movs	r0, #50	@ 0x32
 80004e8:	f000 fcca 	bl	8000e80 <HAL_Delay>
    lcd_cmd(0x0C);
 80004ec:	200c      	movs	r0, #12
 80004ee:	f7ff fe47 	bl	8000180 <lcd_cmd>
    HAL_Delay(50);
 80004f2:	2032      	movs	r0, #50	@ 0x32
 80004f4:	f000 fcc4 	bl	8000e80 <HAL_Delay>
    lcd_cmd(0x01);
 80004f8:	2001      	movs	r0, #1
 80004fa:	f7ff fe41 	bl	8000180 <lcd_cmd>
    HAL_Delay(100);
 80004fe:	2064      	movs	r0, #100	@ 0x64
 8000500:	f000 fcbe 	bl	8000e80 <HAL_Delay>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{ 
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	460a      	mov	r2, r1
 8000516:	71fb      	strb	r3, [r7, #7]
 8000518:	4613      	mov	r3, r2
 800051a:	71bb      	strb	r3, [r7, #6]
 if(row == 1)
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	2b01      	cmp	r3, #1
 8000520:	d106      	bne.n	8000530 <lcd_gotoxy+0x24>
 {
  lcd_cmd(0x80 + (column - 1));
 8000522:	79bb      	ldrb	r3, [r7, #6]
 8000524:	337f      	adds	r3, #127	@ 0x7f
 8000526:	b2db      	uxtb	r3, r3
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff fe29 	bl	8000180 <lcd_cmd>
 }
 else if(row == 2)
 {
  lcd_cmd(0xC0 + (column - 1));
 } 
}
 800052e:	e008      	b.n	8000542 <lcd_gotoxy+0x36>
 else if(row == 2)
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	2b02      	cmp	r3, #2
 8000534:	d105      	bne.n	8000542 <lcd_gotoxy+0x36>
  lcd_cmd(0xC0 + (column - 1));
 8000536:	79bb      	ldrb	r3, [r7, #6]
 8000538:	3b41      	subs	r3, #65	@ 0x41
 800053a:	b2db      	uxtb	r3, r3
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff fe1f 	bl	8000180 <lcd_cmd>
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <lcd_print>:
 lcd_gotoxy(row, column);
 lcd_char_cp(out_char);
}

void lcd_print(unsigned char row, unsigned char column, char *out_char)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	b082      	sub	sp, #8
 800054e:	af00      	add	r7, sp, #0
 8000550:	4603      	mov	r3, r0
 8000552:	603a      	str	r2, [r7, #0]
 8000554:	71fb      	strb	r3, [r7, #7]
 8000556:	460b      	mov	r3, r1
 8000558:	71bb      	strb	r3, [r7, #6]
 lcd_gotoxy(row, column);
 800055a:	79ba      	ldrb	r2, [r7, #6]
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	4611      	mov	r1, r2
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ffd3 	bl	800050c <lcd_gotoxy>
 lcd_out_cp(out_char);
 8000566:	6838      	ldr	r0, [r7, #0]
 8000568:	f7ff ff7a 	bl	8000460 <lcd_out_cp>
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <lcd_clear>:
void lcd_clear(void) {
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
    
 lcd_cmd(_CLEAR);
 8000578:	2001      	movs	r0, #1
 800057a:	f7ff fe01 	bl	8000180 <lcd_cmd>
    HAL_Delay(2);
 800057e:	2002      	movs	r0, #2
 8000580:	f000 fc7e 	bl	8000e80 <HAL_Delay>
    
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}

08000588 <motor_forward>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void motor_forward(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2101      	movs	r1, #1
 8000590:	4804      	ldr	r0, [pc, #16]	@ (80005a4 <motor_forward+0x1c>)
 8000592:	f000 ff10 	bl	80013b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2102      	movs	r1, #2
 800059a:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <motor_forward+0x1c>)
 800059c:	f000 ff0b 	bl	80013b6 <HAL_GPIO_WritePin>
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40010c00 	.word	0x40010c00

080005a8 <motor_backward>:



void motor_backward(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2101      	movs	r1, #1
 80005b0:	4804      	ldr	r0, [pc, #16]	@ (80005c4 <motor_backward+0x1c>)
 80005b2:	f000 ff00 	bl	80013b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	2102      	movs	r1, #2
 80005ba:	4802      	ldr	r0, [pc, #8]	@ (80005c4 <motor_backward+0x1c>)
 80005bc:	f000 fefb 	bl	80013b6 <HAL_GPIO_WritePin>
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40010c00 	.word	0x40010c00

080005c8 <motor_stop>:

void motor_stop(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2101      	movs	r1, #1
 80005d0:	4804      	ldr	r0, [pc, #16]	@ (80005e4 <motor_stop+0x1c>)
 80005d2:	f000 fef0 	bl	80013b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2102      	movs	r1, #2
 80005da:	4802      	ldr	r0, [pc, #8]	@ (80005e4 <motor_stop+0x1c>)
 80005dc:	f000 feeb 	bl	80013b6 <HAL_GPIO_WritePin>
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40010c00 	.word	0x40010c00

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 fbe5 	bl	8000dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 faa3 	bl	8000b3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 fae3 	bl	8000bc0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  lcd_init(_LCD_4BIT, _LCD_FONT_5x8, _LCD_2LINE);
 80005fa:	2208      	movs	r2, #8
 80005fc:	2100      	movs	r1, #0
 80005fe:	2000      	movs	r0, #0
 8000600:	f7ff ff46 	bl	8000490 <lcd_init>
  lcd_cmd(_LCD_INIT);
 8000604:	2006      	movs	r0, #6
 8000606:	f7ff fdbb 	bl	8000180 <lcd_cmd>
  lcd_print(1, 1, "Enter Password.");
 800060a:	4a9f      	ldr	r2, [pc, #636]	@ (8000888 <main+0x2a0>)
 800060c:	2101      	movs	r1, #1
 800060e:	2001      	movs	r0, #1
 8000610:	f7ff ff9b 	bl	800054a <lcd_print>


  int i = 1;
 8000614:	2301      	movs	r3, #1
 8000616:	61fb      	str	r3, [r7, #28]

  char entered_password[5];
  char real_password[5] = "12345";
 8000618:	4a9c      	ldr	r2, [pc, #624]	@ (800088c <main+0x2a4>)
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000620:	6018      	str	r0, [r3, #0]
 8000622:	3304      	adds	r3, #4
 8000624:	7019      	strb	r1, [r3, #0]


  // char yazi[32] = " ";
  HAL_Delay(10);
 8000626:	200a      	movs	r0, #10
 8000628:	f000 fc2a 	bl	8000e80 <HAL_Delay>
//
//  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
//  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
//  HAL_Delay(5000);

  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2101      	movs	r1, #1
 8000630:	4897      	ldr	r0, [pc, #604]	@ (8000890 <main+0x2a8>)
 8000632:	f000 fec0 	bl	80013b6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2102      	movs	r1, #2
 800063a:	4895      	ldr	r0, [pc, #596]	@ (8000890 <main+0x2a8>)
 800063c:	f000 febb 	bl	80013b6 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2140      	movs	r1, #64	@ 0x40
 8000644:	4892      	ldr	r0, [pc, #584]	@ (8000890 <main+0x2a8>)
 8000646:	f000 feb6 	bl	80013b6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	2180      	movs	r1, #128	@ 0x80
 800064e:	4890      	ldr	r0, [pc, #576]	@ (8000890 <main+0x2a8>)
 8000650:	f000 feb1 	bl	80013b6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800065a:	488d      	ldr	r0, [pc, #564]	@ (8000890 <main+0x2a8>)
 800065c:	f000 feab 	bl	80013b6 <HAL_GPIO_WritePin>

    /* USER CODE BEGIN 3 */



	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	2140      	movs	r1, #64	@ 0x40
 8000664:	488a      	ldr	r0, [pc, #552]	@ (8000890 <main+0x2a8>)
 8000666:	f000 fea6 	bl	80013b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2180      	movs	r1, #128	@ 0x80
 800066e:	4888      	ldr	r0, [pc, #544]	@ (8000890 <main+0x2a8>)
 8000670:	f000 fea1 	bl	80013b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800067a:	4885      	ldr	r0, [pc, #532]	@ (8000890 <main+0x2a8>)
 800067c:	f000 fe9b 	bl	80013b6 <HAL_GPIO_WritePin>

	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14))
 8000680:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000684:	4882      	ldr	r0, [pc, #520]	@ (8000890 <main+0x2a8>)
 8000686:	f000 fe7f 	bl	8001388 <HAL_GPIO_ReadPin>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d01a      	beq.n	80006c6 <main+0xde>
	{
		while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14));
 8000690:	bf00      	nop
 8000692:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000696:	487e      	ldr	r0, [pc, #504]	@ (8000890 <main+0x2a8>)
 8000698:	f000 fe76 	bl	8001388 <HAL_GPIO_ReadPin>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d1f7      	bne.n	8000692 <main+0xaa>
		lcd_print(2,i,"1");
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	4a7b      	ldr	r2, [pc, #492]	@ (8000894 <main+0x2ac>)
 80006a8:	4619      	mov	r1, r3
 80006aa:	2002      	movs	r0, #2
 80006ac:	f7ff ff4d 	bl	800054a <lcd_print>
		entered_password[i - 1] = '1';
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	3b01      	subs	r3, #1
 80006b4:	3320      	adds	r3, #32
 80006b6:	443b      	add	r3, r7
 80006b8:	2231      	movs	r2, #49	@ 0x31
 80006ba:	f803 2c14 	strb.w	r2, [r3, #-20]
		i++;
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	3301      	adds	r3, #1
 80006c2:	61fb      	str	r3, [r7, #28]
 80006c4:	e067      	b.n	8000796 <main+0x1ae>

	}
	else if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_13))
 80006c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006ca:	4871      	ldr	r0, [pc, #452]	@ (8000890 <main+0x2a8>)
 80006cc:	f000 fe5c 	bl	8001388 <HAL_GPIO_ReadPin>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d01a      	beq.n	800070c <main+0x124>
	{
		while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_13));
 80006d6:	bf00      	nop
 80006d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006dc:	486c      	ldr	r0, [pc, #432]	@ (8000890 <main+0x2a8>)
 80006de:	f000 fe53 	bl	8001388 <HAL_GPIO_ReadPin>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1f7      	bne.n	80006d8 <main+0xf0>
		lcd_print(2,i,"4");
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	4a6a      	ldr	r2, [pc, #424]	@ (8000898 <main+0x2b0>)
 80006ee:	4619      	mov	r1, r3
 80006f0:	2002      	movs	r0, #2
 80006f2:	f7ff ff2a 	bl	800054a <lcd_print>
		entered_password[i - 1] = '4';
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3b01      	subs	r3, #1
 80006fa:	3320      	adds	r3, #32
 80006fc:	443b      	add	r3, r7
 80006fe:	2234      	movs	r2, #52	@ 0x34
 8000700:	f803 2c14 	strb.w	r2, [r3, #-20]
		i++;
 8000704:	69fb      	ldr	r3, [r7, #28]
 8000706:	3301      	adds	r3, #1
 8000708:	61fb      	str	r3, [r7, #28]
 800070a:	e044      	b.n	8000796 <main+0x1ae>
	}
	else if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_12))
 800070c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000710:	485f      	ldr	r0, [pc, #380]	@ (8000890 <main+0x2a8>)
 8000712:	f000 fe39 	bl	8001388 <HAL_GPIO_ReadPin>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d01a      	beq.n	8000752 <main+0x16a>
	{
		while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_12));
 800071c:	bf00      	nop
 800071e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000722:	485b      	ldr	r0, [pc, #364]	@ (8000890 <main+0x2a8>)
 8000724:	f000 fe30 	bl	8001388 <HAL_GPIO_ReadPin>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1f7      	bne.n	800071e <main+0x136>
		lcd_print(2,i,"7");
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	4a5a      	ldr	r2, [pc, #360]	@ (800089c <main+0x2b4>)
 8000734:	4619      	mov	r1, r3
 8000736:	2002      	movs	r0, #2
 8000738:	f7ff ff07 	bl	800054a <lcd_print>
		entered_password[i - 1] = '7';
 800073c:	69fb      	ldr	r3, [r7, #28]
 800073e:	3b01      	subs	r3, #1
 8000740:	3320      	adds	r3, #32
 8000742:	443b      	add	r3, r7
 8000744:	2237      	movs	r2, #55	@ 0x37
 8000746:	f803 2c14 	strb.w	r2, [r3, #-20]
		i++;
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	3301      	adds	r3, #1
 800074e:	61fb      	str	r3, [r7, #28]
 8000750:	e021      	b.n	8000796 <main+0x1ae>
	}
	else if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11))
 8000752:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000756:	484e      	ldr	r0, [pc, #312]	@ (8000890 <main+0x2a8>)
 8000758:	f000 fe16 	bl	8001388 <HAL_GPIO_ReadPin>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d019      	beq.n	8000796 <main+0x1ae>
	{
		while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11));
 8000762:	bf00      	nop
 8000764:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000768:	4849      	ldr	r0, [pc, #292]	@ (8000890 <main+0x2a8>)
 800076a:	f000 fe0d 	bl	8001388 <HAL_GPIO_ReadPin>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d1f7      	bne.n	8000764 <main+0x17c>
		lcd_print(2,i,"*");
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	b2db      	uxtb	r3, r3
 8000778:	4a49      	ldr	r2, [pc, #292]	@ (80008a0 <main+0x2b8>)
 800077a:	4619      	mov	r1, r3
 800077c:	2002      	movs	r0, #2
 800077e:	f7ff fee4 	bl	800054a <lcd_print>
		entered_password[i - 1] = '*';
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3b01      	subs	r3, #1
 8000786:	3320      	adds	r3, #32
 8000788:	443b      	add	r3, r7
 800078a:	222a      	movs	r2, #42	@ 0x2a
 800078c:	f803 2c14 	strb.w	r2, [r3, #-20]
		i++;
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	3301      	adds	r3, #1
 8000794:	61fb      	str	r3, [r7, #28]
	}

	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2140      	movs	r1, #64	@ 0x40
 800079a:	483d      	ldr	r0, [pc, #244]	@ (8000890 <main+0x2a8>)
 800079c:	f000 fe0b 	bl	80013b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2180      	movs	r1, #128	@ 0x80
 80007a4:	483a      	ldr	r0, [pc, #232]	@ (8000890 <main+0x2a8>)
 80007a6:	f000 fe06 	bl	80013b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007b0:	4837      	ldr	r0, [pc, #220]	@ (8000890 <main+0x2a8>)
 80007b2:	f000 fe00 	bl	80013b6 <HAL_GPIO_WritePin>

	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14))
 80007b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007ba:	4835      	ldr	r0, [pc, #212]	@ (8000890 <main+0x2a8>)
 80007bc:	f000 fde4 	bl	8001388 <HAL_GPIO_ReadPin>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d01a      	beq.n	80007fc <main+0x214>
	{
		while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14));
 80007c6:	bf00      	nop
 80007c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007cc:	4830      	ldr	r0, [pc, #192]	@ (8000890 <main+0x2a8>)
 80007ce:	f000 fddb 	bl	8001388 <HAL_GPIO_ReadPin>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d1f7      	bne.n	80007c8 <main+0x1e0>
		lcd_print(2,i,"2");
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	4a31      	ldr	r2, [pc, #196]	@ (80008a4 <main+0x2bc>)
 80007de:	4619      	mov	r1, r3
 80007e0:	2002      	movs	r0, #2
 80007e2:	f7ff feb2 	bl	800054a <lcd_print>
		entered_password[i - 1] = '2';
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3b01      	subs	r3, #1
 80007ea:	3320      	adds	r3, #32
 80007ec:	443b      	add	r3, r7
 80007ee:	2232      	movs	r2, #50	@ 0x32
 80007f0:	f803 2c14 	strb.w	r2, [r3, #-20]
		i++;
 80007f4:	69fb      	ldr	r3, [r7, #28]
 80007f6:	3301      	adds	r3, #1
 80007f8:	61fb      	str	r3, [r7, #28]
 80007fa:	e07b      	b.n	80008f4 <main+0x30c>
	}
	else if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_13))
 80007fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000800:	4823      	ldr	r0, [pc, #140]	@ (8000890 <main+0x2a8>)
 8000802:	f000 fdc1 	bl	8001388 <HAL_GPIO_ReadPin>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d01a      	beq.n	8000842 <main+0x25a>
	{
		while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_13));
 800080c:	bf00      	nop
 800080e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000812:	481f      	ldr	r0, [pc, #124]	@ (8000890 <main+0x2a8>)
 8000814:	f000 fdb8 	bl	8001388 <HAL_GPIO_ReadPin>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1f7      	bne.n	800080e <main+0x226>
		lcd_print(2,i,"5");
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	b2db      	uxtb	r3, r3
 8000822:	4a21      	ldr	r2, [pc, #132]	@ (80008a8 <main+0x2c0>)
 8000824:	4619      	mov	r1, r3
 8000826:	2002      	movs	r0, #2
 8000828:	f7ff fe8f 	bl	800054a <lcd_print>
		entered_password[i - 1] = '5';
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	3b01      	subs	r3, #1
 8000830:	3320      	adds	r3, #32
 8000832:	443b      	add	r3, r7
 8000834:	2235      	movs	r2, #53	@ 0x35
 8000836:	f803 2c14 	strb.w	r2, [r3, #-20]
		i++;
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	3301      	adds	r3, #1
 800083e:	61fb      	str	r3, [r7, #28]
 8000840:	e058      	b.n	80008f4 <main+0x30c>
	}
	else if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_12))
 8000842:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000846:	4812      	ldr	r0, [pc, #72]	@ (8000890 <main+0x2a8>)
 8000848:	f000 fd9e 	bl	8001388 <HAL_GPIO_ReadPin>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d02e      	beq.n	80008b0 <main+0x2c8>
	{
		while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_12));
 8000852:	bf00      	nop
 8000854:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000858:	480d      	ldr	r0, [pc, #52]	@ (8000890 <main+0x2a8>)
 800085a:	f000 fd95 	bl	8001388 <HAL_GPIO_ReadPin>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d1f7      	bne.n	8000854 <main+0x26c>
		lcd_print(2,i,"8");
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	4a10      	ldr	r2, [pc, #64]	@ (80008ac <main+0x2c4>)
 800086a:	4619      	mov	r1, r3
 800086c:	2002      	movs	r0, #2
 800086e:	f7ff fe6c 	bl	800054a <lcd_print>
		entered_password[i - 1] = '8';
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3b01      	subs	r3, #1
 8000876:	3320      	adds	r3, #32
 8000878:	443b      	add	r3, r7
 800087a:	2238      	movs	r2, #56	@ 0x38
 800087c:	f803 2c14 	strb.w	r2, [r3, #-20]
		i++;
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	3301      	adds	r3, #1
 8000884:	61fb      	str	r3, [r7, #28]
 8000886:	e035      	b.n	80008f4 <main+0x30c>
 8000888:	08001c14 	.word	0x08001c14
 800088c:	08001c94 	.word	0x08001c94
 8000890:	40010c00 	.word	0x40010c00
 8000894:	08001c24 	.word	0x08001c24
 8000898:	08001c28 	.word	0x08001c28
 800089c:	08001c2c 	.word	0x08001c2c
 80008a0:	08001c30 	.word	0x08001c30
 80008a4:	08001c34 	.word	0x08001c34
 80008a8:	08001c38 	.word	0x08001c38
 80008ac:	08001c3c 	.word	0x08001c3c

	}
	else if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11))
 80008b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008b4:	4896      	ldr	r0, [pc, #600]	@ (8000b10 <main+0x528>)
 80008b6:	f000 fd67 	bl	8001388 <HAL_GPIO_ReadPin>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d019      	beq.n	80008f4 <main+0x30c>
	{
		while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11));
 80008c0:	bf00      	nop
 80008c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008c6:	4892      	ldr	r0, [pc, #584]	@ (8000b10 <main+0x528>)
 80008c8:	f000 fd5e 	bl	8001388 <HAL_GPIO_ReadPin>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d1f7      	bne.n	80008c2 <main+0x2da>
		lcd_print(2,i,"0");
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	4a8f      	ldr	r2, [pc, #572]	@ (8000b14 <main+0x52c>)
 80008d8:	4619      	mov	r1, r3
 80008da:	2002      	movs	r0, #2
 80008dc:	f7ff fe35 	bl	800054a <lcd_print>
		entered_password[i - 1] = '0';
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	3320      	adds	r3, #32
 80008e6:	443b      	add	r3, r7
 80008e8:	2230      	movs	r2, #48	@ 0x30
 80008ea:	f803 2c14 	strb.w	r2, [r3, #-20]
		i++;
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3301      	adds	r3, #1
 80008f2:	61fb      	str	r3, [r7, #28]
	}

	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2140      	movs	r1, #64	@ 0x40
 80008f8:	4885      	ldr	r0, [pc, #532]	@ (8000b10 <main+0x528>)
 80008fa:	f000 fd5c 	bl	80013b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2180      	movs	r1, #128	@ 0x80
 8000902:	4883      	ldr	r0, [pc, #524]	@ (8000b10 <main+0x528>)
 8000904:	f000 fd57 	bl	80013b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_SET);
 8000908:	2201      	movs	r2, #1
 800090a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800090e:	4880      	ldr	r0, [pc, #512]	@ (8000b10 <main+0x528>)
 8000910:	f000 fd51 	bl	80013b6 <HAL_GPIO_WritePin>

	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14))
 8000914:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000918:	487d      	ldr	r0, [pc, #500]	@ (8000b10 <main+0x528>)
 800091a:	f000 fd35 	bl	8001388 <HAL_GPIO_ReadPin>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d01a      	beq.n	800095a <main+0x372>
	{
		while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14));
 8000924:	bf00      	nop
 8000926:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800092a:	4879      	ldr	r0, [pc, #484]	@ (8000b10 <main+0x528>)
 800092c:	f000 fd2c 	bl	8001388 <HAL_GPIO_ReadPin>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d1f7      	bne.n	8000926 <main+0x33e>
		lcd_print(2,i,"3");
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4a77      	ldr	r2, [pc, #476]	@ (8000b18 <main+0x530>)
 800093c:	4619      	mov	r1, r3
 800093e:	2002      	movs	r0, #2
 8000940:	f7ff fe03 	bl	800054a <lcd_print>
		entered_password[i - 1] = '3';
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	3b01      	subs	r3, #1
 8000948:	3320      	adds	r3, #32
 800094a:	443b      	add	r3, r7
 800094c:	2233      	movs	r2, #51	@ 0x33
 800094e:	f803 2c14 	strb.w	r2, [r3, #-20]
		i++;
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	3301      	adds	r3, #1
 8000956:	61fb      	str	r3, [r7, #28]
 8000958:	e067      	b.n	8000a2a <main+0x442>
	}
	else if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_13))
 800095a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800095e:	486c      	ldr	r0, [pc, #432]	@ (8000b10 <main+0x528>)
 8000960:	f000 fd12 	bl	8001388 <HAL_GPIO_ReadPin>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d01a      	beq.n	80009a0 <main+0x3b8>
	{
		while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_13));
 800096a:	bf00      	nop
 800096c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000970:	4867      	ldr	r0, [pc, #412]	@ (8000b10 <main+0x528>)
 8000972:	f000 fd09 	bl	8001388 <HAL_GPIO_ReadPin>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d1f7      	bne.n	800096c <main+0x384>
		lcd_print(2,i,"6");
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	4a66      	ldr	r2, [pc, #408]	@ (8000b1c <main+0x534>)
 8000982:	4619      	mov	r1, r3
 8000984:	2002      	movs	r0, #2
 8000986:	f7ff fde0 	bl	800054a <lcd_print>
		entered_password[i - 1] = '6';
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	3b01      	subs	r3, #1
 800098e:	3320      	adds	r3, #32
 8000990:	443b      	add	r3, r7
 8000992:	2236      	movs	r2, #54	@ 0x36
 8000994:	f803 2c14 	strb.w	r2, [r3, #-20]
		i++;
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	3301      	adds	r3, #1
 800099c:	61fb      	str	r3, [r7, #28]
 800099e:	e044      	b.n	8000a2a <main+0x442>
	}
	else if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_12))
 80009a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009a4:	485a      	ldr	r0, [pc, #360]	@ (8000b10 <main+0x528>)
 80009a6:	f000 fcef 	bl	8001388 <HAL_GPIO_ReadPin>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d01a      	beq.n	80009e6 <main+0x3fe>
	{
		while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_12));
 80009b0:	bf00      	nop
 80009b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009b6:	4856      	ldr	r0, [pc, #344]	@ (8000b10 <main+0x528>)
 80009b8:	f000 fce6 	bl	8001388 <HAL_GPIO_ReadPin>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d1f7      	bne.n	80009b2 <main+0x3ca>
		lcd_print(2,i,"9");
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	4a56      	ldr	r2, [pc, #344]	@ (8000b20 <main+0x538>)
 80009c8:	4619      	mov	r1, r3
 80009ca:	2002      	movs	r0, #2
 80009cc:	f7ff fdbd 	bl	800054a <lcd_print>
		entered_password[i - 1] = '9';
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	3b01      	subs	r3, #1
 80009d4:	3320      	adds	r3, #32
 80009d6:	443b      	add	r3, r7
 80009d8:	2239      	movs	r2, #57	@ 0x39
 80009da:	f803 2c14 	strb.w	r2, [r3, #-20]
		i++;
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	3301      	adds	r3, #1
 80009e2:	61fb      	str	r3, [r7, #28]
 80009e4:	e021      	b.n	8000a2a <main+0x442>
	}
	else if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11))
 80009e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009ea:	4849      	ldr	r0, [pc, #292]	@ (8000b10 <main+0x528>)
 80009ec:	f000 fccc 	bl	8001388 <HAL_GPIO_ReadPin>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d019      	beq.n	8000a2a <main+0x442>
	{
		while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11));
 80009f6:	bf00      	nop
 80009f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009fc:	4844      	ldr	r0, [pc, #272]	@ (8000b10 <main+0x528>)
 80009fe:	f000 fcc3 	bl	8001388 <HAL_GPIO_ReadPin>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1f7      	bne.n	80009f8 <main+0x410>
		lcd_print(2,i,"#");
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	4a45      	ldr	r2, [pc, #276]	@ (8000b24 <main+0x53c>)
 8000a0e:	4619      	mov	r1, r3
 8000a10:	2002      	movs	r0, #2
 8000a12:	f7ff fd9a 	bl	800054a <lcd_print>
		entered_password[i - 1] = '#';
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	3320      	adds	r3, #32
 8000a1c:	443b      	add	r3, r7
 8000a1e:	2223      	movs	r2, #35	@ 0x23
 8000a20:	f803 2c14 	strb.w	r2, [r3, #-20]
		i++;
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	3301      	adds	r3, #1
 8000a28:	61fb      	str	r3, [r7, #28]
	}


	if (i == 6)
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	2b06      	cmp	r3, #6
 8000a2e:	f47f ae17 	bne.w	8000660 <main+0x78>
	{
		for(int j = 0;j < 5;j++)
 8000a32:	2300      	movs	r3, #0
 8000a34:	61bb      	str	r3, [r7, #24]
 8000a36:	e066      	b.n	8000b06 <main+0x51e>
		{
			if(entered_password[j] != real_password[j])
 8000a38:	f107 020c 	add.w	r2, r7, #12
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	4413      	add	r3, r2
 8000a40:	781a      	ldrb	r2, [r3, #0]
 8000a42:	1d39      	adds	r1, r7, #4
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	440b      	add	r3, r1
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d019      	beq.n	8000a82 <main+0x49a>
			{
				lcd_clear();
 8000a4e:	f7ff fd91 	bl	8000574 <lcd_clear>
				lcd_print(1, 1, "Wrong Password!");
 8000a52:	4a35      	ldr	r2, [pc, #212]	@ (8000b28 <main+0x540>)
 8000a54:	2101      	movs	r1, #1
 8000a56:	2001      	movs	r0, #1
 8000a58:	f7ff fd77 	bl	800054a <lcd_print>
				lcd_print(2, 1, "Try again.");
 8000a5c:	4a33      	ldr	r2, [pc, #204]	@ (8000b2c <main+0x544>)
 8000a5e:	2101      	movs	r1, #1
 8000a60:	2002      	movs	r0, #2
 8000a62:	f7ff fd72 	bl	800054a <lcd_print>
				HAL_Delay(2000);
 8000a66:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a6a:	f000 fa09 	bl	8000e80 <HAL_Delay>

				lcd_clear();
 8000a6e:	f7ff fd81 	bl	8000574 <lcd_clear>
				lcd_print(1,1,"Enter Password.");
 8000a72:	4a2f      	ldr	r2, [pc, #188]	@ (8000b30 <main+0x548>)
 8000a74:	2101      	movs	r1, #1
 8000a76:	2001      	movs	r0, #1
 8000a78:	f7ff fd67 	bl	800054a <lcd_print>

				i = 1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61fb      	str	r3, [r7, #28]
				break;
 8000a80:	e044      	b.n	8000b0c <main+0x524>
			}

			if(j == 4)
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	2b04      	cmp	r3, #4
 8000a86:	d13b      	bne.n	8000b00 <main+0x518>
			{
				lcd_clear();
 8000a88:	f7ff fd74 	bl	8000574 <lcd_clear>
				lcd_print(1,1,"Correct Password!");
 8000a8c:	4a29      	ldr	r2, [pc, #164]	@ (8000b34 <main+0x54c>)
 8000a8e:	2101      	movs	r1, #1
 8000a90:	2001      	movs	r0, #1
 8000a92:	f7ff fd5a 	bl	800054a <lcd_print>
				HAL_Delay(1000);
 8000a96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a9a:	f000 f9f1 	bl	8000e80 <HAL_Delay>
				lcd_print(2,1,"Enter Please!");
 8000a9e:	4a26      	ldr	r2, [pc, #152]	@ (8000b38 <main+0x550>)
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	f7ff fd51 	bl	800054a <lcd_print>
				motor_forward();
 8000aa8:	f7ff fd6e 	bl	8000588 <motor_forward>
				HAL_Delay(3000);
 8000aac:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000ab0:	f000 f9e6 	bl	8000e80 <HAL_Delay>

				motor_stop();
 8000ab4:	f7ff fd88 	bl	80005c8 <motor_stop>
				HAL_Delay(1000);
 8000ab8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000abc:	f000 f9e0 	bl	8000e80 <HAL_Delay>

				motor_backward();
 8000ac0:	f7ff fd72 	bl	80005a8 <motor_backward>
				HAL_Delay(3000);
 8000ac4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000ac8:	f000 f9da 	bl	8000e80 <HAL_Delay>
				motor_stop();
 8000acc:	f7ff fd7c 	bl	80005c8 <motor_stop>

				for(int a = 0;a < 5;a++)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	e008      	b.n	8000ae8 <main+0x500>
				{
					entered_password[a] = 0;
 8000ad6:	f107 020c 	add.w	r2, r7, #12
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	4413      	add	r3, r2
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
				for(int a = 0;a < 5;a++)
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	ddf3      	ble.n	8000ad6 <main+0x4ee>
				}

				lcd_clear();
 8000aee:	f7ff fd41 	bl	8000574 <lcd_clear>
				lcd_print(1,1,"Enter Password.");
 8000af2:	4a0f      	ldr	r2, [pc, #60]	@ (8000b30 <main+0x548>)
 8000af4:	2101      	movs	r1, #1
 8000af6:	2001      	movs	r0, #1
 8000af8:	f7ff fd27 	bl	800054a <lcd_print>




				i = 1;
 8000afc:	2301      	movs	r3, #1
 8000afe:	61fb      	str	r3, [r7, #28]
		for(int j = 0;j < 5;j++)
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	3301      	adds	r3, #1
 8000b04:	61bb      	str	r3, [r7, #24]
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	2b04      	cmp	r3, #4
 8000b0a:	dd95      	ble.n	8000a38 <main+0x450>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8000b0c:	e5a8      	b.n	8000660 <main+0x78>
 8000b0e:	bf00      	nop
 8000b10:	40010c00 	.word	0x40010c00
 8000b14:	08001c40 	.word	0x08001c40
 8000b18:	08001c44 	.word	0x08001c44
 8000b1c:	08001c48 	.word	0x08001c48
 8000b20:	08001c4c 	.word	0x08001c4c
 8000b24:	08001c50 	.word	0x08001c50
 8000b28:	08001c54 	.word	0x08001c54
 8000b2c:	08001c64 	.word	0x08001c64
 8000b30:	08001c14 	.word	0x08001c14
 8000b34:	08001c70 	.word	0x08001c70
 8000b38:	08001c84 	.word	0x08001c84

08000b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b090      	sub	sp, #64	@ 0x40
 8000b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b42:	f107 0318 	add.w	r3, r7, #24
 8000b46:	2228      	movs	r2, #40	@ 0x28
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f001 f82a 	bl	8001ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b62:	2301      	movs	r3, #1
 8000b64:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b66:	2310      	movs	r3, #16
 8000b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000b72:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8000b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b78:	f107 0318 	add.w	r3, r7, #24
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 fc33 	bl	80013e8 <HAL_RCC_OscConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b88:	f000 f888 	bl	8000c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b90:	2302      	movs	r3, #2
 8000b92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 fea0 	bl	80018ec <HAL_RCC_ClockConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000bb2:	f000 f873 	bl	8000c9c <Error_Handler>
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3740      	adds	r7, #64	@ 0x40
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8000c90 <MX_GPIO_Init+0xd0>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a2d      	ldr	r2, [pc, #180]	@ (8000c90 <MX_GPIO_Init+0xd0>)
 8000bda:	f043 0320 	orr.w	r3, r3, #32
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b2b      	ldr	r3, [pc, #172]	@ (8000c90 <MX_GPIO_Init+0xd0>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0320 	and.w	r3, r3, #32
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	4b28      	ldr	r3, [pc, #160]	@ (8000c90 <MX_GPIO_Init+0xd0>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a27      	ldr	r2, [pc, #156]	@ (8000c90 <MX_GPIO_Init+0xd0>)
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b25      	ldr	r3, [pc, #148]	@ (8000c90 <MX_GPIO_Init+0xd0>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c04:	4b22      	ldr	r3, [pc, #136]	@ (8000c90 <MX_GPIO_Init+0xd0>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a21      	ldr	r2, [pc, #132]	@ (8000c90 <MX_GPIO_Init+0xd0>)
 8000c0a:	f043 0308 	orr.w	r3, r3, #8
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b1f      	ldr	r3, [pc, #124]	@ (8000c90 <MX_GPIO_Init+0xd0>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0308 	and.w	r3, r3, #8
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_EN_Pin|LCD_RS_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	21f6      	movs	r1, #246	@ 0xf6
 8000c20:	481c      	ldr	r0, [pc, #112]	@ (8000c94 <MX_GPIO_Init+0xd4>)
 8000c22:	f000 fbc8 	bl	80013b6 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7
 8000c26:	2200      	movs	r2, #0
 8000c28:	f240 11c3 	movw	r1, #451	@ 0x1c3
 8000c2c:	481a      	ldr	r0, [pc, #104]	@ (8000c98 <MX_GPIO_Init+0xd8>)
 8000c2e:	f000 fbc2 	bl	80013b6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_EN_Pin LCD_RS_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RS_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000c32:	23f6      	movs	r3, #246	@ 0xf6
 8000c34:	613b      	str	r3, [r7, #16]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	4619      	mov	r1, r3
 8000c48:	4812      	ldr	r0, [pc, #72]	@ (8000c94 <MX_GPIO_Init+0xd4>)
 8000c4a:	f000 fa21 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB6 PB7
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7
 8000c4e:	f240 13c3 	movw	r3, #451	@ 0x1c3
 8000c52:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	4619      	mov	r1, r3
 8000c66:	480c      	ldr	r0, [pc, #48]	@ (8000c98 <MX_GPIO_Init+0xd8>)
 8000c68:	f000 fa12 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000c6c:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8000c70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7a:	f107 0310 	add.w	r3, r7, #16
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <MX_GPIO_Init+0xd8>)
 8000c82:	f000 fa05 	bl	8001090 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c86:	bf00      	nop
 8000c88:	3720      	adds	r7, #32
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40010800 	.word	0x40010800
 8000c98:	40010c00 	.word	0x40010c00

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <Error_Handler+0x8>

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cae:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <HAL_MspInit+0x5c>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	4a14      	ldr	r2, [pc, #80]	@ (8000d04 <HAL_MspInit+0x5c>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6193      	str	r3, [r2, #24]
 8000cba:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <HAL_MspInit+0x5c>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <HAL_MspInit+0x5c>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	4a0e      	ldr	r2, [pc, #56]	@ (8000d04 <HAL_MspInit+0x5c>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd0:	61d3      	str	r3, [r2, #28]
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <HAL_MspInit+0x5c>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cde:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <HAL_MspInit+0x60>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	4a04      	ldr	r2, [pc, #16]	@ (8000d08 <HAL_MspInit+0x60>)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40010000 	.word	0x40010000

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <NMI_Handler+0x4>

08000d14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <HardFault_Handler+0x4>

08000d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <MemManage_Handler+0x4>

08000d24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5c:	f000 f874 	bl	8000e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d70:	f7ff fff8 	bl	8000d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d74:	480b      	ldr	r0, [pc, #44]	@ (8000da4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d76:	490c      	ldr	r1, [pc, #48]	@ (8000da8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d78:	4a0c      	ldr	r2, [pc, #48]	@ (8000dac <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d7c:	e002      	b.n	8000d84 <LoopCopyDataInit>

08000d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d82:	3304      	adds	r3, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d88:	d3f9      	bcc.n	8000d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8a:	4a09      	ldr	r2, [pc, #36]	@ (8000db0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d8c:	4c09      	ldr	r4, [pc, #36]	@ (8000db4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d90:	e001      	b.n	8000d96 <LoopFillZerobss>

08000d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d94:	3204      	adds	r2, #4

08000d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d98:	d3fb      	bcc.n	8000d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f000 ff0b 	bl	8001bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d9e:	f7ff fc23 	bl	80005e8 <main>
  bx lr
 8000da2:	4770      	bx	lr
  ldr r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dac:	08001cc8 	.word	0x08001cc8
  ldr r2, =_sbss
 8000db0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000db4:	2000002c 	.word	0x2000002c

08000db8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000db8:	e7fe      	b.n	8000db8 <ADC1_2_IRQHandler>
	...

08000dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc0:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <HAL_Init+0x28>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a07      	ldr	r2, [pc, #28]	@ (8000de4 <HAL_Init+0x28>)
 8000dc6:	f043 0310 	orr.w	r3, r3, #16
 8000dca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dcc:	2003      	movs	r0, #3
 8000dce:	f000 f92b 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd2:	200f      	movs	r0, #15
 8000dd4:	f000 f808 	bl	8000de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd8:	f7ff ff66 	bl	8000ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40022000 	.word	0x40022000

08000de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df0:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <HAL_InitTick+0x54>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4b12      	ldr	r3, [pc, #72]	@ (8000e40 <HAL_InitTick+0x58>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 f935 	bl	8001076 <HAL_SYSTICK_Config>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e00e      	b.n	8000e34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b0f      	cmp	r3, #15
 8000e1a:	d80a      	bhi.n	8000e32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295
 8000e24:	f000 f90b 	bl	800103e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e28:	4a06      	ldr	r2, [pc, #24]	@ (8000e44 <HAL_InitTick+0x5c>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e000      	b.n	8000e34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	20000008 	.word	0x20000008
 8000e44:	20000004 	.word	0x20000004

08000e48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e4c:	4b05      	ldr	r3, [pc, #20]	@ (8000e64 <HAL_IncTick+0x1c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b05      	ldr	r3, [pc, #20]	@ (8000e68 <HAL_IncTick+0x20>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	4a03      	ldr	r2, [pc, #12]	@ (8000e68 <HAL_IncTick+0x20>)
 8000e5a:	6013      	str	r3, [r2, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	20000008 	.word	0x20000008
 8000e68:	20000028 	.word	0x20000028

08000e6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e70:	4b02      	ldr	r3, [pc, #8]	@ (8000e7c <HAL_GetTick+0x10>)
 8000e72:	681b      	ldr	r3, [r3, #0]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	20000028 	.word	0x20000028

08000e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e88:	f7ff fff0 	bl	8000e6c <HAL_GetTick>
 8000e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e98:	d005      	beq.n	8000ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <HAL_Delay+0x44>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ea6:	bf00      	nop
 8000ea8:	f7ff ffe0 	bl	8000e6c <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d8f7      	bhi.n	8000ea8 <HAL_Delay+0x28>
  {
  }
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008

08000ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efa:	4a04      	ldr	r2, [pc, #16]	@ (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	60d3      	str	r3, [r2, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b04      	ldr	r3, [pc, #16]	@ (8000f28 <__NVIC_GetPriorityGrouping+0x18>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	f003 0307 	and.w	r3, r3, #7
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	db0a      	blt.n	8000f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	490c      	ldr	r1, [pc, #48]	@ (8000f78 <__NVIC_SetPriority+0x4c>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	0112      	lsls	r2, r2, #4
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	440b      	add	r3, r1
 8000f50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f54:	e00a      	b.n	8000f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4908      	ldr	r1, [pc, #32]	@ (8000f7c <__NVIC_SetPriority+0x50>)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	3b04      	subs	r3, #4
 8000f64:	0112      	lsls	r2, r2, #4
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	440b      	add	r3, r1
 8000f6a:	761a      	strb	r2, [r3, #24]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000e100 	.word	0xe000e100
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	@ 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f1c3 0307 	rsb	r3, r3, #7
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	bf28      	it	cs
 8000f9e:	2304      	movcs	r3, #4
 8000fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	d902      	bls.n	8000fb0 <NVIC_EncodePriority+0x30>
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3b03      	subs	r3, #3
 8000fae:	e000      	b.n	8000fb2 <NVIC_EncodePriority+0x32>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	43d9      	mvns	r1, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	4313      	orrs	r3, r2
         );
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3724      	adds	r7, #36	@ 0x24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr

08000fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ff4:	d301      	bcc.n	8000ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00f      	b.n	800101a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8001024 <SysTick_Config+0x40>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001002:	210f      	movs	r1, #15
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f7ff ff90 	bl	8000f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800100c:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <SysTick_Config+0x40>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001012:	4b04      	ldr	r3, [pc, #16]	@ (8001024 <SysTick_Config+0x40>)
 8001014:	2207      	movs	r2, #7
 8001016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	e000e010 	.word	0xe000e010

08001028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff49 	bl	8000ec8 <__NVIC_SetPriorityGrouping>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001050:	f7ff ff5e 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 8001054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	68b9      	ldr	r1, [r7, #8]
 800105a:	6978      	ldr	r0, [r7, #20]
 800105c:	f7ff ff90 	bl	8000f80 <NVIC_EncodePriority>
 8001060:	4602      	mov	r2, r0
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff5f 	bl	8000f2c <__NVIC_SetPriority>
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ffb0 	bl	8000fe4 <SysTick_Config>
 8001084:	4603      	mov	r3, r0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001090:	b480      	push	{r7}
 8001092:	b08b      	sub	sp, #44	@ 0x2c
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800109e:	2300      	movs	r3, #0
 80010a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a2:	e161      	b.n	8001368 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010a4:	2201      	movs	r2, #1
 80010a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	69fa      	ldr	r2, [r7, #28]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	429a      	cmp	r2, r3
 80010be:	f040 8150 	bne.w	8001362 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	4a97      	ldr	r2, [pc, #604]	@ (8001324 <HAL_GPIO_Init+0x294>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d05e      	beq.n	800118a <HAL_GPIO_Init+0xfa>
 80010cc:	4a95      	ldr	r2, [pc, #596]	@ (8001324 <HAL_GPIO_Init+0x294>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d875      	bhi.n	80011be <HAL_GPIO_Init+0x12e>
 80010d2:	4a95      	ldr	r2, [pc, #596]	@ (8001328 <HAL_GPIO_Init+0x298>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d058      	beq.n	800118a <HAL_GPIO_Init+0xfa>
 80010d8:	4a93      	ldr	r2, [pc, #588]	@ (8001328 <HAL_GPIO_Init+0x298>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d86f      	bhi.n	80011be <HAL_GPIO_Init+0x12e>
 80010de:	4a93      	ldr	r2, [pc, #588]	@ (800132c <HAL_GPIO_Init+0x29c>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d052      	beq.n	800118a <HAL_GPIO_Init+0xfa>
 80010e4:	4a91      	ldr	r2, [pc, #580]	@ (800132c <HAL_GPIO_Init+0x29c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d869      	bhi.n	80011be <HAL_GPIO_Init+0x12e>
 80010ea:	4a91      	ldr	r2, [pc, #580]	@ (8001330 <HAL_GPIO_Init+0x2a0>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d04c      	beq.n	800118a <HAL_GPIO_Init+0xfa>
 80010f0:	4a8f      	ldr	r2, [pc, #572]	@ (8001330 <HAL_GPIO_Init+0x2a0>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d863      	bhi.n	80011be <HAL_GPIO_Init+0x12e>
 80010f6:	4a8f      	ldr	r2, [pc, #572]	@ (8001334 <HAL_GPIO_Init+0x2a4>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d046      	beq.n	800118a <HAL_GPIO_Init+0xfa>
 80010fc:	4a8d      	ldr	r2, [pc, #564]	@ (8001334 <HAL_GPIO_Init+0x2a4>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d85d      	bhi.n	80011be <HAL_GPIO_Init+0x12e>
 8001102:	2b12      	cmp	r3, #18
 8001104:	d82a      	bhi.n	800115c <HAL_GPIO_Init+0xcc>
 8001106:	2b12      	cmp	r3, #18
 8001108:	d859      	bhi.n	80011be <HAL_GPIO_Init+0x12e>
 800110a:	a201      	add	r2, pc, #4	@ (adr r2, 8001110 <HAL_GPIO_Init+0x80>)
 800110c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001110:	0800118b 	.word	0x0800118b
 8001114:	08001165 	.word	0x08001165
 8001118:	08001177 	.word	0x08001177
 800111c:	080011b9 	.word	0x080011b9
 8001120:	080011bf 	.word	0x080011bf
 8001124:	080011bf 	.word	0x080011bf
 8001128:	080011bf 	.word	0x080011bf
 800112c:	080011bf 	.word	0x080011bf
 8001130:	080011bf 	.word	0x080011bf
 8001134:	080011bf 	.word	0x080011bf
 8001138:	080011bf 	.word	0x080011bf
 800113c:	080011bf 	.word	0x080011bf
 8001140:	080011bf 	.word	0x080011bf
 8001144:	080011bf 	.word	0x080011bf
 8001148:	080011bf 	.word	0x080011bf
 800114c:	080011bf 	.word	0x080011bf
 8001150:	080011bf 	.word	0x080011bf
 8001154:	0800116d 	.word	0x0800116d
 8001158:	08001181 	.word	0x08001181
 800115c:	4a76      	ldr	r2, [pc, #472]	@ (8001338 <HAL_GPIO_Init+0x2a8>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d013      	beq.n	800118a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001162:	e02c      	b.n	80011be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	623b      	str	r3, [r7, #32]
          break;
 800116a:	e029      	b.n	80011c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	3304      	adds	r3, #4
 8001172:	623b      	str	r3, [r7, #32]
          break;
 8001174:	e024      	b.n	80011c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	3308      	adds	r3, #8
 800117c:	623b      	str	r3, [r7, #32]
          break;
 800117e:	e01f      	b.n	80011c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	330c      	adds	r3, #12
 8001186:	623b      	str	r3, [r7, #32]
          break;
 8001188:	e01a      	b.n	80011c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d102      	bne.n	8001198 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001192:	2304      	movs	r3, #4
 8001194:	623b      	str	r3, [r7, #32]
          break;
 8001196:	e013      	b.n	80011c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d105      	bne.n	80011ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011a0:	2308      	movs	r3, #8
 80011a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69fa      	ldr	r2, [r7, #28]
 80011a8:	611a      	str	r2, [r3, #16]
          break;
 80011aa:	e009      	b.n	80011c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011ac:	2308      	movs	r3, #8
 80011ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	615a      	str	r2, [r3, #20]
          break;
 80011b6:	e003      	b.n	80011c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
          break;
 80011bc:	e000      	b.n	80011c0 <HAL_GPIO_Init+0x130>
          break;
 80011be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	2bff      	cmp	r3, #255	@ 0xff
 80011c4:	d801      	bhi.n	80011ca <HAL_GPIO_Init+0x13a>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	e001      	b.n	80011ce <HAL_GPIO_Init+0x13e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3304      	adds	r3, #4
 80011ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	2bff      	cmp	r3, #255	@ 0xff
 80011d4:	d802      	bhi.n	80011dc <HAL_GPIO_Init+0x14c>
 80011d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	e002      	b.n	80011e2 <HAL_GPIO_Init+0x152>
 80011dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011de:	3b08      	subs	r3, #8
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	210f      	movs	r1, #15
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	fa01 f303 	lsl.w	r3, r1, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	401a      	ands	r2, r3
 80011f4:	6a39      	ldr	r1, [r7, #32]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	fa01 f303 	lsl.w	r3, r1, r3
 80011fc:	431a      	orrs	r2, r3
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 80a9 	beq.w	8001362 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001210:	4b4a      	ldr	r3, [pc, #296]	@ (800133c <HAL_GPIO_Init+0x2ac>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	4a49      	ldr	r2, [pc, #292]	@ (800133c <HAL_GPIO_Init+0x2ac>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	4b47      	ldr	r3, [pc, #284]	@ (800133c <HAL_GPIO_Init+0x2ac>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001228:	4a45      	ldr	r2, [pc, #276]	@ (8001340 <HAL_GPIO_Init+0x2b0>)
 800122a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122c:	089b      	lsrs	r3, r3, #2
 800122e:	3302      	adds	r3, #2
 8001230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001234:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	220f      	movs	r2, #15
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	4013      	ands	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a3d      	ldr	r2, [pc, #244]	@ (8001344 <HAL_GPIO_Init+0x2b4>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d00d      	beq.n	8001270 <HAL_GPIO_Init+0x1e0>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a3c      	ldr	r2, [pc, #240]	@ (8001348 <HAL_GPIO_Init+0x2b8>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d007      	beq.n	800126c <HAL_GPIO_Init+0x1dc>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a3b      	ldr	r2, [pc, #236]	@ (800134c <HAL_GPIO_Init+0x2bc>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d101      	bne.n	8001268 <HAL_GPIO_Init+0x1d8>
 8001264:	2302      	movs	r3, #2
 8001266:	e004      	b.n	8001272 <HAL_GPIO_Init+0x1e2>
 8001268:	2303      	movs	r3, #3
 800126a:	e002      	b.n	8001272 <HAL_GPIO_Init+0x1e2>
 800126c:	2301      	movs	r3, #1
 800126e:	e000      	b.n	8001272 <HAL_GPIO_Init+0x1e2>
 8001270:	2300      	movs	r3, #0
 8001272:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001274:	f002 0203 	and.w	r2, r2, #3
 8001278:	0092      	lsls	r2, r2, #2
 800127a:	4093      	lsls	r3, r2
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	4313      	orrs	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001282:	492f      	ldr	r1, [pc, #188]	@ (8001340 <HAL_GPIO_Init+0x2b0>)
 8001284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001286:	089b      	lsrs	r3, r3, #2
 8001288:	3302      	adds	r3, #2
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800129c:	4b2c      	ldr	r3, [pc, #176]	@ (8001350 <HAL_GPIO_Init+0x2c0>)
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	492b      	ldr	r1, [pc, #172]	@ (8001350 <HAL_GPIO_Init+0x2c0>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	608b      	str	r3, [r1, #8]
 80012a8:	e006      	b.n	80012b8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012aa:	4b29      	ldr	r3, [pc, #164]	@ (8001350 <HAL_GPIO_Init+0x2c0>)
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	4927      	ldr	r1, [pc, #156]	@ (8001350 <HAL_GPIO_Init+0x2c0>)
 80012b4:	4013      	ands	r3, r2
 80012b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d006      	beq.n	80012d2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012c4:	4b22      	ldr	r3, [pc, #136]	@ (8001350 <HAL_GPIO_Init+0x2c0>)
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	4921      	ldr	r1, [pc, #132]	@ (8001350 <HAL_GPIO_Init+0x2c0>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	60cb      	str	r3, [r1, #12]
 80012d0:	e006      	b.n	80012e0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001350 <HAL_GPIO_Init+0x2c0>)
 80012d4:	68da      	ldr	r2, [r3, #12]
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	43db      	mvns	r3, r3
 80012da:	491d      	ldr	r1, [pc, #116]	@ (8001350 <HAL_GPIO_Init+0x2c0>)
 80012dc:	4013      	ands	r3, r2
 80012de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d006      	beq.n	80012fa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012ec:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <HAL_GPIO_Init+0x2c0>)
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	4917      	ldr	r1, [pc, #92]	@ (8001350 <HAL_GPIO_Init+0x2c0>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	604b      	str	r3, [r1, #4]
 80012f8:	e006      	b.n	8001308 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012fa:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <HAL_GPIO_Init+0x2c0>)
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	43db      	mvns	r3, r3
 8001302:	4913      	ldr	r1, [pc, #76]	@ (8001350 <HAL_GPIO_Init+0x2c0>)
 8001304:	4013      	ands	r3, r2
 8001306:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d01f      	beq.n	8001354 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001314:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <HAL_GPIO_Init+0x2c0>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	490d      	ldr	r1, [pc, #52]	@ (8001350 <HAL_GPIO_Init+0x2c0>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	600b      	str	r3, [r1, #0]
 8001320:	e01f      	b.n	8001362 <HAL_GPIO_Init+0x2d2>
 8001322:	bf00      	nop
 8001324:	10320000 	.word	0x10320000
 8001328:	10310000 	.word	0x10310000
 800132c:	10220000 	.word	0x10220000
 8001330:	10210000 	.word	0x10210000
 8001334:	10120000 	.word	0x10120000
 8001338:	10110000 	.word	0x10110000
 800133c:	40021000 	.word	0x40021000
 8001340:	40010000 	.word	0x40010000
 8001344:	40010800 	.word	0x40010800
 8001348:	40010c00 	.word	0x40010c00
 800134c:	40011000 	.word	0x40011000
 8001350:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001354:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <HAL_GPIO_Init+0x2f4>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	43db      	mvns	r3, r3
 800135c:	4909      	ldr	r1, [pc, #36]	@ (8001384 <HAL_GPIO_Init+0x2f4>)
 800135e:	4013      	ands	r3, r2
 8001360:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001364:	3301      	adds	r3, #1
 8001366:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136e:	fa22 f303 	lsr.w	r3, r2, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	f47f ae96 	bne.w	80010a4 <HAL_GPIO_Init+0x14>
  }
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	372c      	adds	r7, #44	@ 0x2c
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	40010400 	.word	0x40010400

08001388 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	887b      	ldrh	r3, [r7, #2]
 800139a:	4013      	ands	r3, r2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013a0:	2301      	movs	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]
 80013a4:	e001      	b.n	80013aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr

080013b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	460b      	mov	r3, r1
 80013c0:	807b      	strh	r3, [r7, #2]
 80013c2:	4613      	mov	r3, r2
 80013c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013c6:	787b      	ldrb	r3, [r7, #1]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013cc:	887a      	ldrh	r2, [r7, #2]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013d2:	e003      	b.n	80013dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013d4:	887b      	ldrh	r3, [r7, #2]
 80013d6:	041a      	lsls	r2, r3, #16
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	611a      	str	r2, [r3, #16]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
	...

080013e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e272      	b.n	80018e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 8087 	beq.w	8001516 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001408:	4b92      	ldr	r3, [pc, #584]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 030c 	and.w	r3, r3, #12
 8001410:	2b04      	cmp	r3, #4
 8001412:	d00c      	beq.n	800142e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001414:	4b8f      	ldr	r3, [pc, #572]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 030c 	and.w	r3, r3, #12
 800141c:	2b08      	cmp	r3, #8
 800141e:	d112      	bne.n	8001446 <HAL_RCC_OscConfig+0x5e>
 8001420:	4b8c      	ldr	r3, [pc, #560]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800142c:	d10b      	bne.n	8001446 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800142e:	4b89      	ldr	r3, [pc, #548]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d06c      	beq.n	8001514 <HAL_RCC_OscConfig+0x12c>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d168      	bne.n	8001514 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e24c      	b.n	80018e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800144e:	d106      	bne.n	800145e <HAL_RCC_OscConfig+0x76>
 8001450:	4b80      	ldr	r3, [pc, #512]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a7f      	ldr	r2, [pc, #508]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001456:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	e02e      	b.n	80014bc <HAL_RCC_OscConfig+0xd4>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10c      	bne.n	8001480 <HAL_RCC_OscConfig+0x98>
 8001466:	4b7b      	ldr	r3, [pc, #492]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a7a      	ldr	r2, [pc, #488]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 800146c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	4b78      	ldr	r3, [pc, #480]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a77      	ldr	r2, [pc, #476]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001478:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	e01d      	b.n	80014bc <HAL_RCC_OscConfig+0xd4>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001488:	d10c      	bne.n	80014a4 <HAL_RCC_OscConfig+0xbc>
 800148a:	4b72      	ldr	r3, [pc, #456]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a71      	ldr	r2, [pc, #452]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	4b6f      	ldr	r3, [pc, #444]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a6e      	ldr	r2, [pc, #440]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 800149c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	e00b      	b.n	80014bc <HAL_RCC_OscConfig+0xd4>
 80014a4:	4b6b      	ldr	r3, [pc, #428]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a6a      	ldr	r2, [pc, #424]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 80014aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b68      	ldr	r3, [pc, #416]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a67      	ldr	r2, [pc, #412]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 80014b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d013      	beq.n	80014ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c4:	f7ff fcd2 	bl	8000e6c <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014cc:	f7ff fcce 	bl	8000e6c <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b64      	cmp	r3, #100	@ 0x64
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e200      	b.n	80018e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	4b5d      	ldr	r3, [pc, #372]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0xe4>
 80014ea:	e014      	b.n	8001516 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fcbe 	bl	8000e6c <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f4:	f7ff fcba 	bl	8000e6c <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b64      	cmp	r3, #100	@ 0x64
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e1ec      	b.n	80018e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001506:	4b53      	ldr	r3, [pc, #332]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x10c>
 8001512:	e000      	b.n	8001516 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d063      	beq.n	80015ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001522:	4b4c      	ldr	r3, [pc, #304]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00b      	beq.n	8001546 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800152e:	4b49      	ldr	r3, [pc, #292]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	2b08      	cmp	r3, #8
 8001538:	d11c      	bne.n	8001574 <HAL_RCC_OscConfig+0x18c>
 800153a:	4b46      	ldr	r3, [pc, #280]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d116      	bne.n	8001574 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001546:	4b43      	ldr	r3, [pc, #268]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d005      	beq.n	800155e <HAL_RCC_OscConfig+0x176>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d001      	beq.n	800155e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e1c0      	b.n	80018e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155e:	4b3d      	ldr	r3, [pc, #244]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	4939      	ldr	r1, [pc, #228]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001572:	e03a      	b.n	80015ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d020      	beq.n	80015be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800157c:	4b36      	ldr	r3, [pc, #216]	@ (8001658 <HAL_RCC_OscConfig+0x270>)
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001582:	f7ff fc73 	bl	8000e6c <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800158a:	f7ff fc6f 	bl	8000e6c <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e1a1      	b.n	80018e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159c:	4b2d      	ldr	r3, [pc, #180]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	4927      	ldr	r1, [pc, #156]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	600b      	str	r3, [r1, #0]
 80015bc:	e015      	b.n	80015ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015be:	4b26      	ldr	r3, [pc, #152]	@ (8001658 <HAL_RCC_OscConfig+0x270>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c4:	f7ff fc52 	bl	8000e6c <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015cc:	f7ff fc4e 	bl	8000e6c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e180      	b.n	80018e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015de:	4b1d      	ldr	r3, [pc, #116]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d03a      	beq.n	800166c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d019      	beq.n	8001632 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015fe:	4b17      	ldr	r3, [pc, #92]	@ (800165c <HAL_RCC_OscConfig+0x274>)
 8001600:	2201      	movs	r2, #1
 8001602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001604:	f7ff fc32 	bl	8000e6c <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800160c:	f7ff fc2e 	bl	8000e6c <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e160      	b.n	80018e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161e:	4b0d      	ldr	r3, [pc, #52]	@ (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f0      	beq.n	800160c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800162a:	2001      	movs	r0, #1
 800162c:	f000 fa9c 	bl	8001b68 <RCC_Delay>
 8001630:	e01c      	b.n	800166c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001632:	4b0a      	ldr	r3, [pc, #40]	@ (800165c <HAL_RCC_OscConfig+0x274>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001638:	f7ff fc18 	bl	8000e6c <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800163e:	e00f      	b.n	8001660 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001640:	f7ff fc14 	bl	8000e6c <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d908      	bls.n	8001660 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e146      	b.n	80018e0 <HAL_RCC_OscConfig+0x4f8>
 8001652:	bf00      	nop
 8001654:	40021000 	.word	0x40021000
 8001658:	42420000 	.word	0x42420000
 800165c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001660:	4b92      	ldr	r3, [pc, #584]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 8001662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1e9      	bne.n	8001640 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 80a6 	beq.w	80017c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800167e:	4b8b      	ldr	r3, [pc, #556]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10d      	bne.n	80016a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	4b88      	ldr	r3, [pc, #544]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	4a87      	ldr	r2, [pc, #540]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 8001690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001694:	61d3      	str	r3, [r2, #28]
 8001696:	4b85      	ldr	r3, [pc, #532]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016a2:	2301      	movs	r3, #1
 80016a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a6:	4b82      	ldr	r3, [pc, #520]	@ (80018b0 <HAL_RCC_OscConfig+0x4c8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d118      	bne.n	80016e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016b2:	4b7f      	ldr	r3, [pc, #508]	@ (80018b0 <HAL_RCC_OscConfig+0x4c8>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a7e      	ldr	r2, [pc, #504]	@ (80018b0 <HAL_RCC_OscConfig+0x4c8>)
 80016b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016be:	f7ff fbd5 	bl	8000e6c <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c6:	f7ff fbd1 	bl	8000e6c <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b64      	cmp	r3, #100	@ 0x64
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e103      	b.n	80018e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d8:	4b75      	ldr	r3, [pc, #468]	@ (80018b0 <HAL_RCC_OscConfig+0x4c8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0f0      	beq.n	80016c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d106      	bne.n	80016fa <HAL_RCC_OscConfig+0x312>
 80016ec:	4b6f      	ldr	r3, [pc, #444]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4a6e      	ldr	r2, [pc, #440]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6213      	str	r3, [r2, #32]
 80016f8:	e02d      	b.n	8001756 <HAL_RCC_OscConfig+0x36e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0x334>
 8001702:	4b6a      	ldr	r3, [pc, #424]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	4a69      	ldr	r2, [pc, #420]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	6213      	str	r3, [r2, #32]
 800170e:	4b67      	ldr	r3, [pc, #412]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	4a66      	ldr	r2, [pc, #408]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 8001714:	f023 0304 	bic.w	r3, r3, #4
 8001718:	6213      	str	r3, [r2, #32]
 800171a:	e01c      	b.n	8001756 <HAL_RCC_OscConfig+0x36e>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	2b05      	cmp	r3, #5
 8001722:	d10c      	bne.n	800173e <HAL_RCC_OscConfig+0x356>
 8001724:	4b61      	ldr	r3, [pc, #388]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	4a60      	ldr	r2, [pc, #384]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 800172a:	f043 0304 	orr.w	r3, r3, #4
 800172e:	6213      	str	r3, [r2, #32]
 8001730:	4b5e      	ldr	r3, [pc, #376]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	4a5d      	ldr	r2, [pc, #372]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6213      	str	r3, [r2, #32]
 800173c:	e00b      	b.n	8001756 <HAL_RCC_OscConfig+0x36e>
 800173e:	4b5b      	ldr	r3, [pc, #364]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	4a5a      	ldr	r2, [pc, #360]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 8001744:	f023 0301 	bic.w	r3, r3, #1
 8001748:	6213      	str	r3, [r2, #32]
 800174a:	4b58      	ldr	r3, [pc, #352]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	4a57      	ldr	r2, [pc, #348]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 8001750:	f023 0304 	bic.w	r3, r3, #4
 8001754:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d015      	beq.n	800178a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175e:	f7ff fb85 	bl	8000e6c <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001764:	e00a      	b.n	800177c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001766:	f7ff fb81 	bl	8000e6c <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001774:	4293      	cmp	r3, r2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e0b1      	b.n	80018e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177c:	4b4b      	ldr	r3, [pc, #300]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0ee      	beq.n	8001766 <HAL_RCC_OscConfig+0x37e>
 8001788:	e014      	b.n	80017b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178a:	f7ff fb6f 	bl	8000e6c <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001790:	e00a      	b.n	80017a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001792:	f7ff fb6b 	bl	8000e6c <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e09b      	b.n	80018e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a8:	4b40      	ldr	r3, [pc, #256]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1ee      	bne.n	8001792 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017b4:	7dfb      	ldrb	r3, [r7, #23]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d105      	bne.n	80017c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ba:	4b3c      	ldr	r3, [pc, #240]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4a3b      	ldr	r2, [pc, #236]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 8087 	beq.w	80018de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017d0:	4b36      	ldr	r3, [pc, #216]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d061      	beq.n	80018a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d146      	bne.n	8001872 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e4:	4b33      	ldr	r3, [pc, #204]	@ (80018b4 <HAL_RCC_OscConfig+0x4cc>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ea:	f7ff fb3f 	bl	8000e6c <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f2:	f7ff fb3b 	bl	8000e6c <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e06d      	b.n	80018e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001804:	4b29      	ldr	r3, [pc, #164]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1f0      	bne.n	80017f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001818:	d108      	bne.n	800182c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800181a:	4b24      	ldr	r3, [pc, #144]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	4921      	ldr	r1, [pc, #132]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 8001828:	4313      	orrs	r3, r2
 800182a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800182c:	4b1f      	ldr	r3, [pc, #124]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a19      	ldr	r1, [r3, #32]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183c:	430b      	orrs	r3, r1
 800183e:	491b      	ldr	r1, [pc, #108]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001844:	4b1b      	ldr	r3, [pc, #108]	@ (80018b4 <HAL_RCC_OscConfig+0x4cc>)
 8001846:	2201      	movs	r2, #1
 8001848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184a:	f7ff fb0f 	bl	8000e6c <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001852:	f7ff fb0b 	bl	8000e6c <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e03d      	b.n	80018e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001864:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0x46a>
 8001870:	e035      	b.n	80018de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001872:	4b10      	ldr	r3, [pc, #64]	@ (80018b4 <HAL_RCC_OscConfig+0x4cc>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001878:	f7ff faf8 	bl	8000e6c <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001880:	f7ff faf4 	bl	8000e6c <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e026      	b.n	80018e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001892:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <HAL_RCC_OscConfig+0x4c4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x498>
 800189e:	e01e      	b.n	80018de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d107      	bne.n	80018b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e019      	b.n	80018e0 <HAL_RCC_OscConfig+0x4f8>
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40007000 	.word	0x40007000
 80018b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018b8:	4b0b      	ldr	r3, [pc, #44]	@ (80018e8 <HAL_RCC_OscConfig+0x500>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d106      	bne.n	80018da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d001      	beq.n	80018de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40021000 	.word	0x40021000

080018ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e0d0      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001900:	4b6a      	ldr	r3, [pc, #424]	@ (8001aac <HAL_RCC_ClockConfig+0x1c0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d910      	bls.n	8001930 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190e:	4b67      	ldr	r3, [pc, #412]	@ (8001aac <HAL_RCC_ClockConfig+0x1c0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f023 0207 	bic.w	r2, r3, #7
 8001916:	4965      	ldr	r1, [pc, #404]	@ (8001aac <HAL_RCC_ClockConfig+0x1c0>)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	4313      	orrs	r3, r2
 800191c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800191e:	4b63      	ldr	r3, [pc, #396]	@ (8001aac <HAL_RCC_ClockConfig+0x1c0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0b8      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d020      	beq.n	800197e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001948:	4b59      	ldr	r3, [pc, #356]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	4a58      	ldr	r2, [pc, #352]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800194e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001952:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001960:	4b53      	ldr	r3, [pc, #332]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	4a52      	ldr	r2, [pc, #328]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8001966:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800196a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800196c:	4b50      	ldr	r3, [pc, #320]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	494d      	ldr	r1, [pc, #308]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	4313      	orrs	r3, r2
 800197c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d040      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d107      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001992:	4b47      	ldr	r3, [pc, #284]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d115      	bne.n	80019ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e07f      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d107      	bne.n	80019ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019aa:	4b41      	ldr	r3, [pc, #260]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d109      	bne.n	80019ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e073      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ba:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e06b      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ca:	4b39      	ldr	r3, [pc, #228]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f023 0203 	bic.w	r2, r3, #3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	4936      	ldr	r1, [pc, #216]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019dc:	f7ff fa46 	bl	8000e6c <HAL_GetTick>
 80019e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e2:	e00a      	b.n	80019fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e4:	f7ff fa42 	bl	8000e6c <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e053      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fa:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 020c 	and.w	r2, r3, #12
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d1eb      	bne.n	80019e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a0c:	4b27      	ldr	r3, [pc, #156]	@ (8001aac <HAL_RCC_ClockConfig+0x1c0>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d210      	bcs.n	8001a3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1a:	4b24      	ldr	r3, [pc, #144]	@ (8001aac <HAL_RCC_ClockConfig+0x1c0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f023 0207 	bic.w	r2, r3, #7
 8001a22:	4922      	ldr	r1, [pc, #136]	@ (8001aac <HAL_RCC_ClockConfig+0x1c0>)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2a:	4b20      	ldr	r3, [pc, #128]	@ (8001aac <HAL_RCC_ClockConfig+0x1c0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d001      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e032      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d008      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a48:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	4916      	ldr	r1, [pc, #88]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d009      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a66:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	490e      	ldr	r1, [pc, #56]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a7a:	f000 f821 	bl	8001ac0 <HAL_RCC_GetSysClockFreq>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	490a      	ldr	r1, [pc, #40]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8c:	5ccb      	ldrb	r3, [r1, r3]
 8001a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a92:	4a09      	ldr	r2, [pc, #36]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1cc>)
 8001a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a96:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <HAL_RCC_ClockConfig+0x1d0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff f9a4 	bl	8000de8 <HAL_InitTick>

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40022000 	.word	0x40022000
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	08001c9c 	.word	0x08001c9c
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	20000004 	.word	0x20000004

08001ac0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ada:	4b1e      	ldr	r3, [pc, #120]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x94>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d002      	beq.n	8001af0 <HAL_RCC_GetSysClockFreq+0x30>
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d003      	beq.n	8001af6 <HAL_RCC_GetSysClockFreq+0x36>
 8001aee:	e027      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001af0:	4b19      	ldr	r3, [pc, #100]	@ (8001b58 <HAL_RCC_GetSysClockFreq+0x98>)
 8001af2:	613b      	str	r3, [r7, #16]
      break;
 8001af4:	e027      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	0c9b      	lsrs	r3, r3, #18
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	4a17      	ldr	r2, [pc, #92]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b00:	5cd3      	ldrb	r3, [r2, r3]
 8001b02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d010      	beq.n	8001b30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b0e:	4b11      	ldr	r3, [pc, #68]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	0c5b      	lsrs	r3, r3, #17
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	4a11      	ldr	r2, [pc, #68]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b1a:	5cd3      	ldrb	r3, [r2, r3]
 8001b1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a0d      	ldr	r2, [pc, #52]	@ (8001b58 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b22:	fb03 f202 	mul.w	r2, r3, r2
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	e004      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a0c      	ldr	r2, [pc, #48]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b34:	fb02 f303 	mul.w	r3, r2, r3
 8001b38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	613b      	str	r3, [r7, #16]
      break;
 8001b3e:	e002      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b40:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b42:	613b      	str	r3, [r7, #16]
      break;
 8001b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b46:	693b      	ldr	r3, [r7, #16]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	371c      	adds	r7, #28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40021000 	.word	0x40021000
 8001b58:	007a1200 	.word	0x007a1200
 8001b5c:	08001cac 	.word	0x08001cac
 8001b60:	08001cbc 	.word	0x08001cbc
 8001b64:	003d0900 	.word	0x003d0900

08001b68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b70:	4b0a      	ldr	r3, [pc, #40]	@ (8001b9c <RCC_Delay+0x34>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba0 <RCC_Delay+0x38>)
 8001b76:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7a:	0a5b      	lsrs	r3, r3, #9
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	fb02 f303 	mul.w	r3, r2, r3
 8001b82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b84:	bf00      	nop
  }
  while (Delay --);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1e5a      	subs	r2, r3, #1
 8001b8a:	60fa      	str	r2, [r7, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f9      	bne.n	8001b84 <RCC_Delay+0x1c>
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	10624dd3 	.word	0x10624dd3

08001ba4 <memset>:
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4402      	add	r2, r0
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d100      	bne.n	8001bae <memset+0xa>
 8001bac:	4770      	bx	lr
 8001bae:	f803 1b01 	strb.w	r1, [r3], #1
 8001bb2:	e7f9      	b.n	8001ba8 <memset+0x4>

08001bb4 <__libc_init_array>:
 8001bb4:	b570      	push	{r4, r5, r6, lr}
 8001bb6:	2600      	movs	r6, #0
 8001bb8:	4d0c      	ldr	r5, [pc, #48]	@ (8001bec <__libc_init_array+0x38>)
 8001bba:	4c0d      	ldr	r4, [pc, #52]	@ (8001bf0 <__libc_init_array+0x3c>)
 8001bbc:	1b64      	subs	r4, r4, r5
 8001bbe:	10a4      	asrs	r4, r4, #2
 8001bc0:	42a6      	cmp	r6, r4
 8001bc2:	d109      	bne.n	8001bd8 <__libc_init_array+0x24>
 8001bc4:	f000 f81a 	bl	8001bfc <_init>
 8001bc8:	2600      	movs	r6, #0
 8001bca:	4d0a      	ldr	r5, [pc, #40]	@ (8001bf4 <__libc_init_array+0x40>)
 8001bcc:	4c0a      	ldr	r4, [pc, #40]	@ (8001bf8 <__libc_init_array+0x44>)
 8001bce:	1b64      	subs	r4, r4, r5
 8001bd0:	10a4      	asrs	r4, r4, #2
 8001bd2:	42a6      	cmp	r6, r4
 8001bd4:	d105      	bne.n	8001be2 <__libc_init_array+0x2e>
 8001bd6:	bd70      	pop	{r4, r5, r6, pc}
 8001bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bdc:	4798      	blx	r3
 8001bde:	3601      	adds	r6, #1
 8001be0:	e7ee      	b.n	8001bc0 <__libc_init_array+0xc>
 8001be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001be6:	4798      	blx	r3
 8001be8:	3601      	adds	r6, #1
 8001bea:	e7f2      	b.n	8001bd2 <__libc_init_array+0x1e>
 8001bec:	08001cc0 	.word	0x08001cc0
 8001bf0:	08001cc0 	.word	0x08001cc0
 8001bf4:	08001cc0 	.word	0x08001cc0
 8001bf8:	08001cc4 	.word	0x08001cc4

08001bfc <_init>:
 8001bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bfe:	bf00      	nop
 8001c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c02:	bc08      	pop	{r3}
 8001c04:	469e      	mov	lr, r3
 8001c06:	4770      	bx	lr

08001c08 <_fini>:
 8001c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c0a:	bf00      	nop
 8001c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c0e:	bc08      	pop	{r3}
 8001c10:	469e      	mov	lr, r3
 8001c12:	4770      	bx	lr
