
HAL_FREERTOS_002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004688  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08004818  08004818  00014818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004910  08004910  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08004910  08004910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004918  08004918  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004918  08004918  00014918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800491c  0800491c  0001491c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00004260  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200042c0  200042c0  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012ba4  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002aee  00000000  00000000  00032c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001060  00000000  00000000  00035768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cba  00000000  00000000  000367c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022b66  00000000  00000000  00037482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012d58  00000000  00000000  00059fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d36ba  00000000  00000000  0006cd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000491c  00000000  00000000  001403fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00144d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004800 	.word	0x08004800

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004800 	.word	0x08004800

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	4a07      	ldr	r2, [pc, #28]	; (8000598 <vApplicationGetIdleTaskMemory+0x2c>)
 800057c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <vApplicationGetIdleTaskMemory+0x30>)
 8000582:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	2000007c 	.word	0x2000007c
 800059c:	2000011c 	.word	0x2000011c

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b5b0      	push	{r4, r5, r7, lr}
 80005a2:	b08e      	sub	sp, #56	; 0x38
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fadf 	bl	8000b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f833 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f8b9 	bl	8000724 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b2:	f000 f88d 	bl	80006d0 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of FirstTask */
  osThreadDef(FirstTask, Start_FirstTask, osPriorityNormal, 0, 128);
 80005b6:	4b13      	ldr	r3, [pc, #76]	; (8000604 <main+0x64>)
 80005b8:	f107 041c 	add.w	r4, r7, #28
 80005bc:	461d      	mov	r5, r3
 80005be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FirstTaskHandle = osThreadCreate(osThread(FirstTask), NULL);
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f002 f8a2 	bl	800271a <osThreadCreate>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <main+0x68>)
 80005da:	6013      	str	r3, [r2, #0]

  /* definition and creation of SecondTask */
  osThreadDef(SecondTask, StartSecondTask, osPriorityAboveNormal, 0, 128);
 80005dc:	4b0b      	ldr	r3, [pc, #44]	; (800060c <main+0x6c>)
 80005de:	463c      	mov	r4, r7
 80005e0:	461d      	mov	r5, r3
 80005e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SecondTaskHandle = osThreadCreate(osThread(SecondTask), NULL);
 80005ee:	463b      	mov	r3, r7
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 f891 	bl	800271a <osThreadCreate>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a05      	ldr	r2, [pc, #20]	; (8000610 <main+0x70>)
 80005fc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005fe:	f002 f885 	bl	800270c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000602:	e7fe      	b.n	8000602 <main+0x62>
 8000604:	08004824 	.word	0x08004824
 8000608:	20000360 	.word	0x20000360
 800060c:	0800484c 	.word	0x0800484c
 8000610:	20000364 	.word	0x20000364

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f003 fc12 	bl	8003e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <SystemClock_Config+0xb4>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <SystemClock_Config+0xb4>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <SystemClock_Config+0xb4>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <SystemClock_Config+0xb8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a1b      	ldr	r2, [pc, #108]	; (80006cc <SystemClock_Config+0xb8>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <SystemClock_Config+0xb8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2310      	movs	r3, #16
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800067c:	2300      	movs	r3, #0
 800067e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f000 fd2f 	bl	80010e8 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000690:	f000 f8e3 	bl	800085a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 ff92 	bl	80015d8 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006ba:	f000 f8ce 	bl	800085a <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	; 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_USART2_UART_Init+0x50>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_USART2_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_USART2_UART_Init+0x4c>)
 8000708:	f001 fc26 	bl	8001f58 <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000712:	f000 f8a2 	bl	800085a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2000031c 	.word	0x2000031c
 8000720:	40004400 	.word	0x40004400

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_GPIO_Init+0x4c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a0f      	ldr	r2, [pc, #60]	; (8000770 <MX_GPIO_Init+0x4c>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_GPIO_Init+0x4c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_GPIO_Init+0x4c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a08      	ldr	r2, [pc, #32]	; (8000770 <MX_GPIO_Init+0x4c>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_GPIO_Init+0x4c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800

08000774 <Start_FirstTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_FirstTask */
void Start_FirstTask(void const * argument)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(2000);
 800077c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000780:	f002 f817 	bl	80027b2 <osDelay>

    indexFun = indexFun + 1;
 8000784:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <Start_FirstTask+0x7c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3301      	adds	r3, #1
 800078a:	4a19      	ldr	r2, [pc, #100]	; (80007f0 <Start_FirstTask+0x7c>)
 800078c:	6013      	str	r3, [r2, #0]
    sprintf(TxData1,"First Task , index : %d\n\r",indexFun);
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <Start_FirstTask+0x7c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	461a      	mov	r2, r3
 8000794:	4917      	ldr	r1, [pc, #92]	; (80007f4 <Start_FirstTask+0x80>)
 8000796:	4818      	ldr	r0, [pc, #96]	; (80007f8 <Start_FirstTask+0x84>)
 8000798:	f003 fb38 	bl	8003e0c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)&TxData1,sizeof(TxData1), 100);
 800079c:	2364      	movs	r3, #100	; 0x64
 800079e:	2232      	movs	r2, #50	; 0x32
 80007a0:	4915      	ldr	r1, [pc, #84]	; (80007f8 <Start_FirstTask+0x84>)
 80007a2:	4816      	ldr	r0, [pc, #88]	; (80007fc <Start_FirstTask+0x88>)
 80007a4:	f001 fc25 	bl	8001ff2 <HAL_UART_Transmit>

    if(indexFun == 4)
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <Start_FirstTask+0x7c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b04      	cmp	r3, #4
 80007ae:	d105      	bne.n	80007bc <Start_FirstTask+0x48>
    {
    	vTaskSuspend(SecondTaskHandle);
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <Start_FirstTask+0x8c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f002 faa3 	bl	8002d00 <vTaskSuspend>
 80007ba:	e008      	b.n	80007ce <Start_FirstTask+0x5a>

    }
    else if(indexFun == 7)
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <Start_FirstTask+0x7c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b07      	cmp	r3, #7
 80007c2:	d104      	bne.n	80007ce <Start_FirstTask+0x5a>
    {
    	vTaskResume(SecondTaskHandle);
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <Start_FirstTask+0x8c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f002 fb5d 	bl	8002e88 <vTaskResume>

    }

    if(indexFun == 15)
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <Start_FirstTask+0x7c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b0f      	cmp	r3, #15
 80007d4:	d1d2      	bne.n	800077c <Start_FirstTask+0x8>
    {
    	sprintf(TxData1,"Suspend hole scheduler.\n\n\r");
 80007d6:	490b      	ldr	r1, [pc, #44]	; (8000804 <Start_FirstTask+0x90>)
 80007d8:	4807      	ldr	r0, [pc, #28]	; (80007f8 <Start_FirstTask+0x84>)
 80007da:	f003 fb17 	bl	8003e0c <siprintf>
    	HAL_UART_Transmit(&huart2, TxData1,sizeof(TxData1),100);
 80007de:	2364      	movs	r3, #100	; 0x64
 80007e0:	2232      	movs	r2, #50	; 0x32
 80007e2:	4905      	ldr	r1, [pc, #20]	; (80007f8 <Start_FirstTask+0x84>)
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <Start_FirstTask+0x88>)
 80007e6:	f001 fc04 	bl	8001ff2 <HAL_UART_Transmit>
    	vTaskSuspendAll();
 80007ea:	f002 fc15 	bl	8003018 <vTaskSuspendAll>
    osDelay(2000);
 80007ee:	e7c5      	b.n	800077c <Start_FirstTask+0x8>
 80007f0:	20000368 	.word	0x20000368
 80007f4:	08004868 	.word	0x08004868
 80007f8:	2000036c 	.word	0x2000036c
 80007fc:	2000031c 	.word	0x2000031c
 8000800:	20000364 	.word	0x20000364
 8000804:	08004884 	.word	0x08004884

08000808 <StartSecondTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSecondTask */
void StartSecondTask(void const * argument)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSecondTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(2000);
 8000810:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000814:	f001 ffcd 	bl	80027b2 <osDelay>
    sprintf(TxData2,"Second Task , Hello World\n\r");
 8000818:	4905      	ldr	r1, [pc, #20]	; (8000830 <StartSecondTask+0x28>)
 800081a:	4806      	ldr	r0, [pc, #24]	; (8000834 <StartSecondTask+0x2c>)
 800081c:	f003 faf6 	bl	8003e0c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)&TxData2,sizeof(TxData2), 100);
 8000820:	2364      	movs	r3, #100	; 0x64
 8000822:	2232      	movs	r2, #50	; 0x32
 8000824:	4903      	ldr	r1, [pc, #12]	; (8000834 <StartSecondTask+0x2c>)
 8000826:	4804      	ldr	r0, [pc, #16]	; (8000838 <StartSecondTask+0x30>)
 8000828:	f001 fbe3 	bl	8001ff2 <HAL_UART_Transmit>
    osDelay(2000);
 800082c:	e7f0      	b.n	8000810 <StartSecondTask+0x8>
 800082e:	bf00      	nop
 8000830:	080048a0 	.word	0x080048a0
 8000834:	200003a0 	.word	0x200003a0
 8000838:	2000031c 	.word	0x2000031c

0800083c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800084c:	d101      	bne.n	8000852 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800084e:	f000 f9ad 	bl	8000bac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085e:	b672      	cpsid	i
}
 8000860:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000862:	e7fe      	b.n	8000862 <Error_Handler+0x8>

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_MspInit+0x54>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	4a11      	ldr	r2, [pc, #68]	; (80008b8 <HAL_MspInit+0x54>)
 8000874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000878:	6453      	str	r3, [r2, #68]	; 0x44
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_MspInit+0x54>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <HAL_MspInit+0x54>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <HAL_MspInit+0x54>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000894:	6413      	str	r3, [r2, #64]	; 0x40
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_MspInit+0x54>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	210f      	movs	r1, #15
 80008a6:	f06f 0001 	mvn.w	r0, #1
 80008aa:	f000 fa57 	bl	8000d5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a19      	ldr	r2, [pc, #100]	; (8000940 <HAL_UART_MspInit+0x84>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d12b      	bne.n	8000936 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <HAL_UART_MspInit+0x88>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	4a17      	ldr	r2, [pc, #92]	; (8000944 <HAL_UART_MspInit+0x88>)
 80008e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ec:	6413      	str	r3, [r2, #64]	; 0x40
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <HAL_UART_MspInit+0x88>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <HAL_UART_MspInit+0x88>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a10      	ldr	r2, [pc, #64]	; (8000944 <HAL_UART_MspInit+0x88>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <HAL_UART_MspInit+0x88>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000916:	230c      	movs	r3, #12
 8000918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000926:	2307      	movs	r3, #7
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <HAL_UART_MspInit+0x8c>)
 8000932:	f000 fa3d 	bl	8000db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000936:	bf00      	nop
 8000938:	3728      	adds	r7, #40	; 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40004400 	.word	0x40004400
 8000944:	40023800 	.word	0x40023800
 8000948:	40020000 	.word	0x40020000

0800094c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	4b34      	ldr	r3, [pc, #208]	; (8000a34 <HAL_InitTick+0xe8>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	4a33      	ldr	r2, [pc, #204]	; (8000a34 <HAL_InitTick+0xe8>)
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	6413      	str	r3, [r2, #64]	; 0x40
 800096c:	4b31      	ldr	r3, [pc, #196]	; (8000a34 <HAL_InitTick+0xe8>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000978:	f107 0210 	add.w	r2, r7, #16
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f001 f808 	bl	8001998 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000988:	6a3b      	ldr	r3, [r7, #32]
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800098c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800098e:	2b00      	cmp	r3, #0
 8000990:	d103      	bne.n	800099a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000992:	f000 ffd9 	bl	8001948 <HAL_RCC_GetPCLK1Freq>
 8000996:	6378      	str	r0, [r7, #52]	; 0x34
 8000998:	e004      	b.n	80009a4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800099a:	f000 ffd5 	bl	8001948 <HAL_RCC_GetPCLK1Freq>
 800099e:	4603      	mov	r3, r0
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a6:	4a24      	ldr	r2, [pc, #144]	; (8000a38 <HAL_InitTick+0xec>)
 80009a8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ac:	0c9b      	lsrs	r3, r3, #18
 80009ae:	3b01      	subs	r3, #1
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80009b2:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <HAL_InitTick+0xf0>)
 80009b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80009ba:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <HAL_InitTick+0xf0>)
 80009bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009c0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80009c2:	4a1e      	ldr	r2, [pc, #120]	; (8000a3c <HAL_InitTick+0xf0>)
 80009c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80009c8:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <HAL_InitTick+0xf0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ce:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <HAL_InitTick+0xf0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d4:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <HAL_InitTick+0xf0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80009da:	4818      	ldr	r0, [pc, #96]	; (8000a3c <HAL_InitTick+0xf0>)
 80009dc:	f001 f80e 	bl	80019fc <HAL_TIM_Base_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d11b      	bne.n	8000a26 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80009ee:	4813      	ldr	r0, [pc, #76]	; (8000a3c <HAL_InitTick+0xf0>)
 80009f0:	f001 f85e 	bl	8001ab0 <HAL_TIM_Base_Start_IT>
 80009f4:	4603      	mov	r3, r0
 80009f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d111      	bne.n	8000a26 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a02:	201c      	movs	r0, #28
 8000a04:	f000 f9c6 	bl	8000d94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b0f      	cmp	r3, #15
 8000a0c:	d808      	bhi.n	8000a20 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	6879      	ldr	r1, [r7, #4]
 8000a12:	201c      	movs	r0, #28
 8000a14:	f000 f9a2 	bl	8000d5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a18:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <HAL_InitTick+0xf4>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6013      	str	r3, [r2, #0]
 8000a1e:	e002      	b.n	8000a26 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3738      	adds	r7, #56	; 0x38
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	431bde83 	.word	0x431bde83
 8000a3c:	200003d4 	.word	0x200003d4
 8000a40:	20000004 	.word	0x20000004

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler+0x4>

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <MemManage_Handler+0x4>

08000a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <TIM2_IRQHandler+0x10>)
 8000a76:	f001 f88b 	bl	8001b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200003d4 	.word	0x200003d4

08000a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a8c:	4a14      	ldr	r2, [pc, #80]	; (8000ae0 <_sbrk+0x5c>)
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <_sbrk+0x60>)
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d102      	bne.n	8000aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <_sbrk+0x64>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	; (8000aec <_sbrk+0x68>)
 8000aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <_sbrk+0x64>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d207      	bcs.n	8000ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab4:	f003 fa28 	bl	8003f08 <__errno>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	220c      	movs	r2, #12
 8000abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	e009      	b.n	8000ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <_sbrk+0x64>)
 8000ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20020000 	.word	0x20020000
 8000ae4:	00000400 	.word	0x00000400
 8000ae8:	2000041c 	.word	0x2000041c
 8000aec:	200042c0 	.word	0x200042c0

08000af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <SystemInit+0x20>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afa:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <SystemInit+0x20>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b18:	480d      	ldr	r0, [pc, #52]	; (8000b50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b1a:	490e      	ldr	r1, [pc, #56]	; (8000b54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b1c:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b20:	e002      	b.n	8000b28 <LoopCopyDataInit>

08000b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b26:	3304      	adds	r3, #4

08000b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b2c:	d3f9      	bcc.n	8000b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2e:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b30:	4c0b      	ldr	r4, [pc, #44]	; (8000b60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b34:	e001      	b.n	8000b3a <LoopFillZerobss>

08000b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b38:	3204      	adds	r2, #4

08000b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b3c:	d3fb      	bcc.n	8000b36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b3e:	f7ff ffd7 	bl	8000af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b42:	f003 f9e7 	bl	8003f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b46:	f7ff fd2b 	bl	80005a0 <main>
  bx  lr    
 8000b4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b58:	08004920 	.word	0x08004920
  ldr r2, =_sbss
 8000b5c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b60:	200042c0 	.word	0x200042c0

08000b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC_IRQHandler>
	...

08000b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0d      	ldr	r2, [pc, #52]	; (8000ba8 <HAL_Init+0x40>)
 8000b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <HAL_Init+0x40>)
 8000b7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <HAL_Init+0x40>)
 8000b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f8d8 	bl	8000d46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b96:	200f      	movs	r0, #15
 8000b98:	f7ff fed8 	bl	800094c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9c:	f7ff fe62 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023c00 	.word	0x40023c00

08000bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000420 	.word	0x20000420

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000420 	.word	0x20000420

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	db0b      	blt.n	8000c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	f003 021f 	and.w	r2, r3, #31
 8000c68:	4907      	ldr	r1, [pc, #28]	; (8000c88 <__NVIC_EnableIRQ+0x38>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	095b      	lsrs	r3, r3, #5
 8000c70:	2001      	movs	r0, #1
 8000c72:	fa00 f202 	lsl.w	r2, r0, r2
 8000c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000e100 	.word	0xe000e100

08000c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	6039      	str	r1, [r7, #0]
 8000c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	db0a      	blt.n	8000cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	490c      	ldr	r1, [pc, #48]	; (8000cd8 <__NVIC_SetPriority+0x4c>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	0112      	lsls	r2, r2, #4
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	440b      	add	r3, r1
 8000cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb4:	e00a      	b.n	8000ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4908      	ldr	r1, [pc, #32]	; (8000cdc <__NVIC_SetPriority+0x50>)
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	3b04      	subs	r3, #4
 8000cc4:	0112      	lsls	r2, r2, #4
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	440b      	add	r3, r1
 8000cca:	761a      	strb	r2, [r3, #24]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000e100 	.word	0xe000e100
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	; 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f1c3 0307 	rsb	r3, r3, #7
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	bf28      	it	cs
 8000cfe:	2304      	movcs	r3, #4
 8000d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3304      	adds	r3, #4
 8000d06:	2b06      	cmp	r3, #6
 8000d08:	d902      	bls.n	8000d10 <NVIC_EncodePriority+0x30>
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3b03      	subs	r3, #3
 8000d0e:	e000      	b.n	8000d12 <NVIC_EncodePriority+0x32>
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	401a      	ands	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d28:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	43d9      	mvns	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	4313      	orrs	r3, r2
         );
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3724      	adds	r7, #36	; 0x24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ff4c 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6e:	f7ff ff61 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000d72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	68b9      	ldr	r1, [r7, #8]
 8000d78:	6978      	ldr	r0, [r7, #20]
 8000d7a:	f7ff ffb1 	bl	8000ce0 <NVIC_EncodePriority>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d84:	4611      	mov	r1, r2
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ff80 	bl	8000c8c <__NVIC_SetPriority>
}
 8000d8c:	bf00      	nop
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff54 	bl	8000c50 <__NVIC_EnableIRQ>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
 8000dca:	e16b      	b.n	80010a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dcc:	2201      	movs	r2, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	f040 815a 	bne.w	800109e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 0303 	and.w	r3, r3, #3
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d005      	beq.n	8000e02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d130      	bne.n	8000e64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4013      	ands	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	68da      	ldr	r2, [r3, #12]
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e38:	2201      	movs	r2, #1
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	091b      	lsrs	r3, r3, #4
 8000e4e:	f003 0201 	and.w	r2, r3, #1
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d017      	beq.n	8000ea0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d123      	bne.n	8000ef4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	08da      	lsrs	r2, r3, #3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3208      	adds	r2, #8
 8000eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	f003 0307 	and.w	r3, r3, #7
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	220f      	movs	r2, #15
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	691a      	ldr	r2, [r3, #16]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	08da      	lsrs	r2, r3, #3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3208      	adds	r2, #8
 8000eee:	69b9      	ldr	r1, [r7, #24]
 8000ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0203 	and.w	r2, r3, #3
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f000 80b4 	beq.w	800109e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b60      	ldr	r3, [pc, #384]	; (80010bc <HAL_GPIO_Init+0x30c>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	4a5f      	ldr	r2, [pc, #380]	; (80010bc <HAL_GPIO_Init+0x30c>)
 8000f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f44:	6453      	str	r3, [r2, #68]	; 0x44
 8000f46:	4b5d      	ldr	r3, [pc, #372]	; (80010bc <HAL_GPIO_Init+0x30c>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f52:	4a5b      	ldr	r2, [pc, #364]	; (80010c0 <HAL_GPIO_Init+0x310>)
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	089b      	lsrs	r3, r3, #2
 8000f58:	3302      	adds	r3, #2
 8000f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	220f      	movs	r2, #15
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a52      	ldr	r2, [pc, #328]	; (80010c4 <HAL_GPIO_Init+0x314>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d02b      	beq.n	8000fd6 <HAL_GPIO_Init+0x226>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a51      	ldr	r2, [pc, #324]	; (80010c8 <HAL_GPIO_Init+0x318>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d025      	beq.n	8000fd2 <HAL_GPIO_Init+0x222>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a50      	ldr	r2, [pc, #320]	; (80010cc <HAL_GPIO_Init+0x31c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d01f      	beq.n	8000fce <HAL_GPIO_Init+0x21e>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4f      	ldr	r2, [pc, #316]	; (80010d0 <HAL_GPIO_Init+0x320>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d019      	beq.n	8000fca <HAL_GPIO_Init+0x21a>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a4e      	ldr	r2, [pc, #312]	; (80010d4 <HAL_GPIO_Init+0x324>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d013      	beq.n	8000fc6 <HAL_GPIO_Init+0x216>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4d      	ldr	r2, [pc, #308]	; (80010d8 <HAL_GPIO_Init+0x328>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d00d      	beq.n	8000fc2 <HAL_GPIO_Init+0x212>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4c      	ldr	r2, [pc, #304]	; (80010dc <HAL_GPIO_Init+0x32c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d007      	beq.n	8000fbe <HAL_GPIO_Init+0x20e>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4b      	ldr	r2, [pc, #300]	; (80010e0 <HAL_GPIO_Init+0x330>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d101      	bne.n	8000fba <HAL_GPIO_Init+0x20a>
 8000fb6:	2307      	movs	r3, #7
 8000fb8:	e00e      	b.n	8000fd8 <HAL_GPIO_Init+0x228>
 8000fba:	2308      	movs	r3, #8
 8000fbc:	e00c      	b.n	8000fd8 <HAL_GPIO_Init+0x228>
 8000fbe:	2306      	movs	r3, #6
 8000fc0:	e00a      	b.n	8000fd8 <HAL_GPIO_Init+0x228>
 8000fc2:	2305      	movs	r3, #5
 8000fc4:	e008      	b.n	8000fd8 <HAL_GPIO_Init+0x228>
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	e006      	b.n	8000fd8 <HAL_GPIO_Init+0x228>
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e004      	b.n	8000fd8 <HAL_GPIO_Init+0x228>
 8000fce:	2302      	movs	r3, #2
 8000fd0:	e002      	b.n	8000fd8 <HAL_GPIO_Init+0x228>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <HAL_GPIO_Init+0x228>
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	69fa      	ldr	r2, [r7, #28]
 8000fda:	f002 0203 	and.w	r2, r2, #3
 8000fde:	0092      	lsls	r2, r2, #2
 8000fe0:	4093      	lsls	r3, r2
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fe8:	4935      	ldr	r1, [pc, #212]	; (80010c0 <HAL_GPIO_Init+0x310>)
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	089b      	lsrs	r3, r3, #2
 8000fee:	3302      	adds	r3, #2
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ff6:	4b3b      	ldr	r3, [pc, #236]	; (80010e4 <HAL_GPIO_Init+0x334>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800101a:	4a32      	ldr	r2, [pc, #200]	; (80010e4 <HAL_GPIO_Init+0x334>)
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001020:	4b30      	ldr	r3, [pc, #192]	; (80010e4 <HAL_GPIO_Init+0x334>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001044:	4a27      	ldr	r2, [pc, #156]	; (80010e4 <HAL_GPIO_Init+0x334>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800104a:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <HAL_GPIO_Init+0x334>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800106e:	4a1d      	ldr	r2, [pc, #116]	; (80010e4 <HAL_GPIO_Init+0x334>)
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <HAL_GPIO_Init+0x334>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001098:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <HAL_GPIO_Init+0x334>)
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3301      	adds	r3, #1
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	2b0f      	cmp	r3, #15
 80010a8:	f67f ae90 	bls.w	8000dcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40013800 	.word	0x40013800
 80010c4:	40020000 	.word	0x40020000
 80010c8:	40020400 	.word	0x40020400
 80010cc:	40020800 	.word	0x40020800
 80010d0:	40020c00 	.word	0x40020c00
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40021400 	.word	0x40021400
 80010dc:	40021800 	.word	0x40021800
 80010e0:	40021c00 	.word	0x40021c00
 80010e4:	40013c00 	.word	0x40013c00

080010e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e267      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	2b00      	cmp	r3, #0
 8001104:	d075      	beq.n	80011f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001106:	4b88      	ldr	r3, [pc, #544]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 030c 	and.w	r3, r3, #12
 800110e:	2b04      	cmp	r3, #4
 8001110:	d00c      	beq.n	800112c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001112:	4b85      	ldr	r3, [pc, #532]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800111a:	2b08      	cmp	r3, #8
 800111c:	d112      	bne.n	8001144 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111e:	4b82      	ldr	r3, [pc, #520]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800112a:	d10b      	bne.n	8001144 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112c:	4b7e      	ldr	r3, [pc, #504]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d05b      	beq.n	80011f0 <HAL_RCC_OscConfig+0x108>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d157      	bne.n	80011f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e242      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800114c:	d106      	bne.n	800115c <HAL_RCC_OscConfig+0x74>
 800114e:	4b76      	ldr	r3, [pc, #472]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a75      	ldr	r2, [pc, #468]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e01d      	b.n	8001198 <HAL_RCC_OscConfig+0xb0>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001164:	d10c      	bne.n	8001180 <HAL_RCC_OscConfig+0x98>
 8001166:	4b70      	ldr	r3, [pc, #448]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a6f      	ldr	r2, [pc, #444]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 800116c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	4b6d      	ldr	r3, [pc, #436]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a6c      	ldr	r2, [pc, #432]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	e00b      	b.n	8001198 <HAL_RCC_OscConfig+0xb0>
 8001180:	4b69      	ldr	r3, [pc, #420]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a68      	ldr	r2, [pc, #416]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b66      	ldr	r3, [pc, #408]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a65      	ldr	r2, [pc, #404]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d013      	beq.n	80011c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a0:	f7ff fd18 	bl	8000bd4 <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a8:	f7ff fd14 	bl	8000bd4 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b64      	cmp	r3, #100	; 0x64
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e207      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	4b5b      	ldr	r3, [pc, #364]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0f0      	beq.n	80011a8 <HAL_RCC_OscConfig+0xc0>
 80011c6:	e014      	b.n	80011f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c8:	f7ff fd04 	bl	8000bd4 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d0:	f7ff fd00 	bl	8000bd4 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b64      	cmp	r3, #100	; 0x64
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e1f3      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e2:	4b51      	ldr	r3, [pc, #324]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0xe8>
 80011ee:	e000      	b.n	80011f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d063      	beq.n	80012c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011fe:	4b4a      	ldr	r3, [pc, #296]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 030c 	and.w	r3, r3, #12
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00b      	beq.n	8001222 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800120a:	4b47      	ldr	r3, [pc, #284]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001212:	2b08      	cmp	r3, #8
 8001214:	d11c      	bne.n	8001250 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001216:	4b44      	ldr	r3, [pc, #272]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d116      	bne.n	8001250 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001222:	4b41      	ldr	r3, [pc, #260]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d005      	beq.n	800123a <HAL_RCC_OscConfig+0x152>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d001      	beq.n	800123a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e1c7      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123a:	4b3b      	ldr	r3, [pc, #236]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4937      	ldr	r1, [pc, #220]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 800124a:	4313      	orrs	r3, r2
 800124c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124e:	e03a      	b.n	80012c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d020      	beq.n	800129a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001258:	4b34      	ldr	r3, [pc, #208]	; (800132c <HAL_RCC_OscConfig+0x244>)
 800125a:	2201      	movs	r2, #1
 800125c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125e:	f7ff fcb9 	bl	8000bd4 <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001266:	f7ff fcb5 	bl	8000bd4 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e1a8      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001278:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0f0      	beq.n	8001266 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001284:	4b28      	ldr	r3, [pc, #160]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	4925      	ldr	r1, [pc, #148]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 8001294:	4313      	orrs	r3, r2
 8001296:	600b      	str	r3, [r1, #0]
 8001298:	e015      	b.n	80012c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129a:	4b24      	ldr	r3, [pc, #144]	; (800132c <HAL_RCC_OscConfig+0x244>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a0:	f7ff fc98 	bl	8000bd4 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a8:	f7ff fc94 	bl	8000bd4 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e187      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ba:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f0      	bne.n	80012a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d036      	beq.n	8001340 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d016      	beq.n	8001308 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_RCC_OscConfig+0x248>)
 80012dc:	2201      	movs	r2, #1
 80012de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e0:	f7ff fc78 	bl	8000bd4 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e8:	f7ff fc74 	bl	8000bd4 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e167      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <HAL_RCC_OscConfig+0x240>)
 80012fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0x200>
 8001306:	e01b      	b.n	8001340 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <HAL_RCC_OscConfig+0x248>)
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130e:	f7ff fc61 	bl	8000bd4 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001314:	e00e      	b.n	8001334 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001316:	f7ff fc5d 	bl	8000bd4 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d907      	bls.n	8001334 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e150      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
 8001328:	40023800 	.word	0x40023800
 800132c:	42470000 	.word	0x42470000
 8001330:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001334:	4b88      	ldr	r3, [pc, #544]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1ea      	bne.n	8001316 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 8097 	beq.w	800147c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001352:	4b81      	ldr	r3, [pc, #516]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10f      	bne.n	800137e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	4b7d      	ldr	r3, [pc, #500]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a7c      	ldr	r2, [pc, #496]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b7a      	ldr	r3, [pc, #488]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800137a:	2301      	movs	r3, #1
 800137c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137e:	4b77      	ldr	r3, [pc, #476]	; (800155c <HAL_RCC_OscConfig+0x474>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001386:	2b00      	cmp	r3, #0
 8001388:	d118      	bne.n	80013bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800138a:	4b74      	ldr	r3, [pc, #464]	; (800155c <HAL_RCC_OscConfig+0x474>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a73      	ldr	r2, [pc, #460]	; (800155c <HAL_RCC_OscConfig+0x474>)
 8001390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001396:	f7ff fc1d 	bl	8000bd4 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800139e:	f7ff fc19 	bl	8000bd4 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e10c      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b0:	4b6a      	ldr	r3, [pc, #424]	; (800155c <HAL_RCC_OscConfig+0x474>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0f0      	beq.n	800139e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d106      	bne.n	80013d2 <HAL_RCC_OscConfig+0x2ea>
 80013c4:	4b64      	ldr	r3, [pc, #400]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80013c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c8:	4a63      	ldr	r2, [pc, #396]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	6713      	str	r3, [r2, #112]	; 0x70
 80013d0:	e01c      	b.n	800140c <HAL_RCC_OscConfig+0x324>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	2b05      	cmp	r3, #5
 80013d8:	d10c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x30c>
 80013da:	4b5f      	ldr	r3, [pc, #380]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80013dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013de:	4a5e      	ldr	r2, [pc, #376]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	6713      	str	r3, [r2, #112]	; 0x70
 80013e6:	4b5c      	ldr	r3, [pc, #368]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80013e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ea:	4a5b      	ldr	r2, [pc, #364]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6713      	str	r3, [r2, #112]	; 0x70
 80013f2:	e00b      	b.n	800140c <HAL_RCC_OscConfig+0x324>
 80013f4:	4b58      	ldr	r3, [pc, #352]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80013f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f8:	4a57      	ldr	r2, [pc, #348]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80013fa:	f023 0301 	bic.w	r3, r3, #1
 80013fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001400:	4b55      	ldr	r3, [pc, #340]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001404:	4a54      	ldr	r2, [pc, #336]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001406:	f023 0304 	bic.w	r3, r3, #4
 800140a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d015      	beq.n	8001440 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001414:	f7ff fbde 	bl	8000bd4 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800141a:	e00a      	b.n	8001432 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800141c:	f7ff fbda 	bl	8000bd4 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	f241 3288 	movw	r2, #5000	; 0x1388
 800142a:	4293      	cmp	r3, r2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e0cb      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001432:	4b49      	ldr	r3, [pc, #292]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0ee      	beq.n	800141c <HAL_RCC_OscConfig+0x334>
 800143e:	e014      	b.n	800146a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001440:	f7ff fbc8 	bl	8000bd4 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001446:	e00a      	b.n	800145e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001448:	f7ff fbc4 	bl	8000bd4 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	f241 3288 	movw	r2, #5000	; 0x1388
 8001456:	4293      	cmp	r3, r2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e0b5      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800145e:	4b3e      	ldr	r3, [pc, #248]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1ee      	bne.n	8001448 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800146a:	7dfb      	ldrb	r3, [r7, #23]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d105      	bne.n	800147c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001470:	4b39      	ldr	r3, [pc, #228]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	4a38      	ldr	r2, [pc, #224]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001476:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800147a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 80a1 	beq.w	80015c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001486:	4b34      	ldr	r3, [pc, #208]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 030c 	and.w	r3, r3, #12
 800148e:	2b08      	cmp	r3, #8
 8001490:	d05c      	beq.n	800154c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d141      	bne.n	800151e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149a:	4b31      	ldr	r3, [pc, #196]	; (8001560 <HAL_RCC_OscConfig+0x478>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a0:	f7ff fb98 	bl	8000bd4 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a8:	f7ff fb94 	bl	8000bd4 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e087      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ba:	4b27      	ldr	r3, [pc, #156]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69da      	ldr	r2, [r3, #28]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d4:	019b      	lsls	r3, r3, #6
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	085b      	lsrs	r3, r3, #1
 80014de:	3b01      	subs	r3, #1
 80014e0:	041b      	lsls	r3, r3, #16
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e8:	061b      	lsls	r3, r3, #24
 80014ea:	491b      	ldr	r1, [pc, #108]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f0:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <HAL_RCC_OscConfig+0x478>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f6:	f7ff fb6d 	bl	8000bd4 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014fe:	f7ff fb69 	bl	8000bd4 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e05c      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x416>
 800151c:	e054      	b.n	80015c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <HAL_RCC_OscConfig+0x478>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff fb56 	bl	8000bd4 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152c:	f7ff fb52 	bl	8000bd4 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e045      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_RCC_OscConfig+0x470>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f0      	bne.n	800152c <HAL_RCC_OscConfig+0x444>
 800154a:	e03d      	b.n	80015c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d107      	bne.n	8001564 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e038      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
 8001558:	40023800 	.word	0x40023800
 800155c:	40007000 	.word	0x40007000
 8001560:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <HAL_RCC_OscConfig+0x4ec>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d028      	beq.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800157c:	429a      	cmp	r2, r3
 800157e:	d121      	bne.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158a:	429a      	cmp	r2, r3
 800158c:	d11a      	bne.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001594:	4013      	ands	r3, r2
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800159a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800159c:	4293      	cmp	r3, r2
 800159e:	d111      	bne.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015aa:	085b      	lsrs	r3, r3, #1
 80015ac:	3b01      	subs	r3, #1
 80015ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d107      	bne.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e000      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800

080015d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0cc      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015ec:	4b68      	ldr	r3, [pc, #416]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d90c      	bls.n	8001614 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fa:	4b65      	ldr	r3, [pc, #404]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001602:	4b63      	ldr	r3, [pc, #396]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d001      	beq.n	8001614 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e0b8      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d020      	beq.n	8001662 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800162c:	4b59      	ldr	r3, [pc, #356]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	4a58      	ldr	r2, [pc, #352]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001636:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001644:	4b53      	ldr	r3, [pc, #332]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4a52      	ldr	r2, [pc, #328]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800164e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001650:	4b50      	ldr	r3, [pc, #320]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	494d      	ldr	r1, [pc, #308]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	4313      	orrs	r3, r2
 8001660:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d044      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d107      	bne.n	8001686 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001676:	4b47      	ldr	r3, [pc, #284]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d119      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e07f      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b02      	cmp	r3, #2
 800168c:	d003      	beq.n	8001696 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001692:	2b03      	cmp	r3, #3
 8001694:	d107      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001696:	4b3f      	ldr	r3, [pc, #252]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d109      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e06f      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a6:	4b3b      	ldr	r3, [pc, #236]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e067      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016b6:	4b37      	ldr	r3, [pc, #220]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f023 0203 	bic.w	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	4934      	ldr	r1, [pc, #208]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016c8:	f7ff fa84 	bl	8000bd4 <HAL_GetTick>
 80016cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d0:	f7ff fa80 	bl	8000bd4 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e04f      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e6:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 020c 	and.w	r2, r3, #12
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d1eb      	bne.n	80016d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016f8:	4b25      	ldr	r3, [pc, #148]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d20c      	bcs.n	8001720 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001706:	4b22      	ldr	r3, [pc, #136]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800170e:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d001      	beq.n	8001720 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e032      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	d008      	beq.n	800173e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	4916      	ldr	r1, [pc, #88]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	4313      	orrs	r3, r2
 800173c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	d009      	beq.n	800175e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	490e      	ldr	r1, [pc, #56]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	4313      	orrs	r3, r2
 800175c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800175e:	f000 f821 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 8001762:	4602      	mov	r2, r0
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	490a      	ldr	r1, [pc, #40]	; (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 8001770:	5ccb      	ldrb	r3, [r1, r3]
 8001772:	fa22 f303 	lsr.w	r3, r2, r3
 8001776:	4a09      	ldr	r2, [pc, #36]	; (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_RCC_ClockConfig+0x1c8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff f8e4 	bl	800094c <HAL_InitTick>

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023c00 	.word	0x40023c00
 8001794:	40023800 	.word	0x40023800
 8001798:	080048c4 	.word	0x080048c4
 800179c:	20000000 	.word	0x20000000
 80017a0:	20000004 	.word	0x20000004

080017a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017a8:	b090      	sub	sp, #64	; 0x40
 80017aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	637b      	str	r3, [r7, #52]	; 0x34
 80017b0:	2300      	movs	r3, #0
 80017b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017b4:	2300      	movs	r3, #0
 80017b6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017bc:	4b59      	ldr	r3, [pc, #356]	; (8001924 <HAL_RCC_GetSysClockFreq+0x180>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d00d      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0x40>
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	f200 80a1 	bhi.w	8001910 <HAL_RCC_GetSysClockFreq+0x16c>
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <HAL_RCC_GetSysClockFreq+0x34>
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d003      	beq.n	80017de <HAL_RCC_GetSysClockFreq+0x3a>
 80017d6:	e09b      	b.n	8001910 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017d8:	4b53      	ldr	r3, [pc, #332]	; (8001928 <HAL_RCC_GetSysClockFreq+0x184>)
 80017da:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80017dc:	e09b      	b.n	8001916 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017de:	4b53      	ldr	r3, [pc, #332]	; (800192c <HAL_RCC_GetSysClockFreq+0x188>)
 80017e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017e2:	e098      	b.n	8001916 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017e4:	4b4f      	ldr	r3, [pc, #316]	; (8001924 <HAL_RCC_GetSysClockFreq+0x180>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017ec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ee:	4b4d      	ldr	r3, [pc, #308]	; (8001924 <HAL_RCC_GetSysClockFreq+0x180>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d028      	beq.n	800184c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fa:	4b4a      	ldr	r3, [pc, #296]	; (8001924 <HAL_RCC_GetSysClockFreq+0x180>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	099b      	lsrs	r3, r3, #6
 8001800:	2200      	movs	r2, #0
 8001802:	623b      	str	r3, [r7, #32]
 8001804:	627a      	str	r2, [r7, #36]	; 0x24
 8001806:	6a3b      	ldr	r3, [r7, #32]
 8001808:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800180c:	2100      	movs	r1, #0
 800180e:	4b47      	ldr	r3, [pc, #284]	; (800192c <HAL_RCC_GetSysClockFreq+0x188>)
 8001810:	fb03 f201 	mul.w	r2, r3, r1
 8001814:	2300      	movs	r3, #0
 8001816:	fb00 f303 	mul.w	r3, r0, r3
 800181a:	4413      	add	r3, r2
 800181c:	4a43      	ldr	r2, [pc, #268]	; (800192c <HAL_RCC_GetSysClockFreq+0x188>)
 800181e:	fba0 1202 	umull	r1, r2, r0, r2
 8001822:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001824:	460a      	mov	r2, r1
 8001826:	62ba      	str	r2, [r7, #40]	; 0x28
 8001828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800182a:	4413      	add	r3, r2
 800182c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800182e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001830:	2200      	movs	r2, #0
 8001832:	61bb      	str	r3, [r7, #24]
 8001834:	61fa      	str	r2, [r7, #28]
 8001836:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800183a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800183e:	f7fe fd17 	bl	8000270 <__aeabi_uldivmod>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4613      	mov	r3, r2
 8001848:	63fb      	str	r3, [r7, #60]	; 0x3c
 800184a:	e053      	b.n	80018f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800184c:	4b35      	ldr	r3, [pc, #212]	; (8001924 <HAL_RCC_GetSysClockFreq+0x180>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	099b      	lsrs	r3, r3, #6
 8001852:	2200      	movs	r2, #0
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	617a      	str	r2, [r7, #20]
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800185e:	f04f 0b00 	mov.w	fp, #0
 8001862:	4652      	mov	r2, sl
 8001864:	465b      	mov	r3, fp
 8001866:	f04f 0000 	mov.w	r0, #0
 800186a:	f04f 0100 	mov.w	r1, #0
 800186e:	0159      	lsls	r1, r3, #5
 8001870:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001874:	0150      	lsls	r0, r2, #5
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	ebb2 080a 	subs.w	r8, r2, sl
 800187e:	eb63 090b 	sbc.w	r9, r3, fp
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800188e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001892:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001896:	ebb2 0408 	subs.w	r4, r2, r8
 800189a:	eb63 0509 	sbc.w	r5, r3, r9
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	00eb      	lsls	r3, r5, #3
 80018a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018ac:	00e2      	lsls	r2, r4, #3
 80018ae:	4614      	mov	r4, r2
 80018b0:	461d      	mov	r5, r3
 80018b2:	eb14 030a 	adds.w	r3, r4, sl
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	eb45 030b 	adc.w	r3, r5, fp
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	f04f 0300 	mov.w	r3, #0
 80018c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018ca:	4629      	mov	r1, r5
 80018cc:	028b      	lsls	r3, r1, #10
 80018ce:	4621      	mov	r1, r4
 80018d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018d4:	4621      	mov	r1, r4
 80018d6:	028a      	lsls	r2, r1, #10
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018de:	2200      	movs	r2, #0
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	60fa      	str	r2, [r7, #12]
 80018e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018e8:	f7fe fcc2 	bl	8000270 <__aeabi_uldivmod>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4613      	mov	r3, r2
 80018f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_RCC_GetSysClockFreq+0x180>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	0c1b      	lsrs	r3, r3, #16
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	3301      	adds	r3, #1
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001904:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001908:	fbb2 f3f3 	udiv	r3, r2, r3
 800190c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800190e:	e002      	b.n	8001916 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_RCC_GetSysClockFreq+0x184>)
 8001912:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001918:	4618      	mov	r0, r3
 800191a:	3740      	adds	r7, #64	; 0x40
 800191c:	46bd      	mov	sp, r7
 800191e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	00f42400 	.word	0x00f42400
 800192c:	017d7840 	.word	0x017d7840

08001930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_RCC_GetHCLKFreq+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000000 	.word	0x20000000

08001948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800194c:	f7ff fff0 	bl	8001930 <HAL_RCC_GetHCLKFreq>
 8001950:	4602      	mov	r2, r0
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	0a9b      	lsrs	r3, r3, #10
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	4903      	ldr	r1, [pc, #12]	; (800196c <HAL_RCC_GetPCLK1Freq+0x24>)
 800195e:	5ccb      	ldrb	r3, [r1, r3]
 8001960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001964:	4618      	mov	r0, r3
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40023800 	.word	0x40023800
 800196c:	080048d4 	.word	0x080048d4

08001970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001974:	f7ff ffdc 	bl	8001930 <HAL_RCC_GetHCLKFreq>
 8001978:	4602      	mov	r2, r0
 800197a:	4b05      	ldr	r3, [pc, #20]	; (8001990 <HAL_RCC_GetPCLK2Freq+0x20>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	0b5b      	lsrs	r3, r3, #13
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	4903      	ldr	r1, [pc, #12]	; (8001994 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001986:	5ccb      	ldrb	r3, [r1, r3]
 8001988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800198c:	4618      	mov	r0, r3
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40023800 	.word	0x40023800
 8001994:	080048d4 	.word	0x080048d4

08001998 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	220f      	movs	r2, #15
 80019a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_RCC_GetClockConfig+0x5c>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 0203 	and.w	r2, r3, #3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <HAL_RCC_GetClockConfig+0x5c>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <HAL_RCC_GetClockConfig+0x5c>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_RCC_GetClockConfig+0x5c>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	08db      	lsrs	r3, r3, #3
 80019d2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019da:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <HAL_RCC_GetClockConfig+0x60>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0207 	and.w	r2, r3, #7
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	601a      	str	r2, [r3, #0]
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40023c00 	.word	0x40023c00

080019fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e041      	b.n	8001a92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d106      	bne.n	8001a28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f839 	bl	8001a9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3304      	adds	r3, #4
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	f000 f9d8 	bl	8001df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d001      	beq.n	8001ac8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e04e      	b.n	8001b66 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2202      	movs	r2, #2
 8001acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0201 	orr.w	r2, r2, #1
 8001ade:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a23      	ldr	r2, [pc, #140]	; (8001b74 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d022      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af2:	d01d      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a1f      	ldr	r2, [pc, #124]	; (8001b78 <HAL_TIM_Base_Start_IT+0xc8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d018      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a1e      	ldr	r2, [pc, #120]	; (8001b7c <HAL_TIM_Base_Start_IT+0xcc>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d013      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a1c      	ldr	r2, [pc, #112]	; (8001b80 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d00e      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a1b      	ldr	r2, [pc, #108]	; (8001b84 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d009      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a19      	ldr	r2, [pc, #100]	; (8001b88 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d004      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a18      	ldr	r2, [pc, #96]	; (8001b8c <HAL_TIM_Base_Start_IT+0xdc>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d111      	bne.n	8001b54 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b06      	cmp	r3, #6
 8001b40:	d010      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f042 0201 	orr.w	r2, r2, #1
 8001b50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b52:	e007      	b.n	8001b64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40010000 	.word	0x40010000
 8001b78:	40000400 	.word	0x40000400
 8001b7c:	40000800 	.word	0x40000800
 8001b80:	40000c00 	.word	0x40000c00
 8001b84:	40010400 	.word	0x40010400
 8001b88:	40014000 	.word	0x40014000
 8001b8c:	40001800 	.word	0x40001800

08001b90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d122      	bne.n	8001bec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d11b      	bne.n	8001bec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f06f 0202 	mvn.w	r2, #2
 8001bbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f8ee 	bl	8001db4 <HAL_TIM_IC_CaptureCallback>
 8001bd8:	e005      	b.n	8001be6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f8e0 	bl	8001da0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f8f1 	bl	8001dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d122      	bne.n	8001c40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d11b      	bne.n	8001c40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f06f 0204 	mvn.w	r2, #4
 8001c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2202      	movs	r2, #2
 8001c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f8c4 	bl	8001db4 <HAL_TIM_IC_CaptureCallback>
 8001c2c:	e005      	b.n	8001c3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f8b6 	bl	8001da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f8c7 	bl	8001dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d122      	bne.n	8001c94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d11b      	bne.n	8001c94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 0208 	mvn.w	r2, #8
 8001c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2204      	movs	r2, #4
 8001c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f89a 	bl	8001db4 <HAL_TIM_IC_CaptureCallback>
 8001c80:	e005      	b.n	8001c8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f88c 	bl	8001da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f89d 	bl	8001dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	2b10      	cmp	r3, #16
 8001ca0:	d122      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f003 0310 	and.w	r3, r3, #16
 8001cac:	2b10      	cmp	r3, #16
 8001cae:	d11b      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f06f 0210 	mvn.w	r2, #16
 8001cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2208      	movs	r2, #8
 8001cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f870 	bl	8001db4 <HAL_TIM_IC_CaptureCallback>
 8001cd4:	e005      	b.n	8001ce2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f862 	bl	8001da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f873 	bl	8001dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d10e      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d107      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f06f 0201 	mvn.w	r2, #1
 8001d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7fe fd94 	bl	800083c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1e:	2b80      	cmp	r3, #128	; 0x80
 8001d20:	d10e      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2c:	2b80      	cmp	r3, #128	; 0x80
 8001d2e:	d107      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f902 	bl	8001f44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4a:	2b40      	cmp	r3, #64	; 0x40
 8001d4c:	d10e      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d58:	2b40      	cmp	r3, #64	; 0x40
 8001d5a:	d107      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f838 	bl	8001ddc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	f003 0320 	and.w	r3, r3, #32
 8001d76:	2b20      	cmp	r3, #32
 8001d78:	d10e      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0320 	and.w	r3, r3, #32
 8001d84:	2b20      	cmp	r3, #32
 8001d86:	d107      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0220 	mvn.w	r2, #32
 8001d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f8cc 	bl	8001f30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a40      	ldr	r2, [pc, #256]	; (8001f04 <TIM_Base_SetConfig+0x114>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d013      	beq.n	8001e30 <TIM_Base_SetConfig+0x40>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e0e:	d00f      	beq.n	8001e30 <TIM_Base_SetConfig+0x40>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a3d      	ldr	r2, [pc, #244]	; (8001f08 <TIM_Base_SetConfig+0x118>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d00b      	beq.n	8001e30 <TIM_Base_SetConfig+0x40>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a3c      	ldr	r2, [pc, #240]	; (8001f0c <TIM_Base_SetConfig+0x11c>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d007      	beq.n	8001e30 <TIM_Base_SetConfig+0x40>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a3b      	ldr	r2, [pc, #236]	; (8001f10 <TIM_Base_SetConfig+0x120>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d003      	beq.n	8001e30 <TIM_Base_SetConfig+0x40>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a3a      	ldr	r2, [pc, #232]	; (8001f14 <TIM_Base_SetConfig+0x124>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d108      	bne.n	8001e42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a2f      	ldr	r2, [pc, #188]	; (8001f04 <TIM_Base_SetConfig+0x114>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d02b      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e50:	d027      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a2c      	ldr	r2, [pc, #176]	; (8001f08 <TIM_Base_SetConfig+0x118>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d023      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a2b      	ldr	r2, [pc, #172]	; (8001f0c <TIM_Base_SetConfig+0x11c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01f      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a2a      	ldr	r2, [pc, #168]	; (8001f10 <TIM_Base_SetConfig+0x120>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d01b      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a29      	ldr	r2, [pc, #164]	; (8001f14 <TIM_Base_SetConfig+0x124>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d017      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a28      	ldr	r2, [pc, #160]	; (8001f18 <TIM_Base_SetConfig+0x128>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a27      	ldr	r2, [pc, #156]	; (8001f1c <TIM_Base_SetConfig+0x12c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00f      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a26      	ldr	r2, [pc, #152]	; (8001f20 <TIM_Base_SetConfig+0x130>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00b      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a25      	ldr	r2, [pc, #148]	; (8001f24 <TIM_Base_SetConfig+0x134>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d007      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a24      	ldr	r2, [pc, #144]	; (8001f28 <TIM_Base_SetConfig+0x138>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d003      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a23      	ldr	r2, [pc, #140]	; (8001f2c <TIM_Base_SetConfig+0x13c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d108      	bne.n	8001eb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <TIM_Base_SetConfig+0x114>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d003      	beq.n	8001ee8 <TIM_Base_SetConfig+0xf8>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a0c      	ldr	r2, [pc, #48]	; (8001f14 <TIM_Base_SetConfig+0x124>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d103      	bne.n	8001ef0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	615a      	str	r2, [r3, #20]
}
 8001ef6:	bf00      	nop
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40010000 	.word	0x40010000
 8001f08:	40000400 	.word	0x40000400
 8001f0c:	40000800 	.word	0x40000800
 8001f10:	40000c00 	.word	0x40000c00
 8001f14:	40010400 	.word	0x40010400
 8001f18:	40014000 	.word	0x40014000
 8001f1c:	40014400 	.word	0x40014400
 8001f20:	40014800 	.word	0x40014800
 8001f24:	40001800 	.word	0x40001800
 8001f28:	40001c00 	.word	0x40001c00
 8001f2c:	40002000 	.word	0x40002000

08001f30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e03f      	b.n	8001fea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d106      	bne.n	8001f84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7fe fc9c 	bl	80008bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2224      	movs	r2, #36	; 0x24
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f929 	bl	80021f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b08a      	sub	sp, #40	; 0x28
 8001ff6:	af02      	add	r7, sp, #8
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	603b      	str	r3, [r7, #0]
 8001ffe:	4613      	mov	r3, r2
 8002000:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b20      	cmp	r3, #32
 8002010:	d17c      	bne.n	800210c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <HAL_UART_Transmit+0x2c>
 8002018:	88fb      	ldrh	r3, [r7, #6]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e075      	b.n	800210e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <HAL_UART_Transmit+0x3e>
 800202c:	2302      	movs	r3, #2
 800202e:	e06e      	b.n	800210e <HAL_UART_Transmit+0x11c>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2221      	movs	r2, #33	; 0x21
 8002042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002046:	f7fe fdc5 	bl	8000bd4 <HAL_GetTick>
 800204a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	88fa      	ldrh	r2, [r7, #6]
 8002050:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	88fa      	ldrh	r2, [r7, #6]
 8002056:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002060:	d108      	bne.n	8002074 <HAL_UART_Transmit+0x82>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d104      	bne.n	8002074 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	e003      	b.n	800207c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002078:	2300      	movs	r3, #0
 800207a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002084:	e02a      	b.n	80020dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2200      	movs	r2, #0
 800208e:	2180      	movs	r1, #128	; 0x80
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 f840 	bl	8002116 <UART_WaitOnFlagUntilTimeout>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e036      	b.n	800210e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10b      	bne.n	80020be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	3302      	adds	r3, #2
 80020ba:	61bb      	str	r3, [r7, #24]
 80020bc:	e007      	b.n	80020ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	781a      	ldrb	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	3301      	adds	r3, #1
 80020cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1cf      	bne.n	8002086 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	2200      	movs	r2, #0
 80020ee:	2140      	movs	r1, #64	; 0x40
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 f810 	bl	8002116 <UART_WaitOnFlagUntilTimeout>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e006      	b.n	800210e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2220      	movs	r2, #32
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	e000      	b.n	800210e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800210c:	2302      	movs	r3, #2
  }
}
 800210e:	4618      	mov	r0, r3
 8002110:	3720      	adds	r7, #32
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b090      	sub	sp, #64	; 0x40
 800211a:	af00      	add	r7, sp, #0
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	603b      	str	r3, [r7, #0]
 8002122:	4613      	mov	r3, r2
 8002124:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002126:	e050      	b.n	80021ca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800212a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212e:	d04c      	beq.n	80021ca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002132:	2b00      	cmp	r3, #0
 8002134:	d007      	beq.n	8002146 <UART_WaitOnFlagUntilTimeout+0x30>
 8002136:	f7fe fd4d 	bl	8000bd4 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002142:	429a      	cmp	r2, r3
 8002144:	d241      	bcs.n	80021ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	330c      	adds	r3, #12
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800214e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002150:	e853 3f00 	ldrex	r3, [r3]
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800215c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	330c      	adds	r3, #12
 8002164:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002166:	637a      	str	r2, [r7, #52]	; 0x34
 8002168:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800216a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800216c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800216e:	e841 2300 	strex	r3, r2, [r1]
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1e5      	bne.n	8002146 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	3314      	adds	r3, #20
 8002180:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	e853 3f00 	ldrex	r3, [r3]
 8002188:	613b      	str	r3, [r7, #16]
   return(result);
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	f023 0301 	bic.w	r3, r3, #1
 8002190:	63bb      	str	r3, [r7, #56]	; 0x38
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	3314      	adds	r3, #20
 8002198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800219a:	623a      	str	r2, [r7, #32]
 800219c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800219e:	69f9      	ldr	r1, [r7, #28]
 80021a0:	6a3a      	ldr	r2, [r7, #32]
 80021a2:	e841 2300 	strex	r3, r2, [r1]
 80021a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1e5      	bne.n	800217a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2220      	movs	r2, #32
 80021b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2220      	movs	r2, #32
 80021ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e00f      	b.n	80021ea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	4013      	ands	r3, r2
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	bf0c      	ite	eq
 80021da:	2301      	moveq	r3, #1
 80021dc:	2300      	movne	r3, #0
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	461a      	mov	r2, r3
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d09f      	beq.n	8002128 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3740      	adds	r7, #64	; 0x40
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021f8:	b0c0      	sub	sp, #256	; 0x100
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800220c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002210:	68d9      	ldr	r1, [r3, #12]
 8002212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	ea40 0301 	orr.w	r3, r0, r1
 800221c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800221e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	431a      	orrs	r2, r3
 800222c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	431a      	orrs	r2, r3
 8002234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800224c:	f021 010c 	bic.w	r1, r1, #12
 8002250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800225a:	430b      	orrs	r3, r1
 800225c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800225e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800226a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800226e:	6999      	ldr	r1, [r3, #24]
 8002270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	ea40 0301 	orr.w	r3, r0, r1
 800227a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800227c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	4b8f      	ldr	r3, [pc, #572]	; (80024c0 <UART_SetConfig+0x2cc>)
 8002284:	429a      	cmp	r2, r3
 8002286:	d005      	beq.n	8002294 <UART_SetConfig+0xa0>
 8002288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	4b8d      	ldr	r3, [pc, #564]	; (80024c4 <UART_SetConfig+0x2d0>)
 8002290:	429a      	cmp	r2, r3
 8002292:	d104      	bne.n	800229e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002294:	f7ff fb6c 	bl	8001970 <HAL_RCC_GetPCLK2Freq>
 8002298:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800229c:	e003      	b.n	80022a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800229e:	f7ff fb53 	bl	8001948 <HAL_RCC_GetPCLK1Freq>
 80022a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022b0:	f040 810c 	bne.w	80024cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022b8:	2200      	movs	r2, #0
 80022ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80022be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80022c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80022c6:	4622      	mov	r2, r4
 80022c8:	462b      	mov	r3, r5
 80022ca:	1891      	adds	r1, r2, r2
 80022cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80022ce:	415b      	adcs	r3, r3
 80022d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80022d6:	4621      	mov	r1, r4
 80022d8:	eb12 0801 	adds.w	r8, r2, r1
 80022dc:	4629      	mov	r1, r5
 80022de:	eb43 0901 	adc.w	r9, r3, r1
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022f6:	4690      	mov	r8, r2
 80022f8:	4699      	mov	r9, r3
 80022fa:	4623      	mov	r3, r4
 80022fc:	eb18 0303 	adds.w	r3, r8, r3
 8002300:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002304:	462b      	mov	r3, r5
 8002306:	eb49 0303 	adc.w	r3, r9, r3
 800230a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800230e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800231a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800231e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002322:	460b      	mov	r3, r1
 8002324:	18db      	adds	r3, r3, r3
 8002326:	653b      	str	r3, [r7, #80]	; 0x50
 8002328:	4613      	mov	r3, r2
 800232a:	eb42 0303 	adc.w	r3, r2, r3
 800232e:	657b      	str	r3, [r7, #84]	; 0x54
 8002330:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002334:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002338:	f7fd ff9a 	bl	8000270 <__aeabi_uldivmod>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4b61      	ldr	r3, [pc, #388]	; (80024c8 <UART_SetConfig+0x2d4>)
 8002342:	fba3 2302 	umull	r2, r3, r3, r2
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	011c      	lsls	r4, r3, #4
 800234a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800234e:	2200      	movs	r2, #0
 8002350:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002354:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002358:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800235c:	4642      	mov	r2, r8
 800235e:	464b      	mov	r3, r9
 8002360:	1891      	adds	r1, r2, r2
 8002362:	64b9      	str	r1, [r7, #72]	; 0x48
 8002364:	415b      	adcs	r3, r3
 8002366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002368:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800236c:	4641      	mov	r1, r8
 800236e:	eb12 0a01 	adds.w	sl, r2, r1
 8002372:	4649      	mov	r1, r9
 8002374:	eb43 0b01 	adc.w	fp, r3, r1
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002384:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002388:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800238c:	4692      	mov	sl, r2
 800238e:	469b      	mov	fp, r3
 8002390:	4643      	mov	r3, r8
 8002392:	eb1a 0303 	adds.w	r3, sl, r3
 8002396:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800239a:	464b      	mov	r3, r9
 800239c:	eb4b 0303 	adc.w	r3, fp, r3
 80023a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80023a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80023b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80023b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80023b8:	460b      	mov	r3, r1
 80023ba:	18db      	adds	r3, r3, r3
 80023bc:	643b      	str	r3, [r7, #64]	; 0x40
 80023be:	4613      	mov	r3, r2
 80023c0:	eb42 0303 	adc.w	r3, r2, r3
 80023c4:	647b      	str	r3, [r7, #68]	; 0x44
 80023c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80023ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80023ce:	f7fd ff4f 	bl	8000270 <__aeabi_uldivmod>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4611      	mov	r1, r2
 80023d8:	4b3b      	ldr	r3, [pc, #236]	; (80024c8 <UART_SetConfig+0x2d4>)
 80023da:	fba3 2301 	umull	r2, r3, r3, r1
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	2264      	movs	r2, #100	; 0x64
 80023e2:	fb02 f303 	mul.w	r3, r2, r3
 80023e6:	1acb      	subs	r3, r1, r3
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80023ee:	4b36      	ldr	r3, [pc, #216]	; (80024c8 <UART_SetConfig+0x2d4>)
 80023f0:	fba3 2302 	umull	r2, r3, r3, r2
 80023f4:	095b      	lsrs	r3, r3, #5
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80023fc:	441c      	add	r4, r3
 80023fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002402:	2200      	movs	r2, #0
 8002404:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002408:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800240c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002410:	4642      	mov	r2, r8
 8002412:	464b      	mov	r3, r9
 8002414:	1891      	adds	r1, r2, r2
 8002416:	63b9      	str	r1, [r7, #56]	; 0x38
 8002418:	415b      	adcs	r3, r3
 800241a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800241c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002420:	4641      	mov	r1, r8
 8002422:	1851      	adds	r1, r2, r1
 8002424:	6339      	str	r1, [r7, #48]	; 0x30
 8002426:	4649      	mov	r1, r9
 8002428:	414b      	adcs	r3, r1
 800242a:	637b      	str	r3, [r7, #52]	; 0x34
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002438:	4659      	mov	r1, fp
 800243a:	00cb      	lsls	r3, r1, #3
 800243c:	4651      	mov	r1, sl
 800243e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002442:	4651      	mov	r1, sl
 8002444:	00ca      	lsls	r2, r1, #3
 8002446:	4610      	mov	r0, r2
 8002448:	4619      	mov	r1, r3
 800244a:	4603      	mov	r3, r0
 800244c:	4642      	mov	r2, r8
 800244e:	189b      	adds	r3, r3, r2
 8002450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002454:	464b      	mov	r3, r9
 8002456:	460a      	mov	r2, r1
 8002458:	eb42 0303 	adc.w	r3, r2, r3
 800245c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800246c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002470:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002474:	460b      	mov	r3, r1
 8002476:	18db      	adds	r3, r3, r3
 8002478:	62bb      	str	r3, [r7, #40]	; 0x28
 800247a:	4613      	mov	r3, r2
 800247c:	eb42 0303 	adc.w	r3, r2, r3
 8002480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002486:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800248a:	f7fd fef1 	bl	8000270 <__aeabi_uldivmod>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <UART_SetConfig+0x2d4>)
 8002494:	fba3 1302 	umull	r1, r3, r3, r2
 8002498:	095b      	lsrs	r3, r3, #5
 800249a:	2164      	movs	r1, #100	; 0x64
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	3332      	adds	r3, #50	; 0x32
 80024a6:	4a08      	ldr	r2, [pc, #32]	; (80024c8 <UART_SetConfig+0x2d4>)
 80024a8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ac:	095b      	lsrs	r3, r3, #5
 80024ae:	f003 0207 	and.w	r2, r3, #7
 80024b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4422      	add	r2, r4
 80024ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024bc:	e106      	b.n	80026cc <UART_SetConfig+0x4d8>
 80024be:	bf00      	nop
 80024c0:	40011000 	.word	0x40011000
 80024c4:	40011400 	.word	0x40011400
 80024c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024d0:	2200      	movs	r2, #0
 80024d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80024d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80024da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80024de:	4642      	mov	r2, r8
 80024e0:	464b      	mov	r3, r9
 80024e2:	1891      	adds	r1, r2, r2
 80024e4:	6239      	str	r1, [r7, #32]
 80024e6:	415b      	adcs	r3, r3
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024ee:	4641      	mov	r1, r8
 80024f0:	1854      	adds	r4, r2, r1
 80024f2:	4649      	mov	r1, r9
 80024f4:	eb43 0501 	adc.w	r5, r3, r1
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	00eb      	lsls	r3, r5, #3
 8002502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002506:	00e2      	lsls	r2, r4, #3
 8002508:	4614      	mov	r4, r2
 800250a:	461d      	mov	r5, r3
 800250c:	4643      	mov	r3, r8
 800250e:	18e3      	adds	r3, r4, r3
 8002510:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002514:	464b      	mov	r3, r9
 8002516:	eb45 0303 	adc.w	r3, r5, r3
 800251a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800251e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800252a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800253a:	4629      	mov	r1, r5
 800253c:	008b      	lsls	r3, r1, #2
 800253e:	4621      	mov	r1, r4
 8002540:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002544:	4621      	mov	r1, r4
 8002546:	008a      	lsls	r2, r1, #2
 8002548:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800254c:	f7fd fe90 	bl	8000270 <__aeabi_uldivmod>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4b60      	ldr	r3, [pc, #384]	; (80026d8 <UART_SetConfig+0x4e4>)
 8002556:	fba3 2302 	umull	r2, r3, r3, r2
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	011c      	lsls	r4, r3, #4
 800255e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002562:	2200      	movs	r2, #0
 8002564:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002568:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800256c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002570:	4642      	mov	r2, r8
 8002572:	464b      	mov	r3, r9
 8002574:	1891      	adds	r1, r2, r2
 8002576:	61b9      	str	r1, [r7, #24]
 8002578:	415b      	adcs	r3, r3
 800257a:	61fb      	str	r3, [r7, #28]
 800257c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002580:	4641      	mov	r1, r8
 8002582:	1851      	adds	r1, r2, r1
 8002584:	6139      	str	r1, [r7, #16]
 8002586:	4649      	mov	r1, r9
 8002588:	414b      	adcs	r3, r1
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002598:	4659      	mov	r1, fp
 800259a:	00cb      	lsls	r3, r1, #3
 800259c:	4651      	mov	r1, sl
 800259e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025a2:	4651      	mov	r1, sl
 80025a4:	00ca      	lsls	r2, r1, #3
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	4603      	mov	r3, r0
 80025ac:	4642      	mov	r2, r8
 80025ae:	189b      	adds	r3, r3, r2
 80025b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025b4:	464b      	mov	r3, r9
 80025b6:	460a      	mov	r2, r1
 80025b8:	eb42 0303 	adc.w	r3, r2, r3
 80025bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80025ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80025d8:	4649      	mov	r1, r9
 80025da:	008b      	lsls	r3, r1, #2
 80025dc:	4641      	mov	r1, r8
 80025de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025e2:	4641      	mov	r1, r8
 80025e4:	008a      	lsls	r2, r1, #2
 80025e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80025ea:	f7fd fe41 	bl	8000270 <__aeabi_uldivmod>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4611      	mov	r1, r2
 80025f4:	4b38      	ldr	r3, [pc, #224]	; (80026d8 <UART_SetConfig+0x4e4>)
 80025f6:	fba3 2301 	umull	r2, r3, r3, r1
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	2264      	movs	r2, #100	; 0x64
 80025fe:	fb02 f303 	mul.w	r3, r2, r3
 8002602:	1acb      	subs	r3, r1, r3
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	3332      	adds	r3, #50	; 0x32
 8002608:	4a33      	ldr	r2, [pc, #204]	; (80026d8 <UART_SetConfig+0x4e4>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	095b      	lsrs	r3, r3, #5
 8002610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002614:	441c      	add	r4, r3
 8002616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800261a:	2200      	movs	r2, #0
 800261c:	673b      	str	r3, [r7, #112]	; 0x70
 800261e:	677a      	str	r2, [r7, #116]	; 0x74
 8002620:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002624:	4642      	mov	r2, r8
 8002626:	464b      	mov	r3, r9
 8002628:	1891      	adds	r1, r2, r2
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	415b      	adcs	r3, r3
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002634:	4641      	mov	r1, r8
 8002636:	1851      	adds	r1, r2, r1
 8002638:	6039      	str	r1, [r7, #0]
 800263a:	4649      	mov	r1, r9
 800263c:	414b      	adcs	r3, r1
 800263e:	607b      	str	r3, [r7, #4]
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800264c:	4659      	mov	r1, fp
 800264e:	00cb      	lsls	r3, r1, #3
 8002650:	4651      	mov	r1, sl
 8002652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002656:	4651      	mov	r1, sl
 8002658:	00ca      	lsls	r2, r1, #3
 800265a:	4610      	mov	r0, r2
 800265c:	4619      	mov	r1, r3
 800265e:	4603      	mov	r3, r0
 8002660:	4642      	mov	r2, r8
 8002662:	189b      	adds	r3, r3, r2
 8002664:	66bb      	str	r3, [r7, #104]	; 0x68
 8002666:	464b      	mov	r3, r9
 8002668:	460a      	mov	r2, r1
 800266a:	eb42 0303 	adc.w	r3, r2, r3
 800266e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	663b      	str	r3, [r7, #96]	; 0x60
 800267a:	667a      	str	r2, [r7, #100]	; 0x64
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002688:	4649      	mov	r1, r9
 800268a:	008b      	lsls	r3, r1, #2
 800268c:	4641      	mov	r1, r8
 800268e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002692:	4641      	mov	r1, r8
 8002694:	008a      	lsls	r2, r1, #2
 8002696:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800269a:	f7fd fde9 	bl	8000270 <__aeabi_uldivmod>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	4b0d      	ldr	r3, [pc, #52]	; (80026d8 <UART_SetConfig+0x4e4>)
 80026a4:	fba3 1302 	umull	r1, r3, r3, r2
 80026a8:	095b      	lsrs	r3, r3, #5
 80026aa:	2164      	movs	r1, #100	; 0x64
 80026ac:	fb01 f303 	mul.w	r3, r1, r3
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	3332      	adds	r3, #50	; 0x32
 80026b6:	4a08      	ldr	r2, [pc, #32]	; (80026d8 <UART_SetConfig+0x4e4>)
 80026b8:	fba2 2303 	umull	r2, r3, r2, r3
 80026bc:	095b      	lsrs	r3, r3, #5
 80026be:	f003 020f 	and.w	r2, r3, #15
 80026c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4422      	add	r2, r4
 80026ca:	609a      	str	r2, [r3, #8]
}
 80026cc:	bf00      	nop
 80026ce:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80026d2:	46bd      	mov	sp, r7
 80026d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026d8:	51eb851f 	.word	0x51eb851f

080026dc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80026ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ee:	2b84      	cmp	r3, #132	; 0x84
 80026f0:	d005      	beq.n	80026fe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80026f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	4413      	add	r3, r2
 80026fa:	3303      	adds	r3, #3
 80026fc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80026fe:	68fb      	ldr	r3, [r7, #12]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002710:	f000 fc18 	bl	8002f44 <vTaskStartScheduler>
  
  return osOK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	bd80      	pop	{r7, pc}

0800271a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800271a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800271c:	b089      	sub	sp, #36	; 0x24
 800271e:	af04      	add	r7, sp, #16
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d020      	beq.n	800276e <osThreadCreate+0x54>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d01c      	beq.n	800276e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685c      	ldr	r4, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691e      	ldr	r6, [r3, #16]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff ffc8 	bl	80026dc <makeFreeRtosPriority>
 800274c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002756:	9202      	str	r2, [sp, #8]
 8002758:	9301      	str	r3, [sp, #4]
 800275a:	9100      	str	r1, [sp, #0]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	4632      	mov	r2, r6
 8002760:	4629      	mov	r1, r5
 8002762:	4620      	mov	r0, r4
 8002764:	f000 f8ed 	bl	8002942 <xTaskCreateStatic>
 8002768:	4603      	mov	r3, r0
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	e01c      	b.n	80027a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685c      	ldr	r4, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800277a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff ffaa 	bl	80026dc <makeFreeRtosPriority>
 8002788:	4602      	mov	r2, r0
 800278a:	f107 030c 	add.w	r3, r7, #12
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	9200      	str	r2, [sp, #0]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	4632      	mov	r2, r6
 8002796:	4629      	mov	r1, r5
 8002798:	4620      	mov	r0, r4
 800279a:	f000 f92f 	bl	80029fc <xTaskCreate>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d001      	beq.n	80027a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	e000      	b.n	80027aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80027a8:	68fb      	ldr	r3, [r7, #12]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <osDelay+0x16>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	e000      	b.n	80027ca <osDelay+0x18>
 80027c8:	2301      	movs	r3, #1
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fa64 	bl	8002c98 <vTaskDelay>
  
  return osOK;
 80027d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f103 0208 	add.w	r2, r3, #8
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f04f 32ff 	mov.w	r2, #4294967295
 80027f2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f103 0208 	add.w	r2, r3, #8
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f103 0208 	add.w	r2, r3, #8
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	601a      	str	r2, [r3, #0]
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002892:	d103      	bne.n	800289c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	e00c      	b.n	80028b6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3308      	adds	r3, #8
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	e002      	b.n	80028aa <vListInsert+0x2e>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d2f6      	bcs.n	80028a4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	601a      	str	r2, [r3, #0]
}
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028ee:	b480      	push	{r7}
 80028f0:	b085      	sub	sp, #20
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6892      	ldr	r2, [r2, #8]
 8002904:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6852      	ldr	r2, [r2, #4]
 800290e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	429a      	cmp	r2, r3
 8002918:	d103      	bne.n	8002922 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	1e5a      	subs	r2, r3, #1
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002942:	b580      	push	{r7, lr}
 8002944:	b08e      	sub	sp, #56	; 0x38
 8002946:	af04      	add	r7, sp, #16
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10a      	bne.n	800296c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295a:	f383 8811 	msr	BASEPRI, r3
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	f3bf 8f4f 	dsb	sy
 8002966:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002968:	bf00      	nop
 800296a:	e7fe      	b.n	800296a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800296c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10a      	bne.n	8002988 <xTaskCreateStatic+0x46>
	__asm volatile
 8002972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002976:	f383 8811 	msr	BASEPRI, r3
 800297a:	f3bf 8f6f 	isb	sy
 800297e:	f3bf 8f4f 	dsb	sy
 8002982:	61fb      	str	r3, [r7, #28]
}
 8002984:	bf00      	nop
 8002986:	e7fe      	b.n	8002986 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002988:	23a0      	movs	r3, #160	; 0xa0
 800298a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	2ba0      	cmp	r3, #160	; 0xa0
 8002990:	d00a      	beq.n	80029a8 <xTaskCreateStatic+0x66>
	__asm volatile
 8002992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002996:	f383 8811 	msr	BASEPRI, r3
 800299a:	f3bf 8f6f 	isb	sy
 800299e:	f3bf 8f4f 	dsb	sy
 80029a2:	61bb      	str	r3, [r7, #24]
}
 80029a4:	bf00      	nop
 80029a6:	e7fe      	b.n	80029a6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80029a8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80029aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01e      	beq.n	80029ee <xTaskCreateStatic+0xac>
 80029b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d01b      	beq.n	80029ee <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029be:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80029c8:	2300      	movs	r3, #0
 80029ca:	9303      	str	r3, [sp, #12]
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	9302      	str	r3, [sp, #8]
 80029d0:	f107 0314 	add.w	r3, r7, #20
 80029d4:	9301      	str	r3, [sp, #4]
 80029d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f851 	bl	8002a88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029e8:	f000 f8ec 	bl	8002bc4 <prvAddNewTaskToReadyList>
 80029ec:	e001      	b.n	80029f2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80029f2:	697b      	ldr	r3, [r7, #20]
	}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3728      	adds	r7, #40	; 0x28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08c      	sub	sp, #48	; 0x30
 8002a00:	af04      	add	r7, sp, #16
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a0c:	88fb      	ldrh	r3, [r7, #6]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4618      	mov	r0, r3
 8002a12:	f001 f811 	bl	8003a38 <pvPortMalloc>
 8002a16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00e      	beq.n	8002a3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a1e:	20a0      	movs	r0, #160	; 0xa0
 8002a20:	f001 f80a 	bl	8003a38 <pvPortMalloc>
 8002a24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	631a      	str	r2, [r3, #48]	; 0x30
 8002a32:	e005      	b.n	8002a40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a34:	6978      	ldr	r0, [r7, #20]
 8002a36:	f001 f8cb 	bl	8003bd0 <vPortFree>
 8002a3a:	e001      	b.n	8002a40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d017      	beq.n	8002a76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a4e:	88fa      	ldrh	r2, [r7, #6]
 8002a50:	2300      	movs	r3, #0
 8002a52:	9303      	str	r3, [sp, #12]
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	9302      	str	r3, [sp, #8]
 8002a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5a:	9301      	str	r3, [sp, #4]
 8002a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	68b9      	ldr	r1, [r7, #8]
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 f80f 	bl	8002a88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a6a:	69f8      	ldr	r0, [r7, #28]
 8002a6c:	f000 f8aa 	bl	8002bc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a70:	2301      	movs	r3, #1
 8002a72:	61bb      	str	r3, [r7, #24]
 8002a74:	e002      	b.n	8002a7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a76:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a7c:	69bb      	ldr	r3, [r7, #24]
	}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3720      	adds	r7, #32
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
 8002a94:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	f023 0307 	bic.w	r3, r3, #7
 8002aae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002abe:	f383 8811 	msr	BASEPRI, r3
 8002ac2:	f3bf 8f6f 	isb	sy
 8002ac6:	f3bf 8f4f 	dsb	sy
 8002aca:	617b      	str	r3, [r7, #20]
}
 8002acc:	bf00      	nop
 8002ace:	e7fe      	b.n	8002ace <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d01f      	beq.n	8002b16 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	e012      	b.n	8002b02 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	7819      	ldrb	r1, [r3, #0]
 8002ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	4413      	add	r3, r2
 8002aea:	3334      	adds	r3, #52	; 0x34
 8002aec:	460a      	mov	r2, r1
 8002aee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	4413      	add	r3, r2
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d006      	beq.n	8002b0a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	3301      	adds	r3, #1
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	2b0f      	cmp	r3, #15
 8002b06:	d9e9      	bls.n	8002adc <prvInitialiseNewTask+0x54>
 8002b08:	e000      	b.n	8002b0c <prvInitialiseNewTask+0x84>
			{
				break;
 8002b0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b14:	e003      	b.n	8002b1e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b20:	2b06      	cmp	r3, #6
 8002b22:	d901      	bls.n	8002b28 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b24:	2306      	movs	r3, #6
 8002b26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b32:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b36:	2200      	movs	r2, #0
 8002b38:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fe6b 	bl	800281a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b46:	3318      	adds	r3, #24
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff fe66 	bl	800281a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b56:	f1c3 0207 	rsb	r2, r3, #7
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b66:	2200      	movs	r2, #0
 8002b68:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b76:	334c      	adds	r3, #76	; 0x4c
 8002b78:	224c      	movs	r2, #76	; 0x4c
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f001 f965 	bl	8003e4c <memset>
 8002b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b84:	4a0c      	ldr	r2, [pc, #48]	; (8002bb8 <prvInitialiseNewTask+0x130>)
 8002b86:	651a      	str	r2, [r3, #80]	; 0x50
 8002b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8a:	4a0c      	ldr	r2, [pc, #48]	; (8002bbc <prvInitialiseNewTask+0x134>)
 8002b8c:	655a      	str	r2, [r3, #84]	; 0x54
 8002b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b90:	4a0b      	ldr	r2, [pc, #44]	; (8002bc0 <prvInitialiseNewTask+0x138>)
 8002b92:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	68f9      	ldr	r1, [r7, #12]
 8002b98:	69b8      	ldr	r0, [r7, #24]
 8002b9a:	f000 fd41 	bl	8003620 <pxPortInitialiseStack>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bb0:	bf00      	nop
 8002bb2:	3720      	adds	r7, #32
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	20004178 	.word	0x20004178
 8002bbc:	200041e0 	.word	0x200041e0
 8002bc0:	20004248 	.word	0x20004248

08002bc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002bcc:	f000 fe52 	bl	8003874 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002bd0:	4b2a      	ldr	r3, [pc, #168]	; (8002c7c <prvAddNewTaskToReadyList+0xb8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	4a29      	ldr	r2, [pc, #164]	; (8002c7c <prvAddNewTaskToReadyList+0xb8>)
 8002bd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002bda:	4b29      	ldr	r3, [pc, #164]	; (8002c80 <prvAddNewTaskToReadyList+0xbc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002be2:	4a27      	ldr	r2, [pc, #156]	; (8002c80 <prvAddNewTaskToReadyList+0xbc>)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002be8:	4b24      	ldr	r3, [pc, #144]	; (8002c7c <prvAddNewTaskToReadyList+0xb8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d110      	bne.n	8002c12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002bf0:	f000 fbee 	bl	80033d0 <prvInitialiseTaskLists>
 8002bf4:	e00d      	b.n	8002c12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002bf6:	4b23      	ldr	r3, [pc, #140]	; (8002c84 <prvAddNewTaskToReadyList+0xc0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d109      	bne.n	8002c12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bfe:	4b20      	ldr	r3, [pc, #128]	; (8002c80 <prvAddNewTaskToReadyList+0xbc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d802      	bhi.n	8002c12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002c0c:	4a1c      	ldr	r2, [pc, #112]	; (8002c80 <prvAddNewTaskToReadyList+0xbc>)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002c12:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <prvAddNewTaskToReadyList+0xc4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3301      	adds	r3, #1
 8002c18:	4a1b      	ldr	r2, [pc, #108]	; (8002c88 <prvAddNewTaskToReadyList+0xc4>)
 8002c1a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	2201      	movs	r2, #1
 8002c22:	409a      	lsls	r2, r3
 8002c24:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <prvAddNewTaskToReadyList+0xc8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <prvAddNewTaskToReadyList+0xc8>)
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4a15      	ldr	r2, [pc, #84]	; (8002c90 <prvAddNewTaskToReadyList+0xcc>)
 8002c3c:	441a      	add	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3304      	adds	r3, #4
 8002c42:	4619      	mov	r1, r3
 8002c44:	4610      	mov	r0, r2
 8002c46:	f7ff fdf5 	bl	8002834 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c4a:	f000 fe43 	bl	80038d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c4e:	4b0d      	ldr	r3, [pc, #52]	; (8002c84 <prvAddNewTaskToReadyList+0xc0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00e      	beq.n	8002c74 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c56:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <prvAddNewTaskToReadyList+0xbc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d207      	bcs.n	8002c74 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <prvAddNewTaskToReadyList+0xd0>)
 8002c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c74:	bf00      	nop
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20000524 	.word	0x20000524
 8002c80:	20000424 	.word	0x20000424
 8002c84:	20000530 	.word	0x20000530
 8002c88:	20000540 	.word	0x20000540
 8002c8c:	2000052c 	.word	0x2000052c
 8002c90:	20000428 	.word	0x20000428
 8002c94:	e000ed04 	.word	0xe000ed04

08002c98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d017      	beq.n	8002cda <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002caa:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <vTaskDelay+0x60>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <vTaskDelay+0x30>
	__asm volatile
 8002cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb6:	f383 8811 	msr	BASEPRI, r3
 8002cba:	f3bf 8f6f 	isb	sy
 8002cbe:	f3bf 8f4f 	dsb	sy
 8002cc2:	60bb      	str	r3, [r7, #8]
}
 8002cc4:	bf00      	nop
 8002cc6:	e7fe      	b.n	8002cc6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002cc8:	f000 f9a6 	bl	8003018 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002ccc:	2100      	movs	r1, #0
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fc40 	bl	8003554 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002cd4:	f000 f9ae 	bl	8003034 <xTaskResumeAll>
 8002cd8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d107      	bne.n	8002cf0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <vTaskDelay+0x64>)
 8002ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	2000054c 	.word	0x2000054c
 8002cfc:	e000ed04 	.word	0xe000ed04

08002d00 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002d08:	f000 fdb4 	bl	8003874 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d102      	bne.n	8002d18 <vTaskSuspend+0x18>
 8002d12:	4b3c      	ldr	r3, [pc, #240]	; (8002e04 <vTaskSuspend+0x104>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	e000      	b.n	8002d1a <vTaskSuspend+0x1a>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff fde4 	bl	80028ee <uxListRemove>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d115      	bne.n	8002d58 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d30:	4935      	ldr	r1, [pc, #212]	; (8002e08 <vTaskSuspend+0x108>)
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10a      	bne.n	8002d58 <vTaskSuspend+0x58>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	2201      	movs	r2, #1
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43da      	mvns	r2, r3
 8002d4e:	4b2f      	ldr	r3, [pc, #188]	; (8002e0c <vTaskSuspend+0x10c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4013      	ands	r3, r2
 8002d54:	4a2d      	ldr	r2, [pc, #180]	; (8002e0c <vTaskSuspend+0x10c>)
 8002d56:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d004      	beq.n	8002d6a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	3318      	adds	r3, #24
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff fdc2 	bl	80028ee <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4827      	ldr	r0, [pc, #156]	; (8002e10 <vTaskSuspend+0x110>)
 8002d72:	f7ff fd5f 	bl	8002834 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d103      	bne.n	8002d8a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8002d8a:	f000 fda3 	bl	80038d4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8002d8e:	4b21      	ldr	r3, [pc, #132]	; (8002e14 <vTaskSuspend+0x114>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d005      	beq.n	8002da2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8002d96:	f000 fd6d 	bl	8003874 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8002d9a:	f000 fbbb 	bl	8003514 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8002d9e:	f000 fd99 	bl	80038d4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8002da2:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <vTaskSuspend+0x104>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d127      	bne.n	8002dfc <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8002dac:	4b19      	ldr	r3, [pc, #100]	; (8002e14 <vTaskSuspend+0x114>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d017      	beq.n	8002de4 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8002db4:	4b18      	ldr	r3, [pc, #96]	; (8002e18 <vTaskSuspend+0x118>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <vTaskSuspend+0xd2>
	__asm volatile
 8002dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc0:	f383 8811 	msr	BASEPRI, r3
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	60bb      	str	r3, [r7, #8]
}
 8002dce:	bf00      	nop
 8002dd0:	e7fe      	b.n	8002dd0 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8002dd2:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <vTaskSuspend+0x11c>)
 8002dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002de2:	e00b      	b.n	8002dfc <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8002de4:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <vTaskSuspend+0x110>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <vTaskSuspend+0x120>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d103      	bne.n	8002df8 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <vTaskSuspend+0x104>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
	}
 8002df6:	e001      	b.n	8002dfc <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8002df8:	f000 fa70 	bl	80032dc <vTaskSwitchContext>
	}
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20000424 	.word	0x20000424
 8002e08:	20000428 	.word	0x20000428
 8002e0c:	2000052c 	.word	0x2000052c
 8002e10:	20000510 	.word	0x20000510
 8002e14:	20000530 	.word	0x20000530
 8002e18:	2000054c 	.word	0x2000054c
 8002e1c:	e000ed04 	.word	0xe000ed04
 8002e20:	20000524 	.word	0x20000524

08002e24 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10a      	bne.n	8002e50 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8002e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3e:	f383 8811 	msr	BASEPRI, r3
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	f3bf 8f4f 	dsb	sy
 8002e4a:	60fb      	str	r3, [r7, #12]
}
 8002e4c:	bf00      	nop
 8002e4e:	e7fe      	b.n	8002e4e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <prvTaskIsTaskSuspended+0x5c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d10a      	bne.n	8002e70 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5e:	4a09      	ldr	r2, [pc, #36]	; (8002e84 <prvTaskIsTaskSuspended+0x60>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d005      	beq.n	8002e70 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002e70:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002e72:	4618      	mov	r0, r3
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	20000510 	.word	0x20000510
 8002e84:	200004e4 	.word	0x200004e4

08002e88 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10a      	bne.n	8002eb0 <vTaskResume+0x28>
	__asm volatile
 8002e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9e:	f383 8811 	msr	BASEPRI, r3
 8002ea2:	f3bf 8f6f 	isb	sy
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	60bb      	str	r3, [r7, #8]
}
 8002eac:	bf00      	nop
 8002eae:	e7fe      	b.n	8002eae <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8002eb0:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <vTaskResume+0xac>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d037      	beq.n	8002f2a <vTaskResume+0xa2>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d034      	beq.n	8002f2a <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8002ec0:	f000 fcd8 	bl	8003874 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f7ff ffad 	bl	8002e24 <prvTaskIsTaskSuspended>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d02a      	beq.n	8002f26 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fd0a 	bl	80028ee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ede:	2201      	movs	r2, #1
 8002ee0:	409a      	lsls	r2, r3
 8002ee2:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <vTaskResume+0xb0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	4a13      	ldr	r2, [pc, #76]	; (8002f38 <vTaskResume+0xb0>)
 8002eea:	6013      	str	r3, [r2, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4a10      	ldr	r2, [pc, #64]	; (8002f3c <vTaskResume+0xb4>)
 8002efa:	441a      	add	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	3304      	adds	r3, #4
 8002f00:	4619      	mov	r1, r3
 8002f02:	4610      	mov	r0, r2
 8002f04:	f7ff fc96 	bl	8002834 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0c:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <vTaskResume+0xac>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d307      	bcc.n	8002f26 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8002f16:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <vTaskResume+0xb8>)
 8002f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	f3bf 8f4f 	dsb	sy
 8002f22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8002f26:	f000 fcd5 	bl	80038d4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f2a:	bf00      	nop
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000424 	.word	0x20000424
 8002f38:	2000052c 	.word	0x2000052c
 8002f3c:	20000428 	.word	0x20000428
 8002f40:	e000ed04 	.word	0xe000ed04

08002f44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b08a      	sub	sp, #40	; 0x28
 8002f48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f52:	463a      	mov	r2, r7
 8002f54:	1d39      	adds	r1, r7, #4
 8002f56:	f107 0308 	add.w	r3, r7, #8
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fd fb06 	bl	800056c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f60:	6839      	ldr	r1, [r7, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	9202      	str	r2, [sp, #8]
 8002f68:	9301      	str	r3, [sp, #4]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	460a      	mov	r2, r1
 8002f72:	4921      	ldr	r1, [pc, #132]	; (8002ff8 <vTaskStartScheduler+0xb4>)
 8002f74:	4821      	ldr	r0, [pc, #132]	; (8002ffc <vTaskStartScheduler+0xb8>)
 8002f76:	f7ff fce4 	bl	8002942 <xTaskCreateStatic>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4a20      	ldr	r2, [pc, #128]	; (8003000 <vTaskStartScheduler+0xbc>)
 8002f7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f80:	4b1f      	ldr	r3, [pc, #124]	; (8003000 <vTaskStartScheduler+0xbc>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d002      	beq.n	8002f8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	e001      	b.n	8002f92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d11b      	bne.n	8002fd0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	613b      	str	r3, [r7, #16]
}
 8002faa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002fac:	4b15      	ldr	r3, [pc, #84]	; (8003004 <vTaskStartScheduler+0xc0>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	334c      	adds	r3, #76	; 0x4c
 8002fb2:	4a15      	ldr	r2, [pc, #84]	; (8003008 <vTaskStartScheduler+0xc4>)
 8002fb4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002fb6:	4b15      	ldr	r3, [pc, #84]	; (800300c <vTaskStartScheduler+0xc8>)
 8002fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fbc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002fbe:	4b14      	ldr	r3, [pc, #80]	; (8003010 <vTaskStartScheduler+0xcc>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002fc4:	4b13      	ldr	r3, [pc, #76]	; (8003014 <vTaskStartScheduler+0xd0>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002fca:	f000 fbb1 	bl	8003730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002fce:	e00e      	b.n	8002fee <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd6:	d10a      	bne.n	8002fee <vTaskStartScheduler+0xaa>
	__asm volatile
 8002fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fdc:	f383 8811 	msr	BASEPRI, r3
 8002fe0:	f3bf 8f6f 	isb	sy
 8002fe4:	f3bf 8f4f 	dsb	sy
 8002fe8:	60fb      	str	r3, [r7, #12]
}
 8002fea:	bf00      	nop
 8002fec:	e7fe      	b.n	8002fec <vTaskStartScheduler+0xa8>
}
 8002fee:	bf00      	nop
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	080048bc 	.word	0x080048bc
 8002ffc:	080033a1 	.word	0x080033a1
 8003000:	20000548 	.word	0x20000548
 8003004:	20000424 	.word	0x20000424
 8003008:	2000005c 	.word	0x2000005c
 800300c:	20000544 	.word	0x20000544
 8003010:	20000530 	.word	0x20000530
 8003014:	20000528 	.word	0x20000528

08003018 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800301c:	4b04      	ldr	r3, [pc, #16]	; (8003030 <vTaskSuspendAll+0x18>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	3301      	adds	r3, #1
 8003022:	4a03      	ldr	r2, [pc, #12]	; (8003030 <vTaskSuspendAll+0x18>)
 8003024:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003026:	bf00      	nop
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	2000054c 	.word	0x2000054c

08003034 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800303e:	2300      	movs	r3, #0
 8003040:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003042:	4b41      	ldr	r3, [pc, #260]	; (8003148 <xTaskResumeAll+0x114>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10a      	bne.n	8003060 <xTaskResumeAll+0x2c>
	__asm volatile
 800304a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304e:	f383 8811 	msr	BASEPRI, r3
 8003052:	f3bf 8f6f 	isb	sy
 8003056:	f3bf 8f4f 	dsb	sy
 800305a:	603b      	str	r3, [r7, #0]
}
 800305c:	bf00      	nop
 800305e:	e7fe      	b.n	800305e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003060:	f000 fc08 	bl	8003874 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003064:	4b38      	ldr	r3, [pc, #224]	; (8003148 <xTaskResumeAll+0x114>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	3b01      	subs	r3, #1
 800306a:	4a37      	ldr	r2, [pc, #220]	; (8003148 <xTaskResumeAll+0x114>)
 800306c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800306e:	4b36      	ldr	r3, [pc, #216]	; (8003148 <xTaskResumeAll+0x114>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d161      	bne.n	800313a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003076:	4b35      	ldr	r3, [pc, #212]	; (800314c <xTaskResumeAll+0x118>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d05d      	beq.n	800313a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800307e:	e02e      	b.n	80030de <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003080:	4b33      	ldr	r3, [pc, #204]	; (8003150 <xTaskResumeAll+0x11c>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	3318      	adds	r3, #24
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff fc2e 	bl	80028ee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	3304      	adds	r3, #4
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff fc29 	bl	80028ee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	2201      	movs	r2, #1
 80030a2:	409a      	lsls	r2, r3
 80030a4:	4b2b      	ldr	r3, [pc, #172]	; (8003154 <xTaskResumeAll+0x120>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	4a2a      	ldr	r2, [pc, #168]	; (8003154 <xTaskResumeAll+0x120>)
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4a27      	ldr	r2, [pc, #156]	; (8003158 <xTaskResumeAll+0x124>)
 80030bc:	441a      	add	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	3304      	adds	r3, #4
 80030c2:	4619      	mov	r1, r3
 80030c4:	4610      	mov	r0, r2
 80030c6:	f7ff fbb5 	bl	8002834 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ce:	4b23      	ldr	r3, [pc, #140]	; (800315c <xTaskResumeAll+0x128>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d302      	bcc.n	80030de <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80030d8:	4b21      	ldr	r3, [pc, #132]	; (8003160 <xTaskResumeAll+0x12c>)
 80030da:	2201      	movs	r2, #1
 80030dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030de:	4b1c      	ldr	r3, [pc, #112]	; (8003150 <xTaskResumeAll+0x11c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1cc      	bne.n	8003080 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80030ec:	f000 fa12 	bl	8003514 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80030f0:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <xTaskResumeAll+0x130>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d010      	beq.n	800311e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80030fc:	f000 f836 	bl	800316c <xTaskIncrementTick>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003106:	4b16      	ldr	r3, [pc, #88]	; (8003160 <xTaskResumeAll+0x12c>)
 8003108:	2201      	movs	r2, #1
 800310a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3b01      	subs	r3, #1
 8003110:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f1      	bne.n	80030fc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003118:	4b12      	ldr	r3, [pc, #72]	; (8003164 <xTaskResumeAll+0x130>)
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800311e:	4b10      	ldr	r3, [pc, #64]	; (8003160 <xTaskResumeAll+0x12c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d009      	beq.n	800313a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003126:	2301      	movs	r3, #1
 8003128:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800312a:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <xTaskResumeAll+0x134>)
 800312c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	f3bf 8f4f 	dsb	sy
 8003136:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800313a:	f000 fbcb 	bl	80038d4 <vPortExitCritical>

	return xAlreadyYielded;
 800313e:	68bb      	ldr	r3, [r7, #8]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	2000054c 	.word	0x2000054c
 800314c:	20000524 	.word	0x20000524
 8003150:	200004e4 	.word	0x200004e4
 8003154:	2000052c 	.word	0x2000052c
 8003158:	20000428 	.word	0x20000428
 800315c:	20000424 	.word	0x20000424
 8003160:	20000538 	.word	0x20000538
 8003164:	20000534 	.word	0x20000534
 8003168:	e000ed04 	.word	0xe000ed04

0800316c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003176:	4b4e      	ldr	r3, [pc, #312]	; (80032b0 <xTaskIncrementTick+0x144>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	f040 808e 	bne.w	800329c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003180:	4b4c      	ldr	r3, [pc, #304]	; (80032b4 <xTaskIncrementTick+0x148>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	3301      	adds	r3, #1
 8003186:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003188:	4a4a      	ldr	r2, [pc, #296]	; (80032b4 <xTaskIncrementTick+0x148>)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d120      	bne.n	80031d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003194:	4b48      	ldr	r3, [pc, #288]	; (80032b8 <xTaskIncrementTick+0x14c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800319e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a2:	f383 8811 	msr	BASEPRI, r3
 80031a6:	f3bf 8f6f 	isb	sy
 80031aa:	f3bf 8f4f 	dsb	sy
 80031ae:	603b      	str	r3, [r7, #0]
}
 80031b0:	bf00      	nop
 80031b2:	e7fe      	b.n	80031b2 <xTaskIncrementTick+0x46>
 80031b4:	4b40      	ldr	r3, [pc, #256]	; (80032b8 <xTaskIncrementTick+0x14c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	4b40      	ldr	r3, [pc, #256]	; (80032bc <xTaskIncrementTick+0x150>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a3e      	ldr	r2, [pc, #248]	; (80032b8 <xTaskIncrementTick+0x14c>)
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	4a3e      	ldr	r2, [pc, #248]	; (80032bc <xTaskIncrementTick+0x150>)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6013      	str	r3, [r2, #0]
 80031c8:	4b3d      	ldr	r3, [pc, #244]	; (80032c0 <xTaskIncrementTick+0x154>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3301      	adds	r3, #1
 80031ce:	4a3c      	ldr	r2, [pc, #240]	; (80032c0 <xTaskIncrementTick+0x154>)
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	f000 f99f 	bl	8003514 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80031d6:	4b3b      	ldr	r3, [pc, #236]	; (80032c4 <xTaskIncrementTick+0x158>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d348      	bcc.n	8003272 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031e0:	4b35      	ldr	r3, [pc, #212]	; (80032b8 <xTaskIncrementTick+0x14c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d104      	bne.n	80031f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031ea:	4b36      	ldr	r3, [pc, #216]	; (80032c4 <xTaskIncrementTick+0x158>)
 80031ec:	f04f 32ff 	mov.w	r2, #4294967295
 80031f0:	601a      	str	r2, [r3, #0]
					break;
 80031f2:	e03e      	b.n	8003272 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031f4:	4b30      	ldr	r3, [pc, #192]	; (80032b8 <xTaskIncrementTick+0x14c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	429a      	cmp	r2, r3
 800320a:	d203      	bcs.n	8003214 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800320c:	4a2d      	ldr	r2, [pc, #180]	; (80032c4 <xTaskIncrementTick+0x158>)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003212:	e02e      	b.n	8003272 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	3304      	adds	r3, #4
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fb68 	bl	80028ee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003222:	2b00      	cmp	r3, #0
 8003224:	d004      	beq.n	8003230 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	3318      	adds	r3, #24
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff fb5f 	bl	80028ee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003234:	2201      	movs	r2, #1
 8003236:	409a      	lsls	r2, r3
 8003238:	4b23      	ldr	r3, [pc, #140]	; (80032c8 <xTaskIncrementTick+0x15c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4313      	orrs	r3, r2
 800323e:	4a22      	ldr	r2, [pc, #136]	; (80032c8 <xTaskIncrementTick+0x15c>)
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4a1f      	ldr	r2, [pc, #124]	; (80032cc <xTaskIncrementTick+0x160>)
 8003250:	441a      	add	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	3304      	adds	r3, #4
 8003256:	4619      	mov	r1, r3
 8003258:	4610      	mov	r0, r2
 800325a:	f7ff faeb 	bl	8002834 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003262:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <xTaskIncrementTick+0x164>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003268:	429a      	cmp	r2, r3
 800326a:	d3b9      	bcc.n	80031e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800326c:	2301      	movs	r3, #1
 800326e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003270:	e7b6      	b.n	80031e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003272:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <xTaskIncrementTick+0x164>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003278:	4914      	ldr	r1, [pc, #80]	; (80032cc <xTaskIncrementTick+0x160>)
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d901      	bls.n	800328e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800328a:	2301      	movs	r3, #1
 800328c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800328e:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <xTaskIncrementTick+0x168>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d007      	beq.n	80032a6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003296:	2301      	movs	r3, #1
 8003298:	617b      	str	r3, [r7, #20]
 800329a:	e004      	b.n	80032a6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800329c:	4b0e      	ldr	r3, [pc, #56]	; (80032d8 <xTaskIncrementTick+0x16c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3301      	adds	r3, #1
 80032a2:	4a0d      	ldr	r2, [pc, #52]	; (80032d8 <xTaskIncrementTick+0x16c>)
 80032a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80032a6:	697b      	ldr	r3, [r7, #20]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	2000054c 	.word	0x2000054c
 80032b4:	20000528 	.word	0x20000528
 80032b8:	200004dc 	.word	0x200004dc
 80032bc:	200004e0 	.word	0x200004e0
 80032c0:	2000053c 	.word	0x2000053c
 80032c4:	20000544 	.word	0x20000544
 80032c8:	2000052c 	.word	0x2000052c
 80032cc:	20000428 	.word	0x20000428
 80032d0:	20000424 	.word	0x20000424
 80032d4:	20000538 	.word	0x20000538
 80032d8:	20000534 	.word	0x20000534

080032dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032e2:	4b29      	ldr	r3, [pc, #164]	; (8003388 <vTaskSwitchContext+0xac>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80032ea:	4b28      	ldr	r3, [pc, #160]	; (800338c <vTaskSwitchContext+0xb0>)
 80032ec:	2201      	movs	r2, #1
 80032ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80032f0:	e044      	b.n	800337c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80032f2:	4b26      	ldr	r3, [pc, #152]	; (800338c <vTaskSwitchContext+0xb0>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032f8:	4b25      	ldr	r3, [pc, #148]	; (8003390 <vTaskSwitchContext+0xb4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	fab3 f383 	clz	r3, r3
 8003304:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003306:	7afb      	ldrb	r3, [r7, #11]
 8003308:	f1c3 031f 	rsb	r3, r3, #31
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	4921      	ldr	r1, [pc, #132]	; (8003394 <vTaskSwitchContext+0xb8>)
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10a      	bne.n	8003338 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	607b      	str	r3, [r7, #4]
}
 8003334:	bf00      	nop
 8003336:	e7fe      	b.n	8003336 <vTaskSwitchContext+0x5a>
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4a14      	ldr	r2, [pc, #80]	; (8003394 <vTaskSwitchContext+0xb8>)
 8003344:	4413      	add	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	3308      	adds	r3, #8
 800335a:	429a      	cmp	r2, r3
 800335c:	d104      	bne.n	8003368 <vTaskSwitchContext+0x8c>
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	605a      	str	r2, [r3, #4]
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	4a0a      	ldr	r2, [pc, #40]	; (8003398 <vTaskSwitchContext+0xbc>)
 8003370:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003372:	4b09      	ldr	r3, [pc, #36]	; (8003398 <vTaskSwitchContext+0xbc>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	334c      	adds	r3, #76	; 0x4c
 8003378:	4a08      	ldr	r2, [pc, #32]	; (800339c <vTaskSwitchContext+0xc0>)
 800337a:	6013      	str	r3, [r2, #0]
}
 800337c:	bf00      	nop
 800337e:	371c      	adds	r7, #28
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	2000054c 	.word	0x2000054c
 800338c:	20000538 	.word	0x20000538
 8003390:	2000052c 	.word	0x2000052c
 8003394:	20000428 	.word	0x20000428
 8003398:	20000424 	.word	0x20000424
 800339c:	2000005c 	.word	0x2000005c

080033a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80033a8:	f000 f852 	bl	8003450 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80033ac:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <prvIdleTask+0x28>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d9f9      	bls.n	80033a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80033b4:	4b05      	ldr	r3, [pc, #20]	; (80033cc <prvIdleTask+0x2c>)
 80033b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80033c4:	e7f0      	b.n	80033a8 <prvIdleTask+0x8>
 80033c6:	bf00      	nop
 80033c8:	20000428 	.word	0x20000428
 80033cc:	e000ed04 	.word	0xe000ed04

080033d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033d6:	2300      	movs	r3, #0
 80033d8:	607b      	str	r3, [r7, #4]
 80033da:	e00c      	b.n	80033f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4a12      	ldr	r2, [pc, #72]	; (8003430 <prvInitialiseTaskLists+0x60>)
 80033e8:	4413      	add	r3, r2
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff f9f5 	bl	80027da <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3301      	adds	r3, #1
 80033f4:	607b      	str	r3, [r7, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b06      	cmp	r3, #6
 80033fa:	d9ef      	bls.n	80033dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80033fc:	480d      	ldr	r0, [pc, #52]	; (8003434 <prvInitialiseTaskLists+0x64>)
 80033fe:	f7ff f9ec 	bl	80027da <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003402:	480d      	ldr	r0, [pc, #52]	; (8003438 <prvInitialiseTaskLists+0x68>)
 8003404:	f7ff f9e9 	bl	80027da <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003408:	480c      	ldr	r0, [pc, #48]	; (800343c <prvInitialiseTaskLists+0x6c>)
 800340a:	f7ff f9e6 	bl	80027da <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800340e:	480c      	ldr	r0, [pc, #48]	; (8003440 <prvInitialiseTaskLists+0x70>)
 8003410:	f7ff f9e3 	bl	80027da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003414:	480b      	ldr	r0, [pc, #44]	; (8003444 <prvInitialiseTaskLists+0x74>)
 8003416:	f7ff f9e0 	bl	80027da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800341a:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <prvInitialiseTaskLists+0x78>)
 800341c:	4a05      	ldr	r2, [pc, #20]	; (8003434 <prvInitialiseTaskLists+0x64>)
 800341e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003420:	4b0a      	ldr	r3, [pc, #40]	; (800344c <prvInitialiseTaskLists+0x7c>)
 8003422:	4a05      	ldr	r2, [pc, #20]	; (8003438 <prvInitialiseTaskLists+0x68>)
 8003424:	601a      	str	r2, [r3, #0]
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000428 	.word	0x20000428
 8003434:	200004b4 	.word	0x200004b4
 8003438:	200004c8 	.word	0x200004c8
 800343c:	200004e4 	.word	0x200004e4
 8003440:	200004f8 	.word	0x200004f8
 8003444:	20000510 	.word	0x20000510
 8003448:	200004dc 	.word	0x200004dc
 800344c:	200004e0 	.word	0x200004e0

08003450 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003456:	e019      	b.n	800348c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003458:	f000 fa0c 	bl	8003874 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800345c:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <prvCheckTasksWaitingTermination+0x50>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3304      	adds	r3, #4
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff fa40 	bl	80028ee <uxListRemove>
				--uxCurrentNumberOfTasks;
 800346e:	4b0d      	ldr	r3, [pc, #52]	; (80034a4 <prvCheckTasksWaitingTermination+0x54>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3b01      	subs	r3, #1
 8003474:	4a0b      	ldr	r2, [pc, #44]	; (80034a4 <prvCheckTasksWaitingTermination+0x54>)
 8003476:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003478:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <prvCheckTasksWaitingTermination+0x58>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	3b01      	subs	r3, #1
 800347e:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <prvCheckTasksWaitingTermination+0x58>)
 8003480:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003482:	f000 fa27 	bl	80038d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f810 	bl	80034ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800348c:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <prvCheckTasksWaitingTermination+0x58>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1e1      	bne.n	8003458 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003494:	bf00      	nop
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	200004f8 	.word	0x200004f8
 80034a4:	20000524 	.word	0x20000524
 80034a8:	2000050c 	.word	0x2000050c

080034ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	334c      	adds	r3, #76	; 0x4c
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 fccf 	bl	8003e5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d108      	bne.n	80034da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 fb7f 	bl	8003bd0 <vPortFree>
				vPortFree( pxTCB );
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 fb7c 	bl	8003bd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80034d8:	e018      	b.n	800350c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d103      	bne.n	80034ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fb73 	bl	8003bd0 <vPortFree>
	}
 80034ea:	e00f      	b.n	800350c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d00a      	beq.n	800350c <prvDeleteTCB+0x60>
	__asm volatile
 80034f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fa:	f383 8811 	msr	BASEPRI, r3
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f3bf 8f4f 	dsb	sy
 8003506:	60fb      	str	r3, [r7, #12]
}
 8003508:	bf00      	nop
 800350a:	e7fe      	b.n	800350a <prvDeleteTCB+0x5e>
	}
 800350c:	bf00      	nop
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800351a:	4b0c      	ldr	r3, [pc, #48]	; (800354c <prvResetNextTaskUnblockTime+0x38>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d104      	bne.n	800352e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003524:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <prvResetNextTaskUnblockTime+0x3c>)
 8003526:	f04f 32ff 	mov.w	r2, #4294967295
 800352a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800352c:	e008      	b.n	8003540 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800352e:	4b07      	ldr	r3, [pc, #28]	; (800354c <prvResetNextTaskUnblockTime+0x38>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	4a04      	ldr	r2, [pc, #16]	; (8003550 <prvResetNextTaskUnblockTime+0x3c>)
 800353e:	6013      	str	r3, [r2, #0]
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	200004dc 	.word	0x200004dc
 8003550:	20000544 	.word	0x20000544

08003554 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800355e:	4b29      	ldr	r3, [pc, #164]	; (8003604 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003564:	4b28      	ldr	r3, [pc, #160]	; (8003608 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	3304      	adds	r3, #4
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff f9bf 	bl	80028ee <uxListRemove>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10b      	bne.n	800358e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003576:	4b24      	ldr	r3, [pc, #144]	; (8003608 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357c:	2201      	movs	r2, #1
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43da      	mvns	r2, r3
 8003584:	4b21      	ldr	r3, [pc, #132]	; (800360c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4013      	ands	r3, r2
 800358a:	4a20      	ldr	r2, [pc, #128]	; (800360c <prvAddCurrentTaskToDelayedList+0xb8>)
 800358c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003594:	d10a      	bne.n	80035ac <prvAddCurrentTaskToDelayedList+0x58>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d007      	beq.n	80035ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800359c:	4b1a      	ldr	r3, [pc, #104]	; (8003608 <prvAddCurrentTaskToDelayedList+0xb4>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3304      	adds	r3, #4
 80035a2:	4619      	mov	r1, r3
 80035a4:	481a      	ldr	r0, [pc, #104]	; (8003610 <prvAddCurrentTaskToDelayedList+0xbc>)
 80035a6:	f7ff f945 	bl	8002834 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80035aa:	e026      	b.n	80035fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4413      	add	r3, r2
 80035b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035b4:	4b14      	ldr	r3, [pc, #80]	; (8003608 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d209      	bcs.n	80035d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035c4:	4b13      	ldr	r3, [pc, #76]	; (8003614 <prvAddCurrentTaskToDelayedList+0xc0>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3304      	adds	r3, #4
 80035ce:	4619      	mov	r1, r3
 80035d0:	4610      	mov	r0, r2
 80035d2:	f7ff f953 	bl	800287c <vListInsert>
}
 80035d6:	e010      	b.n	80035fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035d8:	4b0f      	ldr	r3, [pc, #60]	; (8003618 <prvAddCurrentTaskToDelayedList+0xc4>)
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3304      	adds	r3, #4
 80035e2:	4619      	mov	r1, r3
 80035e4:	4610      	mov	r0, r2
 80035e6:	f7ff f949 	bl	800287c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80035ea:	4b0c      	ldr	r3, [pc, #48]	; (800361c <prvAddCurrentTaskToDelayedList+0xc8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d202      	bcs.n	80035fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80035f4:	4a09      	ldr	r2, [pc, #36]	; (800361c <prvAddCurrentTaskToDelayedList+0xc8>)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	6013      	str	r3, [r2, #0]
}
 80035fa:	bf00      	nop
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	20000528 	.word	0x20000528
 8003608:	20000424 	.word	0x20000424
 800360c:	2000052c 	.word	0x2000052c
 8003610:	20000510 	.word	0x20000510
 8003614:	200004e0 	.word	0x200004e0
 8003618:	200004dc 	.word	0x200004dc
 800361c:	20000544 	.word	0x20000544

08003620 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	3b04      	subs	r3, #4
 8003630:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003638:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	3b04      	subs	r3, #4
 800363e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f023 0201 	bic.w	r2, r3, #1
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	3b04      	subs	r3, #4
 800364e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003650:	4a0c      	ldr	r2, [pc, #48]	; (8003684 <pxPortInitialiseStack+0x64>)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	3b14      	subs	r3, #20
 800365a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	3b04      	subs	r3, #4
 8003666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f06f 0202 	mvn.w	r2, #2
 800366e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	3b20      	subs	r3, #32
 8003674:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003676:	68fb      	ldr	r3, [r7, #12]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	08003689 	.word	0x08003689

08003688 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800368e:	2300      	movs	r3, #0
 8003690:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003692:	4b12      	ldr	r3, [pc, #72]	; (80036dc <prvTaskExitError+0x54>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369a:	d00a      	beq.n	80036b2 <prvTaskExitError+0x2a>
	__asm volatile
 800369c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a0:	f383 8811 	msr	BASEPRI, r3
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	60fb      	str	r3, [r7, #12]
}
 80036ae:	bf00      	nop
 80036b0:	e7fe      	b.n	80036b0 <prvTaskExitError+0x28>
	__asm volatile
 80036b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b6:	f383 8811 	msr	BASEPRI, r3
 80036ba:	f3bf 8f6f 	isb	sy
 80036be:	f3bf 8f4f 	dsb	sy
 80036c2:	60bb      	str	r3, [r7, #8]
}
 80036c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80036c6:	bf00      	nop
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0fc      	beq.n	80036c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80036ce:	bf00      	nop
 80036d0:	bf00      	nop
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	2000000c 	.word	0x2000000c

080036e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80036e0:	4b07      	ldr	r3, [pc, #28]	; (8003700 <pxCurrentTCBConst2>)
 80036e2:	6819      	ldr	r1, [r3, #0]
 80036e4:	6808      	ldr	r0, [r1, #0]
 80036e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ea:	f380 8809 	msr	PSP, r0
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f04f 0000 	mov.w	r0, #0
 80036f6:	f380 8811 	msr	BASEPRI, r0
 80036fa:	4770      	bx	lr
 80036fc:	f3af 8000 	nop.w

08003700 <pxCurrentTCBConst2>:
 8003700:	20000424 	.word	0x20000424
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003704:	bf00      	nop
 8003706:	bf00      	nop

08003708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003708:	4808      	ldr	r0, [pc, #32]	; (800372c <prvPortStartFirstTask+0x24>)
 800370a:	6800      	ldr	r0, [r0, #0]
 800370c:	6800      	ldr	r0, [r0, #0]
 800370e:	f380 8808 	msr	MSP, r0
 8003712:	f04f 0000 	mov.w	r0, #0
 8003716:	f380 8814 	msr	CONTROL, r0
 800371a:	b662      	cpsie	i
 800371c:	b661      	cpsie	f
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	df00      	svc	0
 8003728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800372a:	bf00      	nop
 800372c:	e000ed08 	.word	0xe000ed08

08003730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003736:	4b46      	ldr	r3, [pc, #280]	; (8003850 <xPortStartScheduler+0x120>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a46      	ldr	r2, [pc, #280]	; (8003854 <xPortStartScheduler+0x124>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d10a      	bne.n	8003756 <xPortStartScheduler+0x26>
	__asm volatile
 8003740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003744:	f383 8811 	msr	BASEPRI, r3
 8003748:	f3bf 8f6f 	isb	sy
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	613b      	str	r3, [r7, #16]
}
 8003752:	bf00      	nop
 8003754:	e7fe      	b.n	8003754 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003756:	4b3e      	ldr	r3, [pc, #248]	; (8003850 <xPortStartScheduler+0x120>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a3f      	ldr	r2, [pc, #252]	; (8003858 <xPortStartScheduler+0x128>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d10a      	bne.n	8003776 <xPortStartScheduler+0x46>
	__asm volatile
 8003760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003764:	f383 8811 	msr	BASEPRI, r3
 8003768:	f3bf 8f6f 	isb	sy
 800376c:	f3bf 8f4f 	dsb	sy
 8003770:	60fb      	str	r3, [r7, #12]
}
 8003772:	bf00      	nop
 8003774:	e7fe      	b.n	8003774 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003776:	4b39      	ldr	r3, [pc, #228]	; (800385c <xPortStartScheduler+0x12c>)
 8003778:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	b2db      	uxtb	r3, r3
 8003780:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	22ff      	movs	r2, #255	; 0xff
 8003786:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	b2db      	uxtb	r3, r3
 8003794:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003798:	b2da      	uxtb	r2, r3
 800379a:	4b31      	ldr	r3, [pc, #196]	; (8003860 <xPortStartScheduler+0x130>)
 800379c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800379e:	4b31      	ldr	r3, [pc, #196]	; (8003864 <xPortStartScheduler+0x134>)
 80037a0:	2207      	movs	r2, #7
 80037a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037a4:	e009      	b.n	80037ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80037a6:	4b2f      	ldr	r3, [pc, #188]	; (8003864 <xPortStartScheduler+0x134>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	4a2d      	ldr	r2, [pc, #180]	; (8003864 <xPortStartScheduler+0x134>)
 80037ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80037b0:	78fb      	ldrb	r3, [r7, #3]
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c2:	2b80      	cmp	r3, #128	; 0x80
 80037c4:	d0ef      	beq.n	80037a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80037c6:	4b27      	ldr	r3, [pc, #156]	; (8003864 <xPortStartScheduler+0x134>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f1c3 0307 	rsb	r3, r3, #7
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d00a      	beq.n	80037e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80037d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	60bb      	str	r3, [r7, #8]
}
 80037e4:	bf00      	nop
 80037e6:	e7fe      	b.n	80037e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80037e8:	4b1e      	ldr	r3, [pc, #120]	; (8003864 <xPortStartScheduler+0x134>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	4a1d      	ldr	r2, [pc, #116]	; (8003864 <xPortStartScheduler+0x134>)
 80037f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80037f2:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <xPortStartScheduler+0x134>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037fa:	4a1a      	ldr	r2, [pc, #104]	; (8003864 <xPortStartScheduler+0x134>)
 80037fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	b2da      	uxtb	r2, r3
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003806:	4b18      	ldr	r3, [pc, #96]	; (8003868 <xPortStartScheduler+0x138>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a17      	ldr	r2, [pc, #92]	; (8003868 <xPortStartScheduler+0x138>)
 800380c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003810:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003812:	4b15      	ldr	r3, [pc, #84]	; (8003868 <xPortStartScheduler+0x138>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a14      	ldr	r2, [pc, #80]	; (8003868 <xPortStartScheduler+0x138>)
 8003818:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800381c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800381e:	f000 f8dd 	bl	80039dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003822:	4b12      	ldr	r3, [pc, #72]	; (800386c <xPortStartScheduler+0x13c>)
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003828:	f000 f8fc 	bl	8003a24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800382c:	4b10      	ldr	r3, [pc, #64]	; (8003870 <xPortStartScheduler+0x140>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a0f      	ldr	r2, [pc, #60]	; (8003870 <xPortStartScheduler+0x140>)
 8003832:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003836:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003838:	f7ff ff66 	bl	8003708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800383c:	f7ff fd4e 	bl	80032dc <vTaskSwitchContext>
	prvTaskExitError();
 8003840:	f7ff ff22 	bl	8003688 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	e000ed00 	.word	0xe000ed00
 8003854:	410fc271 	.word	0x410fc271
 8003858:	410fc270 	.word	0x410fc270
 800385c:	e000e400 	.word	0xe000e400
 8003860:	20000550 	.word	0x20000550
 8003864:	20000554 	.word	0x20000554
 8003868:	e000ed20 	.word	0xe000ed20
 800386c:	2000000c 	.word	0x2000000c
 8003870:	e000ef34 	.word	0xe000ef34

08003874 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
	__asm volatile
 800387a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387e:	f383 8811 	msr	BASEPRI, r3
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	607b      	str	r3, [r7, #4]
}
 800388c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800388e:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <vPortEnterCritical+0x58>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3301      	adds	r3, #1
 8003894:	4a0d      	ldr	r2, [pc, #52]	; (80038cc <vPortEnterCritical+0x58>)
 8003896:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003898:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <vPortEnterCritical+0x58>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d10f      	bne.n	80038c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80038a0:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <vPortEnterCritical+0x5c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80038aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ae:	f383 8811 	msr	BASEPRI, r3
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	603b      	str	r3, [r7, #0]
}
 80038bc:	bf00      	nop
 80038be:	e7fe      	b.n	80038be <vPortEnterCritical+0x4a>
	}
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	2000000c 	.word	0x2000000c
 80038d0:	e000ed04 	.word	0xe000ed04

080038d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80038da:	4b12      	ldr	r3, [pc, #72]	; (8003924 <vPortExitCritical+0x50>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10a      	bne.n	80038f8 <vPortExitCritical+0x24>
	__asm volatile
 80038e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e6:	f383 8811 	msr	BASEPRI, r3
 80038ea:	f3bf 8f6f 	isb	sy
 80038ee:	f3bf 8f4f 	dsb	sy
 80038f2:	607b      	str	r3, [r7, #4]
}
 80038f4:	bf00      	nop
 80038f6:	e7fe      	b.n	80038f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80038f8:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <vPortExitCritical+0x50>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	4a09      	ldr	r2, [pc, #36]	; (8003924 <vPortExitCritical+0x50>)
 8003900:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003902:	4b08      	ldr	r3, [pc, #32]	; (8003924 <vPortExitCritical+0x50>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d105      	bne.n	8003916 <vPortExitCritical+0x42>
 800390a:	2300      	movs	r3, #0
 800390c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003914:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	2000000c 	.word	0x2000000c
	...

08003930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003930:	f3ef 8009 	mrs	r0, PSP
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	4b15      	ldr	r3, [pc, #84]	; (8003990 <pxCurrentTCBConst>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	f01e 0f10 	tst.w	lr, #16
 8003940:	bf08      	it	eq
 8003942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800394a:	6010      	str	r0, [r2, #0]
 800394c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003950:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003954:	f380 8811 	msr	BASEPRI, r0
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	f3bf 8f6f 	isb	sy
 8003960:	f7ff fcbc 	bl	80032dc <vTaskSwitchContext>
 8003964:	f04f 0000 	mov.w	r0, #0
 8003968:	f380 8811 	msr	BASEPRI, r0
 800396c:	bc09      	pop	{r0, r3}
 800396e:	6819      	ldr	r1, [r3, #0]
 8003970:	6808      	ldr	r0, [r1, #0]
 8003972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003976:	f01e 0f10 	tst.w	lr, #16
 800397a:	bf08      	it	eq
 800397c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003980:	f380 8809 	msr	PSP, r0
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	f3af 8000 	nop.w

08003990 <pxCurrentTCBConst>:
 8003990:	20000424 	.word	0x20000424
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003994:	bf00      	nop
 8003996:	bf00      	nop

08003998 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
	__asm volatile
 800399e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a2:	f383 8811 	msr	BASEPRI, r3
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	607b      	str	r3, [r7, #4]
}
 80039b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80039b2:	f7ff fbdb 	bl	800316c <xTaskIncrementTick>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80039bc:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <SysTick_Handler+0x40>)
 80039be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	2300      	movs	r3, #0
 80039c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	f383 8811 	msr	BASEPRI, r3
}
 80039ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80039d0:	bf00      	nop
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	e000ed04 	.word	0xe000ed04

080039dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <vPortSetupTimerInterrupt+0x34>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80039e6:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <vPortSetupTimerInterrupt+0x38>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80039ec:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <vPortSetupTimerInterrupt+0x3c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a0a      	ldr	r2, [pc, #40]	; (8003a1c <vPortSetupTimerInterrupt+0x40>)
 80039f2:	fba2 2303 	umull	r2, r3, r2, r3
 80039f6:	099b      	lsrs	r3, r3, #6
 80039f8:	4a09      	ldr	r2, [pc, #36]	; (8003a20 <vPortSetupTimerInterrupt+0x44>)
 80039fa:	3b01      	subs	r3, #1
 80039fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80039fe:	4b04      	ldr	r3, [pc, #16]	; (8003a10 <vPortSetupTimerInterrupt+0x34>)
 8003a00:	2207      	movs	r2, #7
 8003a02:	601a      	str	r2, [r3, #0]
}
 8003a04:	bf00      	nop
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	e000e010 	.word	0xe000e010
 8003a14:	e000e018 	.word	0xe000e018
 8003a18:	20000000 	.word	0x20000000
 8003a1c:	10624dd3 	.word	0x10624dd3
 8003a20:	e000e014 	.word	0xe000e014

08003a24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003a24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003a34 <vPortEnableVFP+0x10>
 8003a28:	6801      	ldr	r1, [r0, #0]
 8003a2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003a2e:	6001      	str	r1, [r0, #0]
 8003a30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003a32:	bf00      	nop
 8003a34:	e000ed88 	.word	0xe000ed88

08003a38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08a      	sub	sp, #40	; 0x28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003a44:	f7ff fae8 	bl	8003018 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003a48:	4b5b      	ldr	r3, [pc, #364]	; (8003bb8 <pvPortMalloc+0x180>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003a50:	f000 f920 	bl	8003c94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003a54:	4b59      	ldr	r3, [pc, #356]	; (8003bbc <pvPortMalloc+0x184>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f040 8093 	bne.w	8003b88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d01d      	beq.n	8003aa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003a68:	2208      	movs	r2, #8
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d014      	beq.n	8003aa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f023 0307 	bic.w	r3, r3, #7
 8003a80:	3308      	adds	r3, #8
 8003a82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <pvPortMalloc+0x6c>
	__asm volatile
 8003a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a92:	f383 8811 	msr	BASEPRI, r3
 8003a96:	f3bf 8f6f 	isb	sy
 8003a9a:	f3bf 8f4f 	dsb	sy
 8003a9e:	617b      	str	r3, [r7, #20]
}
 8003aa0:	bf00      	nop
 8003aa2:	e7fe      	b.n	8003aa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d06e      	beq.n	8003b88 <pvPortMalloc+0x150>
 8003aaa:	4b45      	ldr	r3, [pc, #276]	; (8003bc0 <pvPortMalloc+0x188>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d869      	bhi.n	8003b88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003ab4:	4b43      	ldr	r3, [pc, #268]	; (8003bc4 <pvPortMalloc+0x18c>)
 8003ab6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003ab8:	4b42      	ldr	r3, [pc, #264]	; (8003bc4 <pvPortMalloc+0x18c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003abe:	e004      	b.n	8003aca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d903      	bls.n	8003adc <pvPortMalloc+0xa4>
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1f1      	bne.n	8003ac0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003adc:	4b36      	ldr	r3, [pc, #216]	; (8003bb8 <pvPortMalloc+0x180>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d050      	beq.n	8003b88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2208      	movs	r2, #8
 8003aec:	4413      	add	r3, r2
 8003aee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	1ad2      	subs	r2, r2, r3
 8003b00:	2308      	movs	r3, #8
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d91f      	bls.n	8003b48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <pvPortMalloc+0xf8>
	__asm volatile
 8003b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1e:	f383 8811 	msr	BASEPRI, r3
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	613b      	str	r3, [r7, #16]
}
 8003b2c:	bf00      	nop
 8003b2e:	e7fe      	b.n	8003b2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	1ad2      	subs	r2, r2, r3
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003b42:	69b8      	ldr	r0, [r7, #24]
 8003b44:	f000 f908 	bl	8003d58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b48:	4b1d      	ldr	r3, [pc, #116]	; (8003bc0 <pvPortMalloc+0x188>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	4a1b      	ldr	r2, [pc, #108]	; (8003bc0 <pvPortMalloc+0x188>)
 8003b54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b56:	4b1a      	ldr	r3, [pc, #104]	; (8003bc0 <pvPortMalloc+0x188>)
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	4b1b      	ldr	r3, [pc, #108]	; (8003bc8 <pvPortMalloc+0x190>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d203      	bcs.n	8003b6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b62:	4b17      	ldr	r3, [pc, #92]	; (8003bc0 <pvPortMalloc+0x188>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a18      	ldr	r2, [pc, #96]	; (8003bc8 <pvPortMalloc+0x190>)
 8003b68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	4b13      	ldr	r3, [pc, #76]	; (8003bbc <pvPortMalloc+0x184>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003b7e:	4b13      	ldr	r3, [pc, #76]	; (8003bcc <pvPortMalloc+0x194>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3301      	adds	r3, #1
 8003b84:	4a11      	ldr	r2, [pc, #68]	; (8003bcc <pvPortMalloc+0x194>)
 8003b86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003b88:	f7ff fa54 	bl	8003034 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <pvPortMalloc+0x174>
	__asm volatile
 8003b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	60fb      	str	r3, [r7, #12]
}
 8003ba8:	bf00      	nop
 8003baa:	e7fe      	b.n	8003baa <pvPortMalloc+0x172>
	return pvReturn;
 8003bac:	69fb      	ldr	r3, [r7, #28]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3728      	adds	r7, #40	; 0x28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20004160 	.word	0x20004160
 8003bbc:	20004174 	.word	0x20004174
 8003bc0:	20004164 	.word	0x20004164
 8003bc4:	20004158 	.word	0x20004158
 8003bc8:	20004168 	.word	0x20004168
 8003bcc:	2000416c 	.word	0x2000416c

08003bd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d04d      	beq.n	8003c7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003be2:	2308      	movs	r3, #8
 8003be4:	425b      	negs	r3, r3
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	4413      	add	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	4b24      	ldr	r3, [pc, #144]	; (8003c88 <vPortFree+0xb8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10a      	bne.n	8003c14 <vPortFree+0x44>
	__asm volatile
 8003bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c02:	f383 8811 	msr	BASEPRI, r3
 8003c06:	f3bf 8f6f 	isb	sy
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	60fb      	str	r3, [r7, #12]
}
 8003c10:	bf00      	nop
 8003c12:	e7fe      	b.n	8003c12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <vPortFree+0x62>
	__asm volatile
 8003c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c20:	f383 8811 	msr	BASEPRI, r3
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	60bb      	str	r3, [r7, #8]
}
 8003c2e:	bf00      	nop
 8003c30:	e7fe      	b.n	8003c30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	4b14      	ldr	r3, [pc, #80]	; (8003c88 <vPortFree+0xb8>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d01e      	beq.n	8003c7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d11a      	bne.n	8003c7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <vPortFree+0xb8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	43db      	mvns	r3, r3
 8003c52:	401a      	ands	r2, r3
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003c58:	f7ff f9de 	bl	8003018 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	4b0a      	ldr	r3, [pc, #40]	; (8003c8c <vPortFree+0xbc>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4413      	add	r3, r2
 8003c66:	4a09      	ldr	r2, [pc, #36]	; (8003c8c <vPortFree+0xbc>)
 8003c68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003c6a:	6938      	ldr	r0, [r7, #16]
 8003c6c:	f000 f874 	bl	8003d58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003c70:	4b07      	ldr	r3, [pc, #28]	; (8003c90 <vPortFree+0xc0>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3301      	adds	r3, #1
 8003c76:	4a06      	ldr	r2, [pc, #24]	; (8003c90 <vPortFree+0xc0>)
 8003c78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003c7a:	f7ff f9db 	bl	8003034 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003c7e:	bf00      	nop
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20004174 	.word	0x20004174
 8003c8c:	20004164 	.word	0x20004164
 8003c90:	20004170 	.word	0x20004170

08003c94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003c9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003c9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003ca0:	4b27      	ldr	r3, [pc, #156]	; (8003d40 <prvHeapInit+0xac>)
 8003ca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00c      	beq.n	8003cc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	3307      	adds	r3, #7
 8003cb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0307 	bic.w	r3, r3, #7
 8003cba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	4a1f      	ldr	r2, [pc, #124]	; (8003d40 <prvHeapInit+0xac>)
 8003cc4:	4413      	add	r3, r2
 8003cc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ccc:	4a1d      	ldr	r2, [pc, #116]	; (8003d44 <prvHeapInit+0xb0>)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003cd2:	4b1c      	ldr	r3, [pc, #112]	; (8003d44 <prvHeapInit+0xb0>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	4413      	add	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003ce0:	2208      	movs	r2, #8
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 0307 	bic.w	r3, r3, #7
 8003cee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4a15      	ldr	r2, [pc, #84]	; (8003d48 <prvHeapInit+0xb4>)
 8003cf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003cf6:	4b14      	ldr	r3, [pc, #80]	; (8003d48 <prvHeapInit+0xb4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003cfe:	4b12      	ldr	r3, [pc, #72]	; (8003d48 <prvHeapInit+0xb4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	1ad2      	subs	r2, r2, r3
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d14:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <prvHeapInit+0xb4>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	4a0a      	ldr	r2, [pc, #40]	; (8003d4c <prvHeapInit+0xb8>)
 8003d22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	4a09      	ldr	r2, [pc, #36]	; (8003d50 <prvHeapInit+0xbc>)
 8003d2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003d2c:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <prvHeapInit+0xc0>)
 8003d2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d32:	601a      	str	r2, [r3, #0]
}
 8003d34:	bf00      	nop
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	20000558 	.word	0x20000558
 8003d44:	20004158 	.word	0x20004158
 8003d48:	20004160 	.word	0x20004160
 8003d4c:	20004168 	.word	0x20004168
 8003d50:	20004164 	.word	0x20004164
 8003d54:	20004174 	.word	0x20004174

08003d58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003d60:	4b28      	ldr	r3, [pc, #160]	; (8003e04 <prvInsertBlockIntoFreeList+0xac>)
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	e002      	b.n	8003d6c <prvInsertBlockIntoFreeList+0x14>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d8f7      	bhi.n	8003d66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	4413      	add	r3, r2
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d108      	bne.n	8003d9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	441a      	add	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	441a      	add	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d118      	bne.n	8003de0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	4b15      	ldr	r3, [pc, #84]	; (8003e08 <prvInsertBlockIntoFreeList+0xb0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d00d      	beq.n	8003dd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	441a      	add	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	e008      	b.n	8003de8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003dd6:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <prvInsertBlockIntoFreeList+0xb0>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	e003      	b.n	8003de8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d002      	beq.n	8003df6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003df6:	bf00      	nop
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	20004158 	.word	0x20004158
 8003e08:	20004160 	.word	0x20004160

08003e0c <siprintf>:
 8003e0c:	b40e      	push	{r1, r2, r3}
 8003e0e:	b500      	push	{lr}
 8003e10:	b09c      	sub	sp, #112	; 0x70
 8003e12:	ab1d      	add	r3, sp, #116	; 0x74
 8003e14:	9002      	str	r0, [sp, #8]
 8003e16:	9006      	str	r0, [sp, #24]
 8003e18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e1c:	4809      	ldr	r0, [pc, #36]	; (8003e44 <siprintf+0x38>)
 8003e1e:	9107      	str	r1, [sp, #28]
 8003e20:	9104      	str	r1, [sp, #16]
 8003e22:	4909      	ldr	r1, [pc, #36]	; (8003e48 <siprintf+0x3c>)
 8003e24:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e28:	9105      	str	r1, [sp, #20]
 8003e2a:	6800      	ldr	r0, [r0, #0]
 8003e2c:	9301      	str	r3, [sp, #4]
 8003e2e:	a902      	add	r1, sp, #8
 8003e30:	f000 f9f6 	bl	8004220 <_svfiprintf_r>
 8003e34:	9b02      	ldr	r3, [sp, #8]
 8003e36:	2200      	movs	r2, #0
 8003e38:	701a      	strb	r2, [r3, #0]
 8003e3a:	b01c      	add	sp, #112	; 0x70
 8003e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e40:	b003      	add	sp, #12
 8003e42:	4770      	bx	lr
 8003e44:	2000005c 	.word	0x2000005c
 8003e48:	ffff0208 	.word	0xffff0208

08003e4c <memset>:
 8003e4c:	4402      	add	r2, r0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d100      	bne.n	8003e56 <memset+0xa>
 8003e54:	4770      	bx	lr
 8003e56:	f803 1b01 	strb.w	r1, [r3], #1
 8003e5a:	e7f9      	b.n	8003e50 <memset+0x4>

08003e5c <_reclaim_reent>:
 8003e5c:	4b29      	ldr	r3, [pc, #164]	; (8003f04 <_reclaim_reent+0xa8>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4283      	cmp	r3, r0
 8003e62:	b570      	push	{r4, r5, r6, lr}
 8003e64:	4604      	mov	r4, r0
 8003e66:	d04b      	beq.n	8003f00 <_reclaim_reent+0xa4>
 8003e68:	69c3      	ldr	r3, [r0, #28]
 8003e6a:	b143      	cbz	r3, 8003e7e <_reclaim_reent+0x22>
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d144      	bne.n	8003efc <_reclaim_reent+0xa0>
 8003e72:	69e3      	ldr	r3, [r4, #28]
 8003e74:	6819      	ldr	r1, [r3, #0]
 8003e76:	b111      	cbz	r1, 8003e7e <_reclaim_reent+0x22>
 8003e78:	4620      	mov	r0, r4
 8003e7a:	f000 f87f 	bl	8003f7c <_free_r>
 8003e7e:	6961      	ldr	r1, [r4, #20]
 8003e80:	b111      	cbz	r1, 8003e88 <_reclaim_reent+0x2c>
 8003e82:	4620      	mov	r0, r4
 8003e84:	f000 f87a 	bl	8003f7c <_free_r>
 8003e88:	69e1      	ldr	r1, [r4, #28]
 8003e8a:	b111      	cbz	r1, 8003e92 <_reclaim_reent+0x36>
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f000 f875 	bl	8003f7c <_free_r>
 8003e92:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003e94:	b111      	cbz	r1, 8003e9c <_reclaim_reent+0x40>
 8003e96:	4620      	mov	r0, r4
 8003e98:	f000 f870 	bl	8003f7c <_free_r>
 8003e9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e9e:	b111      	cbz	r1, 8003ea6 <_reclaim_reent+0x4a>
 8003ea0:	4620      	mov	r0, r4
 8003ea2:	f000 f86b 	bl	8003f7c <_free_r>
 8003ea6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003ea8:	b111      	cbz	r1, 8003eb0 <_reclaim_reent+0x54>
 8003eaa:	4620      	mov	r0, r4
 8003eac:	f000 f866 	bl	8003f7c <_free_r>
 8003eb0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003eb2:	b111      	cbz	r1, 8003eba <_reclaim_reent+0x5e>
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f000 f861 	bl	8003f7c <_free_r>
 8003eba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003ebc:	b111      	cbz	r1, 8003ec4 <_reclaim_reent+0x68>
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f000 f85c 	bl	8003f7c <_free_r>
 8003ec4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003ec6:	b111      	cbz	r1, 8003ece <_reclaim_reent+0x72>
 8003ec8:	4620      	mov	r0, r4
 8003eca:	f000 f857 	bl	8003f7c <_free_r>
 8003ece:	6a23      	ldr	r3, [r4, #32]
 8003ed0:	b1b3      	cbz	r3, 8003f00 <_reclaim_reent+0xa4>
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003ed8:	4718      	bx	r3
 8003eda:	5949      	ldr	r1, [r1, r5]
 8003edc:	b941      	cbnz	r1, 8003ef0 <_reclaim_reent+0x94>
 8003ede:	3504      	adds	r5, #4
 8003ee0:	69e3      	ldr	r3, [r4, #28]
 8003ee2:	2d80      	cmp	r5, #128	; 0x80
 8003ee4:	68d9      	ldr	r1, [r3, #12]
 8003ee6:	d1f8      	bne.n	8003eda <_reclaim_reent+0x7e>
 8003ee8:	4620      	mov	r0, r4
 8003eea:	f000 f847 	bl	8003f7c <_free_r>
 8003eee:	e7c0      	b.n	8003e72 <_reclaim_reent+0x16>
 8003ef0:	680e      	ldr	r6, [r1, #0]
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	f000 f842 	bl	8003f7c <_free_r>
 8003ef8:	4631      	mov	r1, r6
 8003efa:	e7ef      	b.n	8003edc <_reclaim_reent+0x80>
 8003efc:	2500      	movs	r5, #0
 8003efe:	e7ef      	b.n	8003ee0 <_reclaim_reent+0x84>
 8003f00:	bd70      	pop	{r4, r5, r6, pc}
 8003f02:	bf00      	nop
 8003f04:	2000005c 	.word	0x2000005c

08003f08 <__errno>:
 8003f08:	4b01      	ldr	r3, [pc, #4]	; (8003f10 <__errno+0x8>)
 8003f0a:	6818      	ldr	r0, [r3, #0]
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	2000005c 	.word	0x2000005c

08003f14 <__libc_init_array>:
 8003f14:	b570      	push	{r4, r5, r6, lr}
 8003f16:	4d0d      	ldr	r5, [pc, #52]	; (8003f4c <__libc_init_array+0x38>)
 8003f18:	4c0d      	ldr	r4, [pc, #52]	; (8003f50 <__libc_init_array+0x3c>)
 8003f1a:	1b64      	subs	r4, r4, r5
 8003f1c:	10a4      	asrs	r4, r4, #2
 8003f1e:	2600      	movs	r6, #0
 8003f20:	42a6      	cmp	r6, r4
 8003f22:	d109      	bne.n	8003f38 <__libc_init_array+0x24>
 8003f24:	4d0b      	ldr	r5, [pc, #44]	; (8003f54 <__libc_init_array+0x40>)
 8003f26:	4c0c      	ldr	r4, [pc, #48]	; (8003f58 <__libc_init_array+0x44>)
 8003f28:	f000 fc6a 	bl	8004800 <_init>
 8003f2c:	1b64      	subs	r4, r4, r5
 8003f2e:	10a4      	asrs	r4, r4, #2
 8003f30:	2600      	movs	r6, #0
 8003f32:	42a6      	cmp	r6, r4
 8003f34:	d105      	bne.n	8003f42 <__libc_init_array+0x2e>
 8003f36:	bd70      	pop	{r4, r5, r6, pc}
 8003f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f3c:	4798      	blx	r3
 8003f3e:	3601      	adds	r6, #1
 8003f40:	e7ee      	b.n	8003f20 <__libc_init_array+0xc>
 8003f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f46:	4798      	blx	r3
 8003f48:	3601      	adds	r6, #1
 8003f4a:	e7f2      	b.n	8003f32 <__libc_init_array+0x1e>
 8003f4c:	08004918 	.word	0x08004918
 8003f50:	08004918 	.word	0x08004918
 8003f54:	08004918 	.word	0x08004918
 8003f58:	0800491c 	.word	0x0800491c

08003f5c <__retarget_lock_acquire_recursive>:
 8003f5c:	4770      	bx	lr

08003f5e <__retarget_lock_release_recursive>:
 8003f5e:	4770      	bx	lr

08003f60 <memcpy>:
 8003f60:	440a      	add	r2, r1
 8003f62:	4291      	cmp	r1, r2
 8003f64:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f68:	d100      	bne.n	8003f6c <memcpy+0xc>
 8003f6a:	4770      	bx	lr
 8003f6c:	b510      	push	{r4, lr}
 8003f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f76:	4291      	cmp	r1, r2
 8003f78:	d1f9      	bne.n	8003f6e <memcpy+0xe>
 8003f7a:	bd10      	pop	{r4, pc}

08003f7c <_free_r>:
 8003f7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f7e:	2900      	cmp	r1, #0
 8003f80:	d044      	beq.n	800400c <_free_r+0x90>
 8003f82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f86:	9001      	str	r0, [sp, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f1a1 0404 	sub.w	r4, r1, #4
 8003f8e:	bfb8      	it	lt
 8003f90:	18e4      	addlt	r4, r4, r3
 8003f92:	f000 f8df 	bl	8004154 <__malloc_lock>
 8003f96:	4a1e      	ldr	r2, [pc, #120]	; (8004010 <_free_r+0x94>)
 8003f98:	9801      	ldr	r0, [sp, #4]
 8003f9a:	6813      	ldr	r3, [r2, #0]
 8003f9c:	b933      	cbnz	r3, 8003fac <_free_r+0x30>
 8003f9e:	6063      	str	r3, [r4, #4]
 8003fa0:	6014      	str	r4, [r2, #0]
 8003fa2:	b003      	add	sp, #12
 8003fa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fa8:	f000 b8da 	b.w	8004160 <__malloc_unlock>
 8003fac:	42a3      	cmp	r3, r4
 8003fae:	d908      	bls.n	8003fc2 <_free_r+0x46>
 8003fb0:	6825      	ldr	r5, [r4, #0]
 8003fb2:	1961      	adds	r1, r4, r5
 8003fb4:	428b      	cmp	r3, r1
 8003fb6:	bf01      	itttt	eq
 8003fb8:	6819      	ldreq	r1, [r3, #0]
 8003fba:	685b      	ldreq	r3, [r3, #4]
 8003fbc:	1949      	addeq	r1, r1, r5
 8003fbe:	6021      	streq	r1, [r4, #0]
 8003fc0:	e7ed      	b.n	8003f9e <_free_r+0x22>
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	b10b      	cbz	r3, 8003fcc <_free_r+0x50>
 8003fc8:	42a3      	cmp	r3, r4
 8003fca:	d9fa      	bls.n	8003fc2 <_free_r+0x46>
 8003fcc:	6811      	ldr	r1, [r2, #0]
 8003fce:	1855      	adds	r5, r2, r1
 8003fd0:	42a5      	cmp	r5, r4
 8003fd2:	d10b      	bne.n	8003fec <_free_r+0x70>
 8003fd4:	6824      	ldr	r4, [r4, #0]
 8003fd6:	4421      	add	r1, r4
 8003fd8:	1854      	adds	r4, r2, r1
 8003fda:	42a3      	cmp	r3, r4
 8003fdc:	6011      	str	r1, [r2, #0]
 8003fde:	d1e0      	bne.n	8003fa2 <_free_r+0x26>
 8003fe0:	681c      	ldr	r4, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	6053      	str	r3, [r2, #4]
 8003fe6:	440c      	add	r4, r1
 8003fe8:	6014      	str	r4, [r2, #0]
 8003fea:	e7da      	b.n	8003fa2 <_free_r+0x26>
 8003fec:	d902      	bls.n	8003ff4 <_free_r+0x78>
 8003fee:	230c      	movs	r3, #12
 8003ff0:	6003      	str	r3, [r0, #0]
 8003ff2:	e7d6      	b.n	8003fa2 <_free_r+0x26>
 8003ff4:	6825      	ldr	r5, [r4, #0]
 8003ff6:	1961      	adds	r1, r4, r5
 8003ff8:	428b      	cmp	r3, r1
 8003ffa:	bf04      	itt	eq
 8003ffc:	6819      	ldreq	r1, [r3, #0]
 8003ffe:	685b      	ldreq	r3, [r3, #4]
 8004000:	6063      	str	r3, [r4, #4]
 8004002:	bf04      	itt	eq
 8004004:	1949      	addeq	r1, r1, r5
 8004006:	6021      	streq	r1, [r4, #0]
 8004008:	6054      	str	r4, [r2, #4]
 800400a:	e7ca      	b.n	8003fa2 <_free_r+0x26>
 800400c:	b003      	add	sp, #12
 800400e:	bd30      	pop	{r4, r5, pc}
 8004010:	200042b8 	.word	0x200042b8

08004014 <sbrk_aligned>:
 8004014:	b570      	push	{r4, r5, r6, lr}
 8004016:	4e0e      	ldr	r6, [pc, #56]	; (8004050 <sbrk_aligned+0x3c>)
 8004018:	460c      	mov	r4, r1
 800401a:	6831      	ldr	r1, [r6, #0]
 800401c:	4605      	mov	r5, r0
 800401e:	b911      	cbnz	r1, 8004026 <sbrk_aligned+0x12>
 8004020:	f000 fba6 	bl	8004770 <_sbrk_r>
 8004024:	6030      	str	r0, [r6, #0]
 8004026:	4621      	mov	r1, r4
 8004028:	4628      	mov	r0, r5
 800402a:	f000 fba1 	bl	8004770 <_sbrk_r>
 800402e:	1c43      	adds	r3, r0, #1
 8004030:	d00a      	beq.n	8004048 <sbrk_aligned+0x34>
 8004032:	1cc4      	adds	r4, r0, #3
 8004034:	f024 0403 	bic.w	r4, r4, #3
 8004038:	42a0      	cmp	r0, r4
 800403a:	d007      	beq.n	800404c <sbrk_aligned+0x38>
 800403c:	1a21      	subs	r1, r4, r0
 800403e:	4628      	mov	r0, r5
 8004040:	f000 fb96 	bl	8004770 <_sbrk_r>
 8004044:	3001      	adds	r0, #1
 8004046:	d101      	bne.n	800404c <sbrk_aligned+0x38>
 8004048:	f04f 34ff 	mov.w	r4, #4294967295
 800404c:	4620      	mov	r0, r4
 800404e:	bd70      	pop	{r4, r5, r6, pc}
 8004050:	200042bc 	.word	0x200042bc

08004054 <_malloc_r>:
 8004054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004058:	1ccd      	adds	r5, r1, #3
 800405a:	f025 0503 	bic.w	r5, r5, #3
 800405e:	3508      	adds	r5, #8
 8004060:	2d0c      	cmp	r5, #12
 8004062:	bf38      	it	cc
 8004064:	250c      	movcc	r5, #12
 8004066:	2d00      	cmp	r5, #0
 8004068:	4607      	mov	r7, r0
 800406a:	db01      	blt.n	8004070 <_malloc_r+0x1c>
 800406c:	42a9      	cmp	r1, r5
 800406e:	d905      	bls.n	800407c <_malloc_r+0x28>
 8004070:	230c      	movs	r3, #12
 8004072:	603b      	str	r3, [r7, #0]
 8004074:	2600      	movs	r6, #0
 8004076:	4630      	mov	r0, r6
 8004078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800407c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004150 <_malloc_r+0xfc>
 8004080:	f000 f868 	bl	8004154 <__malloc_lock>
 8004084:	f8d8 3000 	ldr.w	r3, [r8]
 8004088:	461c      	mov	r4, r3
 800408a:	bb5c      	cbnz	r4, 80040e4 <_malloc_r+0x90>
 800408c:	4629      	mov	r1, r5
 800408e:	4638      	mov	r0, r7
 8004090:	f7ff ffc0 	bl	8004014 <sbrk_aligned>
 8004094:	1c43      	adds	r3, r0, #1
 8004096:	4604      	mov	r4, r0
 8004098:	d155      	bne.n	8004146 <_malloc_r+0xf2>
 800409a:	f8d8 4000 	ldr.w	r4, [r8]
 800409e:	4626      	mov	r6, r4
 80040a0:	2e00      	cmp	r6, #0
 80040a2:	d145      	bne.n	8004130 <_malloc_r+0xdc>
 80040a4:	2c00      	cmp	r4, #0
 80040a6:	d048      	beq.n	800413a <_malloc_r+0xe6>
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	4631      	mov	r1, r6
 80040ac:	4638      	mov	r0, r7
 80040ae:	eb04 0903 	add.w	r9, r4, r3
 80040b2:	f000 fb5d 	bl	8004770 <_sbrk_r>
 80040b6:	4581      	cmp	r9, r0
 80040b8:	d13f      	bne.n	800413a <_malloc_r+0xe6>
 80040ba:	6821      	ldr	r1, [r4, #0]
 80040bc:	1a6d      	subs	r5, r5, r1
 80040be:	4629      	mov	r1, r5
 80040c0:	4638      	mov	r0, r7
 80040c2:	f7ff ffa7 	bl	8004014 <sbrk_aligned>
 80040c6:	3001      	adds	r0, #1
 80040c8:	d037      	beq.n	800413a <_malloc_r+0xe6>
 80040ca:	6823      	ldr	r3, [r4, #0]
 80040cc:	442b      	add	r3, r5
 80040ce:	6023      	str	r3, [r4, #0]
 80040d0:	f8d8 3000 	ldr.w	r3, [r8]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d038      	beq.n	800414a <_malloc_r+0xf6>
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	42a2      	cmp	r2, r4
 80040dc:	d12b      	bne.n	8004136 <_malloc_r+0xe2>
 80040de:	2200      	movs	r2, #0
 80040e0:	605a      	str	r2, [r3, #4]
 80040e2:	e00f      	b.n	8004104 <_malloc_r+0xb0>
 80040e4:	6822      	ldr	r2, [r4, #0]
 80040e6:	1b52      	subs	r2, r2, r5
 80040e8:	d41f      	bmi.n	800412a <_malloc_r+0xd6>
 80040ea:	2a0b      	cmp	r2, #11
 80040ec:	d917      	bls.n	800411e <_malloc_r+0xca>
 80040ee:	1961      	adds	r1, r4, r5
 80040f0:	42a3      	cmp	r3, r4
 80040f2:	6025      	str	r5, [r4, #0]
 80040f4:	bf18      	it	ne
 80040f6:	6059      	strne	r1, [r3, #4]
 80040f8:	6863      	ldr	r3, [r4, #4]
 80040fa:	bf08      	it	eq
 80040fc:	f8c8 1000 	streq.w	r1, [r8]
 8004100:	5162      	str	r2, [r4, r5]
 8004102:	604b      	str	r3, [r1, #4]
 8004104:	4638      	mov	r0, r7
 8004106:	f104 060b 	add.w	r6, r4, #11
 800410a:	f000 f829 	bl	8004160 <__malloc_unlock>
 800410e:	f026 0607 	bic.w	r6, r6, #7
 8004112:	1d23      	adds	r3, r4, #4
 8004114:	1af2      	subs	r2, r6, r3
 8004116:	d0ae      	beq.n	8004076 <_malloc_r+0x22>
 8004118:	1b9b      	subs	r3, r3, r6
 800411a:	50a3      	str	r3, [r4, r2]
 800411c:	e7ab      	b.n	8004076 <_malloc_r+0x22>
 800411e:	42a3      	cmp	r3, r4
 8004120:	6862      	ldr	r2, [r4, #4]
 8004122:	d1dd      	bne.n	80040e0 <_malloc_r+0x8c>
 8004124:	f8c8 2000 	str.w	r2, [r8]
 8004128:	e7ec      	b.n	8004104 <_malloc_r+0xb0>
 800412a:	4623      	mov	r3, r4
 800412c:	6864      	ldr	r4, [r4, #4]
 800412e:	e7ac      	b.n	800408a <_malloc_r+0x36>
 8004130:	4634      	mov	r4, r6
 8004132:	6876      	ldr	r6, [r6, #4]
 8004134:	e7b4      	b.n	80040a0 <_malloc_r+0x4c>
 8004136:	4613      	mov	r3, r2
 8004138:	e7cc      	b.n	80040d4 <_malloc_r+0x80>
 800413a:	230c      	movs	r3, #12
 800413c:	603b      	str	r3, [r7, #0]
 800413e:	4638      	mov	r0, r7
 8004140:	f000 f80e 	bl	8004160 <__malloc_unlock>
 8004144:	e797      	b.n	8004076 <_malloc_r+0x22>
 8004146:	6025      	str	r5, [r4, #0]
 8004148:	e7dc      	b.n	8004104 <_malloc_r+0xb0>
 800414a:	605b      	str	r3, [r3, #4]
 800414c:	deff      	udf	#255	; 0xff
 800414e:	bf00      	nop
 8004150:	200042b8 	.word	0x200042b8

08004154 <__malloc_lock>:
 8004154:	4801      	ldr	r0, [pc, #4]	; (800415c <__malloc_lock+0x8>)
 8004156:	f7ff bf01 	b.w	8003f5c <__retarget_lock_acquire_recursive>
 800415a:	bf00      	nop
 800415c:	200042b4 	.word	0x200042b4

08004160 <__malloc_unlock>:
 8004160:	4801      	ldr	r0, [pc, #4]	; (8004168 <__malloc_unlock+0x8>)
 8004162:	f7ff befc 	b.w	8003f5e <__retarget_lock_release_recursive>
 8004166:	bf00      	nop
 8004168:	200042b4 	.word	0x200042b4

0800416c <__ssputs_r>:
 800416c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004170:	688e      	ldr	r6, [r1, #8]
 8004172:	461f      	mov	r7, r3
 8004174:	42be      	cmp	r6, r7
 8004176:	680b      	ldr	r3, [r1, #0]
 8004178:	4682      	mov	sl, r0
 800417a:	460c      	mov	r4, r1
 800417c:	4690      	mov	r8, r2
 800417e:	d82c      	bhi.n	80041da <__ssputs_r+0x6e>
 8004180:	898a      	ldrh	r2, [r1, #12]
 8004182:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004186:	d026      	beq.n	80041d6 <__ssputs_r+0x6a>
 8004188:	6965      	ldr	r5, [r4, #20]
 800418a:	6909      	ldr	r1, [r1, #16]
 800418c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004190:	eba3 0901 	sub.w	r9, r3, r1
 8004194:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004198:	1c7b      	adds	r3, r7, #1
 800419a:	444b      	add	r3, r9
 800419c:	106d      	asrs	r5, r5, #1
 800419e:	429d      	cmp	r5, r3
 80041a0:	bf38      	it	cc
 80041a2:	461d      	movcc	r5, r3
 80041a4:	0553      	lsls	r3, r2, #21
 80041a6:	d527      	bpl.n	80041f8 <__ssputs_r+0x8c>
 80041a8:	4629      	mov	r1, r5
 80041aa:	f7ff ff53 	bl	8004054 <_malloc_r>
 80041ae:	4606      	mov	r6, r0
 80041b0:	b360      	cbz	r0, 800420c <__ssputs_r+0xa0>
 80041b2:	6921      	ldr	r1, [r4, #16]
 80041b4:	464a      	mov	r2, r9
 80041b6:	f7ff fed3 	bl	8003f60 <memcpy>
 80041ba:	89a3      	ldrh	r3, [r4, #12]
 80041bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c4:	81a3      	strh	r3, [r4, #12]
 80041c6:	6126      	str	r6, [r4, #16]
 80041c8:	6165      	str	r5, [r4, #20]
 80041ca:	444e      	add	r6, r9
 80041cc:	eba5 0509 	sub.w	r5, r5, r9
 80041d0:	6026      	str	r6, [r4, #0]
 80041d2:	60a5      	str	r5, [r4, #8]
 80041d4:	463e      	mov	r6, r7
 80041d6:	42be      	cmp	r6, r7
 80041d8:	d900      	bls.n	80041dc <__ssputs_r+0x70>
 80041da:	463e      	mov	r6, r7
 80041dc:	6820      	ldr	r0, [r4, #0]
 80041de:	4632      	mov	r2, r6
 80041e0:	4641      	mov	r1, r8
 80041e2:	f000 faab 	bl	800473c <memmove>
 80041e6:	68a3      	ldr	r3, [r4, #8]
 80041e8:	1b9b      	subs	r3, r3, r6
 80041ea:	60a3      	str	r3, [r4, #8]
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	4433      	add	r3, r6
 80041f0:	6023      	str	r3, [r4, #0]
 80041f2:	2000      	movs	r0, #0
 80041f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041f8:	462a      	mov	r2, r5
 80041fa:	f000 fac9 	bl	8004790 <_realloc_r>
 80041fe:	4606      	mov	r6, r0
 8004200:	2800      	cmp	r0, #0
 8004202:	d1e0      	bne.n	80041c6 <__ssputs_r+0x5a>
 8004204:	6921      	ldr	r1, [r4, #16]
 8004206:	4650      	mov	r0, sl
 8004208:	f7ff feb8 	bl	8003f7c <_free_r>
 800420c:	230c      	movs	r3, #12
 800420e:	f8ca 3000 	str.w	r3, [sl]
 8004212:	89a3      	ldrh	r3, [r4, #12]
 8004214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004218:	81a3      	strh	r3, [r4, #12]
 800421a:	f04f 30ff 	mov.w	r0, #4294967295
 800421e:	e7e9      	b.n	80041f4 <__ssputs_r+0x88>

08004220 <_svfiprintf_r>:
 8004220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004224:	4698      	mov	r8, r3
 8004226:	898b      	ldrh	r3, [r1, #12]
 8004228:	061b      	lsls	r3, r3, #24
 800422a:	b09d      	sub	sp, #116	; 0x74
 800422c:	4607      	mov	r7, r0
 800422e:	460d      	mov	r5, r1
 8004230:	4614      	mov	r4, r2
 8004232:	d50e      	bpl.n	8004252 <_svfiprintf_r+0x32>
 8004234:	690b      	ldr	r3, [r1, #16]
 8004236:	b963      	cbnz	r3, 8004252 <_svfiprintf_r+0x32>
 8004238:	2140      	movs	r1, #64	; 0x40
 800423a:	f7ff ff0b 	bl	8004054 <_malloc_r>
 800423e:	6028      	str	r0, [r5, #0]
 8004240:	6128      	str	r0, [r5, #16]
 8004242:	b920      	cbnz	r0, 800424e <_svfiprintf_r+0x2e>
 8004244:	230c      	movs	r3, #12
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	f04f 30ff 	mov.w	r0, #4294967295
 800424c:	e0d0      	b.n	80043f0 <_svfiprintf_r+0x1d0>
 800424e:	2340      	movs	r3, #64	; 0x40
 8004250:	616b      	str	r3, [r5, #20]
 8004252:	2300      	movs	r3, #0
 8004254:	9309      	str	r3, [sp, #36]	; 0x24
 8004256:	2320      	movs	r3, #32
 8004258:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800425c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004260:	2330      	movs	r3, #48	; 0x30
 8004262:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004408 <_svfiprintf_r+0x1e8>
 8004266:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800426a:	f04f 0901 	mov.w	r9, #1
 800426e:	4623      	mov	r3, r4
 8004270:	469a      	mov	sl, r3
 8004272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004276:	b10a      	cbz	r2, 800427c <_svfiprintf_r+0x5c>
 8004278:	2a25      	cmp	r2, #37	; 0x25
 800427a:	d1f9      	bne.n	8004270 <_svfiprintf_r+0x50>
 800427c:	ebba 0b04 	subs.w	fp, sl, r4
 8004280:	d00b      	beq.n	800429a <_svfiprintf_r+0x7a>
 8004282:	465b      	mov	r3, fp
 8004284:	4622      	mov	r2, r4
 8004286:	4629      	mov	r1, r5
 8004288:	4638      	mov	r0, r7
 800428a:	f7ff ff6f 	bl	800416c <__ssputs_r>
 800428e:	3001      	adds	r0, #1
 8004290:	f000 80a9 	beq.w	80043e6 <_svfiprintf_r+0x1c6>
 8004294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004296:	445a      	add	r2, fp
 8004298:	9209      	str	r2, [sp, #36]	; 0x24
 800429a:	f89a 3000 	ldrb.w	r3, [sl]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 80a1 	beq.w	80043e6 <_svfiprintf_r+0x1c6>
 80042a4:	2300      	movs	r3, #0
 80042a6:	f04f 32ff 	mov.w	r2, #4294967295
 80042aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042ae:	f10a 0a01 	add.w	sl, sl, #1
 80042b2:	9304      	str	r3, [sp, #16]
 80042b4:	9307      	str	r3, [sp, #28]
 80042b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042ba:	931a      	str	r3, [sp, #104]	; 0x68
 80042bc:	4654      	mov	r4, sl
 80042be:	2205      	movs	r2, #5
 80042c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042c4:	4850      	ldr	r0, [pc, #320]	; (8004408 <_svfiprintf_r+0x1e8>)
 80042c6:	f7fb ff83 	bl	80001d0 <memchr>
 80042ca:	9a04      	ldr	r2, [sp, #16]
 80042cc:	b9d8      	cbnz	r0, 8004306 <_svfiprintf_r+0xe6>
 80042ce:	06d0      	lsls	r0, r2, #27
 80042d0:	bf44      	itt	mi
 80042d2:	2320      	movmi	r3, #32
 80042d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042d8:	0711      	lsls	r1, r2, #28
 80042da:	bf44      	itt	mi
 80042dc:	232b      	movmi	r3, #43	; 0x2b
 80042de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042e2:	f89a 3000 	ldrb.w	r3, [sl]
 80042e6:	2b2a      	cmp	r3, #42	; 0x2a
 80042e8:	d015      	beq.n	8004316 <_svfiprintf_r+0xf6>
 80042ea:	9a07      	ldr	r2, [sp, #28]
 80042ec:	4654      	mov	r4, sl
 80042ee:	2000      	movs	r0, #0
 80042f0:	f04f 0c0a 	mov.w	ip, #10
 80042f4:	4621      	mov	r1, r4
 80042f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042fa:	3b30      	subs	r3, #48	; 0x30
 80042fc:	2b09      	cmp	r3, #9
 80042fe:	d94d      	bls.n	800439c <_svfiprintf_r+0x17c>
 8004300:	b1b0      	cbz	r0, 8004330 <_svfiprintf_r+0x110>
 8004302:	9207      	str	r2, [sp, #28]
 8004304:	e014      	b.n	8004330 <_svfiprintf_r+0x110>
 8004306:	eba0 0308 	sub.w	r3, r0, r8
 800430a:	fa09 f303 	lsl.w	r3, r9, r3
 800430e:	4313      	orrs	r3, r2
 8004310:	9304      	str	r3, [sp, #16]
 8004312:	46a2      	mov	sl, r4
 8004314:	e7d2      	b.n	80042bc <_svfiprintf_r+0x9c>
 8004316:	9b03      	ldr	r3, [sp, #12]
 8004318:	1d19      	adds	r1, r3, #4
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	9103      	str	r1, [sp, #12]
 800431e:	2b00      	cmp	r3, #0
 8004320:	bfbb      	ittet	lt
 8004322:	425b      	neglt	r3, r3
 8004324:	f042 0202 	orrlt.w	r2, r2, #2
 8004328:	9307      	strge	r3, [sp, #28]
 800432a:	9307      	strlt	r3, [sp, #28]
 800432c:	bfb8      	it	lt
 800432e:	9204      	strlt	r2, [sp, #16]
 8004330:	7823      	ldrb	r3, [r4, #0]
 8004332:	2b2e      	cmp	r3, #46	; 0x2e
 8004334:	d10c      	bne.n	8004350 <_svfiprintf_r+0x130>
 8004336:	7863      	ldrb	r3, [r4, #1]
 8004338:	2b2a      	cmp	r3, #42	; 0x2a
 800433a:	d134      	bne.n	80043a6 <_svfiprintf_r+0x186>
 800433c:	9b03      	ldr	r3, [sp, #12]
 800433e:	1d1a      	adds	r2, r3, #4
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	9203      	str	r2, [sp, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	bfb8      	it	lt
 8004348:	f04f 33ff 	movlt.w	r3, #4294967295
 800434c:	3402      	adds	r4, #2
 800434e:	9305      	str	r3, [sp, #20]
 8004350:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004418 <_svfiprintf_r+0x1f8>
 8004354:	7821      	ldrb	r1, [r4, #0]
 8004356:	2203      	movs	r2, #3
 8004358:	4650      	mov	r0, sl
 800435a:	f7fb ff39 	bl	80001d0 <memchr>
 800435e:	b138      	cbz	r0, 8004370 <_svfiprintf_r+0x150>
 8004360:	9b04      	ldr	r3, [sp, #16]
 8004362:	eba0 000a 	sub.w	r0, r0, sl
 8004366:	2240      	movs	r2, #64	; 0x40
 8004368:	4082      	lsls	r2, r0
 800436a:	4313      	orrs	r3, r2
 800436c:	3401      	adds	r4, #1
 800436e:	9304      	str	r3, [sp, #16]
 8004370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004374:	4825      	ldr	r0, [pc, #148]	; (800440c <_svfiprintf_r+0x1ec>)
 8004376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800437a:	2206      	movs	r2, #6
 800437c:	f7fb ff28 	bl	80001d0 <memchr>
 8004380:	2800      	cmp	r0, #0
 8004382:	d038      	beq.n	80043f6 <_svfiprintf_r+0x1d6>
 8004384:	4b22      	ldr	r3, [pc, #136]	; (8004410 <_svfiprintf_r+0x1f0>)
 8004386:	bb1b      	cbnz	r3, 80043d0 <_svfiprintf_r+0x1b0>
 8004388:	9b03      	ldr	r3, [sp, #12]
 800438a:	3307      	adds	r3, #7
 800438c:	f023 0307 	bic.w	r3, r3, #7
 8004390:	3308      	adds	r3, #8
 8004392:	9303      	str	r3, [sp, #12]
 8004394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004396:	4433      	add	r3, r6
 8004398:	9309      	str	r3, [sp, #36]	; 0x24
 800439a:	e768      	b.n	800426e <_svfiprintf_r+0x4e>
 800439c:	fb0c 3202 	mla	r2, ip, r2, r3
 80043a0:	460c      	mov	r4, r1
 80043a2:	2001      	movs	r0, #1
 80043a4:	e7a6      	b.n	80042f4 <_svfiprintf_r+0xd4>
 80043a6:	2300      	movs	r3, #0
 80043a8:	3401      	adds	r4, #1
 80043aa:	9305      	str	r3, [sp, #20]
 80043ac:	4619      	mov	r1, r3
 80043ae:	f04f 0c0a 	mov.w	ip, #10
 80043b2:	4620      	mov	r0, r4
 80043b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043b8:	3a30      	subs	r2, #48	; 0x30
 80043ba:	2a09      	cmp	r2, #9
 80043bc:	d903      	bls.n	80043c6 <_svfiprintf_r+0x1a6>
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0c6      	beq.n	8004350 <_svfiprintf_r+0x130>
 80043c2:	9105      	str	r1, [sp, #20]
 80043c4:	e7c4      	b.n	8004350 <_svfiprintf_r+0x130>
 80043c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80043ca:	4604      	mov	r4, r0
 80043cc:	2301      	movs	r3, #1
 80043ce:	e7f0      	b.n	80043b2 <_svfiprintf_r+0x192>
 80043d0:	ab03      	add	r3, sp, #12
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	462a      	mov	r2, r5
 80043d6:	4b0f      	ldr	r3, [pc, #60]	; (8004414 <_svfiprintf_r+0x1f4>)
 80043d8:	a904      	add	r1, sp, #16
 80043da:	4638      	mov	r0, r7
 80043dc:	f3af 8000 	nop.w
 80043e0:	1c42      	adds	r2, r0, #1
 80043e2:	4606      	mov	r6, r0
 80043e4:	d1d6      	bne.n	8004394 <_svfiprintf_r+0x174>
 80043e6:	89ab      	ldrh	r3, [r5, #12]
 80043e8:	065b      	lsls	r3, r3, #25
 80043ea:	f53f af2d 	bmi.w	8004248 <_svfiprintf_r+0x28>
 80043ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043f0:	b01d      	add	sp, #116	; 0x74
 80043f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043f6:	ab03      	add	r3, sp, #12
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	462a      	mov	r2, r5
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <_svfiprintf_r+0x1f4>)
 80043fe:	a904      	add	r1, sp, #16
 8004400:	4638      	mov	r0, r7
 8004402:	f000 f879 	bl	80044f8 <_printf_i>
 8004406:	e7eb      	b.n	80043e0 <_svfiprintf_r+0x1c0>
 8004408:	080048dc 	.word	0x080048dc
 800440c:	080048e6 	.word	0x080048e6
 8004410:	00000000 	.word	0x00000000
 8004414:	0800416d 	.word	0x0800416d
 8004418:	080048e2 	.word	0x080048e2

0800441c <_printf_common>:
 800441c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004420:	4616      	mov	r6, r2
 8004422:	4699      	mov	r9, r3
 8004424:	688a      	ldr	r2, [r1, #8]
 8004426:	690b      	ldr	r3, [r1, #16]
 8004428:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800442c:	4293      	cmp	r3, r2
 800442e:	bfb8      	it	lt
 8004430:	4613      	movlt	r3, r2
 8004432:	6033      	str	r3, [r6, #0]
 8004434:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004438:	4607      	mov	r7, r0
 800443a:	460c      	mov	r4, r1
 800443c:	b10a      	cbz	r2, 8004442 <_printf_common+0x26>
 800443e:	3301      	adds	r3, #1
 8004440:	6033      	str	r3, [r6, #0]
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	0699      	lsls	r1, r3, #26
 8004446:	bf42      	ittt	mi
 8004448:	6833      	ldrmi	r3, [r6, #0]
 800444a:	3302      	addmi	r3, #2
 800444c:	6033      	strmi	r3, [r6, #0]
 800444e:	6825      	ldr	r5, [r4, #0]
 8004450:	f015 0506 	ands.w	r5, r5, #6
 8004454:	d106      	bne.n	8004464 <_printf_common+0x48>
 8004456:	f104 0a19 	add.w	sl, r4, #25
 800445a:	68e3      	ldr	r3, [r4, #12]
 800445c:	6832      	ldr	r2, [r6, #0]
 800445e:	1a9b      	subs	r3, r3, r2
 8004460:	42ab      	cmp	r3, r5
 8004462:	dc26      	bgt.n	80044b2 <_printf_common+0x96>
 8004464:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004468:	1e13      	subs	r3, r2, #0
 800446a:	6822      	ldr	r2, [r4, #0]
 800446c:	bf18      	it	ne
 800446e:	2301      	movne	r3, #1
 8004470:	0692      	lsls	r2, r2, #26
 8004472:	d42b      	bmi.n	80044cc <_printf_common+0xb0>
 8004474:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004478:	4649      	mov	r1, r9
 800447a:	4638      	mov	r0, r7
 800447c:	47c0      	blx	r8
 800447e:	3001      	adds	r0, #1
 8004480:	d01e      	beq.n	80044c0 <_printf_common+0xa4>
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	6922      	ldr	r2, [r4, #16]
 8004486:	f003 0306 	and.w	r3, r3, #6
 800448a:	2b04      	cmp	r3, #4
 800448c:	bf02      	ittt	eq
 800448e:	68e5      	ldreq	r5, [r4, #12]
 8004490:	6833      	ldreq	r3, [r6, #0]
 8004492:	1aed      	subeq	r5, r5, r3
 8004494:	68a3      	ldr	r3, [r4, #8]
 8004496:	bf0c      	ite	eq
 8004498:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800449c:	2500      	movne	r5, #0
 800449e:	4293      	cmp	r3, r2
 80044a0:	bfc4      	itt	gt
 80044a2:	1a9b      	subgt	r3, r3, r2
 80044a4:	18ed      	addgt	r5, r5, r3
 80044a6:	2600      	movs	r6, #0
 80044a8:	341a      	adds	r4, #26
 80044aa:	42b5      	cmp	r5, r6
 80044ac:	d11a      	bne.n	80044e4 <_printf_common+0xc8>
 80044ae:	2000      	movs	r0, #0
 80044b0:	e008      	b.n	80044c4 <_printf_common+0xa8>
 80044b2:	2301      	movs	r3, #1
 80044b4:	4652      	mov	r2, sl
 80044b6:	4649      	mov	r1, r9
 80044b8:	4638      	mov	r0, r7
 80044ba:	47c0      	blx	r8
 80044bc:	3001      	adds	r0, #1
 80044be:	d103      	bne.n	80044c8 <_printf_common+0xac>
 80044c0:	f04f 30ff 	mov.w	r0, #4294967295
 80044c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044c8:	3501      	adds	r5, #1
 80044ca:	e7c6      	b.n	800445a <_printf_common+0x3e>
 80044cc:	18e1      	adds	r1, r4, r3
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	2030      	movs	r0, #48	; 0x30
 80044d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044d6:	4422      	add	r2, r4
 80044d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044e0:	3302      	adds	r3, #2
 80044e2:	e7c7      	b.n	8004474 <_printf_common+0x58>
 80044e4:	2301      	movs	r3, #1
 80044e6:	4622      	mov	r2, r4
 80044e8:	4649      	mov	r1, r9
 80044ea:	4638      	mov	r0, r7
 80044ec:	47c0      	blx	r8
 80044ee:	3001      	adds	r0, #1
 80044f0:	d0e6      	beq.n	80044c0 <_printf_common+0xa4>
 80044f2:	3601      	adds	r6, #1
 80044f4:	e7d9      	b.n	80044aa <_printf_common+0x8e>
	...

080044f8 <_printf_i>:
 80044f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044fc:	7e0f      	ldrb	r7, [r1, #24]
 80044fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004500:	2f78      	cmp	r7, #120	; 0x78
 8004502:	4691      	mov	r9, r2
 8004504:	4680      	mov	r8, r0
 8004506:	460c      	mov	r4, r1
 8004508:	469a      	mov	sl, r3
 800450a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800450e:	d807      	bhi.n	8004520 <_printf_i+0x28>
 8004510:	2f62      	cmp	r7, #98	; 0x62
 8004512:	d80a      	bhi.n	800452a <_printf_i+0x32>
 8004514:	2f00      	cmp	r7, #0
 8004516:	f000 80d4 	beq.w	80046c2 <_printf_i+0x1ca>
 800451a:	2f58      	cmp	r7, #88	; 0x58
 800451c:	f000 80c0 	beq.w	80046a0 <_printf_i+0x1a8>
 8004520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004524:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004528:	e03a      	b.n	80045a0 <_printf_i+0xa8>
 800452a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800452e:	2b15      	cmp	r3, #21
 8004530:	d8f6      	bhi.n	8004520 <_printf_i+0x28>
 8004532:	a101      	add	r1, pc, #4	; (adr r1, 8004538 <_printf_i+0x40>)
 8004534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004538:	08004591 	.word	0x08004591
 800453c:	080045a5 	.word	0x080045a5
 8004540:	08004521 	.word	0x08004521
 8004544:	08004521 	.word	0x08004521
 8004548:	08004521 	.word	0x08004521
 800454c:	08004521 	.word	0x08004521
 8004550:	080045a5 	.word	0x080045a5
 8004554:	08004521 	.word	0x08004521
 8004558:	08004521 	.word	0x08004521
 800455c:	08004521 	.word	0x08004521
 8004560:	08004521 	.word	0x08004521
 8004564:	080046a9 	.word	0x080046a9
 8004568:	080045d1 	.word	0x080045d1
 800456c:	08004663 	.word	0x08004663
 8004570:	08004521 	.word	0x08004521
 8004574:	08004521 	.word	0x08004521
 8004578:	080046cb 	.word	0x080046cb
 800457c:	08004521 	.word	0x08004521
 8004580:	080045d1 	.word	0x080045d1
 8004584:	08004521 	.word	0x08004521
 8004588:	08004521 	.word	0x08004521
 800458c:	0800466b 	.word	0x0800466b
 8004590:	682b      	ldr	r3, [r5, #0]
 8004592:	1d1a      	adds	r2, r3, #4
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	602a      	str	r2, [r5, #0]
 8004598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800459c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045a0:	2301      	movs	r3, #1
 80045a2:	e09f      	b.n	80046e4 <_printf_i+0x1ec>
 80045a4:	6820      	ldr	r0, [r4, #0]
 80045a6:	682b      	ldr	r3, [r5, #0]
 80045a8:	0607      	lsls	r7, r0, #24
 80045aa:	f103 0104 	add.w	r1, r3, #4
 80045ae:	6029      	str	r1, [r5, #0]
 80045b0:	d501      	bpl.n	80045b6 <_printf_i+0xbe>
 80045b2:	681e      	ldr	r6, [r3, #0]
 80045b4:	e003      	b.n	80045be <_printf_i+0xc6>
 80045b6:	0646      	lsls	r6, r0, #25
 80045b8:	d5fb      	bpl.n	80045b2 <_printf_i+0xba>
 80045ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80045be:	2e00      	cmp	r6, #0
 80045c0:	da03      	bge.n	80045ca <_printf_i+0xd2>
 80045c2:	232d      	movs	r3, #45	; 0x2d
 80045c4:	4276      	negs	r6, r6
 80045c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045ca:	485a      	ldr	r0, [pc, #360]	; (8004734 <_printf_i+0x23c>)
 80045cc:	230a      	movs	r3, #10
 80045ce:	e012      	b.n	80045f6 <_printf_i+0xfe>
 80045d0:	682b      	ldr	r3, [r5, #0]
 80045d2:	6820      	ldr	r0, [r4, #0]
 80045d4:	1d19      	adds	r1, r3, #4
 80045d6:	6029      	str	r1, [r5, #0]
 80045d8:	0605      	lsls	r5, r0, #24
 80045da:	d501      	bpl.n	80045e0 <_printf_i+0xe8>
 80045dc:	681e      	ldr	r6, [r3, #0]
 80045de:	e002      	b.n	80045e6 <_printf_i+0xee>
 80045e0:	0641      	lsls	r1, r0, #25
 80045e2:	d5fb      	bpl.n	80045dc <_printf_i+0xe4>
 80045e4:	881e      	ldrh	r6, [r3, #0]
 80045e6:	4853      	ldr	r0, [pc, #332]	; (8004734 <_printf_i+0x23c>)
 80045e8:	2f6f      	cmp	r7, #111	; 0x6f
 80045ea:	bf0c      	ite	eq
 80045ec:	2308      	moveq	r3, #8
 80045ee:	230a      	movne	r3, #10
 80045f0:	2100      	movs	r1, #0
 80045f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045f6:	6865      	ldr	r5, [r4, #4]
 80045f8:	60a5      	str	r5, [r4, #8]
 80045fa:	2d00      	cmp	r5, #0
 80045fc:	bfa2      	ittt	ge
 80045fe:	6821      	ldrge	r1, [r4, #0]
 8004600:	f021 0104 	bicge.w	r1, r1, #4
 8004604:	6021      	strge	r1, [r4, #0]
 8004606:	b90e      	cbnz	r6, 800460c <_printf_i+0x114>
 8004608:	2d00      	cmp	r5, #0
 800460a:	d04b      	beq.n	80046a4 <_printf_i+0x1ac>
 800460c:	4615      	mov	r5, r2
 800460e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004612:	fb03 6711 	mls	r7, r3, r1, r6
 8004616:	5dc7      	ldrb	r7, [r0, r7]
 8004618:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800461c:	4637      	mov	r7, r6
 800461e:	42bb      	cmp	r3, r7
 8004620:	460e      	mov	r6, r1
 8004622:	d9f4      	bls.n	800460e <_printf_i+0x116>
 8004624:	2b08      	cmp	r3, #8
 8004626:	d10b      	bne.n	8004640 <_printf_i+0x148>
 8004628:	6823      	ldr	r3, [r4, #0]
 800462a:	07de      	lsls	r6, r3, #31
 800462c:	d508      	bpl.n	8004640 <_printf_i+0x148>
 800462e:	6923      	ldr	r3, [r4, #16]
 8004630:	6861      	ldr	r1, [r4, #4]
 8004632:	4299      	cmp	r1, r3
 8004634:	bfde      	ittt	le
 8004636:	2330      	movle	r3, #48	; 0x30
 8004638:	f805 3c01 	strble.w	r3, [r5, #-1]
 800463c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004640:	1b52      	subs	r2, r2, r5
 8004642:	6122      	str	r2, [r4, #16]
 8004644:	f8cd a000 	str.w	sl, [sp]
 8004648:	464b      	mov	r3, r9
 800464a:	aa03      	add	r2, sp, #12
 800464c:	4621      	mov	r1, r4
 800464e:	4640      	mov	r0, r8
 8004650:	f7ff fee4 	bl	800441c <_printf_common>
 8004654:	3001      	adds	r0, #1
 8004656:	d14a      	bne.n	80046ee <_printf_i+0x1f6>
 8004658:	f04f 30ff 	mov.w	r0, #4294967295
 800465c:	b004      	add	sp, #16
 800465e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	f043 0320 	orr.w	r3, r3, #32
 8004668:	6023      	str	r3, [r4, #0]
 800466a:	4833      	ldr	r0, [pc, #204]	; (8004738 <_printf_i+0x240>)
 800466c:	2778      	movs	r7, #120	; 0x78
 800466e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	6829      	ldr	r1, [r5, #0]
 8004676:	061f      	lsls	r7, r3, #24
 8004678:	f851 6b04 	ldr.w	r6, [r1], #4
 800467c:	d402      	bmi.n	8004684 <_printf_i+0x18c>
 800467e:	065f      	lsls	r7, r3, #25
 8004680:	bf48      	it	mi
 8004682:	b2b6      	uxthmi	r6, r6
 8004684:	07df      	lsls	r7, r3, #31
 8004686:	bf48      	it	mi
 8004688:	f043 0320 	orrmi.w	r3, r3, #32
 800468c:	6029      	str	r1, [r5, #0]
 800468e:	bf48      	it	mi
 8004690:	6023      	strmi	r3, [r4, #0]
 8004692:	b91e      	cbnz	r6, 800469c <_printf_i+0x1a4>
 8004694:	6823      	ldr	r3, [r4, #0]
 8004696:	f023 0320 	bic.w	r3, r3, #32
 800469a:	6023      	str	r3, [r4, #0]
 800469c:	2310      	movs	r3, #16
 800469e:	e7a7      	b.n	80045f0 <_printf_i+0xf8>
 80046a0:	4824      	ldr	r0, [pc, #144]	; (8004734 <_printf_i+0x23c>)
 80046a2:	e7e4      	b.n	800466e <_printf_i+0x176>
 80046a4:	4615      	mov	r5, r2
 80046a6:	e7bd      	b.n	8004624 <_printf_i+0x12c>
 80046a8:	682b      	ldr	r3, [r5, #0]
 80046aa:	6826      	ldr	r6, [r4, #0]
 80046ac:	6961      	ldr	r1, [r4, #20]
 80046ae:	1d18      	adds	r0, r3, #4
 80046b0:	6028      	str	r0, [r5, #0]
 80046b2:	0635      	lsls	r5, r6, #24
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	d501      	bpl.n	80046bc <_printf_i+0x1c4>
 80046b8:	6019      	str	r1, [r3, #0]
 80046ba:	e002      	b.n	80046c2 <_printf_i+0x1ca>
 80046bc:	0670      	lsls	r0, r6, #25
 80046be:	d5fb      	bpl.n	80046b8 <_printf_i+0x1c0>
 80046c0:	8019      	strh	r1, [r3, #0]
 80046c2:	2300      	movs	r3, #0
 80046c4:	6123      	str	r3, [r4, #16]
 80046c6:	4615      	mov	r5, r2
 80046c8:	e7bc      	b.n	8004644 <_printf_i+0x14c>
 80046ca:	682b      	ldr	r3, [r5, #0]
 80046cc:	1d1a      	adds	r2, r3, #4
 80046ce:	602a      	str	r2, [r5, #0]
 80046d0:	681d      	ldr	r5, [r3, #0]
 80046d2:	6862      	ldr	r2, [r4, #4]
 80046d4:	2100      	movs	r1, #0
 80046d6:	4628      	mov	r0, r5
 80046d8:	f7fb fd7a 	bl	80001d0 <memchr>
 80046dc:	b108      	cbz	r0, 80046e2 <_printf_i+0x1ea>
 80046de:	1b40      	subs	r0, r0, r5
 80046e0:	6060      	str	r0, [r4, #4]
 80046e2:	6863      	ldr	r3, [r4, #4]
 80046e4:	6123      	str	r3, [r4, #16]
 80046e6:	2300      	movs	r3, #0
 80046e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046ec:	e7aa      	b.n	8004644 <_printf_i+0x14c>
 80046ee:	6923      	ldr	r3, [r4, #16]
 80046f0:	462a      	mov	r2, r5
 80046f2:	4649      	mov	r1, r9
 80046f4:	4640      	mov	r0, r8
 80046f6:	47d0      	blx	sl
 80046f8:	3001      	adds	r0, #1
 80046fa:	d0ad      	beq.n	8004658 <_printf_i+0x160>
 80046fc:	6823      	ldr	r3, [r4, #0]
 80046fe:	079b      	lsls	r3, r3, #30
 8004700:	d413      	bmi.n	800472a <_printf_i+0x232>
 8004702:	68e0      	ldr	r0, [r4, #12]
 8004704:	9b03      	ldr	r3, [sp, #12]
 8004706:	4298      	cmp	r0, r3
 8004708:	bfb8      	it	lt
 800470a:	4618      	movlt	r0, r3
 800470c:	e7a6      	b.n	800465c <_printf_i+0x164>
 800470e:	2301      	movs	r3, #1
 8004710:	4632      	mov	r2, r6
 8004712:	4649      	mov	r1, r9
 8004714:	4640      	mov	r0, r8
 8004716:	47d0      	blx	sl
 8004718:	3001      	adds	r0, #1
 800471a:	d09d      	beq.n	8004658 <_printf_i+0x160>
 800471c:	3501      	adds	r5, #1
 800471e:	68e3      	ldr	r3, [r4, #12]
 8004720:	9903      	ldr	r1, [sp, #12]
 8004722:	1a5b      	subs	r3, r3, r1
 8004724:	42ab      	cmp	r3, r5
 8004726:	dcf2      	bgt.n	800470e <_printf_i+0x216>
 8004728:	e7eb      	b.n	8004702 <_printf_i+0x20a>
 800472a:	2500      	movs	r5, #0
 800472c:	f104 0619 	add.w	r6, r4, #25
 8004730:	e7f5      	b.n	800471e <_printf_i+0x226>
 8004732:	bf00      	nop
 8004734:	080048ed 	.word	0x080048ed
 8004738:	080048fe 	.word	0x080048fe

0800473c <memmove>:
 800473c:	4288      	cmp	r0, r1
 800473e:	b510      	push	{r4, lr}
 8004740:	eb01 0402 	add.w	r4, r1, r2
 8004744:	d902      	bls.n	800474c <memmove+0x10>
 8004746:	4284      	cmp	r4, r0
 8004748:	4623      	mov	r3, r4
 800474a:	d807      	bhi.n	800475c <memmove+0x20>
 800474c:	1e43      	subs	r3, r0, #1
 800474e:	42a1      	cmp	r1, r4
 8004750:	d008      	beq.n	8004764 <memmove+0x28>
 8004752:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004756:	f803 2f01 	strb.w	r2, [r3, #1]!
 800475a:	e7f8      	b.n	800474e <memmove+0x12>
 800475c:	4402      	add	r2, r0
 800475e:	4601      	mov	r1, r0
 8004760:	428a      	cmp	r2, r1
 8004762:	d100      	bne.n	8004766 <memmove+0x2a>
 8004764:	bd10      	pop	{r4, pc}
 8004766:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800476a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800476e:	e7f7      	b.n	8004760 <memmove+0x24>

08004770 <_sbrk_r>:
 8004770:	b538      	push	{r3, r4, r5, lr}
 8004772:	4d06      	ldr	r5, [pc, #24]	; (800478c <_sbrk_r+0x1c>)
 8004774:	2300      	movs	r3, #0
 8004776:	4604      	mov	r4, r0
 8004778:	4608      	mov	r0, r1
 800477a:	602b      	str	r3, [r5, #0]
 800477c:	f7fc f982 	bl	8000a84 <_sbrk>
 8004780:	1c43      	adds	r3, r0, #1
 8004782:	d102      	bne.n	800478a <_sbrk_r+0x1a>
 8004784:	682b      	ldr	r3, [r5, #0]
 8004786:	b103      	cbz	r3, 800478a <_sbrk_r+0x1a>
 8004788:	6023      	str	r3, [r4, #0]
 800478a:	bd38      	pop	{r3, r4, r5, pc}
 800478c:	200042b0 	.word	0x200042b0

08004790 <_realloc_r>:
 8004790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004794:	4680      	mov	r8, r0
 8004796:	4614      	mov	r4, r2
 8004798:	460e      	mov	r6, r1
 800479a:	b921      	cbnz	r1, 80047a6 <_realloc_r+0x16>
 800479c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047a0:	4611      	mov	r1, r2
 80047a2:	f7ff bc57 	b.w	8004054 <_malloc_r>
 80047a6:	b92a      	cbnz	r2, 80047b4 <_realloc_r+0x24>
 80047a8:	f7ff fbe8 	bl	8003f7c <_free_r>
 80047ac:	4625      	mov	r5, r4
 80047ae:	4628      	mov	r0, r5
 80047b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047b4:	f000 f81b 	bl	80047ee <_malloc_usable_size_r>
 80047b8:	4284      	cmp	r4, r0
 80047ba:	4607      	mov	r7, r0
 80047bc:	d802      	bhi.n	80047c4 <_realloc_r+0x34>
 80047be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80047c2:	d812      	bhi.n	80047ea <_realloc_r+0x5a>
 80047c4:	4621      	mov	r1, r4
 80047c6:	4640      	mov	r0, r8
 80047c8:	f7ff fc44 	bl	8004054 <_malloc_r>
 80047cc:	4605      	mov	r5, r0
 80047ce:	2800      	cmp	r0, #0
 80047d0:	d0ed      	beq.n	80047ae <_realloc_r+0x1e>
 80047d2:	42bc      	cmp	r4, r7
 80047d4:	4622      	mov	r2, r4
 80047d6:	4631      	mov	r1, r6
 80047d8:	bf28      	it	cs
 80047da:	463a      	movcs	r2, r7
 80047dc:	f7ff fbc0 	bl	8003f60 <memcpy>
 80047e0:	4631      	mov	r1, r6
 80047e2:	4640      	mov	r0, r8
 80047e4:	f7ff fbca 	bl	8003f7c <_free_r>
 80047e8:	e7e1      	b.n	80047ae <_realloc_r+0x1e>
 80047ea:	4635      	mov	r5, r6
 80047ec:	e7df      	b.n	80047ae <_realloc_r+0x1e>

080047ee <_malloc_usable_size_r>:
 80047ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047f2:	1f18      	subs	r0, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	bfbc      	itt	lt
 80047f8:	580b      	ldrlt	r3, [r1, r0]
 80047fa:	18c0      	addlt	r0, r0, r3
 80047fc:	4770      	bx	lr
	...

08004800 <_init>:
 8004800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004802:	bf00      	nop
 8004804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004806:	bc08      	pop	{r3}
 8004808:	469e      	mov	lr, r3
 800480a:	4770      	bx	lr

0800480c <_fini>:
 800480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480e:	bf00      	nop
 8004810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004812:	bc08      	pop	{r3}
 8004814:	469e      	mov	lr, r3
 8004816:	4770      	bx	lr
