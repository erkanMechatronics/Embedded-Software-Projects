
HAL_FREERTOS_003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  0800594c  0800594c  0001594c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b24  08005b24  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005b24  08005b24  00015b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b2c  08005b2c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b2c  08005b2c  00015b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b30  08005b30  00015b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00004354  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200043b4  200043b4  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012d0d  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002cee  00000000  00000000  00032de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001170  00000000  00000000  00035ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d8f  00000000  00000000  00036c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022c41  00000000  00000000  000379cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014016  00000000  00000000  0005a610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d3a72  00000000  00000000  0006e626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004da4  00000000  00000000  00142098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00146e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005934 	.word	0x08005934

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005934 	.word	0x08005934

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	4a07      	ldr	r2, [pc, #28]	; (8000598 <vApplicationGetIdleTaskMemory+0x2c>)
 800057c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <vApplicationGetIdleTaskMemory+0x30>)
 8000582:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	2000007c 	.word	0x2000007c
 800059c:	200000d0 	.word	0x200000d0

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b5b0      	push	{r4, r5, r7, lr}
 80005a2:	b098      	sub	sp, #96	; 0x60
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fb79 	bl	8000c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f859 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f8eb 	bl	8000788 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b2:	f000 f8bf 	bl	8000734 <MX_USART2_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 80005b6:	2300      	movs	r3, #0
 80005b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80005ba:	2300      	movs	r3, #0
 80005bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 80005be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005c2:	2101      	movs	r1, #1
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 fa0c 	bl	80029e2 <osSemaphoreCreate>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a1d      	ldr	r2, [pc, #116]	; (8000644 <main+0xa4>)
 80005ce:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskNormal */
  osThreadDef(TaskNormal, StartTaskNormal, osPriorityNormal, 0, 128);
 80005d0:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <main+0xa8>)
 80005d2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80005d6:	461d      	mov	r5, r3
 80005d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskNormalHandle = osThreadCreate(osThread(TaskNormal), NULL);
 80005e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 f999 	bl	8002922 <osThreadCreate>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4a16      	ldr	r2, [pc, #88]	; (800064c <main+0xac>)
 80005f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskBelowNormal */
  osThreadDef(TaskBelowNormal, StartTaskBelowNormal, osPriorityBelowNormal, 0, 128);
 80005f6:	4b16      	ldr	r3, [pc, #88]	; (8000650 <main+0xb0>)
 80005f8:	f107 0420 	add.w	r4, r7, #32
 80005fc:	461d      	mov	r5, r3
 80005fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000602:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000606:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskBelowNormalHandle = osThreadCreate(osThread(TaskBelowNormal), NULL);
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f002 f986 	bl	8002922 <osThreadCreate>
 8000616:	4603      	mov	r3, r0
 8000618:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <main+0xb4>)
 800061a:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskAboveNormal */
  osThreadDef(TaskAboveNormal, StartTaskAboveNormal, osPriorityAboveNormal, 0, 128);
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <main+0xb8>)
 800061e:	1d3c      	adds	r4, r7, #4
 8000620:	461d      	mov	r5, r3
 8000622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000626:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskAboveNormalHandle = osThreadCreate(osThread(TaskAboveNormal), NULL);
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f002 f975 	bl	8002922 <osThreadCreate>
 8000638:	4603      	mov	r3, r0
 800063a:	4a08      	ldr	r2, [pc, #32]	; (800065c <main+0xbc>)
 800063c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800063e:	f002 f969 	bl	8002914 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000642:	e7fe      	b.n	8000642 <main+0xa2>
 8000644:	20000320 	.word	0x20000320
 8000648:	08005958 	.word	0x08005958
 800064c:	20000314 	.word	0x20000314
 8000650:	08005984 	.word	0x08005984
 8000654:	20000318 	.word	0x20000318
 8000658:	080059b0 	.word	0x080059b0
 800065c:	2000031c 	.word	0x2000031c

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f004 fcdc 	bl	800502c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b28      	ldr	r3, [pc, #160]	; (800072c <SystemClock_Config+0xcc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a27      	ldr	r2, [pc, #156]	; (800072c <SystemClock_Config+0xcc>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b25      	ldr	r3, [pc, #148]	; (800072c <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <SystemClock_Config+0xd0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a21      	ldr	r2, [pc, #132]	; (8000730 <SystemClock_Config+0xd0>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <SystemClock_Config+0xd0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006bc:	2301      	movs	r3, #1
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006d4:	23a8      	movs	r3, #168	; 0xa8
 80006d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006dc:	2304      	movs	r3, #4
 80006de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 fdb1 	bl	800124c <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f0:	f000 f94d 	bl	800098e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	2302      	movs	r3, #2
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000700:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2105      	movs	r1, #5
 8000712:	4618      	mov	r0, r3
 8000714:	f001 f812 	bl	800173c <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800071e:	f000 f936 	bl	800098e <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3750      	adds	r7, #80	; 0x50
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 800073a:	4a12      	ldr	r2, [pc, #72]	; (8000784 <MX_USART2_UART_Init+0x50>)
 800073c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 8000740:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000744:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 800076c:	f001 fce6 	bl	800213c <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000776:	f000 f90a 	bl	800098e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200002d0 	.word	0x200002d0
 8000784:	40004400 	.word	0x40004400

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_GPIO_Init+0x70>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a14      	ldr	r2, [pc, #80]	; (80007f8 <MX_GPIO_Init+0x70>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_GPIO_Init+0x70>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_GPIO_Init+0x70>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a0d      	ldr	r2, [pc, #52]	; (80007f8 <MX_GPIO_Init+0x70>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_GPIO_Init+0x70>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007d6:	2301      	movs	r3, #1
 80007d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	4619      	mov	r1, r3
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_GPIO_Init+0x74>)
 80007ea:	f000 fb7b 	bl	8000ee4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ee:	bf00      	nop
 80007f0:	3720      	adds	r7, #32
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020000 	.word	0x40020000

08000800 <StartTaskNormal>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskNormal */
void StartTaskNormal(void const * argument)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(5000);
 8000808:	f241 3088 	movw	r0, #5000	; 0x1388
 800080c:	f002 f8d5 	bl	80029ba <osDelay>
    sprintf(NormalTask,"Entering Medium Task.\n\r");
 8000810:	490a      	ldr	r1, [pc, #40]	; (800083c <StartTaskNormal+0x3c>)
 8000812:	480b      	ldr	r0, [pc, #44]	; (8000840 <StartTaskNormal+0x40>)
 8000814:	f004 fbea 	bl	8004fec <siprintf>
    HAL_UART_Transmit(&huart2,(uint8_t*)&NormalTask,sizeof(NormalTask),100);
 8000818:	2364      	movs	r3, #100	; 0x64
 800081a:	223c      	movs	r2, #60	; 0x3c
 800081c:	4908      	ldr	r1, [pc, #32]	; (8000840 <StartTaskNormal+0x40>)
 800081e:	4809      	ldr	r0, [pc, #36]	; (8000844 <StartTaskNormal+0x44>)
 8000820:	f001 fcd9 	bl	80021d6 <HAL_UART_Transmit>

    sprintf(NormalTask,"Leaving Medium Task.\n\r");
 8000824:	4908      	ldr	r1, [pc, #32]	; (8000848 <StartTaskNormal+0x48>)
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <StartTaskNormal+0x40>)
 8000828:	f004 fbe0 	bl	8004fec <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)&NormalTask,sizeof(NormalTask),100);
 800082c:	2364      	movs	r3, #100	; 0x64
 800082e:	223c      	movs	r2, #60	; 0x3c
 8000830:	4903      	ldr	r1, [pc, #12]	; (8000840 <StartTaskNormal+0x40>)
 8000832:	4804      	ldr	r0, [pc, #16]	; (8000844 <StartTaskNormal+0x44>)
 8000834:	f001 fccf 	bl	80021d6 <HAL_UART_Transmit>
    osDelay(5000);
 8000838:	e7e6      	b.n	8000808 <StartTaskNormal+0x8>
 800083a:	bf00      	nop
 800083c:	080059cc 	.word	0x080059cc
 8000840:	20000324 	.word	0x20000324
 8000844:	200002d0 	.word	0x200002d0
 8000848:	080059e4 	.word	0x080059e4

0800084c <StartTaskBelowNormal>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskBelowNormal */
void StartTaskBelowNormal(void const * argument)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskBelowNormal */
  /* Infinite loop */
  for(;;)
  {
    osDelay(5000);
 8000854:	f241 3088 	movw	r0, #5000	; 0x1388
 8000858:	f002 f8af 	bl	80029ba <osDelay>

    sprintf(BelowTask1,"Entering Low Task.\n\r");
 800085c:	4919      	ldr	r1, [pc, #100]	; (80008c4 <StartTaskBelowNormal+0x78>)
 800085e:	481a      	ldr	r0, [pc, #104]	; (80008c8 <StartTaskBelowNormal+0x7c>)
 8000860:	f004 fbc4 	bl	8004fec <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)&BelowTask1,sizeof(BelowTask1),100);
 8000864:	2364      	movs	r3, #100	; 0x64
 8000866:	223c      	movs	r2, #60	; 0x3c
 8000868:	4917      	ldr	r1, [pc, #92]	; (80008c8 <StartTaskBelowNormal+0x7c>)
 800086a:	4818      	ldr	r0, [pc, #96]	; (80008cc <StartTaskBelowNormal+0x80>)
 800086c:	f001 fcb3 	bl	80021d6 <HAL_UART_Transmit>

    osSemaphoreWait(myBinarySem01Handle,osWaitForever);
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <StartTaskBelowNormal+0x84>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f04f 31ff 	mov.w	r1, #4294967295
 8000878:	4618      	mov	r0, r3
 800087a:	f002 f8e5 	bl	8002a48 <osSemaphoreWait>

    sprintf(BelowTask2,"Semaphore acquired by Low Task.\n\r");
 800087e:	4915      	ldr	r1, [pc, #84]	; (80008d4 <StartTaskBelowNormal+0x88>)
 8000880:	4815      	ldr	r0, [pc, #84]	; (80008d8 <StartTaskBelowNormal+0x8c>)
 8000882:	f004 fbb3 	bl	8004fec <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)&BelowTask2,sizeof(BelowTask2),100);
 8000886:	2364      	movs	r3, #100	; 0x64
 8000888:	223c      	movs	r2, #60	; 0x3c
 800088a:	4913      	ldr	r1, [pc, #76]	; (80008d8 <StartTaskBelowNormal+0x8c>)
 800088c:	480f      	ldr	r0, [pc, #60]	; (80008cc <StartTaskBelowNormal+0x80>)
 800088e:	f001 fca2 	bl	80021d6 <HAL_UART_Transmit>

    while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)));
 8000892:	bf00      	nop
 8000894:	2101      	movs	r1, #1
 8000896:	4811      	ldr	r0, [pc, #68]	; (80008dc <StartTaskBelowNormal+0x90>)
 8000898:	f000 fcc0 	bl	800121c <HAL_GPIO_ReadPin>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d0f8      	beq.n	8000894 <StartTaskBelowNormal+0x48>


    sprintf(BelowTask3,"Leaving LOWTask and releasing Semaphore.\n\r");
 80008a2:	490f      	ldr	r1, [pc, #60]	; (80008e0 <StartTaskBelowNormal+0x94>)
 80008a4:	480f      	ldr	r0, [pc, #60]	; (80008e4 <StartTaskBelowNormal+0x98>)
 80008a6:	f004 fba1 	bl	8004fec <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)&BelowTask3,sizeof(BelowTask3),100);
 80008aa:	2364      	movs	r3, #100	; 0x64
 80008ac:	223c      	movs	r2, #60	; 0x3c
 80008ae:	490d      	ldr	r1, [pc, #52]	; (80008e4 <StartTaskBelowNormal+0x98>)
 80008b0:	4806      	ldr	r0, [pc, #24]	; (80008cc <StartTaskBelowNormal+0x80>)
 80008b2:	f001 fc90 	bl	80021d6 <HAL_UART_Transmit>

    osSemaphoreRelease(myBinarySem01Handle);
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <StartTaskBelowNormal+0x84>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f002 f912 	bl	8002ae4 <osSemaphoreRelease>
    osDelay(5000);
 80008c0:	e7c8      	b.n	8000854 <StartTaskBelowNormal+0x8>
 80008c2:	bf00      	nop
 80008c4:	080059fc 	.word	0x080059fc
 80008c8:	20000414 	.word	0x20000414
 80008cc:	200002d0 	.word	0x200002d0
 80008d0:	20000320 	.word	0x20000320
 80008d4:	08005a14 	.word	0x08005a14
 80008d8:	20000450 	.word	0x20000450
 80008dc:	40020000 	.word	0x40020000
 80008e0:	08005a38 	.word	0x08005a38
 80008e4:	2000048c 	.word	0x2000048c

080008e8 <StartTaskAboveNormal>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAboveNormal */
void StartTaskAboveNormal(void const * argument)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskAboveNormal */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(5000);
 80008f0:	f241 3088 	movw	r0, #5000	; 0x1388
 80008f4:	f002 f861 	bl	80029ba <osDelay>

	  sprintf(AboveTask1,"Entering High Task.\n\r");
 80008f8:	4915      	ldr	r1, [pc, #84]	; (8000950 <StartTaskAboveNormal+0x68>)
 80008fa:	4816      	ldr	r0, [pc, #88]	; (8000954 <StartTaskAboveNormal+0x6c>)
 80008fc:	f004 fb76 	bl	8004fec <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)&AboveTask1,sizeof(AboveTask1),100);
 8000900:	2364      	movs	r3, #100	; 0x64
 8000902:	223c      	movs	r2, #60	; 0x3c
 8000904:	4913      	ldr	r1, [pc, #76]	; (8000954 <StartTaskAboveNormal+0x6c>)
 8000906:	4814      	ldr	r0, [pc, #80]	; (8000958 <StartTaskAboveNormal+0x70>)
 8000908:	f001 fc65 	bl	80021d6 <HAL_UART_Transmit>

	  osSemaphoreWait(myBinarySem01Handle,osWaitForever);
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <StartTaskAboveNormal+0x74>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f04f 31ff 	mov.w	r1, #4294967295
 8000914:	4618      	mov	r0, r3
 8000916:	f002 f897 	bl	8002a48 <osSemaphoreWait>

	  sprintf(AboveTask2,"Semaphore acquired by High Task.\n\r");
 800091a:	4911      	ldr	r1, [pc, #68]	; (8000960 <StartTaskAboveNormal+0x78>)
 800091c:	4811      	ldr	r0, [pc, #68]	; (8000964 <StartTaskAboveNormal+0x7c>)
 800091e:	f004 fb65 	bl	8004fec <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)&AboveTask2,sizeof(AboveTask2),100);
 8000922:	2364      	movs	r3, #100	; 0x64
 8000924:	223c      	movs	r2, #60	; 0x3c
 8000926:	490f      	ldr	r1, [pc, #60]	; (8000964 <StartTaskAboveNormal+0x7c>)
 8000928:	480b      	ldr	r0, [pc, #44]	; (8000958 <StartTaskAboveNormal+0x70>)
 800092a:	f001 fc54 	bl	80021d6 <HAL_UART_Transmit>

	  //while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)));


	  sprintf(AboveTask3,"Leaving High Task and releasing Semaphore.\n\r");
 800092e:	490e      	ldr	r1, [pc, #56]	; (8000968 <StartTaskAboveNormal+0x80>)
 8000930:	480e      	ldr	r0, [pc, #56]	; (800096c <StartTaskAboveNormal+0x84>)
 8000932:	f004 fb5b 	bl	8004fec <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)&AboveTask3,sizeof(AboveTask3),100);
 8000936:	2364      	movs	r3, #100	; 0x64
 8000938:	223c      	movs	r2, #60	; 0x3c
 800093a:	490c      	ldr	r1, [pc, #48]	; (800096c <StartTaskAboveNormal+0x84>)
 800093c:	4806      	ldr	r0, [pc, #24]	; (8000958 <StartTaskAboveNormal+0x70>)
 800093e:	f001 fc4a 	bl	80021d6 <HAL_UART_Transmit>

	  osSemaphoreRelease(myBinarySem01Handle);
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <StartTaskAboveNormal+0x74>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4618      	mov	r0, r3
 8000948:	f002 f8cc 	bl	8002ae4 <osSemaphoreRelease>
	  osDelay(5000);
 800094c:	e7d0      	b.n	80008f0 <StartTaskAboveNormal+0x8>
 800094e:	bf00      	nop
 8000950:	08005a64 	.word	0x08005a64
 8000954:	20000360 	.word	0x20000360
 8000958:	200002d0 	.word	0x200002d0
 800095c:	20000320 	.word	0x20000320
 8000960:	08005a7c 	.word	0x08005a7c
 8000964:	2000039c 	.word	0x2000039c
 8000968:	08005aa0 	.word	0x08005aa0
 800096c:	200003d8 	.word	0x200003d8

08000970 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000980:	d101      	bne.n	8000986 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000982:	f000 f9ad 	bl	8000ce0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000992:	b672      	cpsid	i
}
 8000994:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000996:	e7fe      	b.n	8000996 <Error_Handler+0x8>

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <HAL_MspInit+0x54>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a11      	ldr	r2, [pc, #68]	; (80009ec <HAL_MspInit+0x54>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <HAL_MspInit+0x54>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <HAL_MspInit+0x54>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <HAL_MspInit+0x54>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HAL_MspInit+0x54>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	210f      	movs	r1, #15
 80009da:	f06f 0001 	mvn.w	r0, #1
 80009de:	f000 fa57 	bl	8000e90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800

080009f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a19      	ldr	r2, [pc, #100]	; (8000a74 <HAL_UART_MspInit+0x84>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d12b      	bne.n	8000a6a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	4a17      	ldr	r2, [pc, #92]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a20:	6413      	str	r3, [r2, #64]	; 0x40
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a10      	ldr	r2, [pc, #64]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_UART_MspInit+0x88>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a4a:	230c      	movs	r3, #12
 8000a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a5a:	2307      	movs	r3, #7
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <HAL_UART_MspInit+0x8c>)
 8000a66:	f000 fa3d 	bl	8000ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a6a:	bf00      	nop
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40004400 	.word	0x40004400
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020000 	.word	0x40020000

08000a80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08e      	sub	sp, #56	; 0x38
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	4b34      	ldr	r3, [pc, #208]	; (8000b68 <HAL_InitTick+0xe8>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	4a33      	ldr	r2, [pc, #204]	; (8000b68 <HAL_InitTick+0xe8>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa0:	4b31      	ldr	r3, [pc, #196]	; (8000b68 <HAL_InitTick+0xe8>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aac:	f107 0210 	add.w	r2, r7, #16
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 f860 	bl	8001b7c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000abc:	6a3b      	ldr	r3, [r7, #32]
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d103      	bne.n	8000ace <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ac6:	f001 f831 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 8000aca:	6378      	str	r0, [r7, #52]	; 0x34
 8000acc:	e004      	b.n	8000ad8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ace:	f001 f82d 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ada:	4a24      	ldr	r2, [pc, #144]	; (8000b6c <HAL_InitTick+0xec>)
 8000adc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae0:	0c9b      	lsrs	r3, r3, #18
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000ae6:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <HAL_InitTick+0xf0>)
 8000ae8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000aee:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <HAL_InitTick+0xf0>)
 8000af0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000af4:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000af6:	4a1e      	ldr	r2, [pc, #120]	; (8000b70 <HAL_InitTick+0xf0>)
 8000af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000afa:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000afc:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <HAL_InitTick+0xf0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b02:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <HAL_InitTick+0xf0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b08:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <HAL_InitTick+0xf0>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000b0e:	4818      	ldr	r0, [pc, #96]	; (8000b70 <HAL_InitTick+0xf0>)
 8000b10:	f001 f866 	bl	8001be0 <HAL_TIM_Base_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d11b      	bne.n	8000b5a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000b22:	4813      	ldr	r0, [pc, #76]	; (8000b70 <HAL_InitTick+0xf0>)
 8000b24:	f001 f8b6 	bl	8001c94 <HAL_TIM_Base_Start_IT>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d111      	bne.n	8000b5a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b36:	201c      	movs	r0, #28
 8000b38:	f000 f9c6 	bl	8000ec8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b0f      	cmp	r3, #15
 8000b40:	d808      	bhi.n	8000b54 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000b42:	2200      	movs	r2, #0
 8000b44:	6879      	ldr	r1, [r7, #4]
 8000b46:	201c      	movs	r0, #28
 8000b48:	f000 f9a2 	bl	8000e90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b4c:	4a09      	ldr	r2, [pc, #36]	; (8000b74 <HAL_InitTick+0xf4>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6013      	str	r3, [r2, #0]
 8000b52:	e002      	b.n	8000b5a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
 8000b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3738      	adds	r7, #56	; 0x38
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	431bde83 	.word	0x431bde83
 8000b70:	200004c8 	.word	0x200004c8
 8000b74:	20000004 	.word	0x20000004

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <NMI_Handler+0x4>

08000b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <TIM2_IRQHandler+0x10>)
 8000baa:	f001 f8e3 	bl	8001d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200004c8 	.word	0x200004c8

08000bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc0:	4a14      	ldr	r2, [pc, #80]	; (8000c14 <_sbrk+0x5c>)
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <_sbrk+0x60>)
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <_sbrk+0x64>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <_sbrk+0x68>)
 8000bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <_sbrk+0x64>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d207      	bcs.n	8000bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be8:	f004 fa28 	bl	800503c <__errno>
 8000bec:	4603      	mov	r3, r0
 8000bee:	220c      	movs	r2, #12
 8000bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf6:	e009      	b.n	8000c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bfe:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <_sbrk+0x64>)
 8000c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20020000 	.word	0x20020000
 8000c18:	00000400 	.word	0x00000400
 8000c1c:	20000510 	.word	0x20000510
 8000c20:	200043b8 	.word	0x200043b8

08000c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <SystemInit+0x20>)
 8000c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <SystemInit+0x20>)
 8000c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c4e:	490e      	ldr	r1, [pc, #56]	; (8000c88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c50:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c54:	e002      	b.n	8000c5c <LoopCopyDataInit>

08000c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5a:	3304      	adds	r3, #4

08000c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c60:	d3f9      	bcc.n	8000c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c62:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c64:	4c0b      	ldr	r4, [pc, #44]	; (8000c94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c68:	e001      	b.n	8000c6e <LoopFillZerobss>

08000c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c6c:	3204      	adds	r2, #4

08000c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c70:	d3fb      	bcc.n	8000c6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c72:	f7ff ffd7 	bl	8000c24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c76:	f004 f9e7 	bl	8005048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7a:	f7ff fc91 	bl	80005a0 <main>
  bx  lr    
 8000c7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c8c:	08005b34 	.word	0x08005b34
  ldr r2, =_sbss
 8000c90:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c94:	200043b4 	.word	0x200043b4

08000c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC_IRQHandler>
	...

08000c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	; (8000cdc <HAL_Init+0x40>)
 8000ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <HAL_Init+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <HAL_Init+0x40>)
 8000cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <HAL_Init+0x40>)
 8000cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f000 f8d8 	bl	8000e7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cca:	200f      	movs	r0, #15
 8000ccc:	f7ff fed8 	bl	8000a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd0:	f7ff fe62 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023c00 	.word	0x40023c00

08000ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x20>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_IncTick+0x24>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <HAL_IncTick+0x24>)
 8000cf2:	6013      	str	r3, [r2, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000008 	.word	0x20000008
 8000d04:	20000514 	.word	0x20000514

08000d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <HAL_GetTick+0x14>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000514 	.word	0x20000514

08000d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d52:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	60d3      	str	r3, [r2, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <__NVIC_GetPriorityGrouping+0x18>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	f003 0307 	and.w	r3, r3, #7
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	db0b      	blt.n	8000dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	4907      	ldr	r1, [pc, #28]	; (8000dbc <__NVIC_EnableIRQ+0x38>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	2001      	movs	r0, #1
 8000da6:	fa00 f202 	lsl.w	r2, r0, r2
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	; (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	; (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	; 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ff4c 	bl	8000d20 <__NVIC_SetPriorityGrouping>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea2:	f7ff ff61 	bl	8000d68 <__NVIC_GetPriorityGrouping>
 8000ea6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	68b9      	ldr	r1, [r7, #8]
 8000eac:	6978      	ldr	r0, [r7, #20]
 8000eae:	f7ff ffb1 	bl	8000e14 <NVIC_EncodePriority>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb8:	4611      	mov	r1, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ff80 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000ec0:	bf00      	nop
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff54 	bl	8000d84 <__NVIC_EnableIRQ>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
 8000efe:	e16b      	b.n	80011d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f00:	2201      	movs	r2, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	f040 815a 	bne.w	80011d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d005      	beq.n	8000f36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d130      	bne.n	8000f98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	68da      	ldr	r2, [r3, #12]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	091b      	lsrs	r3, r3, #4
 8000f82:	f003 0201 	and.w	r2, r3, #1
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d017      	beq.n	8000fd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d123      	bne.n	8001028 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	08da      	lsrs	r2, r3, #3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3208      	adds	r2, #8
 8000fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	220f      	movs	r2, #15
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	691a      	ldr	r2, [r3, #16]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	08da      	lsrs	r2, r3, #3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3208      	adds	r2, #8
 8001022:	69b9      	ldr	r1, [r7, #24]
 8001024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0203 	and.w	r2, r3, #3
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 80b4 	beq.w	80011d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b60      	ldr	r3, [pc, #384]	; (80011f0 <HAL_GPIO_Init+0x30c>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a5f      	ldr	r2, [pc, #380]	; (80011f0 <HAL_GPIO_Init+0x30c>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b5d      	ldr	r3, [pc, #372]	; (80011f0 <HAL_GPIO_Init+0x30c>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001086:	4a5b      	ldr	r2, [pc, #364]	; (80011f4 <HAL_GPIO_Init+0x310>)
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	3302      	adds	r3, #2
 800108e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a52      	ldr	r2, [pc, #328]	; (80011f8 <HAL_GPIO_Init+0x314>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d02b      	beq.n	800110a <HAL_GPIO_Init+0x226>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a51      	ldr	r2, [pc, #324]	; (80011fc <HAL_GPIO_Init+0x318>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d025      	beq.n	8001106 <HAL_GPIO_Init+0x222>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a50      	ldr	r2, [pc, #320]	; (8001200 <HAL_GPIO_Init+0x31c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d01f      	beq.n	8001102 <HAL_GPIO_Init+0x21e>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4f      	ldr	r2, [pc, #316]	; (8001204 <HAL_GPIO_Init+0x320>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d019      	beq.n	80010fe <HAL_GPIO_Init+0x21a>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4e      	ldr	r2, [pc, #312]	; (8001208 <HAL_GPIO_Init+0x324>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d013      	beq.n	80010fa <HAL_GPIO_Init+0x216>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4d      	ldr	r2, [pc, #308]	; (800120c <HAL_GPIO_Init+0x328>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d00d      	beq.n	80010f6 <HAL_GPIO_Init+0x212>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4c      	ldr	r2, [pc, #304]	; (8001210 <HAL_GPIO_Init+0x32c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d007      	beq.n	80010f2 <HAL_GPIO_Init+0x20e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4b      	ldr	r2, [pc, #300]	; (8001214 <HAL_GPIO_Init+0x330>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d101      	bne.n	80010ee <HAL_GPIO_Init+0x20a>
 80010ea:	2307      	movs	r3, #7
 80010ec:	e00e      	b.n	800110c <HAL_GPIO_Init+0x228>
 80010ee:	2308      	movs	r3, #8
 80010f0:	e00c      	b.n	800110c <HAL_GPIO_Init+0x228>
 80010f2:	2306      	movs	r3, #6
 80010f4:	e00a      	b.n	800110c <HAL_GPIO_Init+0x228>
 80010f6:	2305      	movs	r3, #5
 80010f8:	e008      	b.n	800110c <HAL_GPIO_Init+0x228>
 80010fa:	2304      	movs	r3, #4
 80010fc:	e006      	b.n	800110c <HAL_GPIO_Init+0x228>
 80010fe:	2303      	movs	r3, #3
 8001100:	e004      	b.n	800110c <HAL_GPIO_Init+0x228>
 8001102:	2302      	movs	r3, #2
 8001104:	e002      	b.n	800110c <HAL_GPIO_Init+0x228>
 8001106:	2301      	movs	r3, #1
 8001108:	e000      	b.n	800110c <HAL_GPIO_Init+0x228>
 800110a:	2300      	movs	r3, #0
 800110c:	69fa      	ldr	r2, [r7, #28]
 800110e:	f002 0203 	and.w	r2, r2, #3
 8001112:	0092      	lsls	r2, r2, #2
 8001114:	4093      	lsls	r3, r2
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800111c:	4935      	ldr	r1, [pc, #212]	; (80011f4 <HAL_GPIO_Init+0x310>)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	3302      	adds	r3, #2
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800112a:	4b3b      	ldr	r3, [pc, #236]	; (8001218 <HAL_GPIO_Init+0x334>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800114e:	4a32      	ldr	r2, [pc, #200]	; (8001218 <HAL_GPIO_Init+0x334>)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001154:	4b30      	ldr	r3, [pc, #192]	; (8001218 <HAL_GPIO_Init+0x334>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001178:	4a27      	ldr	r2, [pc, #156]	; (8001218 <HAL_GPIO_Init+0x334>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800117e:	4b26      	ldr	r3, [pc, #152]	; (8001218 <HAL_GPIO_Init+0x334>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011a2:	4a1d      	ldr	r2, [pc, #116]	; (8001218 <HAL_GPIO_Init+0x334>)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <HAL_GPIO_Init+0x334>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011cc:	4a12      	ldr	r2, [pc, #72]	; (8001218 <HAL_GPIO_Init+0x334>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3301      	adds	r3, #1
 80011d6:	61fb      	str	r3, [r7, #28]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	2b0f      	cmp	r3, #15
 80011dc:	f67f ae90 	bls.w	8000f00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40013800 	.word	0x40013800
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40020400 	.word	0x40020400
 8001200:	40020800 	.word	0x40020800
 8001204:	40020c00 	.word	0x40020c00
 8001208:	40021000 	.word	0x40021000
 800120c:	40021400 	.word	0x40021400
 8001210:	40021800 	.word	0x40021800
 8001214:	40021c00 	.word	0x40021c00
 8001218:	40013c00 	.word	0x40013c00

0800121c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	691a      	ldr	r2, [r3, #16]
 800122c:	887b      	ldrh	r3, [r7, #2]
 800122e:	4013      	ands	r3, r2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d002      	beq.n	800123a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001234:	2301      	movs	r3, #1
 8001236:	73fb      	strb	r3, [r7, #15]
 8001238:	e001      	b.n	800123e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800123a:	2300      	movs	r3, #0
 800123c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e267      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d075      	beq.n	8001356 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800126a:	4b88      	ldr	r3, [pc, #544]	; (800148c <HAL_RCC_OscConfig+0x240>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 030c 	and.w	r3, r3, #12
 8001272:	2b04      	cmp	r3, #4
 8001274:	d00c      	beq.n	8001290 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001276:	4b85      	ldr	r3, [pc, #532]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800127e:	2b08      	cmp	r3, #8
 8001280:	d112      	bne.n	80012a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001282:	4b82      	ldr	r3, [pc, #520]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800128e:	d10b      	bne.n	80012a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001290:	4b7e      	ldr	r3, [pc, #504]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d05b      	beq.n	8001354 <HAL_RCC_OscConfig+0x108>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d157      	bne.n	8001354 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e242      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b0:	d106      	bne.n	80012c0 <HAL_RCC_OscConfig+0x74>
 80012b2:	4b76      	ldr	r3, [pc, #472]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a75      	ldr	r2, [pc, #468]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e01d      	b.n	80012fc <HAL_RCC_OscConfig+0xb0>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c8:	d10c      	bne.n	80012e4 <HAL_RCC_OscConfig+0x98>
 80012ca:	4b70      	ldr	r3, [pc, #448]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a6f      	ldr	r2, [pc, #444]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b6d      	ldr	r3, [pc, #436]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a6c      	ldr	r2, [pc, #432]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e00b      	b.n	80012fc <HAL_RCC_OscConfig+0xb0>
 80012e4:	4b69      	ldr	r3, [pc, #420]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a68      	ldr	r2, [pc, #416]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b66      	ldr	r3, [pc, #408]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a65      	ldr	r2, [pc, #404]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d013      	beq.n	800132c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fd00 	bl	8000d08 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800130c:	f7ff fcfc 	bl	8000d08 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	; 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e207      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	4b5b      	ldr	r3, [pc, #364]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0xc0>
 800132a:	e014      	b.n	8001356 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fcec 	bl	8000d08 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fce8 	bl	8000d08 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	; 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e1f3      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001346:	4b51      	ldr	r3, [pc, #324]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0xe8>
 8001352:	e000      	b.n	8001356 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d063      	beq.n	800142a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001362:	4b4a      	ldr	r3, [pc, #296]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00b      	beq.n	8001386 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800136e:	4b47      	ldr	r3, [pc, #284]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001376:	2b08      	cmp	r3, #8
 8001378:	d11c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800137a:	4b44      	ldr	r3, [pc, #272]	; (800148c <HAL_RCC_OscConfig+0x240>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d116      	bne.n	80013b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001386:	4b41      	ldr	r3, [pc, #260]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d005      	beq.n	800139e <HAL_RCC_OscConfig+0x152>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d001      	beq.n	800139e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e1c7      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139e:	4b3b      	ldr	r3, [pc, #236]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4937      	ldr	r1, [pc, #220]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b2:	e03a      	b.n	800142a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d020      	beq.n	80013fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013bc:	4b34      	ldr	r3, [pc, #208]	; (8001490 <HAL_RCC_OscConfig+0x244>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c2:	f7ff fca1 	bl	8000d08 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ca:	f7ff fc9d 	bl	8000d08 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e1a8      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013dc:	4b2b      	ldr	r3, [pc, #172]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e8:	4b28      	ldr	r3, [pc, #160]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4925      	ldr	r1, [pc, #148]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	600b      	str	r3, [r1, #0]
 80013fc:	e015      	b.n	800142a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fe:	4b24      	ldr	r3, [pc, #144]	; (8001490 <HAL_RCC_OscConfig+0x244>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001404:	f7ff fc80 	bl	8000d08 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140c:	f7ff fc7c 	bl	8000d08 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e187      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141e:	4b1b      	ldr	r3, [pc, #108]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d036      	beq.n	80014a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d016      	beq.n	800146c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <HAL_RCC_OscConfig+0x248>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001444:	f7ff fc60 	bl	8000d08 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144c:	f7ff fc5c 	bl	8000d08 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e167      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x200>
 800146a:	e01b      	b.n	80014a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HAL_RCC_OscConfig+0x248>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001472:	f7ff fc49 	bl	8000d08 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001478:	e00e      	b.n	8001498 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147a:	f7ff fc45 	bl	8000d08 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d907      	bls.n	8001498 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e150      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
 800148c:	40023800 	.word	0x40023800
 8001490:	42470000 	.word	0x42470000
 8001494:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001498:	4b88      	ldr	r3, [pc, #544]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800149a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1ea      	bne.n	800147a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 8097 	beq.w	80015e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b6:	4b81      	ldr	r3, [pc, #516]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10f      	bne.n	80014e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	4b7d      	ldr	r3, [pc, #500]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	4a7c      	ldr	r2, [pc, #496]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d0:	6413      	str	r3, [r2, #64]	; 0x40
 80014d2:	4b7a      	ldr	r3, [pc, #488]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014de:	2301      	movs	r3, #1
 80014e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e2:	4b77      	ldr	r3, [pc, #476]	; (80016c0 <HAL_RCC_OscConfig+0x474>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d118      	bne.n	8001520 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ee:	4b74      	ldr	r3, [pc, #464]	; (80016c0 <HAL_RCC_OscConfig+0x474>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a73      	ldr	r2, [pc, #460]	; (80016c0 <HAL_RCC_OscConfig+0x474>)
 80014f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fa:	f7ff fc05 	bl	8000d08 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001502:	f7ff fc01 	bl	8000d08 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e10c      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001514:	4b6a      	ldr	r3, [pc, #424]	; (80016c0 <HAL_RCC_OscConfig+0x474>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d106      	bne.n	8001536 <HAL_RCC_OscConfig+0x2ea>
 8001528:	4b64      	ldr	r3, [pc, #400]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800152a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152c:	4a63      	ldr	r2, [pc, #396]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6713      	str	r3, [r2, #112]	; 0x70
 8001534:	e01c      	b.n	8001570 <HAL_RCC_OscConfig+0x324>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b05      	cmp	r3, #5
 800153c:	d10c      	bne.n	8001558 <HAL_RCC_OscConfig+0x30c>
 800153e:	4b5f      	ldr	r3, [pc, #380]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001542:	4a5e      	ldr	r2, [pc, #376]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	6713      	str	r3, [r2, #112]	; 0x70
 800154a:	4b5c      	ldr	r3, [pc, #368]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800154c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154e:	4a5b      	ldr	r2, [pc, #364]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6713      	str	r3, [r2, #112]	; 0x70
 8001556:	e00b      	b.n	8001570 <HAL_RCC_OscConfig+0x324>
 8001558:	4b58      	ldr	r3, [pc, #352]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800155a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155c:	4a57      	ldr	r2, [pc, #348]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800155e:	f023 0301 	bic.w	r3, r3, #1
 8001562:	6713      	str	r3, [r2, #112]	; 0x70
 8001564:	4b55      	ldr	r3, [pc, #340]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001568:	4a54      	ldr	r2, [pc, #336]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800156a:	f023 0304 	bic.w	r3, r3, #4
 800156e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d015      	beq.n	80015a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001578:	f7ff fbc6 	bl	8000d08 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157e:	e00a      	b.n	8001596 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001580:	f7ff fbc2 	bl	8000d08 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	f241 3288 	movw	r2, #5000	; 0x1388
 800158e:	4293      	cmp	r3, r2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e0cb      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001596:	4b49      	ldr	r3, [pc, #292]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0ee      	beq.n	8001580 <HAL_RCC_OscConfig+0x334>
 80015a2:	e014      	b.n	80015ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a4:	f7ff fbb0 	bl	8000d08 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015aa:	e00a      	b.n	80015c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ac:	f7ff fbac 	bl	8000d08 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e0b5      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c2:	4b3e      	ldr	r3, [pc, #248]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1ee      	bne.n	80015ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015ce:	7dfb      	ldrb	r3, [r7, #23]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d105      	bne.n	80015e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d4:	4b39      	ldr	r3, [pc, #228]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	4a38      	ldr	r2, [pc, #224]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80015da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 80a1 	beq.w	800172c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ea:	4b34      	ldr	r3, [pc, #208]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d05c      	beq.n	80016b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d141      	bne.n	8001682 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fe:	4b31      	ldr	r3, [pc, #196]	; (80016c4 <HAL_RCC_OscConfig+0x478>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fb80 	bl	8000d08 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160c:	f7ff fb7c 	bl	8000d08 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e087      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161e:	4b27      	ldr	r3, [pc, #156]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69da      	ldr	r2, [r3, #28]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	019b      	lsls	r3, r3, #6
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001640:	085b      	lsrs	r3, r3, #1
 8001642:	3b01      	subs	r3, #1
 8001644:	041b      	lsls	r3, r3, #16
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164c:	061b      	lsls	r3, r3, #24
 800164e:	491b      	ldr	r1, [pc, #108]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001650:	4313      	orrs	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_RCC_OscConfig+0x478>)
 8001656:	2201      	movs	r2, #1
 8001658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff fb55 	bl	8000d08 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001662:	f7ff fb51 	bl	8000d08 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e05c      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x416>
 8001680:	e054      	b.n	800172c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <HAL_RCC_OscConfig+0x478>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fb3e 	bl	8000d08 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff fb3a 	bl	8000d08 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e045      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x444>
 80016ae:	e03d      	b.n	800172c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d107      	bne.n	80016c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e038      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40007000 	.word	0x40007000
 80016c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <HAL_RCC_OscConfig+0x4ec>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d028      	beq.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d121      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d11a      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016f8:	4013      	ands	r3, r2
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001700:	4293      	cmp	r3, r2
 8001702:	d111      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170e:	085b      	lsrs	r3, r3, #1
 8001710:	3b01      	subs	r3, #1
 8001712:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001714:	429a      	cmp	r2, r3
 8001716:	d107      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800

0800173c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0cc      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001750:	4b68      	ldr	r3, [pc, #416]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d90c      	bls.n	8001778 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b65      	ldr	r3, [pc, #404]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001766:	4b63      	ldr	r3, [pc, #396]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d001      	beq.n	8001778 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0b8      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d020      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001790:	4b59      	ldr	r3, [pc, #356]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4a58      	ldr	r2, [pc, #352]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800179a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a8:	4b53      	ldr	r3, [pc, #332]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	4a52      	ldr	r2, [pc, #328]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b4:	4b50      	ldr	r3, [pc, #320]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	494d      	ldr	r1, [pc, #308]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d044      	beq.n	800185c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d107      	bne.n	80017ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	4b47      	ldr	r3, [pc, #284]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d119      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e07f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d003      	beq.n	80017fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fa:	4b3f      	ldr	r3, [pc, #252]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d109      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e06f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180a:	4b3b      	ldr	r3, [pc, #236]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e067      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181a:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f023 0203 	bic.w	r2, r3, #3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4934      	ldr	r1, [pc, #208]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	4313      	orrs	r3, r2
 800182a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800182c:	f7ff fa6c 	bl	8000d08 <HAL_GetTick>
 8001830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001832:	e00a      	b.n	800184a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001834:	f7ff fa68 	bl	8000d08 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e04f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184a:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 020c 	and.w	r2, r3, #12
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	429a      	cmp	r2, r3
 800185a:	d1eb      	bne.n	8001834 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800185c:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d20c      	bcs.n	8001884 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186a:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001872:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e032      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d008      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	4916      	ldr	r1, [pc, #88]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d009      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	490e      	ldr	r1, [pc, #56]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018c2:	f000 f821 	bl	8001908 <HAL_RCC_GetSysClockFreq>
 80018c6:	4602      	mov	r2, r0
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	490a      	ldr	r1, [pc, #40]	; (80018fc <HAL_RCC_ClockConfig+0x1c0>)
 80018d4:	5ccb      	ldrb	r3, [r1, r3]
 80018d6:	fa22 f303 	lsr.w	r3, r2, r3
 80018da:	4a09      	ldr	r2, [pc, #36]	; (8001900 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <HAL_RCC_ClockConfig+0x1c8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff f8cc 	bl	8000a80 <HAL_InitTick>

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023c00 	.word	0x40023c00
 80018f8:	40023800 	.word	0x40023800
 80018fc:	08005ad8 	.word	0x08005ad8
 8001900:	20000000 	.word	0x20000000
 8001904:	20000004 	.word	0x20000004

08001908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800190c:	b094      	sub	sp, #80	; 0x50
 800190e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	647b      	str	r3, [r7, #68]	; 0x44
 8001914:	2300      	movs	r3, #0
 8001916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001918:	2300      	movs	r3, #0
 800191a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001920:	4b79      	ldr	r3, [pc, #484]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b08      	cmp	r3, #8
 800192a:	d00d      	beq.n	8001948 <HAL_RCC_GetSysClockFreq+0x40>
 800192c:	2b08      	cmp	r3, #8
 800192e:	f200 80e1 	bhi.w	8001af4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x34>
 8001936:	2b04      	cmp	r3, #4
 8001938:	d003      	beq.n	8001942 <HAL_RCC_GetSysClockFreq+0x3a>
 800193a:	e0db      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800193c:	4b73      	ldr	r3, [pc, #460]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x204>)
 800193e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001940:	e0db      	b.n	8001afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001942:	4b73      	ldr	r3, [pc, #460]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x208>)
 8001944:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001946:	e0d8      	b.n	8001afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001948:	4b6f      	ldr	r3, [pc, #444]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001950:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001952:	4b6d      	ldr	r3, [pc, #436]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d063      	beq.n	8001a26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800195e:	4b6a      	ldr	r3, [pc, #424]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	099b      	lsrs	r3, r3, #6
 8001964:	2200      	movs	r2, #0
 8001966:	63bb      	str	r3, [r7, #56]	; 0x38
 8001968:	63fa      	str	r2, [r7, #60]	; 0x3c
 800196a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800196c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001970:	633b      	str	r3, [r7, #48]	; 0x30
 8001972:	2300      	movs	r3, #0
 8001974:	637b      	str	r3, [r7, #52]	; 0x34
 8001976:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800197a:	4622      	mov	r2, r4
 800197c:	462b      	mov	r3, r5
 800197e:	f04f 0000 	mov.w	r0, #0
 8001982:	f04f 0100 	mov.w	r1, #0
 8001986:	0159      	lsls	r1, r3, #5
 8001988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800198c:	0150      	lsls	r0, r2, #5
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4621      	mov	r1, r4
 8001994:	1a51      	subs	r1, r2, r1
 8001996:	6139      	str	r1, [r7, #16]
 8001998:	4629      	mov	r1, r5
 800199a:	eb63 0301 	sbc.w	r3, r3, r1
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019ac:	4659      	mov	r1, fp
 80019ae:	018b      	lsls	r3, r1, #6
 80019b0:	4651      	mov	r1, sl
 80019b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019b6:	4651      	mov	r1, sl
 80019b8:	018a      	lsls	r2, r1, #6
 80019ba:	4651      	mov	r1, sl
 80019bc:	ebb2 0801 	subs.w	r8, r2, r1
 80019c0:	4659      	mov	r1, fp
 80019c2:	eb63 0901 	sbc.w	r9, r3, r1
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019da:	4690      	mov	r8, r2
 80019dc:	4699      	mov	r9, r3
 80019de:	4623      	mov	r3, r4
 80019e0:	eb18 0303 	adds.w	r3, r8, r3
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	462b      	mov	r3, r5
 80019e8:	eb49 0303 	adc.w	r3, r9, r3
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019fa:	4629      	mov	r1, r5
 80019fc:	024b      	lsls	r3, r1, #9
 80019fe:	4621      	mov	r1, r4
 8001a00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a04:	4621      	mov	r1, r4
 8001a06:	024a      	lsls	r2, r1, #9
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a0e:	2200      	movs	r2, #0
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a18:	f7fe fc2a 	bl	8000270 <__aeabi_uldivmod>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4613      	mov	r3, r2
 8001a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a24:	e058      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a26:	4b38      	ldr	r3, [pc, #224]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	099b      	lsrs	r3, r3, #6
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	4611      	mov	r1, r2
 8001a32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a36:	623b      	str	r3, [r7, #32]
 8001a38:	2300      	movs	r3, #0
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a40:	4642      	mov	r2, r8
 8001a42:	464b      	mov	r3, r9
 8001a44:	f04f 0000 	mov.w	r0, #0
 8001a48:	f04f 0100 	mov.w	r1, #0
 8001a4c:	0159      	lsls	r1, r3, #5
 8001a4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a52:	0150      	lsls	r0, r2, #5
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4641      	mov	r1, r8
 8001a5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a5e:	4649      	mov	r1, r9
 8001a60:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a78:	ebb2 040a 	subs.w	r4, r2, sl
 8001a7c:	eb63 050b 	sbc.w	r5, r3, fp
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	00eb      	lsls	r3, r5, #3
 8001a8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a8e:	00e2      	lsls	r2, r4, #3
 8001a90:	4614      	mov	r4, r2
 8001a92:	461d      	mov	r5, r3
 8001a94:	4643      	mov	r3, r8
 8001a96:	18e3      	adds	r3, r4, r3
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	464b      	mov	r3, r9
 8001a9c:	eb45 0303 	adc.w	r3, r5, r3
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aae:	4629      	mov	r1, r5
 8001ab0:	028b      	lsls	r3, r1, #10
 8001ab2:	4621      	mov	r1, r4
 8001ab4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ab8:	4621      	mov	r1, r4
 8001aba:	028a      	lsls	r2, r1, #10
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
 8001ac6:	61fa      	str	r2, [r7, #28]
 8001ac8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001acc:	f7fe fbd0 	bl	8000270 <__aeabi_uldivmod>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	0c1b      	lsrs	r3, r3, #16
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ae8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001af2:	e002      	b.n	8001afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x204>)
 8001af6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3750      	adds	r7, #80	; 0x50
 8001b00:	46bd      	mov	sp, r7
 8001b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	00f42400 	.word	0x00f42400
 8001b10:	007a1200 	.word	0x007a1200

08001b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b18:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000000 	.word	0x20000000

08001b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b30:	f7ff fff0 	bl	8001b14 <HAL_RCC_GetHCLKFreq>
 8001b34:	4602      	mov	r2, r0
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	0a9b      	lsrs	r3, r3, #10
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	4903      	ldr	r1, [pc, #12]	; (8001b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b42:	5ccb      	ldrb	r3, [r1, r3]
 8001b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	08005ae8 	.word	0x08005ae8

08001b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b58:	f7ff ffdc 	bl	8001b14 <HAL_RCC_GetHCLKFreq>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	0b5b      	lsrs	r3, r3, #13
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	4903      	ldr	r1, [pc, #12]	; (8001b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b6a:	5ccb      	ldrb	r3, [r1, r3]
 8001b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40023800 	.word	0x40023800
 8001b78:	08005ae8 	.word	0x08005ae8

08001b7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	220f      	movs	r2, #15
 8001b8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0203 	and.w	r2, r3, #3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b98:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	08db      	lsrs	r3, r3, #3
 8001bb6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <HAL_RCC_GetClockConfig+0x60>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0207 	and.w	r2, r3, #7
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	601a      	str	r2, [r3, #0]
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e041      	b.n	8001c76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d106      	bne.n	8001c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f839 	bl	8001c7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4610      	mov	r0, r2
 8001c20:	f000 f9d8 	bl	8001fd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d001      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e04e      	b.n	8001d4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2202      	movs	r2, #2
 8001cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d022      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x80>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd6:	d01d      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x80>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a1f      	ldr	r2, [pc, #124]	; (8001d5c <HAL_TIM_Base_Start_IT+0xc8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d018      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x80>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a1e      	ldr	r2, [pc, #120]	; (8001d60 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d013      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x80>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a1c      	ldr	r2, [pc, #112]	; (8001d64 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00e      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x80>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a1b      	ldr	r2, [pc, #108]	; (8001d68 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d009      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x80>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a19      	ldr	r2, [pc, #100]	; (8001d6c <HAL_TIM_Base_Start_IT+0xd8>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d004      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x80>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a18      	ldr	r2, [pc, #96]	; (8001d70 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d111      	bne.n	8001d38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d010      	beq.n	8001d48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f042 0201 	orr.w	r2, r2, #1
 8001d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d36:	e007      	b.n	8001d48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40010000 	.word	0x40010000
 8001d5c:	40000400 	.word	0x40000400
 8001d60:	40000800 	.word	0x40000800
 8001d64:	40000c00 	.word	0x40000c00
 8001d68:	40010400 	.word	0x40010400
 8001d6c:	40014000 	.word	0x40014000
 8001d70:	40001800 	.word	0x40001800

08001d74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d122      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d11b      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0202 	mvn.w	r2, #2
 8001da0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f8ee 	bl	8001f98 <HAL_TIM_IC_CaptureCallback>
 8001dbc:	e005      	b.n	8001dca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f8e0 	bl	8001f84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f8f1 	bl	8001fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d122      	bne.n	8001e24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d11b      	bne.n	8001e24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f06f 0204 	mvn.w	r2, #4
 8001df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2202      	movs	r2, #2
 8001dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f8c4 	bl	8001f98 <HAL_TIM_IC_CaptureCallback>
 8001e10:	e005      	b.n	8001e1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f8b6 	bl	8001f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f8c7 	bl	8001fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d122      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d11b      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0208 	mvn.w	r2, #8
 8001e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f89a 	bl	8001f98 <HAL_TIM_IC_CaptureCallback>
 8001e64:	e005      	b.n	8001e72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f88c 	bl	8001f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f89d 	bl	8001fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b10      	cmp	r3, #16
 8001e84:	d122      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	2b10      	cmp	r3, #16
 8001e92:	d11b      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0210 	mvn.w	r2, #16
 8001e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2208      	movs	r2, #8
 8001ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f870 	bl	8001f98 <HAL_TIM_IC_CaptureCallback>
 8001eb8:	e005      	b.n	8001ec6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f862 	bl	8001f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f873 	bl	8001fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d10e      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d107      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f06f 0201 	mvn.w	r2, #1
 8001ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7fe fd3c 	bl	8000970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f02:	2b80      	cmp	r3, #128	; 0x80
 8001f04:	d10e      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f10:	2b80      	cmp	r3, #128	; 0x80
 8001f12:	d107      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f902 	bl	8002128 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2e:	2b40      	cmp	r3, #64	; 0x40
 8001f30:	d10e      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3c:	2b40      	cmp	r3, #64	; 0x40
 8001f3e:	d107      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f838 	bl	8001fc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f003 0320 	and.w	r3, r3, #32
 8001f5a:	2b20      	cmp	r3, #32
 8001f5c:	d10e      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f003 0320 	and.w	r3, r3, #32
 8001f68:	2b20      	cmp	r3, #32
 8001f6a:	d107      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0220 	mvn.w	r2, #32
 8001f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f8cc 	bl	8002114 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a40      	ldr	r2, [pc, #256]	; (80020e8 <TIM_Base_SetConfig+0x114>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d013      	beq.n	8002014 <TIM_Base_SetConfig+0x40>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff2:	d00f      	beq.n	8002014 <TIM_Base_SetConfig+0x40>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a3d      	ldr	r2, [pc, #244]	; (80020ec <TIM_Base_SetConfig+0x118>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d00b      	beq.n	8002014 <TIM_Base_SetConfig+0x40>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a3c      	ldr	r2, [pc, #240]	; (80020f0 <TIM_Base_SetConfig+0x11c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d007      	beq.n	8002014 <TIM_Base_SetConfig+0x40>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a3b      	ldr	r2, [pc, #236]	; (80020f4 <TIM_Base_SetConfig+0x120>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d003      	beq.n	8002014 <TIM_Base_SetConfig+0x40>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a3a      	ldr	r2, [pc, #232]	; (80020f8 <TIM_Base_SetConfig+0x124>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d108      	bne.n	8002026 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800201a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4313      	orrs	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a2f      	ldr	r2, [pc, #188]	; (80020e8 <TIM_Base_SetConfig+0x114>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d02b      	beq.n	8002086 <TIM_Base_SetConfig+0xb2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002034:	d027      	beq.n	8002086 <TIM_Base_SetConfig+0xb2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a2c      	ldr	r2, [pc, #176]	; (80020ec <TIM_Base_SetConfig+0x118>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d023      	beq.n	8002086 <TIM_Base_SetConfig+0xb2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a2b      	ldr	r2, [pc, #172]	; (80020f0 <TIM_Base_SetConfig+0x11c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d01f      	beq.n	8002086 <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a2a      	ldr	r2, [pc, #168]	; (80020f4 <TIM_Base_SetConfig+0x120>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d01b      	beq.n	8002086 <TIM_Base_SetConfig+0xb2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a29      	ldr	r2, [pc, #164]	; (80020f8 <TIM_Base_SetConfig+0x124>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d017      	beq.n	8002086 <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a28      	ldr	r2, [pc, #160]	; (80020fc <TIM_Base_SetConfig+0x128>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d013      	beq.n	8002086 <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a27      	ldr	r2, [pc, #156]	; (8002100 <TIM_Base_SetConfig+0x12c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00f      	beq.n	8002086 <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a26      	ldr	r2, [pc, #152]	; (8002104 <TIM_Base_SetConfig+0x130>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00b      	beq.n	8002086 <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a25      	ldr	r2, [pc, #148]	; (8002108 <TIM_Base_SetConfig+0x134>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d007      	beq.n	8002086 <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a24      	ldr	r2, [pc, #144]	; (800210c <TIM_Base_SetConfig+0x138>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d003      	beq.n	8002086 <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a23      	ldr	r2, [pc, #140]	; (8002110 <TIM_Base_SetConfig+0x13c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d108      	bne.n	8002098 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800208c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4313      	orrs	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <TIM_Base_SetConfig+0x114>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d003      	beq.n	80020cc <TIM_Base_SetConfig+0xf8>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a0c      	ldr	r2, [pc, #48]	; (80020f8 <TIM_Base_SetConfig+0x124>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d103      	bne.n	80020d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	615a      	str	r2, [r3, #20]
}
 80020da:	bf00      	nop
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40010000 	.word	0x40010000
 80020ec:	40000400 	.word	0x40000400
 80020f0:	40000800 	.word	0x40000800
 80020f4:	40000c00 	.word	0x40000c00
 80020f8:	40010400 	.word	0x40010400
 80020fc:	40014000 	.word	0x40014000
 8002100:	40014400 	.word	0x40014400
 8002104:	40014800 	.word	0x40014800
 8002108:	40001800 	.word	0x40001800
 800210c:	40001c00 	.word	0x40001c00
 8002110:	40002000 	.word	0x40002000

08002114 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e03f      	b.n	80021ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d106      	bne.n	8002168 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7fe fc44 	bl	80009f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2224      	movs	r2, #36	; 0x24
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800217e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f929 	bl	80023d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002194:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	695a      	ldr	r2, [r3, #20]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2220      	movs	r2, #32
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b08a      	sub	sp, #40	; 0x28
 80021da:	af02      	add	r7, sp, #8
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	603b      	str	r3, [r7, #0]
 80021e2:	4613      	mov	r3, r2
 80021e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b20      	cmp	r3, #32
 80021f4:	d17c      	bne.n	80022f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <HAL_UART_Transmit+0x2c>
 80021fc:	88fb      	ldrh	r3, [r7, #6]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e075      	b.n	80022f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_UART_Transmit+0x3e>
 8002210:	2302      	movs	r3, #2
 8002212:	e06e      	b.n	80022f2 <HAL_UART_Transmit+0x11c>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2221      	movs	r2, #33	; 0x21
 8002226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800222a:	f7fe fd6d 	bl	8000d08 <HAL_GetTick>
 800222e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	88fa      	ldrh	r2, [r7, #6]
 8002234:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	88fa      	ldrh	r2, [r7, #6]
 800223a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002244:	d108      	bne.n	8002258 <HAL_UART_Transmit+0x82>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d104      	bne.n	8002258 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	61bb      	str	r3, [r7, #24]
 8002256:	e003      	b.n	8002260 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002268:	e02a      	b.n	80022c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	2200      	movs	r2, #0
 8002272:	2180      	movs	r1, #128	; 0x80
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 f840 	bl	80022fa <UART_WaitOnFlagUntilTimeout>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e036      	b.n	80022f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10b      	bne.n	80022a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002298:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	3302      	adds	r3, #2
 800229e:	61bb      	str	r3, [r7, #24]
 80022a0:	e007      	b.n	80022b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	781a      	ldrb	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	3301      	adds	r3, #1
 80022b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1cf      	bne.n	800226a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	2200      	movs	r2, #0
 80022d2:	2140      	movs	r1, #64	; 0x40
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 f810 	bl	80022fa <UART_WaitOnFlagUntilTimeout>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e006      	b.n	80022f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	e000      	b.n	80022f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022f0:	2302      	movs	r3, #2
  }
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3720      	adds	r7, #32
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b090      	sub	sp, #64	; 0x40
 80022fe:	af00      	add	r7, sp, #0
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	603b      	str	r3, [r7, #0]
 8002306:	4613      	mov	r3, r2
 8002308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800230a:	e050      	b.n	80023ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800230c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800230e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002312:	d04c      	beq.n	80023ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002316:	2b00      	cmp	r3, #0
 8002318:	d007      	beq.n	800232a <UART_WaitOnFlagUntilTimeout+0x30>
 800231a:	f7fe fcf5 	bl	8000d08 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002326:	429a      	cmp	r2, r3
 8002328:	d241      	bcs.n	80023ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	330c      	adds	r3, #12
 8002330:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002334:	e853 3f00 	ldrex	r3, [r3]
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002340:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	330c      	adds	r3, #12
 8002348:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800234a:	637a      	str	r2, [r7, #52]	; 0x34
 800234c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800234e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002352:	e841 2300 	strex	r3, r2, [r1]
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1e5      	bne.n	800232a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	3314      	adds	r3, #20
 8002364:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	e853 3f00 	ldrex	r3, [r3]
 800236c:	613b      	str	r3, [r7, #16]
   return(result);
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	f023 0301 	bic.w	r3, r3, #1
 8002374:	63bb      	str	r3, [r7, #56]	; 0x38
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3314      	adds	r3, #20
 800237c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800237e:	623a      	str	r2, [r7, #32]
 8002380:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002382:	69f9      	ldr	r1, [r7, #28]
 8002384:	6a3a      	ldr	r2, [r7, #32]
 8002386:	e841 2300 	strex	r3, r2, [r1]
 800238a:	61bb      	str	r3, [r7, #24]
   return(result);
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1e5      	bne.n	800235e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2220      	movs	r2, #32
 8002396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2220      	movs	r2, #32
 800239e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e00f      	b.n	80023ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	4013      	ands	r3, r2
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	bf0c      	ite	eq
 80023be:	2301      	moveq	r3, #1
 80023c0:	2300      	movne	r3, #0
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d09f      	beq.n	800230c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3740      	adds	r7, #64	; 0x40
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023dc:	b0c0      	sub	sp, #256	; 0x100
 80023de:	af00      	add	r7, sp, #0
 80023e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80023f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f4:	68d9      	ldr	r1, [r3, #12]
 80023f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	ea40 0301 	orr.w	r3, r0, r1
 8002400:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	431a      	orrs	r2, r3
 8002410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	431a      	orrs	r2, r3
 8002418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002430:	f021 010c 	bic.w	r1, r1, #12
 8002434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800243e:	430b      	orrs	r3, r1
 8002440:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800244e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002452:	6999      	ldr	r1, [r3, #24]
 8002454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	ea40 0301 	orr.w	r3, r0, r1
 800245e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4b8f      	ldr	r3, [pc, #572]	; (80026a4 <UART_SetConfig+0x2cc>)
 8002468:	429a      	cmp	r2, r3
 800246a:	d005      	beq.n	8002478 <UART_SetConfig+0xa0>
 800246c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	4b8d      	ldr	r3, [pc, #564]	; (80026a8 <UART_SetConfig+0x2d0>)
 8002474:	429a      	cmp	r2, r3
 8002476:	d104      	bne.n	8002482 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002478:	f7ff fb6c 	bl	8001b54 <HAL_RCC_GetPCLK2Freq>
 800247c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002480:	e003      	b.n	800248a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002482:	f7ff fb53 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 8002486:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800248a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002494:	f040 810c 	bne.w	80026b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800249c:	2200      	movs	r2, #0
 800249e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80024a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80024a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80024aa:	4622      	mov	r2, r4
 80024ac:	462b      	mov	r3, r5
 80024ae:	1891      	adds	r1, r2, r2
 80024b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80024b2:	415b      	adcs	r3, r3
 80024b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80024ba:	4621      	mov	r1, r4
 80024bc:	eb12 0801 	adds.w	r8, r2, r1
 80024c0:	4629      	mov	r1, r5
 80024c2:	eb43 0901 	adc.w	r9, r3, r1
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024da:	4690      	mov	r8, r2
 80024dc:	4699      	mov	r9, r3
 80024de:	4623      	mov	r3, r4
 80024e0:	eb18 0303 	adds.w	r3, r8, r3
 80024e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80024e8:	462b      	mov	r3, r5
 80024ea:	eb49 0303 	adc.w	r3, r9, r3
 80024ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80024f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80024fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002502:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002506:	460b      	mov	r3, r1
 8002508:	18db      	adds	r3, r3, r3
 800250a:	653b      	str	r3, [r7, #80]	; 0x50
 800250c:	4613      	mov	r3, r2
 800250e:	eb42 0303 	adc.w	r3, r2, r3
 8002512:	657b      	str	r3, [r7, #84]	; 0x54
 8002514:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002518:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800251c:	f7fd fea8 	bl	8000270 <__aeabi_uldivmod>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4b61      	ldr	r3, [pc, #388]	; (80026ac <UART_SetConfig+0x2d4>)
 8002526:	fba3 2302 	umull	r2, r3, r3, r2
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	011c      	lsls	r4, r3, #4
 800252e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002532:	2200      	movs	r2, #0
 8002534:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002538:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800253c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002540:	4642      	mov	r2, r8
 8002542:	464b      	mov	r3, r9
 8002544:	1891      	adds	r1, r2, r2
 8002546:	64b9      	str	r1, [r7, #72]	; 0x48
 8002548:	415b      	adcs	r3, r3
 800254a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800254c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002550:	4641      	mov	r1, r8
 8002552:	eb12 0a01 	adds.w	sl, r2, r1
 8002556:	4649      	mov	r1, r9
 8002558:	eb43 0b01 	adc.w	fp, r3, r1
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002568:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800256c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002570:	4692      	mov	sl, r2
 8002572:	469b      	mov	fp, r3
 8002574:	4643      	mov	r3, r8
 8002576:	eb1a 0303 	adds.w	r3, sl, r3
 800257a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800257e:	464b      	mov	r3, r9
 8002580:	eb4b 0303 	adc.w	r3, fp, r3
 8002584:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002594:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002598:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800259c:	460b      	mov	r3, r1
 800259e:	18db      	adds	r3, r3, r3
 80025a0:	643b      	str	r3, [r7, #64]	; 0x40
 80025a2:	4613      	mov	r3, r2
 80025a4:	eb42 0303 	adc.w	r3, r2, r3
 80025a8:	647b      	str	r3, [r7, #68]	; 0x44
 80025aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80025b2:	f7fd fe5d 	bl	8000270 <__aeabi_uldivmod>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4611      	mov	r1, r2
 80025bc:	4b3b      	ldr	r3, [pc, #236]	; (80026ac <UART_SetConfig+0x2d4>)
 80025be:	fba3 2301 	umull	r2, r3, r3, r1
 80025c2:	095b      	lsrs	r3, r3, #5
 80025c4:	2264      	movs	r2, #100	; 0x64
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	1acb      	subs	r3, r1, r3
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80025d2:	4b36      	ldr	r3, [pc, #216]	; (80026ac <UART_SetConfig+0x2d4>)
 80025d4:	fba3 2302 	umull	r2, r3, r3, r2
 80025d8:	095b      	lsrs	r3, r3, #5
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025e0:	441c      	add	r4, r3
 80025e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025e6:	2200      	movs	r2, #0
 80025e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80025ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80025f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80025f4:	4642      	mov	r2, r8
 80025f6:	464b      	mov	r3, r9
 80025f8:	1891      	adds	r1, r2, r2
 80025fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80025fc:	415b      	adcs	r3, r3
 80025fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002600:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002604:	4641      	mov	r1, r8
 8002606:	1851      	adds	r1, r2, r1
 8002608:	6339      	str	r1, [r7, #48]	; 0x30
 800260a:	4649      	mov	r1, r9
 800260c:	414b      	adcs	r3, r1
 800260e:	637b      	str	r3, [r7, #52]	; 0x34
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800261c:	4659      	mov	r1, fp
 800261e:	00cb      	lsls	r3, r1, #3
 8002620:	4651      	mov	r1, sl
 8002622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002626:	4651      	mov	r1, sl
 8002628:	00ca      	lsls	r2, r1, #3
 800262a:	4610      	mov	r0, r2
 800262c:	4619      	mov	r1, r3
 800262e:	4603      	mov	r3, r0
 8002630:	4642      	mov	r2, r8
 8002632:	189b      	adds	r3, r3, r2
 8002634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002638:	464b      	mov	r3, r9
 800263a:	460a      	mov	r2, r1
 800263c:	eb42 0303 	adc.w	r3, r2, r3
 8002640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002650:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002654:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002658:	460b      	mov	r3, r1
 800265a:	18db      	adds	r3, r3, r3
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
 800265e:	4613      	mov	r3, r2
 8002660:	eb42 0303 	adc.w	r3, r2, r3
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002666:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800266a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800266e:	f7fd fdff 	bl	8000270 <__aeabi_uldivmod>
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <UART_SetConfig+0x2d4>)
 8002678:	fba3 1302 	umull	r1, r3, r3, r2
 800267c:	095b      	lsrs	r3, r3, #5
 800267e:	2164      	movs	r1, #100	; 0x64
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	3332      	adds	r3, #50	; 0x32
 800268a:	4a08      	ldr	r2, [pc, #32]	; (80026ac <UART_SetConfig+0x2d4>)
 800268c:	fba2 2303 	umull	r2, r3, r2, r3
 8002690:	095b      	lsrs	r3, r3, #5
 8002692:	f003 0207 	and.w	r2, r3, #7
 8002696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4422      	add	r2, r4
 800269e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026a0:	e106      	b.n	80028b0 <UART_SetConfig+0x4d8>
 80026a2:	bf00      	nop
 80026a4:	40011000 	.word	0x40011000
 80026a8:	40011400 	.word	0x40011400
 80026ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026b4:	2200      	movs	r2, #0
 80026b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80026ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80026be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80026c2:	4642      	mov	r2, r8
 80026c4:	464b      	mov	r3, r9
 80026c6:	1891      	adds	r1, r2, r2
 80026c8:	6239      	str	r1, [r7, #32]
 80026ca:	415b      	adcs	r3, r3
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
 80026ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026d2:	4641      	mov	r1, r8
 80026d4:	1854      	adds	r4, r2, r1
 80026d6:	4649      	mov	r1, r9
 80026d8:	eb43 0501 	adc.w	r5, r3, r1
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	00eb      	lsls	r3, r5, #3
 80026e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026ea:	00e2      	lsls	r2, r4, #3
 80026ec:	4614      	mov	r4, r2
 80026ee:	461d      	mov	r5, r3
 80026f0:	4643      	mov	r3, r8
 80026f2:	18e3      	adds	r3, r4, r3
 80026f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80026f8:	464b      	mov	r3, r9
 80026fa:	eb45 0303 	adc.w	r3, r5, r3
 80026fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800270e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800271e:	4629      	mov	r1, r5
 8002720:	008b      	lsls	r3, r1, #2
 8002722:	4621      	mov	r1, r4
 8002724:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002728:	4621      	mov	r1, r4
 800272a:	008a      	lsls	r2, r1, #2
 800272c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002730:	f7fd fd9e 	bl	8000270 <__aeabi_uldivmod>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4b60      	ldr	r3, [pc, #384]	; (80028bc <UART_SetConfig+0x4e4>)
 800273a:	fba3 2302 	umull	r2, r3, r3, r2
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	011c      	lsls	r4, r3, #4
 8002742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002746:	2200      	movs	r2, #0
 8002748:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800274c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002750:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002754:	4642      	mov	r2, r8
 8002756:	464b      	mov	r3, r9
 8002758:	1891      	adds	r1, r2, r2
 800275a:	61b9      	str	r1, [r7, #24]
 800275c:	415b      	adcs	r3, r3
 800275e:	61fb      	str	r3, [r7, #28]
 8002760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002764:	4641      	mov	r1, r8
 8002766:	1851      	adds	r1, r2, r1
 8002768:	6139      	str	r1, [r7, #16]
 800276a:	4649      	mov	r1, r9
 800276c:	414b      	adcs	r3, r1
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800277c:	4659      	mov	r1, fp
 800277e:	00cb      	lsls	r3, r1, #3
 8002780:	4651      	mov	r1, sl
 8002782:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002786:	4651      	mov	r1, sl
 8002788:	00ca      	lsls	r2, r1, #3
 800278a:	4610      	mov	r0, r2
 800278c:	4619      	mov	r1, r3
 800278e:	4603      	mov	r3, r0
 8002790:	4642      	mov	r2, r8
 8002792:	189b      	adds	r3, r3, r2
 8002794:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002798:	464b      	mov	r3, r9
 800279a:	460a      	mov	r2, r1
 800279c:	eb42 0303 	adc.w	r3, r2, r3
 80027a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80027ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80027bc:	4649      	mov	r1, r9
 80027be:	008b      	lsls	r3, r1, #2
 80027c0:	4641      	mov	r1, r8
 80027c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027c6:	4641      	mov	r1, r8
 80027c8:	008a      	lsls	r2, r1, #2
 80027ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80027ce:	f7fd fd4f 	bl	8000270 <__aeabi_uldivmod>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4611      	mov	r1, r2
 80027d8:	4b38      	ldr	r3, [pc, #224]	; (80028bc <UART_SetConfig+0x4e4>)
 80027da:	fba3 2301 	umull	r2, r3, r3, r1
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	2264      	movs	r2, #100	; 0x64
 80027e2:	fb02 f303 	mul.w	r3, r2, r3
 80027e6:	1acb      	subs	r3, r1, r3
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	3332      	adds	r3, #50	; 0x32
 80027ec:	4a33      	ldr	r2, [pc, #204]	; (80028bc <UART_SetConfig+0x4e4>)
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027f8:	441c      	add	r4, r3
 80027fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027fe:	2200      	movs	r2, #0
 8002800:	673b      	str	r3, [r7, #112]	; 0x70
 8002802:	677a      	str	r2, [r7, #116]	; 0x74
 8002804:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002808:	4642      	mov	r2, r8
 800280a:	464b      	mov	r3, r9
 800280c:	1891      	adds	r1, r2, r2
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	415b      	adcs	r3, r3
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002818:	4641      	mov	r1, r8
 800281a:	1851      	adds	r1, r2, r1
 800281c:	6039      	str	r1, [r7, #0]
 800281e:	4649      	mov	r1, r9
 8002820:	414b      	adcs	r3, r1
 8002822:	607b      	str	r3, [r7, #4]
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002830:	4659      	mov	r1, fp
 8002832:	00cb      	lsls	r3, r1, #3
 8002834:	4651      	mov	r1, sl
 8002836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800283a:	4651      	mov	r1, sl
 800283c:	00ca      	lsls	r2, r1, #3
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	4603      	mov	r3, r0
 8002844:	4642      	mov	r2, r8
 8002846:	189b      	adds	r3, r3, r2
 8002848:	66bb      	str	r3, [r7, #104]	; 0x68
 800284a:	464b      	mov	r3, r9
 800284c:	460a      	mov	r2, r1
 800284e:	eb42 0303 	adc.w	r3, r2, r3
 8002852:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	663b      	str	r3, [r7, #96]	; 0x60
 800285e:	667a      	str	r2, [r7, #100]	; 0x64
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800286c:	4649      	mov	r1, r9
 800286e:	008b      	lsls	r3, r1, #2
 8002870:	4641      	mov	r1, r8
 8002872:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002876:	4641      	mov	r1, r8
 8002878:	008a      	lsls	r2, r1, #2
 800287a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800287e:	f7fd fcf7 	bl	8000270 <__aeabi_uldivmod>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <UART_SetConfig+0x4e4>)
 8002888:	fba3 1302 	umull	r1, r3, r3, r2
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	2164      	movs	r1, #100	; 0x64
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	3332      	adds	r3, #50	; 0x32
 800289a:	4a08      	ldr	r2, [pc, #32]	; (80028bc <UART_SetConfig+0x4e4>)
 800289c:	fba2 2303 	umull	r2, r3, r2, r3
 80028a0:	095b      	lsrs	r3, r3, #5
 80028a2:	f003 020f 	and.w	r2, r3, #15
 80028a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4422      	add	r2, r4
 80028ae:	609a      	str	r2, [r3, #8]
}
 80028b0:	bf00      	nop
 80028b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80028b6:	46bd      	mov	sp, r7
 80028b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028bc:	51eb851f 	.word	0x51eb851f

080028c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80028ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028d2:	2b84      	cmp	r3, #132	; 0x84
 80028d4:	d005      	beq.n	80028e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80028d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4413      	add	r3, r2
 80028de:	3303      	adds	r3, #3
 80028e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80028e2:	68fb      	ldr	r3, [r7, #12]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028f6:	f3ef 8305 	mrs	r3, IPSR
 80028fa:	607b      	str	r3, [r7, #4]
  return(result);
 80028fc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80028fe:	2b00      	cmp	r3, #0
 8002900:	bf14      	ite	ne
 8002902:	2301      	movne	r3, #1
 8002904:	2300      	moveq	r3, #0
 8002906:	b2db      	uxtb	r3, r3
}
 8002908:	4618      	mov	r0, r3
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002918:	f001 f910 	bl	8003b3c <vTaskStartScheduler>
  
  return osOK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	bd80      	pop	{r7, pc}

08002922 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002922:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002924:	b089      	sub	sp, #36	; 0x24
 8002926:	af04      	add	r7, sp, #16
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d020      	beq.n	8002976 <osThreadCreate+0x54>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01c      	beq.n	8002976 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685c      	ldr	r4, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691e      	ldr	r6, [r3, #16]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff ffb6 	bl	80028c0 <makeFreeRtosPriority>
 8002954:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800295e:	9202      	str	r2, [sp, #8]
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	9100      	str	r1, [sp, #0]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	4632      	mov	r2, r6
 8002968:	4629      	mov	r1, r5
 800296a:	4620      	mov	r0, r4
 800296c:	f000 ff1e 	bl	80037ac <xTaskCreateStatic>
 8002970:	4603      	mov	r3, r0
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	e01c      	b.n	80029b0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685c      	ldr	r4, [r3, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002982:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff ff98 	bl	80028c0 <makeFreeRtosPriority>
 8002990:	4602      	mov	r2, r0
 8002992:	f107 030c 	add.w	r3, r7, #12
 8002996:	9301      	str	r3, [sp, #4]
 8002998:	9200      	str	r2, [sp, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	4632      	mov	r2, r6
 800299e:	4629      	mov	r1, r5
 80029a0:	4620      	mov	r0, r4
 80029a2:	f000 ff60 	bl	8003866 <xTaskCreate>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d001      	beq.n	80029b0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	e000      	b.n	80029b2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80029b0:	68fb      	ldr	r3, [r7, #12]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029ba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b084      	sub	sp, #16
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <osDelay+0x16>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	e000      	b.n	80029d2 <osDelay+0x18>
 80029d0:	2301      	movs	r3, #1
 80029d2:	4618      	mov	r0, r3
 80029d4:	f001 f87e 	bl	8003ad4 <vTaskDelay>
  
  return osOK;
 80029d8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b086      	sub	sp, #24
 80029e6:	af02      	add	r7, sp, #8
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00f      	beq.n	8002a14 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d10a      	bne.n	8002a10 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2203      	movs	r2, #3
 8002a00:	9200      	str	r2, [sp, #0]
 8002a02:	2200      	movs	r2, #0
 8002a04:	2100      	movs	r1, #0
 8002a06:	2001      	movs	r0, #1
 8002a08:	f000 f9be 	bl	8002d88 <xQueueGenericCreateStatic>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	e016      	b.n	8002a3e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	e014      	b.n	8002a3e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d110      	bne.n	8002a3c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	2001      	movs	r0, #1
 8002a20:	f000 fa2a 	bl	8002e78 <xQueueGenericCreate>
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <osSemaphoreCreate+0x56>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2100      	movs	r1, #0
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 fa7a 	bl	8002f2c <xQueueGenericSend>
      return sema;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	e000      	b.n	8002a3e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002a3c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002a52:	2300      	movs	r3, #0
 8002a54:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	e03a      	b.n	8002ad6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6a:	d103      	bne.n	8002a74 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	e009      	b.n	8002a88 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d006      	beq.n	8002a88 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <osSemaphoreWait+0x40>
      ticks = 1;
 8002a84:	2301      	movs	r3, #1
 8002a86:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002a88:	f7ff ff32 	bl	80028f0 <inHandlerMode>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d017      	beq.n	8002ac2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002a92:	f107 0308 	add.w	r3, r7, #8
 8002a96:	461a      	mov	r2, r3
 8002a98:	2100      	movs	r1, #0
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 fcde 	bl	800345c <xQueueReceiveFromISR>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d001      	beq.n	8002aaa <osSemaphoreWait+0x62>
      return osErrorOS;
 8002aa6:	23ff      	movs	r3, #255	; 0xff
 8002aa8:	e015      	b.n	8002ad6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d011      	beq.n	8002ad4 <osSemaphoreWait+0x8c>
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <osSemaphoreWait+0x98>)
 8002ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	f3bf 8f4f 	dsb	sy
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	e008      	b.n	8002ad4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002ac2:	68f9      	ldr	r1, [r7, #12]
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fbbd 	bl	8003244 <xQueueSemaphoreTake>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d001      	beq.n	8002ad4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002ad0:	23ff      	movs	r3, #255	; 0xff
 8002ad2:	e000      	b.n	8002ad6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	e000ed04 	.word	0xe000ed04

08002ae4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002af4:	f7ff fefc 	bl	80028f0 <inHandlerMode>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d016      	beq.n	8002b2c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002afe:	f107 0308 	add.w	r3, r7, #8
 8002b02:	4619      	mov	r1, r3
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 fb0f 	bl	8003128 <xQueueGiveFromISR>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d001      	beq.n	8002b14 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002b10:	23ff      	movs	r3, #255	; 0xff
 8002b12:	e017      	b.n	8002b44 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d013      	beq.n	8002b42 <osSemaphoreRelease+0x5e>
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <osSemaphoreRelease+0x68>)
 8002b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	f3bf 8f4f 	dsb	sy
 8002b26:	f3bf 8f6f 	isb	sy
 8002b2a:	e00a      	b.n	8002b42 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2100      	movs	r1, #0
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f9fa 	bl	8002f2c <xQueueGenericSend>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d001      	beq.n	8002b42 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002b3e:	23ff      	movs	r3, #255	; 0xff
 8002b40:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002b42:	68fb      	ldr	r3, [r7, #12]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	e000ed04 	.word	0xe000ed04

08002b50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f103 0208 	add.w	r2, r3, #8
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f04f 32ff 	mov.w	r2, #4294967295
 8002b68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f103 0208 	add.w	r2, r3, #8
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f103 0208 	add.w	r2, r3, #8
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002baa:	b480      	push	{r7}
 8002bac:	b085      	sub	sp, #20
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	601a      	str	r2, [r3, #0]
}
 8002be6:	bf00      	nop
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b085      	sub	sp, #20
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d103      	bne.n	8002c12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	e00c      	b.n	8002c2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3308      	adds	r3, #8
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	e002      	b.n	8002c20 <vListInsert+0x2e>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d2f6      	bcs.n	8002c1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	601a      	str	r2, [r3, #0]
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6892      	ldr	r2, [r2, #8]
 8002c7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6852      	ldr	r2, [r2, #4]
 8002c84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d103      	bne.n	8002c98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	1e5a      	subs	r2, r3, #1
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10a      	bne.n	8002ce2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd0:	f383 8811 	msr	BASEPRI, r3
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002cde:	bf00      	nop
 8002ce0:	e7fe      	b.n	8002ce0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002ce2:	f001 fe77 	bl	80049d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cee:	68f9      	ldr	r1, [r7, #12]
 8002cf0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	441a      	add	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d12:	3b01      	subs	r3, #1
 8002d14:	68f9      	ldr	r1, [r7, #12]
 8002d16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d18:	fb01 f303 	mul.w	r3, r1, r3
 8002d1c:	441a      	add	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	22ff      	movs	r2, #255	; 0xff
 8002d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	22ff      	movs	r2, #255	; 0xff
 8002d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d114      	bne.n	8002d62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d01a      	beq.n	8002d76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	3310      	adds	r3, #16
 8002d44:	4618      	mov	r0, r3
 8002d46:	f001 f93b 	bl	8003fc0 <xTaskRemoveFromEventList>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d012      	beq.n	8002d76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d50:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <xQueueGenericReset+0xcc>)
 8002d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	e009      	b.n	8002d76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	3310      	adds	r3, #16
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fef2 	bl	8002b50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	3324      	adds	r3, #36	; 0x24
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff feed 	bl	8002b50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d76:	f001 fe5d 	bl	8004a34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d7a:	2301      	movs	r3, #1
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	e000ed04 	.word	0xe000ed04

08002d88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08e      	sub	sp, #56	; 0x38
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
 8002d94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10a      	bne.n	8002db2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da0:	f383 8811 	msr	BASEPRI, r3
 8002da4:	f3bf 8f6f 	isb	sy
 8002da8:	f3bf 8f4f 	dsb	sy
 8002dac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002dae:	bf00      	nop
 8002db0:	e7fe      	b.n	8002db0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10a      	bne.n	8002dce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbc:	f383 8811 	msr	BASEPRI, r3
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002dca:	bf00      	nop
 8002dcc:	e7fe      	b.n	8002dcc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <xQueueGenericCreateStatic+0x52>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <xQueueGenericCreateStatic+0x56>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <xQueueGenericCreateStatic+0x58>
 8002dde:	2300      	movs	r3, #0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10a      	bne.n	8002dfa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de8:	f383 8811 	msr	BASEPRI, r3
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	623b      	str	r3, [r7, #32]
}
 8002df6:	bf00      	nop
 8002df8:	e7fe      	b.n	8002df8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d102      	bne.n	8002e06 <xQueueGenericCreateStatic+0x7e>
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <xQueueGenericCreateStatic+0x82>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <xQueueGenericCreateStatic+0x84>
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10a      	bne.n	8002e26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	61fb      	str	r3, [r7, #28]
}
 8002e22:	bf00      	nop
 8002e24:	e7fe      	b.n	8002e24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e26:	2348      	movs	r3, #72	; 0x48
 8002e28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2b48      	cmp	r3, #72	; 0x48
 8002e2e:	d00a      	beq.n	8002e46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	61bb      	str	r3, [r7, #24]
}
 8002e42:	bf00      	nop
 8002e44:	e7fe      	b.n	8002e44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002e46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00d      	beq.n	8002e6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	4613      	mov	r3, r2
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	68b9      	ldr	r1, [r7, #8]
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f83f 	bl	8002eec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3730      	adds	r7, #48	; 0x30
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08a      	sub	sp, #40	; 0x28
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	4613      	mov	r3, r2
 8002e84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10a      	bne.n	8002ea2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	613b      	str	r3, [r7, #16]
}
 8002e9e:	bf00      	nop
 8002ea0:	e7fe      	b.n	8002ea0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	fb02 f303 	mul.w	r3, r2, r3
 8002eaa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	3348      	adds	r3, #72	; 0x48
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f001 feb1 	bl	8004c18 <pvPortMalloc>
 8002eb6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d011      	beq.n	8002ee2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	3348      	adds	r3, #72	; 0x48
 8002ec6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ed0:	79fa      	ldrb	r2, [r7, #7]
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	68b9      	ldr	r1, [r7, #8]
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f805 	bl	8002eec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ee2:	69bb      	ldr	r3, [r7, #24]
	}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3720      	adds	r7, #32
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d103      	bne.n	8002f08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	e002      	b.n	8002f0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	69b8      	ldr	r0, [r7, #24]
 8002f1e:	f7ff fecb 	bl	8002cb8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08e      	sub	sp, #56	; 0x38
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
 8002f38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10a      	bne.n	8002f5e <xQueueGenericSend+0x32>
	__asm volatile
 8002f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f5a:	bf00      	nop
 8002f5c:	e7fe      	b.n	8002f5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d103      	bne.n	8002f6c <xQueueGenericSend+0x40>
 8002f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <xQueueGenericSend+0x44>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <xQueueGenericSend+0x46>
 8002f70:	2300      	movs	r3, #0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10a      	bne.n	8002f8c <xQueueGenericSend+0x60>
	__asm volatile
 8002f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7a:	f383 8811 	msr	BASEPRI, r3
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	f3bf 8f4f 	dsb	sy
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f88:	bf00      	nop
 8002f8a:	e7fe      	b.n	8002f8a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d103      	bne.n	8002f9a <xQueueGenericSend+0x6e>
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <xQueueGenericSend+0x72>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <xQueueGenericSend+0x74>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10a      	bne.n	8002fba <xQueueGenericSend+0x8e>
	__asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	623b      	str	r3, [r7, #32]
}
 8002fb6:	bf00      	nop
 8002fb8:	e7fe      	b.n	8002fb8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fba:	f001 f9bd 	bl	8004338 <xTaskGetSchedulerState>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d102      	bne.n	8002fca <xQueueGenericSend+0x9e>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <xQueueGenericSend+0xa2>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <xQueueGenericSend+0xa4>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10a      	bne.n	8002fea <xQueueGenericSend+0xbe>
	__asm volatile
 8002fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd8:	f383 8811 	msr	BASEPRI, r3
 8002fdc:	f3bf 8f6f 	isb	sy
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	61fb      	str	r3, [r7, #28]
}
 8002fe6:	bf00      	nop
 8002fe8:	e7fe      	b.n	8002fe8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fea:	f001 fcf3 	bl	80049d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d302      	bcc.n	8003000 <xQueueGenericSend+0xd4>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d129      	bne.n	8003054 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003006:	f000 fac1 	bl	800358c <prvCopyDataToQueue>
 800300a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	2b00      	cmp	r3, #0
 8003012:	d010      	beq.n	8003036 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003016:	3324      	adds	r3, #36	; 0x24
 8003018:	4618      	mov	r0, r3
 800301a:	f000 ffd1 	bl	8003fc0 <xTaskRemoveFromEventList>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d013      	beq.n	800304c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003024:	4b3f      	ldr	r3, [pc, #252]	; (8003124 <xQueueGenericSend+0x1f8>)
 8003026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	f3bf 8f6f 	isb	sy
 8003034:	e00a      	b.n	800304c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003038:	2b00      	cmp	r3, #0
 800303a:	d007      	beq.n	800304c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800303c:	4b39      	ldr	r3, [pc, #228]	; (8003124 <xQueueGenericSend+0x1f8>)
 800303e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800304c:	f001 fcf2 	bl	8004a34 <vPortExitCritical>
				return pdPASS;
 8003050:	2301      	movs	r3, #1
 8003052:	e063      	b.n	800311c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d103      	bne.n	8003062 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800305a:	f001 fceb 	bl	8004a34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800305e:	2300      	movs	r3, #0
 8003060:	e05c      	b.n	800311c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003064:	2b00      	cmp	r3, #0
 8003066:	d106      	bne.n	8003076 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003068:	f107 0314 	add.w	r3, r7, #20
 800306c:	4618      	mov	r0, r3
 800306e:	f001 f809 	bl	8004084 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003072:	2301      	movs	r3, #1
 8003074:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003076:	f001 fcdd 	bl	8004a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800307a:	f000 fdbf 	bl	8003bfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800307e:	f001 fca9 	bl	80049d4 <vPortEnterCritical>
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003088:	b25b      	sxtb	r3, r3
 800308a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308e:	d103      	bne.n	8003098 <xQueueGenericSend+0x16c>
 8003090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800309e:	b25b      	sxtb	r3, r3
 80030a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a4:	d103      	bne.n	80030ae <xQueueGenericSend+0x182>
 80030a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030ae:	f001 fcc1 	bl	8004a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030b2:	1d3a      	adds	r2, r7, #4
 80030b4:	f107 0314 	add.w	r3, r7, #20
 80030b8:	4611      	mov	r1, r2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fff8 	bl	80040b0 <xTaskCheckForTimeOut>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d124      	bne.n	8003110 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80030c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030c8:	f000 fb58 	bl	800377c <prvIsQueueFull>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d018      	beq.n	8003104 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80030d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d4:	3310      	adds	r3, #16
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	4611      	mov	r1, r2
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 ff4c 	bl	8003f78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80030e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030e2:	f000 fae3 	bl	80036ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80030e6:	f000 fd97 	bl	8003c18 <xTaskResumeAll>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f47f af7c 	bne.w	8002fea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80030f2:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <xQueueGenericSend+0x1f8>)
 80030f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	f3bf 8f6f 	isb	sy
 8003102:	e772      	b.n	8002fea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003104:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003106:	f000 fad1 	bl	80036ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800310a:	f000 fd85 	bl	8003c18 <xTaskResumeAll>
 800310e:	e76c      	b.n	8002fea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003112:	f000 facb 	bl	80036ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003116:	f000 fd7f 	bl	8003c18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800311a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800311c:	4618      	mov	r0, r3
 800311e:	3738      	adds	r7, #56	; 0x38
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	e000ed04 	.word	0xe000ed04

08003128 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08e      	sub	sp, #56	; 0x38
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	623b      	str	r3, [r7, #32]
}
 800314e:	bf00      	nop
 8003150:	e7fe      	b.n	8003150 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <xQueueGiveFromISR+0x48>
	__asm volatile
 800315a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315e:	f383 8811 	msr	BASEPRI, r3
 8003162:	f3bf 8f6f 	isb	sy
 8003166:	f3bf 8f4f 	dsb	sy
 800316a:	61fb      	str	r3, [r7, #28]
}
 800316c:	bf00      	nop
 800316e:	e7fe      	b.n	800316e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d103      	bne.n	8003180 <xQueueGiveFromISR+0x58>
 8003178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <xQueueGiveFromISR+0x5c>
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <xQueueGiveFromISR+0x5e>
 8003184:	2300      	movs	r3, #0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10a      	bne.n	80031a0 <xQueueGiveFromISR+0x78>
	__asm volatile
 800318a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318e:	f383 8811 	msr	BASEPRI, r3
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	61bb      	str	r3, [r7, #24]
}
 800319c:	bf00      	nop
 800319e:	e7fe      	b.n	800319e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031a0:	f001 fcfa 	bl	8004b98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80031a4:	f3ef 8211 	mrs	r2, BASEPRI
 80031a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	617a      	str	r2, [r7, #20]
 80031ba:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80031bc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031be:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80031c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d22b      	bcs.n	8003228 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80031d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80031e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80031e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ea:	d112      	bne.n	8003212 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d016      	beq.n	8003222 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f6:	3324      	adds	r3, #36	; 0x24
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 fee1 	bl	8003fc0 <xTaskRemoveFromEventList>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00e      	beq.n	8003222 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00b      	beq.n	8003222 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2201      	movs	r2, #1
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	e007      	b.n	8003222 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003212:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003216:	3301      	adds	r3, #1
 8003218:	b2db      	uxtb	r3, r3
 800321a:	b25a      	sxtb	r2, r3
 800321c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003222:	2301      	movs	r3, #1
 8003224:	637b      	str	r3, [r7, #52]	; 0x34
 8003226:	e001      	b.n	800322c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003228:	2300      	movs	r3, #0
 800322a:	637b      	str	r3, [r7, #52]	; 0x34
 800322c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003236:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800323a:	4618      	mov	r0, r3
 800323c:	3738      	adds	r7, #56	; 0x38
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08e      	sub	sp, #56	; 0x38
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800324e:	2300      	movs	r3, #0
 8003250:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003256:	2300      	movs	r3, #0
 8003258:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800325a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10a      	bne.n	8003276 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	623b      	str	r3, [r7, #32]
}
 8003272:	bf00      	nop
 8003274:	e7fe      	b.n	8003274 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800327e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003282:	f383 8811 	msr	BASEPRI, r3
 8003286:	f3bf 8f6f 	isb	sy
 800328a:	f3bf 8f4f 	dsb	sy
 800328e:	61fb      	str	r3, [r7, #28]
}
 8003290:	bf00      	nop
 8003292:	e7fe      	b.n	8003292 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003294:	f001 f850 	bl	8004338 <xTaskGetSchedulerState>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d102      	bne.n	80032a4 <xQueueSemaphoreTake+0x60>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <xQueueSemaphoreTake+0x64>
 80032a4:	2301      	movs	r3, #1
 80032a6:	e000      	b.n	80032aa <xQueueSemaphoreTake+0x66>
 80032a8:	2300      	movs	r3, #0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10a      	bne.n	80032c4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80032ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b2:	f383 8811 	msr	BASEPRI, r3
 80032b6:	f3bf 8f6f 	isb	sy
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	61bb      	str	r3, [r7, #24]
}
 80032c0:	bf00      	nop
 80032c2:	e7fe      	b.n	80032c2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032c4:	f001 fb86 	bl	80049d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80032c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80032ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d024      	beq.n	800331e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80032d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d6:	1e5a      	subs	r2, r3, #1
 80032d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d104      	bne.n	80032ee <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80032e4:	f001 f9d0 	bl	8004688 <pvTaskIncrementMutexHeldCount>
 80032e8:	4602      	mov	r2, r0
 80032ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ec:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00f      	beq.n	8003316 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f8:	3310      	adds	r3, #16
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fe60 	bl	8003fc0 <xTaskRemoveFromEventList>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d007      	beq.n	8003316 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003306:	4b54      	ldr	r3, [pc, #336]	; (8003458 <xQueueSemaphoreTake+0x214>)
 8003308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003316:	f001 fb8d 	bl	8004a34 <vPortExitCritical>
				return pdPASS;
 800331a:	2301      	movs	r3, #1
 800331c:	e097      	b.n	800344e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d111      	bne.n	8003348 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800332a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332e:	f383 8811 	msr	BASEPRI, r3
 8003332:	f3bf 8f6f 	isb	sy
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	617b      	str	r3, [r7, #20]
}
 800333c:	bf00      	nop
 800333e:	e7fe      	b.n	800333e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003340:	f001 fb78 	bl	8004a34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003344:	2300      	movs	r3, #0
 8003346:	e082      	b.n	800344e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800334e:	f107 030c 	add.w	r3, r7, #12
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fe96 	bl	8004084 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003358:	2301      	movs	r3, #1
 800335a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800335c:	f001 fb6a 	bl	8004a34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003360:	f000 fc4c 	bl	8003bfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003364:	f001 fb36 	bl	80049d4 <vPortEnterCritical>
 8003368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800336e:	b25b      	sxtb	r3, r3
 8003370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003374:	d103      	bne.n	800337e <xQueueSemaphoreTake+0x13a>
 8003376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800337e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003380:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003384:	b25b      	sxtb	r3, r3
 8003386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338a:	d103      	bne.n	8003394 <xQueueSemaphoreTake+0x150>
 800338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003394:	f001 fb4e 	bl	8004a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003398:	463a      	mov	r2, r7
 800339a:	f107 030c 	add.w	r3, r7, #12
 800339e:	4611      	mov	r1, r2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 fe85 	bl	80040b0 <xTaskCheckForTimeOut>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d132      	bne.n	8003412 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033ae:	f000 f9cf 	bl	8003750 <prvIsQueueEmpty>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d026      	beq.n	8003406 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d109      	bne.n	80033d4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80033c0:	f001 fb08 	bl	80049d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80033c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 ffd3 	bl	8004374 <xTaskPriorityInherit>
 80033ce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80033d0:	f001 fb30 	bl	8004a34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d6:	3324      	adds	r3, #36	; 0x24
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	4611      	mov	r1, r2
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 fdcb 	bl	8003f78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033e4:	f000 f962 	bl	80036ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033e8:	f000 fc16 	bl	8003c18 <xTaskResumeAll>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f47f af68 	bne.w	80032c4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80033f4:	4b18      	ldr	r3, [pc, #96]	; (8003458 <xQueueSemaphoreTake+0x214>)
 80033f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	e75e      	b.n	80032c4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003406:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003408:	f000 f950 	bl	80036ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800340c:	f000 fc04 	bl	8003c18 <xTaskResumeAll>
 8003410:	e758      	b.n	80032c4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003412:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003414:	f000 f94a 	bl	80036ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003418:	f000 fbfe 	bl	8003c18 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800341c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800341e:	f000 f997 	bl	8003750 <prvIsQueueEmpty>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	f43f af4d 	beq.w	80032c4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00d      	beq.n	800344c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003430:	f001 fad0 	bl	80049d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003434:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003436:	f000 f891 	bl	800355c <prvGetDisinheritPriorityAfterTimeout>
 800343a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800343c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003442:	4618      	mov	r0, r3
 8003444:	f001 f892 	bl	800456c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003448:	f001 faf4 	bl	8004a34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800344c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800344e:	4618      	mov	r0, r3
 8003450:	3738      	adds	r7, #56	; 0x38
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	e000ed04 	.word	0xe000ed04

0800345c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08e      	sub	sp, #56	; 0x38
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800346c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10a      	bne.n	8003488 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003476:	f383 8811 	msr	BASEPRI, r3
 800347a:	f3bf 8f6f 	isb	sy
 800347e:	f3bf 8f4f 	dsb	sy
 8003482:	623b      	str	r3, [r7, #32]
}
 8003484:	bf00      	nop
 8003486:	e7fe      	b.n	8003486 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d103      	bne.n	8003496 <xQueueReceiveFromISR+0x3a>
 800348e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <xQueueReceiveFromISR+0x3e>
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <xQueueReceiveFromISR+0x40>
 800349a:	2300      	movs	r3, #0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10a      	bne.n	80034b6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80034a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a4:	f383 8811 	msr	BASEPRI, r3
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	61fb      	str	r3, [r7, #28]
}
 80034b2:	bf00      	nop
 80034b4:	e7fe      	b.n	80034b4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034b6:	f001 fb6f 	bl	8004b98 <vPortValidateInterruptPriority>
	__asm volatile
 80034ba:	f3ef 8211 	mrs	r2, BASEPRI
 80034be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c2:	f383 8811 	msr	BASEPRI, r3
 80034c6:	f3bf 8f6f 	isb	sy
 80034ca:	f3bf 8f4f 	dsb	sy
 80034ce:	61ba      	str	r2, [r7, #24]
 80034d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80034d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d02f      	beq.n	8003542 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80034e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80034ec:	68b9      	ldr	r1, [r7, #8]
 80034ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034f0:	f000 f8b6 	bl	8003660 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80034f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f6:	1e5a      	subs	r2, r3, #1
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80034fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003504:	d112      	bne.n	800352c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d016      	beq.n	800353c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	3310      	adds	r3, #16
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fd54 	bl	8003fc0 <xTaskRemoveFromEventList>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00e      	beq.n	800353c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00b      	beq.n	800353c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	e007      	b.n	800353c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800352c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003530:	3301      	adds	r3, #1
 8003532:	b2db      	uxtb	r3, r3
 8003534:	b25a      	sxtb	r2, r3
 8003536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800353c:	2301      	movs	r3, #1
 800353e:	637b      	str	r3, [r7, #52]	; 0x34
 8003540:	e001      	b.n	8003546 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003542:	2300      	movs	r3, #0
 8003544:	637b      	str	r3, [r7, #52]	; 0x34
 8003546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003548:	613b      	str	r3, [r7, #16]
	__asm volatile
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f383 8811 	msr	BASEPRI, r3
}
 8003550:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003554:	4618      	mov	r0, r3
 8003556:	3738      	adds	r7, #56	; 0x38
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	2b00      	cmp	r3, #0
 800356a:	d006      	beq.n	800357a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f1c3 0307 	rsb	r3, r3, #7
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	e001      	b.n	800357e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800357e:	68fb      	ldr	r3, [r7, #12]
	}
 8003580:	4618      	mov	r0, r3
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10d      	bne.n	80035c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d14d      	bne.n	800364e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 ff52 	bl	8004460 <xTaskPriorityDisinherit>
 80035bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	609a      	str	r2, [r3, #8]
 80035c4:	e043      	b.n	800364e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d119      	bne.n	8003600 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6858      	ldr	r0, [r3, #4]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	461a      	mov	r2, r3
 80035d6:	68b9      	ldr	r1, [r7, #8]
 80035d8:	f001 fd5c 	bl	8005094 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	441a      	add	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d32b      	bcc.n	800364e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	605a      	str	r2, [r3, #4]
 80035fe:	e026      	b.n	800364e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	68d8      	ldr	r0, [r3, #12]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	461a      	mov	r2, r3
 800360a:	68b9      	ldr	r1, [r7, #8]
 800360c:	f001 fd42 	bl	8005094 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	425b      	negs	r3, r3
 800361a:	441a      	add	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d207      	bcs.n	800363c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	425b      	negs	r3, r3
 8003636:	441a      	add	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d105      	bne.n	800364e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	3b01      	subs	r3, #1
 800364c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003656:	697b      	ldr	r3, [r7, #20]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	d018      	beq.n	80036a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	441a      	add	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	429a      	cmp	r2, r3
 800368a:	d303      	bcc.n	8003694 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68d9      	ldr	r1, [r3, #12]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	461a      	mov	r2, r3
 800369e:	6838      	ldr	r0, [r7, #0]
 80036a0:	f001 fcf8 	bl	8005094 <memcpy>
	}
}
 80036a4:	bf00      	nop
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80036b4:	f001 f98e 	bl	80049d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036c0:	e011      	b.n	80036e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d012      	beq.n	80036f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3324      	adds	r3, #36	; 0x24
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 fc76 	bl	8003fc0 <xTaskRemoveFromEventList>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80036da:	f000 fd4b 	bl	8004174 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	dce9      	bgt.n	80036c2 <prvUnlockQueue+0x16>
 80036ee:	e000      	b.n	80036f2 <prvUnlockQueue+0x46>
					break;
 80036f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	22ff      	movs	r2, #255	; 0xff
 80036f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80036fa:	f001 f99b 	bl	8004a34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80036fe:	f001 f969 	bl	80049d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003708:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800370a:	e011      	b.n	8003730 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d012      	beq.n	800373a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3310      	adds	r3, #16
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fc51 	bl	8003fc0 <xTaskRemoveFromEventList>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003724:	f000 fd26 	bl	8004174 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003728:	7bbb      	ldrb	r3, [r7, #14]
 800372a:	3b01      	subs	r3, #1
 800372c:	b2db      	uxtb	r3, r3
 800372e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003730:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003734:	2b00      	cmp	r3, #0
 8003736:	dce9      	bgt.n	800370c <prvUnlockQueue+0x60>
 8003738:	e000      	b.n	800373c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800373a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	22ff      	movs	r2, #255	; 0xff
 8003740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003744:	f001 f976 	bl	8004a34 <vPortExitCritical>
}
 8003748:	bf00      	nop
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003758:	f001 f93c 	bl	80049d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003760:	2b00      	cmp	r3, #0
 8003762:	d102      	bne.n	800376a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003764:	2301      	movs	r3, #1
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	e001      	b.n	800376e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800376e:	f001 f961 	bl	8004a34 <vPortExitCritical>

	return xReturn;
 8003772:	68fb      	ldr	r3, [r7, #12]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003784:	f001 f926 	bl	80049d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003790:	429a      	cmp	r2, r3
 8003792:	d102      	bne.n	800379a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003794:	2301      	movs	r3, #1
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	e001      	b.n	800379e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800379a:	2300      	movs	r3, #0
 800379c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800379e:	f001 f949 	bl	8004a34 <vPortExitCritical>

	return xReturn;
 80037a2:	68fb      	ldr	r3, [r7, #12]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08e      	sub	sp, #56	; 0x38
 80037b0:	af04      	add	r7, sp, #16
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80037ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10a      	bne.n	80037d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80037c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c4:	f383 8811 	msr	BASEPRI, r3
 80037c8:	f3bf 8f6f 	isb	sy
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	623b      	str	r3, [r7, #32]
}
 80037d2:	bf00      	nop
 80037d4:	e7fe      	b.n	80037d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80037d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80037dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	61fb      	str	r3, [r7, #28]
}
 80037ee:	bf00      	nop
 80037f0:	e7fe      	b.n	80037f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80037f2:	2354      	movs	r3, #84	; 0x54
 80037f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	2b54      	cmp	r3, #84	; 0x54
 80037fa:	d00a      	beq.n	8003812 <xTaskCreateStatic+0x66>
	__asm volatile
 80037fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	61bb      	str	r3, [r7, #24]
}
 800380e:	bf00      	nop
 8003810:	e7fe      	b.n	8003810 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003812:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003816:	2b00      	cmp	r3, #0
 8003818:	d01e      	beq.n	8003858 <xTaskCreateStatic+0xac>
 800381a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01b      	beq.n	8003858 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003828:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	2202      	movs	r2, #2
 800382e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003832:	2300      	movs	r3, #0
 8003834:	9303      	str	r3, [sp, #12]
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	9302      	str	r3, [sp, #8]
 800383a:	f107 0314 	add.w	r3, r7, #20
 800383e:	9301      	str	r3, [sp, #4]
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	68b9      	ldr	r1, [r7, #8]
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f850 	bl	80038f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003850:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003852:	f000 f8d5 	bl	8003a00 <prvAddNewTaskToReadyList>
 8003856:	e001      	b.n	800385c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800385c:	697b      	ldr	r3, [r7, #20]
	}
 800385e:	4618      	mov	r0, r3
 8003860:	3728      	adds	r7, #40	; 0x28
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003866:	b580      	push	{r7, lr}
 8003868:	b08c      	sub	sp, #48	; 0x30
 800386a:	af04      	add	r7, sp, #16
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	603b      	str	r3, [r7, #0]
 8003872:	4613      	mov	r3, r2
 8003874:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003876:	88fb      	ldrh	r3, [r7, #6]
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4618      	mov	r0, r3
 800387c:	f001 f9cc 	bl	8004c18 <pvPortMalloc>
 8003880:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00e      	beq.n	80038a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003888:	2054      	movs	r0, #84	; 0x54
 800388a:	f001 f9c5 	bl	8004c18 <pvPortMalloc>
 800388e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	631a      	str	r2, [r3, #48]	; 0x30
 800389c:	e005      	b.n	80038aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800389e:	6978      	ldr	r0, [r7, #20]
 80038a0:	f001 fa86 	bl	8004db0 <vPortFree>
 80038a4:	e001      	b.n	80038aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d017      	beq.n	80038e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038b8:	88fa      	ldrh	r2, [r7, #6]
 80038ba:	2300      	movs	r3, #0
 80038bc:	9303      	str	r3, [sp, #12]
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	9302      	str	r3, [sp, #8]
 80038c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c4:	9301      	str	r3, [sp, #4]
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68b9      	ldr	r1, [r7, #8]
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 f80e 	bl	80038f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038d4:	69f8      	ldr	r0, [r7, #28]
 80038d6:	f000 f893 	bl	8003a00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80038da:	2301      	movs	r3, #1
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	e002      	b.n	80038e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038e0:	f04f 33ff 	mov.w	r3, #4294967295
 80038e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80038e6:	69bb      	ldr	r3, [r7, #24]
	}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3720      	adds	r7, #32
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80038fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003908:	3b01      	subs	r3, #1
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	f023 0307 	bic.w	r3, r3, #7
 8003916:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	617b      	str	r3, [r7, #20]
}
 8003934:	bf00      	nop
 8003936:	e7fe      	b.n	8003936 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d01f      	beq.n	800397e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800393e:	2300      	movs	r3, #0
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	e012      	b.n	800396a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	4413      	add	r3, r2
 800394a:	7819      	ldrb	r1, [r3, #0]
 800394c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	4413      	add	r3, r2
 8003952:	3334      	adds	r3, #52	; 0x34
 8003954:	460a      	mov	r2, r1
 8003956:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	4413      	add	r3, r2
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d006      	beq.n	8003972 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	3301      	adds	r3, #1
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	2b0f      	cmp	r3, #15
 800396e:	d9e9      	bls.n	8003944 <prvInitialiseNewTask+0x54>
 8003970:	e000      	b.n	8003974 <prvInitialiseNewTask+0x84>
			{
				break;
 8003972:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800397c:	e003      	b.n	8003986 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800397e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003988:	2b06      	cmp	r3, #6
 800398a:	d901      	bls.n	8003990 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800398c:	2306      	movs	r3, #6
 800398e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003994:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800399a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399e:	2200      	movs	r2, #0
 80039a0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a4:	3304      	adds	r3, #4
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff f8f2 	bl	8002b90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ae:	3318      	adds	r3, #24
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff f8ed 	bl	8002b90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80039b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039be:	f1c3 0207 	rsb	r2, r3, #7
 80039c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80039c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80039cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ce:	2200      	movs	r2, #0
 80039d0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	68f9      	ldr	r1, [r7, #12]
 80039de:	69b8      	ldr	r0, [r7, #24]
 80039e0:	f000 fecc 	bl	800477c <pxPortInitialiseStack>
 80039e4:	4602      	mov	r2, r0
 80039e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80039ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d002      	beq.n	80039f6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80039f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039f6:	bf00      	nop
 80039f8:	3720      	adds	r7, #32
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a08:	f000 ffe4 	bl	80049d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a0c:	4b2a      	ldr	r3, [pc, #168]	; (8003ab8 <prvAddNewTaskToReadyList+0xb8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3301      	adds	r3, #1
 8003a12:	4a29      	ldr	r2, [pc, #164]	; (8003ab8 <prvAddNewTaskToReadyList+0xb8>)
 8003a14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a16:	4b29      	ldr	r3, [pc, #164]	; (8003abc <prvAddNewTaskToReadyList+0xbc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d109      	bne.n	8003a32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a1e:	4a27      	ldr	r2, [pc, #156]	; (8003abc <prvAddNewTaskToReadyList+0xbc>)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a24:	4b24      	ldr	r3, [pc, #144]	; (8003ab8 <prvAddNewTaskToReadyList+0xb8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d110      	bne.n	8003a4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a2c:	f000 fbc6 	bl	80041bc <prvInitialiseTaskLists>
 8003a30:	e00d      	b.n	8003a4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a32:	4b23      	ldr	r3, [pc, #140]	; (8003ac0 <prvAddNewTaskToReadyList+0xc0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d109      	bne.n	8003a4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a3a:	4b20      	ldr	r3, [pc, #128]	; (8003abc <prvAddNewTaskToReadyList+0xbc>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d802      	bhi.n	8003a4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a48:	4a1c      	ldr	r2, [pc, #112]	; (8003abc <prvAddNewTaskToReadyList+0xbc>)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <prvAddNewTaskToReadyList+0xc4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3301      	adds	r3, #1
 8003a54:	4a1b      	ldr	r2, [pc, #108]	; (8003ac4 <prvAddNewTaskToReadyList+0xc4>)
 8003a56:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	409a      	lsls	r2, r3
 8003a60:	4b19      	ldr	r3, [pc, #100]	; (8003ac8 <prvAddNewTaskToReadyList+0xc8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	4a18      	ldr	r2, [pc, #96]	; (8003ac8 <prvAddNewTaskToReadyList+0xc8>)
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6e:	4613      	mov	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4a15      	ldr	r2, [pc, #84]	; (8003acc <prvAddNewTaskToReadyList+0xcc>)
 8003a78:	441a      	add	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4610      	mov	r0, r2
 8003a82:	f7ff f892 	bl	8002baa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a86:	f000 ffd5 	bl	8004a34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ac0 <prvAddNewTaskToReadyList+0xc0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00e      	beq.n	8003ab0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a92:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <prvAddNewTaskToReadyList+0xbc>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d207      	bcs.n	8003ab0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <prvAddNewTaskToReadyList+0xd0>)
 8003aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ab0:	bf00      	nop
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20000618 	.word	0x20000618
 8003abc:	20000518 	.word	0x20000518
 8003ac0:	20000624 	.word	0x20000624
 8003ac4:	20000634 	.word	0x20000634
 8003ac8:	20000620 	.word	0x20000620
 8003acc:	2000051c 	.word	0x2000051c
 8003ad0:	e000ed04 	.word	0xe000ed04

08003ad4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d017      	beq.n	8003b16 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ae6:	4b13      	ldr	r3, [pc, #76]	; (8003b34 <vTaskDelay+0x60>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <vTaskDelay+0x30>
	__asm volatile
 8003aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af2:	f383 8811 	msr	BASEPRI, r3
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	60bb      	str	r3, [r7, #8]
}
 8003b00:	bf00      	nop
 8003b02:	e7fe      	b.n	8003b02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b04:	f000 f87a 	bl	8003bfc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b08:	2100      	movs	r1, #0
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fdd0 	bl	80046b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b10:	f000 f882 	bl	8003c18 <xTaskResumeAll>
 8003b14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d107      	bne.n	8003b2c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003b1c:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <vTaskDelay+0x64>)
 8003b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b2c:	bf00      	nop
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	20000640 	.word	0x20000640
 8003b38:	e000ed04 	.word	0xe000ed04

08003b3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08a      	sub	sp, #40	; 0x28
 8003b40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b4a:	463a      	mov	r2, r7
 8003b4c:	1d39      	adds	r1, r7, #4
 8003b4e:	f107 0308 	add.w	r3, r7, #8
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fc fd0a 	bl	800056c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b58:	6839      	ldr	r1, [r7, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	9202      	str	r2, [sp, #8]
 8003b60:	9301      	str	r3, [sp, #4]
 8003b62:	2300      	movs	r3, #0
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	2300      	movs	r3, #0
 8003b68:	460a      	mov	r2, r1
 8003b6a:	491e      	ldr	r1, [pc, #120]	; (8003be4 <vTaskStartScheduler+0xa8>)
 8003b6c:	481e      	ldr	r0, [pc, #120]	; (8003be8 <vTaskStartScheduler+0xac>)
 8003b6e:	f7ff fe1d 	bl	80037ac <xTaskCreateStatic>
 8003b72:	4603      	mov	r3, r0
 8003b74:	4a1d      	ldr	r2, [pc, #116]	; (8003bec <vTaskStartScheduler+0xb0>)
 8003b76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b78:	4b1c      	ldr	r3, [pc, #112]	; (8003bec <vTaskStartScheduler+0xb0>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b80:	2301      	movs	r3, #1
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	e001      	b.n	8003b8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d116      	bne.n	8003bbe <vTaskStartScheduler+0x82>
	__asm volatile
 8003b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	613b      	str	r3, [r7, #16]
}
 8003ba2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ba4:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <vTaskStartScheduler+0xb4>)
 8003ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8003baa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003bac:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <vTaskStartScheduler+0xb8>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003bb2:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <vTaskStartScheduler+0xbc>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003bb8:	f000 fe6a 	bl	8004890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003bbc:	e00e      	b.n	8003bdc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d10a      	bne.n	8003bdc <vTaskStartScheduler+0xa0>
	__asm volatile
 8003bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bca:	f383 8811 	msr	BASEPRI, r3
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	60fb      	str	r3, [r7, #12]
}
 8003bd8:	bf00      	nop
 8003bda:	e7fe      	b.n	8003bda <vTaskStartScheduler+0x9e>
}
 8003bdc:	bf00      	nop
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	08005ad0 	.word	0x08005ad0
 8003be8:	0800418d 	.word	0x0800418d
 8003bec:	2000063c 	.word	0x2000063c
 8003bf0:	20000638 	.word	0x20000638
 8003bf4:	20000624 	.word	0x20000624
 8003bf8:	2000061c 	.word	0x2000061c

08003bfc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c00:	4b04      	ldr	r3, [pc, #16]	; (8003c14 <vTaskSuspendAll+0x18>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3301      	adds	r3, #1
 8003c06:	4a03      	ldr	r2, [pc, #12]	; (8003c14 <vTaskSuspendAll+0x18>)
 8003c08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c0a:	bf00      	nop
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	20000640 	.word	0x20000640

08003c18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c22:	2300      	movs	r3, #0
 8003c24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c26:	4b41      	ldr	r3, [pc, #260]	; (8003d2c <xTaskResumeAll+0x114>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10a      	bne.n	8003c44 <xTaskResumeAll+0x2c>
	__asm volatile
 8003c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c32:	f383 8811 	msr	BASEPRI, r3
 8003c36:	f3bf 8f6f 	isb	sy
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	603b      	str	r3, [r7, #0]
}
 8003c40:	bf00      	nop
 8003c42:	e7fe      	b.n	8003c42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c44:	f000 fec6 	bl	80049d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c48:	4b38      	ldr	r3, [pc, #224]	; (8003d2c <xTaskResumeAll+0x114>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	4a37      	ldr	r2, [pc, #220]	; (8003d2c <xTaskResumeAll+0x114>)
 8003c50:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c52:	4b36      	ldr	r3, [pc, #216]	; (8003d2c <xTaskResumeAll+0x114>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d161      	bne.n	8003d1e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c5a:	4b35      	ldr	r3, [pc, #212]	; (8003d30 <xTaskResumeAll+0x118>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d05d      	beq.n	8003d1e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c62:	e02e      	b.n	8003cc2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c64:	4b33      	ldr	r3, [pc, #204]	; (8003d34 <xTaskResumeAll+0x11c>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	3318      	adds	r3, #24
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fe fff7 	bl	8002c64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fe fff2 	bl	8002c64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	2201      	movs	r2, #1
 8003c86:	409a      	lsls	r2, r3
 8003c88:	4b2b      	ldr	r3, [pc, #172]	; (8003d38 <xTaskResumeAll+0x120>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	4a2a      	ldr	r2, [pc, #168]	; (8003d38 <xTaskResumeAll+0x120>)
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c96:	4613      	mov	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4a27      	ldr	r2, [pc, #156]	; (8003d3c <xTaskResumeAll+0x124>)
 8003ca0:	441a      	add	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4610      	mov	r0, r2
 8003caa:	f7fe ff7e 	bl	8002baa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb2:	4b23      	ldr	r3, [pc, #140]	; (8003d40 <xTaskResumeAll+0x128>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d302      	bcc.n	8003cc2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003cbc:	4b21      	ldr	r3, [pc, #132]	; (8003d44 <xTaskResumeAll+0x12c>)
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cc2:	4b1c      	ldr	r3, [pc, #112]	; (8003d34 <xTaskResumeAll+0x11c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1cc      	bne.n	8003c64 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003cd0:	f000 fb12 	bl	80042f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003cd4:	4b1c      	ldr	r3, [pc, #112]	; (8003d48 <xTaskResumeAll+0x130>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d010      	beq.n	8003d02 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ce0:	f000 f836 	bl	8003d50 <xTaskIncrementTick>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003cea:	4b16      	ldr	r3, [pc, #88]	; (8003d44 <xTaskResumeAll+0x12c>)
 8003cec:	2201      	movs	r2, #1
 8003cee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1f1      	bne.n	8003ce0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003cfc:	4b12      	ldr	r3, [pc, #72]	; (8003d48 <xTaskResumeAll+0x130>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d02:	4b10      	ldr	r3, [pc, #64]	; (8003d44 <xTaskResumeAll+0x12c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d009      	beq.n	8003d1e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d0e:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <xTaskResumeAll+0x134>)
 8003d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d1e:	f000 fe89 	bl	8004a34 <vPortExitCritical>

	return xAlreadyYielded;
 8003d22:	68bb      	ldr	r3, [r7, #8]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20000640 	.word	0x20000640
 8003d30:	20000618 	.word	0x20000618
 8003d34:	200005d8 	.word	0x200005d8
 8003d38:	20000620 	.word	0x20000620
 8003d3c:	2000051c 	.word	0x2000051c
 8003d40:	20000518 	.word	0x20000518
 8003d44:	2000062c 	.word	0x2000062c
 8003d48:	20000628 	.word	0x20000628
 8003d4c:	e000ed04 	.word	0xe000ed04

08003d50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d5a:	4b4e      	ldr	r3, [pc, #312]	; (8003e94 <xTaskIncrementTick+0x144>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f040 808e 	bne.w	8003e80 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d64:	4b4c      	ldr	r3, [pc, #304]	; (8003e98 <xTaskIncrementTick+0x148>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d6c:	4a4a      	ldr	r2, [pc, #296]	; (8003e98 <xTaskIncrementTick+0x148>)
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d120      	bne.n	8003dba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d78:	4b48      	ldr	r3, [pc, #288]	; (8003e9c <xTaskIncrementTick+0x14c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <xTaskIncrementTick+0x48>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	603b      	str	r3, [r7, #0]
}
 8003d94:	bf00      	nop
 8003d96:	e7fe      	b.n	8003d96 <xTaskIncrementTick+0x46>
 8003d98:	4b40      	ldr	r3, [pc, #256]	; (8003e9c <xTaskIncrementTick+0x14c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	4b40      	ldr	r3, [pc, #256]	; (8003ea0 <xTaskIncrementTick+0x150>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a3e      	ldr	r2, [pc, #248]	; (8003e9c <xTaskIncrementTick+0x14c>)
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	4a3e      	ldr	r2, [pc, #248]	; (8003ea0 <xTaskIncrementTick+0x150>)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	4b3d      	ldr	r3, [pc, #244]	; (8003ea4 <xTaskIncrementTick+0x154>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3301      	adds	r3, #1
 8003db2:	4a3c      	ldr	r2, [pc, #240]	; (8003ea4 <xTaskIncrementTick+0x154>)
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	f000 fa9f 	bl	80042f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003dba:	4b3b      	ldr	r3, [pc, #236]	; (8003ea8 <xTaskIncrementTick+0x158>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d348      	bcc.n	8003e56 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dc4:	4b35      	ldr	r3, [pc, #212]	; (8003e9c <xTaskIncrementTick+0x14c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d104      	bne.n	8003dd8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dce:	4b36      	ldr	r3, [pc, #216]	; (8003ea8 <xTaskIncrementTick+0x158>)
 8003dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd4:	601a      	str	r2, [r3, #0]
					break;
 8003dd6:	e03e      	b.n	8003e56 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dd8:	4b30      	ldr	r3, [pc, #192]	; (8003e9c <xTaskIncrementTick+0x14c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d203      	bcs.n	8003df8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003df0:	4a2d      	ldr	r2, [pc, #180]	; (8003ea8 <xTaskIncrementTick+0x158>)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003df6:	e02e      	b.n	8003e56 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fe ff31 	bl	8002c64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d004      	beq.n	8003e14 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	3318      	adds	r3, #24
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fe ff28 	bl	8002c64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e18:	2201      	movs	r2, #1
 8003e1a:	409a      	lsls	r2, r3
 8003e1c:	4b23      	ldr	r3, [pc, #140]	; (8003eac <xTaskIncrementTick+0x15c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	4a22      	ldr	r2, [pc, #136]	; (8003eac <xTaskIncrementTick+0x15c>)
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4a1f      	ldr	r2, [pc, #124]	; (8003eb0 <xTaskIncrementTick+0x160>)
 8003e34:	441a      	add	r2, r3
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	3304      	adds	r3, #4
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	f7fe feb4 	bl	8002baa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e46:	4b1b      	ldr	r3, [pc, #108]	; (8003eb4 <xTaskIncrementTick+0x164>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d3b9      	bcc.n	8003dc4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003e50:	2301      	movs	r3, #1
 8003e52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e54:	e7b6      	b.n	8003dc4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e56:	4b17      	ldr	r3, [pc, #92]	; (8003eb4 <xTaskIncrementTick+0x164>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5c:	4914      	ldr	r1, [pc, #80]	; (8003eb0 <xTaskIncrementTick+0x160>)
 8003e5e:	4613      	mov	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	440b      	add	r3, r1
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d901      	bls.n	8003e72 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e72:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <xTaskIncrementTick+0x168>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d007      	beq.n	8003e8a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	e004      	b.n	8003e8a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e80:	4b0e      	ldr	r3, [pc, #56]	; (8003ebc <xTaskIncrementTick+0x16c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	3301      	adds	r3, #1
 8003e86:	4a0d      	ldr	r2, [pc, #52]	; (8003ebc <xTaskIncrementTick+0x16c>)
 8003e88:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e8a:	697b      	ldr	r3, [r7, #20]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	20000640 	.word	0x20000640
 8003e98:	2000061c 	.word	0x2000061c
 8003e9c:	200005d0 	.word	0x200005d0
 8003ea0:	200005d4 	.word	0x200005d4
 8003ea4:	20000630 	.word	0x20000630
 8003ea8:	20000638 	.word	0x20000638
 8003eac:	20000620 	.word	0x20000620
 8003eb0:	2000051c 	.word	0x2000051c
 8003eb4:	20000518 	.word	0x20000518
 8003eb8:	2000062c 	.word	0x2000062c
 8003ebc:	20000628 	.word	0x20000628

08003ec0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ec6:	4b27      	ldr	r3, [pc, #156]	; (8003f64 <vTaskSwitchContext+0xa4>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ece:	4b26      	ldr	r3, [pc, #152]	; (8003f68 <vTaskSwitchContext+0xa8>)
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ed4:	e03f      	b.n	8003f56 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003ed6:	4b24      	ldr	r3, [pc, #144]	; (8003f68 <vTaskSwitchContext+0xa8>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003edc:	4b23      	ldr	r3, [pc, #140]	; (8003f6c <vTaskSwitchContext+0xac>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	fab3 f383 	clz	r3, r3
 8003ee8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003eea:	7afb      	ldrb	r3, [r7, #11]
 8003eec:	f1c3 031f 	rsb	r3, r3, #31
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	491f      	ldr	r1, [pc, #124]	; (8003f70 <vTaskSwitchContext+0xb0>)
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	440b      	add	r3, r1
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10a      	bne.n	8003f1c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0a:	f383 8811 	msr	BASEPRI, r3
 8003f0e:	f3bf 8f6f 	isb	sy
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	607b      	str	r3, [r7, #4]
}
 8003f18:	bf00      	nop
 8003f1a:	e7fe      	b.n	8003f1a <vTaskSwitchContext+0x5a>
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4a12      	ldr	r2, [pc, #72]	; (8003f70 <vTaskSwitchContext+0xb0>)
 8003f28:	4413      	add	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	605a      	str	r2, [r3, #4]
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	3308      	adds	r3, #8
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d104      	bne.n	8003f4c <vTaskSwitchContext+0x8c>
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	605a      	str	r2, [r3, #4]
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	4a08      	ldr	r2, [pc, #32]	; (8003f74 <vTaskSwitchContext+0xb4>)
 8003f54:	6013      	str	r3, [r2, #0]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	20000640 	.word	0x20000640
 8003f68:	2000062c 	.word	0x2000062c
 8003f6c:	20000620 	.word	0x20000620
 8003f70:	2000051c 	.word	0x2000051c
 8003f74:	20000518 	.word	0x20000518

08003f78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10a      	bne.n	8003f9e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	60fb      	str	r3, [r7, #12]
}
 8003f9a:	bf00      	nop
 8003f9c:	e7fe      	b.n	8003f9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f9e:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <vTaskPlaceOnEventList+0x44>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3318      	adds	r3, #24
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fe fe23 	bl	8002bf2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fac:	2101      	movs	r1, #1
 8003fae:	6838      	ldr	r0, [r7, #0]
 8003fb0:	f000 fb7e 	bl	80046b0 <prvAddCurrentTaskToDelayedList>
}
 8003fb4:	bf00      	nop
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20000518 	.word	0x20000518

08003fc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10a      	bne.n	8003fec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fda:	f383 8811 	msr	BASEPRI, r3
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	f3bf 8f4f 	dsb	sy
 8003fe6:	60fb      	str	r3, [r7, #12]
}
 8003fe8:	bf00      	nop
 8003fea:	e7fe      	b.n	8003fea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	3318      	adds	r3, #24
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fe fe37 	bl	8002c64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ff6:	4b1d      	ldr	r3, [pc, #116]	; (800406c <xTaskRemoveFromEventList+0xac>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d11c      	bne.n	8004038 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	3304      	adds	r3, #4
 8004002:	4618      	mov	r0, r3
 8004004:	f7fe fe2e 	bl	8002c64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	2201      	movs	r2, #1
 800400e:	409a      	lsls	r2, r3
 8004010:	4b17      	ldr	r3, [pc, #92]	; (8004070 <xTaskRemoveFromEventList+0xb0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4313      	orrs	r3, r2
 8004016:	4a16      	ldr	r2, [pc, #88]	; (8004070 <xTaskRemoveFromEventList+0xb0>)
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4a13      	ldr	r2, [pc, #76]	; (8004074 <xTaskRemoveFromEventList+0xb4>)
 8004028:	441a      	add	r2, r3
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	3304      	adds	r3, #4
 800402e:	4619      	mov	r1, r3
 8004030:	4610      	mov	r0, r2
 8004032:	f7fe fdba 	bl	8002baa <vListInsertEnd>
 8004036:	e005      	b.n	8004044 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	3318      	adds	r3, #24
 800403c:	4619      	mov	r1, r3
 800403e:	480e      	ldr	r0, [pc, #56]	; (8004078 <xTaskRemoveFromEventList+0xb8>)
 8004040:	f7fe fdb3 	bl	8002baa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004048:	4b0c      	ldr	r3, [pc, #48]	; (800407c <xTaskRemoveFromEventList+0xbc>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404e:	429a      	cmp	r2, r3
 8004050:	d905      	bls.n	800405e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004052:	2301      	movs	r3, #1
 8004054:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004056:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <xTaskRemoveFromEventList+0xc0>)
 8004058:	2201      	movs	r2, #1
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	e001      	b.n	8004062 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800405e:	2300      	movs	r3, #0
 8004060:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004062:	697b      	ldr	r3, [r7, #20]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20000640 	.word	0x20000640
 8004070:	20000620 	.word	0x20000620
 8004074:	2000051c 	.word	0x2000051c
 8004078:	200005d8 	.word	0x200005d8
 800407c:	20000518 	.word	0x20000518
 8004080:	2000062c 	.word	0x2000062c

08004084 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800408c:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <vTaskInternalSetTimeOutState+0x24>)
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004094:	4b05      	ldr	r3, [pc, #20]	; (80040ac <vTaskInternalSetTimeOutState+0x28>)
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	605a      	str	r2, [r3, #4]
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	20000630 	.word	0x20000630
 80040ac:	2000061c 	.word	0x2000061c

080040b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10a      	bne.n	80040d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	613b      	str	r3, [r7, #16]
}
 80040d2:	bf00      	nop
 80040d4:	e7fe      	b.n	80040d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10a      	bne.n	80040f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80040dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e0:	f383 8811 	msr	BASEPRI, r3
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	60fb      	str	r3, [r7, #12]
}
 80040ee:	bf00      	nop
 80040f0:	e7fe      	b.n	80040f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80040f2:	f000 fc6f 	bl	80049d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80040f6:	4b1d      	ldr	r3, [pc, #116]	; (800416c <xTaskCheckForTimeOut+0xbc>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410e:	d102      	bne.n	8004116 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004110:	2300      	movs	r3, #0
 8004112:	61fb      	str	r3, [r7, #28]
 8004114:	e023      	b.n	800415e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	4b15      	ldr	r3, [pc, #84]	; (8004170 <xTaskCheckForTimeOut+0xc0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d007      	beq.n	8004132 <xTaskCheckForTimeOut+0x82>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	429a      	cmp	r2, r3
 800412a:	d302      	bcc.n	8004132 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800412c:	2301      	movs	r3, #1
 800412e:	61fb      	str	r3, [r7, #28]
 8004130:	e015      	b.n	800415e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	429a      	cmp	r2, r3
 800413a:	d20b      	bcs.n	8004154 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	1ad2      	subs	r2, r2, r3
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff ff9b 	bl	8004084 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800414e:	2300      	movs	r3, #0
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	e004      	b.n	800415e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800415a:	2301      	movs	r3, #1
 800415c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800415e:	f000 fc69 	bl	8004a34 <vPortExitCritical>

	return xReturn;
 8004162:	69fb      	ldr	r3, [r7, #28]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3720      	adds	r7, #32
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	2000061c 	.word	0x2000061c
 8004170:	20000630 	.word	0x20000630

08004174 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004178:	4b03      	ldr	r3, [pc, #12]	; (8004188 <vTaskMissedYield+0x14>)
 800417a:	2201      	movs	r2, #1
 800417c:	601a      	str	r2, [r3, #0]
}
 800417e:	bf00      	nop
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	2000062c 	.word	0x2000062c

0800418c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004194:	f000 f852 	bl	800423c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004198:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <prvIdleTask+0x28>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d9f9      	bls.n	8004194 <prvIdleTask+0x8>
			{
				taskYIELD();
 80041a0:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <prvIdleTask+0x2c>)
 80041a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80041b0:	e7f0      	b.n	8004194 <prvIdleTask+0x8>
 80041b2:	bf00      	nop
 80041b4:	2000051c 	.word	0x2000051c
 80041b8:	e000ed04 	.word	0xe000ed04

080041bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041c2:	2300      	movs	r3, #0
 80041c4:	607b      	str	r3, [r7, #4]
 80041c6:	e00c      	b.n	80041e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4a12      	ldr	r2, [pc, #72]	; (800421c <prvInitialiseTaskLists+0x60>)
 80041d4:	4413      	add	r3, r2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fe fcba 	bl	8002b50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3301      	adds	r3, #1
 80041e0:	607b      	str	r3, [r7, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b06      	cmp	r3, #6
 80041e6:	d9ef      	bls.n	80041c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041e8:	480d      	ldr	r0, [pc, #52]	; (8004220 <prvInitialiseTaskLists+0x64>)
 80041ea:	f7fe fcb1 	bl	8002b50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80041ee:	480d      	ldr	r0, [pc, #52]	; (8004224 <prvInitialiseTaskLists+0x68>)
 80041f0:	f7fe fcae 	bl	8002b50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80041f4:	480c      	ldr	r0, [pc, #48]	; (8004228 <prvInitialiseTaskLists+0x6c>)
 80041f6:	f7fe fcab 	bl	8002b50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80041fa:	480c      	ldr	r0, [pc, #48]	; (800422c <prvInitialiseTaskLists+0x70>)
 80041fc:	f7fe fca8 	bl	8002b50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004200:	480b      	ldr	r0, [pc, #44]	; (8004230 <prvInitialiseTaskLists+0x74>)
 8004202:	f7fe fca5 	bl	8002b50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004206:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <prvInitialiseTaskLists+0x78>)
 8004208:	4a05      	ldr	r2, [pc, #20]	; (8004220 <prvInitialiseTaskLists+0x64>)
 800420a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800420c:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <prvInitialiseTaskLists+0x7c>)
 800420e:	4a05      	ldr	r2, [pc, #20]	; (8004224 <prvInitialiseTaskLists+0x68>)
 8004210:	601a      	str	r2, [r3, #0]
}
 8004212:	bf00      	nop
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	2000051c 	.word	0x2000051c
 8004220:	200005a8 	.word	0x200005a8
 8004224:	200005bc 	.word	0x200005bc
 8004228:	200005d8 	.word	0x200005d8
 800422c:	200005ec 	.word	0x200005ec
 8004230:	20000604 	.word	0x20000604
 8004234:	200005d0 	.word	0x200005d0
 8004238:	200005d4 	.word	0x200005d4

0800423c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004242:	e019      	b.n	8004278 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004244:	f000 fbc6 	bl	80049d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004248:	4b10      	ldr	r3, [pc, #64]	; (800428c <prvCheckTasksWaitingTermination+0x50>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3304      	adds	r3, #4
 8004254:	4618      	mov	r0, r3
 8004256:	f7fe fd05 	bl	8002c64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800425a:	4b0d      	ldr	r3, [pc, #52]	; (8004290 <prvCheckTasksWaitingTermination+0x54>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3b01      	subs	r3, #1
 8004260:	4a0b      	ldr	r2, [pc, #44]	; (8004290 <prvCheckTasksWaitingTermination+0x54>)
 8004262:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004264:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <prvCheckTasksWaitingTermination+0x58>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3b01      	subs	r3, #1
 800426a:	4a0a      	ldr	r2, [pc, #40]	; (8004294 <prvCheckTasksWaitingTermination+0x58>)
 800426c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800426e:	f000 fbe1 	bl	8004a34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f810 	bl	8004298 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004278:	4b06      	ldr	r3, [pc, #24]	; (8004294 <prvCheckTasksWaitingTermination+0x58>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1e1      	bne.n	8004244 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004280:	bf00      	nop
 8004282:	bf00      	nop
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	200005ec 	.word	0x200005ec
 8004290:	20000618 	.word	0x20000618
 8004294:	20000600 	.word	0x20000600

08004298 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d108      	bne.n	80042bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fd7e 	bl	8004db0 <vPortFree>
				vPortFree( pxTCB );
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 fd7b 	bl	8004db0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80042ba:	e018      	b.n	80042ee <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d103      	bne.n	80042ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fd72 	bl	8004db0 <vPortFree>
	}
 80042cc:	e00f      	b.n	80042ee <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d00a      	beq.n	80042ee <prvDeleteTCB+0x56>
	__asm volatile
 80042d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	60fb      	str	r3, [r7, #12]
}
 80042ea:	bf00      	nop
 80042ec:	e7fe      	b.n	80042ec <prvDeleteTCB+0x54>
	}
 80042ee:	bf00      	nop
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
	...

080042f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042fe:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <prvResetNextTaskUnblockTime+0x38>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d104      	bne.n	8004312 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004308:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <prvResetNextTaskUnblockTime+0x3c>)
 800430a:	f04f 32ff 	mov.w	r2, #4294967295
 800430e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004310:	e008      	b.n	8004324 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004312:	4b07      	ldr	r3, [pc, #28]	; (8004330 <prvResetNextTaskUnblockTime+0x38>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	4a04      	ldr	r2, [pc, #16]	; (8004334 <prvResetNextTaskUnblockTime+0x3c>)
 8004322:	6013      	str	r3, [r2, #0]
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	200005d0 	.word	0x200005d0
 8004334:	20000638 	.word	0x20000638

08004338 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800433e:	4b0b      	ldr	r3, [pc, #44]	; (800436c <xTaskGetSchedulerState+0x34>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d102      	bne.n	800434c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004346:	2301      	movs	r3, #1
 8004348:	607b      	str	r3, [r7, #4]
 800434a:	e008      	b.n	800435e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800434c:	4b08      	ldr	r3, [pc, #32]	; (8004370 <xTaskGetSchedulerState+0x38>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d102      	bne.n	800435a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004354:	2302      	movs	r3, #2
 8004356:	607b      	str	r3, [r7, #4]
 8004358:	e001      	b.n	800435e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800435a:	2300      	movs	r3, #0
 800435c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800435e:	687b      	ldr	r3, [r7, #4]
	}
 8004360:	4618      	mov	r0, r3
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	20000624 	.word	0x20000624
 8004370:	20000640 	.word	0x20000640

08004374 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d05e      	beq.n	8004448 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438e:	4b31      	ldr	r3, [pc, #196]	; (8004454 <xTaskPriorityInherit+0xe0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	429a      	cmp	r2, r3
 8004396:	d24e      	bcs.n	8004436 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	2b00      	cmp	r3, #0
 800439e:	db06      	blt.n	80043ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043a0:	4b2c      	ldr	r3, [pc, #176]	; (8004454 <xTaskPriorityInherit+0xe0>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	f1c3 0207 	rsb	r2, r3, #7
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	6959      	ldr	r1, [r3, #20]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b6:	4613      	mov	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4a26      	ldr	r2, [pc, #152]	; (8004458 <xTaskPriorityInherit+0xe4>)
 80043c0:	4413      	add	r3, r2
 80043c2:	4299      	cmp	r1, r3
 80043c4:	d12f      	bne.n	8004426 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	3304      	adds	r3, #4
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fe fc4a 	bl	8002c64 <uxListRemove>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10a      	bne.n	80043ec <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043da:	2201      	movs	r2, #1
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	43da      	mvns	r2, r3
 80043e2:	4b1e      	ldr	r3, [pc, #120]	; (800445c <xTaskPriorityInherit+0xe8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4013      	ands	r3, r2
 80043e8:	4a1c      	ldr	r2, [pc, #112]	; (800445c <xTaskPriorityInherit+0xe8>)
 80043ea:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80043ec:	4b19      	ldr	r3, [pc, #100]	; (8004454 <xTaskPriorityInherit+0xe0>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fa:	2201      	movs	r2, #1
 80043fc:	409a      	lsls	r2, r3
 80043fe:	4b17      	ldr	r3, [pc, #92]	; (800445c <xTaskPriorityInherit+0xe8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4313      	orrs	r3, r2
 8004404:	4a15      	ldr	r2, [pc, #84]	; (800445c <xTaskPriorityInherit+0xe8>)
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4a10      	ldr	r2, [pc, #64]	; (8004458 <xTaskPriorityInherit+0xe4>)
 8004416:	441a      	add	r2, r3
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	3304      	adds	r3, #4
 800441c:	4619      	mov	r1, r3
 800441e:	4610      	mov	r0, r2
 8004420:	f7fe fbc3 	bl	8002baa <vListInsertEnd>
 8004424:	e004      	b.n	8004430 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004426:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <xTaskPriorityInherit+0xe0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004430:	2301      	movs	r3, #1
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	e008      	b.n	8004448 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800443a:	4b06      	ldr	r3, [pc, #24]	; (8004454 <xTaskPriorityInherit+0xe0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	429a      	cmp	r2, r3
 8004442:	d201      	bcs.n	8004448 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004444:	2301      	movs	r3, #1
 8004446:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004448:	68fb      	ldr	r3, [r7, #12]
	}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000518 	.word	0x20000518
 8004458:	2000051c 	.word	0x2000051c
 800445c:	20000620 	.word	0x20000620

08004460 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d06e      	beq.n	8004554 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004476:	4b3a      	ldr	r3, [pc, #232]	; (8004560 <xTaskPriorityDisinherit+0x100>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	429a      	cmp	r2, r3
 800447e:	d00a      	beq.n	8004496 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	60fb      	str	r3, [r7, #12]
}
 8004492:	bf00      	nop
 8004494:	e7fe      	b.n	8004494 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10a      	bne.n	80044b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	60bb      	str	r3, [r7, #8]
}
 80044b0:	bf00      	nop
 80044b2:	e7fe      	b.n	80044b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b8:	1e5a      	subs	r2, r3, #1
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d044      	beq.n	8004554 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d140      	bne.n	8004554 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	3304      	adds	r3, #4
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fe fbc4 	bl	8002c64 <uxListRemove>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d115      	bne.n	800450e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e6:	491f      	ldr	r1, [pc, #124]	; (8004564 <xTaskPriorityDisinherit+0x104>)
 80044e8:	4613      	mov	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10a      	bne.n	800450e <xTaskPriorityDisinherit+0xae>
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	2201      	movs	r2, #1
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	43da      	mvns	r2, r3
 8004504:	4b18      	ldr	r3, [pc, #96]	; (8004568 <xTaskPriorityDisinherit+0x108>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4013      	ands	r3, r2
 800450a:	4a17      	ldr	r2, [pc, #92]	; (8004568 <xTaskPriorityDisinherit+0x108>)
 800450c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451a:	f1c3 0207 	rsb	r2, r3, #7
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004526:	2201      	movs	r2, #1
 8004528:	409a      	lsls	r2, r3
 800452a:	4b0f      	ldr	r3, [pc, #60]	; (8004568 <xTaskPriorityDisinherit+0x108>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4313      	orrs	r3, r2
 8004530:	4a0d      	ldr	r2, [pc, #52]	; (8004568 <xTaskPriorityDisinherit+0x108>)
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004538:	4613      	mov	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4a08      	ldr	r2, [pc, #32]	; (8004564 <xTaskPriorityDisinherit+0x104>)
 8004542:	441a      	add	r2, r3
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	3304      	adds	r3, #4
 8004548:	4619      	mov	r1, r3
 800454a:	4610      	mov	r0, r2
 800454c:	f7fe fb2d 	bl	8002baa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004550:	2301      	movs	r3, #1
 8004552:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004554:	697b      	ldr	r3, [r7, #20]
	}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	20000518 	.word	0x20000518
 8004564:	2000051c 	.word	0x2000051c
 8004568:	20000620 	.word	0x20000620

0800456c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800457a:	2301      	movs	r3, #1
 800457c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d077      	beq.n	8004674 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10a      	bne.n	80045a2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	60fb      	str	r3, [r7, #12]
}
 800459e:	bf00      	nop
 80045a0:	e7fe      	b.n	80045a0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d902      	bls.n	80045b2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	61fb      	str	r3, [r7, #28]
 80045b0:	e002      	b.n	80045b8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	69fa      	ldr	r2, [r7, #28]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d058      	beq.n	8004674 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d153      	bne.n	8004674 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80045cc:	4b2b      	ldr	r3, [pc, #172]	; (800467c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d10a      	bne.n	80045ec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80045d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	60bb      	str	r3, [r7, #8]
}
 80045e8:	bf00      	nop
 80045ea:	e7fe      	b.n	80045ea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	69fa      	ldr	r2, [r7, #28]
 80045f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	db04      	blt.n	800460a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	f1c3 0207 	rsb	r2, r3, #7
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	6959      	ldr	r1, [r3, #20]
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4a19      	ldr	r2, [pc, #100]	; (8004680 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800461a:	4413      	add	r3, r2
 800461c:	4299      	cmp	r1, r3
 800461e:	d129      	bne.n	8004674 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	3304      	adds	r3, #4
 8004624:	4618      	mov	r0, r3
 8004626:	f7fe fb1d 	bl	8002c64 <uxListRemove>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10a      	bne.n	8004646 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004634:	2201      	movs	r2, #1
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	43da      	mvns	r2, r3
 800463c:	4b11      	ldr	r3, [pc, #68]	; (8004684 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4013      	ands	r3, r2
 8004642:	4a10      	ldr	r2, [pc, #64]	; (8004684 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004644:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	2201      	movs	r2, #1
 800464c:	409a      	lsls	r2, r3
 800464e:	4b0d      	ldr	r3, [pc, #52]	; (8004684 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4313      	orrs	r3, r2
 8004654:	4a0b      	ldr	r2, [pc, #44]	; (8004684 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004656:	6013      	str	r3, [r2, #0]
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4a06      	ldr	r2, [pc, #24]	; (8004680 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004666:	441a      	add	r2, r3
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	3304      	adds	r3, #4
 800466c:	4619      	mov	r1, r3
 800466e:	4610      	mov	r0, r2
 8004670:	f7fe fa9b 	bl	8002baa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004674:	bf00      	nop
 8004676:	3720      	adds	r7, #32
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20000518 	.word	0x20000518
 8004680:	2000051c 	.word	0x2000051c
 8004684:	20000620 	.word	0x20000620

08004688 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800468c:	4b07      	ldr	r3, [pc, #28]	; (80046ac <pvTaskIncrementMutexHeldCount+0x24>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d004      	beq.n	800469e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004694:	4b05      	ldr	r3, [pc, #20]	; (80046ac <pvTaskIncrementMutexHeldCount+0x24>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800469a:	3201      	adds	r2, #1
 800469c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800469e:	4b03      	ldr	r3, [pc, #12]	; (80046ac <pvTaskIncrementMutexHeldCount+0x24>)
 80046a0:	681b      	ldr	r3, [r3, #0]
	}
 80046a2:	4618      	mov	r0, r3
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	20000518 	.word	0x20000518

080046b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046ba:	4b29      	ldr	r3, [pc, #164]	; (8004760 <prvAddCurrentTaskToDelayedList+0xb0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046c0:	4b28      	ldr	r3, [pc, #160]	; (8004764 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3304      	adds	r3, #4
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fe facc 	bl	8002c64 <uxListRemove>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10b      	bne.n	80046ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80046d2:	4b24      	ldr	r3, [pc, #144]	; (8004764 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d8:	2201      	movs	r2, #1
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	43da      	mvns	r2, r3
 80046e0:	4b21      	ldr	r3, [pc, #132]	; (8004768 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4013      	ands	r3, r2
 80046e6:	4a20      	ldr	r2, [pc, #128]	; (8004768 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f0:	d10a      	bne.n	8004708 <prvAddCurrentTaskToDelayedList+0x58>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d007      	beq.n	8004708 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046f8:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3304      	adds	r3, #4
 80046fe:	4619      	mov	r1, r3
 8004700:	481a      	ldr	r0, [pc, #104]	; (800476c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004702:	f7fe fa52 	bl	8002baa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004706:	e026      	b.n	8004756 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4413      	add	r3, r2
 800470e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004710:	4b14      	ldr	r3, [pc, #80]	; (8004764 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	429a      	cmp	r2, r3
 800471e:	d209      	bcs.n	8004734 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004720:	4b13      	ldr	r3, [pc, #76]	; (8004770 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	3304      	adds	r3, #4
 800472a:	4619      	mov	r1, r3
 800472c:	4610      	mov	r0, r2
 800472e:	f7fe fa60 	bl	8002bf2 <vListInsert>
}
 8004732:	e010      	b.n	8004756 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004734:	4b0f      	ldr	r3, [pc, #60]	; (8004774 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	4b0a      	ldr	r3, [pc, #40]	; (8004764 <prvAddCurrentTaskToDelayedList+0xb4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3304      	adds	r3, #4
 800473e:	4619      	mov	r1, r3
 8004740:	4610      	mov	r0, r2
 8004742:	f7fe fa56 	bl	8002bf2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004746:	4b0c      	ldr	r3, [pc, #48]	; (8004778 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	429a      	cmp	r2, r3
 800474e:	d202      	bcs.n	8004756 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004750:	4a09      	ldr	r2, [pc, #36]	; (8004778 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	6013      	str	r3, [r2, #0]
}
 8004756:	bf00      	nop
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	2000061c 	.word	0x2000061c
 8004764:	20000518 	.word	0x20000518
 8004768:	20000620 	.word	0x20000620
 800476c:	20000604 	.word	0x20000604
 8004770:	200005d4 	.word	0x200005d4
 8004774:	200005d0 	.word	0x200005d0
 8004778:	20000638 	.word	0x20000638

0800477c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	3b04      	subs	r3, #4
 800478c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004794:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	3b04      	subs	r3, #4
 800479a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f023 0201 	bic.w	r2, r3, #1
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3b04      	subs	r3, #4
 80047aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80047ac:	4a0c      	ldr	r2, [pc, #48]	; (80047e0 <pxPortInitialiseStack+0x64>)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	3b14      	subs	r3, #20
 80047b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3b04      	subs	r3, #4
 80047c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f06f 0202 	mvn.w	r2, #2
 80047ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	3b20      	subs	r3, #32
 80047d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80047d2:	68fb      	ldr	r3, [r7, #12]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	080047e5 	.word	0x080047e5

080047e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80047ea:	2300      	movs	r3, #0
 80047ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80047ee:	4b12      	ldr	r3, [pc, #72]	; (8004838 <prvTaskExitError+0x54>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f6:	d00a      	beq.n	800480e <prvTaskExitError+0x2a>
	__asm volatile
 80047f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	60fb      	str	r3, [r7, #12]
}
 800480a:	bf00      	nop
 800480c:	e7fe      	b.n	800480c <prvTaskExitError+0x28>
	__asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	60bb      	str	r3, [r7, #8]
}
 8004820:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004822:	bf00      	nop
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0fc      	beq.n	8004824 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800482a:	bf00      	nop
 800482c:	bf00      	nop
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	2000000c 	.word	0x2000000c
 800483c:	00000000 	.word	0x00000000

08004840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004840:	4b07      	ldr	r3, [pc, #28]	; (8004860 <pxCurrentTCBConst2>)
 8004842:	6819      	ldr	r1, [r3, #0]
 8004844:	6808      	ldr	r0, [r1, #0]
 8004846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800484a:	f380 8809 	msr	PSP, r0
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f04f 0000 	mov.w	r0, #0
 8004856:	f380 8811 	msr	BASEPRI, r0
 800485a:	4770      	bx	lr
 800485c:	f3af 8000 	nop.w

08004860 <pxCurrentTCBConst2>:
 8004860:	20000518 	.word	0x20000518
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop

08004868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004868:	4808      	ldr	r0, [pc, #32]	; (800488c <prvPortStartFirstTask+0x24>)
 800486a:	6800      	ldr	r0, [r0, #0]
 800486c:	6800      	ldr	r0, [r0, #0]
 800486e:	f380 8808 	msr	MSP, r0
 8004872:	f04f 0000 	mov.w	r0, #0
 8004876:	f380 8814 	msr	CONTROL, r0
 800487a:	b662      	cpsie	i
 800487c:	b661      	cpsie	f
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	df00      	svc	0
 8004888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800488a:	bf00      	nop
 800488c:	e000ed08 	.word	0xe000ed08

08004890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004896:	4b46      	ldr	r3, [pc, #280]	; (80049b0 <xPortStartScheduler+0x120>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a46      	ldr	r2, [pc, #280]	; (80049b4 <xPortStartScheduler+0x124>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d10a      	bne.n	80048b6 <xPortStartScheduler+0x26>
	__asm volatile
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	613b      	str	r3, [r7, #16]
}
 80048b2:	bf00      	nop
 80048b4:	e7fe      	b.n	80048b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80048b6:	4b3e      	ldr	r3, [pc, #248]	; (80049b0 <xPortStartScheduler+0x120>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a3f      	ldr	r2, [pc, #252]	; (80049b8 <xPortStartScheduler+0x128>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d10a      	bne.n	80048d6 <xPortStartScheduler+0x46>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	60fb      	str	r3, [r7, #12]
}
 80048d2:	bf00      	nop
 80048d4:	e7fe      	b.n	80048d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80048d6:	4b39      	ldr	r3, [pc, #228]	; (80049bc <xPortStartScheduler+0x12c>)
 80048d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	22ff      	movs	r2, #255	; 0xff
 80048e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80048f0:	78fb      	ldrb	r3, [r7, #3]
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	4b31      	ldr	r3, [pc, #196]	; (80049c0 <xPortStartScheduler+0x130>)
 80048fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80048fe:	4b31      	ldr	r3, [pc, #196]	; (80049c4 <xPortStartScheduler+0x134>)
 8004900:	2207      	movs	r2, #7
 8004902:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004904:	e009      	b.n	800491a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004906:	4b2f      	ldr	r3, [pc, #188]	; (80049c4 <xPortStartScheduler+0x134>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3b01      	subs	r3, #1
 800490c:	4a2d      	ldr	r2, [pc, #180]	; (80049c4 <xPortStartScheduler+0x134>)
 800490e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004910:	78fb      	ldrb	r3, [r7, #3]
 8004912:	b2db      	uxtb	r3, r3
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	b2db      	uxtb	r3, r3
 8004918:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800491a:	78fb      	ldrb	r3, [r7, #3]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004922:	2b80      	cmp	r3, #128	; 0x80
 8004924:	d0ef      	beq.n	8004906 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004926:	4b27      	ldr	r3, [pc, #156]	; (80049c4 <xPortStartScheduler+0x134>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f1c3 0307 	rsb	r3, r3, #7
 800492e:	2b04      	cmp	r3, #4
 8004930:	d00a      	beq.n	8004948 <xPortStartScheduler+0xb8>
	__asm volatile
 8004932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	60bb      	str	r3, [r7, #8]
}
 8004944:	bf00      	nop
 8004946:	e7fe      	b.n	8004946 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004948:	4b1e      	ldr	r3, [pc, #120]	; (80049c4 <xPortStartScheduler+0x134>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	021b      	lsls	r3, r3, #8
 800494e:	4a1d      	ldr	r2, [pc, #116]	; (80049c4 <xPortStartScheduler+0x134>)
 8004950:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004952:	4b1c      	ldr	r3, [pc, #112]	; (80049c4 <xPortStartScheduler+0x134>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800495a:	4a1a      	ldr	r2, [pc, #104]	; (80049c4 <xPortStartScheduler+0x134>)
 800495c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	b2da      	uxtb	r2, r3
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004966:	4b18      	ldr	r3, [pc, #96]	; (80049c8 <xPortStartScheduler+0x138>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a17      	ldr	r2, [pc, #92]	; (80049c8 <xPortStartScheduler+0x138>)
 800496c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004970:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004972:	4b15      	ldr	r3, [pc, #84]	; (80049c8 <xPortStartScheduler+0x138>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a14      	ldr	r2, [pc, #80]	; (80049c8 <xPortStartScheduler+0x138>)
 8004978:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800497c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800497e:	f000 f8dd 	bl	8004b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004982:	4b12      	ldr	r3, [pc, #72]	; (80049cc <xPortStartScheduler+0x13c>)
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004988:	f000 f8fc 	bl	8004b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800498c:	4b10      	ldr	r3, [pc, #64]	; (80049d0 <xPortStartScheduler+0x140>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a0f      	ldr	r2, [pc, #60]	; (80049d0 <xPortStartScheduler+0x140>)
 8004992:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004996:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004998:	f7ff ff66 	bl	8004868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800499c:	f7ff fa90 	bl	8003ec0 <vTaskSwitchContext>
	prvTaskExitError();
 80049a0:	f7ff ff20 	bl	80047e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	e000ed00 	.word	0xe000ed00
 80049b4:	410fc271 	.word	0x410fc271
 80049b8:	410fc270 	.word	0x410fc270
 80049bc:	e000e400 	.word	0xe000e400
 80049c0:	20000644 	.word	0x20000644
 80049c4:	20000648 	.word	0x20000648
 80049c8:	e000ed20 	.word	0xe000ed20
 80049cc:	2000000c 	.word	0x2000000c
 80049d0:	e000ef34 	.word	0xe000ef34

080049d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
	__asm volatile
 80049da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	607b      	str	r3, [r7, #4]
}
 80049ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80049ee:	4b0f      	ldr	r3, [pc, #60]	; (8004a2c <vPortEnterCritical+0x58>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3301      	adds	r3, #1
 80049f4:	4a0d      	ldr	r2, [pc, #52]	; (8004a2c <vPortEnterCritical+0x58>)
 80049f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80049f8:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <vPortEnterCritical+0x58>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d10f      	bne.n	8004a20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <vPortEnterCritical+0x5c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <vPortEnterCritical+0x4c>
	__asm volatile
 8004a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	603b      	str	r3, [r7, #0]
}
 8004a1c:	bf00      	nop
 8004a1e:	e7fe      	b.n	8004a1e <vPortEnterCritical+0x4a>
	}
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	2000000c 	.word	0x2000000c
 8004a30:	e000ed04 	.word	0xe000ed04

08004a34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a3a:	4b12      	ldr	r3, [pc, #72]	; (8004a84 <vPortExitCritical+0x50>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10a      	bne.n	8004a58 <vPortExitCritical+0x24>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	607b      	str	r3, [r7, #4]
}
 8004a54:	bf00      	nop
 8004a56:	e7fe      	b.n	8004a56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004a58:	4b0a      	ldr	r3, [pc, #40]	; (8004a84 <vPortExitCritical+0x50>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	4a09      	ldr	r2, [pc, #36]	; (8004a84 <vPortExitCritical+0x50>)
 8004a60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a62:	4b08      	ldr	r3, [pc, #32]	; (8004a84 <vPortExitCritical+0x50>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d105      	bne.n	8004a76 <vPortExitCritical+0x42>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	f383 8811 	msr	BASEPRI, r3
}
 8004a74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	2000000c 	.word	0x2000000c
	...

08004a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a90:	f3ef 8009 	mrs	r0, PSP
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	4b15      	ldr	r3, [pc, #84]	; (8004af0 <pxCurrentTCBConst>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	f01e 0f10 	tst.w	lr, #16
 8004aa0:	bf08      	it	eq
 8004aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aaa:	6010      	str	r0, [r2, #0]
 8004aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ab4:	f380 8811 	msr	BASEPRI, r0
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f7ff f9fe 	bl	8003ec0 <vTaskSwitchContext>
 8004ac4:	f04f 0000 	mov.w	r0, #0
 8004ac8:	f380 8811 	msr	BASEPRI, r0
 8004acc:	bc09      	pop	{r0, r3}
 8004ace:	6819      	ldr	r1, [r3, #0]
 8004ad0:	6808      	ldr	r0, [r1, #0]
 8004ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad6:	f01e 0f10 	tst.w	lr, #16
 8004ada:	bf08      	it	eq
 8004adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ae0:	f380 8809 	msr	PSP, r0
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	f3af 8000 	nop.w

08004af0 <pxCurrentTCBConst>:
 8004af0:	20000518 	.word	0x20000518
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop

08004af8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
	__asm volatile
 8004afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	607b      	str	r3, [r7, #4]
}
 8004b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b12:	f7ff f91d 	bl	8003d50 <xTaskIncrementTick>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b1c:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <SysTick_Handler+0x40>)
 8004b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	2300      	movs	r3, #0
 8004b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	f383 8811 	msr	BASEPRI, r3
}
 8004b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b30:	bf00      	nop
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	e000ed04 	.word	0xe000ed04

08004b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b40:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <vPortSetupTimerInterrupt+0x34>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b46:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <vPortSetupTimerInterrupt+0x38>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b4c:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <vPortSetupTimerInterrupt+0x3c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a0a      	ldr	r2, [pc, #40]	; (8004b7c <vPortSetupTimerInterrupt+0x40>)
 8004b52:	fba2 2303 	umull	r2, r3, r2, r3
 8004b56:	099b      	lsrs	r3, r3, #6
 8004b58:	4a09      	ldr	r2, [pc, #36]	; (8004b80 <vPortSetupTimerInterrupt+0x44>)
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b5e:	4b04      	ldr	r3, [pc, #16]	; (8004b70 <vPortSetupTimerInterrupt+0x34>)
 8004b60:	2207      	movs	r2, #7
 8004b62:	601a      	str	r2, [r3, #0]
}
 8004b64:	bf00      	nop
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	e000e010 	.word	0xe000e010
 8004b74:	e000e018 	.word	0xe000e018
 8004b78:	20000000 	.word	0x20000000
 8004b7c:	10624dd3 	.word	0x10624dd3
 8004b80:	e000e014 	.word	0xe000e014

08004b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004b84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004b94 <vPortEnableVFP+0x10>
 8004b88:	6801      	ldr	r1, [r0, #0]
 8004b8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004b8e:	6001      	str	r1, [r0, #0]
 8004b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004b92:	bf00      	nop
 8004b94:	e000ed88 	.word	0xe000ed88

08004b98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004b9e:	f3ef 8305 	mrs	r3, IPSR
 8004ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b0f      	cmp	r3, #15
 8004ba8:	d914      	bls.n	8004bd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004baa:	4a17      	ldr	r2, [pc, #92]	; (8004c08 <vPortValidateInterruptPriority+0x70>)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4413      	add	r3, r2
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004bb4:	4b15      	ldr	r3, [pc, #84]	; (8004c0c <vPortValidateInterruptPriority+0x74>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	7afa      	ldrb	r2, [r7, #11]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d20a      	bcs.n	8004bd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	607b      	str	r3, [r7, #4]
}
 8004bd0:	bf00      	nop
 8004bd2:	e7fe      	b.n	8004bd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004bd4:	4b0e      	ldr	r3, [pc, #56]	; (8004c10 <vPortValidateInterruptPriority+0x78>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bdc:	4b0d      	ldr	r3, [pc, #52]	; (8004c14 <vPortValidateInterruptPriority+0x7c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d90a      	bls.n	8004bfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	603b      	str	r3, [r7, #0]
}
 8004bf6:	bf00      	nop
 8004bf8:	e7fe      	b.n	8004bf8 <vPortValidateInterruptPriority+0x60>
	}
 8004bfa:	bf00      	nop
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	e000e3f0 	.word	0xe000e3f0
 8004c0c:	20000644 	.word	0x20000644
 8004c10:	e000ed0c 	.word	0xe000ed0c
 8004c14:	20000648 	.word	0x20000648

08004c18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08a      	sub	sp, #40	; 0x28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c20:	2300      	movs	r3, #0
 8004c22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c24:	f7fe ffea 	bl	8003bfc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c28:	4b5b      	ldr	r3, [pc, #364]	; (8004d98 <pvPortMalloc+0x180>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c30:	f000 f920 	bl	8004e74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c34:	4b59      	ldr	r3, [pc, #356]	; (8004d9c <pvPortMalloc+0x184>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f040 8093 	bne.w	8004d68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d01d      	beq.n	8004c84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004c48:	2208      	movs	r2, #8
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d014      	beq.n	8004c84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f023 0307 	bic.w	r3, r3, #7
 8004c60:	3308      	adds	r3, #8
 8004c62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f003 0307 	and.w	r3, r3, #7
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00a      	beq.n	8004c84 <pvPortMalloc+0x6c>
	__asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	617b      	str	r3, [r7, #20]
}
 8004c80:	bf00      	nop
 8004c82:	e7fe      	b.n	8004c82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d06e      	beq.n	8004d68 <pvPortMalloc+0x150>
 8004c8a:	4b45      	ldr	r3, [pc, #276]	; (8004da0 <pvPortMalloc+0x188>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d869      	bhi.n	8004d68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c94:	4b43      	ldr	r3, [pc, #268]	; (8004da4 <pvPortMalloc+0x18c>)
 8004c96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c98:	4b42      	ldr	r3, [pc, #264]	; (8004da4 <pvPortMalloc+0x18c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c9e:	e004      	b.n	8004caa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d903      	bls.n	8004cbc <pvPortMalloc+0xa4>
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1f1      	bne.n	8004ca0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004cbc:	4b36      	ldr	r3, [pc, #216]	; (8004d98 <pvPortMalloc+0x180>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d050      	beq.n	8004d68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2208      	movs	r2, #8
 8004ccc:	4413      	add	r3, r2
 8004cce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	1ad2      	subs	r2, r2, r3
 8004ce0:	2308      	movs	r3, #8
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d91f      	bls.n	8004d28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4413      	add	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	f003 0307 	and.w	r3, r3, #7
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <pvPortMalloc+0xf8>
	__asm volatile
 8004cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	613b      	str	r3, [r7, #16]
}
 8004d0c:	bf00      	nop
 8004d0e:	e7fe      	b.n	8004d0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	1ad2      	subs	r2, r2, r3
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d22:	69b8      	ldr	r0, [r7, #24]
 8004d24:	f000 f908 	bl	8004f38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d28:	4b1d      	ldr	r3, [pc, #116]	; (8004da0 <pvPortMalloc+0x188>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	4a1b      	ldr	r2, [pc, #108]	; (8004da0 <pvPortMalloc+0x188>)
 8004d34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d36:	4b1a      	ldr	r3, [pc, #104]	; (8004da0 <pvPortMalloc+0x188>)
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	4b1b      	ldr	r3, [pc, #108]	; (8004da8 <pvPortMalloc+0x190>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d203      	bcs.n	8004d4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d42:	4b17      	ldr	r3, [pc, #92]	; (8004da0 <pvPortMalloc+0x188>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a18      	ldr	r2, [pc, #96]	; (8004da8 <pvPortMalloc+0x190>)
 8004d48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	4b13      	ldr	r3, [pc, #76]	; (8004d9c <pvPortMalloc+0x184>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	431a      	orrs	r2, r3
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004d5e:	4b13      	ldr	r3, [pc, #76]	; (8004dac <pvPortMalloc+0x194>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3301      	adds	r3, #1
 8004d64:	4a11      	ldr	r2, [pc, #68]	; (8004dac <pvPortMalloc+0x194>)
 8004d66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d68:	f7fe ff56 	bl	8003c18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <pvPortMalloc+0x174>
	__asm volatile
 8004d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7a:	f383 8811 	msr	BASEPRI, r3
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	60fb      	str	r3, [r7, #12]
}
 8004d88:	bf00      	nop
 8004d8a:	e7fe      	b.n	8004d8a <pvPortMalloc+0x172>
	return pvReturn;
 8004d8c:	69fb      	ldr	r3, [r7, #28]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3728      	adds	r7, #40	; 0x28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	20004254 	.word	0x20004254
 8004d9c:	20004268 	.word	0x20004268
 8004da0:	20004258 	.word	0x20004258
 8004da4:	2000424c 	.word	0x2000424c
 8004da8:	2000425c 	.word	0x2000425c
 8004dac:	20004260 	.word	0x20004260

08004db0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d04d      	beq.n	8004e5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004dc2:	2308      	movs	r3, #8
 8004dc4:	425b      	negs	r3, r3
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	4413      	add	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	4b24      	ldr	r3, [pc, #144]	; (8004e68 <vPortFree+0xb8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10a      	bne.n	8004df4 <vPortFree+0x44>
	__asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	60fb      	str	r3, [r7, #12]
}
 8004df0:	bf00      	nop
 8004df2:	e7fe      	b.n	8004df2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <vPortFree+0x62>
	__asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	60bb      	str	r3, [r7, #8]
}
 8004e0e:	bf00      	nop
 8004e10:	e7fe      	b.n	8004e10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	4b14      	ldr	r3, [pc, #80]	; (8004e68 <vPortFree+0xb8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d01e      	beq.n	8004e5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d11a      	bne.n	8004e5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	4b0e      	ldr	r3, [pc, #56]	; (8004e68 <vPortFree+0xb8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	43db      	mvns	r3, r3
 8004e32:	401a      	ands	r2, r3
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e38:	f7fe fee0 	bl	8003bfc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <vPortFree+0xbc>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4413      	add	r3, r2
 8004e46:	4a09      	ldr	r2, [pc, #36]	; (8004e6c <vPortFree+0xbc>)
 8004e48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e4a:	6938      	ldr	r0, [r7, #16]
 8004e4c:	f000 f874 	bl	8004f38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004e50:	4b07      	ldr	r3, [pc, #28]	; (8004e70 <vPortFree+0xc0>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3301      	adds	r3, #1
 8004e56:	4a06      	ldr	r2, [pc, #24]	; (8004e70 <vPortFree+0xc0>)
 8004e58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004e5a:	f7fe fedd 	bl	8003c18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e5e:	bf00      	nop
 8004e60:	3718      	adds	r7, #24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	20004268 	.word	0x20004268
 8004e6c:	20004258 	.word	0x20004258
 8004e70:	20004264 	.word	0x20004264

08004e74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004e7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e80:	4b27      	ldr	r3, [pc, #156]	; (8004f20 <prvHeapInit+0xac>)
 8004e82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00c      	beq.n	8004ea8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	3307      	adds	r3, #7
 8004e92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0307 	bic.w	r3, r3, #7
 8004e9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	4a1f      	ldr	r2, [pc, #124]	; (8004f20 <prvHeapInit+0xac>)
 8004ea4:	4413      	add	r3, r2
 8004ea6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004eac:	4a1d      	ldr	r2, [pc, #116]	; (8004f24 <prvHeapInit+0xb0>)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004eb2:	4b1c      	ldr	r3, [pc, #112]	; (8004f24 <prvHeapInit+0xb0>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ec0:	2208      	movs	r2, #8
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	1a9b      	subs	r3, r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f023 0307 	bic.w	r3, r3, #7
 8004ece:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4a15      	ldr	r2, [pc, #84]	; (8004f28 <prvHeapInit+0xb4>)
 8004ed4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ed6:	4b14      	ldr	r3, [pc, #80]	; (8004f28 <prvHeapInit+0xb4>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2200      	movs	r2, #0
 8004edc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ede:	4b12      	ldr	r3, [pc, #72]	; (8004f28 <prvHeapInit+0xb4>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	1ad2      	subs	r2, r2, r3
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ef4:	4b0c      	ldr	r3, [pc, #48]	; (8004f28 <prvHeapInit+0xb4>)
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	4a0a      	ldr	r2, [pc, #40]	; (8004f2c <prvHeapInit+0xb8>)
 8004f02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	4a09      	ldr	r2, [pc, #36]	; (8004f30 <prvHeapInit+0xbc>)
 8004f0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f0c:	4b09      	ldr	r3, [pc, #36]	; (8004f34 <prvHeapInit+0xc0>)
 8004f0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f12:	601a      	str	r2, [r3, #0]
}
 8004f14:	bf00      	nop
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	2000064c 	.word	0x2000064c
 8004f24:	2000424c 	.word	0x2000424c
 8004f28:	20004254 	.word	0x20004254
 8004f2c:	2000425c 	.word	0x2000425c
 8004f30:	20004258 	.word	0x20004258
 8004f34:	20004268 	.word	0x20004268

08004f38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f40:	4b28      	ldr	r3, [pc, #160]	; (8004fe4 <prvInsertBlockIntoFreeList+0xac>)
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	e002      	b.n	8004f4c <prvInsertBlockIntoFreeList+0x14>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d8f7      	bhi.n	8004f46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	4413      	add	r3, r2
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d108      	bne.n	8004f7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	441a      	add	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	441a      	add	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d118      	bne.n	8004fc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	4b15      	ldr	r3, [pc, #84]	; (8004fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d00d      	beq.n	8004fb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	441a      	add	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	e008      	b.n	8004fc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004fb6:	4b0c      	ldr	r3, [pc, #48]	; (8004fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	e003      	b.n	8004fc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d002      	beq.n	8004fd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fd6:	bf00      	nop
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	2000424c 	.word	0x2000424c
 8004fe8:	20004254 	.word	0x20004254

08004fec <siprintf>:
 8004fec:	b40e      	push	{r1, r2, r3}
 8004fee:	b500      	push	{lr}
 8004ff0:	b09c      	sub	sp, #112	; 0x70
 8004ff2:	ab1d      	add	r3, sp, #116	; 0x74
 8004ff4:	9002      	str	r0, [sp, #8]
 8004ff6:	9006      	str	r0, [sp, #24]
 8004ff8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ffc:	4809      	ldr	r0, [pc, #36]	; (8005024 <siprintf+0x38>)
 8004ffe:	9107      	str	r1, [sp, #28]
 8005000:	9104      	str	r1, [sp, #16]
 8005002:	4909      	ldr	r1, [pc, #36]	; (8005028 <siprintf+0x3c>)
 8005004:	f853 2b04 	ldr.w	r2, [r3], #4
 8005008:	9105      	str	r1, [sp, #20]
 800500a:	6800      	ldr	r0, [r0, #0]
 800500c:	9301      	str	r3, [sp, #4]
 800500e:	a902      	add	r1, sp, #8
 8005010:	f000 f9a0 	bl	8005354 <_svfiprintf_r>
 8005014:	9b02      	ldr	r3, [sp, #8]
 8005016:	2200      	movs	r2, #0
 8005018:	701a      	strb	r2, [r3, #0]
 800501a:	b01c      	add	sp, #112	; 0x70
 800501c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005020:	b003      	add	sp, #12
 8005022:	4770      	bx	lr
 8005024:	2000005c 	.word	0x2000005c
 8005028:	ffff0208 	.word	0xffff0208

0800502c <memset>:
 800502c:	4402      	add	r2, r0
 800502e:	4603      	mov	r3, r0
 8005030:	4293      	cmp	r3, r2
 8005032:	d100      	bne.n	8005036 <memset+0xa>
 8005034:	4770      	bx	lr
 8005036:	f803 1b01 	strb.w	r1, [r3], #1
 800503a:	e7f9      	b.n	8005030 <memset+0x4>

0800503c <__errno>:
 800503c:	4b01      	ldr	r3, [pc, #4]	; (8005044 <__errno+0x8>)
 800503e:	6818      	ldr	r0, [r3, #0]
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	2000005c 	.word	0x2000005c

08005048 <__libc_init_array>:
 8005048:	b570      	push	{r4, r5, r6, lr}
 800504a:	4d0d      	ldr	r5, [pc, #52]	; (8005080 <__libc_init_array+0x38>)
 800504c:	4c0d      	ldr	r4, [pc, #52]	; (8005084 <__libc_init_array+0x3c>)
 800504e:	1b64      	subs	r4, r4, r5
 8005050:	10a4      	asrs	r4, r4, #2
 8005052:	2600      	movs	r6, #0
 8005054:	42a6      	cmp	r6, r4
 8005056:	d109      	bne.n	800506c <__libc_init_array+0x24>
 8005058:	4d0b      	ldr	r5, [pc, #44]	; (8005088 <__libc_init_array+0x40>)
 800505a:	4c0c      	ldr	r4, [pc, #48]	; (800508c <__libc_init_array+0x44>)
 800505c:	f000 fc6a 	bl	8005934 <_init>
 8005060:	1b64      	subs	r4, r4, r5
 8005062:	10a4      	asrs	r4, r4, #2
 8005064:	2600      	movs	r6, #0
 8005066:	42a6      	cmp	r6, r4
 8005068:	d105      	bne.n	8005076 <__libc_init_array+0x2e>
 800506a:	bd70      	pop	{r4, r5, r6, pc}
 800506c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005070:	4798      	blx	r3
 8005072:	3601      	adds	r6, #1
 8005074:	e7ee      	b.n	8005054 <__libc_init_array+0xc>
 8005076:	f855 3b04 	ldr.w	r3, [r5], #4
 800507a:	4798      	blx	r3
 800507c:	3601      	adds	r6, #1
 800507e:	e7f2      	b.n	8005066 <__libc_init_array+0x1e>
 8005080:	08005b2c 	.word	0x08005b2c
 8005084:	08005b2c 	.word	0x08005b2c
 8005088:	08005b2c 	.word	0x08005b2c
 800508c:	08005b30 	.word	0x08005b30

08005090 <__retarget_lock_acquire_recursive>:
 8005090:	4770      	bx	lr

08005092 <__retarget_lock_release_recursive>:
 8005092:	4770      	bx	lr

08005094 <memcpy>:
 8005094:	440a      	add	r2, r1
 8005096:	4291      	cmp	r1, r2
 8005098:	f100 33ff 	add.w	r3, r0, #4294967295
 800509c:	d100      	bne.n	80050a0 <memcpy+0xc>
 800509e:	4770      	bx	lr
 80050a0:	b510      	push	{r4, lr}
 80050a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050aa:	4291      	cmp	r1, r2
 80050ac:	d1f9      	bne.n	80050a2 <memcpy+0xe>
 80050ae:	bd10      	pop	{r4, pc}

080050b0 <_free_r>:
 80050b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050b2:	2900      	cmp	r1, #0
 80050b4:	d044      	beq.n	8005140 <_free_r+0x90>
 80050b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050ba:	9001      	str	r0, [sp, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f1a1 0404 	sub.w	r4, r1, #4
 80050c2:	bfb8      	it	lt
 80050c4:	18e4      	addlt	r4, r4, r3
 80050c6:	f000 f8df 	bl	8005288 <__malloc_lock>
 80050ca:	4a1e      	ldr	r2, [pc, #120]	; (8005144 <_free_r+0x94>)
 80050cc:	9801      	ldr	r0, [sp, #4]
 80050ce:	6813      	ldr	r3, [r2, #0]
 80050d0:	b933      	cbnz	r3, 80050e0 <_free_r+0x30>
 80050d2:	6063      	str	r3, [r4, #4]
 80050d4:	6014      	str	r4, [r2, #0]
 80050d6:	b003      	add	sp, #12
 80050d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050dc:	f000 b8da 	b.w	8005294 <__malloc_unlock>
 80050e0:	42a3      	cmp	r3, r4
 80050e2:	d908      	bls.n	80050f6 <_free_r+0x46>
 80050e4:	6825      	ldr	r5, [r4, #0]
 80050e6:	1961      	adds	r1, r4, r5
 80050e8:	428b      	cmp	r3, r1
 80050ea:	bf01      	itttt	eq
 80050ec:	6819      	ldreq	r1, [r3, #0]
 80050ee:	685b      	ldreq	r3, [r3, #4]
 80050f0:	1949      	addeq	r1, r1, r5
 80050f2:	6021      	streq	r1, [r4, #0]
 80050f4:	e7ed      	b.n	80050d2 <_free_r+0x22>
 80050f6:	461a      	mov	r2, r3
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	b10b      	cbz	r3, 8005100 <_free_r+0x50>
 80050fc:	42a3      	cmp	r3, r4
 80050fe:	d9fa      	bls.n	80050f6 <_free_r+0x46>
 8005100:	6811      	ldr	r1, [r2, #0]
 8005102:	1855      	adds	r5, r2, r1
 8005104:	42a5      	cmp	r5, r4
 8005106:	d10b      	bne.n	8005120 <_free_r+0x70>
 8005108:	6824      	ldr	r4, [r4, #0]
 800510a:	4421      	add	r1, r4
 800510c:	1854      	adds	r4, r2, r1
 800510e:	42a3      	cmp	r3, r4
 8005110:	6011      	str	r1, [r2, #0]
 8005112:	d1e0      	bne.n	80050d6 <_free_r+0x26>
 8005114:	681c      	ldr	r4, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	6053      	str	r3, [r2, #4]
 800511a:	440c      	add	r4, r1
 800511c:	6014      	str	r4, [r2, #0]
 800511e:	e7da      	b.n	80050d6 <_free_r+0x26>
 8005120:	d902      	bls.n	8005128 <_free_r+0x78>
 8005122:	230c      	movs	r3, #12
 8005124:	6003      	str	r3, [r0, #0]
 8005126:	e7d6      	b.n	80050d6 <_free_r+0x26>
 8005128:	6825      	ldr	r5, [r4, #0]
 800512a:	1961      	adds	r1, r4, r5
 800512c:	428b      	cmp	r3, r1
 800512e:	bf04      	itt	eq
 8005130:	6819      	ldreq	r1, [r3, #0]
 8005132:	685b      	ldreq	r3, [r3, #4]
 8005134:	6063      	str	r3, [r4, #4]
 8005136:	bf04      	itt	eq
 8005138:	1949      	addeq	r1, r1, r5
 800513a:	6021      	streq	r1, [r4, #0]
 800513c:	6054      	str	r4, [r2, #4]
 800513e:	e7ca      	b.n	80050d6 <_free_r+0x26>
 8005140:	b003      	add	sp, #12
 8005142:	bd30      	pop	{r4, r5, pc}
 8005144:	200043ac 	.word	0x200043ac

08005148 <sbrk_aligned>:
 8005148:	b570      	push	{r4, r5, r6, lr}
 800514a:	4e0e      	ldr	r6, [pc, #56]	; (8005184 <sbrk_aligned+0x3c>)
 800514c:	460c      	mov	r4, r1
 800514e:	6831      	ldr	r1, [r6, #0]
 8005150:	4605      	mov	r5, r0
 8005152:	b911      	cbnz	r1, 800515a <sbrk_aligned+0x12>
 8005154:	f000 fba6 	bl	80058a4 <_sbrk_r>
 8005158:	6030      	str	r0, [r6, #0]
 800515a:	4621      	mov	r1, r4
 800515c:	4628      	mov	r0, r5
 800515e:	f000 fba1 	bl	80058a4 <_sbrk_r>
 8005162:	1c43      	adds	r3, r0, #1
 8005164:	d00a      	beq.n	800517c <sbrk_aligned+0x34>
 8005166:	1cc4      	adds	r4, r0, #3
 8005168:	f024 0403 	bic.w	r4, r4, #3
 800516c:	42a0      	cmp	r0, r4
 800516e:	d007      	beq.n	8005180 <sbrk_aligned+0x38>
 8005170:	1a21      	subs	r1, r4, r0
 8005172:	4628      	mov	r0, r5
 8005174:	f000 fb96 	bl	80058a4 <_sbrk_r>
 8005178:	3001      	adds	r0, #1
 800517a:	d101      	bne.n	8005180 <sbrk_aligned+0x38>
 800517c:	f04f 34ff 	mov.w	r4, #4294967295
 8005180:	4620      	mov	r0, r4
 8005182:	bd70      	pop	{r4, r5, r6, pc}
 8005184:	200043b0 	.word	0x200043b0

08005188 <_malloc_r>:
 8005188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800518c:	1ccd      	adds	r5, r1, #3
 800518e:	f025 0503 	bic.w	r5, r5, #3
 8005192:	3508      	adds	r5, #8
 8005194:	2d0c      	cmp	r5, #12
 8005196:	bf38      	it	cc
 8005198:	250c      	movcc	r5, #12
 800519a:	2d00      	cmp	r5, #0
 800519c:	4607      	mov	r7, r0
 800519e:	db01      	blt.n	80051a4 <_malloc_r+0x1c>
 80051a0:	42a9      	cmp	r1, r5
 80051a2:	d905      	bls.n	80051b0 <_malloc_r+0x28>
 80051a4:	230c      	movs	r3, #12
 80051a6:	603b      	str	r3, [r7, #0]
 80051a8:	2600      	movs	r6, #0
 80051aa:	4630      	mov	r0, r6
 80051ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005284 <_malloc_r+0xfc>
 80051b4:	f000 f868 	bl	8005288 <__malloc_lock>
 80051b8:	f8d8 3000 	ldr.w	r3, [r8]
 80051bc:	461c      	mov	r4, r3
 80051be:	bb5c      	cbnz	r4, 8005218 <_malloc_r+0x90>
 80051c0:	4629      	mov	r1, r5
 80051c2:	4638      	mov	r0, r7
 80051c4:	f7ff ffc0 	bl	8005148 <sbrk_aligned>
 80051c8:	1c43      	adds	r3, r0, #1
 80051ca:	4604      	mov	r4, r0
 80051cc:	d155      	bne.n	800527a <_malloc_r+0xf2>
 80051ce:	f8d8 4000 	ldr.w	r4, [r8]
 80051d2:	4626      	mov	r6, r4
 80051d4:	2e00      	cmp	r6, #0
 80051d6:	d145      	bne.n	8005264 <_malloc_r+0xdc>
 80051d8:	2c00      	cmp	r4, #0
 80051da:	d048      	beq.n	800526e <_malloc_r+0xe6>
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	4631      	mov	r1, r6
 80051e0:	4638      	mov	r0, r7
 80051e2:	eb04 0903 	add.w	r9, r4, r3
 80051e6:	f000 fb5d 	bl	80058a4 <_sbrk_r>
 80051ea:	4581      	cmp	r9, r0
 80051ec:	d13f      	bne.n	800526e <_malloc_r+0xe6>
 80051ee:	6821      	ldr	r1, [r4, #0]
 80051f0:	1a6d      	subs	r5, r5, r1
 80051f2:	4629      	mov	r1, r5
 80051f4:	4638      	mov	r0, r7
 80051f6:	f7ff ffa7 	bl	8005148 <sbrk_aligned>
 80051fa:	3001      	adds	r0, #1
 80051fc:	d037      	beq.n	800526e <_malloc_r+0xe6>
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	442b      	add	r3, r5
 8005202:	6023      	str	r3, [r4, #0]
 8005204:	f8d8 3000 	ldr.w	r3, [r8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d038      	beq.n	800527e <_malloc_r+0xf6>
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	42a2      	cmp	r2, r4
 8005210:	d12b      	bne.n	800526a <_malloc_r+0xe2>
 8005212:	2200      	movs	r2, #0
 8005214:	605a      	str	r2, [r3, #4]
 8005216:	e00f      	b.n	8005238 <_malloc_r+0xb0>
 8005218:	6822      	ldr	r2, [r4, #0]
 800521a:	1b52      	subs	r2, r2, r5
 800521c:	d41f      	bmi.n	800525e <_malloc_r+0xd6>
 800521e:	2a0b      	cmp	r2, #11
 8005220:	d917      	bls.n	8005252 <_malloc_r+0xca>
 8005222:	1961      	adds	r1, r4, r5
 8005224:	42a3      	cmp	r3, r4
 8005226:	6025      	str	r5, [r4, #0]
 8005228:	bf18      	it	ne
 800522a:	6059      	strne	r1, [r3, #4]
 800522c:	6863      	ldr	r3, [r4, #4]
 800522e:	bf08      	it	eq
 8005230:	f8c8 1000 	streq.w	r1, [r8]
 8005234:	5162      	str	r2, [r4, r5]
 8005236:	604b      	str	r3, [r1, #4]
 8005238:	4638      	mov	r0, r7
 800523a:	f104 060b 	add.w	r6, r4, #11
 800523e:	f000 f829 	bl	8005294 <__malloc_unlock>
 8005242:	f026 0607 	bic.w	r6, r6, #7
 8005246:	1d23      	adds	r3, r4, #4
 8005248:	1af2      	subs	r2, r6, r3
 800524a:	d0ae      	beq.n	80051aa <_malloc_r+0x22>
 800524c:	1b9b      	subs	r3, r3, r6
 800524e:	50a3      	str	r3, [r4, r2]
 8005250:	e7ab      	b.n	80051aa <_malloc_r+0x22>
 8005252:	42a3      	cmp	r3, r4
 8005254:	6862      	ldr	r2, [r4, #4]
 8005256:	d1dd      	bne.n	8005214 <_malloc_r+0x8c>
 8005258:	f8c8 2000 	str.w	r2, [r8]
 800525c:	e7ec      	b.n	8005238 <_malloc_r+0xb0>
 800525e:	4623      	mov	r3, r4
 8005260:	6864      	ldr	r4, [r4, #4]
 8005262:	e7ac      	b.n	80051be <_malloc_r+0x36>
 8005264:	4634      	mov	r4, r6
 8005266:	6876      	ldr	r6, [r6, #4]
 8005268:	e7b4      	b.n	80051d4 <_malloc_r+0x4c>
 800526a:	4613      	mov	r3, r2
 800526c:	e7cc      	b.n	8005208 <_malloc_r+0x80>
 800526e:	230c      	movs	r3, #12
 8005270:	603b      	str	r3, [r7, #0]
 8005272:	4638      	mov	r0, r7
 8005274:	f000 f80e 	bl	8005294 <__malloc_unlock>
 8005278:	e797      	b.n	80051aa <_malloc_r+0x22>
 800527a:	6025      	str	r5, [r4, #0]
 800527c:	e7dc      	b.n	8005238 <_malloc_r+0xb0>
 800527e:	605b      	str	r3, [r3, #4]
 8005280:	deff      	udf	#255	; 0xff
 8005282:	bf00      	nop
 8005284:	200043ac 	.word	0x200043ac

08005288 <__malloc_lock>:
 8005288:	4801      	ldr	r0, [pc, #4]	; (8005290 <__malloc_lock+0x8>)
 800528a:	f7ff bf01 	b.w	8005090 <__retarget_lock_acquire_recursive>
 800528e:	bf00      	nop
 8005290:	200043a8 	.word	0x200043a8

08005294 <__malloc_unlock>:
 8005294:	4801      	ldr	r0, [pc, #4]	; (800529c <__malloc_unlock+0x8>)
 8005296:	f7ff befc 	b.w	8005092 <__retarget_lock_release_recursive>
 800529a:	bf00      	nop
 800529c:	200043a8 	.word	0x200043a8

080052a0 <__ssputs_r>:
 80052a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052a4:	688e      	ldr	r6, [r1, #8]
 80052a6:	461f      	mov	r7, r3
 80052a8:	42be      	cmp	r6, r7
 80052aa:	680b      	ldr	r3, [r1, #0]
 80052ac:	4682      	mov	sl, r0
 80052ae:	460c      	mov	r4, r1
 80052b0:	4690      	mov	r8, r2
 80052b2:	d82c      	bhi.n	800530e <__ssputs_r+0x6e>
 80052b4:	898a      	ldrh	r2, [r1, #12]
 80052b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80052ba:	d026      	beq.n	800530a <__ssputs_r+0x6a>
 80052bc:	6965      	ldr	r5, [r4, #20]
 80052be:	6909      	ldr	r1, [r1, #16]
 80052c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052c4:	eba3 0901 	sub.w	r9, r3, r1
 80052c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052cc:	1c7b      	adds	r3, r7, #1
 80052ce:	444b      	add	r3, r9
 80052d0:	106d      	asrs	r5, r5, #1
 80052d2:	429d      	cmp	r5, r3
 80052d4:	bf38      	it	cc
 80052d6:	461d      	movcc	r5, r3
 80052d8:	0553      	lsls	r3, r2, #21
 80052da:	d527      	bpl.n	800532c <__ssputs_r+0x8c>
 80052dc:	4629      	mov	r1, r5
 80052de:	f7ff ff53 	bl	8005188 <_malloc_r>
 80052e2:	4606      	mov	r6, r0
 80052e4:	b360      	cbz	r0, 8005340 <__ssputs_r+0xa0>
 80052e6:	6921      	ldr	r1, [r4, #16]
 80052e8:	464a      	mov	r2, r9
 80052ea:	f7ff fed3 	bl	8005094 <memcpy>
 80052ee:	89a3      	ldrh	r3, [r4, #12]
 80052f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f8:	81a3      	strh	r3, [r4, #12]
 80052fa:	6126      	str	r6, [r4, #16]
 80052fc:	6165      	str	r5, [r4, #20]
 80052fe:	444e      	add	r6, r9
 8005300:	eba5 0509 	sub.w	r5, r5, r9
 8005304:	6026      	str	r6, [r4, #0]
 8005306:	60a5      	str	r5, [r4, #8]
 8005308:	463e      	mov	r6, r7
 800530a:	42be      	cmp	r6, r7
 800530c:	d900      	bls.n	8005310 <__ssputs_r+0x70>
 800530e:	463e      	mov	r6, r7
 8005310:	6820      	ldr	r0, [r4, #0]
 8005312:	4632      	mov	r2, r6
 8005314:	4641      	mov	r1, r8
 8005316:	f000 faab 	bl	8005870 <memmove>
 800531a:	68a3      	ldr	r3, [r4, #8]
 800531c:	1b9b      	subs	r3, r3, r6
 800531e:	60a3      	str	r3, [r4, #8]
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	4433      	add	r3, r6
 8005324:	6023      	str	r3, [r4, #0]
 8005326:	2000      	movs	r0, #0
 8005328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800532c:	462a      	mov	r2, r5
 800532e:	f000 fac9 	bl	80058c4 <_realloc_r>
 8005332:	4606      	mov	r6, r0
 8005334:	2800      	cmp	r0, #0
 8005336:	d1e0      	bne.n	80052fa <__ssputs_r+0x5a>
 8005338:	6921      	ldr	r1, [r4, #16]
 800533a:	4650      	mov	r0, sl
 800533c:	f7ff feb8 	bl	80050b0 <_free_r>
 8005340:	230c      	movs	r3, #12
 8005342:	f8ca 3000 	str.w	r3, [sl]
 8005346:	89a3      	ldrh	r3, [r4, #12]
 8005348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800534c:	81a3      	strh	r3, [r4, #12]
 800534e:	f04f 30ff 	mov.w	r0, #4294967295
 8005352:	e7e9      	b.n	8005328 <__ssputs_r+0x88>

08005354 <_svfiprintf_r>:
 8005354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005358:	4698      	mov	r8, r3
 800535a:	898b      	ldrh	r3, [r1, #12]
 800535c:	061b      	lsls	r3, r3, #24
 800535e:	b09d      	sub	sp, #116	; 0x74
 8005360:	4607      	mov	r7, r0
 8005362:	460d      	mov	r5, r1
 8005364:	4614      	mov	r4, r2
 8005366:	d50e      	bpl.n	8005386 <_svfiprintf_r+0x32>
 8005368:	690b      	ldr	r3, [r1, #16]
 800536a:	b963      	cbnz	r3, 8005386 <_svfiprintf_r+0x32>
 800536c:	2140      	movs	r1, #64	; 0x40
 800536e:	f7ff ff0b 	bl	8005188 <_malloc_r>
 8005372:	6028      	str	r0, [r5, #0]
 8005374:	6128      	str	r0, [r5, #16]
 8005376:	b920      	cbnz	r0, 8005382 <_svfiprintf_r+0x2e>
 8005378:	230c      	movs	r3, #12
 800537a:	603b      	str	r3, [r7, #0]
 800537c:	f04f 30ff 	mov.w	r0, #4294967295
 8005380:	e0d0      	b.n	8005524 <_svfiprintf_r+0x1d0>
 8005382:	2340      	movs	r3, #64	; 0x40
 8005384:	616b      	str	r3, [r5, #20]
 8005386:	2300      	movs	r3, #0
 8005388:	9309      	str	r3, [sp, #36]	; 0x24
 800538a:	2320      	movs	r3, #32
 800538c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005390:	f8cd 800c 	str.w	r8, [sp, #12]
 8005394:	2330      	movs	r3, #48	; 0x30
 8005396:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800553c <_svfiprintf_r+0x1e8>
 800539a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800539e:	f04f 0901 	mov.w	r9, #1
 80053a2:	4623      	mov	r3, r4
 80053a4:	469a      	mov	sl, r3
 80053a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053aa:	b10a      	cbz	r2, 80053b0 <_svfiprintf_r+0x5c>
 80053ac:	2a25      	cmp	r2, #37	; 0x25
 80053ae:	d1f9      	bne.n	80053a4 <_svfiprintf_r+0x50>
 80053b0:	ebba 0b04 	subs.w	fp, sl, r4
 80053b4:	d00b      	beq.n	80053ce <_svfiprintf_r+0x7a>
 80053b6:	465b      	mov	r3, fp
 80053b8:	4622      	mov	r2, r4
 80053ba:	4629      	mov	r1, r5
 80053bc:	4638      	mov	r0, r7
 80053be:	f7ff ff6f 	bl	80052a0 <__ssputs_r>
 80053c2:	3001      	adds	r0, #1
 80053c4:	f000 80a9 	beq.w	800551a <_svfiprintf_r+0x1c6>
 80053c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053ca:	445a      	add	r2, fp
 80053cc:	9209      	str	r2, [sp, #36]	; 0x24
 80053ce:	f89a 3000 	ldrb.w	r3, [sl]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 80a1 	beq.w	800551a <_svfiprintf_r+0x1c6>
 80053d8:	2300      	movs	r3, #0
 80053da:	f04f 32ff 	mov.w	r2, #4294967295
 80053de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053e2:	f10a 0a01 	add.w	sl, sl, #1
 80053e6:	9304      	str	r3, [sp, #16]
 80053e8:	9307      	str	r3, [sp, #28]
 80053ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053ee:	931a      	str	r3, [sp, #104]	; 0x68
 80053f0:	4654      	mov	r4, sl
 80053f2:	2205      	movs	r2, #5
 80053f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053f8:	4850      	ldr	r0, [pc, #320]	; (800553c <_svfiprintf_r+0x1e8>)
 80053fa:	f7fa fee9 	bl	80001d0 <memchr>
 80053fe:	9a04      	ldr	r2, [sp, #16]
 8005400:	b9d8      	cbnz	r0, 800543a <_svfiprintf_r+0xe6>
 8005402:	06d0      	lsls	r0, r2, #27
 8005404:	bf44      	itt	mi
 8005406:	2320      	movmi	r3, #32
 8005408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800540c:	0711      	lsls	r1, r2, #28
 800540e:	bf44      	itt	mi
 8005410:	232b      	movmi	r3, #43	; 0x2b
 8005412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005416:	f89a 3000 	ldrb.w	r3, [sl]
 800541a:	2b2a      	cmp	r3, #42	; 0x2a
 800541c:	d015      	beq.n	800544a <_svfiprintf_r+0xf6>
 800541e:	9a07      	ldr	r2, [sp, #28]
 8005420:	4654      	mov	r4, sl
 8005422:	2000      	movs	r0, #0
 8005424:	f04f 0c0a 	mov.w	ip, #10
 8005428:	4621      	mov	r1, r4
 800542a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800542e:	3b30      	subs	r3, #48	; 0x30
 8005430:	2b09      	cmp	r3, #9
 8005432:	d94d      	bls.n	80054d0 <_svfiprintf_r+0x17c>
 8005434:	b1b0      	cbz	r0, 8005464 <_svfiprintf_r+0x110>
 8005436:	9207      	str	r2, [sp, #28]
 8005438:	e014      	b.n	8005464 <_svfiprintf_r+0x110>
 800543a:	eba0 0308 	sub.w	r3, r0, r8
 800543e:	fa09 f303 	lsl.w	r3, r9, r3
 8005442:	4313      	orrs	r3, r2
 8005444:	9304      	str	r3, [sp, #16]
 8005446:	46a2      	mov	sl, r4
 8005448:	e7d2      	b.n	80053f0 <_svfiprintf_r+0x9c>
 800544a:	9b03      	ldr	r3, [sp, #12]
 800544c:	1d19      	adds	r1, r3, #4
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	9103      	str	r1, [sp, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	bfbb      	ittet	lt
 8005456:	425b      	neglt	r3, r3
 8005458:	f042 0202 	orrlt.w	r2, r2, #2
 800545c:	9307      	strge	r3, [sp, #28]
 800545e:	9307      	strlt	r3, [sp, #28]
 8005460:	bfb8      	it	lt
 8005462:	9204      	strlt	r2, [sp, #16]
 8005464:	7823      	ldrb	r3, [r4, #0]
 8005466:	2b2e      	cmp	r3, #46	; 0x2e
 8005468:	d10c      	bne.n	8005484 <_svfiprintf_r+0x130>
 800546a:	7863      	ldrb	r3, [r4, #1]
 800546c:	2b2a      	cmp	r3, #42	; 0x2a
 800546e:	d134      	bne.n	80054da <_svfiprintf_r+0x186>
 8005470:	9b03      	ldr	r3, [sp, #12]
 8005472:	1d1a      	adds	r2, r3, #4
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	9203      	str	r2, [sp, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	bfb8      	it	lt
 800547c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005480:	3402      	adds	r4, #2
 8005482:	9305      	str	r3, [sp, #20]
 8005484:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800554c <_svfiprintf_r+0x1f8>
 8005488:	7821      	ldrb	r1, [r4, #0]
 800548a:	2203      	movs	r2, #3
 800548c:	4650      	mov	r0, sl
 800548e:	f7fa fe9f 	bl	80001d0 <memchr>
 8005492:	b138      	cbz	r0, 80054a4 <_svfiprintf_r+0x150>
 8005494:	9b04      	ldr	r3, [sp, #16]
 8005496:	eba0 000a 	sub.w	r0, r0, sl
 800549a:	2240      	movs	r2, #64	; 0x40
 800549c:	4082      	lsls	r2, r0
 800549e:	4313      	orrs	r3, r2
 80054a0:	3401      	adds	r4, #1
 80054a2:	9304      	str	r3, [sp, #16]
 80054a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054a8:	4825      	ldr	r0, [pc, #148]	; (8005540 <_svfiprintf_r+0x1ec>)
 80054aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054ae:	2206      	movs	r2, #6
 80054b0:	f7fa fe8e 	bl	80001d0 <memchr>
 80054b4:	2800      	cmp	r0, #0
 80054b6:	d038      	beq.n	800552a <_svfiprintf_r+0x1d6>
 80054b8:	4b22      	ldr	r3, [pc, #136]	; (8005544 <_svfiprintf_r+0x1f0>)
 80054ba:	bb1b      	cbnz	r3, 8005504 <_svfiprintf_r+0x1b0>
 80054bc:	9b03      	ldr	r3, [sp, #12]
 80054be:	3307      	adds	r3, #7
 80054c0:	f023 0307 	bic.w	r3, r3, #7
 80054c4:	3308      	adds	r3, #8
 80054c6:	9303      	str	r3, [sp, #12]
 80054c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ca:	4433      	add	r3, r6
 80054cc:	9309      	str	r3, [sp, #36]	; 0x24
 80054ce:	e768      	b.n	80053a2 <_svfiprintf_r+0x4e>
 80054d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80054d4:	460c      	mov	r4, r1
 80054d6:	2001      	movs	r0, #1
 80054d8:	e7a6      	b.n	8005428 <_svfiprintf_r+0xd4>
 80054da:	2300      	movs	r3, #0
 80054dc:	3401      	adds	r4, #1
 80054de:	9305      	str	r3, [sp, #20]
 80054e0:	4619      	mov	r1, r3
 80054e2:	f04f 0c0a 	mov.w	ip, #10
 80054e6:	4620      	mov	r0, r4
 80054e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054ec:	3a30      	subs	r2, #48	; 0x30
 80054ee:	2a09      	cmp	r2, #9
 80054f0:	d903      	bls.n	80054fa <_svfiprintf_r+0x1a6>
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0c6      	beq.n	8005484 <_svfiprintf_r+0x130>
 80054f6:	9105      	str	r1, [sp, #20]
 80054f8:	e7c4      	b.n	8005484 <_svfiprintf_r+0x130>
 80054fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80054fe:	4604      	mov	r4, r0
 8005500:	2301      	movs	r3, #1
 8005502:	e7f0      	b.n	80054e6 <_svfiprintf_r+0x192>
 8005504:	ab03      	add	r3, sp, #12
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	462a      	mov	r2, r5
 800550a:	4b0f      	ldr	r3, [pc, #60]	; (8005548 <_svfiprintf_r+0x1f4>)
 800550c:	a904      	add	r1, sp, #16
 800550e:	4638      	mov	r0, r7
 8005510:	f3af 8000 	nop.w
 8005514:	1c42      	adds	r2, r0, #1
 8005516:	4606      	mov	r6, r0
 8005518:	d1d6      	bne.n	80054c8 <_svfiprintf_r+0x174>
 800551a:	89ab      	ldrh	r3, [r5, #12]
 800551c:	065b      	lsls	r3, r3, #25
 800551e:	f53f af2d 	bmi.w	800537c <_svfiprintf_r+0x28>
 8005522:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005524:	b01d      	add	sp, #116	; 0x74
 8005526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800552a:	ab03      	add	r3, sp, #12
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	462a      	mov	r2, r5
 8005530:	4b05      	ldr	r3, [pc, #20]	; (8005548 <_svfiprintf_r+0x1f4>)
 8005532:	a904      	add	r1, sp, #16
 8005534:	4638      	mov	r0, r7
 8005536:	f000 f879 	bl	800562c <_printf_i>
 800553a:	e7eb      	b.n	8005514 <_svfiprintf_r+0x1c0>
 800553c:	08005af0 	.word	0x08005af0
 8005540:	08005afa 	.word	0x08005afa
 8005544:	00000000 	.word	0x00000000
 8005548:	080052a1 	.word	0x080052a1
 800554c:	08005af6 	.word	0x08005af6

08005550 <_printf_common>:
 8005550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005554:	4616      	mov	r6, r2
 8005556:	4699      	mov	r9, r3
 8005558:	688a      	ldr	r2, [r1, #8]
 800555a:	690b      	ldr	r3, [r1, #16]
 800555c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005560:	4293      	cmp	r3, r2
 8005562:	bfb8      	it	lt
 8005564:	4613      	movlt	r3, r2
 8005566:	6033      	str	r3, [r6, #0]
 8005568:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800556c:	4607      	mov	r7, r0
 800556e:	460c      	mov	r4, r1
 8005570:	b10a      	cbz	r2, 8005576 <_printf_common+0x26>
 8005572:	3301      	adds	r3, #1
 8005574:	6033      	str	r3, [r6, #0]
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	0699      	lsls	r1, r3, #26
 800557a:	bf42      	ittt	mi
 800557c:	6833      	ldrmi	r3, [r6, #0]
 800557e:	3302      	addmi	r3, #2
 8005580:	6033      	strmi	r3, [r6, #0]
 8005582:	6825      	ldr	r5, [r4, #0]
 8005584:	f015 0506 	ands.w	r5, r5, #6
 8005588:	d106      	bne.n	8005598 <_printf_common+0x48>
 800558a:	f104 0a19 	add.w	sl, r4, #25
 800558e:	68e3      	ldr	r3, [r4, #12]
 8005590:	6832      	ldr	r2, [r6, #0]
 8005592:	1a9b      	subs	r3, r3, r2
 8005594:	42ab      	cmp	r3, r5
 8005596:	dc26      	bgt.n	80055e6 <_printf_common+0x96>
 8005598:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800559c:	1e13      	subs	r3, r2, #0
 800559e:	6822      	ldr	r2, [r4, #0]
 80055a0:	bf18      	it	ne
 80055a2:	2301      	movne	r3, #1
 80055a4:	0692      	lsls	r2, r2, #26
 80055a6:	d42b      	bmi.n	8005600 <_printf_common+0xb0>
 80055a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055ac:	4649      	mov	r1, r9
 80055ae:	4638      	mov	r0, r7
 80055b0:	47c0      	blx	r8
 80055b2:	3001      	adds	r0, #1
 80055b4:	d01e      	beq.n	80055f4 <_printf_common+0xa4>
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	6922      	ldr	r2, [r4, #16]
 80055ba:	f003 0306 	and.w	r3, r3, #6
 80055be:	2b04      	cmp	r3, #4
 80055c0:	bf02      	ittt	eq
 80055c2:	68e5      	ldreq	r5, [r4, #12]
 80055c4:	6833      	ldreq	r3, [r6, #0]
 80055c6:	1aed      	subeq	r5, r5, r3
 80055c8:	68a3      	ldr	r3, [r4, #8]
 80055ca:	bf0c      	ite	eq
 80055cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055d0:	2500      	movne	r5, #0
 80055d2:	4293      	cmp	r3, r2
 80055d4:	bfc4      	itt	gt
 80055d6:	1a9b      	subgt	r3, r3, r2
 80055d8:	18ed      	addgt	r5, r5, r3
 80055da:	2600      	movs	r6, #0
 80055dc:	341a      	adds	r4, #26
 80055de:	42b5      	cmp	r5, r6
 80055e0:	d11a      	bne.n	8005618 <_printf_common+0xc8>
 80055e2:	2000      	movs	r0, #0
 80055e4:	e008      	b.n	80055f8 <_printf_common+0xa8>
 80055e6:	2301      	movs	r3, #1
 80055e8:	4652      	mov	r2, sl
 80055ea:	4649      	mov	r1, r9
 80055ec:	4638      	mov	r0, r7
 80055ee:	47c0      	blx	r8
 80055f0:	3001      	adds	r0, #1
 80055f2:	d103      	bne.n	80055fc <_printf_common+0xac>
 80055f4:	f04f 30ff 	mov.w	r0, #4294967295
 80055f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055fc:	3501      	adds	r5, #1
 80055fe:	e7c6      	b.n	800558e <_printf_common+0x3e>
 8005600:	18e1      	adds	r1, r4, r3
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	2030      	movs	r0, #48	; 0x30
 8005606:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800560a:	4422      	add	r2, r4
 800560c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005610:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005614:	3302      	adds	r3, #2
 8005616:	e7c7      	b.n	80055a8 <_printf_common+0x58>
 8005618:	2301      	movs	r3, #1
 800561a:	4622      	mov	r2, r4
 800561c:	4649      	mov	r1, r9
 800561e:	4638      	mov	r0, r7
 8005620:	47c0      	blx	r8
 8005622:	3001      	adds	r0, #1
 8005624:	d0e6      	beq.n	80055f4 <_printf_common+0xa4>
 8005626:	3601      	adds	r6, #1
 8005628:	e7d9      	b.n	80055de <_printf_common+0x8e>
	...

0800562c <_printf_i>:
 800562c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005630:	7e0f      	ldrb	r7, [r1, #24]
 8005632:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005634:	2f78      	cmp	r7, #120	; 0x78
 8005636:	4691      	mov	r9, r2
 8005638:	4680      	mov	r8, r0
 800563a:	460c      	mov	r4, r1
 800563c:	469a      	mov	sl, r3
 800563e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005642:	d807      	bhi.n	8005654 <_printf_i+0x28>
 8005644:	2f62      	cmp	r7, #98	; 0x62
 8005646:	d80a      	bhi.n	800565e <_printf_i+0x32>
 8005648:	2f00      	cmp	r7, #0
 800564a:	f000 80d4 	beq.w	80057f6 <_printf_i+0x1ca>
 800564e:	2f58      	cmp	r7, #88	; 0x58
 8005650:	f000 80c0 	beq.w	80057d4 <_printf_i+0x1a8>
 8005654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005658:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800565c:	e03a      	b.n	80056d4 <_printf_i+0xa8>
 800565e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005662:	2b15      	cmp	r3, #21
 8005664:	d8f6      	bhi.n	8005654 <_printf_i+0x28>
 8005666:	a101      	add	r1, pc, #4	; (adr r1, 800566c <_printf_i+0x40>)
 8005668:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800566c:	080056c5 	.word	0x080056c5
 8005670:	080056d9 	.word	0x080056d9
 8005674:	08005655 	.word	0x08005655
 8005678:	08005655 	.word	0x08005655
 800567c:	08005655 	.word	0x08005655
 8005680:	08005655 	.word	0x08005655
 8005684:	080056d9 	.word	0x080056d9
 8005688:	08005655 	.word	0x08005655
 800568c:	08005655 	.word	0x08005655
 8005690:	08005655 	.word	0x08005655
 8005694:	08005655 	.word	0x08005655
 8005698:	080057dd 	.word	0x080057dd
 800569c:	08005705 	.word	0x08005705
 80056a0:	08005797 	.word	0x08005797
 80056a4:	08005655 	.word	0x08005655
 80056a8:	08005655 	.word	0x08005655
 80056ac:	080057ff 	.word	0x080057ff
 80056b0:	08005655 	.word	0x08005655
 80056b4:	08005705 	.word	0x08005705
 80056b8:	08005655 	.word	0x08005655
 80056bc:	08005655 	.word	0x08005655
 80056c0:	0800579f 	.word	0x0800579f
 80056c4:	682b      	ldr	r3, [r5, #0]
 80056c6:	1d1a      	adds	r2, r3, #4
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	602a      	str	r2, [r5, #0]
 80056cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056d4:	2301      	movs	r3, #1
 80056d6:	e09f      	b.n	8005818 <_printf_i+0x1ec>
 80056d8:	6820      	ldr	r0, [r4, #0]
 80056da:	682b      	ldr	r3, [r5, #0]
 80056dc:	0607      	lsls	r7, r0, #24
 80056de:	f103 0104 	add.w	r1, r3, #4
 80056e2:	6029      	str	r1, [r5, #0]
 80056e4:	d501      	bpl.n	80056ea <_printf_i+0xbe>
 80056e6:	681e      	ldr	r6, [r3, #0]
 80056e8:	e003      	b.n	80056f2 <_printf_i+0xc6>
 80056ea:	0646      	lsls	r6, r0, #25
 80056ec:	d5fb      	bpl.n	80056e6 <_printf_i+0xba>
 80056ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80056f2:	2e00      	cmp	r6, #0
 80056f4:	da03      	bge.n	80056fe <_printf_i+0xd2>
 80056f6:	232d      	movs	r3, #45	; 0x2d
 80056f8:	4276      	negs	r6, r6
 80056fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056fe:	485a      	ldr	r0, [pc, #360]	; (8005868 <_printf_i+0x23c>)
 8005700:	230a      	movs	r3, #10
 8005702:	e012      	b.n	800572a <_printf_i+0xfe>
 8005704:	682b      	ldr	r3, [r5, #0]
 8005706:	6820      	ldr	r0, [r4, #0]
 8005708:	1d19      	adds	r1, r3, #4
 800570a:	6029      	str	r1, [r5, #0]
 800570c:	0605      	lsls	r5, r0, #24
 800570e:	d501      	bpl.n	8005714 <_printf_i+0xe8>
 8005710:	681e      	ldr	r6, [r3, #0]
 8005712:	e002      	b.n	800571a <_printf_i+0xee>
 8005714:	0641      	lsls	r1, r0, #25
 8005716:	d5fb      	bpl.n	8005710 <_printf_i+0xe4>
 8005718:	881e      	ldrh	r6, [r3, #0]
 800571a:	4853      	ldr	r0, [pc, #332]	; (8005868 <_printf_i+0x23c>)
 800571c:	2f6f      	cmp	r7, #111	; 0x6f
 800571e:	bf0c      	ite	eq
 8005720:	2308      	moveq	r3, #8
 8005722:	230a      	movne	r3, #10
 8005724:	2100      	movs	r1, #0
 8005726:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800572a:	6865      	ldr	r5, [r4, #4]
 800572c:	60a5      	str	r5, [r4, #8]
 800572e:	2d00      	cmp	r5, #0
 8005730:	bfa2      	ittt	ge
 8005732:	6821      	ldrge	r1, [r4, #0]
 8005734:	f021 0104 	bicge.w	r1, r1, #4
 8005738:	6021      	strge	r1, [r4, #0]
 800573a:	b90e      	cbnz	r6, 8005740 <_printf_i+0x114>
 800573c:	2d00      	cmp	r5, #0
 800573e:	d04b      	beq.n	80057d8 <_printf_i+0x1ac>
 8005740:	4615      	mov	r5, r2
 8005742:	fbb6 f1f3 	udiv	r1, r6, r3
 8005746:	fb03 6711 	mls	r7, r3, r1, r6
 800574a:	5dc7      	ldrb	r7, [r0, r7]
 800574c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005750:	4637      	mov	r7, r6
 8005752:	42bb      	cmp	r3, r7
 8005754:	460e      	mov	r6, r1
 8005756:	d9f4      	bls.n	8005742 <_printf_i+0x116>
 8005758:	2b08      	cmp	r3, #8
 800575a:	d10b      	bne.n	8005774 <_printf_i+0x148>
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	07de      	lsls	r6, r3, #31
 8005760:	d508      	bpl.n	8005774 <_printf_i+0x148>
 8005762:	6923      	ldr	r3, [r4, #16]
 8005764:	6861      	ldr	r1, [r4, #4]
 8005766:	4299      	cmp	r1, r3
 8005768:	bfde      	ittt	le
 800576a:	2330      	movle	r3, #48	; 0x30
 800576c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005770:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005774:	1b52      	subs	r2, r2, r5
 8005776:	6122      	str	r2, [r4, #16]
 8005778:	f8cd a000 	str.w	sl, [sp]
 800577c:	464b      	mov	r3, r9
 800577e:	aa03      	add	r2, sp, #12
 8005780:	4621      	mov	r1, r4
 8005782:	4640      	mov	r0, r8
 8005784:	f7ff fee4 	bl	8005550 <_printf_common>
 8005788:	3001      	adds	r0, #1
 800578a:	d14a      	bne.n	8005822 <_printf_i+0x1f6>
 800578c:	f04f 30ff 	mov.w	r0, #4294967295
 8005790:	b004      	add	sp, #16
 8005792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	f043 0320 	orr.w	r3, r3, #32
 800579c:	6023      	str	r3, [r4, #0]
 800579e:	4833      	ldr	r0, [pc, #204]	; (800586c <_printf_i+0x240>)
 80057a0:	2778      	movs	r7, #120	; 0x78
 80057a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	6829      	ldr	r1, [r5, #0]
 80057aa:	061f      	lsls	r7, r3, #24
 80057ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80057b0:	d402      	bmi.n	80057b8 <_printf_i+0x18c>
 80057b2:	065f      	lsls	r7, r3, #25
 80057b4:	bf48      	it	mi
 80057b6:	b2b6      	uxthmi	r6, r6
 80057b8:	07df      	lsls	r7, r3, #31
 80057ba:	bf48      	it	mi
 80057bc:	f043 0320 	orrmi.w	r3, r3, #32
 80057c0:	6029      	str	r1, [r5, #0]
 80057c2:	bf48      	it	mi
 80057c4:	6023      	strmi	r3, [r4, #0]
 80057c6:	b91e      	cbnz	r6, 80057d0 <_printf_i+0x1a4>
 80057c8:	6823      	ldr	r3, [r4, #0]
 80057ca:	f023 0320 	bic.w	r3, r3, #32
 80057ce:	6023      	str	r3, [r4, #0]
 80057d0:	2310      	movs	r3, #16
 80057d2:	e7a7      	b.n	8005724 <_printf_i+0xf8>
 80057d4:	4824      	ldr	r0, [pc, #144]	; (8005868 <_printf_i+0x23c>)
 80057d6:	e7e4      	b.n	80057a2 <_printf_i+0x176>
 80057d8:	4615      	mov	r5, r2
 80057da:	e7bd      	b.n	8005758 <_printf_i+0x12c>
 80057dc:	682b      	ldr	r3, [r5, #0]
 80057de:	6826      	ldr	r6, [r4, #0]
 80057e0:	6961      	ldr	r1, [r4, #20]
 80057e2:	1d18      	adds	r0, r3, #4
 80057e4:	6028      	str	r0, [r5, #0]
 80057e6:	0635      	lsls	r5, r6, #24
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	d501      	bpl.n	80057f0 <_printf_i+0x1c4>
 80057ec:	6019      	str	r1, [r3, #0]
 80057ee:	e002      	b.n	80057f6 <_printf_i+0x1ca>
 80057f0:	0670      	lsls	r0, r6, #25
 80057f2:	d5fb      	bpl.n	80057ec <_printf_i+0x1c0>
 80057f4:	8019      	strh	r1, [r3, #0]
 80057f6:	2300      	movs	r3, #0
 80057f8:	6123      	str	r3, [r4, #16]
 80057fa:	4615      	mov	r5, r2
 80057fc:	e7bc      	b.n	8005778 <_printf_i+0x14c>
 80057fe:	682b      	ldr	r3, [r5, #0]
 8005800:	1d1a      	adds	r2, r3, #4
 8005802:	602a      	str	r2, [r5, #0]
 8005804:	681d      	ldr	r5, [r3, #0]
 8005806:	6862      	ldr	r2, [r4, #4]
 8005808:	2100      	movs	r1, #0
 800580a:	4628      	mov	r0, r5
 800580c:	f7fa fce0 	bl	80001d0 <memchr>
 8005810:	b108      	cbz	r0, 8005816 <_printf_i+0x1ea>
 8005812:	1b40      	subs	r0, r0, r5
 8005814:	6060      	str	r0, [r4, #4]
 8005816:	6863      	ldr	r3, [r4, #4]
 8005818:	6123      	str	r3, [r4, #16]
 800581a:	2300      	movs	r3, #0
 800581c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005820:	e7aa      	b.n	8005778 <_printf_i+0x14c>
 8005822:	6923      	ldr	r3, [r4, #16]
 8005824:	462a      	mov	r2, r5
 8005826:	4649      	mov	r1, r9
 8005828:	4640      	mov	r0, r8
 800582a:	47d0      	blx	sl
 800582c:	3001      	adds	r0, #1
 800582e:	d0ad      	beq.n	800578c <_printf_i+0x160>
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	079b      	lsls	r3, r3, #30
 8005834:	d413      	bmi.n	800585e <_printf_i+0x232>
 8005836:	68e0      	ldr	r0, [r4, #12]
 8005838:	9b03      	ldr	r3, [sp, #12]
 800583a:	4298      	cmp	r0, r3
 800583c:	bfb8      	it	lt
 800583e:	4618      	movlt	r0, r3
 8005840:	e7a6      	b.n	8005790 <_printf_i+0x164>
 8005842:	2301      	movs	r3, #1
 8005844:	4632      	mov	r2, r6
 8005846:	4649      	mov	r1, r9
 8005848:	4640      	mov	r0, r8
 800584a:	47d0      	blx	sl
 800584c:	3001      	adds	r0, #1
 800584e:	d09d      	beq.n	800578c <_printf_i+0x160>
 8005850:	3501      	adds	r5, #1
 8005852:	68e3      	ldr	r3, [r4, #12]
 8005854:	9903      	ldr	r1, [sp, #12]
 8005856:	1a5b      	subs	r3, r3, r1
 8005858:	42ab      	cmp	r3, r5
 800585a:	dcf2      	bgt.n	8005842 <_printf_i+0x216>
 800585c:	e7eb      	b.n	8005836 <_printf_i+0x20a>
 800585e:	2500      	movs	r5, #0
 8005860:	f104 0619 	add.w	r6, r4, #25
 8005864:	e7f5      	b.n	8005852 <_printf_i+0x226>
 8005866:	bf00      	nop
 8005868:	08005b01 	.word	0x08005b01
 800586c:	08005b12 	.word	0x08005b12

08005870 <memmove>:
 8005870:	4288      	cmp	r0, r1
 8005872:	b510      	push	{r4, lr}
 8005874:	eb01 0402 	add.w	r4, r1, r2
 8005878:	d902      	bls.n	8005880 <memmove+0x10>
 800587a:	4284      	cmp	r4, r0
 800587c:	4623      	mov	r3, r4
 800587e:	d807      	bhi.n	8005890 <memmove+0x20>
 8005880:	1e43      	subs	r3, r0, #1
 8005882:	42a1      	cmp	r1, r4
 8005884:	d008      	beq.n	8005898 <memmove+0x28>
 8005886:	f811 2b01 	ldrb.w	r2, [r1], #1
 800588a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800588e:	e7f8      	b.n	8005882 <memmove+0x12>
 8005890:	4402      	add	r2, r0
 8005892:	4601      	mov	r1, r0
 8005894:	428a      	cmp	r2, r1
 8005896:	d100      	bne.n	800589a <memmove+0x2a>
 8005898:	bd10      	pop	{r4, pc}
 800589a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800589e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058a2:	e7f7      	b.n	8005894 <memmove+0x24>

080058a4 <_sbrk_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	4d06      	ldr	r5, [pc, #24]	; (80058c0 <_sbrk_r+0x1c>)
 80058a8:	2300      	movs	r3, #0
 80058aa:	4604      	mov	r4, r0
 80058ac:	4608      	mov	r0, r1
 80058ae:	602b      	str	r3, [r5, #0]
 80058b0:	f7fb f982 	bl	8000bb8 <_sbrk>
 80058b4:	1c43      	adds	r3, r0, #1
 80058b6:	d102      	bne.n	80058be <_sbrk_r+0x1a>
 80058b8:	682b      	ldr	r3, [r5, #0]
 80058ba:	b103      	cbz	r3, 80058be <_sbrk_r+0x1a>
 80058bc:	6023      	str	r3, [r4, #0]
 80058be:	bd38      	pop	{r3, r4, r5, pc}
 80058c0:	200043a4 	.word	0x200043a4

080058c4 <_realloc_r>:
 80058c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058c8:	4680      	mov	r8, r0
 80058ca:	4614      	mov	r4, r2
 80058cc:	460e      	mov	r6, r1
 80058ce:	b921      	cbnz	r1, 80058da <_realloc_r+0x16>
 80058d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058d4:	4611      	mov	r1, r2
 80058d6:	f7ff bc57 	b.w	8005188 <_malloc_r>
 80058da:	b92a      	cbnz	r2, 80058e8 <_realloc_r+0x24>
 80058dc:	f7ff fbe8 	bl	80050b0 <_free_r>
 80058e0:	4625      	mov	r5, r4
 80058e2:	4628      	mov	r0, r5
 80058e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058e8:	f000 f81b 	bl	8005922 <_malloc_usable_size_r>
 80058ec:	4284      	cmp	r4, r0
 80058ee:	4607      	mov	r7, r0
 80058f0:	d802      	bhi.n	80058f8 <_realloc_r+0x34>
 80058f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80058f6:	d812      	bhi.n	800591e <_realloc_r+0x5a>
 80058f8:	4621      	mov	r1, r4
 80058fa:	4640      	mov	r0, r8
 80058fc:	f7ff fc44 	bl	8005188 <_malloc_r>
 8005900:	4605      	mov	r5, r0
 8005902:	2800      	cmp	r0, #0
 8005904:	d0ed      	beq.n	80058e2 <_realloc_r+0x1e>
 8005906:	42bc      	cmp	r4, r7
 8005908:	4622      	mov	r2, r4
 800590a:	4631      	mov	r1, r6
 800590c:	bf28      	it	cs
 800590e:	463a      	movcs	r2, r7
 8005910:	f7ff fbc0 	bl	8005094 <memcpy>
 8005914:	4631      	mov	r1, r6
 8005916:	4640      	mov	r0, r8
 8005918:	f7ff fbca 	bl	80050b0 <_free_r>
 800591c:	e7e1      	b.n	80058e2 <_realloc_r+0x1e>
 800591e:	4635      	mov	r5, r6
 8005920:	e7df      	b.n	80058e2 <_realloc_r+0x1e>

08005922 <_malloc_usable_size_r>:
 8005922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005926:	1f18      	subs	r0, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	bfbc      	itt	lt
 800592c:	580b      	ldrlt	r3, [r1, r0]
 800592e:	18c0      	addlt	r0, r0, r3
 8005930:	4770      	bx	lr
	...

08005934 <_init>:
 8005934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005936:	bf00      	nop
 8005938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800593a:	bc08      	pop	{r3}
 800593c:	469e      	mov	lr, r3
 800593e:	4770      	bx	lr

08005940 <_fini>:
 8005940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005942:	bf00      	nop
 8005944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005946:	bc08      	pop	{r3}
 8005948:	469e      	mov	lr, r3
 800594a:	4770      	bx	lr
