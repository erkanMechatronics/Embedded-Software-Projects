
FreeRTOS_Based_TrafficLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004704  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004894  08004894  00005894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800490c  0800490c  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  0800490c  0800490c  0000590c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004914  08004914  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004914  08004914  00005914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004918  08004918  00005918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800491c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006010  2**0
                  CONTENTS
 10 .bss          00004024  20000010  20000010  00006010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004034  20004034  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f617  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028cb  00000000  00000000  00015657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f48  00000000  00000000  00017f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bbf  00000000  00000000  00018e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ab9  00000000  00000000  00019a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010e94  00000000  00000000  0003b4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d116b  00000000  00000000  0004c37c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011d4e7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f10  00000000  00000000  0011d52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  0012143c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800487c 	.word	0x0800487c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800487c 	.word	0x0800487c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <vApplicationGetIdleTaskMemory+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <vApplicationGetIdleTaskMemory+0x30>)
 80004d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2000002c 	.word	0x2000002c
 80004f0:	20000080 	.word	0x20000080

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b5b0      	push	{r4, r5, r7, lr}
 80004f6:	b092      	sub	sp, #72	@ 0x48
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fae9 	bl	8000ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f84f 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f8b7 	bl	8000674 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 8000506:	2300      	movs	r3, #0
 8000508:	643b      	str	r3, [r7, #64]	@ 0x40
 800050a:	2300      	movs	r3, #0
 800050c:	647b      	str	r3, [r7, #68]	@ 0x44
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 800050e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000512:	4618      	mov	r0, r3
 8000514:	f001 fddb 	bl	80020ce <osMutexCreate>
 8000518:	4603      	mov	r3, r0
 800051a:	4a1b      	ldr	r2, [pc, #108]	@ (8000588 <main+0x94>)
 800051c:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 800051e:	2300      	movs	r3, #0
 8000520:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000522:	2300      	movs	r3, #0
 8000524:	63fb      	str	r3, [r7, #60]	@ 0x3c
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8000526:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800052a:	2101      	movs	r1, #1
 800052c:	4618      	mov	r0, r3
 800052e:	f001 fde6 	bl	80020fe <osSemaphoreCreate>
 8000532:	4603      	mov	r3, r0
 8000534:	4a15      	ldr	r2, [pc, #84]	@ (800058c <main+0x98>)
 8000536:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TrafficLight1 */
  osThreadDef(TrafficLight1, StartTrafficLight1, osPriorityNormal, 0, 128);
 8000538:	4b15      	ldr	r3, [pc, #84]	@ (8000590 <main+0x9c>)
 800053a:	f107 041c 	add.w	r4, r7, #28
 800053e:	461d      	mov	r5, r3
 8000540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000544:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000548:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TrafficLight1Handle = osThreadCreate(osThread(TrafficLight1), NULL);
 800054c:	f107 031c 	add.w	r3, r7, #28
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f001 fd5b 	bl	800200e <osThreadCreate>
 8000558:	4603      	mov	r3, r0
 800055a:	4a0e      	ldr	r2, [pc, #56]	@ (8000594 <main+0xa0>)
 800055c:	6013      	str	r3, [r2, #0]

  /* definition and creation of TrafficLight2 */
  osThreadDef(TrafficLight2, StartTrafficLight2, osPriorityNormal, 0, 128);
 800055e:	4b0e      	ldr	r3, [pc, #56]	@ (8000598 <main+0xa4>)
 8000560:	463c      	mov	r4, r7
 8000562:	461d      	mov	r5, r3
 8000564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000568:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800056c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TrafficLight2Handle = osThreadCreate(osThread(TrafficLight2), NULL);
 8000570:	463b      	mov	r3, r7
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f001 fd4a 	bl	800200e <osThreadCreate>
 800057a:	4603      	mov	r3, r0
 800057c:	4a07      	ldr	r2, [pc, #28]	@ (800059c <main+0xa8>)
 800057e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000580:	f001 fd3e 	bl	8002000 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000584:	bf00      	nop
 8000586:	e7fd      	b.n	8000584 <main+0x90>
 8000588:	2000028c 	.word	0x2000028c
 800058c:	20000290 	.word	0x20000290
 8000590:	080048a4 	.word	0x080048a4
 8000594:	20000284 	.word	0x20000284
 8000598:	080048d0 	.word	0x080048d0
 800059c:	20000288 	.word	0x20000288

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	@ 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	2230      	movs	r2, #48	@ 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f004 f92a 	bl	8004808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	4b28      	ldr	r3, [pc, #160]	@ (800066c <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	4a27      	ldr	r2, [pc, #156]	@ (800066c <SystemClock_Config+0xcc>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d4:	4b25      	ldr	r3, [pc, #148]	@ (800066c <SystemClock_Config+0xcc>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b22      	ldr	r3, [pc, #136]	@ (8000670 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a21      	ldr	r2, [pc, #132]	@ (8000670 <SystemClock_Config+0xd0>)
 80005ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <SystemClock_Config+0xd0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005fc:	2301      	movs	r3, #1
 80005fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000600:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000604:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000606:	2302      	movs	r3, #2
 8000608:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800060e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000610:	2304      	movs	r3, #4
 8000612:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000614:	23a8      	movs	r3, #168	@ 0xa8
 8000616:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800061c:	2304      	movs	r3, #4
 800061e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0320 	add.w	r3, r7, #32
 8000624:	4618      	mov	r0, r3
 8000626:	f000 fd69 	bl	80010fc <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000630:	f000 f940 	bl	80008b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000638:	2302      	movs	r3, #2
 800063a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000640:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000644:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000646:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800064a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2105      	movs	r1, #5
 8000652:	4618      	mov	r0, r3
 8000654:	f000 ffca 	bl	80015ec <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800065e:	f000 f929 	bl	80008b4 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	@ 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	4b2b      	ldr	r3, [pc, #172]	@ (800073c <MX_GPIO_Init+0xc8>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a2a      	ldr	r2, [pc, #168]	@ (800073c <MX_GPIO_Init+0xc8>)
 8000694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
 800069a:	4b28      	ldr	r3, [pc, #160]	@ (800073c <MX_GPIO_Init+0xc8>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	4b24      	ldr	r3, [pc, #144]	@ (800073c <MX_GPIO_Init+0xc8>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a23      	ldr	r2, [pc, #140]	@ (800073c <MX_GPIO_Init+0xc8>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b6:	4b21      	ldr	r3, [pc, #132]	@ (800073c <MX_GPIO_Init+0xc8>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	4b1d      	ldr	r3, [pc, #116]	@ (800073c <MX_GPIO_Init+0xc8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	4a1c      	ldr	r2, [pc, #112]	@ (800073c <MX_GPIO_Init+0xc8>)
 80006cc:	f043 0308 	orr.w	r3, r3, #8
 80006d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d2:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <MX_GPIO_Init+0xc8>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	f003 0308 	and.w	r3, r3, #8
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BLUE_Pin|GREEN2_Pin|ORANGE2_Pin|RED2_Pin
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 417e 	mov.w	r1, #65024	@ 0xfe00
 80006e4:	4816      	ldr	r0, [pc, #88]	@ (8000740 <MX_GPIO_Init+0xcc>)
 80006e6:	f000 fcd7 	bl	8001098 <HAL_GPIO_WritePin>
                          |GREEN1_Pin|ORANGE1_Pin|RED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ea:	2301      	movs	r3, #1
 80006ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	4619      	mov	r1, r3
 80006fe:	4811      	ldr	r0, [pc, #68]	@ (8000744 <MX_GPIO_Init+0xd0>)
 8000700:	f000 fb2e 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUE_Pin GREEN2_Pin ORANGE2_Pin RED2_Pin
                           GREEN1_Pin ORANGE1_Pin RED1_Pin */
  GPIO_InitStruct.Pin = BLUE_Pin|GREEN2_Pin|ORANGE2_Pin|RED2_Pin
 8000704:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8000708:	60fb      	str	r3, [r7, #12]
                          |GREEN1_Pin|ORANGE1_Pin|RED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070a:	2301      	movs	r3, #1
 800070c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	4619      	mov	r1, r3
 800071c:	4808      	ldr	r0, [pc, #32]	@ (8000740 <MX_GPIO_Init+0xcc>)
 800071e:	f000 fb1f 	bl	8000d60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2105      	movs	r1, #5
 8000726:	2006      	movs	r0, #6
 8000728:	f000 faf0 	bl	8000d0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800072c:	2006      	movs	r0, #6
 800072e:	f000 fb09 	bl	8000d44 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000732:	bf00      	nop
 8000734:	3720      	adds	r7, #32
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800
 8000740:	40020c00 	.word	0x40020c00
 8000744:	40020000 	.word	0x40020000

08000748 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// Interrupt Service Routine
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	80fb      	strh	r3, [r7, #6]
  button_control = 1;
 8000752:	4b04      	ldr	r3, [pc, #16]	@ (8000764 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000754:	2201      	movs	r2, #1
 8000756:	701a      	strb	r2, [r3, #0]


}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	20000280 	.word	0x20000280

08000768 <StartTrafficLight1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTrafficLight1 */
void StartTrafficLight1(void const * argument)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(myMutex01Handle, 0);
 8000770:	4b20      	ldr	r3, [pc, #128]	@ (80007f4 <StartTrafficLight1+0x8c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f001 fcf4 	bl	8002164 <osSemaphoreWait>

		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000782:	481d      	ldr	r0, [pc, #116]	@ (80007f8 <StartTrafficLight1+0x90>)
 8000784:	f000 fc88 	bl	8001098 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800078e:	481a      	ldr	r0, [pc, #104]	@ (80007f8 <StartTrafficLight1+0x90>)
 8000790:	f000 fc82 	bl	8001098 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 8000794:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000798:	f000 f9dc 	bl	8000b54 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007a2:	4815      	ldr	r0, [pc, #84]	@ (80007f8 <StartTrafficLight1+0x90>)
 80007a4:	f000 fc78 	bl	8001098 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007ae:	4812      	ldr	r0, [pc, #72]	@ (80007f8 <StartTrafficLight1+0x90>)
 80007b0:	f000 fc72 	bl	8001098 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 80007b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007b8:	f000 f9cc 	bl	8000b54 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007c2:	480d      	ldr	r0, [pc, #52]	@ (80007f8 <StartTrafficLight1+0x90>)
 80007c4:	f000 fc68 	bl	8001098 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ce:	480a      	ldr	r0, [pc, #40]	@ (80007f8 <StartTrafficLight1+0x90>)
 80007d0:	f000 fc62 	bl	8001098 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 80007d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007d8:	f000 f9bc 	bl	8000b54 <HAL_Delay>
		  // xSemaphoreGive(myBinarySem01Handle);
	  osSemaphoreRelease(myMutex01Handle);
 80007dc:	4b05      	ldr	r3, [pc, #20]	@ (80007f4 <StartTrafficLight1+0x8c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f001 fd0d 	bl	8002200 <osSemaphoreRelease>

	  osDelay(2000);
 80007e6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007ea:	f001 fc5c 	bl	80020a6 <osDelay>
	  osSemaphoreWait(myMutex01Handle, 0);
 80007ee:	bf00      	nop
 80007f0:	e7be      	b.n	8000770 <StartTrafficLight1+0x8>
 80007f2:	bf00      	nop
 80007f4:	2000028c 	.word	0x2000028c
 80007f8:	40020c00 	.word	0x40020c00

080007fc <StartTrafficLight2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTrafficLight2 */
void StartTrafficLight2(void const * argument)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTrafficLight2 */

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(myMutex01Handle, 0);
 8000804:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <StartTrafficLight2+0x8c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f001 fcaa 	bl	8002164 <osSemaphoreWait>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000816:	481d      	ldr	r0, [pc, #116]	@ (800088c <StartTrafficLight2+0x90>)
 8000818:	f000 fc3e 	bl	8001098 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000822:	481a      	ldr	r0, [pc, #104]	@ (800088c <StartTrafficLight2+0x90>)
 8000824:	f000 fc38 	bl	8001098 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 8000828:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800082c:	f000 f992 	bl	8000b54 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000836:	4815      	ldr	r0, [pc, #84]	@ (800088c <StartTrafficLight2+0x90>)
 8000838:	f000 fc2e 	bl	8001098 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000842:	4812      	ldr	r0, [pc, #72]	@ (800088c <StartTrafficLight2+0x90>)
 8000844:	f000 fc28 	bl	8001098 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 8000848:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800084c:	f000 f982 	bl	8000b54 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000856:	480d      	ldr	r0, [pc, #52]	@ (800088c <StartTrafficLight2+0x90>)
 8000858:	f000 fc1e 	bl	8001098 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000862:	480a      	ldr	r0, [pc, #40]	@ (800088c <StartTrafficLight2+0x90>)
 8000864:	f000 fc18 	bl	8001098 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 8000868:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800086c:	f000 f972 	bl	8000b54 <HAL_Delay>

		//   xSemaphoreGive(myBinarySem01Handle);
		  osSemaphoreRelease(myMutex01Handle);
 8000870:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <StartTrafficLight2+0x8c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f001 fcc3 	bl	8002200 <osSemaphoreRelease>

	  osDelay(2000);
 800087a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800087e:	f001 fc12 	bl	80020a6 <osDelay>
	  osSemaphoreWait(myMutex01Handle, 0);
 8000882:	bf00      	nop
 8000884:	e7be      	b.n	8000804 <StartTrafficLight2+0x8>
 8000886:	bf00      	nop
 8000888:	2000028c 	.word	0x2000028c
 800088c:	40020c00 	.word	0x40020c00

08000890 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a04      	ldr	r2, [pc, #16]	@ (80008b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d101      	bne.n	80008a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008a2:	f000 f937 	bl	8000b14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40010000 	.word	0x40010000

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <Error_Handler+0x8>

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <HAL_MspInit+0x54>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ce:	4a11      	ldr	r2, [pc, #68]	@ (8000914 <HAL_MspInit+0x54>)
 80008d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <HAL_MspInit+0x54>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000914 <HAL_MspInit+0x54>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000914 <HAL_MspInit+0x54>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f2:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <HAL_MspInit+0x54>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	210f      	movs	r1, #15
 8000902:	f06f 0001 	mvn.w	r0, #1
 8000906:	f000 fa01 	bl	8000d0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800

08000918 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08c      	sub	sp, #48	@ 0x30
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	4b2f      	ldr	r3, [pc, #188]	@ (80009ec <HAL_InitTick+0xd4>)
 800092e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000930:	4a2e      	ldr	r2, [pc, #184]	@ (80009ec <HAL_InitTick+0xd4>)
 8000932:	f043 0301 	orr.w	r3, r3, #1
 8000936:	6453      	str	r3, [r2, #68]	@ 0x44
 8000938:	4b2c      	ldr	r3, [pc, #176]	@ (80009ec <HAL_InitTick+0xd4>)
 800093a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000944:	f107 020c 	add.w	r2, r7, #12
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	4611      	mov	r1, r2
 800094e:	4618      	mov	r0, r3
 8000950:	f001 f858 	bl	8001a04 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000954:	f001 f842 	bl	80019dc <HAL_RCC_GetPCLK2Freq>
 8000958:	4603      	mov	r3, r0
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800095e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000960:	4a23      	ldr	r2, [pc, #140]	@ (80009f0 <HAL_InitTick+0xd8>)
 8000962:	fba2 2303 	umull	r2, r3, r2, r3
 8000966:	0c9b      	lsrs	r3, r3, #18
 8000968:	3b01      	subs	r3, #1
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800096c:	4b21      	ldr	r3, [pc, #132]	@ (80009f4 <HAL_InitTick+0xdc>)
 800096e:	4a22      	ldr	r2, [pc, #136]	@ (80009f8 <HAL_InitTick+0xe0>)
 8000970:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000972:	4b20      	ldr	r3, [pc, #128]	@ (80009f4 <HAL_InitTick+0xdc>)
 8000974:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000978:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800097a:	4a1e      	ldr	r2, [pc, #120]	@ (80009f4 <HAL_InitTick+0xdc>)
 800097c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800097e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000980:	4b1c      	ldr	r3, [pc, #112]	@ (80009f4 <HAL_InitTick+0xdc>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000986:	4b1b      	ldr	r3, [pc, #108]	@ (80009f4 <HAL_InitTick+0xdc>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098c:	4b19      	ldr	r3, [pc, #100]	@ (80009f4 <HAL_InitTick+0xdc>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000992:	4818      	ldr	r0, [pc, #96]	@ (80009f4 <HAL_InitTick+0xdc>)
 8000994:	f001 f868 	bl	8001a68 <HAL_TIM_Base_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800099e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d11b      	bne.n	80009de <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009a6:	4813      	ldr	r0, [pc, #76]	@ (80009f4 <HAL_InitTick+0xdc>)
 80009a8:	f001 f8b8 	bl	8001b1c <HAL_TIM_Base_Start_IT>
 80009ac:	4603      	mov	r3, r0
 80009ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80009b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d111      	bne.n	80009de <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009ba:	2019      	movs	r0, #25
 80009bc:	f000 f9c2 	bl	8000d44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b0f      	cmp	r3, #15
 80009c4:	d808      	bhi.n	80009d8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80009c6:	2200      	movs	r2, #0
 80009c8:	6879      	ldr	r1, [r7, #4]
 80009ca:	2019      	movs	r0, #25
 80009cc:	f000 f99e 	bl	8000d0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d0:	4a0a      	ldr	r2, [pc, #40]	@ (80009fc <HAL_InitTick+0xe4>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6013      	str	r3, [r2, #0]
 80009d6:	e002      	b.n	80009de <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3730      	adds	r7, #48	@ 0x30
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800
 80009f0:	431bde83 	.word	0x431bde83
 80009f4:	20000294 	.word	0x20000294
 80009f8:	40010000 	.word	0x40010000
 80009fc:	20000004 	.word	0x20000004

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <NMI_Handler+0x4>

08000a08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <HardFault_Handler+0x4>

08000a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <MemManage_Handler+0x4>

08000a18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f000 fb46 	bl	80010cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a48:	4802      	ldr	r0, [pc, #8]	@ (8000a54 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a4a:	f001 f8d7 	bl	8001bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000294 	.word	0x20000294

08000a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <SystemInit+0x20>)
 8000a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a62:	4a05      	ldr	r2, [pc, #20]	@ (8000a78 <SystemInit+0x20>)
 8000a64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ab4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a80:	f7ff ffea 	bl	8000a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a84:	480c      	ldr	r0, [pc, #48]	@ (8000ab8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a86:	490d      	ldr	r1, [pc, #52]	@ (8000abc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a8c:	e002      	b.n	8000a94 <LoopCopyDataInit>

08000a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a92:	3304      	adds	r3, #4

08000a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a98:	d3f9      	bcc.n	8000a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa0:	e001      	b.n	8000aa6 <LoopFillZerobss>

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa4:	3204      	adds	r2, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aaa:	f003 feb5 	bl	8004818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aae:	f7ff fd21 	bl	80004f4 <main>
  bx  lr    
 8000ab2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ab4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000abc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ac0:	0800491c 	.word	0x0800491c
  ldr r2, =_sbss
 8000ac4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ac8:	20004034 	.word	0x20004034

08000acc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC_IRQHandler>
	...

08000ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <HAL_Init+0x40>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b10 <HAL_Init+0x40>)
 8000ada:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8000b10 <HAL_Init+0x40>)
 8000ae6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aec:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a07      	ldr	r2, [pc, #28]	@ (8000b10 <HAL_Init+0x40>)
 8000af2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 f8fc 	bl	8000cf6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afe:	200f      	movs	r0, #15
 8000b00:	f7ff ff0a 	bl	8000918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b04:	f7ff fedc 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023c00 	.word	0x40023c00

08000b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <HAL_IncTick+0x20>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <HAL_IncTick+0x24>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	4a04      	ldr	r2, [pc, #16]	@ (8000b38 <HAL_IncTick+0x24>)
 8000b26:	6013      	str	r3, [r2, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008
 8000b38:	200002dc 	.word	0x200002dc

08000b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b03      	ldr	r3, [pc, #12]	@ (8000b50 <HAL_GetTick+0x14>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	200002dc 	.word	0x200002dc

08000b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b5c:	f7ff ffee 	bl	8000b3c <HAL_GetTick>
 8000b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b6c:	d005      	beq.n	8000b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b98 <HAL_Delay+0x44>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	461a      	mov	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4413      	add	r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b7a:	bf00      	nop
 8000b7c:	f7ff ffde 	bl	8000b3c <HAL_GetTick>
 8000b80:	4602      	mov	r2, r0
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d8f7      	bhi.n	8000b7c <HAL_Delay+0x28>
  {
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000008 	.word	0x20000008

08000b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bac:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bce:	4a04      	ldr	r2, [pc, #16]	@ (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	60d3      	str	r3, [r2, #12]
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be8:	4b04      	ldr	r3, [pc, #16]	@ (8000bfc <__NVIC_GetPriorityGrouping+0x18>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	f003 0307 	and.w	r3, r3, #7
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	db0b      	blt.n	8000c2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	f003 021f 	and.w	r2, r3, #31
 8000c18:	4907      	ldr	r1, [pc, #28]	@ (8000c38 <__NVIC_EnableIRQ+0x38>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	095b      	lsrs	r3, r3, #5
 8000c20:	2001      	movs	r0, #1
 8000c22:	fa00 f202 	lsl.w	r2, r0, r2
 8000c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000e100 	.word	0xe000e100

08000c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	db0a      	blt.n	8000c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	490c      	ldr	r1, [pc, #48]	@ (8000c88 <__NVIC_SetPriority+0x4c>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	0112      	lsls	r2, r2, #4
 8000c5c:	b2d2      	uxtb	r2, r2
 8000c5e:	440b      	add	r3, r1
 8000c60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c64:	e00a      	b.n	8000c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4908      	ldr	r1, [pc, #32]	@ (8000c8c <__NVIC_SetPriority+0x50>)
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	f003 030f 	and.w	r3, r3, #15
 8000c72:	3b04      	subs	r3, #4
 8000c74:	0112      	lsls	r2, r2, #4
 8000c76:	b2d2      	uxtb	r2, r2
 8000c78:	440b      	add	r3, r1
 8000c7a:	761a      	strb	r2, [r3, #24]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000e100 	.word	0xe000e100
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b089      	sub	sp, #36	@ 0x24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	f1c3 0307 	rsb	r3, r3, #7
 8000caa:	2b04      	cmp	r3, #4
 8000cac:	bf28      	it	cs
 8000cae:	2304      	movcs	r3, #4
 8000cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	2b06      	cmp	r3, #6
 8000cb8:	d902      	bls.n	8000cc0 <NVIC_EncodePriority+0x30>
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3b03      	subs	r3, #3
 8000cbe:	e000      	b.n	8000cc2 <NVIC_EncodePriority+0x32>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	401a      	ands	r2, r3
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce2:	43d9      	mvns	r1, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce8:	4313      	orrs	r3, r2
         );
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3724      	adds	r7, #36	@ 0x24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff ff4c 	bl	8000b9c <__NVIC_SetPriorityGrouping>
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
 8000d18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d1e:	f7ff ff61 	bl	8000be4 <__NVIC_GetPriorityGrouping>
 8000d22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	68b9      	ldr	r1, [r7, #8]
 8000d28:	6978      	ldr	r0, [r7, #20]
 8000d2a:	f7ff ffb1 	bl	8000c90 <NVIC_EncodePriority>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d34:	4611      	mov	r1, r2
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff ff80 	bl	8000c3c <__NVIC_SetPriority>
}
 8000d3c:	bf00      	nop
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ff54 	bl	8000c00 <__NVIC_EnableIRQ>
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	@ 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
 8000d7a:	e16b      	b.n	8001054 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	697a      	ldr	r2, [r7, #20]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	f040 815a 	bne.w	800104e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d005      	beq.n	8000db2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d130      	bne.n	8000e14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	68da      	ldr	r2, [r3, #12]
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000de8:	2201      	movs	r2, #1
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	091b      	lsrs	r3, r3, #4
 8000dfe:	f003 0201 	and.w	r2, r3, #1
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	2b03      	cmp	r3, #3
 8000e1e:	d017      	beq.n	8000e50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d123      	bne.n	8000ea4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	08da      	lsrs	r2, r3, #3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3208      	adds	r2, #8
 8000e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	f003 0307 	and.w	r3, r3, #7
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	220f      	movs	r2, #15
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	691a      	ldr	r2, [r3, #16]
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	08da      	lsrs	r2, r3, #3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3208      	adds	r2, #8
 8000e9e:	69b9      	ldr	r1, [r7, #24]
 8000ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	2203      	movs	r2, #3
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0203 	and.w	r2, r3, #3
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f000 80b4 	beq.w	800104e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b60      	ldr	r3, [pc, #384]	@ (800106c <HAL_GPIO_Init+0x30c>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eee:	4a5f      	ldr	r2, [pc, #380]	@ (800106c <HAL_GPIO_Init+0x30c>)
 8000ef0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef6:	4b5d      	ldr	r3, [pc, #372]	@ (800106c <HAL_GPIO_Init+0x30c>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f02:	4a5b      	ldr	r2, [pc, #364]	@ (8001070 <HAL_GPIO_Init+0x310>)
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	089b      	lsrs	r3, r3, #2
 8000f08:	3302      	adds	r3, #2
 8000f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	220f      	movs	r2, #15
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4013      	ands	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a52      	ldr	r2, [pc, #328]	@ (8001074 <HAL_GPIO_Init+0x314>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d02b      	beq.n	8000f86 <HAL_GPIO_Init+0x226>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a51      	ldr	r2, [pc, #324]	@ (8001078 <HAL_GPIO_Init+0x318>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d025      	beq.n	8000f82 <HAL_GPIO_Init+0x222>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a50      	ldr	r2, [pc, #320]	@ (800107c <HAL_GPIO_Init+0x31c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d01f      	beq.n	8000f7e <HAL_GPIO_Init+0x21e>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4f      	ldr	r2, [pc, #316]	@ (8001080 <HAL_GPIO_Init+0x320>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d019      	beq.n	8000f7a <HAL_GPIO_Init+0x21a>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4e      	ldr	r2, [pc, #312]	@ (8001084 <HAL_GPIO_Init+0x324>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d013      	beq.n	8000f76 <HAL_GPIO_Init+0x216>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4d      	ldr	r2, [pc, #308]	@ (8001088 <HAL_GPIO_Init+0x328>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d00d      	beq.n	8000f72 <HAL_GPIO_Init+0x212>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4c      	ldr	r2, [pc, #304]	@ (800108c <HAL_GPIO_Init+0x32c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d007      	beq.n	8000f6e <HAL_GPIO_Init+0x20e>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4b      	ldr	r2, [pc, #300]	@ (8001090 <HAL_GPIO_Init+0x330>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d101      	bne.n	8000f6a <HAL_GPIO_Init+0x20a>
 8000f66:	2307      	movs	r3, #7
 8000f68:	e00e      	b.n	8000f88 <HAL_GPIO_Init+0x228>
 8000f6a:	2308      	movs	r3, #8
 8000f6c:	e00c      	b.n	8000f88 <HAL_GPIO_Init+0x228>
 8000f6e:	2306      	movs	r3, #6
 8000f70:	e00a      	b.n	8000f88 <HAL_GPIO_Init+0x228>
 8000f72:	2305      	movs	r3, #5
 8000f74:	e008      	b.n	8000f88 <HAL_GPIO_Init+0x228>
 8000f76:	2304      	movs	r3, #4
 8000f78:	e006      	b.n	8000f88 <HAL_GPIO_Init+0x228>
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e004      	b.n	8000f88 <HAL_GPIO_Init+0x228>
 8000f7e:	2302      	movs	r3, #2
 8000f80:	e002      	b.n	8000f88 <HAL_GPIO_Init+0x228>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <HAL_GPIO_Init+0x228>
 8000f86:	2300      	movs	r3, #0
 8000f88:	69fa      	ldr	r2, [r7, #28]
 8000f8a:	f002 0203 	and.w	r2, r2, #3
 8000f8e:	0092      	lsls	r2, r2, #2
 8000f90:	4093      	lsls	r3, r2
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f98:	4935      	ldr	r1, [pc, #212]	@ (8001070 <HAL_GPIO_Init+0x310>)
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	089b      	lsrs	r3, r3, #2
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fa6:	4b3b      	ldr	r3, [pc, #236]	@ (8001094 <HAL_GPIO_Init+0x334>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fca:	4a32      	ldr	r2, [pc, #200]	@ (8001094 <HAL_GPIO_Init+0x334>)
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd0:	4b30      	ldr	r3, [pc, #192]	@ (8001094 <HAL_GPIO_Init+0x334>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ff4:	4a27      	ldr	r2, [pc, #156]	@ (8001094 <HAL_GPIO_Init+0x334>)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ffa:	4b26      	ldr	r3, [pc, #152]	@ (8001094 <HAL_GPIO_Init+0x334>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800101e:	4a1d      	ldr	r2, [pc, #116]	@ (8001094 <HAL_GPIO_Init+0x334>)
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001024:	4b1b      	ldr	r3, [pc, #108]	@ (8001094 <HAL_GPIO_Init+0x334>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001048:	4a12      	ldr	r2, [pc, #72]	@ (8001094 <HAL_GPIO_Init+0x334>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3301      	adds	r3, #1
 8001052:	61fb      	str	r3, [r7, #28]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	2b0f      	cmp	r3, #15
 8001058:	f67f ae90 	bls.w	8000d7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3724      	adds	r7, #36	@ 0x24
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	40013800 	.word	0x40013800
 8001074:	40020000 	.word	0x40020000
 8001078:	40020400 	.word	0x40020400
 800107c:	40020800 	.word	0x40020800
 8001080:	40020c00 	.word	0x40020c00
 8001084:	40021000 	.word	0x40021000
 8001088:	40021400 	.word	0x40021400
 800108c:	40021800 	.word	0x40021800
 8001090:	40021c00 	.word	0x40021c00
 8001094:	40013c00 	.word	0x40013c00

08001098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]
 80010a4:	4613      	mov	r3, r2
 80010a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a8:	787b      	ldrb	r3, [r7, #1]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ae:	887a      	ldrh	r2, [r7, #2]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010b4:	e003      	b.n	80010be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010b6:	887b      	ldrh	r3, [r7, #2]
 80010b8:	041a      	lsls	r2, r3, #16
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	619a      	str	r2, [r3, #24]
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010d6:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010d8:	695a      	ldr	r2, [r3, #20]
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	4013      	ands	r3, r2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d006      	beq.n	80010f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010e2:	4a05      	ldr	r2, [pc, #20]	@ (80010f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010e8:	88fb      	ldrh	r3, [r7, #6]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fb2c 	bl	8000748 <HAL_GPIO_EXTI_Callback>
  }
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40013c00 	.word	0x40013c00

080010fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e267      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d075      	beq.n	8001206 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800111a:	4b88      	ldr	r3, [pc, #544]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	2b04      	cmp	r3, #4
 8001124:	d00c      	beq.n	8001140 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001126:	4b85      	ldr	r3, [pc, #532]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800112e:	2b08      	cmp	r3, #8
 8001130:	d112      	bne.n	8001158 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001132:	4b82      	ldr	r3, [pc, #520]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800113a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800113e:	d10b      	bne.n	8001158 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001140:	4b7e      	ldr	r3, [pc, #504]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d05b      	beq.n	8001204 <HAL_RCC_OscConfig+0x108>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d157      	bne.n	8001204 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e242      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001160:	d106      	bne.n	8001170 <HAL_RCC_OscConfig+0x74>
 8001162:	4b76      	ldr	r3, [pc, #472]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a75      	ldr	r2, [pc, #468]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 8001168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e01d      	b.n	80011ac <HAL_RCC_OscConfig+0xb0>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001178:	d10c      	bne.n	8001194 <HAL_RCC_OscConfig+0x98>
 800117a:	4b70      	ldr	r3, [pc, #448]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a6f      	ldr	r2, [pc, #444]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 8001180:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	4b6d      	ldr	r3, [pc, #436]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a6c      	ldr	r2, [pc, #432]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 800118c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e00b      	b.n	80011ac <HAL_RCC_OscConfig+0xb0>
 8001194:	4b69      	ldr	r3, [pc, #420]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a68      	ldr	r2, [pc, #416]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 800119a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	4b66      	ldr	r3, [pc, #408]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a65      	ldr	r2, [pc, #404]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 80011a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d013      	beq.n	80011dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fcc2 	bl	8000b3c <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff fcbe 	bl	8000b3c <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	@ 0x64
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e207      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	4b5b      	ldr	r3, [pc, #364]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f0      	beq.n	80011bc <HAL_RCC_OscConfig+0xc0>
 80011da:	e014      	b.n	8001206 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff fcae 	bl	8000b3c <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff fcaa 	bl	8000b3c <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	@ 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e1f3      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f6:	4b51      	ldr	r3, [pc, #324]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f0      	bne.n	80011e4 <HAL_RCC_OscConfig+0xe8>
 8001202:	e000      	b.n	8001206 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d063      	beq.n	80012da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001212:	4b4a      	ldr	r3, [pc, #296]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00b      	beq.n	8001236 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800121e:	4b47      	ldr	r3, [pc, #284]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001226:	2b08      	cmp	r3, #8
 8001228:	d11c      	bne.n	8001264 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800122a:	4b44      	ldr	r3, [pc, #272]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d116      	bne.n	8001264 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001236:	4b41      	ldr	r3, [pc, #260]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d005      	beq.n	800124e <HAL_RCC_OscConfig+0x152>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d001      	beq.n	800124e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e1c7      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124e:	4b3b      	ldr	r3, [pc, #236]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	4937      	ldr	r1, [pc, #220]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 800125e:	4313      	orrs	r3, r2
 8001260:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001262:	e03a      	b.n	80012da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d020      	beq.n	80012ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800126c:	4b34      	ldr	r3, [pc, #208]	@ (8001340 <HAL_RCC_OscConfig+0x244>)
 800126e:	2201      	movs	r2, #1
 8001270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001272:	f7ff fc63 	bl	8000b3c <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800127a:	f7ff fc5f 	bl	8000b3c <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e1a8      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128c:	4b2b      	ldr	r3, [pc, #172]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001298:	4b28      	ldr	r3, [pc, #160]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	4925      	ldr	r1, [pc, #148]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
 80012ac:	e015      	b.n	80012da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ae:	4b24      	ldr	r3, [pc, #144]	@ (8001340 <HAL_RCC_OscConfig+0x244>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b4:	f7ff fc42 	bl	8000b3c <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012bc:	f7ff fc3e 	bl	8000b3c <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e187      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ce:	4b1b      	ldr	r3, [pc, #108]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d036      	beq.n	8001354 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d016      	beq.n	800131c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ee:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <HAL_RCC_OscConfig+0x248>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f4:	f7ff fc22 	bl	8000b3c <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012fc:	f7ff fc1e 	bl	8000b3c <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e167      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130e:	4b0b      	ldr	r3, [pc, #44]	@ (800133c <HAL_RCC_OscConfig+0x240>)
 8001310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0x200>
 800131a:	e01b      	b.n	8001354 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <HAL_RCC_OscConfig+0x248>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001322:	f7ff fc0b 	bl	8000b3c <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001328:	e00e      	b.n	8001348 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800132a:	f7ff fc07 	bl	8000b3c <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d907      	bls.n	8001348 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e150      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
 800133c:	40023800 	.word	0x40023800
 8001340:	42470000 	.word	0x42470000
 8001344:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001348:	4b88      	ldr	r3, [pc, #544]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 800134a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1ea      	bne.n	800132a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 8097 	beq.w	8001490 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001366:	4b81      	ldr	r3, [pc, #516]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10f      	bne.n	8001392 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	4b7d      	ldr	r3, [pc, #500]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	4a7c      	ldr	r2, [pc, #496]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001380:	6413      	str	r3, [r2, #64]	@ 0x40
 8001382:	4b7a      	ldr	r3, [pc, #488]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800138e:	2301      	movs	r3, #1
 8001390:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001392:	4b77      	ldr	r3, [pc, #476]	@ (8001570 <HAL_RCC_OscConfig+0x474>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800139a:	2b00      	cmp	r3, #0
 800139c:	d118      	bne.n	80013d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800139e:	4b74      	ldr	r3, [pc, #464]	@ (8001570 <HAL_RCC_OscConfig+0x474>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a73      	ldr	r2, [pc, #460]	@ (8001570 <HAL_RCC_OscConfig+0x474>)
 80013a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013aa:	f7ff fbc7 	bl	8000b3c <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b2:	f7ff fbc3 	bl	8000b3c <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e10c      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001570 <HAL_RCC_OscConfig+0x474>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f0      	beq.n	80013b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d106      	bne.n	80013e6 <HAL_RCC_OscConfig+0x2ea>
 80013d8:	4b64      	ldr	r3, [pc, #400]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 80013da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013dc:	4a63      	ldr	r2, [pc, #396]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80013e4:	e01c      	b.n	8001420 <HAL_RCC_OscConfig+0x324>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2b05      	cmp	r3, #5
 80013ec:	d10c      	bne.n	8001408 <HAL_RCC_OscConfig+0x30c>
 80013ee:	4b5f      	ldr	r3, [pc, #380]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 80013f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013f2:	4a5e      	ldr	r2, [pc, #376]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80013fa:	4b5c      	ldr	r3, [pc, #368]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 80013fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013fe:	4a5b      	ldr	r2, [pc, #364]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6713      	str	r3, [r2, #112]	@ 0x70
 8001406:	e00b      	b.n	8001420 <HAL_RCC_OscConfig+0x324>
 8001408:	4b58      	ldr	r3, [pc, #352]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 800140a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800140c:	4a57      	ldr	r2, [pc, #348]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 800140e:	f023 0301 	bic.w	r3, r3, #1
 8001412:	6713      	str	r3, [r2, #112]	@ 0x70
 8001414:	4b55      	ldr	r3, [pc, #340]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 8001416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001418:	4a54      	ldr	r2, [pc, #336]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 800141a:	f023 0304 	bic.w	r3, r3, #4
 800141e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d015      	beq.n	8001454 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001428:	f7ff fb88 	bl	8000b3c <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800142e:	e00a      	b.n	8001446 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001430:	f7ff fb84 	bl	8000b3c <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800143e:	4293      	cmp	r3, r2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e0cb      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001446:	4b49      	ldr	r3, [pc, #292]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 8001448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0ee      	beq.n	8001430 <HAL_RCC_OscConfig+0x334>
 8001452:	e014      	b.n	800147e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001454:	f7ff fb72 	bl	8000b3c <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800145a:	e00a      	b.n	8001472 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800145c:	f7ff fb6e 	bl	8000b3c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800146a:	4293      	cmp	r3, r2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e0b5      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001472:	4b3e      	ldr	r3, [pc, #248]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 8001474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1ee      	bne.n	800145c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800147e:	7dfb      	ldrb	r3, [r7, #23]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d105      	bne.n	8001490 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001484:	4b39      	ldr	r3, [pc, #228]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 8001486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001488:	4a38      	ldr	r2, [pc, #224]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 800148a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800148e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 80a1 	beq.w	80015dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800149a:	4b34      	ldr	r3, [pc, #208]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d05c      	beq.n	8001560 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d141      	bne.n	8001532 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ae:	4b31      	ldr	r3, [pc, #196]	@ (8001574 <HAL_RCC_OscConfig+0x478>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fb42 	bl	8000b3c <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014bc:	f7ff fb3e 	bl	8000b3c <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e087      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ce:	4b27      	ldr	r3, [pc, #156]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69da      	ldr	r2, [r3, #28]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e8:	019b      	lsls	r3, r3, #6
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f0:	085b      	lsrs	r3, r3, #1
 80014f2:	3b01      	subs	r3, #1
 80014f4:	041b      	lsls	r3, r3, #16
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014fc:	061b      	lsls	r3, r3, #24
 80014fe:	491b      	ldr	r1, [pc, #108]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 8001500:	4313      	orrs	r3, r2
 8001502:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001504:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <HAL_RCC_OscConfig+0x478>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150a:	f7ff fb17 	bl	8000b3c <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001512:	f7ff fb13 	bl	8000b3c <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e05c      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001524:	4b11      	ldr	r3, [pc, #68]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x416>
 8001530:	e054      	b.n	80015dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001532:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <HAL_RCC_OscConfig+0x478>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fb00 	bl	8000b3c <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001540:	f7ff fafc 	bl	8000b3c <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e045      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <HAL_RCC_OscConfig+0x470>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x444>
 800155e:	e03d      	b.n	80015dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d107      	bne.n	8001578 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e038      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
 800156c:	40023800 	.word	0x40023800
 8001570:	40007000 	.word	0x40007000
 8001574:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001578:	4b1b      	ldr	r3, [pc, #108]	@ (80015e8 <HAL_RCC_OscConfig+0x4ec>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d028      	beq.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001590:	429a      	cmp	r2, r3
 8001592:	d121      	bne.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800159e:	429a      	cmp	r2, r3
 80015a0:	d11a      	bne.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80015a8:	4013      	ands	r3, r2
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d111      	bne.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015be:	085b      	lsrs	r3, r3, #1
 80015c0:	3b01      	subs	r3, #1
 80015c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d107      	bne.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d001      	beq.n	80015dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800

080015ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0cc      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001600:	4b68      	ldr	r3, [pc, #416]	@ (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d90c      	bls.n	8001628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160e:	4b65      	ldr	r3, [pc, #404]	@ (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001616:	4b63      	ldr	r3, [pc, #396]	@ (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d001      	beq.n	8001628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0b8      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d020      	beq.n	8001676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001640:	4b59      	ldr	r3, [pc, #356]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	4a58      	ldr	r2, [pc, #352]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800164a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001658:	4b53      	ldr	r3, [pc, #332]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4a52      	ldr	r2, [pc, #328]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001664:	4b50      	ldr	r3, [pc, #320]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	494d      	ldr	r1, [pc, #308]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	4313      	orrs	r3, r2
 8001674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d044      	beq.n	800170c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d107      	bne.n	800169a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	4b47      	ldr	r3, [pc, #284]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d119      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e07f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d003      	beq.n	80016aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d107      	bne.n	80016ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016aa:	4b3f      	ldr	r3, [pc, #252]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e06f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ba:	4b3b      	ldr	r3, [pc, #236]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e067      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ca:	4b37      	ldr	r3, [pc, #220]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f023 0203 	bic.w	r2, r3, #3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	4934      	ldr	r1, [pc, #208]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016dc:	f7ff fa2e 	bl	8000b3c <HAL_GetTick>
 80016e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e2:	e00a      	b.n	80016fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e4:	f7ff fa2a 	bl	8000b3c <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e04f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fa:	4b2b      	ldr	r3, [pc, #172]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 020c 	and.w	r2, r3, #12
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	429a      	cmp	r2, r3
 800170a:	d1eb      	bne.n	80016e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800170c:	4b25      	ldr	r3, [pc, #148]	@ (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d20c      	bcs.n	8001734 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b22      	ldr	r3, [pc, #136]	@ (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	4b20      	ldr	r3, [pc, #128]	@ (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e032      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	d008      	beq.n	8001752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001740:	4b19      	ldr	r3, [pc, #100]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	4916      	ldr	r1, [pc, #88]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	4313      	orrs	r3, r2
 8001750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d009      	beq.n	8001772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800175e:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	490e      	ldr	r1, [pc, #56]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	4313      	orrs	r3, r2
 8001770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001772:	f000 f821 	bl	80017b8 <HAL_RCC_GetSysClockFreq>
 8001776:	4602      	mov	r2, r0
 8001778:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	091b      	lsrs	r3, r3, #4
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	490a      	ldr	r1, [pc, #40]	@ (80017ac <HAL_RCC_ClockConfig+0x1c0>)
 8001784:	5ccb      	ldrb	r3, [r1, r3]
 8001786:	fa22 f303 	lsr.w	r3, r2, r3
 800178a:	4a09      	ldr	r2, [pc, #36]	@ (80017b0 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800178e:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff f8c0 	bl	8000918 <HAL_InitTick>

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023c00 	.word	0x40023c00
 80017a8:	40023800 	.word	0x40023800
 80017ac:	080048f4 	.word	0x080048f4
 80017b0:	20000000 	.word	0x20000000
 80017b4:	20000004 	.word	0x20000004

080017b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017bc:	b094      	sub	sp, #80	@ 0x50
 80017be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80017c4:	2300      	movs	r3, #0
 80017c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80017c8:	2300      	movs	r3, #0
 80017ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017d0:	4b79      	ldr	r3, [pc, #484]	@ (80019b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d00d      	beq.n	80017f8 <HAL_RCC_GetSysClockFreq+0x40>
 80017dc:	2b08      	cmp	r3, #8
 80017de:	f200 80e1 	bhi.w	80019a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0x34>
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d003      	beq.n	80017f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80017ea:	e0db      	b.n	80019a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017ec:	4b73      	ldr	r3, [pc, #460]	@ (80019bc <HAL_RCC_GetSysClockFreq+0x204>)
 80017ee:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80017f0:	e0db      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017f2:	4b73      	ldr	r3, [pc, #460]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80017f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017f6:	e0d8      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017f8:	4b6f      	ldr	r3, [pc, #444]	@ (80019b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001800:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001802:	4b6d      	ldr	r3, [pc, #436]	@ (80019b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d063      	beq.n	80018d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180e:	4b6a      	ldr	r3, [pc, #424]	@ (80019b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	099b      	lsrs	r3, r3, #6
 8001814:	2200      	movs	r2, #0
 8001816:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001818:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800181a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800181c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001820:	633b      	str	r3, [r7, #48]	@ 0x30
 8001822:	2300      	movs	r3, #0
 8001824:	637b      	str	r3, [r7, #52]	@ 0x34
 8001826:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800182a:	4622      	mov	r2, r4
 800182c:	462b      	mov	r3, r5
 800182e:	f04f 0000 	mov.w	r0, #0
 8001832:	f04f 0100 	mov.w	r1, #0
 8001836:	0159      	lsls	r1, r3, #5
 8001838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800183c:	0150      	lsls	r0, r2, #5
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4621      	mov	r1, r4
 8001844:	1a51      	subs	r1, r2, r1
 8001846:	6139      	str	r1, [r7, #16]
 8001848:	4629      	mov	r1, r5
 800184a:	eb63 0301 	sbc.w	r3, r3, r1
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800185c:	4659      	mov	r1, fp
 800185e:	018b      	lsls	r3, r1, #6
 8001860:	4651      	mov	r1, sl
 8001862:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001866:	4651      	mov	r1, sl
 8001868:	018a      	lsls	r2, r1, #6
 800186a:	4651      	mov	r1, sl
 800186c:	ebb2 0801 	subs.w	r8, r2, r1
 8001870:	4659      	mov	r1, fp
 8001872:	eb63 0901 	sbc.w	r9, r3, r1
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001882:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001886:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800188a:	4690      	mov	r8, r2
 800188c:	4699      	mov	r9, r3
 800188e:	4623      	mov	r3, r4
 8001890:	eb18 0303 	adds.w	r3, r8, r3
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	462b      	mov	r3, r5
 8001898:	eb49 0303 	adc.w	r3, r9, r3
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018aa:	4629      	mov	r1, r5
 80018ac:	024b      	lsls	r3, r1, #9
 80018ae:	4621      	mov	r1, r4
 80018b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018b4:	4621      	mov	r1, r4
 80018b6:	024a      	lsls	r2, r1, #9
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018be:	2200      	movs	r2, #0
 80018c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80018c8:	f7fe fc82 	bl	80001d0 <__aeabi_uldivmod>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4613      	mov	r3, r2
 80018d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018d4:	e058      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d6:	4b38      	ldr	r3, [pc, #224]	@ (80019b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	099b      	lsrs	r3, r3, #6
 80018dc:	2200      	movs	r2, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	4611      	mov	r1, r2
 80018e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018e6:	623b      	str	r3, [r7, #32]
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018f0:	4642      	mov	r2, r8
 80018f2:	464b      	mov	r3, r9
 80018f4:	f04f 0000 	mov.w	r0, #0
 80018f8:	f04f 0100 	mov.w	r1, #0
 80018fc:	0159      	lsls	r1, r3, #5
 80018fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001902:	0150      	lsls	r0, r2, #5
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4641      	mov	r1, r8
 800190a:	ebb2 0a01 	subs.w	sl, r2, r1
 800190e:	4649      	mov	r1, r9
 8001910:	eb63 0b01 	sbc.w	fp, r3, r1
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001920:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001924:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001928:	ebb2 040a 	subs.w	r4, r2, sl
 800192c:	eb63 050b 	sbc.w	r5, r3, fp
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	00eb      	lsls	r3, r5, #3
 800193a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800193e:	00e2      	lsls	r2, r4, #3
 8001940:	4614      	mov	r4, r2
 8001942:	461d      	mov	r5, r3
 8001944:	4643      	mov	r3, r8
 8001946:	18e3      	adds	r3, r4, r3
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	464b      	mov	r3, r9
 800194c:	eb45 0303 	adc.w	r3, r5, r3
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800195e:	4629      	mov	r1, r5
 8001960:	028b      	lsls	r3, r1, #10
 8001962:	4621      	mov	r1, r4
 8001964:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001968:	4621      	mov	r1, r4
 800196a:	028a      	lsls	r2, r1, #10
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001972:	2200      	movs	r2, #0
 8001974:	61bb      	str	r3, [r7, #24]
 8001976:	61fa      	str	r2, [r7, #28]
 8001978:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800197c:	f7fe fc28 	bl	80001d0 <__aeabi_uldivmod>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4613      	mov	r3, r2
 8001986:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001988:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	0c1b      	lsrs	r3, r3, #16
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	3301      	adds	r3, #1
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001998:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800199a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800199c:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019a2:	e002      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019a4:	4b05      	ldr	r3, [pc, #20]	@ (80019bc <HAL_RCC_GetSysClockFreq+0x204>)
 80019a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3750      	adds	r7, #80	@ 0x50
 80019b0:	46bd      	mov	sp, r7
 80019b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800
 80019bc:	00f42400 	.word	0x00f42400
 80019c0:	007a1200 	.word	0x007a1200

080019c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019c8:	4b03      	ldr	r3, [pc, #12]	@ (80019d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80019ca:	681b      	ldr	r3, [r3, #0]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000000 	.word	0x20000000

080019dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019e0:	f7ff fff0 	bl	80019c4 <HAL_RCC_GetHCLKFreq>
 80019e4:	4602      	mov	r2, r0
 80019e6:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	0b5b      	lsrs	r3, r3, #13
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	4903      	ldr	r1, [pc, #12]	@ (8001a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019f2:	5ccb      	ldrb	r3, [r1, r3]
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40023800 	.word	0x40023800
 8001a00:	08004904 	.word	0x08004904

08001a04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	220f      	movs	r2, #15
 8001a12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a14:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <HAL_RCC_GetClockConfig+0x5c>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 0203 	and.w	r2, r3, #3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a20:	4b0f      	ldr	r3, [pc, #60]	@ (8001a60 <HAL_RCC_GetClockConfig+0x5c>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a60 <HAL_RCC_GetClockConfig+0x5c>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a38:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <HAL_RCC_GetClockConfig+0x5c>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	08db      	lsrs	r3, r3, #3
 8001a3e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a46:	4b07      	ldr	r3, [pc, #28]	@ (8001a64 <HAL_RCC_GetClockConfig+0x60>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0207 	and.w	r2, r3, #7
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	601a      	str	r2, [r3, #0]
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40023c00 	.word	0x40023c00

08001a68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e041      	b.n	8001afe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d106      	bne.n	8001a94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f839 	bl	8001b06 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2202      	movs	r2, #2
 8001a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	f000 f9c0 	bl	8001e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d001      	beq.n	8001b34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e04e      	b.n	8001bd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a23      	ldr	r2, [pc, #140]	@ (8001be0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d022      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x80>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b5e:	d01d      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x80>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a1f      	ldr	r2, [pc, #124]	@ (8001be4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d018      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x80>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a1e      	ldr	r2, [pc, #120]	@ (8001be8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d013      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x80>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a1c      	ldr	r2, [pc, #112]	@ (8001bec <HAL_TIM_Base_Start_IT+0xd0>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d00e      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x80>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a1b      	ldr	r2, [pc, #108]	@ (8001bf0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d009      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x80>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a19      	ldr	r2, [pc, #100]	@ (8001bf4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d004      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x80>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a18      	ldr	r2, [pc, #96]	@ (8001bf8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d111      	bne.n	8001bc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d010      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f042 0201 	orr.w	r2, r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bbe:	e007      	b.n	8001bd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40010000 	.word	0x40010000
 8001be4:	40000400 	.word	0x40000400
 8001be8:	40000800 	.word	0x40000800
 8001bec:	40000c00 	.word	0x40000c00
 8001bf0:	40010400 	.word	0x40010400
 8001bf4:	40014000 	.word	0x40014000
 8001bf8:	40001800 	.word	0x40001800

08001bfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d020      	beq.n	8001c60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d01b      	beq.n	8001c60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f06f 0202 	mvn.w	r2, #2
 8001c30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f8d2 	bl	8001df0 <HAL_TIM_IC_CaptureCallback>
 8001c4c:	e005      	b.n	8001c5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f8c4 	bl	8001ddc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f8d5 	bl	8001e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d020      	beq.n	8001cac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d01b      	beq.n	8001cac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f06f 0204 	mvn.w	r2, #4
 8001c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2202      	movs	r2, #2
 8001c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f8ac 	bl	8001df0 <HAL_TIM_IC_CaptureCallback>
 8001c98:	e005      	b.n	8001ca6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f89e 	bl	8001ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f8af 	bl	8001e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d020      	beq.n	8001cf8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d01b      	beq.n	8001cf8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f06f 0208 	mvn.w	r2, #8
 8001cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2204      	movs	r2, #4
 8001cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f886 	bl	8001df0 <HAL_TIM_IC_CaptureCallback>
 8001ce4:	e005      	b.n	8001cf2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f878 	bl	8001ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f889 	bl	8001e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f003 0310 	and.w	r3, r3, #16
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d020      	beq.n	8001d44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f003 0310 	and.w	r3, r3, #16
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d01b      	beq.n	8001d44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0210 	mvn.w	r2, #16
 8001d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2208      	movs	r2, #8
 8001d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f860 	bl	8001df0 <HAL_TIM_IC_CaptureCallback>
 8001d30:	e005      	b.n	8001d3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f852 	bl	8001ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f863 	bl	8001e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00c      	beq.n	8001d68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d007      	beq.n	8001d68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0201 	mvn.w	r2, #1
 8001d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7fe fd94 	bl	8000890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00c      	beq.n	8001d8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d007      	beq.n	8001d8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f906 	bl	8001f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00c      	beq.n	8001db0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d007      	beq.n	8001db0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f834 	bl	8001e18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	f003 0320 	and.w	r3, r3, #32
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00c      	beq.n	8001dd4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f003 0320 	and.w	r3, r3, #32
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d007      	beq.n	8001dd4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0220 	mvn.w	r2, #32
 8001dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f8d8 	bl	8001f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a46      	ldr	r2, [pc, #280]	@ (8001f58 <TIM_Base_SetConfig+0x12c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d013      	beq.n	8001e6c <TIM_Base_SetConfig+0x40>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e4a:	d00f      	beq.n	8001e6c <TIM_Base_SetConfig+0x40>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a43      	ldr	r2, [pc, #268]	@ (8001f5c <TIM_Base_SetConfig+0x130>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d00b      	beq.n	8001e6c <TIM_Base_SetConfig+0x40>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a42      	ldr	r2, [pc, #264]	@ (8001f60 <TIM_Base_SetConfig+0x134>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d007      	beq.n	8001e6c <TIM_Base_SetConfig+0x40>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a41      	ldr	r2, [pc, #260]	@ (8001f64 <TIM_Base_SetConfig+0x138>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d003      	beq.n	8001e6c <TIM_Base_SetConfig+0x40>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a40      	ldr	r2, [pc, #256]	@ (8001f68 <TIM_Base_SetConfig+0x13c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d108      	bne.n	8001e7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a35      	ldr	r2, [pc, #212]	@ (8001f58 <TIM_Base_SetConfig+0x12c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d02b      	beq.n	8001ede <TIM_Base_SetConfig+0xb2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e8c:	d027      	beq.n	8001ede <TIM_Base_SetConfig+0xb2>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a32      	ldr	r2, [pc, #200]	@ (8001f5c <TIM_Base_SetConfig+0x130>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d023      	beq.n	8001ede <TIM_Base_SetConfig+0xb2>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a31      	ldr	r2, [pc, #196]	@ (8001f60 <TIM_Base_SetConfig+0x134>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d01f      	beq.n	8001ede <TIM_Base_SetConfig+0xb2>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a30      	ldr	r2, [pc, #192]	@ (8001f64 <TIM_Base_SetConfig+0x138>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d01b      	beq.n	8001ede <TIM_Base_SetConfig+0xb2>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a2f      	ldr	r2, [pc, #188]	@ (8001f68 <TIM_Base_SetConfig+0x13c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d017      	beq.n	8001ede <TIM_Base_SetConfig+0xb2>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a2e      	ldr	r2, [pc, #184]	@ (8001f6c <TIM_Base_SetConfig+0x140>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d013      	beq.n	8001ede <TIM_Base_SetConfig+0xb2>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a2d      	ldr	r2, [pc, #180]	@ (8001f70 <TIM_Base_SetConfig+0x144>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d00f      	beq.n	8001ede <TIM_Base_SetConfig+0xb2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a2c      	ldr	r2, [pc, #176]	@ (8001f74 <TIM_Base_SetConfig+0x148>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d00b      	beq.n	8001ede <TIM_Base_SetConfig+0xb2>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a2b      	ldr	r2, [pc, #172]	@ (8001f78 <TIM_Base_SetConfig+0x14c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d007      	beq.n	8001ede <TIM_Base_SetConfig+0xb2>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a2a      	ldr	r2, [pc, #168]	@ (8001f7c <TIM_Base_SetConfig+0x150>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d003      	beq.n	8001ede <TIM_Base_SetConfig+0xb2>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a29      	ldr	r2, [pc, #164]	@ (8001f80 <TIM_Base_SetConfig+0x154>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d108      	bne.n	8001ef0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a10      	ldr	r2, [pc, #64]	@ (8001f58 <TIM_Base_SetConfig+0x12c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d003      	beq.n	8001f24 <TIM_Base_SetConfig+0xf8>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a12      	ldr	r2, [pc, #72]	@ (8001f68 <TIM_Base_SetConfig+0x13c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d103      	bne.n	8001f2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d105      	bne.n	8001f4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f023 0201 	bic.w	r2, r3, #1
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	611a      	str	r2, [r3, #16]
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40010000 	.word	0x40010000
 8001f5c:	40000400 	.word	0x40000400
 8001f60:	40000800 	.word	0x40000800
 8001f64:	40000c00 	.word	0x40000c00
 8001f68:	40010400 	.word	0x40010400
 8001f6c:	40014000 	.word	0x40014000
 8001f70:	40014400 	.word	0x40014400
 8001f74:	40014800 	.word	0x40014800
 8001f78:	40001800 	.word	0x40001800
 8001f7c:	40001c00 	.word	0x40001c00
 8001f80:	40002000 	.word	0x40002000

08001f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fbe:	2b84      	cmp	r3, #132	@ 0x84
 8001fc0:	d005      	beq.n	8001fce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001fc2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4413      	add	r3, r2
 8001fca:	3303      	adds	r3, #3
 8001fcc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001fce:	68fb      	ldr	r3, [r7, #12]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fe2:	f3ef 8305 	mrs	r3, IPSR
 8001fe6:	607b      	str	r3, [r7, #4]
  return(result);
 8001fe8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	bf14      	ite	ne
 8001fee:	2301      	movne	r3, #1
 8001ff0:	2300      	moveq	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002004:	f001 f98e 	bl	8003324 <vTaskStartScheduler>
  
  return osOK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	bd80      	pop	{r7, pc}

0800200e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800200e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002010:	b089      	sub	sp, #36	@ 0x24
 8002012:	af04      	add	r7, sp, #16
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d020      	beq.n	8002062 <osThreadCreate+0x54>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d01c      	beq.n	8002062 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685c      	ldr	r4, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691e      	ldr	r6, [r3, #16]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ffb6 	bl	8001fac <makeFreeRtosPriority>
 8002040:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800204a:	9202      	str	r2, [sp, #8]
 800204c:	9301      	str	r3, [sp, #4]
 800204e:	9100      	str	r1, [sp, #0]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	4632      	mov	r2, r6
 8002054:	4629      	mov	r1, r5
 8002056:	4620      	mov	r0, r4
 8002058:	f000 ff96 	bl	8002f88 <xTaskCreateStatic>
 800205c:	4603      	mov	r3, r0
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	e01c      	b.n	800209c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685c      	ldr	r4, [r3, #4]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800206e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ff98 	bl	8001fac <makeFreeRtosPriority>
 800207c:	4602      	mov	r2, r0
 800207e:	f107 030c 	add.w	r3, r7, #12
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	9200      	str	r2, [sp, #0]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	4632      	mov	r2, r6
 800208a:	4629      	mov	r1, r5
 800208c:	4620      	mov	r0, r4
 800208e:	f000 ffdb 	bl	8003048 <xTaskCreate>
 8002092:	4603      	mov	r3, r0
 8002094:	2b01      	cmp	r3, #1
 8002096:	d001      	beq.n	800209c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002098:	2300      	movs	r3, #0
 800209a:	e000      	b.n	800209e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800209c:	68fb      	ldr	r3, [r7, #12]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020a6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <osDelay+0x16>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	e000      	b.n	80020be <osDelay+0x18>
 80020bc:	2301      	movs	r3, #1
 80020be:	4618      	mov	r0, r3
 80020c0:	f001 f8fa 	bl	80032b8 <vTaskDelay>
  
  return osOK;
 80020c4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d007      	beq.n	80020ee <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	4619      	mov	r1, r3
 80020e4:	2001      	movs	r0, #1
 80020e6:	f000 fae8 	bl	80026ba <xQueueCreateMutexStatic>
 80020ea:	4603      	mov	r3, r0
 80020ec:	e003      	b.n	80020f6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80020ee:	2001      	movs	r0, #1
 80020f0:	f000 facb 	bl	800268a <xQueueCreateMutex>
 80020f4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80020fe:	b580      	push	{r7, lr}
 8002100:	b086      	sub	sp, #24
 8002102:	af02      	add	r7, sp, #8
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00f      	beq.n	8002130 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d10a      	bne.n	800212c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2203      	movs	r2, #3
 800211c:	9200      	str	r2, [sp, #0]
 800211e:	2200      	movs	r2, #0
 8002120:	2100      	movs	r1, #0
 8002122:	2001      	movs	r0, #1
 8002124:	f000 f9c0 	bl	80024a8 <xQueueGenericCreateStatic>
 8002128:	4603      	mov	r3, r0
 800212a:	e016      	b.n	800215a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800212c:	2300      	movs	r3, #0
 800212e:	e014      	b.n	800215a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d110      	bne.n	8002158 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8002136:	2203      	movs	r2, #3
 8002138:	2100      	movs	r1, #0
 800213a:	2001      	movs	r0, #1
 800213c:	f000 fa31 	bl	80025a2 <xQueueGenericCreate>
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <osSemaphoreCreate+0x56>
 8002148:	2300      	movs	r3, #0
 800214a:	2200      	movs	r2, #0
 800214c:	2100      	movs	r1, #0
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 face 	bl	80026f0 <xQueueGenericSend>
      return sema;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	e000      	b.n	800215a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002158:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002178:	2380      	movs	r3, #128	@ 0x80
 800217a:	e03a      	b.n	80021f2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002186:	d103      	bne.n	8002190 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002188:	f04f 33ff 	mov.w	r3, #4294967295
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	e009      	b.n	80021a4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d006      	beq.n	80021a4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <osSemaphoreWait+0x40>
      ticks = 1;
 80021a0:	2301      	movs	r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80021a4:	f7ff ff1a 	bl	8001fdc <inHandlerMode>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d017      	beq.n	80021de <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80021ae:	f107 0308 	add.w	r3, r7, #8
 80021b2:	461a      	mov	r2, r3
 80021b4:	2100      	movs	r1, #0
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 fd3c 	bl	8002c34 <xQueueReceiveFromISR>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d001      	beq.n	80021c6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80021c2:	23ff      	movs	r3, #255	@ 0xff
 80021c4:	e015      	b.n	80021f2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d011      	beq.n	80021f0 <osSemaphoreWait+0x8c>
 80021cc:	4b0b      	ldr	r3, [pc, #44]	@ (80021fc <osSemaphoreWait+0x98>)
 80021ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	f3bf 8f4f 	dsb	sy
 80021d8:	f3bf 8f6f 	isb	sy
 80021dc:	e008      	b.n	80021f0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80021de:	68f9      	ldr	r1, [r7, #12]
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 fc17 	bl	8002a14 <xQueueSemaphoreTake>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d001      	beq.n	80021f0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80021ec:	23ff      	movs	r3, #255	@ 0xff
 80021ee:	e000      	b.n	80021f2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	e000ed04 	.word	0xe000ed04

08002200 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800220c:	2300      	movs	r3, #0
 800220e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002210:	f7ff fee4 	bl	8001fdc <inHandlerMode>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d016      	beq.n	8002248 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800221a:	f107 0308 	add.w	r3, r7, #8
 800221e:	4619      	mov	r1, r3
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 fb67 	bl	80028f4 <xQueueGiveFromISR>
 8002226:	4603      	mov	r3, r0
 8002228:	2b01      	cmp	r3, #1
 800222a:	d001      	beq.n	8002230 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800222c:	23ff      	movs	r3, #255	@ 0xff
 800222e:	e017      	b.n	8002260 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d013      	beq.n	800225e <osSemaphoreRelease+0x5e>
 8002236:	4b0c      	ldr	r3, [pc, #48]	@ (8002268 <osSemaphoreRelease+0x68>)
 8002238:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	f3bf 8f4f 	dsb	sy
 8002242:	f3bf 8f6f 	isb	sy
 8002246:	e00a      	b.n	800225e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002248:	2300      	movs	r3, #0
 800224a:	2200      	movs	r2, #0
 800224c:	2100      	movs	r1, #0
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 fa4e 	bl	80026f0 <xQueueGenericSend>
 8002254:	4603      	mov	r3, r0
 8002256:	2b01      	cmp	r3, #1
 8002258:	d001      	beq.n	800225e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800225a:	23ff      	movs	r3, #255	@ 0xff
 800225c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800225e:	68fb      	ldr	r3, [r7, #12]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	e000ed04 	.word	0xe000ed04

0800226c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f103 0208 	add.w	r2, r3, #8
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f04f 32ff 	mov.w	r2, #4294967295
 8002284:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f103 0208 	add.w	r2, r3, #8
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f103 0208 	add.w	r2, r3, #8
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022c6:	b480      	push	{r7}
 80022c8:	b085      	sub	sp, #20
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	601a      	str	r2, [r3, #0]
}
 8002302:	bf00      	nop
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800230e:	b480      	push	{r7}
 8002310:	b085      	sub	sp, #20
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d103      	bne.n	800232e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	e00c      	b.n	8002348 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3308      	adds	r3, #8
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	e002      	b.n	800233c <vListInsert+0x2e>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	429a      	cmp	r2, r3
 8002346:	d2f6      	bcs.n	8002336 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	601a      	str	r2, [r3, #0]
}
 8002374:	bf00      	nop
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6892      	ldr	r2, [r2, #8]
 8002396:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6852      	ldr	r2, [r2, #4]
 80023a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d103      	bne.n	80023b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	1e5a      	subs	r2, r3, #1
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10b      	bne.n	8002400 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80023e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023ec:	f383 8811 	msr	BASEPRI, r3
 80023f0:	f3bf 8f6f 	isb	sy
 80023f4:	f3bf 8f4f 	dsb	sy
 80023f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80023fa:	bf00      	nop
 80023fc:	bf00      	nop
 80023fe:	e7fd      	b.n	80023fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002400:	f001 fef2 	bl	80041e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800240c:	68f9      	ldr	r1, [r7, #12]
 800240e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	441a      	add	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002430:	3b01      	subs	r3, #1
 8002432:	68f9      	ldr	r1, [r7, #12]
 8002434:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	441a      	add	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	22ff      	movs	r2, #255	@ 0xff
 8002444:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	22ff      	movs	r2, #255	@ 0xff
 800244c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d114      	bne.n	8002480 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d01a      	beq.n	8002494 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	3310      	adds	r3, #16
 8002462:	4618      	mov	r0, r3
 8002464:	f001 f9a8 	bl	80037b8 <xTaskRemoveFromEventList>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d012      	beq.n	8002494 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800246e:	4b0d      	ldr	r3, [pc, #52]	@ (80024a4 <xQueueGenericReset+0xd0>)
 8002470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	f3bf 8f4f 	dsb	sy
 800247a:	f3bf 8f6f 	isb	sy
 800247e:	e009      	b.n	8002494 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	3310      	adds	r3, #16
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fef1 	bl	800226c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	3324      	adds	r3, #36	@ 0x24
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff feec 	bl	800226c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002494:	f001 feda 	bl	800424c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002498:	2301      	movs	r3, #1
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	e000ed04 	.word	0xe000ed04

080024a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08e      	sub	sp, #56	@ 0x38
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10b      	bne.n	80024d4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80024bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024c0:	f383 8811 	msr	BASEPRI, r3
 80024c4:	f3bf 8f6f 	isb	sy
 80024c8:	f3bf 8f4f 	dsb	sy
 80024cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80024ce:	bf00      	nop
 80024d0:	bf00      	nop
 80024d2:	e7fd      	b.n	80024d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10b      	bne.n	80024f2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80024da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024de:	f383 8811 	msr	BASEPRI, r3
 80024e2:	f3bf 8f6f 	isb	sy
 80024e6:	f3bf 8f4f 	dsb	sy
 80024ea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	e7fd      	b.n	80024ee <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <xQueueGenericCreateStatic+0x56>
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <xQueueGenericCreateStatic+0x5a>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <xQueueGenericCreateStatic+0x5c>
 8002502:	2300      	movs	r3, #0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10b      	bne.n	8002520 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800250c:	f383 8811 	msr	BASEPRI, r3
 8002510:	f3bf 8f6f 	isb	sy
 8002514:	f3bf 8f4f 	dsb	sy
 8002518:	623b      	str	r3, [r7, #32]
}
 800251a:	bf00      	nop
 800251c:	bf00      	nop
 800251e:	e7fd      	b.n	800251c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d102      	bne.n	800252c <xQueueGenericCreateStatic+0x84>
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <xQueueGenericCreateStatic+0x88>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <xQueueGenericCreateStatic+0x8a>
 8002530:	2300      	movs	r3, #0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10b      	bne.n	800254e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800253a:	f383 8811 	msr	BASEPRI, r3
 800253e:	f3bf 8f6f 	isb	sy
 8002542:	f3bf 8f4f 	dsb	sy
 8002546:	61fb      	str	r3, [r7, #28]
}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	e7fd      	b.n	800254a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800254e:	2348      	movs	r3, #72	@ 0x48
 8002550:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b48      	cmp	r3, #72	@ 0x48
 8002556:	d00b      	beq.n	8002570 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800255c:	f383 8811 	msr	BASEPRI, r3
 8002560:	f3bf 8f6f 	isb	sy
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	61bb      	str	r3, [r7, #24]
}
 800256a:	bf00      	nop
 800256c:	bf00      	nop
 800256e:	e7fd      	b.n	800256c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002570:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00d      	beq.n	8002598 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800257c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002584:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	4613      	mov	r3, r2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f840 	bl	8002618 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800259a:	4618      	mov	r0, r3
 800259c:	3730      	adds	r7, #48	@ 0x30
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b08a      	sub	sp, #40	@ 0x28
 80025a6:	af02      	add	r7, sp, #8
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	4613      	mov	r3, r2
 80025ae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10b      	bne.n	80025ce <xQueueGenericCreate+0x2c>
	__asm volatile
 80025b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025ba:	f383 8811 	msr	BASEPRI, r3
 80025be:	f3bf 8f6f 	isb	sy
 80025c2:	f3bf 8f4f 	dsb	sy
 80025c6:	613b      	str	r3, [r7, #16]
}
 80025c8:	bf00      	nop
 80025ca:	bf00      	nop
 80025cc:	e7fd      	b.n	80025ca <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	fb02 f303 	mul.w	r3, r2, r3
 80025d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	3348      	adds	r3, #72	@ 0x48
 80025dc:	4618      	mov	r0, r3
 80025de:	f001 ff25 	bl	800442c <pvPortMalloc>
 80025e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d011      	beq.n	800260e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	3348      	adds	r3, #72	@ 0x48
 80025f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025fc:	79fa      	ldrb	r2, [r7, #7]
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	4613      	mov	r3, r2
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	68b9      	ldr	r1, [r7, #8]
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 f805 	bl	8002618 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800260e:	69bb      	ldr	r3, [r7, #24]
	}
 8002610:	4618      	mov	r0, r3
 8002612:	3720      	adds	r7, #32
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d103      	bne.n	8002634 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	e002      	b.n	800263a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002646:	2101      	movs	r1, #1
 8002648:	69b8      	ldr	r0, [r7, #24]
 800264a:	f7ff fec3 	bl	80023d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800264e:	bf00      	nop
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00e      	beq.n	8002682 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002676:	2300      	movs	r3, #0
 8002678:	2200      	movs	r2, #0
 800267a:	2100      	movs	r1, #0
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f837 	bl	80026f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800268a:	b580      	push	{r7, lr}
 800268c:	b086      	sub	sp, #24
 800268e:	af00      	add	r7, sp, #0
 8002690:	4603      	mov	r3, r0
 8002692:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002694:	2301      	movs	r3, #1
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	2300      	movs	r3, #0
 800269a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	461a      	mov	r2, r3
 80026a0:	6939      	ldr	r1, [r7, #16]
 80026a2:	6978      	ldr	r0, [r7, #20]
 80026a4:	f7ff ff7d 	bl	80025a2 <xQueueGenericCreate>
 80026a8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f7ff ffd3 	bl	8002656 <prvInitialiseMutex>

		return xNewQueue;
 80026b0:	68fb      	ldr	r3, [r7, #12]
	}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b088      	sub	sp, #32
 80026be:	af02      	add	r7, sp, #8
 80026c0:	4603      	mov	r3, r0
 80026c2:	6039      	str	r1, [r7, #0]
 80026c4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80026c6:	2301      	movs	r3, #1
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2200      	movs	r2, #0
 80026d6:	6939      	ldr	r1, [r7, #16]
 80026d8:	6978      	ldr	r0, [r7, #20]
 80026da:	f7ff fee5 	bl	80024a8 <xQueueGenericCreateStatic>
 80026de:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f7ff ffb8 	bl	8002656 <prvInitialiseMutex>

		return xNewQueue;
 80026e6:	68fb      	ldr	r3, [r7, #12]
	}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08e      	sub	sp, #56	@ 0x38
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80026fe:	2300      	movs	r3, #0
 8002700:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10b      	bne.n	8002724 <xQueueGenericSend+0x34>
	__asm volatile
 800270c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002710:	f383 8811 	msr	BASEPRI, r3
 8002714:	f3bf 8f6f 	isb	sy
 8002718:	f3bf 8f4f 	dsb	sy
 800271c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800271e:	bf00      	nop
 8002720:	bf00      	nop
 8002722:	e7fd      	b.n	8002720 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d103      	bne.n	8002732 <xQueueGenericSend+0x42>
 800272a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <xQueueGenericSend+0x46>
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <xQueueGenericSend+0x48>
 8002736:	2300      	movs	r3, #0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10b      	bne.n	8002754 <xQueueGenericSend+0x64>
	__asm volatile
 800273c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002740:	f383 8811 	msr	BASEPRI, r3
 8002744:	f3bf 8f6f 	isb	sy
 8002748:	f3bf 8f4f 	dsb	sy
 800274c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800274e:	bf00      	nop
 8002750:	bf00      	nop
 8002752:	e7fd      	b.n	8002750 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	2b02      	cmp	r3, #2
 8002758:	d103      	bne.n	8002762 <xQueueGenericSend+0x72>
 800275a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800275c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <xQueueGenericSend+0x76>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <xQueueGenericSend+0x78>
 8002766:	2300      	movs	r3, #0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10b      	bne.n	8002784 <xQueueGenericSend+0x94>
	__asm volatile
 800276c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002770:	f383 8811 	msr	BASEPRI, r3
 8002774:	f3bf 8f6f 	isb	sy
 8002778:	f3bf 8f4f 	dsb	sy
 800277c:	623b      	str	r3, [r7, #32]
}
 800277e:	bf00      	nop
 8002780:	bf00      	nop
 8002782:	e7fd      	b.n	8002780 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002784:	f001 f9d8 	bl	8003b38 <xTaskGetSchedulerState>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d102      	bne.n	8002794 <xQueueGenericSend+0xa4>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <xQueueGenericSend+0xa8>
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <xQueueGenericSend+0xaa>
 8002798:	2300      	movs	r3, #0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10b      	bne.n	80027b6 <xQueueGenericSend+0xc6>
	__asm volatile
 800279e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	f3bf 8f6f 	isb	sy
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	61fb      	str	r3, [r7, #28]
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	e7fd      	b.n	80027b2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80027b6:	f001 fd17 	bl	80041e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d302      	bcc.n	80027cc <xQueueGenericSend+0xdc>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d129      	bne.n	8002820 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	68b9      	ldr	r1, [r7, #8]
 80027d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80027d2:	f000 fac9 	bl	8002d68 <prvCopyDataToQueue>
 80027d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d010      	beq.n	8002802 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e2:	3324      	adds	r3, #36	@ 0x24
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 ffe7 	bl	80037b8 <xTaskRemoveFromEventList>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d013      	beq.n	8002818 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80027f0:	4b3f      	ldr	r3, [pc, #252]	@ (80028f0 <xQueueGenericSend+0x200>)
 80027f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	f3bf 8f4f 	dsb	sy
 80027fc:	f3bf 8f6f 	isb	sy
 8002800:	e00a      	b.n	8002818 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002804:	2b00      	cmp	r3, #0
 8002806:	d007      	beq.n	8002818 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002808:	4b39      	ldr	r3, [pc, #228]	@ (80028f0 <xQueueGenericSend+0x200>)
 800280a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	f3bf 8f4f 	dsb	sy
 8002814:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002818:	f001 fd18 	bl	800424c <vPortExitCritical>
				return pdPASS;
 800281c:	2301      	movs	r3, #1
 800281e:	e063      	b.n	80028e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d103      	bne.n	800282e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002826:	f001 fd11 	bl	800424c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800282a:	2300      	movs	r3, #0
 800282c:	e05c      	b.n	80028e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800282e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002830:	2b00      	cmp	r3, #0
 8002832:	d106      	bne.n	8002842 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	4618      	mov	r0, r3
 800283a:	f001 f821 	bl	8003880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800283e:	2301      	movs	r3, #1
 8002840:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002842:	f001 fd03 	bl	800424c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002846:	f000 fdcf 	bl	80033e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800284a:	f001 fccd 	bl	80041e8 <vPortEnterCritical>
 800284e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002850:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002854:	b25b      	sxtb	r3, r3
 8002856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285a:	d103      	bne.n	8002864 <xQueueGenericSend+0x174>
 800285c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002866:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800286a:	b25b      	sxtb	r3, r3
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d103      	bne.n	800287a <xQueueGenericSend+0x18a>
 8002872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800287a:	f001 fce7 	bl	800424c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800287e:	1d3a      	adds	r2, r7, #4
 8002880:	f107 0314 	add.w	r3, r7, #20
 8002884:	4611      	mov	r1, r2
 8002886:	4618      	mov	r0, r3
 8002888:	f001 f810 	bl	80038ac <xTaskCheckForTimeOut>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d124      	bne.n	80028dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002892:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002894:	f000 fb60 	bl	8002f58 <prvIsQueueFull>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d018      	beq.n	80028d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800289e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028a0:	3310      	adds	r3, #16
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	4611      	mov	r1, r2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 ff60 	bl	800376c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80028ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80028ae:	f000 faeb 	bl	8002e88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80028b2:	f000 fda7 	bl	8003404 <xTaskResumeAll>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f47f af7c 	bne.w	80027b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80028be:	4b0c      	ldr	r3, [pc, #48]	@ (80028f0 <xQueueGenericSend+0x200>)
 80028c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	f3bf 8f6f 	isb	sy
 80028ce:	e772      	b.n	80027b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80028d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80028d2:	f000 fad9 	bl	8002e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80028d6:	f000 fd95 	bl	8003404 <xTaskResumeAll>
 80028da:	e76c      	b.n	80027b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80028dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80028de:	f000 fad3 	bl	8002e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028e2:	f000 fd8f 	bl	8003404 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80028e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3738      	adds	r7, #56	@ 0x38
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	e000ed04 	.word	0xe000ed04

080028f4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08e      	sub	sp, #56	@ 0x38
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10b      	bne.n	8002920 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8002908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800290c:	f383 8811 	msr	BASEPRI, r3
 8002910:	f3bf 8f6f 	isb	sy
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	623b      	str	r3, [r7, #32]
}
 800291a:	bf00      	nop
 800291c:	bf00      	nop
 800291e:	e7fd      	b.n	800291c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00b      	beq.n	8002940 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8002928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800292c:	f383 8811 	msr	BASEPRI, r3
 8002930:	f3bf 8f6f 	isb	sy
 8002934:	f3bf 8f4f 	dsb	sy
 8002938:	61fb      	str	r3, [r7, #28]
}
 800293a:	bf00      	nop
 800293c:	bf00      	nop
 800293e:	e7fd      	b.n	800293c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d103      	bne.n	8002950 <xQueueGiveFromISR+0x5c>
 8002948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <xQueueGiveFromISR+0x60>
 8002950:	2301      	movs	r3, #1
 8002952:	e000      	b.n	8002956 <xQueueGiveFromISR+0x62>
 8002954:	2300      	movs	r3, #0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10b      	bne.n	8002972 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800295a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800295e:	f383 8811 	msr	BASEPRI, r3
 8002962:	f3bf 8f6f 	isb	sy
 8002966:	f3bf 8f4f 	dsb	sy
 800296a:	61bb      	str	r3, [r7, #24]
}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	e7fd      	b.n	800296e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002972:	f001 fd19 	bl	80043a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002976:	f3ef 8211 	mrs	r2, BASEPRI
 800297a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800297e:	f383 8811 	msr	BASEPRI, r3
 8002982:	f3bf 8f6f 	isb	sy
 8002986:	f3bf 8f4f 	dsb	sy
 800298a:	617a      	str	r2, [r7, #20]
 800298c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800298e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002990:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002996:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800299a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800299c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800299e:	429a      	cmp	r2, r3
 80029a0:	d22b      	bcs.n	80029fa <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80029a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80029ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80029b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029bc:	d112      	bne.n	80029e4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d016      	beq.n	80029f4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c8:	3324      	adds	r3, #36	@ 0x24
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fef4 	bl	80037b8 <xTaskRemoveFromEventList>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00e      	beq.n	80029f4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00b      	beq.n	80029f4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	2201      	movs	r2, #1
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	e007      	b.n	80029f4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80029e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029e8:	3301      	adds	r3, #1
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	b25a      	sxtb	r2, r3
 80029ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80029f4:	2301      	movs	r3, #1
 80029f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80029f8:	e001      	b.n	80029fe <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80029fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a00:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002a08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3738      	adds	r7, #56	@ 0x38
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08e      	sub	sp, #56	@ 0x38
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002a26:	2300      	movs	r3, #0
 8002a28:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10b      	bne.n	8002a48 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	623b      	str	r3, [r7, #32]
}
 8002a42:	bf00      	nop
 8002a44:	bf00      	nop
 8002a46:	e7fd      	b.n	8002a44 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00b      	beq.n	8002a68 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a54:	f383 8811 	msr	BASEPRI, r3
 8002a58:	f3bf 8f6f 	isb	sy
 8002a5c:	f3bf 8f4f 	dsb	sy
 8002a60:	61fb      	str	r3, [r7, #28]
}
 8002a62:	bf00      	nop
 8002a64:	bf00      	nop
 8002a66:	e7fd      	b.n	8002a64 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a68:	f001 f866 	bl	8003b38 <xTaskGetSchedulerState>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d102      	bne.n	8002a78 <xQueueSemaphoreTake+0x64>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <xQueueSemaphoreTake+0x68>
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <xQueueSemaphoreTake+0x6a>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10b      	bne.n	8002a9a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8002a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a86:	f383 8811 	msr	BASEPRI, r3
 8002a8a:	f3bf 8f6f 	isb	sy
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	61bb      	str	r3, [r7, #24]
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop
 8002a98:	e7fd      	b.n	8002a96 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a9a:	f001 fba5 	bl	80041e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d024      	beq.n	8002af4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aac:	1e5a      	subs	r2, r3, #1
 8002aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ab0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d104      	bne.n	8002ac4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002aba:	f001 f9e9 	bl	8003e90 <pvTaskIncrementMutexHeldCount>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00f      	beq.n	8002aec <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ace:	3310      	adds	r3, #16
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 fe71 	bl	80037b8 <xTaskRemoveFromEventList>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d007      	beq.n	8002aec <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002adc:	4b54      	ldr	r3, [pc, #336]	@ (8002c30 <xQueueSemaphoreTake+0x21c>)
 8002ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002aec:	f001 fbae 	bl	800424c <vPortExitCritical>
				return pdPASS;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e098      	b.n	8002c26 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d112      	bne.n	8002b20 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00b      	beq.n	8002b18 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8002b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b04:	f383 8811 	msr	BASEPRI, r3
 8002b08:	f3bf 8f6f 	isb	sy
 8002b0c:	f3bf 8f4f 	dsb	sy
 8002b10:	617b      	str	r3, [r7, #20]
}
 8002b12:	bf00      	nop
 8002b14:	bf00      	nop
 8002b16:	e7fd      	b.n	8002b14 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002b18:	f001 fb98 	bl	800424c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	e082      	b.n	8002c26 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d106      	bne.n	8002b34 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b26:	f107 030c 	add.w	r3, r7, #12
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fea8 	bl	8003880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b30:	2301      	movs	r3, #1
 8002b32:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b34:	f001 fb8a 	bl	800424c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b38:	f000 fc56 	bl	80033e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b3c:	f001 fb54 	bl	80041e8 <vPortEnterCritical>
 8002b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b42:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b46:	b25b      	sxtb	r3, r3
 8002b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4c:	d103      	bne.n	8002b56 <xQueueSemaphoreTake+0x142>
 8002b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b5c:	b25b      	sxtb	r3, r3
 8002b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b62:	d103      	bne.n	8002b6c <xQueueSemaphoreTake+0x158>
 8002b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b6c:	f001 fb6e 	bl	800424c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b70:	463a      	mov	r2, r7
 8002b72:	f107 030c 	add.w	r3, r7, #12
 8002b76:	4611      	mov	r1, r2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 fe97 	bl	80038ac <xTaskCheckForTimeOut>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d132      	bne.n	8002bea <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b86:	f000 f9d1 	bl	8002f2c <prvIsQueueEmpty>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d026      	beq.n	8002bde <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d109      	bne.n	8002bac <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8002b98:	f001 fb26 	bl	80041e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 ffe7 	bl	8003b74 <xTaskPriorityInherit>
 8002ba6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8002ba8:	f001 fb50 	bl	800424c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bae:	3324      	adds	r3, #36	@ 0x24
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 fdd9 	bl	800376c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002bba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002bbc:	f000 f964 	bl	8002e88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002bc0:	f000 fc20 	bl	8003404 <xTaskResumeAll>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f47f af67 	bne.w	8002a9a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8002bcc:	4b18      	ldr	r3, [pc, #96]	@ (8002c30 <xQueueSemaphoreTake+0x21c>)
 8002bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	f3bf 8f6f 	isb	sy
 8002bdc:	e75d      	b.n	8002a9a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002bde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002be0:	f000 f952 	bl	8002e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002be4:	f000 fc0e 	bl	8003404 <xTaskResumeAll>
 8002be8:	e757      	b.n	8002a9a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002bea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002bec:	f000 f94c 	bl	8002e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bf0:	f000 fc08 	bl	8003404 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bf4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002bf6:	f000 f999 	bl	8002f2c <prvIsQueueEmpty>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f43f af4c 	beq.w	8002a9a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00d      	beq.n	8002c24 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8002c08:	f001 faee 	bl	80041e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002c0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002c0e:	f000 f893 	bl	8002d38 <prvGetDisinheritPriorityAfterTimeout>
 8002c12:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f001 f8a8 	bl	8003d70 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002c20:	f001 fb14 	bl	800424c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002c24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3738      	adds	r7, #56	@ 0x38
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	e000ed04 	.word	0xe000ed04

08002c34 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08e      	sub	sp, #56	@ 0x38
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10b      	bne.n	8002c62 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8002c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c4e:	f383 8811 	msr	BASEPRI, r3
 8002c52:	f3bf 8f6f 	isb	sy
 8002c56:	f3bf 8f4f 	dsb	sy
 8002c5a:	623b      	str	r3, [r7, #32]
}
 8002c5c:	bf00      	nop
 8002c5e:	bf00      	nop
 8002c60:	e7fd      	b.n	8002c5e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d103      	bne.n	8002c70 <xQueueReceiveFromISR+0x3c>
 8002c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <xQueueReceiveFromISR+0x40>
 8002c70:	2301      	movs	r3, #1
 8002c72:	e000      	b.n	8002c76 <xQueueReceiveFromISR+0x42>
 8002c74:	2300      	movs	r3, #0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10b      	bne.n	8002c92 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8002c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c7e:	f383 8811 	msr	BASEPRI, r3
 8002c82:	f3bf 8f6f 	isb	sy
 8002c86:	f3bf 8f4f 	dsb	sy
 8002c8a:	61fb      	str	r3, [r7, #28]
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	e7fd      	b.n	8002c8e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c92:	f001 fb89 	bl	80043a8 <vPortValidateInterruptPriority>
	__asm volatile
 8002c96:	f3ef 8211 	mrs	r2, BASEPRI
 8002c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c9e:	f383 8811 	msr	BASEPRI, r3
 8002ca2:	f3bf 8f6f 	isb	sy
 8002ca6:	f3bf 8f4f 	dsb	sy
 8002caa:	61ba      	str	r2, [r7, #24]
 8002cac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002cae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d02f      	beq.n	8002d1e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002cc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ccc:	f000 f8b6 	bl	8002e3c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd2:	1e5a      	subs	r2, r3, #1
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002cd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce0:	d112      	bne.n	8002d08 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d016      	beq.n	8002d18 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cec:	3310      	adds	r3, #16
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 fd62 	bl	80037b8 <xTaskRemoveFromEventList>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00e      	beq.n	8002d18 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00b      	beq.n	8002d18 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	e007      	b.n	8002d18 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002d08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	b25a      	sxtb	r2, r3
 8002d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d1c:	e001      	b.n	8002d22 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d24:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	f383 8811 	msr	BASEPRI, r3
}
 8002d2c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3738      	adds	r7, #56	@ 0x38
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d006      	beq.n	8002d56 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f1c3 0307 	rsb	r3, r3, #7
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	e001      	b.n	8002d5a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002d56:	2300      	movs	r3, #0
 8002d58:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
	}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10d      	bne.n	8002da2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d14d      	bne.n	8002e2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 ff64 	bl	8003c60 <xTaskPriorityDisinherit>
 8002d98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	e043      	b.n	8002e2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d119      	bne.n	8002ddc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6858      	ldr	r0, [r3, #4]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db0:	461a      	mov	r2, r3
 8002db2:	68b9      	ldr	r1, [r7, #8]
 8002db4:	f001 fd54 	bl	8004860 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc0:	441a      	add	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d32b      	bcc.n	8002e2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	e026      	b.n	8002e2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	68d8      	ldr	r0, [r3, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de4:	461a      	mov	r2, r3
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	f001 fd3a 	bl	8004860 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df4:	425b      	negs	r3, r3
 8002df6:	441a      	add	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d207      	bcs.n	8002e18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	425b      	negs	r3, r3
 8002e12:	441a      	add	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d105      	bne.n	8002e2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002e32:	697b      	ldr	r3, [r7, #20]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d018      	beq.n	8002e80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	441a      	add	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d303      	bcc.n	8002e70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68d9      	ldr	r1, [r3, #12]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e78:	461a      	mov	r2, r3
 8002e7a:	6838      	ldr	r0, [r7, #0]
 8002e7c:	f001 fcf0 	bl	8004860 <memcpy>
	}
}
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e90:	f001 f9aa 	bl	80041e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e9c:	e011      	b.n	8002ec2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d012      	beq.n	8002ecc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3324      	adds	r3, #36	@ 0x24
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fc84 	bl	80037b8 <xTaskRemoveFromEventList>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002eb6:	f000 fd5d 	bl	8003974 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	dce9      	bgt.n	8002e9e <prvUnlockQueue+0x16>
 8002eca:	e000      	b.n	8002ece <prvUnlockQueue+0x46>
					break;
 8002ecc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	22ff      	movs	r2, #255	@ 0xff
 8002ed2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002ed6:	f001 f9b9 	bl	800424c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002eda:	f001 f985 	bl	80041e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ee4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ee6:	e011      	b.n	8002f0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d012      	beq.n	8002f16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3310      	adds	r3, #16
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 fc5f 	bl	80037b8 <xTaskRemoveFromEventList>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002f00:	f000 fd38 	bl	8003974 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f04:	7bbb      	ldrb	r3, [r7, #14]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	dce9      	bgt.n	8002ee8 <prvUnlockQueue+0x60>
 8002f14:	e000      	b.n	8002f18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002f16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	22ff      	movs	r2, #255	@ 0xff
 8002f1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002f20:	f001 f994 	bl	800424c <vPortExitCritical>
}
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f34:	f001 f958 	bl	80041e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d102      	bne.n	8002f46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002f40:	2301      	movs	r3, #1
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	e001      	b.n	8002f4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f4a:	f001 f97f 	bl	800424c <vPortExitCritical>

	return xReturn;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f60:	f001 f942 	bl	80041e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d102      	bne.n	8002f76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002f70:	2301      	movs	r3, #1
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	e001      	b.n	8002f7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f7a:	f001 f967 	bl	800424c <vPortExitCritical>

	return xReturn;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08e      	sub	sp, #56	@ 0x38
 8002f8c:	af04      	add	r7, sp, #16
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
 8002f94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10b      	bne.n	8002fb4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	623b      	str	r3, [r7, #32]
}
 8002fae:	bf00      	nop
 8002fb0:	bf00      	nop
 8002fb2:	e7fd      	b.n	8002fb0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10b      	bne.n	8002fd2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	61fb      	str	r3, [r7, #28]
}
 8002fcc:	bf00      	nop
 8002fce:	bf00      	nop
 8002fd0:	e7fd      	b.n	8002fce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002fd2:	2354      	movs	r3, #84	@ 0x54
 8002fd4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	2b54      	cmp	r3, #84	@ 0x54
 8002fda:	d00b      	beq.n	8002ff4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	61bb      	str	r3, [r7, #24]
}
 8002fee:	bf00      	nop
 8002ff0:	bf00      	nop
 8002ff2:	e7fd      	b.n	8002ff0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002ff4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01e      	beq.n	800303a <xTaskCreateStatic+0xb2>
 8002ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d01b      	beq.n	800303a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003004:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003008:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800300a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800300c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300e:	2202      	movs	r2, #2
 8003010:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003014:	2300      	movs	r3, #0
 8003016:	9303      	str	r3, [sp, #12]
 8003018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301a:	9302      	str	r3, [sp, #8]
 800301c:	f107 0314 	add.w	r3, r7, #20
 8003020:	9301      	str	r3, [sp, #4]
 8003022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 f850 	bl	80030d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003032:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003034:	f000 f8d6 	bl	80031e4 <prvAddNewTaskToReadyList>
 8003038:	e001      	b.n	800303e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800303e:	697b      	ldr	r3, [r7, #20]
	}
 8003040:	4618      	mov	r0, r3
 8003042:	3728      	adds	r7, #40	@ 0x28
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08c      	sub	sp, #48	@ 0x30
 800304c:	af04      	add	r7, sp, #16
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	603b      	str	r3, [r7, #0]
 8003054:	4613      	mov	r3, r2
 8003056:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003058:	88fb      	ldrh	r3, [r7, #6]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4618      	mov	r0, r3
 800305e:	f001 f9e5 	bl	800442c <pvPortMalloc>
 8003062:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00e      	beq.n	8003088 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800306a:	2054      	movs	r0, #84	@ 0x54
 800306c:	f001 f9de 	bl	800442c <pvPortMalloc>
 8003070:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	631a      	str	r2, [r3, #48]	@ 0x30
 800307e:	e005      	b.n	800308c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003080:	6978      	ldr	r0, [r7, #20]
 8003082:	f001 faa1 	bl	80045c8 <vPortFree>
 8003086:	e001      	b.n	800308c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003088:	2300      	movs	r3, #0
 800308a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d017      	beq.n	80030c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800309a:	88fa      	ldrh	r2, [r7, #6]
 800309c:	2300      	movs	r3, #0
 800309e:	9303      	str	r3, [sp, #12]
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	9302      	str	r3, [sp, #8]
 80030a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a6:	9301      	str	r3, [sp, #4]
 80030a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	68b9      	ldr	r1, [r7, #8]
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f80e 	bl	80030d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030b6:	69f8      	ldr	r0, [r7, #28]
 80030b8:	f000 f894 	bl	80031e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80030bc:	2301      	movs	r3, #1
 80030be:	61bb      	str	r3, [r7, #24]
 80030c0:	e002      	b.n	80030c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030c2:	f04f 33ff 	mov.w	r3, #4294967295
 80030c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80030c8:	69bb      	ldr	r3, [r7, #24]
	}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3720      	adds	r7, #32
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b088      	sub	sp, #32
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	607a      	str	r2, [r7, #4]
 80030de:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80030e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80030ea:	3b01      	subs	r3, #1
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	f023 0307 	bic.w	r3, r3, #7
 80030f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00b      	beq.n	800311c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003108:	f383 8811 	msr	BASEPRI, r3
 800310c:	f3bf 8f6f 	isb	sy
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	617b      	str	r3, [r7, #20]
}
 8003116:	bf00      	nop
 8003118:	bf00      	nop
 800311a:	e7fd      	b.n	8003118 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d01f      	beq.n	8003162 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003122:	2300      	movs	r3, #0
 8003124:	61fb      	str	r3, [r7, #28]
 8003126:	e012      	b.n	800314e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	4413      	add	r3, r2
 800312e:	7819      	ldrb	r1, [r3, #0]
 8003130:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	4413      	add	r3, r2
 8003136:	3334      	adds	r3, #52	@ 0x34
 8003138:	460a      	mov	r2, r1
 800313a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	4413      	add	r3, r2
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d006      	beq.n	8003156 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	3301      	adds	r3, #1
 800314c:	61fb      	str	r3, [r7, #28]
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	2b0f      	cmp	r3, #15
 8003152:	d9e9      	bls.n	8003128 <prvInitialiseNewTask+0x56>
 8003154:	e000      	b.n	8003158 <prvInitialiseNewTask+0x86>
			{
				break;
 8003156:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003160:	e003      	b.n	800316a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800316a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800316c:	2b06      	cmp	r3, #6
 800316e:	d901      	bls.n	8003174 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003170:	2306      	movs	r3, #6
 8003172:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003176:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003178:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800317a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800317c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800317e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003182:	2200      	movs	r2, #0
 8003184:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003188:	3304      	adds	r3, #4
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff f88e 	bl	80022ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003192:	3318      	adds	r3, #24
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff f889 	bl	80022ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800319a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800319e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a2:	f1c3 0207 	rsb	r2, r3, #7
 80031a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031ae:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80031b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b2:	2200      	movs	r2, #0
 80031b4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80031b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	68f9      	ldr	r1, [r7, #12]
 80031c2:	69b8      	ldr	r0, [r7, #24]
 80031c4:	f000 fede 	bl	8003f84 <pxPortInitialiseStack>
 80031c8:	4602      	mov	r2, r0
 80031ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80031ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031da:	bf00      	nop
 80031dc:	3720      	adds	r7, #32
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
	...

080031e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80031ec:	f000 fffc 	bl	80041e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80031f0:	4b2a      	ldr	r3, [pc, #168]	@ (800329c <prvAddNewTaskToReadyList+0xb8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3301      	adds	r3, #1
 80031f6:	4a29      	ldr	r2, [pc, #164]	@ (800329c <prvAddNewTaskToReadyList+0xb8>)
 80031f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80031fa:	4b29      	ldr	r3, [pc, #164]	@ (80032a0 <prvAddNewTaskToReadyList+0xbc>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d109      	bne.n	8003216 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003202:	4a27      	ldr	r2, [pc, #156]	@ (80032a0 <prvAddNewTaskToReadyList+0xbc>)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003208:	4b24      	ldr	r3, [pc, #144]	@ (800329c <prvAddNewTaskToReadyList+0xb8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d110      	bne.n	8003232 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003210:	f000 fbd4 	bl	80039bc <prvInitialiseTaskLists>
 8003214:	e00d      	b.n	8003232 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003216:	4b23      	ldr	r3, [pc, #140]	@ (80032a4 <prvAddNewTaskToReadyList+0xc0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d109      	bne.n	8003232 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800321e:	4b20      	ldr	r3, [pc, #128]	@ (80032a0 <prvAddNewTaskToReadyList+0xbc>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003228:	429a      	cmp	r2, r3
 800322a:	d802      	bhi.n	8003232 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800322c:	4a1c      	ldr	r2, [pc, #112]	@ (80032a0 <prvAddNewTaskToReadyList+0xbc>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003232:	4b1d      	ldr	r3, [pc, #116]	@ (80032a8 <prvAddNewTaskToReadyList+0xc4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3301      	adds	r3, #1
 8003238:	4a1b      	ldr	r2, [pc, #108]	@ (80032a8 <prvAddNewTaskToReadyList+0xc4>)
 800323a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003240:	2201      	movs	r2, #1
 8003242:	409a      	lsls	r2, r3
 8003244:	4b19      	ldr	r3, [pc, #100]	@ (80032ac <prvAddNewTaskToReadyList+0xc8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4313      	orrs	r3, r2
 800324a:	4a18      	ldr	r2, [pc, #96]	@ (80032ac <prvAddNewTaskToReadyList+0xc8>)
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4a15      	ldr	r2, [pc, #84]	@ (80032b0 <prvAddNewTaskToReadyList+0xcc>)
 800325c:	441a      	add	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3304      	adds	r3, #4
 8003262:	4619      	mov	r1, r3
 8003264:	4610      	mov	r0, r2
 8003266:	f7ff f82e 	bl	80022c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800326a:	f000 ffef 	bl	800424c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800326e:	4b0d      	ldr	r3, [pc, #52]	@ (80032a4 <prvAddNewTaskToReadyList+0xc0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00e      	beq.n	8003294 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003276:	4b0a      	ldr	r3, [pc, #40]	@ (80032a0 <prvAddNewTaskToReadyList+0xbc>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003280:	429a      	cmp	r2, r3
 8003282:	d207      	bcs.n	8003294 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003284:	4b0b      	ldr	r3, [pc, #44]	@ (80032b4 <prvAddNewTaskToReadyList+0xd0>)
 8003286:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003294:	bf00      	nop
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	200003e0 	.word	0x200003e0
 80032a0:	200002e0 	.word	0x200002e0
 80032a4:	200003ec 	.word	0x200003ec
 80032a8:	200003fc 	.word	0x200003fc
 80032ac:	200003e8 	.word	0x200003e8
 80032b0:	200002e4 	.word	0x200002e4
 80032b4:	e000ed04 	.word	0xe000ed04

080032b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d018      	beq.n	80032fc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80032ca:	4b14      	ldr	r3, [pc, #80]	@ (800331c <vTaskDelay+0x64>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00b      	beq.n	80032ea <vTaskDelay+0x32>
	__asm volatile
 80032d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032d6:	f383 8811 	msr	BASEPRI, r3
 80032da:	f3bf 8f6f 	isb	sy
 80032de:	f3bf 8f4f 	dsb	sy
 80032e2:	60bb      	str	r3, [r7, #8]
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop
 80032e8:	e7fd      	b.n	80032e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80032ea:	f000 f87d 	bl	80033e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80032ee:	2100      	movs	r1, #0
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fde1 	bl	8003eb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80032f6:	f000 f885 	bl	8003404 <xTaskResumeAll>
 80032fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d107      	bne.n	8003312 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003302:	4b07      	ldr	r3, [pc, #28]	@ (8003320 <vTaskDelay+0x68>)
 8003304:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	f3bf 8f4f 	dsb	sy
 800330e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003312:	bf00      	nop
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20000408 	.word	0x20000408
 8003320:	e000ed04 	.word	0xe000ed04

08003324 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08a      	sub	sp, #40	@ 0x28
 8003328:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800332a:	2300      	movs	r3, #0
 800332c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800332e:	2300      	movs	r3, #0
 8003330:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003332:	463a      	mov	r2, r7
 8003334:	1d39      	adds	r1, r7, #4
 8003336:	f107 0308 	add.w	r3, r7, #8
 800333a:	4618      	mov	r0, r3
 800333c:	f7fd f8c0 	bl	80004c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003340:	6839      	ldr	r1, [r7, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	9202      	str	r2, [sp, #8]
 8003348:	9301      	str	r3, [sp, #4]
 800334a:	2300      	movs	r3, #0
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	2300      	movs	r3, #0
 8003350:	460a      	mov	r2, r1
 8003352:	491f      	ldr	r1, [pc, #124]	@ (80033d0 <vTaskStartScheduler+0xac>)
 8003354:	481f      	ldr	r0, [pc, #124]	@ (80033d4 <vTaskStartScheduler+0xb0>)
 8003356:	f7ff fe17 	bl	8002f88 <xTaskCreateStatic>
 800335a:	4603      	mov	r3, r0
 800335c:	4a1e      	ldr	r2, [pc, #120]	@ (80033d8 <vTaskStartScheduler+0xb4>)
 800335e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003360:	4b1d      	ldr	r3, [pc, #116]	@ (80033d8 <vTaskStartScheduler+0xb4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003368:	2301      	movs	r3, #1
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	e001      	b.n	8003372 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d116      	bne.n	80033a6 <vTaskStartScheduler+0x82>
	__asm volatile
 8003378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800337c:	f383 8811 	msr	BASEPRI, r3
 8003380:	f3bf 8f6f 	isb	sy
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	613b      	str	r3, [r7, #16]
}
 800338a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800338c:	4b13      	ldr	r3, [pc, #76]	@ (80033dc <vTaskStartScheduler+0xb8>)
 800338e:	f04f 32ff 	mov.w	r2, #4294967295
 8003392:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003394:	4b12      	ldr	r3, [pc, #72]	@ (80033e0 <vTaskStartScheduler+0xbc>)
 8003396:	2201      	movs	r2, #1
 8003398:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800339a:	4b12      	ldr	r3, [pc, #72]	@ (80033e4 <vTaskStartScheduler+0xc0>)
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80033a0:	f000 fe7e 	bl	80040a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80033a4:	e00f      	b.n	80033c6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ac:	d10b      	bne.n	80033c6 <vTaskStartScheduler+0xa2>
	__asm volatile
 80033ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033b2:	f383 8811 	msr	BASEPRI, r3
 80033b6:	f3bf 8f6f 	isb	sy
 80033ba:	f3bf 8f4f 	dsb	sy
 80033be:	60fb      	str	r3, [r7, #12]
}
 80033c0:	bf00      	nop
 80033c2:	bf00      	nop
 80033c4:	e7fd      	b.n	80033c2 <vTaskStartScheduler+0x9e>
}
 80033c6:	bf00      	nop
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	080048ec 	.word	0x080048ec
 80033d4:	0800398d 	.word	0x0800398d
 80033d8:	20000404 	.word	0x20000404
 80033dc:	20000400 	.word	0x20000400
 80033e0:	200003ec 	.word	0x200003ec
 80033e4:	200003e4 	.word	0x200003e4

080033e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80033ec:	4b04      	ldr	r3, [pc, #16]	@ (8003400 <vTaskSuspendAll+0x18>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3301      	adds	r3, #1
 80033f2:	4a03      	ldr	r2, [pc, #12]	@ (8003400 <vTaskSuspendAll+0x18>)
 80033f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80033f6:	bf00      	nop
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	20000408 	.word	0x20000408

08003404 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800340e:	2300      	movs	r3, #0
 8003410:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003412:	4b42      	ldr	r3, [pc, #264]	@ (800351c <xTaskResumeAll+0x118>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10b      	bne.n	8003432 <xTaskResumeAll+0x2e>
	__asm volatile
 800341a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800341e:	f383 8811 	msr	BASEPRI, r3
 8003422:	f3bf 8f6f 	isb	sy
 8003426:	f3bf 8f4f 	dsb	sy
 800342a:	603b      	str	r3, [r7, #0]
}
 800342c:	bf00      	nop
 800342e:	bf00      	nop
 8003430:	e7fd      	b.n	800342e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003432:	f000 fed9 	bl	80041e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003436:	4b39      	ldr	r3, [pc, #228]	@ (800351c <xTaskResumeAll+0x118>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3b01      	subs	r3, #1
 800343c:	4a37      	ldr	r2, [pc, #220]	@ (800351c <xTaskResumeAll+0x118>)
 800343e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003440:	4b36      	ldr	r3, [pc, #216]	@ (800351c <xTaskResumeAll+0x118>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d161      	bne.n	800350c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003448:	4b35      	ldr	r3, [pc, #212]	@ (8003520 <xTaskResumeAll+0x11c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d05d      	beq.n	800350c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003450:	e02e      	b.n	80034b0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003452:	4b34      	ldr	r3, [pc, #208]	@ (8003524 <xTaskResumeAll+0x120>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	3318      	adds	r3, #24
 800345e:	4618      	mov	r0, r3
 8003460:	f7fe ff8e 	bl	8002380 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	3304      	adds	r3, #4
 8003468:	4618      	mov	r0, r3
 800346a:	f7fe ff89 	bl	8002380 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003472:	2201      	movs	r2, #1
 8003474:	409a      	lsls	r2, r3
 8003476:	4b2c      	ldr	r3, [pc, #176]	@ (8003528 <xTaskResumeAll+0x124>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4313      	orrs	r3, r2
 800347c:	4a2a      	ldr	r2, [pc, #168]	@ (8003528 <xTaskResumeAll+0x124>)
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4a27      	ldr	r2, [pc, #156]	@ (800352c <xTaskResumeAll+0x128>)
 800348e:	441a      	add	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	3304      	adds	r3, #4
 8003494:	4619      	mov	r1, r3
 8003496:	4610      	mov	r0, r2
 8003498:	f7fe ff15 	bl	80022c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034a0:	4b23      	ldr	r3, [pc, #140]	@ (8003530 <xTaskResumeAll+0x12c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d302      	bcc.n	80034b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80034aa:	4b22      	ldr	r3, [pc, #136]	@ (8003534 <xTaskResumeAll+0x130>)
 80034ac:	2201      	movs	r2, #1
 80034ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034b0:	4b1c      	ldr	r3, [pc, #112]	@ (8003524 <xTaskResumeAll+0x120>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1cc      	bne.n	8003452 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80034be:	f000 fb1b 	bl	8003af8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80034c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003538 <xTaskResumeAll+0x134>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d010      	beq.n	80034f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80034ce:	f000 f837 	bl	8003540 <xTaskIncrementTick>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80034d8:	4b16      	ldr	r3, [pc, #88]	@ (8003534 <xTaskResumeAll+0x130>)
 80034da:	2201      	movs	r2, #1
 80034dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3b01      	subs	r3, #1
 80034e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f1      	bne.n	80034ce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80034ea:	4b13      	ldr	r3, [pc, #76]	@ (8003538 <xTaskResumeAll+0x134>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80034f0:	4b10      	ldr	r3, [pc, #64]	@ (8003534 <xTaskResumeAll+0x130>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d009      	beq.n	800350c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80034f8:	2301      	movs	r3, #1
 80034fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80034fc:	4b0f      	ldr	r3, [pc, #60]	@ (800353c <xTaskResumeAll+0x138>)
 80034fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800350c:	f000 fe9e 	bl	800424c <vPortExitCritical>

	return xAlreadyYielded;
 8003510:	68bb      	ldr	r3, [r7, #8]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20000408 	.word	0x20000408
 8003520:	200003e0 	.word	0x200003e0
 8003524:	200003a0 	.word	0x200003a0
 8003528:	200003e8 	.word	0x200003e8
 800352c:	200002e4 	.word	0x200002e4
 8003530:	200002e0 	.word	0x200002e0
 8003534:	200003f4 	.word	0x200003f4
 8003538:	200003f0 	.word	0x200003f0
 800353c:	e000ed04 	.word	0xe000ed04

08003540 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800354a:	4b4f      	ldr	r3, [pc, #316]	@ (8003688 <xTaskIncrementTick+0x148>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	f040 808f 	bne.w	8003672 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003554:	4b4d      	ldr	r3, [pc, #308]	@ (800368c <xTaskIncrementTick+0x14c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	3301      	adds	r3, #1
 800355a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800355c:	4a4b      	ldr	r2, [pc, #300]	@ (800368c <xTaskIncrementTick+0x14c>)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d121      	bne.n	80035ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003568:	4b49      	ldr	r3, [pc, #292]	@ (8003690 <xTaskIncrementTick+0x150>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00b      	beq.n	800358a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	603b      	str	r3, [r7, #0]
}
 8003584:	bf00      	nop
 8003586:	bf00      	nop
 8003588:	e7fd      	b.n	8003586 <xTaskIncrementTick+0x46>
 800358a:	4b41      	ldr	r3, [pc, #260]	@ (8003690 <xTaskIncrementTick+0x150>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	4b40      	ldr	r3, [pc, #256]	@ (8003694 <xTaskIncrementTick+0x154>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a3e      	ldr	r2, [pc, #248]	@ (8003690 <xTaskIncrementTick+0x150>)
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	4a3e      	ldr	r2, [pc, #248]	@ (8003694 <xTaskIncrementTick+0x154>)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	4b3e      	ldr	r3, [pc, #248]	@ (8003698 <xTaskIncrementTick+0x158>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	3301      	adds	r3, #1
 80035a4:	4a3c      	ldr	r2, [pc, #240]	@ (8003698 <xTaskIncrementTick+0x158>)
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	f000 faa6 	bl	8003af8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80035ac:	4b3b      	ldr	r3, [pc, #236]	@ (800369c <xTaskIncrementTick+0x15c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d348      	bcc.n	8003648 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035b6:	4b36      	ldr	r3, [pc, #216]	@ (8003690 <xTaskIncrementTick+0x150>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d104      	bne.n	80035ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035c0:	4b36      	ldr	r3, [pc, #216]	@ (800369c <xTaskIncrementTick+0x15c>)
 80035c2:	f04f 32ff 	mov.w	r2, #4294967295
 80035c6:	601a      	str	r2, [r3, #0]
					break;
 80035c8:	e03e      	b.n	8003648 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035ca:	4b31      	ldr	r3, [pc, #196]	@ (8003690 <xTaskIncrementTick+0x150>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d203      	bcs.n	80035ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80035e2:	4a2e      	ldr	r2, [pc, #184]	@ (800369c <xTaskIncrementTick+0x15c>)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80035e8:	e02e      	b.n	8003648 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	3304      	adds	r3, #4
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fe fec6 	bl	8002380 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d004      	beq.n	8003606 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	3318      	adds	r3, #24
 8003600:	4618      	mov	r0, r3
 8003602:	f7fe febd 	bl	8002380 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360a:	2201      	movs	r2, #1
 800360c:	409a      	lsls	r2, r3
 800360e:	4b24      	ldr	r3, [pc, #144]	@ (80036a0 <xTaskIncrementTick+0x160>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4313      	orrs	r3, r2
 8003614:	4a22      	ldr	r2, [pc, #136]	@ (80036a0 <xTaskIncrementTick+0x160>)
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800361c:	4613      	mov	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4a1f      	ldr	r2, [pc, #124]	@ (80036a4 <xTaskIncrementTick+0x164>)
 8003626:	441a      	add	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	3304      	adds	r3, #4
 800362c:	4619      	mov	r1, r3
 800362e:	4610      	mov	r0, r2
 8003630:	f7fe fe49 	bl	80022c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003638:	4b1b      	ldr	r3, [pc, #108]	@ (80036a8 <xTaskIncrementTick+0x168>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363e:	429a      	cmp	r2, r3
 8003640:	d3b9      	bcc.n	80035b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003642:	2301      	movs	r3, #1
 8003644:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003646:	e7b6      	b.n	80035b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003648:	4b17      	ldr	r3, [pc, #92]	@ (80036a8 <xTaskIncrementTick+0x168>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800364e:	4915      	ldr	r1, [pc, #84]	@ (80036a4 <xTaskIncrementTick+0x164>)
 8003650:	4613      	mov	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d901      	bls.n	8003664 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003660:	2301      	movs	r3, #1
 8003662:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003664:	4b11      	ldr	r3, [pc, #68]	@ (80036ac <xTaskIncrementTick+0x16c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d007      	beq.n	800367c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800366c:	2301      	movs	r3, #1
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	e004      	b.n	800367c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003672:	4b0f      	ldr	r3, [pc, #60]	@ (80036b0 <xTaskIncrementTick+0x170>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3301      	adds	r3, #1
 8003678:	4a0d      	ldr	r2, [pc, #52]	@ (80036b0 <xTaskIncrementTick+0x170>)
 800367a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800367c:	697b      	ldr	r3, [r7, #20]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	20000408 	.word	0x20000408
 800368c:	200003e4 	.word	0x200003e4
 8003690:	20000398 	.word	0x20000398
 8003694:	2000039c 	.word	0x2000039c
 8003698:	200003f8 	.word	0x200003f8
 800369c:	20000400 	.word	0x20000400
 80036a0:	200003e8 	.word	0x200003e8
 80036a4:	200002e4 	.word	0x200002e4
 80036a8:	200002e0 	.word	0x200002e0
 80036ac:	200003f4 	.word	0x200003f4
 80036b0:	200003f0 	.word	0x200003f0

080036b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036ba:	4b27      	ldr	r3, [pc, #156]	@ (8003758 <vTaskSwitchContext+0xa4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80036c2:	4b26      	ldr	r3, [pc, #152]	@ (800375c <vTaskSwitchContext+0xa8>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80036c8:	e040      	b.n	800374c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80036ca:	4b24      	ldr	r3, [pc, #144]	@ (800375c <vTaskSwitchContext+0xa8>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036d0:	4b23      	ldr	r3, [pc, #140]	@ (8003760 <vTaskSwitchContext+0xac>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	fab3 f383 	clz	r3, r3
 80036dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80036de:	7afb      	ldrb	r3, [r7, #11]
 80036e0:	f1c3 031f 	rsb	r3, r3, #31
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	491f      	ldr	r1, [pc, #124]	@ (8003764 <vTaskSwitchContext+0xb0>)
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	4613      	mov	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	440b      	add	r3, r1
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10b      	bne.n	8003712 <vTaskSwitchContext+0x5e>
	__asm volatile
 80036fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	607b      	str	r3, [r7, #4]
}
 800370c:	bf00      	nop
 800370e:	bf00      	nop
 8003710:	e7fd      	b.n	800370e <vTaskSwitchContext+0x5a>
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4a11      	ldr	r2, [pc, #68]	@ (8003764 <vTaskSwitchContext+0xb0>)
 800371e:	4413      	add	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	605a      	str	r2, [r3, #4]
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	3308      	adds	r3, #8
 8003734:	429a      	cmp	r2, r3
 8003736:	d104      	bne.n	8003742 <vTaskSwitchContext+0x8e>
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	4a07      	ldr	r2, [pc, #28]	@ (8003768 <vTaskSwitchContext+0xb4>)
 800374a:	6013      	str	r3, [r2, #0]
}
 800374c:	bf00      	nop
 800374e:	371c      	adds	r7, #28
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	20000408 	.word	0x20000408
 800375c:	200003f4 	.word	0x200003f4
 8003760:	200003e8 	.word	0x200003e8
 8003764:	200002e4 	.word	0x200002e4
 8003768:	200002e0 	.word	0x200002e0

0800376c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10b      	bne.n	8003794 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800377c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	60fb      	str	r3, [r7, #12]
}
 800378e:	bf00      	nop
 8003790:	bf00      	nop
 8003792:	e7fd      	b.n	8003790 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003794:	4b07      	ldr	r3, [pc, #28]	@ (80037b4 <vTaskPlaceOnEventList+0x48>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3318      	adds	r3, #24
 800379a:	4619      	mov	r1, r3
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7fe fdb6 	bl	800230e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80037a2:	2101      	movs	r1, #1
 80037a4:	6838      	ldr	r0, [r7, #0]
 80037a6:	f000 fb87 	bl	8003eb8 <prvAddCurrentTaskToDelayedList>
}
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	200002e0 	.word	0x200002e0

080037b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10b      	bne.n	80037e6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80037ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d2:	f383 8811 	msr	BASEPRI, r3
 80037d6:	f3bf 8f6f 	isb	sy
 80037da:	f3bf 8f4f 	dsb	sy
 80037de:	60fb      	str	r3, [r7, #12]
}
 80037e0:	bf00      	nop
 80037e2:	bf00      	nop
 80037e4:	e7fd      	b.n	80037e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	3318      	adds	r3, #24
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fe fdc8 	bl	8002380 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003868 <xTaskRemoveFromEventList+0xb0>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d11c      	bne.n	8003832 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	3304      	adds	r3, #4
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fe fdbf 	bl	8002380 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003806:	2201      	movs	r2, #1
 8003808:	409a      	lsls	r2, r3
 800380a:	4b18      	ldr	r3, [pc, #96]	@ (800386c <xTaskRemoveFromEventList+0xb4>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4313      	orrs	r3, r2
 8003810:	4a16      	ldr	r2, [pc, #88]	@ (800386c <xTaskRemoveFromEventList+0xb4>)
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4a13      	ldr	r2, [pc, #76]	@ (8003870 <xTaskRemoveFromEventList+0xb8>)
 8003822:	441a      	add	r2, r3
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	3304      	adds	r3, #4
 8003828:	4619      	mov	r1, r3
 800382a:	4610      	mov	r0, r2
 800382c:	f7fe fd4b 	bl	80022c6 <vListInsertEnd>
 8003830:	e005      	b.n	800383e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	3318      	adds	r3, #24
 8003836:	4619      	mov	r1, r3
 8003838:	480e      	ldr	r0, [pc, #56]	@ (8003874 <xTaskRemoveFromEventList+0xbc>)
 800383a:	f7fe fd44 	bl	80022c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003842:	4b0d      	ldr	r3, [pc, #52]	@ (8003878 <xTaskRemoveFromEventList+0xc0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003848:	429a      	cmp	r2, r3
 800384a:	d905      	bls.n	8003858 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800384c:	2301      	movs	r3, #1
 800384e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003850:	4b0a      	ldr	r3, [pc, #40]	@ (800387c <xTaskRemoveFromEventList+0xc4>)
 8003852:	2201      	movs	r2, #1
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	e001      	b.n	800385c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800385c:	697b      	ldr	r3, [r7, #20]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20000408 	.word	0x20000408
 800386c:	200003e8 	.word	0x200003e8
 8003870:	200002e4 	.word	0x200002e4
 8003874:	200003a0 	.word	0x200003a0
 8003878:	200002e0 	.word	0x200002e0
 800387c:	200003f4 	.word	0x200003f4

08003880 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003888:	4b06      	ldr	r3, [pc, #24]	@ (80038a4 <vTaskInternalSetTimeOutState+0x24>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003890:	4b05      	ldr	r3, [pc, #20]	@ (80038a8 <vTaskInternalSetTimeOutState+0x28>)
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	605a      	str	r2, [r3, #4]
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	200003f8 	.word	0x200003f8
 80038a8:	200003e4 	.word	0x200003e4

080038ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10b      	bne.n	80038d4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80038bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	613b      	str	r3, [r7, #16]
}
 80038ce:	bf00      	nop
 80038d0:	bf00      	nop
 80038d2:	e7fd      	b.n	80038d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10b      	bne.n	80038f2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80038da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	60fb      	str	r3, [r7, #12]
}
 80038ec:	bf00      	nop
 80038ee:	bf00      	nop
 80038f0:	e7fd      	b.n	80038ee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80038f2:	f000 fc79 	bl	80041e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80038f6:	4b1d      	ldr	r3, [pc, #116]	@ (800396c <xTaskCheckForTimeOut+0xc0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390e:	d102      	bne.n	8003916 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003910:	2300      	movs	r3, #0
 8003912:	61fb      	str	r3, [r7, #28]
 8003914:	e023      	b.n	800395e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	4b15      	ldr	r3, [pc, #84]	@ (8003970 <xTaskCheckForTimeOut+0xc4>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d007      	beq.n	8003932 <xTaskCheckForTimeOut+0x86>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	429a      	cmp	r2, r3
 800392a:	d302      	bcc.n	8003932 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800392c:	2301      	movs	r3, #1
 800392e:	61fb      	str	r3, [r7, #28]
 8003930:	e015      	b.n	800395e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	429a      	cmp	r2, r3
 800393a:	d20b      	bcs.n	8003954 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	1ad2      	subs	r2, r2, r3
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff ff99 	bl	8003880 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800394e:	2300      	movs	r3, #0
 8003950:	61fb      	str	r3, [r7, #28]
 8003952:	e004      	b.n	800395e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800395a:	2301      	movs	r3, #1
 800395c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800395e:	f000 fc75 	bl	800424c <vPortExitCritical>

	return xReturn;
 8003962:	69fb      	ldr	r3, [r7, #28]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3720      	adds	r7, #32
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	200003e4 	.word	0x200003e4
 8003970:	200003f8 	.word	0x200003f8

08003974 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003978:	4b03      	ldr	r3, [pc, #12]	@ (8003988 <vTaskMissedYield+0x14>)
 800397a:	2201      	movs	r2, #1
 800397c:	601a      	str	r2, [r3, #0]
}
 800397e:	bf00      	nop
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	200003f4 	.word	0x200003f4

0800398c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003994:	f000 f852 	bl	8003a3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003998:	4b06      	ldr	r3, [pc, #24]	@ (80039b4 <prvIdleTask+0x28>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d9f9      	bls.n	8003994 <prvIdleTask+0x8>
			{
				taskYIELD();
 80039a0:	4b05      	ldr	r3, [pc, #20]	@ (80039b8 <prvIdleTask+0x2c>)
 80039a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80039b0:	e7f0      	b.n	8003994 <prvIdleTask+0x8>
 80039b2:	bf00      	nop
 80039b4:	200002e4 	.word	0x200002e4
 80039b8:	e000ed04 	.word	0xe000ed04

080039bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039c2:	2300      	movs	r3, #0
 80039c4:	607b      	str	r3, [r7, #4]
 80039c6:	e00c      	b.n	80039e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	4613      	mov	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4a12      	ldr	r2, [pc, #72]	@ (8003a1c <prvInitialiseTaskLists+0x60>)
 80039d4:	4413      	add	r3, r2
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fe fc48 	bl	800226c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3301      	adds	r3, #1
 80039e0:	607b      	str	r3, [r7, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b06      	cmp	r3, #6
 80039e6:	d9ef      	bls.n	80039c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80039e8:	480d      	ldr	r0, [pc, #52]	@ (8003a20 <prvInitialiseTaskLists+0x64>)
 80039ea:	f7fe fc3f 	bl	800226c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80039ee:	480d      	ldr	r0, [pc, #52]	@ (8003a24 <prvInitialiseTaskLists+0x68>)
 80039f0:	f7fe fc3c 	bl	800226c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80039f4:	480c      	ldr	r0, [pc, #48]	@ (8003a28 <prvInitialiseTaskLists+0x6c>)
 80039f6:	f7fe fc39 	bl	800226c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80039fa:	480c      	ldr	r0, [pc, #48]	@ (8003a2c <prvInitialiseTaskLists+0x70>)
 80039fc:	f7fe fc36 	bl	800226c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a00:	480b      	ldr	r0, [pc, #44]	@ (8003a30 <prvInitialiseTaskLists+0x74>)
 8003a02:	f7fe fc33 	bl	800226c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a06:	4b0b      	ldr	r3, [pc, #44]	@ (8003a34 <prvInitialiseTaskLists+0x78>)
 8003a08:	4a05      	ldr	r2, [pc, #20]	@ (8003a20 <prvInitialiseTaskLists+0x64>)
 8003a0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a38 <prvInitialiseTaskLists+0x7c>)
 8003a0e:	4a05      	ldr	r2, [pc, #20]	@ (8003a24 <prvInitialiseTaskLists+0x68>)
 8003a10:	601a      	str	r2, [r3, #0]
}
 8003a12:	bf00      	nop
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	200002e4 	.word	0x200002e4
 8003a20:	20000370 	.word	0x20000370
 8003a24:	20000384 	.word	0x20000384
 8003a28:	200003a0 	.word	0x200003a0
 8003a2c:	200003b4 	.word	0x200003b4
 8003a30:	200003cc 	.word	0x200003cc
 8003a34:	20000398 	.word	0x20000398
 8003a38:	2000039c 	.word	0x2000039c

08003a3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a42:	e019      	b.n	8003a78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a44:	f000 fbd0 	bl	80041e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a48:	4b10      	ldr	r3, [pc, #64]	@ (8003a8c <prvCheckTasksWaitingTermination+0x50>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3304      	adds	r3, #4
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fe fc93 	bl	8002380 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a90 <prvCheckTasksWaitingTermination+0x54>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	4a0b      	ldr	r2, [pc, #44]	@ (8003a90 <prvCheckTasksWaitingTermination+0x54>)
 8003a62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a64:	4b0b      	ldr	r3, [pc, #44]	@ (8003a94 <prvCheckTasksWaitingTermination+0x58>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a94 <prvCheckTasksWaitingTermination+0x58>)
 8003a6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a6e:	f000 fbed 	bl	800424c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f810 	bl	8003a98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a78:	4b06      	ldr	r3, [pc, #24]	@ (8003a94 <prvCheckTasksWaitingTermination+0x58>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1e1      	bne.n	8003a44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a80:	bf00      	nop
 8003a82:	bf00      	nop
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	200003b4 	.word	0x200003b4
 8003a90:	200003e0 	.word	0x200003e0
 8003a94:	200003c8 	.word	0x200003c8

08003a98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d108      	bne.n	8003abc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 fd8a 	bl	80045c8 <vPortFree>
				vPortFree( pxTCB );
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fd87 	bl	80045c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003aba:	e019      	b.n	8003af0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d103      	bne.n	8003ace <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fd7e 	bl	80045c8 <vPortFree>
	}
 8003acc:	e010      	b.n	8003af0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d00b      	beq.n	8003af0 <prvDeleteTCB+0x58>
	__asm volatile
 8003ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003adc:	f383 8811 	msr	BASEPRI, r3
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	60fb      	str	r3, [r7, #12]
}
 8003aea:	bf00      	nop
 8003aec:	bf00      	nop
 8003aee:	e7fd      	b.n	8003aec <prvDeleteTCB+0x54>
	}
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003afe:	4b0c      	ldr	r3, [pc, #48]	@ (8003b30 <prvResetNextTaskUnblockTime+0x38>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d104      	bne.n	8003b12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b08:	4b0a      	ldr	r3, [pc, #40]	@ (8003b34 <prvResetNextTaskUnblockTime+0x3c>)
 8003b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b10:	e008      	b.n	8003b24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b12:	4b07      	ldr	r3, [pc, #28]	@ (8003b30 <prvResetNextTaskUnblockTime+0x38>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	4a04      	ldr	r2, [pc, #16]	@ (8003b34 <prvResetNextTaskUnblockTime+0x3c>)
 8003b22:	6013      	str	r3, [r2, #0]
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	20000398 	.word	0x20000398
 8003b34:	20000400 	.word	0x20000400

08003b38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b6c <xTaskGetSchedulerState+0x34>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d102      	bne.n	8003b4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b46:	2301      	movs	r3, #1
 8003b48:	607b      	str	r3, [r7, #4]
 8003b4a:	e008      	b.n	8003b5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b4c:	4b08      	ldr	r3, [pc, #32]	@ (8003b70 <xTaskGetSchedulerState+0x38>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d102      	bne.n	8003b5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b54:	2302      	movs	r3, #2
 8003b56:	607b      	str	r3, [r7, #4]
 8003b58:	e001      	b.n	8003b5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003b5e:	687b      	ldr	r3, [r7, #4]
	}
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	200003ec 	.word	0x200003ec
 8003b70:	20000408 	.word	0x20000408

08003b74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d05e      	beq.n	8003c48 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b8e:	4b31      	ldr	r3, [pc, #196]	@ (8003c54 <xTaskPriorityInherit+0xe0>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d24e      	bcs.n	8003c36 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	db06      	blt.n	8003bae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ba0:	4b2c      	ldr	r3, [pc, #176]	@ (8003c54 <xTaskPriorityInherit+0xe0>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba6:	f1c3 0207 	rsb	r2, r3, #7
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	6959      	ldr	r1, [r3, #20]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4a26      	ldr	r2, [pc, #152]	@ (8003c58 <xTaskPriorityInherit+0xe4>)
 8003bc0:	4413      	add	r3, r2
 8003bc2:	4299      	cmp	r1, r3
 8003bc4:	d12f      	bne.n	8003c26 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe fbd8 	bl	8002380 <uxListRemove>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10a      	bne.n	8003bec <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bda:	2201      	movs	r2, #1
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43da      	mvns	r2, r3
 8003be2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c5c <xTaskPriorityInherit+0xe8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4013      	ands	r3, r2
 8003be8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c5c <xTaskPriorityInherit+0xe8>)
 8003bea:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003bec:	4b19      	ldr	r3, [pc, #100]	@ (8003c54 <xTaskPriorityInherit+0xe0>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	409a      	lsls	r2, r3
 8003bfe:	4b17      	ldr	r3, [pc, #92]	@ (8003c5c <xTaskPriorityInherit+0xe8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	4a15      	ldr	r2, [pc, #84]	@ (8003c5c <xTaskPriorityInherit+0xe8>)
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4a10      	ldr	r2, [pc, #64]	@ (8003c58 <xTaskPriorityInherit+0xe4>)
 8003c16:	441a      	add	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4610      	mov	r0, r2
 8003c20:	f7fe fb51 	bl	80022c6 <vListInsertEnd>
 8003c24:	e004      	b.n	8003c30 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c26:	4b0b      	ldr	r3, [pc, #44]	@ (8003c54 <xTaskPriorityInherit+0xe0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003c30:	2301      	movs	r3, #1
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	e008      	b.n	8003c48 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c3a:	4b06      	ldr	r3, [pc, #24]	@ (8003c54 <xTaskPriorityInherit+0xe0>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d201      	bcs.n	8003c48 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003c44:	2301      	movs	r3, #1
 8003c46:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c48:	68fb      	ldr	r3, [r7, #12]
	}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	200002e0 	.word	0x200002e0
 8003c58:	200002e4 	.word	0x200002e4
 8003c5c:	200003e8 	.word	0x200003e8

08003c60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d070      	beq.n	8003d58 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003c76:	4b3b      	ldr	r3, [pc, #236]	@ (8003d64 <xTaskPriorityDisinherit+0x104>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d00b      	beq.n	8003c98 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	60fb      	str	r3, [r7, #12]
}
 8003c92:	bf00      	nop
 8003c94:	bf00      	nop
 8003c96:	e7fd      	b.n	8003c94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10b      	bne.n	8003cb8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	60bb      	str	r3, [r7, #8]
}
 8003cb2:	bf00      	nop
 8003cb4:	bf00      	nop
 8003cb6:	e7fd      	b.n	8003cb4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cbc:	1e5a      	subs	r2, r3, #1
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d044      	beq.n	8003d58 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d140      	bne.n	8003d58 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe fb50 	bl	8002380 <uxListRemove>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d115      	bne.n	8003d12 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cea:	491f      	ldr	r1, [pc, #124]	@ (8003d68 <xTaskPriorityDisinherit+0x108>)
 8003cec:	4613      	mov	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10a      	bne.n	8003d12 <xTaskPriorityDisinherit+0xb2>
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d00:	2201      	movs	r2, #1
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43da      	mvns	r2, r3
 8003d08:	4b18      	ldr	r3, [pc, #96]	@ (8003d6c <xTaskPriorityDisinherit+0x10c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	4a17      	ldr	r2, [pc, #92]	@ (8003d6c <xTaskPriorityDisinherit+0x10c>)
 8003d10:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1e:	f1c3 0207 	rsb	r2, r3, #7
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	409a      	lsls	r2, r3
 8003d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8003d6c <xTaskPriorityDisinherit+0x10c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	4a0d      	ldr	r2, [pc, #52]	@ (8003d6c <xTaskPriorityDisinherit+0x10c>)
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4a08      	ldr	r2, [pc, #32]	@ (8003d68 <xTaskPriorityDisinherit+0x108>)
 8003d46:	441a      	add	r2, r3
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4610      	mov	r0, r2
 8003d50:	f7fe fab9 	bl	80022c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003d54:	2301      	movs	r3, #1
 8003d56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d58:	697b      	ldr	r3, [r7, #20]
	}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	200002e0 	.word	0x200002e0
 8003d68:	200002e4 	.word	0x200002e4
 8003d6c:	200003e8 	.word	0x200003e8

08003d70 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b088      	sub	sp, #32
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d079      	beq.n	8003e7c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10b      	bne.n	8003da8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8003d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	60fb      	str	r3, [r7, #12]
}
 8003da2:	bf00      	nop
 8003da4:	bf00      	nop
 8003da6:	e7fd      	b.n	8003da4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d902      	bls.n	8003db8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	61fb      	str	r3, [r7, #28]
 8003db6:	e002      	b.n	8003dbe <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dbc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d059      	beq.n	8003e7c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d154      	bne.n	8003e7c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003dd2:	4b2c      	ldr	r3, [pc, #176]	@ (8003e84 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d10b      	bne.n	8003df4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8003ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de0:	f383 8811 	msr	BASEPRI, r3
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	60bb      	str	r3, [r7, #8]
}
 8003dee:	bf00      	nop
 8003df0:	bf00      	nop
 8003df2:	e7fd      	b.n	8003df0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	69fa      	ldr	r2, [r7, #28]
 8003dfe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	db04      	blt.n	8003e12 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f1c3 0207 	rsb	r2, r3, #7
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	6959      	ldr	r1, [r3, #20]
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4a19      	ldr	r2, [pc, #100]	@ (8003e88 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003e22:	4413      	add	r3, r2
 8003e24:	4299      	cmp	r1, r3
 8003e26:	d129      	bne.n	8003e7c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fe faa7 	bl	8002380 <uxListRemove>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10a      	bne.n	8003e4e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e42:	43da      	mvns	r2, r3
 8003e44:	4b11      	ldr	r3, [pc, #68]	@ (8003e8c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	4a10      	ldr	r2, [pc, #64]	@ (8003e8c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8003e4c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e52:	2201      	movs	r2, #1
 8003e54:	409a      	lsls	r2, r3
 8003e56:	4b0d      	ldr	r3, [pc, #52]	@ (8003e8c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	4a0b      	ldr	r2, [pc, #44]	@ (8003e8c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8003e5e:	6013      	str	r3, [r2, #0]
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e64:	4613      	mov	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4a06      	ldr	r2, [pc, #24]	@ (8003e88 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003e6e:	441a      	add	r2, r3
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	3304      	adds	r3, #4
 8003e74:	4619      	mov	r1, r3
 8003e76:	4610      	mov	r0, r2
 8003e78:	f7fe fa25 	bl	80022c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e7c:	bf00      	nop
 8003e7e:	3720      	adds	r7, #32
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	200002e0 	.word	0x200002e0
 8003e88:	200002e4 	.word	0x200002e4
 8003e8c:	200003e8 	.word	0x200003e8

08003e90 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003e94:	4b07      	ldr	r3, [pc, #28]	@ (8003eb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d004      	beq.n	8003ea6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003e9c:	4b05      	ldr	r3, [pc, #20]	@ (8003eb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ea2:	3201      	adds	r2, #1
 8003ea4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8003ea6:	4b03      	ldr	r3, [pc, #12]	@ (8003eb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
	}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	200002e0 	.word	0x200002e0

08003eb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ec2:	4b29      	ldr	r3, [pc, #164]	@ (8003f68 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ec8:	4b28      	ldr	r3, [pc, #160]	@ (8003f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fe fa56 	bl	8002380 <uxListRemove>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10b      	bne.n	8003ef2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003eda:	4b24      	ldr	r3, [pc, #144]	@ (8003f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	43da      	mvns	r2, r3
 8003ee8:	4b21      	ldr	r3, [pc, #132]	@ (8003f70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4013      	ands	r3, r2
 8003eee:	4a20      	ldr	r2, [pc, #128]	@ (8003f70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ef0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef8:	d10a      	bne.n	8003f10 <prvAddCurrentTaskToDelayedList+0x58>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d007      	beq.n	8003f10 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f00:	4b1a      	ldr	r3, [pc, #104]	@ (8003f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3304      	adds	r3, #4
 8003f06:	4619      	mov	r1, r3
 8003f08:	481a      	ldr	r0, [pc, #104]	@ (8003f74 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003f0a:	f7fe f9dc 	bl	80022c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f0e:	e026      	b.n	8003f5e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4413      	add	r3, r2
 8003f16:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f18:	4b14      	ldr	r3, [pc, #80]	@ (8003f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d209      	bcs.n	8003f3c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f28:	4b13      	ldr	r3, [pc, #76]	@ (8003f78 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	3304      	adds	r3, #4
 8003f32:	4619      	mov	r1, r3
 8003f34:	4610      	mov	r0, r2
 8003f36:	f7fe f9ea 	bl	800230e <vListInsert>
}
 8003f3a:	e010      	b.n	8003f5e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f7c <prvAddCurrentTaskToDelayedList+0xc4>)
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	4b0a      	ldr	r3, [pc, #40]	@ (8003f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3304      	adds	r3, #4
 8003f46:	4619      	mov	r1, r3
 8003f48:	4610      	mov	r0, r2
 8003f4a:	f7fe f9e0 	bl	800230e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d202      	bcs.n	8003f5e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003f58:	4a09      	ldr	r2, [pc, #36]	@ (8003f80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	6013      	str	r3, [r2, #0]
}
 8003f5e:	bf00      	nop
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	200003e4 	.word	0x200003e4
 8003f6c:	200002e0 	.word	0x200002e0
 8003f70:	200003e8 	.word	0x200003e8
 8003f74:	200003cc 	.word	0x200003cc
 8003f78:	2000039c 	.word	0x2000039c
 8003f7c:	20000398 	.word	0x20000398
 8003f80:	20000400 	.word	0x20000400

08003f84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	3b04      	subs	r3, #4
 8003f94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	3b04      	subs	r3, #4
 8003fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f023 0201 	bic.w	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	3b04      	subs	r3, #4
 8003fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003fb4:	4a0c      	ldr	r2, [pc, #48]	@ (8003fe8 <pxPortInitialiseStack+0x64>)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	3b14      	subs	r3, #20
 8003fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	3b04      	subs	r3, #4
 8003fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f06f 0202 	mvn.w	r2, #2
 8003fd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	3b20      	subs	r3, #32
 8003fd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003fda:	68fb      	ldr	r3, [r7, #12]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	08003fed 	.word	0x08003fed

08003fec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ff6:	4b13      	ldr	r3, [pc, #76]	@ (8004044 <prvTaskExitError+0x58>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffe:	d00b      	beq.n	8004018 <prvTaskExitError+0x2c>
	__asm volatile
 8004000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	60fb      	str	r3, [r7, #12]
}
 8004012:	bf00      	nop
 8004014:	bf00      	nop
 8004016:	e7fd      	b.n	8004014 <prvTaskExitError+0x28>
	__asm volatile
 8004018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	60bb      	str	r3, [r7, #8]
}
 800402a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800402c:	bf00      	nop
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0fc      	beq.n	800402e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004034:	bf00      	nop
 8004036:	bf00      	nop
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	2000000c 	.word	0x2000000c
	...

08004050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004050:	4b07      	ldr	r3, [pc, #28]	@ (8004070 <pxCurrentTCBConst2>)
 8004052:	6819      	ldr	r1, [r3, #0]
 8004054:	6808      	ldr	r0, [r1, #0]
 8004056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405a:	f380 8809 	msr	PSP, r0
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f04f 0000 	mov.w	r0, #0
 8004066:	f380 8811 	msr	BASEPRI, r0
 800406a:	4770      	bx	lr
 800406c:	f3af 8000 	nop.w

08004070 <pxCurrentTCBConst2>:
 8004070:	200002e0 	.word	0x200002e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop

08004078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004078:	4808      	ldr	r0, [pc, #32]	@ (800409c <prvPortStartFirstTask+0x24>)
 800407a:	6800      	ldr	r0, [r0, #0]
 800407c:	6800      	ldr	r0, [r0, #0]
 800407e:	f380 8808 	msr	MSP, r0
 8004082:	f04f 0000 	mov.w	r0, #0
 8004086:	f380 8814 	msr	CONTROL, r0
 800408a:	b662      	cpsie	i
 800408c:	b661      	cpsie	f
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	df00      	svc	0
 8004098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800409a:	bf00      	nop
 800409c:	e000ed08 	.word	0xe000ed08

080040a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040a6:	4b47      	ldr	r3, [pc, #284]	@ (80041c4 <xPortStartScheduler+0x124>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a47      	ldr	r2, [pc, #284]	@ (80041c8 <xPortStartScheduler+0x128>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d10b      	bne.n	80040c8 <xPortStartScheduler+0x28>
	__asm volatile
 80040b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	613b      	str	r3, [r7, #16]
}
 80040c2:	bf00      	nop
 80040c4:	bf00      	nop
 80040c6:	e7fd      	b.n	80040c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80040c8:	4b3e      	ldr	r3, [pc, #248]	@ (80041c4 <xPortStartScheduler+0x124>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a3f      	ldr	r2, [pc, #252]	@ (80041cc <xPortStartScheduler+0x12c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d10b      	bne.n	80040ea <xPortStartScheduler+0x4a>
	__asm volatile
 80040d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d6:	f383 8811 	msr	BASEPRI, r3
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	60fb      	str	r3, [r7, #12]
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop
 80040e8:	e7fd      	b.n	80040e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80040ea:	4b39      	ldr	r3, [pc, #228]	@ (80041d0 <xPortStartScheduler+0x130>)
 80040ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	22ff      	movs	r2, #255	@ 0xff
 80040fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	b2db      	uxtb	r3, r3
 8004108:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800410c:	b2da      	uxtb	r2, r3
 800410e:	4b31      	ldr	r3, [pc, #196]	@ (80041d4 <xPortStartScheduler+0x134>)
 8004110:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004112:	4b31      	ldr	r3, [pc, #196]	@ (80041d8 <xPortStartScheduler+0x138>)
 8004114:	2207      	movs	r2, #7
 8004116:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004118:	e009      	b.n	800412e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800411a:	4b2f      	ldr	r3, [pc, #188]	@ (80041d8 <xPortStartScheduler+0x138>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3b01      	subs	r3, #1
 8004120:	4a2d      	ldr	r2, [pc, #180]	@ (80041d8 <xPortStartScheduler+0x138>)
 8004122:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004124:	78fb      	ldrb	r3, [r7, #3]
 8004126:	b2db      	uxtb	r3, r3
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	b2db      	uxtb	r3, r3
 800412c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800412e:	78fb      	ldrb	r3, [r7, #3]
 8004130:	b2db      	uxtb	r3, r3
 8004132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004136:	2b80      	cmp	r3, #128	@ 0x80
 8004138:	d0ef      	beq.n	800411a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800413a:	4b27      	ldr	r3, [pc, #156]	@ (80041d8 <xPortStartScheduler+0x138>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f1c3 0307 	rsb	r3, r3, #7
 8004142:	2b04      	cmp	r3, #4
 8004144:	d00b      	beq.n	800415e <xPortStartScheduler+0xbe>
	__asm volatile
 8004146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	60bb      	str	r3, [r7, #8]
}
 8004158:	bf00      	nop
 800415a:	bf00      	nop
 800415c:	e7fd      	b.n	800415a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800415e:	4b1e      	ldr	r3, [pc, #120]	@ (80041d8 <xPortStartScheduler+0x138>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	021b      	lsls	r3, r3, #8
 8004164:	4a1c      	ldr	r2, [pc, #112]	@ (80041d8 <xPortStartScheduler+0x138>)
 8004166:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004168:	4b1b      	ldr	r3, [pc, #108]	@ (80041d8 <xPortStartScheduler+0x138>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004170:	4a19      	ldr	r2, [pc, #100]	@ (80041d8 <xPortStartScheduler+0x138>)
 8004172:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	b2da      	uxtb	r2, r3
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800417c:	4b17      	ldr	r3, [pc, #92]	@ (80041dc <xPortStartScheduler+0x13c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a16      	ldr	r2, [pc, #88]	@ (80041dc <xPortStartScheduler+0x13c>)
 8004182:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004186:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004188:	4b14      	ldr	r3, [pc, #80]	@ (80041dc <xPortStartScheduler+0x13c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a13      	ldr	r2, [pc, #76]	@ (80041dc <xPortStartScheduler+0x13c>)
 800418e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004192:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004194:	f000 f8da 	bl	800434c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004198:	4b11      	ldr	r3, [pc, #68]	@ (80041e0 <xPortStartScheduler+0x140>)
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800419e:	f000 f8f9 	bl	8004394 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80041a2:	4b10      	ldr	r3, [pc, #64]	@ (80041e4 <xPortStartScheduler+0x144>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a0f      	ldr	r2, [pc, #60]	@ (80041e4 <xPortStartScheduler+0x144>)
 80041a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80041ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80041ae:	f7ff ff63 	bl	8004078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80041b2:	f7ff fa7f 	bl	80036b4 <vTaskSwitchContext>
	prvTaskExitError();
 80041b6:	f7ff ff19 	bl	8003fec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	e000ed00 	.word	0xe000ed00
 80041c8:	410fc271 	.word	0x410fc271
 80041cc:	410fc270 	.word	0x410fc270
 80041d0:	e000e400 	.word	0xe000e400
 80041d4:	2000040c 	.word	0x2000040c
 80041d8:	20000410 	.word	0x20000410
 80041dc:	e000ed20 	.word	0xe000ed20
 80041e0:	2000000c 	.word	0x2000000c
 80041e4:	e000ef34 	.word	0xe000ef34

080041e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
	__asm volatile
 80041ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	607b      	str	r3, [r7, #4]
}
 8004200:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004202:	4b10      	ldr	r3, [pc, #64]	@ (8004244 <vPortEnterCritical+0x5c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3301      	adds	r3, #1
 8004208:	4a0e      	ldr	r2, [pc, #56]	@ (8004244 <vPortEnterCritical+0x5c>)
 800420a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800420c:	4b0d      	ldr	r3, [pc, #52]	@ (8004244 <vPortEnterCritical+0x5c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d110      	bne.n	8004236 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004214:	4b0c      	ldr	r3, [pc, #48]	@ (8004248 <vPortEnterCritical+0x60>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00b      	beq.n	8004236 <vPortEnterCritical+0x4e>
	__asm volatile
 800421e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	603b      	str	r3, [r7, #0]
}
 8004230:	bf00      	nop
 8004232:	bf00      	nop
 8004234:	e7fd      	b.n	8004232 <vPortEnterCritical+0x4a>
	}
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	2000000c 	.word	0x2000000c
 8004248:	e000ed04 	.word	0xe000ed04

0800424c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004252:	4b12      	ldr	r3, [pc, #72]	@ (800429c <vPortExitCritical+0x50>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10b      	bne.n	8004272 <vPortExitCritical+0x26>
	__asm volatile
 800425a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	607b      	str	r3, [r7, #4]
}
 800426c:	bf00      	nop
 800426e:	bf00      	nop
 8004270:	e7fd      	b.n	800426e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004272:	4b0a      	ldr	r3, [pc, #40]	@ (800429c <vPortExitCritical+0x50>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3b01      	subs	r3, #1
 8004278:	4a08      	ldr	r2, [pc, #32]	@ (800429c <vPortExitCritical+0x50>)
 800427a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800427c:	4b07      	ldr	r3, [pc, #28]	@ (800429c <vPortExitCritical+0x50>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d105      	bne.n	8004290 <vPortExitCritical+0x44>
 8004284:	2300      	movs	r3, #0
 8004286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	f383 8811 	msr	BASEPRI, r3
}
 800428e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	2000000c 	.word	0x2000000c

080042a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80042a0:	f3ef 8009 	mrs	r0, PSP
 80042a4:	f3bf 8f6f 	isb	sy
 80042a8:	4b15      	ldr	r3, [pc, #84]	@ (8004300 <pxCurrentTCBConst>)
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	f01e 0f10 	tst.w	lr, #16
 80042b0:	bf08      	it	eq
 80042b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80042b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ba:	6010      	str	r0, [r2, #0]
 80042bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80042c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80042c4:	f380 8811 	msr	BASEPRI, r0
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f7ff f9f0 	bl	80036b4 <vTaskSwitchContext>
 80042d4:	f04f 0000 	mov.w	r0, #0
 80042d8:	f380 8811 	msr	BASEPRI, r0
 80042dc:	bc09      	pop	{r0, r3}
 80042de:	6819      	ldr	r1, [r3, #0]
 80042e0:	6808      	ldr	r0, [r1, #0]
 80042e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042e6:	f01e 0f10 	tst.w	lr, #16
 80042ea:	bf08      	it	eq
 80042ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80042f0:	f380 8809 	msr	PSP, r0
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	f3af 8000 	nop.w

08004300 <pxCurrentTCBConst>:
 8004300:	200002e0 	.word	0x200002e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004304:	bf00      	nop
 8004306:	bf00      	nop

08004308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
	__asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	607b      	str	r3, [r7, #4]
}
 8004320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004322:	f7ff f90d 	bl	8003540 <xTaskIncrementTick>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800432c:	4b06      	ldr	r3, [pc, #24]	@ (8004348 <SysTick_Handler+0x40>)
 800432e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	2300      	movs	r3, #0
 8004336:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	f383 8811 	msr	BASEPRI, r3
}
 800433e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004340:	bf00      	nop
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	e000ed04 	.word	0xe000ed04

0800434c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004350:	4b0b      	ldr	r3, [pc, #44]	@ (8004380 <vPortSetupTimerInterrupt+0x34>)
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004356:	4b0b      	ldr	r3, [pc, #44]	@ (8004384 <vPortSetupTimerInterrupt+0x38>)
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800435c:	4b0a      	ldr	r3, [pc, #40]	@ (8004388 <vPortSetupTimerInterrupt+0x3c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a0a      	ldr	r2, [pc, #40]	@ (800438c <vPortSetupTimerInterrupt+0x40>)
 8004362:	fba2 2303 	umull	r2, r3, r2, r3
 8004366:	099b      	lsrs	r3, r3, #6
 8004368:	4a09      	ldr	r2, [pc, #36]	@ (8004390 <vPortSetupTimerInterrupt+0x44>)
 800436a:	3b01      	subs	r3, #1
 800436c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800436e:	4b04      	ldr	r3, [pc, #16]	@ (8004380 <vPortSetupTimerInterrupt+0x34>)
 8004370:	2207      	movs	r2, #7
 8004372:	601a      	str	r2, [r3, #0]
}
 8004374:	bf00      	nop
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	e000e010 	.word	0xe000e010
 8004384:	e000e018 	.word	0xe000e018
 8004388:	20000000 	.word	0x20000000
 800438c:	10624dd3 	.word	0x10624dd3
 8004390:	e000e014 	.word	0xe000e014

08004394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004394:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80043a4 <vPortEnableVFP+0x10>
 8004398:	6801      	ldr	r1, [r0, #0]
 800439a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800439e:	6001      	str	r1, [r0, #0]
 80043a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80043a2:	bf00      	nop
 80043a4:	e000ed88 	.word	0xe000ed88

080043a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80043ae:	f3ef 8305 	mrs	r3, IPSR
 80043b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b0f      	cmp	r3, #15
 80043b8:	d915      	bls.n	80043e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80043ba:	4a18      	ldr	r2, [pc, #96]	@ (800441c <vPortValidateInterruptPriority+0x74>)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4413      	add	r3, r2
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80043c4:	4b16      	ldr	r3, [pc, #88]	@ (8004420 <vPortValidateInterruptPriority+0x78>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	7afa      	ldrb	r2, [r7, #11]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d20b      	bcs.n	80043e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80043ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	607b      	str	r3, [r7, #4]
}
 80043e0:	bf00      	nop
 80043e2:	bf00      	nop
 80043e4:	e7fd      	b.n	80043e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80043e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004424 <vPortValidateInterruptPriority+0x7c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80043ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004428 <vPortValidateInterruptPriority+0x80>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d90b      	bls.n	800440e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	603b      	str	r3, [r7, #0]
}
 8004408:	bf00      	nop
 800440a:	bf00      	nop
 800440c:	e7fd      	b.n	800440a <vPortValidateInterruptPriority+0x62>
	}
 800440e:	bf00      	nop
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	e000e3f0 	.word	0xe000e3f0
 8004420:	2000040c 	.word	0x2000040c
 8004424:	e000ed0c 	.word	0xe000ed0c
 8004428:	20000410 	.word	0x20000410

0800442c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08a      	sub	sp, #40	@ 0x28
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004434:	2300      	movs	r3, #0
 8004436:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004438:	f7fe ffd6 	bl	80033e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800443c:	4b5c      	ldr	r3, [pc, #368]	@ (80045b0 <pvPortMalloc+0x184>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004444:	f000 f924 	bl	8004690 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004448:	4b5a      	ldr	r3, [pc, #360]	@ (80045b4 <pvPortMalloc+0x188>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4013      	ands	r3, r2
 8004450:	2b00      	cmp	r3, #0
 8004452:	f040 8095 	bne.w	8004580 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d01e      	beq.n	800449a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800445c:	2208      	movs	r2, #8
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4413      	add	r3, r2
 8004462:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	2b00      	cmp	r3, #0
 800446c:	d015      	beq.n	800449a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f023 0307 	bic.w	r3, r3, #7
 8004474:	3308      	adds	r3, #8
 8004476:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00b      	beq.n	800449a <pvPortMalloc+0x6e>
	__asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	617b      	str	r3, [r7, #20]
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop
 8004498:	e7fd      	b.n	8004496 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d06f      	beq.n	8004580 <pvPortMalloc+0x154>
 80044a0:	4b45      	ldr	r3, [pc, #276]	@ (80045b8 <pvPortMalloc+0x18c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d86a      	bhi.n	8004580 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80044aa:	4b44      	ldr	r3, [pc, #272]	@ (80045bc <pvPortMalloc+0x190>)
 80044ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80044ae:	4b43      	ldr	r3, [pc, #268]	@ (80045bc <pvPortMalloc+0x190>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044b4:	e004      	b.n	80044c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80044b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80044ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d903      	bls.n	80044d2 <pvPortMalloc+0xa6>
 80044ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f1      	bne.n	80044b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80044d2:	4b37      	ldr	r3, [pc, #220]	@ (80045b0 <pvPortMalloc+0x184>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044d8:	429a      	cmp	r2, r3
 80044da:	d051      	beq.n	8004580 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2208      	movs	r2, #8
 80044e2:	4413      	add	r3, r2
 80044e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	1ad2      	subs	r2, r2, r3
 80044f6:	2308      	movs	r3, #8
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d920      	bls.n	8004540 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4413      	add	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00b      	beq.n	8004528 <pvPortMalloc+0xfc>
	__asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	613b      	str	r3, [r7, #16]
}
 8004522:	bf00      	nop
 8004524:	bf00      	nop
 8004526:	e7fd      	b.n	8004524 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	1ad2      	subs	r2, r2, r3
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800453a:	69b8      	ldr	r0, [r7, #24]
 800453c:	f000 f90a 	bl	8004754 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004540:	4b1d      	ldr	r3, [pc, #116]	@ (80045b8 <pvPortMalloc+0x18c>)
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	4a1b      	ldr	r2, [pc, #108]	@ (80045b8 <pvPortMalloc+0x18c>)
 800454c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800454e:	4b1a      	ldr	r3, [pc, #104]	@ (80045b8 <pvPortMalloc+0x18c>)
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4b1b      	ldr	r3, [pc, #108]	@ (80045c0 <pvPortMalloc+0x194>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d203      	bcs.n	8004562 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800455a:	4b17      	ldr	r3, [pc, #92]	@ (80045b8 <pvPortMalloc+0x18c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a18      	ldr	r2, [pc, #96]	@ (80045c0 <pvPortMalloc+0x194>)
 8004560:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	4b13      	ldr	r3, [pc, #76]	@ (80045b4 <pvPortMalloc+0x188>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	431a      	orrs	r2, r3
 800456c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004576:	4b13      	ldr	r3, [pc, #76]	@ (80045c4 <pvPortMalloc+0x198>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3301      	adds	r3, #1
 800457c:	4a11      	ldr	r2, [pc, #68]	@ (80045c4 <pvPortMalloc+0x198>)
 800457e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004580:	f7fe ff40 	bl	8003404 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00b      	beq.n	80045a6 <pvPortMalloc+0x17a>
	__asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	60fb      	str	r3, [r7, #12]
}
 80045a0:	bf00      	nop
 80045a2:	bf00      	nop
 80045a4:	e7fd      	b.n	80045a2 <pvPortMalloc+0x176>
	return pvReturn;
 80045a6:	69fb      	ldr	r3, [r7, #28]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3728      	adds	r7, #40	@ 0x28
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	2000401c 	.word	0x2000401c
 80045b4:	20004030 	.word	0x20004030
 80045b8:	20004020 	.word	0x20004020
 80045bc:	20004014 	.word	0x20004014
 80045c0:	20004024 	.word	0x20004024
 80045c4:	20004028 	.word	0x20004028

080045c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d04f      	beq.n	800467a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80045da:	2308      	movs	r3, #8
 80045dc:	425b      	negs	r3, r3
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	4413      	add	r3, r2
 80045e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	4b25      	ldr	r3, [pc, #148]	@ (8004684 <vPortFree+0xbc>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4013      	ands	r3, r2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10b      	bne.n	800460e <vPortFree+0x46>
	__asm volatile
 80045f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	60fb      	str	r3, [r7, #12]
}
 8004608:	bf00      	nop
 800460a:	bf00      	nop
 800460c:	e7fd      	b.n	800460a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00b      	beq.n	800462e <vPortFree+0x66>
	__asm volatile
 8004616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	60bb      	str	r3, [r7, #8]
}
 8004628:	bf00      	nop
 800462a:	bf00      	nop
 800462c:	e7fd      	b.n	800462a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	4b14      	ldr	r3, [pc, #80]	@ (8004684 <vPortFree+0xbc>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4013      	ands	r3, r2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d01e      	beq.n	800467a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d11a      	bne.n	800467a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	4b0e      	ldr	r3, [pc, #56]	@ (8004684 <vPortFree+0xbc>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	43db      	mvns	r3, r3
 800464e:	401a      	ands	r2, r3
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004654:	f7fe fec8 	bl	80033e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	4b0a      	ldr	r3, [pc, #40]	@ (8004688 <vPortFree+0xc0>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4413      	add	r3, r2
 8004662:	4a09      	ldr	r2, [pc, #36]	@ (8004688 <vPortFree+0xc0>)
 8004664:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004666:	6938      	ldr	r0, [r7, #16]
 8004668:	f000 f874 	bl	8004754 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800466c:	4b07      	ldr	r3, [pc, #28]	@ (800468c <vPortFree+0xc4>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3301      	adds	r3, #1
 8004672:	4a06      	ldr	r2, [pc, #24]	@ (800468c <vPortFree+0xc4>)
 8004674:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004676:	f7fe fec5 	bl	8003404 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800467a:	bf00      	nop
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20004030 	.word	0x20004030
 8004688:	20004020 	.word	0x20004020
 800468c:	2000402c 	.word	0x2000402c

08004690 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004696:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800469a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800469c:	4b27      	ldr	r3, [pc, #156]	@ (800473c <prvHeapInit+0xac>)
 800469e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00c      	beq.n	80046c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3307      	adds	r3, #7
 80046ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 0307 	bic.w	r3, r3, #7
 80046b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	4a1f      	ldr	r2, [pc, #124]	@ (800473c <prvHeapInit+0xac>)
 80046c0:	4413      	add	r3, r2
 80046c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80046c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004740 <prvHeapInit+0xb0>)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80046ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004740 <prvHeapInit+0xb0>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	4413      	add	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80046dc:	2208      	movs	r2, #8
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	1a9b      	subs	r3, r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0307 	bic.w	r3, r3, #7
 80046ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4a15      	ldr	r2, [pc, #84]	@ (8004744 <prvHeapInit+0xb4>)
 80046f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80046f2:	4b14      	ldr	r3, [pc, #80]	@ (8004744 <prvHeapInit+0xb4>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2200      	movs	r2, #0
 80046f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80046fa:	4b12      	ldr	r3, [pc, #72]	@ (8004744 <prvHeapInit+0xb4>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	1ad2      	subs	r2, r2, r3
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004710:	4b0c      	ldr	r3, [pc, #48]	@ (8004744 <prvHeapInit+0xb4>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	4a0a      	ldr	r2, [pc, #40]	@ (8004748 <prvHeapInit+0xb8>)
 800471e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	4a09      	ldr	r2, [pc, #36]	@ (800474c <prvHeapInit+0xbc>)
 8004726:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004728:	4b09      	ldr	r3, [pc, #36]	@ (8004750 <prvHeapInit+0xc0>)
 800472a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800472e:	601a      	str	r2, [r3, #0]
}
 8004730:	bf00      	nop
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	20000414 	.word	0x20000414
 8004740:	20004014 	.word	0x20004014
 8004744:	2000401c 	.word	0x2000401c
 8004748:	20004024 	.word	0x20004024
 800474c:	20004020 	.word	0x20004020
 8004750:	20004030 	.word	0x20004030

08004754 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800475c:	4b28      	ldr	r3, [pc, #160]	@ (8004800 <prvInsertBlockIntoFreeList+0xac>)
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	e002      	b.n	8004768 <prvInsertBlockIntoFreeList+0x14>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	429a      	cmp	r2, r3
 8004770:	d8f7      	bhi.n	8004762 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	4413      	add	r3, r2
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	429a      	cmp	r2, r3
 8004782:	d108      	bne.n	8004796 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	441a      	add	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	441a      	add	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d118      	bne.n	80047dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	4b15      	ldr	r3, [pc, #84]	@ (8004804 <prvInsertBlockIntoFreeList+0xb0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d00d      	beq.n	80047d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	441a      	add	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	e008      	b.n	80047e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80047d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004804 <prvInsertBlockIntoFreeList+0xb0>)
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	e003      	b.n	80047e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d002      	beq.n	80047f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047f2:	bf00      	nop
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	20004014 	.word	0x20004014
 8004804:	2000401c 	.word	0x2000401c

08004808 <memset>:
 8004808:	4402      	add	r2, r0
 800480a:	4603      	mov	r3, r0
 800480c:	4293      	cmp	r3, r2
 800480e:	d100      	bne.n	8004812 <memset+0xa>
 8004810:	4770      	bx	lr
 8004812:	f803 1b01 	strb.w	r1, [r3], #1
 8004816:	e7f9      	b.n	800480c <memset+0x4>

08004818 <__libc_init_array>:
 8004818:	b570      	push	{r4, r5, r6, lr}
 800481a:	4d0d      	ldr	r5, [pc, #52]	@ (8004850 <__libc_init_array+0x38>)
 800481c:	4c0d      	ldr	r4, [pc, #52]	@ (8004854 <__libc_init_array+0x3c>)
 800481e:	1b64      	subs	r4, r4, r5
 8004820:	10a4      	asrs	r4, r4, #2
 8004822:	2600      	movs	r6, #0
 8004824:	42a6      	cmp	r6, r4
 8004826:	d109      	bne.n	800483c <__libc_init_array+0x24>
 8004828:	4d0b      	ldr	r5, [pc, #44]	@ (8004858 <__libc_init_array+0x40>)
 800482a:	4c0c      	ldr	r4, [pc, #48]	@ (800485c <__libc_init_array+0x44>)
 800482c:	f000 f826 	bl	800487c <_init>
 8004830:	1b64      	subs	r4, r4, r5
 8004832:	10a4      	asrs	r4, r4, #2
 8004834:	2600      	movs	r6, #0
 8004836:	42a6      	cmp	r6, r4
 8004838:	d105      	bne.n	8004846 <__libc_init_array+0x2e>
 800483a:	bd70      	pop	{r4, r5, r6, pc}
 800483c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004840:	4798      	blx	r3
 8004842:	3601      	adds	r6, #1
 8004844:	e7ee      	b.n	8004824 <__libc_init_array+0xc>
 8004846:	f855 3b04 	ldr.w	r3, [r5], #4
 800484a:	4798      	blx	r3
 800484c:	3601      	adds	r6, #1
 800484e:	e7f2      	b.n	8004836 <__libc_init_array+0x1e>
 8004850:	08004914 	.word	0x08004914
 8004854:	08004914 	.word	0x08004914
 8004858:	08004914 	.word	0x08004914
 800485c:	08004918 	.word	0x08004918

08004860 <memcpy>:
 8004860:	440a      	add	r2, r1
 8004862:	4291      	cmp	r1, r2
 8004864:	f100 33ff 	add.w	r3, r0, #4294967295
 8004868:	d100      	bne.n	800486c <memcpy+0xc>
 800486a:	4770      	bx	lr
 800486c:	b510      	push	{r4, lr}
 800486e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004872:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004876:	4291      	cmp	r1, r2
 8004878:	d1f9      	bne.n	800486e <memcpy+0xe>
 800487a:	bd10      	pop	{r4, pc}

0800487c <_init>:
 800487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487e:	bf00      	nop
 8004880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004882:	bc08      	pop	{r3}
 8004884:	469e      	mov	lr, r3
 8004886:	4770      	bx	lr

08004888 <_fini>:
 8004888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488a:	bf00      	nop
 800488c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800488e:	bc08      	pop	{r3}
 8004890:	469e      	mov	lr, r3
 8004892:	4770      	bx	lr
