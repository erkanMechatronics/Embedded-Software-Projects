
STM32_HAL_EXTI3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c08  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007d90  08007d90  00017d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dac  08007dac  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007dac  08007dac  00017dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007db4  08007db4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007db4  08007db4  00017db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007db8  08007db8  00017db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000810  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008a0  200008a0  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015ae4  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003746  00000000  00000000  00035ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001120  00000000  00000000  000392f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fb0  00000000  00000000  0003a410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000236a5  00000000  00000000  0003b3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001727c  00000000  00000000  0005ea65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb54e  00000000  00000000  00075ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014122f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004900  00000000  00000000  00141280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007d78 	.word	0x08007d78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007d78 	.word	0x08007d78

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0))
 80004d6:	2101      	movs	r1, #1
 80004d8:	481b      	ldr	r0, [pc, #108]	; (8000548 <HAL_GPIO_EXTI_Callback+0x7c>)
 80004da:	f000 ff93 	bl	8001404 <HAL_GPIO_ReadPin>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d027      	beq.n	8000534 <HAL_GPIO_EXTI_Callback+0x68>
	{
		if(i == 0)
 80004e4:	4b19      	ldr	r3, [pc, #100]	; (800054c <HAL_GPIO_EXTI_Callback+0x80>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d10f      	bne.n	800050c <HAL_GPIO_EXTI_Callback+0x40>
		{
			count = 500;
 80004ec:	4b18      	ldr	r3, [pc, #96]	; (8000550 <HAL_GPIO_EXTI_Callback+0x84>)
 80004ee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80004f2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,1);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fa:	4816      	ldr	r0, [pc, #88]	; (8000554 <HAL_GPIO_EXTI_Callback+0x88>)
 80004fc:	f000 ff9a 	bl	8001434 <HAL_GPIO_WritePin>
			i++;
 8000500:	4b12      	ldr	r3, [pc, #72]	; (800054c <HAL_GPIO_EXTI_Callback+0x80>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	3301      	adds	r3, #1
 8000506:	4a11      	ldr	r2, [pc, #68]	; (800054c <HAL_GPIO_EXTI_Callback+0x80>)
 8000508:	6013      	str	r3, [r2, #0]
	}
	else
	{
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,0);
	}
}
 800050a:	e019      	b.n	8000540 <HAL_GPIO_EXTI_Callback+0x74>
		else if(i == 1)
 800050c:	4b0f      	ldr	r3, [pc, #60]	; (800054c <HAL_GPIO_EXTI_Callback+0x80>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d115      	bne.n	8000540 <HAL_GPIO_EXTI_Callback+0x74>
			count = 1000;
 8000514:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <HAL_GPIO_EXTI_Callback+0x84>)
 8000516:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800051a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,1);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000522:	480c      	ldr	r0, [pc, #48]	; (8000554 <HAL_GPIO_EXTI_Callback+0x88>)
 8000524:	f000 ff86 	bl	8001434 <HAL_GPIO_WritePin>
			i--;
 8000528:	4b08      	ldr	r3, [pc, #32]	; (800054c <HAL_GPIO_EXTI_Callback+0x80>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	3b01      	subs	r3, #1
 800052e:	4a07      	ldr	r2, [pc, #28]	; (800054c <HAL_GPIO_EXTI_Callback+0x80>)
 8000530:	6013      	str	r3, [r2, #0]
}
 8000532:	e005      	b.n	8000540 <HAL_GPIO_EXTI_Callback+0x74>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,0);
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053a:	4806      	ldr	r0, [pc, #24]	; (8000554 <HAL_GPIO_EXTI_Callback+0x88>)
 800053c:	f000 ff7a 	bl	8001434 <HAL_GPIO_WritePin>
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40020000 	.word	0x40020000
 800054c:	200001a4 	.word	0x200001a4
 8000550:	200001a0 	.word	0x200001a0
 8000554:	40020c00 	.word	0x40020c00

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055c:	f000 fc0e 	bl	8000d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000560:	f000 f81c 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000564:	f000 f918 	bl	8000798 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000568:	f000 f882 	bl	8000670 <MX_I2C1_Init>
  MX_I2S3_Init();
 800056c:	f000 f8ae 	bl	80006cc <MX_I2S3_Init>
  MX_SPI1_Init();
 8000570:	f000 f8dc 	bl	800072c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000574:	f006 ffb8 	bl	80074e8 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000578:	f006 ffdc 	bl	8007534 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 800057c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000580:	4804      	ldr	r0, [pc, #16]	; (8000594 <main+0x3c>)
 8000582:	f000 ff70 	bl	8001466 <HAL_GPIO_TogglePin>
    HAL_Delay(count);
 8000586:	4b04      	ldr	r3, [pc, #16]	; (8000598 <main+0x40>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4618      	mov	r0, r3
 800058c:	f000 fc68 	bl	8000e60 <HAL_Delay>
    MX_USB_HOST_Process();
 8000590:	e7f2      	b.n	8000578 <main+0x20>
 8000592:	bf00      	nop
 8000594:	40020c00 	.word	0x40020c00
 8000598:	200001a0 	.word	0x200001a0

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	; 0x50
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	2230      	movs	r2, #48	; 0x30
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f007 fade 	bl	8007b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	2300      	movs	r3, #0
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	4b28      	ldr	r3, [pc, #160]	; (8000668 <SystemClock_Config+0xcc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	4a27      	ldr	r2, [pc, #156]	; (8000668 <SystemClock_Config+0xcc>)
 80005ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ce:	6413      	str	r3, [r2, #64]	; 0x40
 80005d0:	4b25      	ldr	r3, [pc, #148]	; (8000668 <SystemClock_Config+0xcc>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	4b22      	ldr	r3, [pc, #136]	; (800066c <SystemClock_Config+0xd0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a21      	ldr	r2, [pc, #132]	; (800066c <SystemClock_Config+0xd0>)
 80005e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b1f      	ldr	r3, [pc, #124]	; (800066c <SystemClock_Config+0xd0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000602:	2302      	movs	r3, #2
 8000604:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000606:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800060c:	2308      	movs	r3, #8
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000610:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000614:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800061a:	2307      	movs	r3, #7
 800061c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	4618      	mov	r0, r3
 8000624:	f003 f940 	bl	80038a8 <HAL_RCC_OscConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800062e:	f000 f9b9 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000632:	230f      	movs	r3, #15
 8000634:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000636:	2302      	movs	r3, #2
 8000638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000642:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000648:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	2105      	movs	r1, #5
 8000650:	4618      	mov	r0, r3
 8000652:	f003 fba1 	bl	8003d98 <HAL_RCC_ClockConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800065c:	f000 f9a2 	bl	80009a4 <Error_Handler>
  }
}
 8000660:	bf00      	nop
 8000662:	3750      	adds	r7, #80	; 0x50
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <MX_I2C1_Init+0x50>)
 8000676:	4a13      	ldr	r2, [pc, #76]	; (80006c4 <MX_I2C1_Init+0x54>)
 8000678:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_I2C1_Init+0x50>)
 800067c:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <MX_I2C1_Init+0x58>)
 800067e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_I2C1_Init+0x50>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_I2C1_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <MX_I2C1_Init+0x50>)
 800068e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000692:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <MX_I2C1_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_I2C1_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <MX_I2C1_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_I2C1_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <MX_I2C1_Init+0x50>)
 80006ae:	f002 fb17 	bl	8002ce0 <HAL_I2C_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b8:	f000 f974 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	200000ac 	.word	0x200000ac
 80006c4:	40005400 	.word	0x40005400
 80006c8:	000186a0 	.word	0x000186a0

080006cc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_I2S3_Init+0x54>)
 80006d2:	4a14      	ldr	r2, [pc, #80]	; (8000724 <MX_I2S3_Init+0x58>)
 80006d4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_I2S3_Init+0x54>)
 80006d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006dc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_I2S3_Init+0x54>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006e4:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_I2S3_Init+0x54>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006ea:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <MX_I2S3_Init+0x54>)
 80006ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_I2S3_Init+0x54>)
 80006f4:	4a0c      	ldr	r2, [pc, #48]	; (8000728 <MX_I2S3_Init+0x5c>)
 80006f6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_I2S3_Init+0x54>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_I2S3_Init+0x54>)
 8000700:	2200      	movs	r2, #0
 8000702:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_I2S3_Init+0x54>)
 8000706:	2200      	movs	r2, #0
 8000708:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_I2S3_Init+0x54>)
 800070c:	f002 fc2c 	bl	8002f68 <HAL_I2S_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000716:	f000 f945 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000100 	.word	0x20000100
 8000724:	40003c00 	.word	0x40003c00
 8000728:	00017700 	.word	0x00017700

0800072c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_SPI1_Init+0x64>)
 8000732:	4a18      	ldr	r2, [pc, #96]	; (8000794 <MX_SPI1_Init+0x68>)
 8000734:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000736:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_SPI1_Init+0x64>)
 8000738:	f44f 7282 	mov.w	r2, #260	; 0x104
 800073c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_SPI1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_SPI1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_SPI1_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_SPI1_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_SPI1_Init+0x64>)
 8000758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800075c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_SPI1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <MX_SPI1_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_SPI1_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <MX_SPI1_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_SPI1_Init+0x64>)
 8000778:	220a      	movs	r2, #10
 800077a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_SPI1_Init+0x64>)
 800077e:	f003 fe57 	bl	8004430 <HAL_SPI_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000788:	f000 f90c 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000148 	.word	0x20000148
 8000794:	40013000 	.word	0x40013000

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08c      	sub	sp, #48	; 0x30
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
 80007b2:	4b76      	ldr	r3, [pc, #472]	; (800098c <MX_GPIO_Init+0x1f4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a75      	ldr	r2, [pc, #468]	; (800098c <MX_GPIO_Init+0x1f4>)
 80007b8:	f043 0310 	orr.w	r3, r3, #16
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b73      	ldr	r3, [pc, #460]	; (800098c <MX_GPIO_Init+0x1f4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0310 	and.w	r3, r3, #16
 80007c6:	61bb      	str	r3, [r7, #24]
 80007c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	4b6f      	ldr	r3, [pc, #444]	; (800098c <MX_GPIO_Init+0x1f4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a6e      	ldr	r2, [pc, #440]	; (800098c <MX_GPIO_Init+0x1f4>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b6c      	ldr	r3, [pc, #432]	; (800098c <MX_GPIO_Init+0x1f4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b68      	ldr	r3, [pc, #416]	; (800098c <MX_GPIO_Init+0x1f4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a67      	ldr	r2, [pc, #412]	; (800098c <MX_GPIO_Init+0x1f4>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b65      	ldr	r3, [pc, #404]	; (800098c <MX_GPIO_Init+0x1f4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b61      	ldr	r3, [pc, #388]	; (800098c <MX_GPIO_Init+0x1f4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a60      	ldr	r2, [pc, #384]	; (800098c <MX_GPIO_Init+0x1f4>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b5e      	ldr	r3, [pc, #376]	; (800098c <MX_GPIO_Init+0x1f4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b5a      	ldr	r3, [pc, #360]	; (800098c <MX_GPIO_Init+0x1f4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a59      	ldr	r2, [pc, #356]	; (800098c <MX_GPIO_Init+0x1f4>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b57      	ldr	r3, [pc, #348]	; (800098c <MX_GPIO_Init+0x1f4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b53      	ldr	r3, [pc, #332]	; (800098c <MX_GPIO_Init+0x1f4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a52      	ldr	r2, [pc, #328]	; (800098c <MX_GPIO_Init+0x1f4>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b50      	ldr	r3, [pc, #320]	; (800098c <MX_GPIO_Init+0x1f4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2108      	movs	r1, #8
 800085a:	484d      	ldr	r0, [pc, #308]	; (8000990 <MX_GPIO_Init+0x1f8>)
 800085c:	f000 fdea 	bl	8001434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000860:	2201      	movs	r2, #1
 8000862:	2101      	movs	r1, #1
 8000864:	484b      	ldr	r0, [pc, #300]	; (8000994 <MX_GPIO_Init+0x1fc>)
 8000866:	f000 fde5 	bl	8001434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800086a:	2200      	movs	r2, #0
 800086c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000870:	4849      	ldr	r0, [pc, #292]	; (8000998 <MX_GPIO_Init+0x200>)
 8000872:	f000 fddf 	bl	8001434 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000876:	2308      	movs	r3, #8
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	4840      	ldr	r0, [pc, #256]	; (8000990 <MX_GPIO_Init+0x1f8>)
 800088e:	f000 fc1d 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000892:	2301      	movs	r3, #1
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	483a      	ldr	r0, [pc, #232]	; (8000994 <MX_GPIO_Init+0x1fc>)
 80008aa:	f000 fc0f 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008ae:	2308      	movs	r3, #8
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008be:	2305      	movs	r3, #5
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4832      	ldr	r0, [pc, #200]	; (8000994 <MX_GPIO_Init+0x1fc>)
 80008ca:	f000 fbff 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008d2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008d8:	2302      	movs	r3, #2
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	482e      	ldr	r0, [pc, #184]	; (800099c <MX_GPIO_Init+0x204>)
 80008e4:	f000 fbf2 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008e8:	2304      	movs	r3, #4
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4829      	ldr	r0, [pc, #164]	; (80009a0 <MX_GPIO_Init+0x208>)
 80008fc:	f000 fbe6 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000912:	2305      	movs	r3, #5
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4820      	ldr	r0, [pc, #128]	; (80009a0 <MX_GPIO_Init+0x208>)
 800091e:	f000 fbd5 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000922:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000926:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4817      	ldr	r0, [pc, #92]	; (8000998 <MX_GPIO_Init+0x200>)
 800093c:	f000 fbc6 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000940:	2320      	movs	r3, #32
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4811      	ldr	r0, [pc, #68]	; (8000998 <MX_GPIO_Init+0x200>)
 8000954:	f000 fbba 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000958:	2302      	movs	r3, #2
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800095c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4808      	ldr	r0, [pc, #32]	; (8000990 <MX_GPIO_Init+0x1f8>)
 800096e:	f000 fbad 	bl	80010cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	2006      	movs	r0, #6
 8000978:	f000 fb71 	bl	800105e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800097c:	2006      	movs	r0, #6
 800097e:	f000 fb8a 	bl	8001096 <HAL_NVIC_EnableIRQ>

}
 8000982:	bf00      	nop
 8000984:	3730      	adds	r7, #48	; 0x30
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800
 8000990:	40021000 	.word	0x40021000
 8000994:	40020800 	.word	0x40020800
 8000998:	40020c00 	.word	0x40020c00
 800099c:	40020000 	.word	0x40020000
 80009a0:	40020400 	.word	0x40020400

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	e7fe      	b.n	80009ac <Error_Handler+0x8>
	...

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <HAL_MspInit+0x4c>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	4a0f      	ldr	r2, [pc, #60]	; (80009fc <HAL_MspInit+0x4c>)
 80009c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c4:	6453      	str	r3, [r2, #68]	; 0x44
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <HAL_MspInit+0x4c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <HAL_MspInit+0x4c>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	4a08      	ldr	r2, [pc, #32]	; (80009fc <HAL_MspInit+0x4c>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e0:	6413      	str	r3, [r2, #64]	; 0x40
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_MspInit+0x4c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ee:	2007      	movs	r0, #7
 80009f0:	f000 fb2a 	bl	8001048 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800

08000a00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	; 0x28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a19      	ldr	r2, [pc, #100]	; (8000a84 <HAL_I2C_MspInit+0x84>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d12c      	bne.n	8000a7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <HAL_I2C_MspInit+0x88>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a17      	ldr	r2, [pc, #92]	; (8000a88 <HAL_I2C_MspInit+0x88>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <HAL_I2C_MspInit+0x88>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a3e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a44:	2312      	movs	r3, #18
 8000a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a50:	2304      	movs	r3, #4
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480c      	ldr	r0, [pc, #48]	; (8000a8c <HAL_I2C_MspInit+0x8c>)
 8000a5c:	f000 fb36 	bl	80010cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <HAL_I2C_MspInit+0x88>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	4a07      	ldr	r2, [pc, #28]	; (8000a88 <HAL_I2C_MspInit+0x88>)
 8000a6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <HAL_I2C_MspInit+0x88>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a7c:	bf00      	nop
 8000a7e:	3728      	adds	r7, #40	; 0x28
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40005400 	.word	0x40005400
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020400 	.word	0x40020400

08000a90 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08e      	sub	sp, #56	; 0x38
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a31      	ldr	r2, [pc, #196]	; (8000b80 <HAL_I2S_MspInit+0xf0>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d15a      	bne.n	8000b76 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ac4:	23c0      	movs	r3, #192	; 0xc0
 8000ac6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f003 fb6d 	bl	80041b0 <HAL_RCCEx_PeriphCLKConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000adc:	f7ff ff62 	bl	80009a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <HAL_I2S_MspInit+0xf4>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	4a26      	ldr	r2, [pc, #152]	; (8000b84 <HAL_I2S_MspInit+0xf4>)
 8000aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aee:	6413      	str	r3, [r2, #64]	; 0x40
 8000af0:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <HAL_I2S_MspInit+0xf4>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <HAL_I2S_MspInit+0xf4>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	4a1f      	ldr	r2, [pc, #124]	; (8000b84 <HAL_I2S_MspInit+0xf4>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <HAL_I2S_MspInit+0xf4>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <HAL_I2S_MspInit+0xf4>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	4a18      	ldr	r2, [pc, #96]	; (8000b84 <HAL_I2S_MspInit+0xf4>)
 8000b22:	f043 0304 	orr.w	r3, r3, #4
 8000b26:	6313      	str	r3, [r2, #48]	; 0x30
 8000b28:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <HAL_I2S_MspInit+0xf4>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	f003 0304 	and.w	r3, r3, #4
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b34:	2310      	movs	r3, #16
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b44:	2306      	movs	r3, #6
 8000b46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480e      	ldr	r0, [pc, #56]	; (8000b88 <HAL_I2S_MspInit+0xf8>)
 8000b50:	f000 fabc 	bl	80010cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b54:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b66:	2306      	movs	r3, #6
 8000b68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4806      	ldr	r0, [pc, #24]	; (8000b8c <HAL_I2S_MspInit+0xfc>)
 8000b72:	f000 faab 	bl	80010cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b76:	bf00      	nop
 8000b78:	3738      	adds	r7, #56	; 0x38
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40003c00 	.word	0x40003c00
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020000 	.word	0x40020000
 8000b8c:	40020800 	.word	0x40020800

08000b90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <HAL_SPI_MspInit+0x84>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d12b      	bne.n	8000c0a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_SPI_MspInit+0x88>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <HAL_SPI_MspInit+0x88>)
 8000bbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_SPI_MspInit+0x88>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <HAL_SPI_MspInit+0x88>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <HAL_SPI_MspInit+0x88>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_SPI_MspInit+0x88>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bea:	23e0      	movs	r3, #224	; 0xe0
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bfa:	2305      	movs	r3, #5
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <HAL_SPI_MspInit+0x8c>)
 8000c06:	f000 fa61 	bl	80010cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	; 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40013000 	.word	0x40013000
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6c:	f000 f8d8 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f000 fc0f 	bl	800149c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <OTG_FS_IRQHandler+0x10>)
 8000c8a:	f000 fe89 	bl	80019a0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	2000058c 	.word	0x2000058c

08000c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca0:	4a14      	ldr	r2, [pc, #80]	; (8000cf4 <_sbrk+0x5c>)
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <_sbrk+0x60>)
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <_sbrk+0x64>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <_sbrk+0x68>)
 8000cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d207      	bcs.n	8000cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc8:	f006 ff16 	bl	8007af8 <__errno>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	220c      	movs	r2, #12
 8000cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd6:	e009      	b.n	8000cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cde:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <_sbrk+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <_sbrk+0x64>)
 8000ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cea:	68fb      	ldr	r3, [r7, #12]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20020000 	.word	0x20020000
 8000cf8:	00000400 	.word	0x00000400
 8000cfc:	200001a8 	.word	0x200001a8
 8000d00:	200008a0 	.word	0x200008a0

08000d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <SystemInit+0x20>)
 8000d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0e:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <SystemInit+0x20>)
 8000d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d2e:	490e      	ldr	r1, [pc, #56]	; (8000d68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d30:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d44:	4c0b      	ldr	r4, [pc, #44]	; (8000d74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d52:	f7ff ffd7 	bl	8000d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d56:	f006 fed5 	bl	8007b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5a:	f7ff fbfd 	bl	8000558 <main>
  bx  lr    
 8000d5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d68:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000d6c:	08007dbc 	.word	0x08007dbc
  ldr r2, =_sbss
 8000d70:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000d74:	200008a0 	.word	0x200008a0

08000d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC_IRQHandler>
	...

08000d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <HAL_Init+0x40>)
 8000d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <HAL_Init+0x40>)
 8000d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <HAL_Init+0x40>)
 8000d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 f94f 	bl	8001048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000daa:	2000      	movs	r0, #0
 8000dac:	f000 f808 	bl	8000dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db0:	f7ff fdfe 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40023c00 	.word	0x40023c00

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_InitTick+0x54>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_InitTick+0x58>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f967 	bl	80010b2 <HAL_SYSTICK_Config>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00e      	b.n	8000e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d80a      	bhi.n	8000e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f000 f92f 	bl	800105e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e00:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <HAL_InitTick+0x5c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e000      	b.n	8000e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000000 	.word	0x20000000
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	20000004 	.word	0x20000004

08000e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008
 8000e44:	200001ac 	.word	0x200001ac

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	200001ac 	.word	0x200001ac

08000e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff ffee 	bl	8000e48 <HAL_GetTick>
 8000e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e78:	d005      	beq.n	8000e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_Delay+0x44>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e86:	bf00      	nop
 8000e88:	f7ff ffde 	bl	8000e48 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8f7      	bhi.n	8000e88 <HAL_Delay+0x28>
  {
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	db0b      	blt.n	8000f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f003 021f 	and.w	r2, r3, #31
 8000f24:	4907      	ldr	r1, [pc, #28]	; (8000f44 <__NVIC_EnableIRQ+0x38>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	095b      	lsrs	r3, r3, #5
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000e100 	.word	0xe000e100

08000f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db0a      	blt.n	8000f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	490c      	ldr	r1, [pc, #48]	; (8000f94 <__NVIC_SetPriority+0x4c>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f70:	e00a      	b.n	8000f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4908      	ldr	r1, [pc, #32]	; (8000f98 <__NVIC_SetPriority+0x50>)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	3b04      	subs	r3, #4
 8000f80:	0112      	lsls	r2, r2, #4
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	761a      	strb	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f1c3 0307 	rsb	r3, r3, #7
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf28      	it	cs
 8000fba:	2304      	movcs	r3, #4
 8000fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d902      	bls.n	8000fcc <NVIC_EncodePriority+0x30>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	e000      	b.n	8000fce <NVIC_EncodePriority+0x32>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	4313      	orrs	r3, r2
         );
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3724      	adds	r7, #36	; 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001014:	d301      	bcc.n	800101a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001016:	2301      	movs	r3, #1
 8001018:	e00f      	b.n	800103a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <SysTick_Config+0x40>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001022:	210f      	movs	r1, #15
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f7ff ff8e 	bl	8000f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <SysTick_Config+0x40>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <SysTick_Config+0x40>)
 8001034:	2207      	movs	r2, #7
 8001036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	e000e010 	.word	0xe000e010

08001048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ff29 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001070:	f7ff ff3e 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 8001074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	68b9      	ldr	r1, [r7, #8]
 800107a:	6978      	ldr	r0, [r7, #20]
 800107c:	f7ff ff8e 	bl	8000f9c <NVIC_EncodePriority>
 8001080:	4602      	mov	r2, r0
 8001082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff5d 	bl	8000f48 <__NVIC_SetPriority>
}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff31 	bl	8000f0c <__NVIC_EnableIRQ>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ffa2 	bl	8001004 <SysTick_Config>
 80010c0:	4603      	mov	r3, r0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
 80010e6:	e16b      	b.n	80013c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010e8:	2201      	movs	r2, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	429a      	cmp	r2, r3
 8001102:	f040 815a 	bne.w	80013ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	2b01      	cmp	r3, #1
 8001110:	d005      	beq.n	800111e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800111a:	2b02      	cmp	r3, #2
 800111c:	d130      	bne.n	8001180 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	2203      	movs	r2, #3
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	68da      	ldr	r2, [r3, #12]
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001154:	2201      	movs	r2, #1
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	091b      	lsrs	r3, r3, #4
 800116a:	f003 0201 	and.w	r2, r3, #1
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b03      	cmp	r3, #3
 800118a:	d017      	beq.n	80011bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d123      	bne.n	8001210 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	08da      	lsrs	r2, r3, #3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3208      	adds	r2, #8
 80011d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	f003 0307 	and.w	r3, r3, #7
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	220f      	movs	r2, #15
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	691a      	ldr	r2, [r3, #16]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	08da      	lsrs	r2, r3, #3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3208      	adds	r2, #8
 800120a:	69b9      	ldr	r1, [r7, #24]
 800120c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0203 	and.w	r2, r3, #3
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 80b4 	beq.w	80013ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b60      	ldr	r3, [pc, #384]	; (80013d8 <HAL_GPIO_Init+0x30c>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a5f      	ldr	r2, [pc, #380]	; (80013d8 <HAL_GPIO_Init+0x30c>)
 800125c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
 8001262:	4b5d      	ldr	r3, [pc, #372]	; (80013d8 <HAL_GPIO_Init+0x30c>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800126e:	4a5b      	ldr	r2, [pc, #364]	; (80013dc <HAL_GPIO_Init+0x310>)
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	3302      	adds	r3, #2
 8001276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	220f      	movs	r2, #15
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a52      	ldr	r2, [pc, #328]	; (80013e0 <HAL_GPIO_Init+0x314>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d02b      	beq.n	80012f2 <HAL_GPIO_Init+0x226>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a51      	ldr	r2, [pc, #324]	; (80013e4 <HAL_GPIO_Init+0x318>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d025      	beq.n	80012ee <HAL_GPIO_Init+0x222>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a50      	ldr	r2, [pc, #320]	; (80013e8 <HAL_GPIO_Init+0x31c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d01f      	beq.n	80012ea <HAL_GPIO_Init+0x21e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4f      	ldr	r2, [pc, #316]	; (80013ec <HAL_GPIO_Init+0x320>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d019      	beq.n	80012e6 <HAL_GPIO_Init+0x21a>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4e      	ldr	r2, [pc, #312]	; (80013f0 <HAL_GPIO_Init+0x324>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0x216>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4d      	ldr	r2, [pc, #308]	; (80013f4 <HAL_GPIO_Init+0x328>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d00d      	beq.n	80012de <HAL_GPIO_Init+0x212>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4c      	ldr	r2, [pc, #304]	; (80013f8 <HAL_GPIO_Init+0x32c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d007      	beq.n	80012da <HAL_GPIO_Init+0x20e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4b      	ldr	r2, [pc, #300]	; (80013fc <HAL_GPIO_Init+0x330>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d101      	bne.n	80012d6 <HAL_GPIO_Init+0x20a>
 80012d2:	2307      	movs	r3, #7
 80012d4:	e00e      	b.n	80012f4 <HAL_GPIO_Init+0x228>
 80012d6:	2308      	movs	r3, #8
 80012d8:	e00c      	b.n	80012f4 <HAL_GPIO_Init+0x228>
 80012da:	2306      	movs	r3, #6
 80012dc:	e00a      	b.n	80012f4 <HAL_GPIO_Init+0x228>
 80012de:	2305      	movs	r3, #5
 80012e0:	e008      	b.n	80012f4 <HAL_GPIO_Init+0x228>
 80012e2:	2304      	movs	r3, #4
 80012e4:	e006      	b.n	80012f4 <HAL_GPIO_Init+0x228>
 80012e6:	2303      	movs	r3, #3
 80012e8:	e004      	b.n	80012f4 <HAL_GPIO_Init+0x228>
 80012ea:	2302      	movs	r3, #2
 80012ec:	e002      	b.n	80012f4 <HAL_GPIO_Init+0x228>
 80012ee:	2301      	movs	r3, #1
 80012f0:	e000      	b.n	80012f4 <HAL_GPIO_Init+0x228>
 80012f2:	2300      	movs	r3, #0
 80012f4:	69fa      	ldr	r2, [r7, #28]
 80012f6:	f002 0203 	and.w	r2, r2, #3
 80012fa:	0092      	lsls	r2, r2, #2
 80012fc:	4093      	lsls	r3, r2
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001304:	4935      	ldr	r1, [pc, #212]	; (80013dc <HAL_GPIO_Init+0x310>)
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	089b      	lsrs	r3, r3, #2
 800130a:	3302      	adds	r3, #2
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001312:	4b3b      	ldr	r3, [pc, #236]	; (8001400 <HAL_GPIO_Init+0x334>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001336:	4a32      	ldr	r2, [pc, #200]	; (8001400 <HAL_GPIO_Init+0x334>)
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800133c:	4b30      	ldr	r3, [pc, #192]	; (8001400 <HAL_GPIO_Init+0x334>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001360:	4a27      	ldr	r2, [pc, #156]	; (8001400 <HAL_GPIO_Init+0x334>)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001366:	4b26      	ldr	r3, [pc, #152]	; (8001400 <HAL_GPIO_Init+0x334>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800138a:	4a1d      	ldr	r2, [pc, #116]	; (8001400 <HAL_GPIO_Init+0x334>)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001390:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <HAL_GPIO_Init+0x334>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013b4:	4a12      	ldr	r2, [pc, #72]	; (8001400 <HAL_GPIO_Init+0x334>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3301      	adds	r3, #1
 80013be:	61fb      	str	r3, [r7, #28]
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	2b0f      	cmp	r3, #15
 80013c4:	f67f ae90 	bls.w	80010e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3724      	adds	r7, #36	; 0x24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40013800 	.word	0x40013800
 80013e0:	40020000 	.word	0x40020000
 80013e4:	40020400 	.word	0x40020400
 80013e8:	40020800 	.word	0x40020800
 80013ec:	40020c00 	.word	0x40020c00
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40021400 	.word	0x40021400
 80013f8:	40021800 	.word	0x40021800
 80013fc:	40021c00 	.word	0x40021c00
 8001400:	40013c00 	.word	0x40013c00

08001404 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691a      	ldr	r2, [r3, #16]
 8001414:	887b      	ldrh	r3, [r7, #2]
 8001416:	4013      	ands	r3, r2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d002      	beq.n	8001422 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800141c:	2301      	movs	r3, #1
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	e001      	b.n	8001426 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001426:	7bfb      	ldrb	r3, [r7, #15]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
 8001440:	4613      	mov	r3, r2
 8001442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001444:	787b      	ldrb	r3, [r7, #1]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001450:	e003      	b.n	800145a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001452:	887b      	ldrh	r3, [r7, #2]
 8001454:	041a      	lsls	r2, r3, #16
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	619a      	str	r2, [r3, #24]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001466:	b480      	push	{r7}
 8001468:	b085      	sub	sp, #20
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	460b      	mov	r3, r1
 8001470:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001478:	887a      	ldrh	r2, [r7, #2]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4013      	ands	r3, r2
 800147e:	041a      	lsls	r2, r3, #16
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	43d9      	mvns	r1, r3
 8001484:	887b      	ldrh	r3, [r7, #2]
 8001486:	400b      	ands	r3, r1
 8001488:	431a      	orrs	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	619a      	str	r2, [r3, #24]
}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014a8:	695a      	ldr	r2, [r3, #20]
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	4013      	ands	r3, r2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d006      	beq.n	80014c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014b2:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f806 	bl	80004cc <HAL_GPIO_EXTI_Callback>
  }
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40013c00 	.word	0x40013c00

080014cc <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ce:	b08f      	sub	sp, #60	; 0x3c
 80014d0:	af0a      	add	r7, sp, #40	; 0x28
 80014d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e054      	b.n	8001588 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d106      	bne.n	80014fe <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f006 f853 	bl	80075a4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2203      	movs	r2, #3
 8001502:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800150a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150e:	2b00      	cmp	r3, #0
 8001510:	d102      	bne.n	8001518 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f003 f882 	bl	8004626 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	687e      	ldr	r6, [r7, #4]
 800152a:	466d      	mov	r5, sp
 800152c:	f106 0410 	add.w	r4, r6, #16
 8001530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001532:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001538:	e894 0003 	ldmia.w	r4, {r0, r1}
 800153c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001540:	1d33      	adds	r3, r6, #4
 8001542:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001544:	6838      	ldr	r0, [r7, #0]
 8001546:	f002 fffc 	bl	8004542 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2101      	movs	r1, #1
 8001550:	4618      	mov	r0, r3
 8001552:	f003 f879 	bl	8004648 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	687e      	ldr	r6, [r7, #4]
 800155e:	466d      	mov	r5, sp
 8001560:	f106 0410 	add.w	r4, r6, #16
 8001564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800156a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800156c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001570:	e885 0003 	stmia.w	r5, {r0, r1}
 8001574:	1d33      	adds	r3, r6, #4
 8001576:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001578:	6838      	ldr	r0, [r7, #0]
 800157a:	f003 fa01 	bl	8004980 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001590 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b089      	sub	sp, #36	; 0x24
 8001594:	af04      	add	r7, sp, #16
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	4608      	mov	r0, r1
 800159a:	4611      	mov	r1, r2
 800159c:	461a      	mov	r2, r3
 800159e:	4603      	mov	r3, r0
 80015a0:	70fb      	strb	r3, [r7, #3]
 80015a2:	460b      	mov	r3, r1
 80015a4:	70bb      	strb	r3, [r7, #2]
 80015a6:	4613      	mov	r3, r2
 80015a8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d101      	bne.n	80015b8 <HAL_HCD_HC_Init+0x28>
 80015b4:	2302      	movs	r3, #2
 80015b6:	e076      	b.n	80016a6 <HAL_HCD_HC_Init+0x116>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80015c0:	78fb      	ldrb	r3, [r7, #3]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	212c      	movs	r1, #44	; 0x2c
 80015c6:	fb01 f303 	mul.w	r3, r1, r3
 80015ca:	4413      	add	r3, r2
 80015cc:	333d      	adds	r3, #61	; 0x3d
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015d2:	78fb      	ldrb	r3, [r7, #3]
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	212c      	movs	r1, #44	; 0x2c
 80015d8:	fb01 f303 	mul.w	r3, r1, r3
 80015dc:	4413      	add	r3, r2
 80015de:	3338      	adds	r3, #56	; 0x38
 80015e0:	787a      	ldrb	r2, [r7, #1]
 80015e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	212c      	movs	r1, #44	; 0x2c
 80015ea:	fb01 f303 	mul.w	r3, r1, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	3340      	adds	r3, #64	; 0x40
 80015f2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015f4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015f6:	78fb      	ldrb	r3, [r7, #3]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	212c      	movs	r1, #44	; 0x2c
 80015fc:	fb01 f303 	mul.w	r3, r1, r3
 8001600:	4413      	add	r3, r2
 8001602:	3339      	adds	r3, #57	; 0x39
 8001604:	78fa      	ldrb	r2, [r7, #3]
 8001606:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	212c      	movs	r1, #44	; 0x2c
 800160e:	fb01 f303 	mul.w	r3, r1, r3
 8001612:	4413      	add	r3, r2
 8001614:	333f      	adds	r3, #63	; 0x3f
 8001616:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800161a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800161c:	78fb      	ldrb	r3, [r7, #3]
 800161e:	78ba      	ldrb	r2, [r7, #2]
 8001620:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001624:	b2d0      	uxtb	r0, r2
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	212c      	movs	r1, #44	; 0x2c
 800162a:	fb01 f303 	mul.w	r3, r1, r3
 800162e:	4413      	add	r3, r2
 8001630:	333a      	adds	r3, #58	; 0x3a
 8001632:	4602      	mov	r2, r0
 8001634:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001636:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800163a:	2b00      	cmp	r3, #0
 800163c:	da09      	bge.n	8001652 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800163e:	78fb      	ldrb	r3, [r7, #3]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	212c      	movs	r1, #44	; 0x2c
 8001644:	fb01 f303 	mul.w	r3, r1, r3
 8001648:	4413      	add	r3, r2
 800164a:	333b      	adds	r3, #59	; 0x3b
 800164c:	2201      	movs	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]
 8001650:	e008      	b.n	8001664 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001652:	78fb      	ldrb	r3, [r7, #3]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	212c      	movs	r1, #44	; 0x2c
 8001658:	fb01 f303 	mul.w	r3, r1, r3
 800165c:	4413      	add	r3, r2
 800165e:	333b      	adds	r3, #59	; 0x3b
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	212c      	movs	r1, #44	; 0x2c
 800166a:	fb01 f303 	mul.w	r3, r1, r3
 800166e:	4413      	add	r3, r2
 8001670:	333c      	adds	r3, #60	; 0x3c
 8001672:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001676:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	787c      	ldrb	r4, [r7, #1]
 800167e:	78ba      	ldrb	r2, [r7, #2]
 8001680:	78f9      	ldrb	r1, [r7, #3]
 8001682:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001684:	9302      	str	r3, [sp, #8]
 8001686:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	4623      	mov	r3, r4
 8001694:	f003 fafa 	bl	8004c8c <USB_HC_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd90      	pop	{r4, r7, pc}

080016ae <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b084      	sub	sp, #16
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	460b      	mov	r3, r1
 80016b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d101      	bne.n	80016cc <HAL_HCD_HC_Halt+0x1e>
 80016c8:	2302      	movs	r3, #2
 80016ca:	e00f      	b.n	80016ec <HAL_HCD_HC_Halt+0x3e>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	78fa      	ldrb	r2, [r7, #3]
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f003 fd4a 	bl	8005176 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	4608      	mov	r0, r1
 80016fe:	4611      	mov	r1, r2
 8001700:	461a      	mov	r2, r3
 8001702:	4603      	mov	r3, r0
 8001704:	70fb      	strb	r3, [r7, #3]
 8001706:	460b      	mov	r3, r1
 8001708:	70bb      	strb	r3, [r7, #2]
 800170a:	4613      	mov	r3, r2
 800170c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	212c      	movs	r1, #44	; 0x2c
 8001714:	fb01 f303 	mul.w	r3, r1, r3
 8001718:	4413      	add	r3, r2
 800171a:	333b      	adds	r3, #59	; 0x3b
 800171c:	78ba      	ldrb	r2, [r7, #2]
 800171e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	212c      	movs	r1, #44	; 0x2c
 8001726:	fb01 f303 	mul.w	r3, r1, r3
 800172a:	4413      	add	r3, r2
 800172c:	333f      	adds	r3, #63	; 0x3f
 800172e:	787a      	ldrb	r2, [r7, #1]
 8001730:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001732:	7c3b      	ldrb	r3, [r7, #16]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d112      	bne.n	800175e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001738:	78fb      	ldrb	r3, [r7, #3]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	212c      	movs	r1, #44	; 0x2c
 800173e:	fb01 f303 	mul.w	r3, r1, r3
 8001742:	4413      	add	r3, r2
 8001744:	3342      	adds	r3, #66	; 0x42
 8001746:	2203      	movs	r2, #3
 8001748:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	212c      	movs	r1, #44	; 0x2c
 8001750:	fb01 f303 	mul.w	r3, r1, r3
 8001754:	4413      	add	r3, r2
 8001756:	333d      	adds	r3, #61	; 0x3d
 8001758:	7f3a      	ldrb	r2, [r7, #28]
 800175a:	701a      	strb	r2, [r3, #0]
 800175c:	e008      	b.n	8001770 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	212c      	movs	r1, #44	; 0x2c
 8001764:	fb01 f303 	mul.w	r3, r1, r3
 8001768:	4413      	add	r3, r2
 800176a:	3342      	adds	r3, #66	; 0x42
 800176c:	2202      	movs	r2, #2
 800176e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001770:	787b      	ldrb	r3, [r7, #1]
 8001772:	2b03      	cmp	r3, #3
 8001774:	f200 80c6 	bhi.w	8001904 <HAL_HCD_HC_SubmitRequest+0x210>
 8001778:	a201      	add	r2, pc, #4	; (adr r2, 8001780 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800177a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177e:	bf00      	nop
 8001780:	08001791 	.word	0x08001791
 8001784:	080018f1 	.word	0x080018f1
 8001788:	080017f5 	.word	0x080017f5
 800178c:	08001873 	.word	0x08001873
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001790:	7c3b      	ldrb	r3, [r7, #16]
 8001792:	2b01      	cmp	r3, #1
 8001794:	f040 80b8 	bne.w	8001908 <HAL_HCD_HC_SubmitRequest+0x214>
 8001798:	78bb      	ldrb	r3, [r7, #2]
 800179a:	2b00      	cmp	r3, #0
 800179c:	f040 80b4 	bne.w	8001908 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80017a0:	8b3b      	ldrh	r3, [r7, #24]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d108      	bne.n	80017b8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80017a6:	78fb      	ldrb	r3, [r7, #3]
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	212c      	movs	r1, #44	; 0x2c
 80017ac:	fb01 f303 	mul.w	r3, r1, r3
 80017b0:	4413      	add	r3, r2
 80017b2:	3355      	adds	r3, #85	; 0x55
 80017b4:	2201      	movs	r2, #1
 80017b6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	212c      	movs	r1, #44	; 0x2c
 80017be:	fb01 f303 	mul.w	r3, r1, r3
 80017c2:	4413      	add	r3, r2
 80017c4:	3355      	adds	r3, #85	; 0x55
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d109      	bne.n	80017e0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017cc:	78fb      	ldrb	r3, [r7, #3]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	212c      	movs	r1, #44	; 0x2c
 80017d2:	fb01 f303 	mul.w	r3, r1, r3
 80017d6:	4413      	add	r3, r2
 80017d8:	3342      	adds	r3, #66	; 0x42
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017de:	e093      	b.n	8001908 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017e0:	78fb      	ldrb	r3, [r7, #3]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	212c      	movs	r1, #44	; 0x2c
 80017e6:	fb01 f303 	mul.w	r3, r1, r3
 80017ea:	4413      	add	r3, r2
 80017ec:	3342      	adds	r3, #66	; 0x42
 80017ee:	2202      	movs	r2, #2
 80017f0:	701a      	strb	r2, [r3, #0]
      break;
 80017f2:	e089      	b.n	8001908 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80017f4:	78bb      	ldrb	r3, [r7, #2]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d11d      	bne.n	8001836 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	212c      	movs	r1, #44	; 0x2c
 8001800:	fb01 f303 	mul.w	r3, r1, r3
 8001804:	4413      	add	r3, r2
 8001806:	3355      	adds	r3, #85	; 0x55
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	212c      	movs	r1, #44	; 0x2c
 8001814:	fb01 f303 	mul.w	r3, r1, r3
 8001818:	4413      	add	r3, r2
 800181a:	3342      	adds	r3, #66	; 0x42
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001820:	e073      	b.n	800190a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001822:	78fb      	ldrb	r3, [r7, #3]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	212c      	movs	r1, #44	; 0x2c
 8001828:	fb01 f303 	mul.w	r3, r1, r3
 800182c:	4413      	add	r3, r2
 800182e:	3342      	adds	r3, #66	; 0x42
 8001830:	2202      	movs	r2, #2
 8001832:	701a      	strb	r2, [r3, #0]
      break;
 8001834:	e069      	b.n	800190a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	212c      	movs	r1, #44	; 0x2c
 800183c:	fb01 f303 	mul.w	r3, r1, r3
 8001840:	4413      	add	r3, r2
 8001842:	3354      	adds	r3, #84	; 0x54
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d109      	bne.n	800185e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	212c      	movs	r1, #44	; 0x2c
 8001850:	fb01 f303 	mul.w	r3, r1, r3
 8001854:	4413      	add	r3, r2
 8001856:	3342      	adds	r3, #66	; 0x42
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
      break;
 800185c:	e055      	b.n	800190a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	212c      	movs	r1, #44	; 0x2c
 8001864:	fb01 f303 	mul.w	r3, r1, r3
 8001868:	4413      	add	r3, r2
 800186a:	3342      	adds	r3, #66	; 0x42
 800186c:	2202      	movs	r2, #2
 800186e:	701a      	strb	r2, [r3, #0]
      break;
 8001870:	e04b      	b.n	800190a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001872:	78bb      	ldrb	r3, [r7, #2]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d11d      	bne.n	80018b4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	212c      	movs	r1, #44	; 0x2c
 800187e:	fb01 f303 	mul.w	r3, r1, r3
 8001882:	4413      	add	r3, r2
 8001884:	3355      	adds	r3, #85	; 0x55
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d109      	bne.n	80018a0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	212c      	movs	r1, #44	; 0x2c
 8001892:	fb01 f303 	mul.w	r3, r1, r3
 8001896:	4413      	add	r3, r2
 8001898:	3342      	adds	r3, #66	; 0x42
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800189e:	e034      	b.n	800190a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	212c      	movs	r1, #44	; 0x2c
 80018a6:	fb01 f303 	mul.w	r3, r1, r3
 80018aa:	4413      	add	r3, r2
 80018ac:	3342      	adds	r3, #66	; 0x42
 80018ae:	2202      	movs	r2, #2
 80018b0:	701a      	strb	r2, [r3, #0]
      break;
 80018b2:	e02a      	b.n	800190a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	212c      	movs	r1, #44	; 0x2c
 80018ba:	fb01 f303 	mul.w	r3, r1, r3
 80018be:	4413      	add	r3, r2
 80018c0:	3354      	adds	r3, #84	; 0x54
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d109      	bne.n	80018dc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	212c      	movs	r1, #44	; 0x2c
 80018ce:	fb01 f303 	mul.w	r3, r1, r3
 80018d2:	4413      	add	r3, r2
 80018d4:	3342      	adds	r3, #66	; 0x42
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
      break;
 80018da:	e016      	b.n	800190a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	212c      	movs	r1, #44	; 0x2c
 80018e2:	fb01 f303 	mul.w	r3, r1, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	3342      	adds	r3, #66	; 0x42
 80018ea:	2202      	movs	r2, #2
 80018ec:	701a      	strb	r2, [r3, #0]
      break;
 80018ee:	e00c      	b.n	800190a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	212c      	movs	r1, #44	; 0x2c
 80018f6:	fb01 f303 	mul.w	r3, r1, r3
 80018fa:	4413      	add	r3, r2
 80018fc:	3342      	adds	r3, #66	; 0x42
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
      break;
 8001902:	e002      	b.n	800190a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001904:	bf00      	nop
 8001906:	e000      	b.n	800190a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001908:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800190a:	78fb      	ldrb	r3, [r7, #3]
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	212c      	movs	r1, #44	; 0x2c
 8001910:	fb01 f303 	mul.w	r3, r1, r3
 8001914:	4413      	add	r3, r2
 8001916:	3344      	adds	r3, #68	; 0x44
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800191c:	78fb      	ldrb	r3, [r7, #3]
 800191e:	8b3a      	ldrh	r2, [r7, #24]
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	202c      	movs	r0, #44	; 0x2c
 8001924:	fb00 f303 	mul.w	r3, r0, r3
 8001928:	440b      	add	r3, r1
 800192a:	334c      	adds	r3, #76	; 0x4c
 800192c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800192e:	78fb      	ldrb	r3, [r7, #3]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	212c      	movs	r1, #44	; 0x2c
 8001934:	fb01 f303 	mul.w	r3, r1, r3
 8001938:	4413      	add	r3, r2
 800193a:	3360      	adds	r3, #96	; 0x60
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	212c      	movs	r1, #44	; 0x2c
 8001946:	fb01 f303 	mul.w	r3, r1, r3
 800194a:	4413      	add	r3, r2
 800194c:	3350      	adds	r3, #80	; 0x50
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	212c      	movs	r1, #44	; 0x2c
 8001958:	fb01 f303 	mul.w	r3, r1, r3
 800195c:	4413      	add	r3, r2
 800195e:	3339      	adds	r3, #57	; 0x39
 8001960:	78fa      	ldrb	r2, [r7, #3]
 8001962:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	212c      	movs	r1, #44	; 0x2c
 800196a:	fb01 f303 	mul.w	r3, r1, r3
 800196e:	4413      	add	r3, r2
 8001970:	3361      	adds	r3, #97	; 0x61
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6818      	ldr	r0, [r3, #0]
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	222c      	movs	r2, #44	; 0x2c
 800197e:	fb02 f303 	mul.w	r3, r2, r3
 8001982:	3338      	adds	r3, #56	; 0x38
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	18d1      	adds	r1, r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	461a      	mov	r2, r3
 8001990:	f003 fa9e 	bl	8004ed0 <USB_HC_StartXfer>
 8001994:	4603      	mov	r3, r0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop

080019a0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f002 ff9f 	bl	80048fa <USB_GetMode>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b01      	cmp	r3, #1
 80019c0:	f040 80f6 	bne.w	8001bb0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f002 ff83 	bl	80048d4 <USB_ReadInterrupts>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 80ec 	beq.w	8001bae <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f002 ff7a 	bl	80048d4 <USB_ReadInterrupts>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019ea:	d104      	bne.n	80019f6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f002 ff6a 	bl	80048d4 <USB_ReadInterrupts>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a0a:	d104      	bne.n	8001a16 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 ff5a 	bl	80048d4 <USB_ReadInterrupts>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a2a:	d104      	bne.n	8001a36 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f002 ff4a 	bl	80048d4 <USB_ReadInterrupts>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d103      	bne.n	8001a52 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f002 ff3c 	bl	80048d4 <USB_ReadInterrupts>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a66:	d11c      	bne.n	8001aa2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a70:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10f      	bne.n	8001aa2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001a82:	2110      	movs	r1, #16
 8001a84:	6938      	ldr	r0, [r7, #16]
 8001a86:	f002 fe2b 	bl	80046e0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001a8a:	6938      	ldr	r0, [r7, #16]
 8001a8c:	f002 fe5c 	bl	8004748 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2101      	movs	r1, #1
 8001a96:	4618      	mov	r0, r3
 8001a98:	f003 f832 	bl	8004b00 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f005 fdff 	bl	80076a0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f002 ff14 	bl	80048d4 <USB_ReadInterrupts>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ab2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab6:	d102      	bne.n	8001abe <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f001 f89e 	bl	8002bfa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f002 ff06 	bl	80048d4 <USB_ReadInterrupts>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d106      	bne.n	8001ae0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f005 fdc8 	bl	8007668 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2208      	movs	r2, #8
 8001ade:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f002 fef5 	bl	80048d4 <USB_ReadInterrupts>
 8001aea:	4603      	mov	r3, r0
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b10      	cmp	r3, #16
 8001af2:	d101      	bne.n	8001af8 <HAL_HCD_IRQHandler+0x158>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <HAL_HCD_IRQHandler+0x15a>
 8001af8:	2300      	movs	r3, #0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d012      	beq.n	8001b24 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	699a      	ldr	r2, [r3, #24]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0210 	bic.w	r2, r2, #16
 8001b0c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 ffa1 	bl	8002a56 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	699a      	ldr	r2, [r3, #24]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0210 	orr.w	r2, r2, #16
 8001b22:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f002 fed3 	bl	80048d4 <USB_ReadInterrupts>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b38:	d13a      	bne.n	8001bb0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f003 fb08 	bl	8005154 <USB_HC_ReadInterrupt>
 8001b44:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	e025      	b.n	8001b98 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	fa22 f303 	lsr.w	r3, r2, r3
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d018      	beq.n	8001b92 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	015a      	lsls	r2, r3, #5
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b76:	d106      	bne.n	8001b86 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f8ab 	bl	8001cda <HCD_HC_IN_IRQHandler>
 8001b84:	e005      	b.n	8001b92 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 fbf9 	bl	8002384 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	3301      	adds	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d3d4      	bcc.n	8001b4c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001baa:	615a      	str	r2, [r3, #20]
 8001bac:	e000      	b.n	8001bb0 <HAL_HCD_IRQHandler+0x210>
      return;
 8001bae:	bf00      	nop
    }
  }
}
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_HCD_Start+0x16>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e013      	b.n	8001bf4 <HAL_HCD_Start+0x3e>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2101      	movs	r1, #1
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f002 fff4 	bl	8004bc8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f002 fd0d 	bl	8004604 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d101      	bne.n	8001c12 <HAL_HCD_Stop+0x16>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e00d      	b.n	8001c2e <HAL_HCD_Stop+0x32>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f003 fbe2 	bl	80053e8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f002 ff96 	bl	8004b74 <USB_ResetPort>
 8001c48:	4603      	mov	r3, r0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c5e:	78fb      	ldrb	r3, [r7, #3]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	212c      	movs	r1, #44	; 0x2c
 8001c64:	fb01 f303 	mul.w	r3, r1, r3
 8001c68:	4413      	add	r3, r2
 8001c6a:	3360      	adds	r3, #96	; 0x60
 8001c6c:	781b      	ldrb	r3, [r3, #0]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	460b      	mov	r3, r1
 8001c84:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	212c      	movs	r1, #44	; 0x2c
 8001c8c:	fb01 f303 	mul.w	r3, r1, r3
 8001c90:	4413      	add	r3, r2
 8001c92:	3350      	adds	r3, #80	; 0x50
 8001c94:	681b      	ldr	r3, [r3, #0]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f002 ffda 	bl	8004c68 <USB_GetCurrentFrame>
 8001cb4:	4603      	mov	r3, r0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f002 ffb5 	bl	8004c3a <USB_GetHostSpeed>
 8001cd0:	4603      	mov	r3, r0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b086      	sub	sp, #24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	015a      	lsls	r2, r3, #5
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d11a      	bne.n	8001d40 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	015a      	lsls	r2, r3, #5
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4413      	add	r3, r2
 8001d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d16:	461a      	mov	r2, r3
 8001d18:	2304      	movs	r3, #4
 8001d1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	212c      	movs	r1, #44	; 0x2c
 8001d22:	fb01 f303 	mul.w	r3, r1, r3
 8001d26:	4413      	add	r3, r2
 8001d28:	3361      	adds	r3, #97	; 0x61
 8001d2a:	2206      	movs	r2, #6
 8001d2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	4611      	mov	r1, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f003 fa1c 	bl	8005176 <USB_HC_Halt>
 8001d3e:	e0af      	b.n	8001ea0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	015a      	lsls	r2, r3, #5
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4413      	add	r3, r2
 8001d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d56:	d11b      	bne.n	8001d90 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	015a      	lsls	r2, r3, #5
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4413      	add	r3, r2
 8001d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d64:	461a      	mov	r2, r3
 8001d66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	212c      	movs	r1, #44	; 0x2c
 8001d72:	fb01 f303 	mul.w	r3, r1, r3
 8001d76:	4413      	add	r3, r2
 8001d78:	3361      	adds	r3, #97	; 0x61
 8001d7a:	2207      	movs	r2, #7
 8001d7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f003 f9f4 	bl	8005176 <USB_HC_Halt>
 8001d8e:	e087      	b.n	8001ea0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	015a      	lsls	r2, r3, #5
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4413      	add	r3, r2
 8001d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 0320 	and.w	r3, r3, #32
 8001da2:	2b20      	cmp	r3, #32
 8001da4:	d109      	bne.n	8001dba <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	015a      	lsls	r2, r3, #5
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db2:	461a      	mov	r2, r3
 8001db4:	2320      	movs	r3, #32
 8001db6:	6093      	str	r3, [r2, #8]
 8001db8:	e072      	b.n	8001ea0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	015a      	lsls	r2, r3, #5
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d11a      	bne.n	8001e06 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	015a      	lsls	r2, r3, #5
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ddc:	461a      	mov	r2, r3
 8001dde:	2308      	movs	r3, #8
 8001de0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	212c      	movs	r1, #44	; 0x2c
 8001de8:	fb01 f303 	mul.w	r3, r1, r3
 8001dec:	4413      	add	r3, r2
 8001dee:	3361      	adds	r3, #97	; 0x61
 8001df0:	2205      	movs	r2, #5
 8001df2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f003 f9b9 	bl	8005176 <USB_HC_Halt>
 8001e04:	e04c      	b.n	8001ea0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	015a      	lsls	r2, r3, #5
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e1c:	d11b      	bne.n	8001e56 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	015a      	lsls	r2, r3, #5
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4413      	add	r3, r2
 8001e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e30:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	212c      	movs	r1, #44	; 0x2c
 8001e38:	fb01 f303 	mul.w	r3, r1, r3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3361      	adds	r3, #97	; 0x61
 8001e40:	2208      	movs	r2, #8
 8001e42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f003 f991 	bl	8005176 <USB_HC_Halt>
 8001e54:	e024      	b.n	8001ea0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	015a      	lsls	r2, r3, #5
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e68:	2b80      	cmp	r3, #128	; 0x80
 8001e6a:	d119      	bne.n	8001ea0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	015a      	lsls	r2, r3, #5
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4413      	add	r3, r2
 8001e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e78:	461a      	mov	r2, r3
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	212c      	movs	r1, #44	; 0x2c
 8001e84:	fb01 f303 	mul.w	r3, r1, r3
 8001e88:	4413      	add	r3, r2
 8001e8a:	3361      	adds	r3, #97	; 0x61
 8001e8c:	2206      	movs	r2, #6
 8001e8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	4611      	mov	r1, r2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f003 f96b 	bl	8005176 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	015a      	lsls	r2, r3, #5
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eb6:	d112      	bne.n	8001ede <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f003 f957 	bl	8005176 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	015a      	lsls	r2, r3, #5
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4413      	add	r3, r2
 8001ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eda:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001edc:	e24e      	b.n	800237c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	015a      	lsls	r2, r3, #5
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	f040 80df 	bne.w	80020b4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d019      	beq.n	8001f32 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	212c      	movs	r1, #44	; 0x2c
 8001f04:	fb01 f303 	mul.w	r3, r1, r3
 8001f08:	4413      	add	r3, r2
 8001f0a:	3348      	adds	r3, #72	; 0x48
 8001f0c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	0159      	lsls	r1, r3, #5
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	440b      	add	r3, r1
 8001f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f20:	1ad2      	subs	r2, r2, r3
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	202c      	movs	r0, #44	; 0x2c
 8001f28:	fb00 f303 	mul.w	r3, r0, r3
 8001f2c:	440b      	add	r3, r1
 8001f2e:	3350      	adds	r3, #80	; 0x50
 8001f30:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	212c      	movs	r1, #44	; 0x2c
 8001f38:	fb01 f303 	mul.w	r3, r1, r3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3361      	adds	r3, #97	; 0x61
 8001f40:	2201      	movs	r2, #1
 8001f42:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	212c      	movs	r1, #44	; 0x2c
 8001f4a:	fb01 f303 	mul.w	r3, r1, r3
 8001f4e:	4413      	add	r3, r2
 8001f50:	335c      	adds	r3, #92	; 0x5c
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	015a      	lsls	r2, r3, #5
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f62:	461a      	mov	r2, r3
 8001f64:	2301      	movs	r3, #1
 8001f66:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	212c      	movs	r1, #44	; 0x2c
 8001f6e:	fb01 f303 	mul.w	r3, r1, r3
 8001f72:	4413      	add	r3, r2
 8001f74:	333f      	adds	r3, #63	; 0x3f
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d009      	beq.n	8001f90 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	212c      	movs	r1, #44	; 0x2c
 8001f82:	fb01 f303 	mul.w	r3, r1, r3
 8001f86:	4413      	add	r3, r2
 8001f88:	333f      	adds	r3, #63	; 0x3f
 8001f8a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d111      	bne.n	8001fb4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	4611      	mov	r1, r2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f003 f8eb 	bl	8005176 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	015a      	lsls	r2, r3, #5
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fac:	461a      	mov	r2, r3
 8001fae:	2310      	movs	r3, #16
 8001fb0:	6093      	str	r3, [r2, #8]
 8001fb2:	e03a      	b.n	800202a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	212c      	movs	r1, #44	; 0x2c
 8001fba:	fb01 f303 	mul.w	r3, r1, r3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	333f      	adds	r3, #63	; 0x3f
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d009      	beq.n	8001fdc <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	212c      	movs	r1, #44	; 0x2c
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	333f      	adds	r3, #63	; 0x3f
 8001fd6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d126      	bne.n	800202a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	015a      	lsls	r2, r3, #5
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	0151      	lsls	r1, r2, #5
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	440a      	add	r2, r1
 8001ff2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ff6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ffa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	212c      	movs	r1, #44	; 0x2c
 8002002:	fb01 f303 	mul.w	r3, r1, r3
 8002006:	4413      	add	r3, r2
 8002008:	3360      	adds	r3, #96	; 0x60
 800200a:	2201      	movs	r2, #1
 800200c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	b2d9      	uxtb	r1, r3
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	202c      	movs	r0, #44	; 0x2c
 8002018:	fb00 f303 	mul.w	r3, r0, r3
 800201c:	4413      	add	r3, r2
 800201e:	3360      	adds	r3, #96	; 0x60
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f005 fb49 	bl	80076bc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d12b      	bne.n	800208a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	212c      	movs	r1, #44	; 0x2c
 8002038:	fb01 f303 	mul.w	r3, r1, r3
 800203c:	4413      	add	r3, r2
 800203e:	3348      	adds	r3, #72	; 0x48
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	202c      	movs	r0, #44	; 0x2c
 8002048:	fb00 f202 	mul.w	r2, r0, r2
 800204c:	440a      	add	r2, r1
 800204e:	3240      	adds	r2, #64	; 0x40
 8002050:	8812      	ldrh	r2, [r2, #0]
 8002052:	fbb3 f3f2 	udiv	r3, r3, r2
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 818e 	beq.w	800237c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	212c      	movs	r1, #44	; 0x2c
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	4413      	add	r3, r2
 800206c:	3354      	adds	r3, #84	; 0x54
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	f083 0301 	eor.w	r3, r3, #1
 8002074:	b2d8      	uxtb	r0, r3
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	212c      	movs	r1, #44	; 0x2c
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	4413      	add	r3, r2
 8002082:	3354      	adds	r3, #84	; 0x54
 8002084:	4602      	mov	r2, r0
 8002086:	701a      	strb	r2, [r3, #0]
}
 8002088:	e178      	b.n	800237c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	212c      	movs	r1, #44	; 0x2c
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	4413      	add	r3, r2
 8002096:	3354      	adds	r3, #84	; 0x54
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	f083 0301 	eor.w	r3, r3, #1
 800209e:	b2d8      	uxtb	r0, r3
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	212c      	movs	r1, #44	; 0x2c
 80020a6:	fb01 f303 	mul.w	r3, r1, r3
 80020aa:	4413      	add	r3, r2
 80020ac:	3354      	adds	r3, #84	; 0x54
 80020ae:	4602      	mov	r2, r0
 80020b0:	701a      	strb	r2, [r3, #0]
}
 80020b2:	e163      	b.n	800237c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	015a      	lsls	r2, r3, #5
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4413      	add	r3, r2
 80020bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	f040 80f6 	bne.w	80022b8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	212c      	movs	r1, #44	; 0x2c
 80020d2:	fb01 f303 	mul.w	r3, r1, r3
 80020d6:	4413      	add	r3, r2
 80020d8:	3361      	adds	r3, #97	; 0x61
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d109      	bne.n	80020f4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	212c      	movs	r1, #44	; 0x2c
 80020e6:	fb01 f303 	mul.w	r3, r1, r3
 80020ea:	4413      	add	r3, r2
 80020ec:	3360      	adds	r3, #96	; 0x60
 80020ee:	2201      	movs	r2, #1
 80020f0:	701a      	strb	r2, [r3, #0]
 80020f2:	e0c9      	b.n	8002288 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	212c      	movs	r1, #44	; 0x2c
 80020fa:	fb01 f303 	mul.w	r3, r1, r3
 80020fe:	4413      	add	r3, r2
 8002100:	3361      	adds	r3, #97	; 0x61
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b05      	cmp	r3, #5
 8002106:	d109      	bne.n	800211c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	212c      	movs	r1, #44	; 0x2c
 800210e:	fb01 f303 	mul.w	r3, r1, r3
 8002112:	4413      	add	r3, r2
 8002114:	3360      	adds	r3, #96	; 0x60
 8002116:	2205      	movs	r2, #5
 8002118:	701a      	strb	r2, [r3, #0]
 800211a:	e0b5      	b.n	8002288 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	212c      	movs	r1, #44	; 0x2c
 8002122:	fb01 f303 	mul.w	r3, r1, r3
 8002126:	4413      	add	r3, r2
 8002128:	3361      	adds	r3, #97	; 0x61
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b06      	cmp	r3, #6
 800212e:	d009      	beq.n	8002144 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	212c      	movs	r1, #44	; 0x2c
 8002136:	fb01 f303 	mul.w	r3, r1, r3
 800213a:	4413      	add	r3, r2
 800213c:	3361      	adds	r3, #97	; 0x61
 800213e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002140:	2b08      	cmp	r3, #8
 8002142:	d150      	bne.n	80021e6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	212c      	movs	r1, #44	; 0x2c
 800214a:	fb01 f303 	mul.w	r3, r1, r3
 800214e:	4413      	add	r3, r2
 8002150:	335c      	adds	r3, #92	; 0x5c
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	202c      	movs	r0, #44	; 0x2c
 800215c:	fb00 f303 	mul.w	r3, r0, r3
 8002160:	440b      	add	r3, r1
 8002162:	335c      	adds	r3, #92	; 0x5c
 8002164:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	212c      	movs	r1, #44	; 0x2c
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	4413      	add	r3, r2
 8002172:	335c      	adds	r3, #92	; 0x5c
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d912      	bls.n	80021a0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	212c      	movs	r1, #44	; 0x2c
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	4413      	add	r3, r2
 8002186:	335c      	adds	r3, #92	; 0x5c
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	212c      	movs	r1, #44	; 0x2c
 8002192:	fb01 f303 	mul.w	r3, r1, r3
 8002196:	4413      	add	r3, r2
 8002198:	3360      	adds	r3, #96	; 0x60
 800219a:	2204      	movs	r2, #4
 800219c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800219e:	e073      	b.n	8002288 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	212c      	movs	r1, #44	; 0x2c
 80021a6:	fb01 f303 	mul.w	r3, r1, r3
 80021aa:	4413      	add	r3, r2
 80021ac:	3360      	adds	r3, #96	; 0x60
 80021ae:	2202      	movs	r2, #2
 80021b0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	015a      	lsls	r2, r3, #5
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4413      	add	r3, r2
 80021ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021c8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021d0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	015a      	lsls	r2, r3, #5
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4413      	add	r3, r2
 80021da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021de:	461a      	mov	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021e4:	e050      	b.n	8002288 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	212c      	movs	r1, #44	; 0x2c
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	4413      	add	r3, r2
 80021f2:	3361      	adds	r3, #97	; 0x61
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d122      	bne.n	8002240 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	212c      	movs	r1, #44	; 0x2c
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	4413      	add	r3, r2
 8002206:	3360      	adds	r3, #96	; 0x60
 8002208:	2202      	movs	r2, #2
 800220a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4413      	add	r3, r2
 8002214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002222:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800222a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	015a      	lsls	r2, r3, #5
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	4413      	add	r3, r2
 8002234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002238:	461a      	mov	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	e023      	b.n	8002288 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	212c      	movs	r1, #44	; 0x2c
 8002246:	fb01 f303 	mul.w	r3, r1, r3
 800224a:	4413      	add	r3, r2
 800224c:	3361      	adds	r3, #97	; 0x61
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b07      	cmp	r3, #7
 8002252:	d119      	bne.n	8002288 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	212c      	movs	r1, #44	; 0x2c
 800225a:	fb01 f303 	mul.w	r3, r1, r3
 800225e:	4413      	add	r3, r2
 8002260:	335c      	adds	r3, #92	; 0x5c
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	202c      	movs	r0, #44	; 0x2c
 800226c:	fb00 f303 	mul.w	r3, r0, r3
 8002270:	440b      	add	r3, r1
 8002272:	335c      	adds	r3, #92	; 0x5c
 8002274:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	212c      	movs	r1, #44	; 0x2c
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	4413      	add	r3, r2
 8002282:	3360      	adds	r3, #96	; 0x60
 8002284:	2204      	movs	r2, #4
 8002286:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4413      	add	r3, r2
 8002290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002294:	461a      	mov	r2, r3
 8002296:	2302      	movs	r3, #2
 8002298:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	b2d9      	uxtb	r1, r3
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	202c      	movs	r0, #44	; 0x2c
 80022a4:	fb00 f303 	mul.w	r3, r0, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	3360      	adds	r3, #96	; 0x60
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f005 fa03 	bl	80076bc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022b6:	e061      	b.n	800237c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	015a      	lsls	r2, r3, #5
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	2b10      	cmp	r3, #16
 80022cc:	d156      	bne.n	800237c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	212c      	movs	r1, #44	; 0x2c
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	333f      	adds	r3, #63	; 0x3f
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d111      	bne.n	8002306 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	212c      	movs	r1, #44	; 0x2c
 80022e8:	fb01 f303 	mul.w	r3, r1, r3
 80022ec:	4413      	add	r3, r2
 80022ee:	335c      	adds	r3, #92	; 0x5c
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	4611      	mov	r1, r2
 80022fe:	4618      	mov	r0, r3
 8002300:	f002 ff39 	bl	8005176 <USB_HC_Halt>
 8002304:	e031      	b.n	800236a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	212c      	movs	r1, #44	; 0x2c
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	4413      	add	r3, r2
 8002312:	333f      	adds	r3, #63	; 0x3f
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d009      	beq.n	800232e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	212c      	movs	r1, #44	; 0x2c
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	333f      	adds	r3, #63	; 0x3f
 8002328:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800232a:	2b02      	cmp	r3, #2
 800232c:	d11d      	bne.n	800236a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	212c      	movs	r1, #44	; 0x2c
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	4413      	add	r3, r2
 800233a:	335c      	adds	r3, #92	; 0x5c
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d110      	bne.n	800236a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	212c      	movs	r1, #44	; 0x2c
 800234e:	fb01 f303 	mul.w	r3, r1, r3
 8002352:	4413      	add	r3, r2
 8002354:	3361      	adds	r3, #97	; 0x61
 8002356:	2203      	movs	r2, #3
 8002358:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	4611      	mov	r1, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f002 ff06 	bl	8005176 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	015a      	lsls	r2, r3, #5
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4413      	add	r3, r2
 8002372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002376:	461a      	mov	r2, r3
 8002378:	2310      	movs	r3, #16
 800237a:	6093      	str	r3, [r2, #8]
}
 800237c:	bf00      	nop
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	015a      	lsls	r2, r3, #5
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	4413      	add	r3, r2
 80023a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d11a      	bne.n	80023ea <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c0:	461a      	mov	r2, r3
 80023c2:	2304      	movs	r3, #4
 80023c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	212c      	movs	r1, #44	; 0x2c
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	3361      	adds	r3, #97	; 0x61
 80023d4:	2206      	movs	r2, #6
 80023d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	4611      	mov	r1, r2
 80023e2:	4618      	mov	r0, r3
 80023e4:	f002 fec7 	bl	8005176 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80023e8:	e331      	b.n	8002a4e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	015a      	lsls	r2, r3, #5
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	d12e      	bne.n	800245e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	4413      	add	r3, r2
 8002408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240c:	461a      	mov	r2, r3
 800240e:	2320      	movs	r3, #32
 8002410:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	212c      	movs	r1, #44	; 0x2c
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	4413      	add	r3, r2
 800241e:	333d      	adds	r3, #61	; 0x3d
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b01      	cmp	r3, #1
 8002424:	f040 8313 	bne.w	8002a4e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	212c      	movs	r1, #44	; 0x2c
 800242e:	fb01 f303 	mul.w	r3, r1, r3
 8002432:	4413      	add	r3, r2
 8002434:	333d      	adds	r3, #61	; 0x3d
 8002436:	2200      	movs	r2, #0
 8002438:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	212c      	movs	r1, #44	; 0x2c
 8002440:	fb01 f303 	mul.w	r3, r1, r3
 8002444:	4413      	add	r3, r2
 8002446:	3360      	adds	r3, #96	; 0x60
 8002448:	2202      	movs	r2, #2
 800244a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	4611      	mov	r1, r2
 8002456:	4618      	mov	r0, r3
 8002458:	f002 fe8d 	bl	8005176 <USB_HC_Halt>
}
 800245c:	e2f7      	b.n	8002a4e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	015a      	lsls	r2, r3, #5
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	4413      	add	r3, r2
 8002466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002474:	d112      	bne.n	800249c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	015a      	lsls	r2, r3, #5
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	4413      	add	r3, r2
 800247e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002482:	461a      	mov	r2, r3
 8002484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002488:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	4611      	mov	r1, r2
 8002494:	4618      	mov	r0, r3
 8002496:	f002 fe6e 	bl	8005176 <USB_HC_Halt>
}
 800249a:	e2d8      	b.n	8002a4e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	015a      	lsls	r2, r3, #5
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d140      	bne.n	8002534 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	212c      	movs	r1, #44	; 0x2c
 80024b8:	fb01 f303 	mul.w	r3, r1, r3
 80024bc:	4413      	add	r3, r2
 80024be:	335c      	adds	r3, #92	; 0x5c
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d6:	2b40      	cmp	r3, #64	; 0x40
 80024d8:	d111      	bne.n	80024fe <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	212c      	movs	r1, #44	; 0x2c
 80024e0:	fb01 f303 	mul.w	r3, r1, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	333d      	adds	r3, #61	; 0x3d
 80024e8:	2201      	movs	r2, #1
 80024ea:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f8:	461a      	mov	r2, r3
 80024fa:	2340      	movs	r3, #64	; 0x40
 80024fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	4413      	add	r3, r2
 8002506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250a:	461a      	mov	r2, r3
 800250c:	2301      	movs	r3, #1
 800250e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	212c      	movs	r1, #44	; 0x2c
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	4413      	add	r3, r2
 800251c:	3361      	adds	r3, #97	; 0x61
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f002 fe22 	bl	8005176 <USB_HC_Halt>
}
 8002532:	e28c      	b.n	8002a4e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	4413      	add	r3, r2
 800253c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002546:	2b40      	cmp	r3, #64	; 0x40
 8002548:	d12c      	bne.n	80025a4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	212c      	movs	r1, #44	; 0x2c
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	4413      	add	r3, r2
 8002556:	3361      	adds	r3, #97	; 0x61
 8002558:	2204      	movs	r2, #4
 800255a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	212c      	movs	r1, #44	; 0x2c
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	4413      	add	r3, r2
 8002568:	333d      	adds	r3, #61	; 0x3d
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	212c      	movs	r1, #44	; 0x2c
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	4413      	add	r3, r2
 800257a:	335c      	adds	r3, #92	; 0x5c
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	4611      	mov	r1, r2
 800258a:	4618      	mov	r0, r3
 800258c:	f002 fdf3 	bl	8005176 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	015a      	lsls	r2, r3, #5
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	4413      	add	r3, r2
 8002598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259c:	461a      	mov	r2, r3
 800259e:	2340      	movs	r3, #64	; 0x40
 80025a0:	6093      	str	r3, [r2, #8]
}
 80025a2:	e254      	b.n	8002a4e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	015a      	lsls	r2, r3, #5
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	4413      	add	r3, r2
 80025ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d11a      	bne.n	80025f0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	015a      	lsls	r2, r3, #5
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c6:	461a      	mov	r2, r3
 80025c8:	2308      	movs	r3, #8
 80025ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	212c      	movs	r1, #44	; 0x2c
 80025d2:	fb01 f303 	mul.w	r3, r1, r3
 80025d6:	4413      	add	r3, r2
 80025d8:	3361      	adds	r3, #97	; 0x61
 80025da:	2205      	movs	r2, #5
 80025dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f002 fdc4 	bl	8005176 <USB_HC_Halt>
}
 80025ee:	e22e      	b.n	8002a4e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 0310 	and.w	r3, r3, #16
 8002602:	2b10      	cmp	r3, #16
 8002604:	d140      	bne.n	8002688 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	212c      	movs	r1, #44	; 0x2c
 800260c:	fb01 f303 	mul.w	r3, r1, r3
 8002610:	4413      	add	r3, r2
 8002612:	335c      	adds	r3, #92	; 0x5c
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	212c      	movs	r1, #44	; 0x2c
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	3361      	adds	r3, #97	; 0x61
 8002626:	2203      	movs	r2, #3
 8002628:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	333d      	adds	r3, #61	; 0x3d
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d112      	bne.n	8002664 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	212c      	movs	r1, #44	; 0x2c
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	4413      	add	r3, r2
 800264a:	333c      	adds	r3, #60	; 0x3c
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d108      	bne.n	8002664 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	212c      	movs	r1, #44	; 0x2c
 8002658:	fb01 f303 	mul.w	r3, r1, r3
 800265c:	4413      	add	r3, r2
 800265e:	333d      	adds	r3, #61	; 0x3d
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	4611      	mov	r1, r2
 800266e:	4618      	mov	r0, r3
 8002670:	f002 fd81 	bl	8005176 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	4413      	add	r3, r2
 800267c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002680:	461a      	mov	r2, r3
 8002682:	2310      	movs	r3, #16
 8002684:	6093      	str	r3, [r2, #8]
}
 8002686:	e1e2      	b.n	8002a4e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	4413      	add	r3, r2
 8002690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269a:	2b80      	cmp	r3, #128	; 0x80
 800269c:	d164      	bne.n	8002768 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d111      	bne.n	80026ca <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	212c      	movs	r1, #44	; 0x2c
 80026ac:	fb01 f303 	mul.w	r3, r1, r3
 80026b0:	4413      	add	r3, r2
 80026b2:	3361      	adds	r3, #97	; 0x61
 80026b4:	2206      	movs	r2, #6
 80026b6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f002 fd57 	bl	8005176 <USB_HC_Halt>
 80026c8:	e044      	b.n	8002754 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	212c      	movs	r1, #44	; 0x2c
 80026d0:	fb01 f303 	mul.w	r3, r1, r3
 80026d4:	4413      	add	r3, r2
 80026d6:	335c      	adds	r3, #92	; 0x5c
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	202c      	movs	r0, #44	; 0x2c
 80026e2:	fb00 f303 	mul.w	r3, r0, r3
 80026e6:	440b      	add	r3, r1
 80026e8:	335c      	adds	r3, #92	; 0x5c
 80026ea:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	212c      	movs	r1, #44	; 0x2c
 80026f2:	fb01 f303 	mul.w	r3, r1, r3
 80026f6:	4413      	add	r3, r2
 80026f8:	335c      	adds	r3, #92	; 0x5c
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d920      	bls.n	8002742 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	212c      	movs	r1, #44	; 0x2c
 8002706:	fb01 f303 	mul.w	r3, r1, r3
 800270a:	4413      	add	r3, r2
 800270c:	335c      	adds	r3, #92	; 0x5c
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	212c      	movs	r1, #44	; 0x2c
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	4413      	add	r3, r2
 800271e:	3360      	adds	r3, #96	; 0x60
 8002720:	2204      	movs	r2, #4
 8002722:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	b2d9      	uxtb	r1, r3
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	202c      	movs	r0, #44	; 0x2c
 800272e:	fb00 f303 	mul.w	r3, r0, r3
 8002732:	4413      	add	r3, r2
 8002734:	3360      	adds	r3, #96	; 0x60
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	461a      	mov	r2, r3
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f004 ffbe 	bl	80076bc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002740:	e008      	b.n	8002754 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	212c      	movs	r1, #44	; 0x2c
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	4413      	add	r3, r2
 800274e:	3360      	adds	r3, #96	; 0x60
 8002750:	2202      	movs	r2, #2
 8002752:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	4413      	add	r3, r2
 800275c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002760:	461a      	mov	r2, r3
 8002762:	2380      	movs	r3, #128	; 0x80
 8002764:	6093      	str	r3, [r2, #8]
}
 8002766:	e172      	b.n	8002a4e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	4413      	add	r3, r2
 8002770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800277e:	d11b      	bne.n	80027b8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	212c      	movs	r1, #44	; 0x2c
 8002786:	fb01 f303 	mul.w	r3, r1, r3
 800278a:	4413      	add	r3, r2
 800278c:	3361      	adds	r3, #97	; 0x61
 800278e:	2208      	movs	r2, #8
 8002790:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f002 fcea 	bl	8005176 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ae:	461a      	mov	r2, r3
 80027b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027b4:	6093      	str	r3, [r2, #8]
}
 80027b6:	e14a      	b.n	8002a4e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	f040 813f 	bne.w	8002a4e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	212c      	movs	r1, #44	; 0x2c
 80027d6:	fb01 f303 	mul.w	r3, r1, r3
 80027da:	4413      	add	r3, r2
 80027dc:	3361      	adds	r3, #97	; 0x61
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d17d      	bne.n	80028e0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	212c      	movs	r1, #44	; 0x2c
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	3360      	adds	r3, #96	; 0x60
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	212c      	movs	r1, #44	; 0x2c
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	4413      	add	r3, r2
 8002802:	333f      	adds	r3, #63	; 0x3f
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d00a      	beq.n	8002820 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	212c      	movs	r1, #44	; 0x2c
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	4413      	add	r3, r2
 8002816:	333f      	adds	r3, #63	; 0x3f
 8002818:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800281a:	2b03      	cmp	r3, #3
 800281c:	f040 8100 	bne.w	8002a20 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d113      	bne.n	8002850 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	212c      	movs	r1, #44	; 0x2c
 800282e:	fb01 f303 	mul.w	r3, r1, r3
 8002832:	4413      	add	r3, r2
 8002834:	3355      	adds	r3, #85	; 0x55
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	f083 0301 	eor.w	r3, r3, #1
 800283c:	b2d8      	uxtb	r0, r3
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	212c      	movs	r1, #44	; 0x2c
 8002844:	fb01 f303 	mul.w	r3, r1, r3
 8002848:	4413      	add	r3, r2
 800284a:	3355      	adds	r3, #85	; 0x55
 800284c:	4602      	mov	r2, r0
 800284e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	2b01      	cmp	r3, #1
 8002856:	f040 80e3 	bne.w	8002a20 <HCD_HC_OUT_IRQHandler+0x69c>
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	212c      	movs	r1, #44	; 0x2c
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	4413      	add	r3, r2
 8002866:	334c      	adds	r3, #76	; 0x4c
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 80d8 	beq.w	8002a20 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	212c      	movs	r1, #44	; 0x2c
 8002876:	fb01 f303 	mul.w	r3, r1, r3
 800287a:	4413      	add	r3, r2
 800287c:	334c      	adds	r3, #76	; 0x4c
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	202c      	movs	r0, #44	; 0x2c
 8002886:	fb00 f202 	mul.w	r2, r0, r2
 800288a:	440a      	add	r2, r1
 800288c:	3240      	adds	r2, #64	; 0x40
 800288e:	8812      	ldrh	r2, [r2, #0]
 8002890:	4413      	add	r3, r2
 8002892:	3b01      	subs	r3, #1
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	202c      	movs	r0, #44	; 0x2c
 800289a:	fb00 f202 	mul.w	r2, r0, r2
 800289e:	440a      	add	r2, r1
 80028a0:	3240      	adds	r2, #64	; 0x40
 80028a2:	8812      	ldrh	r2, [r2, #0]
 80028a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80b5 	beq.w	8002a20 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	212c      	movs	r1, #44	; 0x2c
 80028bc:	fb01 f303 	mul.w	r3, r1, r3
 80028c0:	4413      	add	r3, r2
 80028c2:	3355      	adds	r3, #85	; 0x55
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	f083 0301 	eor.w	r3, r3, #1
 80028ca:	b2d8      	uxtb	r0, r3
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	212c      	movs	r1, #44	; 0x2c
 80028d2:	fb01 f303 	mul.w	r3, r1, r3
 80028d6:	4413      	add	r3, r2
 80028d8:	3355      	adds	r3, #85	; 0x55
 80028da:	4602      	mov	r2, r0
 80028dc:	701a      	strb	r2, [r3, #0]
 80028de:	e09f      	b.n	8002a20 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	212c      	movs	r1, #44	; 0x2c
 80028e6:	fb01 f303 	mul.w	r3, r1, r3
 80028ea:	4413      	add	r3, r2
 80028ec:	3361      	adds	r3, #97	; 0x61
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d109      	bne.n	8002908 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	212c      	movs	r1, #44	; 0x2c
 80028fa:	fb01 f303 	mul.w	r3, r1, r3
 80028fe:	4413      	add	r3, r2
 8002900:	3360      	adds	r3, #96	; 0x60
 8002902:	2202      	movs	r2, #2
 8002904:	701a      	strb	r2, [r3, #0]
 8002906:	e08b      	b.n	8002a20 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	212c      	movs	r1, #44	; 0x2c
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	3361      	adds	r3, #97	; 0x61
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b04      	cmp	r3, #4
 800291a:	d109      	bne.n	8002930 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	212c      	movs	r1, #44	; 0x2c
 8002922:	fb01 f303 	mul.w	r3, r1, r3
 8002926:	4413      	add	r3, r2
 8002928:	3360      	adds	r3, #96	; 0x60
 800292a:	2202      	movs	r2, #2
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	e077      	b.n	8002a20 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	212c      	movs	r1, #44	; 0x2c
 8002936:	fb01 f303 	mul.w	r3, r1, r3
 800293a:	4413      	add	r3, r2
 800293c:	3361      	adds	r3, #97	; 0x61
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b05      	cmp	r3, #5
 8002942:	d109      	bne.n	8002958 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	212c      	movs	r1, #44	; 0x2c
 800294a:	fb01 f303 	mul.w	r3, r1, r3
 800294e:	4413      	add	r3, r2
 8002950:	3360      	adds	r3, #96	; 0x60
 8002952:	2205      	movs	r2, #5
 8002954:	701a      	strb	r2, [r3, #0]
 8002956:	e063      	b.n	8002a20 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	212c      	movs	r1, #44	; 0x2c
 800295e:	fb01 f303 	mul.w	r3, r1, r3
 8002962:	4413      	add	r3, r2
 8002964:	3361      	adds	r3, #97	; 0x61
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b06      	cmp	r3, #6
 800296a:	d009      	beq.n	8002980 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	212c      	movs	r1, #44	; 0x2c
 8002972:	fb01 f303 	mul.w	r3, r1, r3
 8002976:	4413      	add	r3, r2
 8002978:	3361      	adds	r3, #97	; 0x61
 800297a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800297c:	2b08      	cmp	r3, #8
 800297e:	d14f      	bne.n	8002a20 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	212c      	movs	r1, #44	; 0x2c
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	4413      	add	r3, r2
 800298c:	335c      	adds	r3, #92	; 0x5c
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	202c      	movs	r0, #44	; 0x2c
 8002998:	fb00 f303 	mul.w	r3, r0, r3
 800299c:	440b      	add	r3, r1
 800299e:	335c      	adds	r3, #92	; 0x5c
 80029a0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	212c      	movs	r1, #44	; 0x2c
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	4413      	add	r3, r2
 80029ae:	335c      	adds	r3, #92	; 0x5c
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d912      	bls.n	80029dc <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	212c      	movs	r1, #44	; 0x2c
 80029bc:	fb01 f303 	mul.w	r3, r1, r3
 80029c0:	4413      	add	r3, r2
 80029c2:	335c      	adds	r3, #92	; 0x5c
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	212c      	movs	r1, #44	; 0x2c
 80029ce:	fb01 f303 	mul.w	r3, r1, r3
 80029d2:	4413      	add	r3, r2
 80029d4:	3360      	adds	r3, #96	; 0x60
 80029d6:	2204      	movs	r2, #4
 80029d8:	701a      	strb	r2, [r3, #0]
 80029da:	e021      	b.n	8002a20 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	212c      	movs	r1, #44	; 0x2c
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	4413      	add	r3, r2
 80029e8:	3360      	adds	r3, #96	; 0x60
 80029ea:	2202      	movs	r2, #2
 80029ec:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	015a      	lsls	r2, r3, #5
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	4413      	add	r3, r2
 80029f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a04:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a0c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	2302      	movs	r3, #2
 8002a30:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	b2d9      	uxtb	r1, r3
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	202c      	movs	r0, #44	; 0x2c
 8002a3c:	fb00 f303 	mul.w	r3, r0, r3
 8002a40:	4413      	add	r3, r2
 8002a42:	3360      	adds	r3, #96	; 0x60
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f004 fe37 	bl	80076bc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a4e:	bf00      	nop
 8002a50:	3720      	adds	r7, #32
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b08a      	sub	sp, #40	; 0x28
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	0c5b      	lsrs	r3, r3, #17
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	091b      	lsrs	r3, r3, #4
 8002a86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a8a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d004      	beq.n	8002a9c <HCD_RXQLVL_IRQHandler+0x46>
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2b05      	cmp	r3, #5
 8002a96:	f000 80a9 	beq.w	8002bec <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002a9a:	e0aa      	b.n	8002bf2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 80a6 	beq.w	8002bf0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	212c      	movs	r1, #44	; 0x2c
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3344      	adds	r3, #68	; 0x44
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 809b 	beq.w	8002bf0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	212c      	movs	r1, #44	; 0x2c
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3350      	adds	r3, #80	; 0x50
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	441a      	add	r2, r3
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	202c      	movs	r0, #44	; 0x2c
 8002ad4:	fb00 f303 	mul.w	r3, r0, r3
 8002ad8:	440b      	add	r3, r1
 8002ada:	334c      	adds	r3, #76	; 0x4c
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d87a      	bhi.n	8002bd8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	212c      	movs	r1, #44	; 0x2c
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	3344      	adds	r3, #68	; 0x44
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	b292      	uxth	r2, r2
 8002afa:	4619      	mov	r1, r3
 8002afc:	f001 fe92 	bl	8004824 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	212c      	movs	r1, #44	; 0x2c
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3344      	adds	r3, #68	; 0x44
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	441a      	add	r2, r3
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	202c      	movs	r0, #44	; 0x2c
 8002b1a:	fb00 f303 	mul.w	r3, r0, r3
 8002b1e:	440b      	add	r3, r1
 8002b20:	3344      	adds	r3, #68	; 0x44
 8002b22:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	212c      	movs	r1, #44	; 0x2c
 8002b2a:	fb01 f303 	mul.w	r3, r1, r3
 8002b2e:	4413      	add	r3, r2
 8002b30:	3350      	adds	r3, #80	; 0x50
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	441a      	add	r2, r3
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	202c      	movs	r0, #44	; 0x2c
 8002b3e:	fb00 f303 	mul.w	r3, r0, r3
 8002b42:	440b      	add	r3, r1
 8002b44:	3350      	adds	r3, #80	; 0x50
 8002b46:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	0cdb      	lsrs	r3, r3, #19
 8002b58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b5c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	212c      	movs	r1, #44	; 0x2c
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	4413      	add	r3, r2
 8002b6a:	3340      	adds	r3, #64	; 0x40
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d13c      	bne.n	8002bf0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d039      	beq.n	8002bf0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b92:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b9a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba8:	461a      	mov	r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	212c      	movs	r1, #44	; 0x2c
 8002bb4:	fb01 f303 	mul.w	r3, r1, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	3354      	adds	r3, #84	; 0x54
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	f083 0301 	eor.w	r3, r3, #1
 8002bc2:	b2d8      	uxtb	r0, r3
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	212c      	movs	r1, #44	; 0x2c
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	3354      	adds	r3, #84	; 0x54
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	701a      	strb	r2, [r3, #0]
      break;
 8002bd6:	e00b      	b.n	8002bf0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	212c      	movs	r1, #44	; 0x2c
 8002bde:	fb01 f303 	mul.w	r3, r1, r3
 8002be2:	4413      	add	r3, r2
 8002be4:	3360      	adds	r3, #96	; 0x60
 8002be6:	2204      	movs	r2, #4
 8002be8:	701a      	strb	r2, [r3, #0]
      break;
 8002bea:	e001      	b.n	8002bf0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002bec:	bf00      	nop
 8002bee:	e000      	b.n	8002bf2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002bf0:	bf00      	nop
  }
}
 8002bf2:	bf00      	nop
 8002bf4:	3728      	adds	r7, #40	; 0x28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b086      	sub	sp, #24
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c26:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d10b      	bne.n	8002c4a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d102      	bne.n	8002c42 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f004 fd21 	bl	8007684 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	f043 0302 	orr.w	r3, r3, #2
 8002c48:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d132      	bne.n	8002cba <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f043 0308 	orr.w	r3, r3, #8
 8002c5a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d126      	bne.n	8002cb4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d113      	bne.n	8002c96 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c78:	d106      	bne.n	8002c88 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2102      	movs	r1, #2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f001 ff3d 	bl	8004b00 <USB_InitFSLSPClkSel>
 8002c86:	e011      	b.n	8002cac <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f001 ff36 	bl	8004b00 <USB_InitFSLSPClkSel>
 8002c94:	e00a      	b.n	8002cac <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d106      	bne.n	8002cac <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002caa:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f004 fd13 	bl	80076d8 <HAL_HCD_PortEnabled_Callback>
 8002cb2:	e002      	b.n	8002cba <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f004 fd1d 	bl	80076f4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f003 0320 	and.w	r3, r3, #32
 8002cc0:	2b20      	cmp	r3, #32
 8002cc2:	d103      	bne.n	8002ccc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f043 0320 	orr.w	r3, r3, #32
 8002cca:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	6013      	str	r3, [r2, #0]
}
 8002cd8:	bf00      	nop
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e12b      	b.n	8002f4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7fd fe7a 	bl	8000a00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2224      	movs	r2, #36	; 0x24
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0201 	bic.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d44:	f001 fa20 	bl	8004188 <HAL_RCC_GetPCLK1Freq>
 8002d48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	4a81      	ldr	r2, [pc, #516]	; (8002f54 <HAL_I2C_Init+0x274>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d807      	bhi.n	8002d64 <HAL_I2C_Init+0x84>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4a80      	ldr	r2, [pc, #512]	; (8002f58 <HAL_I2C_Init+0x278>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	bf94      	ite	ls
 8002d5c:	2301      	movls	r3, #1
 8002d5e:	2300      	movhi	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	e006      	b.n	8002d72 <HAL_I2C_Init+0x92>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4a7d      	ldr	r2, [pc, #500]	; (8002f5c <HAL_I2C_Init+0x27c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	bf94      	ite	ls
 8002d6c:	2301      	movls	r3, #1
 8002d6e:	2300      	movhi	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e0e7      	b.n	8002f4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4a78      	ldr	r2, [pc, #480]	; (8002f60 <HAL_I2C_Init+0x280>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	0c9b      	lsrs	r3, r3, #18
 8002d84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	4a6a      	ldr	r2, [pc, #424]	; (8002f54 <HAL_I2C_Init+0x274>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d802      	bhi.n	8002db4 <HAL_I2C_Init+0xd4>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	3301      	adds	r3, #1
 8002db2:	e009      	b.n	8002dc8 <HAL_I2C_Init+0xe8>
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dba:	fb02 f303 	mul.w	r3, r2, r3
 8002dbe:	4a69      	ldr	r2, [pc, #420]	; (8002f64 <HAL_I2C_Init+0x284>)
 8002dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc4:	099b      	lsrs	r3, r3, #6
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	495c      	ldr	r1, [pc, #368]	; (8002f54 <HAL_I2C_Init+0x274>)
 8002de4:	428b      	cmp	r3, r1
 8002de6:	d819      	bhi.n	8002e1c <HAL_I2C_Init+0x13c>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	1e59      	subs	r1, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002df6:	1c59      	adds	r1, r3, #1
 8002df8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002dfc:	400b      	ands	r3, r1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <HAL_I2C_Init+0x138>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1e59      	subs	r1, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e10:	3301      	adds	r3, #1
 8002e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e16:	e051      	b.n	8002ebc <HAL_I2C_Init+0x1dc>
 8002e18:	2304      	movs	r3, #4
 8002e1a:	e04f      	b.n	8002ebc <HAL_I2C_Init+0x1dc>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d111      	bne.n	8002e48 <HAL_I2C_Init+0x168>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	1e58      	subs	r0, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6859      	ldr	r1, [r3, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	440b      	add	r3, r1
 8002e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e36:	3301      	adds	r3, #1
 8002e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bf0c      	ite	eq
 8002e40:	2301      	moveq	r3, #1
 8002e42:	2300      	movne	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	e012      	b.n	8002e6e <HAL_I2C_Init+0x18e>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1e58      	subs	r0, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6859      	ldr	r1, [r3, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	0099      	lsls	r1, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e5e:	3301      	adds	r3, #1
 8002e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	bf0c      	ite	eq
 8002e68:	2301      	moveq	r3, #1
 8002e6a:	2300      	movne	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_I2C_Init+0x196>
 8002e72:	2301      	movs	r3, #1
 8002e74:	e022      	b.n	8002ebc <HAL_I2C_Init+0x1dc>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10e      	bne.n	8002e9c <HAL_I2C_Init+0x1bc>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1e58      	subs	r0, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6859      	ldr	r1, [r3, #4]
 8002e86:	460b      	mov	r3, r1
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	440b      	add	r3, r1
 8002e8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e90:	3301      	adds	r3, #1
 8002e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e9a:	e00f      	b.n	8002ebc <HAL_I2C_Init+0x1dc>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1e58      	subs	r0, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6859      	ldr	r1, [r3, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	0099      	lsls	r1, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	6809      	ldr	r1, [r1, #0]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69da      	ldr	r2, [r3, #28]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002eea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6911      	ldr	r1, [r2, #16]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	68d2      	ldr	r2, [r2, #12]
 8002ef6:	4311      	orrs	r1, r2
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	430b      	orrs	r3, r1
 8002efe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695a      	ldr	r2, [r3, #20]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	000186a0 	.word	0x000186a0
 8002f58:	001e847f 	.word	0x001e847f
 8002f5c:	003d08ff 	.word	0x003d08ff
 8002f60:	431bde83 	.word	0x431bde83
 8002f64:	10624dd3 	.word	0x10624dd3

08002f68 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e128      	b.n	80031cc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d109      	bne.n	8002f9a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a90      	ldr	r2, [pc, #576]	; (80031d4 <HAL_I2S_Init+0x26c>)
 8002f92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7fd fd7b 	bl	8000a90 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002fb0:	f023 030f 	bic.w	r3, r3, #15
 8002fb4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d060      	beq.n	8003088 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d102      	bne.n	8002fd4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002fce:	2310      	movs	r3, #16
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	e001      	b.n	8002fd8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002fd4:	2320      	movs	r3, #32
 8002fd6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	d802      	bhi.n	8002fe6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	f001 f9c4 	bl	8004374 <HAL_RCCEx_GetPeriphCLKFreq>
 8002fec:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff6:	d125      	bne.n	8003044 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d010      	beq.n	8003022 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	fbb2 f2f3 	udiv	r2, r2, r3
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	461a      	mov	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	fbb2 f3f3 	udiv	r3, r2, r3
 800301c:	3305      	adds	r3, #5
 800301e:	613b      	str	r3, [r7, #16]
 8003020:	e01f      	b.n	8003062 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	fbb2 f2f3 	udiv	r2, r2, r3
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	461a      	mov	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	fbb2 f3f3 	udiv	r3, r2, r3
 800303e:	3305      	adds	r3, #5
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	e00e      	b.n	8003062 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	fbb2 f2f3 	udiv	r2, r2, r3
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	461a      	mov	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	fbb2 f3f3 	udiv	r3, r2, r3
 800305e:	3305      	adds	r3, #5
 8003060:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4a5c      	ldr	r2, [pc, #368]	; (80031d8 <HAL_I2S_Init+0x270>)
 8003066:	fba2 2303 	umull	r2, r3, r2, r3
 800306a:	08db      	lsrs	r3, r3, #3
 800306c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	085b      	lsrs	r3, r3, #1
 800307e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	021b      	lsls	r3, r3, #8
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	e003      	b.n	8003090 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003088:	2302      	movs	r3, #2
 800308a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d902      	bls.n	800309c <HAL_I2S_Init+0x134>
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	2bff      	cmp	r3, #255	; 0xff
 800309a:	d907      	bls.n	80030ac <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a0:	f043 0210 	orr.w	r2, r3, #16
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e08f      	b.n	80031cc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691a      	ldr	r2, [r3, #16]
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	ea42 0103 	orr.w	r1, r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	430a      	orrs	r2, r1
 80030be:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030ca:	f023 030f 	bic.w	r3, r3, #15
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6851      	ldr	r1, [r2, #4]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6892      	ldr	r2, [r2, #8]
 80030d6:	4311      	orrs	r1, r2
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	68d2      	ldr	r2, [r2, #12]
 80030dc:	4311      	orrs	r1, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6992      	ldr	r2, [r2, #24]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ee:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d161      	bne.n	80031bc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a38      	ldr	r2, [pc, #224]	; (80031dc <HAL_I2S_Init+0x274>)
 80030fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a37      	ldr	r2, [pc, #220]	; (80031e0 <HAL_I2S_Init+0x278>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d101      	bne.n	800310c <HAL_I2S_Init+0x1a4>
 8003108:	4b36      	ldr	r3, [pc, #216]	; (80031e4 <HAL_I2S_Init+0x27c>)
 800310a:	e001      	b.n	8003110 <HAL_I2S_Init+0x1a8>
 800310c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6812      	ldr	r2, [r2, #0]
 8003116:	4932      	ldr	r1, [pc, #200]	; (80031e0 <HAL_I2S_Init+0x278>)
 8003118:	428a      	cmp	r2, r1
 800311a:	d101      	bne.n	8003120 <HAL_I2S_Init+0x1b8>
 800311c:	4a31      	ldr	r2, [pc, #196]	; (80031e4 <HAL_I2S_Init+0x27c>)
 800311e:	e001      	b.n	8003124 <HAL_I2S_Init+0x1bc>
 8003120:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003124:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003128:	f023 030f 	bic.w	r3, r3, #15
 800312c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a2b      	ldr	r2, [pc, #172]	; (80031e0 <HAL_I2S_Init+0x278>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d101      	bne.n	800313c <HAL_I2S_Init+0x1d4>
 8003138:	4b2a      	ldr	r3, [pc, #168]	; (80031e4 <HAL_I2S_Init+0x27c>)
 800313a:	e001      	b.n	8003140 <HAL_I2S_Init+0x1d8>
 800313c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003140:	2202      	movs	r2, #2
 8003142:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a25      	ldr	r2, [pc, #148]	; (80031e0 <HAL_I2S_Init+0x278>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d101      	bne.n	8003152 <HAL_I2S_Init+0x1ea>
 800314e:	4b25      	ldr	r3, [pc, #148]	; (80031e4 <HAL_I2S_Init+0x27c>)
 8003150:	e001      	b.n	8003156 <HAL_I2S_Init+0x1ee>
 8003152:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003162:	d003      	beq.n	800316c <HAL_I2S_Init+0x204>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d103      	bne.n	8003174 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800316c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	e001      	b.n	8003178 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003174:	2300      	movs	r3, #0
 8003176:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003182:	4313      	orrs	r3, r2
 8003184:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800318c:	4313      	orrs	r3, r2
 800318e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003196:	4313      	orrs	r3, r2
 8003198:	b29a      	uxth	r2, r3
 800319a:	897b      	ldrh	r3, [r7, #10]
 800319c:	4313      	orrs	r3, r2
 800319e:	b29b      	uxth	r3, r3
 80031a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031a4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a0d      	ldr	r2, [pc, #52]	; (80031e0 <HAL_I2S_Init+0x278>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d101      	bne.n	80031b4 <HAL_I2S_Init+0x24c>
 80031b0:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <HAL_I2S_Init+0x27c>)
 80031b2:	e001      	b.n	80031b8 <HAL_I2S_Init+0x250>
 80031b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031b8:	897a      	ldrh	r2, [r7, #10]
 80031ba:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3720      	adds	r7, #32
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	080032df 	.word	0x080032df
 80031d8:	cccccccd 	.word	0xcccccccd
 80031dc:	080033f5 	.word	0x080033f5
 80031e0:	40003800 	.word	0x40003800
 80031e4:	40003400 	.word	0x40003400

080031e8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	881a      	ldrh	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	1c9a      	adds	r2, r3, #2
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003246:	b29b      	uxth	r3, r3
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003254:	b29b      	uxth	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10e      	bne.n	8003278 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003268:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7ff ffb8 	bl	80031e8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003278:	bf00      	nop
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003292:	b292      	uxth	r2, r2
 8003294:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329a:	1c9a      	adds	r2, r3, #2
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10e      	bne.n	80032d6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032c6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff ff93 	bl	80031fc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b086      	sub	sp, #24
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d13a      	bne.n	8003370 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b01      	cmp	r3, #1
 8003302:	d109      	bne.n	8003318 <I2S_IRQHandler+0x3a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330e:	2b40      	cmp	r3, #64	; 0x40
 8003310:	d102      	bne.n	8003318 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7ff ffb4 	bl	8003280 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331e:	2b40      	cmp	r3, #64	; 0x40
 8003320:	d126      	bne.n	8003370 <I2S_IRQHandler+0x92>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 0320 	and.w	r3, r3, #32
 800332c:	2b20      	cmp	r3, #32
 800332e:	d11f      	bne.n	8003370 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800333e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003340:	2300      	movs	r3, #0
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	613b      	str	r3, [r7, #16]
 8003354:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	f043 0202 	orr.w	r2, r3, #2
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff ff50 	bl	8003210 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b03      	cmp	r3, #3
 800337a:	d136      	bne.n	80033ea <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b02      	cmp	r3, #2
 8003384:	d109      	bne.n	800339a <I2S_IRQHandler+0xbc>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003390:	2b80      	cmp	r3, #128	; 0x80
 8003392:	d102      	bne.n	800339a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff ff45 	bl	8003224 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d122      	bne.n	80033ea <I2S_IRQHandler+0x10c>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 0320 	and.w	r3, r3, #32
 80033ae:	2b20      	cmp	r3, #32
 80033b0:	d11b      	bne.n	80033ea <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033c0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033dc:	f043 0204 	orr.w	r2, r3, #4
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff ff13 	bl	8003210 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033ea:	bf00      	nop
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b088      	sub	sp, #32
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a92      	ldr	r2, [pc, #584]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d101      	bne.n	8003412 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800340e:	4b92      	ldr	r3, [pc, #584]	; (8003658 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003410:	e001      	b.n	8003416 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003412:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a8b      	ldr	r2, [pc, #556]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d101      	bne.n	8003430 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800342c:	4b8a      	ldr	r3, [pc, #552]	; (8003658 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800342e:	e001      	b.n	8003434 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003430:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003440:	d004      	beq.n	800344c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	f040 8099 	bne.w	800357e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b02      	cmp	r3, #2
 8003454:	d107      	bne.n	8003466 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f925 	bl	80036b0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b01      	cmp	r3, #1
 800346e:	d107      	bne.n	8003480 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f9c8 	bl	8003810 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003486:	2b40      	cmp	r3, #64	; 0x40
 8003488:	d13a      	bne.n	8003500 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f003 0320 	and.w	r3, r3, #32
 8003490:	2b00      	cmp	r3, #0
 8003492:	d035      	beq.n	8003500 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a6e      	ldr	r2, [pc, #440]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d101      	bne.n	80034a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800349e:	4b6e      	ldr	r3, [pc, #440]	; (8003658 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034a0:	e001      	b.n	80034a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80034a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4969      	ldr	r1, [pc, #420]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034ae:	428b      	cmp	r3, r1
 80034b0:	d101      	bne.n	80034b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80034b2:	4b69      	ldr	r3, [pc, #420]	; (8003658 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034b4:	e001      	b.n	80034ba <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80034b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034be:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034ce:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f2:	f043 0202 	orr.w	r2, r3, #2
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff fe88 	bl	8003210 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b08      	cmp	r3, #8
 8003508:	f040 80c3 	bne.w	8003692 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 80bd 	beq.w	8003692 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003526:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a49      	ldr	r2, [pc, #292]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d101      	bne.n	8003536 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003532:	4b49      	ldr	r3, [pc, #292]	; (8003658 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003534:	e001      	b.n	800353a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003536:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4944      	ldr	r1, [pc, #272]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003542:	428b      	cmp	r3, r1
 8003544:	d101      	bne.n	800354a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003546:	4b44      	ldr	r3, [pc, #272]	; (8003658 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003548:	e001      	b.n	800354e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800354a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800354e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003552:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003554:	2300      	movs	r3, #0
 8003556:	60bb      	str	r3, [r7, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	60bb      	str	r3, [r7, #8]
 8003560:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	f043 0204 	orr.w	r2, r3, #4
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff fe4a 	bl	8003210 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800357c:	e089      	b.n	8003692 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b02      	cmp	r3, #2
 8003586:	d107      	bne.n	8003598 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f8be 	bl	8003714 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d107      	bne.n	80035b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f8fd 	bl	80037ac <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b8:	2b40      	cmp	r3, #64	; 0x40
 80035ba:	d12f      	bne.n	800361c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f003 0320 	and.w	r3, r3, #32
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d02a      	beq.n	800361c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035d4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a1e      	ldr	r2, [pc, #120]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d101      	bne.n	80035e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80035e0:	4b1d      	ldr	r3, [pc, #116]	; (8003658 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035e2:	e001      	b.n	80035e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80035e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4919      	ldr	r1, [pc, #100]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035f0:	428b      	cmp	r3, r1
 80035f2:	d101      	bne.n	80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80035f4:	4b18      	ldr	r3, [pc, #96]	; (8003658 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035f6:	e001      	b.n	80035fc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80035f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003600:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	f043 0202 	orr.w	r2, r3, #2
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7ff fdfa 	bl	8003210 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b08      	cmp	r3, #8
 8003624:	d136      	bne.n	8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b00      	cmp	r3, #0
 800362e:	d031      	beq.n	8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a07      	ldr	r2, [pc, #28]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d101      	bne.n	800363e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800363a:	4b07      	ldr	r3, [pc, #28]	; (8003658 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800363c:	e001      	b.n	8003642 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800363e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4902      	ldr	r1, [pc, #8]	; (8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800364a:	428b      	cmp	r3, r1
 800364c:	d106      	bne.n	800365c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800364e:	4b02      	ldr	r3, [pc, #8]	; (8003658 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003650:	e006      	b.n	8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003652:	bf00      	nop
 8003654:	40003800 	.word	0x40003800
 8003658:	40003400 	.word	0x40003400
 800365c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003660:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003664:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003674:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003682:	f043 0204 	orr.w	r2, r3, #4
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff fdc0 	bl	8003210 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003690:	e000      	b.n	8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003692:	bf00      	nop
}
 8003694:	bf00      	nop
 8003696:	3720      	adds	r7, #32
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	1c99      	adds	r1, r3, #2
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6251      	str	r1, [r2, #36]	; 0x24
 80036c2:	881a      	ldrh	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d113      	bne.n	800370a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d106      	bne.n	800370a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff ffc9 	bl	800369c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	1c99      	adds	r1, r3, #2
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6251      	str	r1, [r2, #36]	; 0x24
 8003726:	8819      	ldrh	r1, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a1d      	ldr	r2, [pc, #116]	; (80037a4 <I2SEx_TxISR_I2SExt+0x90>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d101      	bne.n	8003736 <I2SEx_TxISR_I2SExt+0x22>
 8003732:	4b1d      	ldr	r3, [pc, #116]	; (80037a8 <I2SEx_TxISR_I2SExt+0x94>)
 8003734:	e001      	b.n	800373a <I2SEx_TxISR_I2SExt+0x26>
 8003736:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800373a:	460a      	mov	r2, r1
 800373c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d121      	bne.n	800379a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a12      	ldr	r2, [pc, #72]	; (80037a4 <I2SEx_TxISR_I2SExt+0x90>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d101      	bne.n	8003764 <I2SEx_TxISR_I2SExt+0x50>
 8003760:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <I2SEx_TxISR_I2SExt+0x94>)
 8003762:	e001      	b.n	8003768 <I2SEx_TxISR_I2SExt+0x54>
 8003764:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	490d      	ldr	r1, [pc, #52]	; (80037a4 <I2SEx_TxISR_I2SExt+0x90>)
 8003770:	428b      	cmp	r3, r1
 8003772:	d101      	bne.n	8003778 <I2SEx_TxISR_I2SExt+0x64>
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <I2SEx_TxISR_I2SExt+0x94>)
 8003776:	e001      	b.n	800377c <I2SEx_TxISR_I2SExt+0x68>
 8003778:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800377c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003780:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d106      	bne.n	800379a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff ff81 	bl	800369c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800379a:	bf00      	nop
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40003800 	.word	0x40003800
 80037a8:	40003400 	.word	0x40003400

080037ac <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68d8      	ldr	r0, [r3, #12]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	1c99      	adds	r1, r3, #2
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80037c4:	b282      	uxth	r2, r0
 80037c6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	3b01      	subs	r3, #1
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037da:	b29b      	uxth	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d113      	bne.n	8003808 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ee:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7ff ff4a 	bl	800369c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003808:	bf00      	nop
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a20      	ldr	r2, [pc, #128]	; (80038a0 <I2SEx_RxISR_I2SExt+0x90>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d101      	bne.n	8003826 <I2SEx_RxISR_I2SExt+0x16>
 8003822:	4b20      	ldr	r3, [pc, #128]	; (80038a4 <I2SEx_RxISR_I2SExt+0x94>)
 8003824:	e001      	b.n	800382a <I2SEx_RxISR_I2SExt+0x1a>
 8003826:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800382a:	68d8      	ldr	r0, [r3, #12]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	1c99      	adds	r1, r3, #2
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003836:	b282      	uxth	r2, r0
 8003838:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d121      	bne.n	8003896 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a12      	ldr	r2, [pc, #72]	; (80038a0 <I2SEx_RxISR_I2SExt+0x90>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d101      	bne.n	8003860 <I2SEx_RxISR_I2SExt+0x50>
 800385c:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <I2SEx_RxISR_I2SExt+0x94>)
 800385e:	e001      	b.n	8003864 <I2SEx_RxISR_I2SExt+0x54>
 8003860:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	490d      	ldr	r1, [pc, #52]	; (80038a0 <I2SEx_RxISR_I2SExt+0x90>)
 800386c:	428b      	cmp	r3, r1
 800386e:	d101      	bne.n	8003874 <I2SEx_RxISR_I2SExt+0x64>
 8003870:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <I2SEx_RxISR_I2SExt+0x94>)
 8003872:	e001      	b.n	8003878 <I2SEx_RxISR_I2SExt+0x68>
 8003874:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003878:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800387c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003882:	b29b      	uxth	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d106      	bne.n	8003896 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff ff03 	bl	800369c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40003800 	.word	0x40003800
 80038a4:	40003400 	.word	0x40003400

080038a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e267      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d075      	beq.n	80039b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038c6:	4b88      	ldr	r3, [pc, #544]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 030c 	and.w	r3, r3, #12
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d00c      	beq.n	80038ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038d2:	4b85      	ldr	r3, [pc, #532]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d112      	bne.n	8003904 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038de:	4b82      	ldr	r3, [pc, #520]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ea:	d10b      	bne.n	8003904 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ec:	4b7e      	ldr	r3, [pc, #504]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d05b      	beq.n	80039b0 <HAL_RCC_OscConfig+0x108>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d157      	bne.n	80039b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e242      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800390c:	d106      	bne.n	800391c <HAL_RCC_OscConfig+0x74>
 800390e:	4b76      	ldr	r3, [pc, #472]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a75      	ldr	r2, [pc, #468]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	e01d      	b.n	8003958 <HAL_RCC_OscConfig+0xb0>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003924:	d10c      	bne.n	8003940 <HAL_RCC_OscConfig+0x98>
 8003926:	4b70      	ldr	r3, [pc, #448]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a6f      	ldr	r2, [pc, #444]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 800392c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	4b6d      	ldr	r3, [pc, #436]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a6c      	ldr	r2, [pc, #432]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	e00b      	b.n	8003958 <HAL_RCC_OscConfig+0xb0>
 8003940:	4b69      	ldr	r3, [pc, #420]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a68      	ldr	r2, [pc, #416]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	4b66      	ldr	r3, [pc, #408]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a65      	ldr	r2, [pc, #404]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d013      	beq.n	8003988 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003960:	f7fd fa72 	bl	8000e48 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003968:	f7fd fa6e 	bl	8000e48 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b64      	cmp	r3, #100	; 0x64
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e207      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397a:	4b5b      	ldr	r3, [pc, #364]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0xc0>
 8003986:	e014      	b.n	80039b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003988:	f7fd fa5e 	bl	8000e48 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003990:	f7fd fa5a 	bl	8000e48 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b64      	cmp	r3, #100	; 0x64
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e1f3      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a2:	4b51      	ldr	r3, [pc, #324]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f0      	bne.n	8003990 <HAL_RCC_OscConfig+0xe8>
 80039ae:	e000      	b.n	80039b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d063      	beq.n	8003a86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039be:	4b4a      	ldr	r3, [pc, #296]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00b      	beq.n	80039e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ca:	4b47      	ldr	r3, [pc, #284]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d11c      	bne.n	8003a10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039d6:	4b44      	ldr	r3, [pc, #272]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d116      	bne.n	8003a10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039e2:	4b41      	ldr	r3, [pc, #260]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <HAL_RCC_OscConfig+0x152>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d001      	beq.n	80039fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e1c7      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fa:	4b3b      	ldr	r3, [pc, #236]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	4937      	ldr	r1, [pc, #220]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a0e:	e03a      	b.n	8003a86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d020      	beq.n	8003a5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a18:	4b34      	ldr	r3, [pc, #208]	; (8003aec <HAL_RCC_OscConfig+0x244>)
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1e:	f7fd fa13 	bl	8000e48 <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a26:	f7fd fa0f 	bl	8000e48 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e1a8      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a38:	4b2b      	ldr	r3, [pc, #172]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0f0      	beq.n	8003a26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a44:	4b28      	ldr	r3, [pc, #160]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	4925      	ldr	r1, [pc, #148]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	600b      	str	r3, [r1, #0]
 8003a58:	e015      	b.n	8003a86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a5a:	4b24      	ldr	r3, [pc, #144]	; (8003aec <HAL_RCC_OscConfig+0x244>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a60:	f7fd f9f2 	bl	8000e48 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a68:	f7fd f9ee 	bl	8000e48 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e187      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d036      	beq.n	8003b00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d016      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a9a:	4b15      	ldr	r3, [pc, #84]	; (8003af0 <HAL_RCC_OscConfig+0x248>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa0:	f7fd f9d2 	bl	8000e48 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aa8:	f7fd f9ce 	bl	8000e48 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e167      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aba:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0f0      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x200>
 8003ac6:	e01b      	b.n	8003b00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ac8:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <HAL_RCC_OscConfig+0x248>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ace:	f7fd f9bb 	bl	8000e48 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad4:	e00e      	b.n	8003af4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ad6:	f7fd f9b7 	bl	8000e48 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d907      	bls.n	8003af4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e150      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	42470000 	.word	0x42470000
 8003af0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af4:	4b88      	ldr	r3, [pc, #544]	; (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1ea      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 8097 	beq.w	8003c3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b12:	4b81      	ldr	r3, [pc, #516]	; (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10f      	bne.n	8003b3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	4b7d      	ldr	r3, [pc, #500]	; (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	4a7c      	ldr	r2, [pc, #496]	; (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b2e:	4b7a      	ldr	r3, [pc, #488]	; (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b36:	60bb      	str	r3, [r7, #8]
 8003b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3e:	4b77      	ldr	r3, [pc, #476]	; (8003d1c <HAL_RCC_OscConfig+0x474>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d118      	bne.n	8003b7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b4a:	4b74      	ldr	r3, [pc, #464]	; (8003d1c <HAL_RCC_OscConfig+0x474>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a73      	ldr	r2, [pc, #460]	; (8003d1c <HAL_RCC_OscConfig+0x474>)
 8003b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b56:	f7fd f977 	bl	8000e48 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b5e:	f7fd f973 	bl	8000e48 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e10c      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b70:	4b6a      	ldr	r3, [pc, #424]	; (8003d1c <HAL_RCC_OscConfig+0x474>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0f0      	beq.n	8003b5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d106      	bne.n	8003b92 <HAL_RCC_OscConfig+0x2ea>
 8003b84:	4b64      	ldr	r3, [pc, #400]	; (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b88:	4a63      	ldr	r2, [pc, #396]	; (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b90:	e01c      	b.n	8003bcc <HAL_RCC_OscConfig+0x324>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	2b05      	cmp	r3, #5
 8003b98:	d10c      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x30c>
 8003b9a:	4b5f      	ldr	r3, [pc, #380]	; (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9e:	4a5e      	ldr	r2, [pc, #376]	; (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003ba0:	f043 0304 	orr.w	r3, r3, #4
 8003ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba6:	4b5c      	ldr	r3, [pc, #368]	; (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003baa:	4a5b      	ldr	r2, [pc, #364]	; (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003bac:	f043 0301 	orr.w	r3, r3, #1
 8003bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb2:	e00b      	b.n	8003bcc <HAL_RCC_OscConfig+0x324>
 8003bb4:	4b58      	ldr	r3, [pc, #352]	; (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb8:	4a57      	ldr	r2, [pc, #348]	; (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003bba:	f023 0301 	bic.w	r3, r3, #1
 8003bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc0:	4b55      	ldr	r3, [pc, #340]	; (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc4:	4a54      	ldr	r2, [pc, #336]	; (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003bc6:	f023 0304 	bic.w	r3, r3, #4
 8003bca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d015      	beq.n	8003c00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd4:	f7fd f938 	bl	8000e48 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bda:	e00a      	b.n	8003bf2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bdc:	f7fd f934 	bl	8000e48 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e0cb      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf2:	4b49      	ldr	r3, [pc, #292]	; (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0ee      	beq.n	8003bdc <HAL_RCC_OscConfig+0x334>
 8003bfe:	e014      	b.n	8003c2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c00:	f7fd f922 	bl	8000e48 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c06:	e00a      	b.n	8003c1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c08:	f7fd f91e 	bl	8000e48 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e0b5      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c1e:	4b3e      	ldr	r3, [pc, #248]	; (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1ee      	bne.n	8003c08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c2a:	7dfb      	ldrb	r3, [r7, #23]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d105      	bne.n	8003c3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c30:	4b39      	ldr	r3, [pc, #228]	; (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	4a38      	ldr	r2, [pc, #224]	; (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80a1 	beq.w	8003d88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c46:	4b34      	ldr	r3, [pc, #208]	; (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d05c      	beq.n	8003d0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d141      	bne.n	8003cde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c5a:	4b31      	ldr	r3, [pc, #196]	; (8003d20 <HAL_RCC_OscConfig+0x478>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c60:	f7fd f8f2 	bl	8000e48 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c68:	f7fd f8ee 	bl	8000e48 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e087      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7a:	4b27      	ldr	r3, [pc, #156]	; (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1f0      	bne.n	8003c68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69da      	ldr	r2, [r3, #28]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	019b      	lsls	r3, r3, #6
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9c:	085b      	lsrs	r3, r3, #1
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	041b      	lsls	r3, r3, #16
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	061b      	lsls	r3, r3, #24
 8003caa:	491b      	ldr	r1, [pc, #108]	; (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cb0:	4b1b      	ldr	r3, [pc, #108]	; (8003d20 <HAL_RCC_OscConfig+0x478>)
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb6:	f7fd f8c7 	bl	8000e48 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cbe:	f7fd f8c3 	bl	8000e48 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e05c      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd0:	4b11      	ldr	r3, [pc, #68]	; (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f0      	beq.n	8003cbe <HAL_RCC_OscConfig+0x416>
 8003cdc:	e054      	b.n	8003d88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cde:	4b10      	ldr	r3, [pc, #64]	; (8003d20 <HAL_RCC_OscConfig+0x478>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce4:	f7fd f8b0 	bl	8000e48 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cec:	f7fd f8ac 	bl	8000e48 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e045      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfe:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f0      	bne.n	8003cec <HAL_RCC_OscConfig+0x444>
 8003d0a:	e03d      	b.n	8003d88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d107      	bne.n	8003d24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e038      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	40007000 	.word	0x40007000
 8003d20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d24:	4b1b      	ldr	r3, [pc, #108]	; (8003d94 <HAL_RCC_OscConfig+0x4ec>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d028      	beq.n	8003d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d121      	bne.n	8003d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d11a      	bne.n	8003d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d54:	4013      	ands	r3, r2
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d111      	bne.n	8003d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6a:	085b      	lsrs	r3, r3, #1
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d107      	bne.n	8003d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d001      	beq.n	8003d88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	40023800 	.word	0x40023800

08003d98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e0cc      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dac:	4b68      	ldr	r3, [pc, #416]	; (8003f50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d90c      	bls.n	8003dd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dba:	4b65      	ldr	r3, [pc, #404]	; (8003f50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc2:	4b63      	ldr	r3, [pc, #396]	; (8003f50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d001      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e0b8      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d020      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dec:	4b59      	ldr	r3, [pc, #356]	; (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	4a58      	ldr	r2, [pc, #352]	; (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003df6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d005      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e04:	4b53      	ldr	r3, [pc, #332]	; (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	4a52      	ldr	r2, [pc, #328]	; (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e10:	4b50      	ldr	r3, [pc, #320]	; (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	494d      	ldr	r1, [pc, #308]	; (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d044      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d107      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e36:	4b47      	ldr	r3, [pc, #284]	; (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d119      	bne.n	8003e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e07f      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d003      	beq.n	8003e56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	d107      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e56:	4b3f      	ldr	r3, [pc, #252]	; (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d109      	bne.n	8003e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e06f      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e66:	4b3b      	ldr	r3, [pc, #236]	; (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e067      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e76:	4b37      	ldr	r3, [pc, #220]	; (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f023 0203 	bic.w	r2, r3, #3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	4934      	ldr	r1, [pc, #208]	; (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e88:	f7fc ffde 	bl	8000e48 <HAL_GetTick>
 8003e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8e:	e00a      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e90:	f7fc ffda 	bl	8000e48 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e04f      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea6:	4b2b      	ldr	r3, [pc, #172]	; (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 020c 	and.w	r2, r3, #12
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d1eb      	bne.n	8003e90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003eb8:	4b25      	ldr	r3, [pc, #148]	; (8003f50 <HAL_RCC_ClockConfig+0x1b8>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d20c      	bcs.n	8003ee0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec6:	4b22      	ldr	r3, [pc, #136]	; (8003f50 <HAL_RCC_ClockConfig+0x1b8>)
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ece:	4b20      	ldr	r3, [pc, #128]	; (8003f50 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e032      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d008      	beq.n	8003efe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eec:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	4916      	ldr	r1, [pc, #88]	; (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d009      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f0a:	4b12      	ldr	r3, [pc, #72]	; (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	490e      	ldr	r1, [pc, #56]	; (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f1e:	f000 f821 	bl	8003f64 <HAL_RCC_GetSysClockFreq>
 8003f22:	4602      	mov	r2, r0
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	091b      	lsrs	r3, r3, #4
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	490a      	ldr	r1, [pc, #40]	; (8003f58 <HAL_RCC_ClockConfig+0x1c0>)
 8003f30:	5ccb      	ldrb	r3, [r1, r3]
 8003f32:	fa22 f303 	lsr.w	r3, r2, r3
 8003f36:	4a09      	ldr	r2, [pc, #36]	; (8003f5c <HAL_RCC_ClockConfig+0x1c4>)
 8003f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f3a:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <HAL_RCC_ClockConfig+0x1c8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fc ff3e 	bl	8000dc0 <HAL_InitTick>

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40023c00 	.word	0x40023c00
 8003f54:	40023800 	.word	0x40023800
 8003f58:	08007d94 	.word	0x08007d94
 8003f5c:	20000000 	.word	0x20000000
 8003f60:	20000004 	.word	0x20000004

08003f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f68:	b094      	sub	sp, #80	; 0x50
 8003f6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f70:	2300      	movs	r3, #0
 8003f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f74:	2300      	movs	r3, #0
 8003f76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f7c:	4b79      	ldr	r3, [pc, #484]	; (8004164 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 030c 	and.w	r3, r3, #12
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d00d      	beq.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x40>
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	f200 80e1 	bhi.w	8004150 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <HAL_RCC_GetSysClockFreq+0x34>
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d003      	beq.n	8003f9e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f96:	e0db      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f98:	4b73      	ldr	r3, [pc, #460]	; (8004168 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f9c:	e0db      	b.n	8004156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f9e:	4b73      	ldr	r3, [pc, #460]	; (800416c <HAL_RCC_GetSysClockFreq+0x208>)
 8003fa0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fa2:	e0d8      	b.n	8004156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fa4:	4b6f      	ldr	r3, [pc, #444]	; (8004164 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fae:	4b6d      	ldr	r3, [pc, #436]	; (8004164 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d063      	beq.n	8004082 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fba:	4b6a      	ldr	r3, [pc, #424]	; (8004164 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	099b      	lsrs	r3, r3, #6
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8003fce:	2300      	movs	r3, #0
 8003fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8003fd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003fd6:	4622      	mov	r2, r4
 8003fd8:	462b      	mov	r3, r5
 8003fda:	f04f 0000 	mov.w	r0, #0
 8003fde:	f04f 0100 	mov.w	r1, #0
 8003fe2:	0159      	lsls	r1, r3, #5
 8003fe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fe8:	0150      	lsls	r0, r2, #5
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	4621      	mov	r1, r4
 8003ff0:	1a51      	subs	r1, r2, r1
 8003ff2:	6139      	str	r1, [r7, #16]
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	eb63 0301 	sbc.w	r3, r3, r1
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004008:	4659      	mov	r1, fp
 800400a:	018b      	lsls	r3, r1, #6
 800400c:	4651      	mov	r1, sl
 800400e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004012:	4651      	mov	r1, sl
 8004014:	018a      	lsls	r2, r1, #6
 8004016:	4651      	mov	r1, sl
 8004018:	ebb2 0801 	subs.w	r8, r2, r1
 800401c:	4659      	mov	r1, fp
 800401e:	eb63 0901 	sbc.w	r9, r3, r1
 8004022:	f04f 0200 	mov.w	r2, #0
 8004026:	f04f 0300 	mov.w	r3, #0
 800402a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800402e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004032:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004036:	4690      	mov	r8, r2
 8004038:	4699      	mov	r9, r3
 800403a:	4623      	mov	r3, r4
 800403c:	eb18 0303 	adds.w	r3, r8, r3
 8004040:	60bb      	str	r3, [r7, #8]
 8004042:	462b      	mov	r3, r5
 8004044:	eb49 0303 	adc.w	r3, r9, r3
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	f04f 0200 	mov.w	r2, #0
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004056:	4629      	mov	r1, r5
 8004058:	024b      	lsls	r3, r1, #9
 800405a:	4621      	mov	r1, r4
 800405c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004060:	4621      	mov	r1, r4
 8004062:	024a      	lsls	r2, r1, #9
 8004064:	4610      	mov	r0, r2
 8004066:	4619      	mov	r1, r3
 8004068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800406a:	2200      	movs	r2, #0
 800406c:	62bb      	str	r3, [r7, #40]	; 0x28
 800406e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004070:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004074:	f7fc f8a8 	bl	80001c8 <__aeabi_uldivmod>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4613      	mov	r3, r2
 800407e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004080:	e058      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004082:	4b38      	ldr	r3, [pc, #224]	; (8004164 <HAL_RCC_GetSysClockFreq+0x200>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	099b      	lsrs	r3, r3, #6
 8004088:	2200      	movs	r2, #0
 800408a:	4618      	mov	r0, r3
 800408c:	4611      	mov	r1, r2
 800408e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004092:	623b      	str	r3, [r7, #32]
 8004094:	2300      	movs	r3, #0
 8004096:	627b      	str	r3, [r7, #36]	; 0x24
 8004098:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800409c:	4642      	mov	r2, r8
 800409e:	464b      	mov	r3, r9
 80040a0:	f04f 0000 	mov.w	r0, #0
 80040a4:	f04f 0100 	mov.w	r1, #0
 80040a8:	0159      	lsls	r1, r3, #5
 80040aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040ae:	0150      	lsls	r0, r2, #5
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	4641      	mov	r1, r8
 80040b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80040ba:	4649      	mov	r1, r9
 80040bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040d4:	ebb2 040a 	subs.w	r4, r2, sl
 80040d8:	eb63 050b 	sbc.w	r5, r3, fp
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	00eb      	lsls	r3, r5, #3
 80040e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040ea:	00e2      	lsls	r2, r4, #3
 80040ec:	4614      	mov	r4, r2
 80040ee:	461d      	mov	r5, r3
 80040f0:	4643      	mov	r3, r8
 80040f2:	18e3      	adds	r3, r4, r3
 80040f4:	603b      	str	r3, [r7, #0]
 80040f6:	464b      	mov	r3, r9
 80040f8:	eb45 0303 	adc.w	r3, r5, r3
 80040fc:	607b      	str	r3, [r7, #4]
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	e9d7 4500 	ldrd	r4, r5, [r7]
 800410a:	4629      	mov	r1, r5
 800410c:	028b      	lsls	r3, r1, #10
 800410e:	4621      	mov	r1, r4
 8004110:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004114:	4621      	mov	r1, r4
 8004116:	028a      	lsls	r2, r1, #10
 8004118:	4610      	mov	r0, r2
 800411a:	4619      	mov	r1, r3
 800411c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800411e:	2200      	movs	r2, #0
 8004120:	61bb      	str	r3, [r7, #24]
 8004122:	61fa      	str	r2, [r7, #28]
 8004124:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004128:	f7fc f84e 	bl	80001c8 <__aeabi_uldivmod>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4613      	mov	r3, r2
 8004132:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004134:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <HAL_RCC_GetSysClockFreq+0x200>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	0c1b      	lsrs	r3, r3, #16
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	3301      	adds	r3, #1
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004144:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004148:	fbb2 f3f3 	udiv	r3, r2, r3
 800414c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800414e:	e002      	b.n	8004156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004150:	4b05      	ldr	r3, [pc, #20]	; (8004168 <HAL_RCC_GetSysClockFreq+0x204>)
 8004152:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004158:	4618      	mov	r0, r3
 800415a:	3750      	adds	r7, #80	; 0x50
 800415c:	46bd      	mov	sp, r7
 800415e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004162:	bf00      	nop
 8004164:	40023800 	.word	0x40023800
 8004168:	00f42400 	.word	0x00f42400
 800416c:	007a1200 	.word	0x007a1200

08004170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004174:	4b03      	ldr	r3, [pc, #12]	; (8004184 <HAL_RCC_GetHCLKFreq+0x14>)
 8004176:	681b      	ldr	r3, [r3, #0]
}
 8004178:	4618      	mov	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	20000000 	.word	0x20000000

08004188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800418c:	f7ff fff0 	bl	8004170 <HAL_RCC_GetHCLKFreq>
 8004190:	4602      	mov	r2, r0
 8004192:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	0a9b      	lsrs	r3, r3, #10
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	4903      	ldr	r1, [pc, #12]	; (80041ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800419e:	5ccb      	ldrb	r3, [r1, r3]
 80041a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40023800 	.word	0x40023800
 80041ac:	08007da4 	.word	0x08007da4

080041b0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d105      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d035      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041d8:	4b62      	ldr	r3, [pc, #392]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041de:	f7fc fe33 	bl	8000e48 <HAL_GetTick>
 80041e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041e4:	e008      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041e6:	f7fc fe2f 	bl	8000e48 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e0b0      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041f8:	4b5b      	ldr	r3, [pc, #364]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1f0      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	019a      	lsls	r2, r3, #6
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	071b      	lsls	r3, r3, #28
 8004210:	4955      	ldr	r1, [pc, #340]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004218:	4b52      	ldr	r3, [pc, #328]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800421a:	2201      	movs	r2, #1
 800421c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800421e:	f7fc fe13 	bl	8000e48 <HAL_GetTick>
 8004222:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004224:	e008      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004226:	f7fc fe0f 	bl	8000e48 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e090      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004238:	4b4b      	ldr	r3, [pc, #300]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0f0      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 8083 	beq.w	8004358 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	4b44      	ldr	r3, [pc, #272]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	4a43      	ldr	r2, [pc, #268]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800425c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004260:	6413      	str	r3, [r2, #64]	; 0x40
 8004262:	4b41      	ldr	r3, [pc, #260]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800426e:	4b3f      	ldr	r3, [pc, #252]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a3e      	ldr	r2, [pc, #248]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004278:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800427a:	f7fc fde5 	bl	8000e48 <HAL_GetTick>
 800427e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004280:	e008      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004282:	f7fc fde1 	bl	8000e48 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d901      	bls.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e062      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004294:	4b35      	ldr	r3, [pc, #212]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0f0      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042a0:	4b31      	ldr	r3, [pc, #196]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d02f      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d028      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042be:	4b2a      	ldr	r3, [pc, #168]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042c8:	4b29      	ldr	r3, [pc, #164]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042ca:	2201      	movs	r2, #1
 80042cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042ce:	4b28      	ldr	r3, [pc, #160]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80042d4:	4a24      	ldr	r2, [pc, #144]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042da:	4b23      	ldr	r3, [pc, #140]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d114      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80042e6:	f7fc fdaf 	bl	8000e48 <HAL_GetTick>
 80042ea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ec:	e00a      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ee:	f7fc fdab 	bl	8000e48 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d901      	bls.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e02a      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004304:	4b18      	ldr	r3, [pc, #96]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0ee      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004318:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800431c:	d10d      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800431e:	4b12      	ldr	r3, [pc, #72]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800432e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004332:	490d      	ldr	r1, [pc, #52]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004334:	4313      	orrs	r3, r2
 8004336:	608b      	str	r3, [r1, #8]
 8004338:	e005      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800433a:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	4a0a      	ldr	r2, [pc, #40]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004340:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004344:	6093      	str	r3, [r2, #8]
 8004346:	4b08      	ldr	r3, [pc, #32]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004348:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004352:	4905      	ldr	r1, [pc, #20]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004354:	4313      	orrs	r3, r2
 8004356:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	42470068 	.word	0x42470068
 8004368:	40023800 	.word	0x40023800
 800436c:	40007000 	.word	0x40007000
 8004370:	42470e40 	.word	0x42470e40

08004374 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d13e      	bne.n	8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004392:	4b23      	ldr	r3, [pc, #140]	; (8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d005      	beq.n	80043ae <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d12f      	bne.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80043a8:	4b1e      	ldr	r3, [pc, #120]	; (8004424 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043aa:	617b      	str	r3, [r7, #20]
          break;
 80043ac:	e02f      	b.n	800440e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80043ae:	4b1c      	ldr	r3, [pc, #112]	; (8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ba:	d108      	bne.n	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043bc:	4b18      	ldr	r3, [pc, #96]	; (8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043c4:	4a18      	ldr	r2, [pc, #96]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80043c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ca:	613b      	str	r3, [r7, #16]
 80043cc:	e007      	b.n	80043de <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043ce:	4b14      	ldr	r3, [pc, #80]	; (8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043d6:	4a15      	ldr	r2, [pc, #84]	; (800442c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80043d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043dc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80043de:	4b10      	ldr	r3, [pc, #64]	; (8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e4:	099b      	lsrs	r3, r3, #6
 80043e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	fb02 f303 	mul.w	r3, r2, r3
 80043f0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80043f2:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f8:	0f1b      	lsrs	r3, r3, #28
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	fbb2 f3f3 	udiv	r3, r2, r3
 8004404:	617b      	str	r3, [r7, #20]
          break;
 8004406:	e002      	b.n	800440e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	617b      	str	r3, [r7, #20]
          break;
 800440c:	bf00      	nop
        }
      }
      break;
 800440e:	bf00      	nop
    }
  }
  return frequency;
 8004410:	697b      	ldr	r3, [r7, #20]
}
 8004412:	4618      	mov	r0, r3
 8004414:	371c      	adds	r7, #28
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40023800 	.word	0x40023800
 8004424:	00bb8000 	.word	0x00bb8000
 8004428:	007a1200 	.word	0x007a1200
 800442c:	00f42400 	.word	0x00f42400

08004430 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e07b      	b.n	800453a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	2b00      	cmp	r3, #0
 8004448:	d108      	bne.n	800445c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004452:	d009      	beq.n	8004468 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	61da      	str	r2, [r3, #28]
 800445a:	e005      	b.n	8004468 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d106      	bne.n	8004488 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fc fb84 	bl	8000b90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800449e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	431a      	orrs	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d8:	431a      	orrs	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ec:	ea42 0103 	orr.w	r1, r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	0c1b      	lsrs	r3, r3, #16
 8004506:	f003 0104 	and.w	r1, r3, #4
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	f003 0210 	and.w	r2, r3, #16
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69da      	ldr	r2, [r3, #28]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004528:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004542:	b084      	sub	sp, #16
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	f107 001c 	add.w	r0, r7, #28
 8004550:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004556:	2b01      	cmp	r3, #1
 8004558:	d122      	bne.n	80045a0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800456e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004584:	2b01      	cmp	r3, #1
 8004586:	d105      	bne.n	8004594 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f9bf 	bl	8004918 <USB_CoreReset>
 800459a:	4603      	mov	r3, r0
 800459c:	73fb      	strb	r3, [r7, #15]
 800459e:	e01a      	b.n	80045d6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f9b3 	bl	8004918 <USB_CoreReset>
 80045b2:	4603      	mov	r3, r0
 80045b4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80045b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d106      	bne.n	80045ca <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	639a      	str	r2, [r3, #56]	; 0x38
 80045c8:	e005      	b.n	80045d6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80045d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d10b      	bne.n	80045f4 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f043 0206 	orr.w	r2, r3, #6
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f043 0220 	orr.w	r2, r3, #32
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004600:	b004      	add	sp, #16
 8004602:	4770      	bx	lr

08004604 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f043 0201 	orr.w	r2, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f023 0201 	bic.w	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	460b      	mov	r3, r1
 8004652:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004664:	78fb      	ldrb	r3, [r7, #3]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d115      	bne.n	8004696 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004676:	2001      	movs	r0, #1
 8004678:	f7fc fbf2 	bl	8000e60 <HAL_Delay>
      ms++;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	3301      	adds	r3, #1
 8004680:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f939 	bl	80048fa <USB_GetMode>
 8004688:	4603      	mov	r3, r0
 800468a:	2b01      	cmp	r3, #1
 800468c:	d01e      	beq.n	80046cc <USB_SetCurrentMode+0x84>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2b31      	cmp	r3, #49	; 0x31
 8004692:	d9f0      	bls.n	8004676 <USB_SetCurrentMode+0x2e>
 8004694:	e01a      	b.n	80046cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004696:	78fb      	ldrb	r3, [r7, #3]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d115      	bne.n	80046c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80046a8:	2001      	movs	r0, #1
 80046aa:	f7fc fbd9 	bl	8000e60 <HAL_Delay>
      ms++;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3301      	adds	r3, #1
 80046b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f920 	bl	80048fa <USB_GetMode>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d005      	beq.n	80046cc <USB_SetCurrentMode+0x84>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2b31      	cmp	r3, #49	; 0x31
 80046c4:	d9f0      	bls.n	80046a8 <USB_SetCurrentMode+0x60>
 80046c6:	e001      	b.n	80046cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e005      	b.n	80046d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b32      	cmp	r3, #50	; 0x32
 80046d0:	d101      	bne.n	80046d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	3301      	adds	r3, #1
 80046f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4a13      	ldr	r2, [pc, #76]	; (8004744 <USB_FlushTxFifo+0x64>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d901      	bls.n	8004700 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e01b      	b.n	8004738 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	daf2      	bge.n	80046ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	019b      	lsls	r3, r3, #6
 8004710:	f043 0220 	orr.w	r2, r3, #32
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	3301      	adds	r3, #1
 800471c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4a08      	ldr	r2, [pc, #32]	; (8004744 <USB_FlushTxFifo+0x64>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d901      	bls.n	800472a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e006      	b.n	8004738 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	2b20      	cmp	r3, #32
 8004734:	d0f0      	beq.n	8004718 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	00030d40 	.word	0x00030d40

08004748 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3301      	adds	r3, #1
 8004758:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4a11      	ldr	r2, [pc, #68]	; (80047a4 <USB_FlushRxFifo+0x5c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d901      	bls.n	8004766 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e018      	b.n	8004798 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	2b00      	cmp	r3, #0
 800476c:	daf2      	bge.n	8004754 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2210      	movs	r2, #16
 8004776:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	3301      	adds	r3, #1
 800477c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4a08      	ldr	r2, [pc, #32]	; (80047a4 <USB_FlushRxFifo+0x5c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d901      	bls.n	800478a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e006      	b.n	8004798 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f003 0310 	and.w	r3, r3, #16
 8004792:	2b10      	cmp	r3, #16
 8004794:	d0f0      	beq.n	8004778 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	00030d40 	.word	0x00030d40

080047a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b089      	sub	sp, #36	; 0x24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	4611      	mov	r1, r2
 80047b4:	461a      	mov	r2, r3
 80047b6:	460b      	mov	r3, r1
 80047b8:	71fb      	strb	r3, [r7, #7]
 80047ba:	4613      	mov	r3, r2
 80047bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80047c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d123      	bne.n	8004816 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80047ce:	88bb      	ldrh	r3, [r7, #4]
 80047d0:	3303      	adds	r3, #3
 80047d2:	089b      	lsrs	r3, r3, #2
 80047d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80047d6:	2300      	movs	r3, #0
 80047d8:	61bb      	str	r3, [r7, #24]
 80047da:	e018      	b.n	800480e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80047dc:	79fb      	ldrb	r3, [r7, #7]
 80047de:	031a      	lsls	r2, r3, #12
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e8:	461a      	mov	r2, r3
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	3301      	adds	r3, #1
 80047f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	3301      	adds	r3, #1
 80047fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	3301      	adds	r3, #1
 8004800:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	3301      	adds	r3, #1
 8004806:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	3301      	adds	r3, #1
 800480c:	61bb      	str	r3, [r7, #24]
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	429a      	cmp	r2, r3
 8004814:	d3e2      	bcc.n	80047dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3724      	adds	r7, #36	; 0x24
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004824:	b480      	push	{r7}
 8004826:	b08b      	sub	sp, #44	; 0x2c
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	4613      	mov	r3, r2
 8004830:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800483a:	88fb      	ldrh	r3, [r7, #6]
 800483c:	089b      	lsrs	r3, r3, #2
 800483e:	b29b      	uxth	r3, r3
 8004840:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004842:	88fb      	ldrh	r3, [r7, #6]
 8004844:	f003 0303 	and.w	r3, r3, #3
 8004848:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800484a:	2300      	movs	r3, #0
 800484c:	623b      	str	r3, [r7, #32]
 800484e:	e014      	b.n	800487a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	601a      	str	r2, [r3, #0]
    pDest++;
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	3301      	adds	r3, #1
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	3301      	adds	r3, #1
 8004866:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	3301      	adds	r3, #1
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	3301      	adds	r3, #1
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	3301      	adds	r3, #1
 8004878:	623b      	str	r3, [r7, #32]
 800487a:	6a3a      	ldr	r2, [r7, #32]
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	429a      	cmp	r2, r3
 8004880:	d3e6      	bcc.n	8004850 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004882:	8bfb      	ldrh	r3, [r7, #30]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d01e      	beq.n	80048c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004892:	461a      	mov	r2, r3
 8004894:	f107 0310 	add.w	r3, r7, #16
 8004898:	6812      	ldr	r2, [r2, #0]
 800489a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	fa22 f303 	lsr.w	r3, r2, r3
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	701a      	strb	r2, [r3, #0]
      i++;
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	3301      	adds	r3, #1
 80048b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	3301      	adds	r3, #1
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80048ba:	8bfb      	ldrh	r3, [r7, #30]
 80048bc:	3b01      	subs	r3, #1
 80048be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80048c0:	8bfb      	ldrh	r3, [r7, #30]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1ea      	bne.n	800489c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	372c      	adds	r7, #44	; 0x2c
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	4013      	ands	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80048ec:	68fb      	ldr	r3, [r7, #12]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	f003 0301 	and.w	r3, r3, #1
}
 800490a:	4618      	mov	r0, r3
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
	...

08004918 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	3301      	adds	r3, #1
 8004928:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4a13      	ldr	r2, [pc, #76]	; (800497c <USB_CoreReset+0x64>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d901      	bls.n	8004936 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e01b      	b.n	800496e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	2b00      	cmp	r3, #0
 800493c:	daf2      	bge.n	8004924 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f043 0201 	orr.w	r2, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	3301      	adds	r3, #1
 8004952:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4a09      	ldr	r2, [pc, #36]	; (800497c <USB_CoreReset+0x64>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d901      	bls.n	8004960 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e006      	b.n	800496e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b01      	cmp	r3, #1
 800496a:	d0f0      	beq.n	800494e <USB_CoreReset+0x36>

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	00030d40 	.word	0x00030d40

08004980 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004980:	b084      	sub	sp, #16
 8004982:	b580      	push	{r7, lr}
 8004984:	b086      	sub	sp, #24
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800498e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049a0:	461a      	mov	r2, r3
 80049a2:	2300      	movs	r3, #0
 80049a4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d018      	beq.n	8004a08 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80049d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d10a      	bne.n	80049f2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049ea:	f043 0304 	orr.w	r3, r3, #4
 80049ee:	6013      	str	r3, [r2, #0]
 80049f0:	e014      	b.n	8004a1c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a00:	f023 0304 	bic.w	r3, r3, #4
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	e009      	b.n	8004a1c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a16:	f023 0304 	bic.w	r3, r3, #4
 8004a1a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a1c:	2110      	movs	r1, #16
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7ff fe5e 	bl	80046e0 <USB_FlushTxFifo>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7ff fe8a 	bl	8004748 <USB_FlushRxFifo>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004a3e:	2300      	movs	r3, #0
 8004a40:	613b      	str	r3, [r7, #16]
 8004a42:	e015      	b.n	8004a70 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a50:	461a      	mov	r2, r3
 8004a52:	f04f 33ff 	mov.w	r3, #4294967295
 8004a56:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a64:	461a      	mov	r2, r3
 8004a66:	2300      	movs	r3, #0
 8004a68:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	613b      	str	r3, [r7, #16]
 8004a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d3e5      	bcc.n	8004a44 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f04f 32ff 	mov.w	r2, #4294967295
 8004a84:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00b      	beq.n	8004aaa <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a98:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a13      	ldr	r2, [pc, #76]	; (8004aec <USB_HostInit+0x16c>)
 8004a9e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a13      	ldr	r2, [pc, #76]	; (8004af0 <USB_HostInit+0x170>)
 8004aa4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004aa8:	e009      	b.n	8004abe <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2280      	movs	r2, #128	; 0x80
 8004aae:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a10      	ldr	r2, [pc, #64]	; (8004af4 <USB_HostInit+0x174>)
 8004ab4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a0f      	ldr	r2, [pc, #60]	; (8004af8 <USB_HostInit+0x178>)
 8004aba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d105      	bne.n	8004ad0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	f043 0210 	orr.w	r2, r3, #16
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699a      	ldr	r2, [r3, #24]
 8004ad4:	4b09      	ldr	r3, [pc, #36]	; (8004afc <USB_HostInit+0x17c>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3718      	adds	r7, #24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ae8:	b004      	add	sp, #16
 8004aea:	4770      	bx	lr
 8004aec:	01000200 	.word	0x01000200
 8004af0:	00e00300 	.word	0x00e00300
 8004af4:	00600080 	.word	0x00600080
 8004af8:	004000e0 	.word	0x004000e0
 8004afc:	a3200008 	.word	0xa3200008

08004b00 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b1e:	f023 0303 	bic.w	r3, r3, #3
 8004b22:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	78fb      	ldrb	r3, [r7, #3]
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	68f9      	ldr	r1, [r7, #12]
 8004b34:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004b3c:	78fb      	ldrb	r3, [r7, #3]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d107      	bne.n	8004b52 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b48:	461a      	mov	r2, r3
 8004b4a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004b4e:	6053      	str	r3, [r2, #4]
 8004b50:	e009      	b.n	8004b66 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004b52:	78fb      	ldrb	r3, [r7, #3]
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d106      	bne.n	8004b66 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b5e:	461a      	mov	r2, r3
 8004b60:	f241 7370 	movw	r3, #6000	; 0x1770
 8004b64:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b94:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004ba4:	2064      	movs	r0, #100	; 0x64
 8004ba6:	f7fc f95b 	bl	8000e60 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004bb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bb6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004bb8:	200a      	movs	r0, #10
 8004bba:	f7fc f951 	bl	8000e60 <HAL_Delay>

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004bec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d109      	bne.n	8004c0c <USB_DriveVbus+0x44>
 8004bf8:	78fb      	ldrb	r3, [r7, #3]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d106      	bne.n	8004c0c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c0a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c16:	d109      	bne.n	8004c2c <USB_DriveVbus+0x64>
 8004c18:	78fb      	ldrb	r3, [r7, #3]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c2a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b085      	sub	sp, #20
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	0c5b      	lsrs	r3, r3, #17
 8004c58:	f003 0303 	and.w	r3, r3, #3
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	b29b      	uxth	r3, r3
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
	...

08004c8c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b088      	sub	sp, #32
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	4608      	mov	r0, r1
 8004c96:	4611      	mov	r1, r2
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	70fb      	strb	r3, [r7, #3]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	70bb      	strb	r3, [r7, #2]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004cc2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d87e      	bhi.n	8004dc8 <USB_HC_Init+0x13c>
 8004cca:	a201      	add	r2, pc, #4	; (adr r2, 8004cd0 <USB_HC_Init+0x44>)
 8004ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd0:	08004ce1 	.word	0x08004ce1
 8004cd4:	08004d8b 	.word	0x08004d8b
 8004cd8:	08004ce1 	.word	0x08004ce1
 8004cdc:	08004d4d 	.word	0x08004d4d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cec:	461a      	mov	r2, r3
 8004cee:	f240 439d 	movw	r3, #1181	; 0x49d
 8004cf2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004cf4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	da10      	bge.n	8004d1e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004cfc:	78fb      	ldrb	r3, [r7, #3]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	78fa      	ldrb	r2, [r7, #3]
 8004d0c:	0151      	lsls	r1, r2, #5
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	440a      	add	r2, r1
 8004d12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d1a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004d1c:	e057      	b.n	8004dce <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d051      	beq.n	8004dce <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004d2a:	78fb      	ldrb	r3, [r7, #3]
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	78fa      	ldrb	r2, [r7, #3]
 8004d3a:	0151      	lsls	r1, r2, #5
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	440a      	add	r2, r1
 8004d40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d44:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004d48:	60d3      	str	r3, [r2, #12]
      break;
 8004d4a:	e040      	b.n	8004dce <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d4c:	78fb      	ldrb	r3, [r7, #3]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d58:	461a      	mov	r2, r3
 8004d5a:	f240 639d 	movw	r3, #1693	; 0x69d
 8004d5e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004d60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	da34      	bge.n	8004dd2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004d68:	78fb      	ldrb	r3, [r7, #3]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	78fa      	ldrb	r2, [r7, #3]
 8004d78:	0151      	lsls	r1, r2, #5
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	440a      	add	r2, r1
 8004d7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d86:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004d88:	e023      	b.n	8004dd2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d8a:	78fb      	ldrb	r3, [r7, #3]
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d96:	461a      	mov	r2, r3
 8004d98:	f240 2325 	movw	r3, #549	; 0x225
 8004d9c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004d9e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	da17      	bge.n	8004dd6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004da6:	78fb      	ldrb	r3, [r7, #3]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	78fa      	ldrb	r2, [r7, #3]
 8004db6:	0151      	lsls	r1, r2, #5
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	440a      	add	r2, r1
 8004dbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dc0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004dc4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004dc6:	e006      	b.n	8004dd6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	77fb      	strb	r3, [r7, #31]
      break;
 8004dcc:	e004      	b.n	8004dd8 <USB_HC_Init+0x14c>
      break;
 8004dce:	bf00      	nop
 8004dd0:	e002      	b.n	8004dd8 <USB_HC_Init+0x14c>
      break;
 8004dd2:	bf00      	nop
 8004dd4:	e000      	b.n	8004dd8 <USB_HC_Init+0x14c>
      break;
 8004dd6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	78fa      	ldrb	r2, [r7, #3]
 8004de8:	0151      	lsls	r1, r2, #5
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	440a      	add	r2, r1
 8004dee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004df2:	f043 0302 	orr.w	r3, r3, #2
 8004df6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dfe:	699a      	ldr	r2, [r3, #24]
 8004e00:	78fb      	ldrb	r3, [r7, #3]
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	2101      	movs	r1, #1
 8004e08:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0c:	6939      	ldr	r1, [r7, #16]
 8004e0e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e12:	4313      	orrs	r3, r2
 8004e14:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004e22:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	da03      	bge.n	8004e32 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e2e:	61bb      	str	r3, [r7, #24]
 8004e30:	e001      	b.n	8004e36 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7ff feff 	bl	8004c3a <USB_GetHostSpeed>
 8004e3c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004e3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d106      	bne.n	8004e54 <USB_HC_Init+0x1c8>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d003      	beq.n	8004e54 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004e4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	e001      	b.n	8004e58 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e58:	787b      	ldrb	r3, [r7, #1]
 8004e5a:	059b      	lsls	r3, r3, #22
 8004e5c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e60:	78bb      	ldrb	r3, [r7, #2]
 8004e62:	02db      	lsls	r3, r3, #11
 8004e64:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e68:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e6e:	049b      	lsls	r3, r3, #18
 8004e70:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e74:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e76:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004e78:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e7c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e82:	78fb      	ldrb	r3, [r7, #3]
 8004e84:	0159      	lsls	r1, r3, #5
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	440b      	add	r3, r1
 8004e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e8e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e94:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004e96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d003      	beq.n	8004ea6 <USB_HC_Init+0x21a>
 8004e9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d10f      	bne.n	8004ec6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004ea6:	78fb      	ldrb	r3, [r7, #3]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	78fa      	ldrb	r2, [r7, #3]
 8004eb6:	0151      	lsls	r1, r2, #5
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	440a      	add	r2, r1
 8004ebc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ec0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ec4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004ec6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3720      	adds	r7, #32
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08c      	sub	sp, #48	; 0x30
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	4613      	mov	r3, r2
 8004edc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	785b      	ldrb	r3, [r3, #1]
 8004ee6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004ee8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004eec:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d02d      	beq.n	8004f56 <USB_HC_StartXfer+0x86>
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	791b      	ldrb	r3, [r3, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d129      	bne.n	8004f56 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004f02:	79fb      	ldrb	r3, [r7, #7]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d117      	bne.n	8004f38 <USB_HC_StartXfer+0x68>
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	79db      	ldrb	r3, [r3, #7]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d003      	beq.n	8004f18 <USB_HC_StartXfer+0x48>
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	79db      	ldrb	r3, [r3, #7]
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d10f      	bne.n	8004f38 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	69fa      	ldr	r2, [r7, #28]
 8004f28:	0151      	lsls	r1, r2, #5
 8004f2a:	6a3a      	ldr	r2, [r7, #32]
 8004f2c:	440a      	add	r2, r1
 8004f2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f36:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004f38:	79fb      	ldrb	r3, [r7, #7]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10b      	bne.n	8004f56 <USB_HC_StartXfer+0x86>
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	795b      	ldrb	r3, [r3, #5]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d107      	bne.n	8004f56 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	785b      	ldrb	r3, [r3, #1]
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 fa0f 	bl	8005370 <USB_DoPing>
      return HAL_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	e0f8      	b.n	8005148 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d018      	beq.n	8004f90 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	8912      	ldrh	r2, [r2, #8]
 8004f66:	4413      	add	r3, r2
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	8912      	ldrh	r2, [r2, #8]
 8004f6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f72:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004f74:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004f76:	8b7b      	ldrh	r3, [r7, #26]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d90b      	bls.n	8004f94 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004f7c:	8b7b      	ldrh	r3, [r7, #26]
 8004f7e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004f80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	8912      	ldrh	r2, [r2, #8]
 8004f86:	fb03 f202 	mul.w	r2, r3, r2
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	611a      	str	r2, [r3, #16]
 8004f8e:	e001      	b.n	8004f94 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004f90:	2301      	movs	r3, #1
 8004f92:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	78db      	ldrb	r3, [r3, #3]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d007      	beq.n	8004fac <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004f9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	8912      	ldrh	r2, [r2, #8]
 8004fa2:	fb03 f202 	mul.w	r2, r3, r2
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	611a      	str	r2, [r3, #16]
 8004faa:	e003      	b.n	8004fb4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	695a      	ldr	r2, [r3, #20]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004fbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fbe:	04d9      	lsls	r1, r3, #19
 8004fc0:	4b63      	ldr	r3, [pc, #396]	; (8005150 <USB_HC_StartXfer+0x280>)
 8004fc2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fc4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	7a9b      	ldrb	r3, [r3, #10]
 8004fca:	075b      	lsls	r3, r3, #29
 8004fcc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fd0:	69f9      	ldr	r1, [r7, #28]
 8004fd2:	0148      	lsls	r0, r1, #5
 8004fd4:	6a39      	ldr	r1, [r7, #32]
 8004fd6:	4401      	add	r1, r0
 8004fd8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004fdc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fde:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004fe0:	79fb      	ldrb	r3, [r7, #7]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d009      	beq.n	8004ffa <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	68d9      	ldr	r1, [r3, #12]
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff6:	460a      	mov	r2, r1
 8004ff8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004ffa:	6a3b      	ldr	r3, [r7, #32]
 8004ffc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	bf0c      	ite	eq
 800500a:	2301      	moveq	r3, #1
 800500c:	2300      	movne	r3, #0
 800500e:	b2db      	uxtb	r3, r3
 8005010:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	4413      	add	r3, r2
 800501a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	69fa      	ldr	r2, [r7, #28]
 8005022:	0151      	lsls	r1, r2, #5
 8005024:	6a3a      	ldr	r2, [r7, #32]
 8005026:	440a      	add	r2, r1
 8005028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800502c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005030:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	4413      	add	r3, r2
 800503a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	7e7b      	ldrb	r3, [r7, #25]
 8005042:	075b      	lsls	r3, r3, #29
 8005044:	69f9      	ldr	r1, [r7, #28]
 8005046:	0148      	lsls	r0, r1, #5
 8005048:	6a39      	ldr	r1, [r7, #32]
 800504a:	4401      	add	r1, r0
 800504c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005050:	4313      	orrs	r3, r2
 8005052:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	4413      	add	r3, r2
 800505c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800506a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	78db      	ldrb	r3, [r3, #3]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d004      	beq.n	800507e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800507a:	613b      	str	r3, [r7, #16]
 800507c:	e003      	b.n	8005086 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005084:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800508c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	4413      	add	r3, r2
 8005096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509a:	461a      	mov	r2, r3
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80050a0:	79fb      	ldrb	r3, [r7, #7]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	e04e      	b.n	8005148 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	78db      	ldrb	r3, [r3, #3]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d149      	bne.n	8005146 <USB_HC_StartXfer+0x276>
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d045      	beq.n	8005146 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	79db      	ldrb	r3, [r3, #7]
 80050be:	2b03      	cmp	r3, #3
 80050c0:	d830      	bhi.n	8005124 <USB_HC_StartXfer+0x254>
 80050c2:	a201      	add	r2, pc, #4	; (adr r2, 80050c8 <USB_HC_StartXfer+0x1f8>)
 80050c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c8:	080050d9 	.word	0x080050d9
 80050cc:	080050fd 	.word	0x080050fd
 80050d0:	080050d9 	.word	0x080050d9
 80050d4:	080050fd 	.word	0x080050fd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	3303      	adds	r3, #3
 80050de:	089b      	lsrs	r3, r3, #2
 80050e0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80050e2:	8afa      	ldrh	r2, [r7, #22]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d91c      	bls.n	8005128 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	f043 0220 	orr.w	r2, r3, #32
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	619a      	str	r2, [r3, #24]
        }
        break;
 80050fa:	e015      	b.n	8005128 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	3303      	adds	r3, #3
 8005102:	089b      	lsrs	r3, r3, #2
 8005104:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005106:	8afa      	ldrh	r2, [r7, #22]
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	b29b      	uxth	r3, r3
 8005112:	429a      	cmp	r2, r3
 8005114:	d90a      	bls.n	800512c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	619a      	str	r2, [r3, #24]
        }
        break;
 8005122:	e003      	b.n	800512c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005124:	bf00      	nop
 8005126:	e002      	b.n	800512e <USB_HC_StartXfer+0x25e>
        break;
 8005128:	bf00      	nop
 800512a:	e000      	b.n	800512e <USB_HC_StartXfer+0x25e>
        break;
 800512c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	68d9      	ldr	r1, [r3, #12]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	785a      	ldrb	r2, [r3, #1]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	b29b      	uxth	r3, r3
 800513c:	2000      	movs	r0, #0
 800513e:	9000      	str	r0, [sp, #0]
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f7ff fb31 	bl	80047a8 <USB_WritePacket>
  }

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3728      	adds	r7, #40	; 0x28
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	1ff80000 	.word	0x1ff80000

08005154 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	b29b      	uxth	r3, r3
}
 800516a:	4618      	mov	r0, r3
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005176:	b480      	push	{r7}
 8005178:	b089      	sub	sp, #36	; 0x24
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	460b      	mov	r3, r1
 8005180:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005186:	78fb      	ldrb	r3, [r7, #3]
 8005188:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800518a:	2300      	movs	r3, #0
 800518c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	4413      	add	r3, r2
 8005196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	0c9b      	lsrs	r3, r3, #18
 800519e:	f003 0303 	and.w	r3, r3, #3
 80051a2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	0fdb      	lsrs	r3, r3, #31
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	2b20      	cmp	r3, #32
 80051c4:	d104      	bne.n	80051d0 <USB_HC_Halt+0x5a>
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	e0c8      	b.n	8005362 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <USB_HC_Halt+0x66>
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d163      	bne.n	80052a4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	0151      	lsls	r1, r2, #5
 80051ee:	69fa      	ldr	r2, [r7, #28]
 80051f0:	440a      	add	r2, r1
 80051f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051fa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f003 0320 	and.w	r3, r3, #32
 8005204:	2b00      	cmp	r3, #0
 8005206:	f040 80ab 	bne.w	8005360 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d133      	bne.n	800527e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	4413      	add	r3, r2
 800521e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	0151      	lsls	r1, r2, #5
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	440a      	add	r2, r1
 800522c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005230:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005234:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	4413      	add	r3, r2
 800523e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	0151      	lsls	r1, r2, #5
 8005248:	69fa      	ldr	r2, [r7, #28]
 800524a:	440a      	add	r2, r1
 800524c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005250:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005254:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	3301      	adds	r3, #1
 800525a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005262:	d81d      	bhi.n	80052a0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	4413      	add	r3, r2
 800526c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005276:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800527a:	d0ec      	beq.n	8005256 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800527c:	e070      	b.n	8005360 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	4413      	add	r3, r2
 8005286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	0151      	lsls	r1, r2, #5
 8005290:	69fa      	ldr	r2, [r7, #28]
 8005292:	440a      	add	r2, r1
 8005294:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005298:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800529c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800529e:	e05f      	b.n	8005360 <USB_HC_Halt+0x1ea>
            break;
 80052a0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80052a2:	e05d      	b.n	8005360 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	0151      	lsls	r1, r2, #5
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	440a      	add	r2, r1
 80052ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052c2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d133      	bne.n	800533c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	0151      	lsls	r1, r2, #5
 80052e6:	69fa      	ldr	r2, [r7, #28]
 80052e8:	440a      	add	r2, r1
 80052ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052f2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	0151      	lsls	r1, r2, #5
 8005306:	69fa      	ldr	r2, [r7, #28]
 8005308:	440a      	add	r2, r1
 800530a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800530e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005312:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	3301      	adds	r3, #1
 8005318:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005320:	d81d      	bhi.n	800535e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	4413      	add	r3, r2
 800532a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005334:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005338:	d0ec      	beq.n	8005314 <USB_HC_Halt+0x19e>
 800533a:	e011      	b.n	8005360 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	4413      	add	r3, r2
 8005344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	0151      	lsls	r1, r2, #5
 800534e:	69fa      	ldr	r2, [r7, #28]
 8005350:	440a      	add	r2, r1
 8005352:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005356:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800535a:	6013      	str	r3, [r2, #0]
 800535c:	e000      	b.n	8005360 <USB_HC_Halt+0x1ea>
          break;
 800535e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3724      	adds	r7, #36	; 0x24
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
	...

08005370 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	460b      	mov	r3, r1
 800537a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005380:	78fb      	ldrb	r3, [r7, #3]
 8005382:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005384:	2301      	movs	r3, #1
 8005386:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	04da      	lsls	r2, r3, #19
 800538c:	4b15      	ldr	r3, [pc, #84]	; (80053e4 <USB_DoPing+0x74>)
 800538e:	4013      	ands	r3, r2
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	0151      	lsls	r1, r2, #5
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	440a      	add	r2, r1
 8005398:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800539c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053a0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053b8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053c0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ce:	461a      	mov	r2, r3
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	371c      	adds	r7, #28
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	1ff80000 	.word	0x1ff80000

080053e8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80053f0:	2300      	movs	r3, #0
 80053f2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f7ff f912 	bl	8004626 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005402:	2110      	movs	r1, #16
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f7ff f96b 	bl	80046e0 <USB_FlushTxFifo>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff f997 	bl	8004748 <USB_FlushRxFifo>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005424:	2300      	movs	r3, #0
 8005426:	61bb      	str	r3, [r7, #24]
 8005428:	e01f      	b.n	800546a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	4413      	add	r3, r2
 8005432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005440:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005448:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005450:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	4413      	add	r3, r2
 800545a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800545e:	461a      	mov	r2, r3
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	3301      	adds	r3, #1
 8005468:	61bb      	str	r3, [r7, #24]
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	2b0f      	cmp	r3, #15
 800546e:	d9dc      	bls.n	800542a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005470:	2300      	movs	r3, #0
 8005472:	61bb      	str	r3, [r7, #24]
 8005474:	e034      	b.n	80054e0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	4413      	add	r3, r2
 800547e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800548c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005494:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800549c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054aa:	461a      	mov	r2, r3
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	3301      	adds	r3, #1
 80054b4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054bc:	d80c      	bhi.n	80054d8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054d4:	d0ec      	beq.n	80054b0 <USB_StopHost+0xc8>
 80054d6:	e000      	b.n	80054da <USB_StopHost+0xf2>
        break;
 80054d8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	3301      	adds	r3, #1
 80054de:	61bb      	str	r3, [r7, #24]
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	2b0f      	cmp	r3, #15
 80054e4:	d9c7      	bls.n	8005476 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054ec:	461a      	mov	r2, r3
 80054ee:	f04f 33ff 	mov.w	r3, #4294967295
 80054f2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f04f 32ff 	mov.w	r2, #4294967295
 80054fa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff f881 	bl	8004604 <USB_EnableGlobalInt>

  return ret;
 8005502:	7ffb      	ldrb	r3, [r7, #31]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3720      	adds	r7, #32
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800550c:	b590      	push	{r4, r7, lr}
 800550e:	b089      	sub	sp, #36	; 0x24
 8005510:	af04      	add	r7, sp, #16
 8005512:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005514:	2301      	movs	r3, #1
 8005516:	2202      	movs	r2, #2
 8005518:	2102      	movs	r1, #2
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fc66 	bl	8005dec <USBH_FindInterface>
 8005520:	4603      	mov	r3, r0
 8005522:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005524:	7bfb      	ldrb	r3, [r7, #15]
 8005526:	2bff      	cmp	r3, #255	; 0xff
 8005528:	d002      	beq.n	8005530 <USBH_CDC_InterfaceInit+0x24>
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d901      	bls.n	8005534 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005530:	2302      	movs	r3, #2
 8005532:	e13d      	b.n	80057b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005534:	7bfb      	ldrb	r3, [r7, #15]
 8005536:	4619      	mov	r1, r3
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 fc3b 	bl	8005db4 <USBH_SelectInterface>
 800553e:	4603      	mov	r3, r0
 8005540:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005542:	7bbb      	ldrb	r3, [r7, #14]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005548:	2302      	movs	r3, #2
 800554a:	e131      	b.n	80057b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005552:	2050      	movs	r0, #80	; 0x50
 8005554:	f002 fafa 	bl	8007b4c <malloc>
 8005558:	4603      	mov	r3, r0
 800555a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800556c:	2302      	movs	r3, #2
 800556e:	e11f      	b.n	80057b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005570:	2250      	movs	r2, #80	; 0x50
 8005572:	2100      	movs	r1, #0
 8005574:	68b8      	ldr	r0, [r7, #8]
 8005576:	f002 faf9 	bl	8007b6c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800557a:	7bfb      	ldrb	r3, [r7, #15]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	211a      	movs	r1, #26
 8005580:	fb01 f303 	mul.w	r3, r1, r3
 8005584:	4413      	add	r3, r2
 8005586:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	b25b      	sxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	da15      	bge.n	80055be <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005592:	7bfb      	ldrb	r3, [r7, #15]
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	211a      	movs	r1, #26
 8005598:	fb01 f303 	mul.w	r3, r1, r3
 800559c:	4413      	add	r3, r2
 800559e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80055a2:	781a      	ldrb	r2, [r3, #0]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	211a      	movs	r1, #26
 80055ae:	fb01 f303 	mul.w	r3, r1, r3
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80055b8:	881a      	ldrh	r2, [r3, #0]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	785b      	ldrb	r3, [r3, #1]
 80055c2:	4619      	mov	r1, r3
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f001 ff2c 	bl	8007422 <USBH_AllocPipe>
 80055ca:	4603      	mov	r3, r0
 80055cc:	461a      	mov	r2, r3
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	7819      	ldrb	r1, [r3, #0]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	7858      	ldrb	r0, [r3, #1]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	8952      	ldrh	r2, [r2, #10]
 80055ea:	9202      	str	r2, [sp, #8]
 80055ec:	2203      	movs	r2, #3
 80055ee:	9201      	str	r2, [sp, #4]
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	4623      	mov	r3, r4
 80055f4:	4602      	mov	r2, r0
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f001 fee4 	bl	80073c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	2200      	movs	r2, #0
 8005602:	4619      	mov	r1, r3
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f002 f9f3 	bl	80079f0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800560a:	2300      	movs	r3, #0
 800560c:	2200      	movs	r2, #0
 800560e:	210a      	movs	r1, #10
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fbeb 	bl	8005dec <USBH_FindInterface>
 8005616:	4603      	mov	r3, r0
 8005618:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800561a:	7bfb      	ldrb	r3, [r7, #15]
 800561c:	2bff      	cmp	r3, #255	; 0xff
 800561e:	d002      	beq.n	8005626 <USBH_CDC_InterfaceInit+0x11a>
 8005620:	7bfb      	ldrb	r3, [r7, #15]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d901      	bls.n	800562a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005626:	2302      	movs	r3, #2
 8005628:	e0c2      	b.n	80057b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800562a:	7bfb      	ldrb	r3, [r7, #15]
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	211a      	movs	r1, #26
 8005630:	fb01 f303 	mul.w	r3, r1, r3
 8005634:	4413      	add	r3, r2
 8005636:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	b25b      	sxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	da16      	bge.n	8005670 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005642:	7bfb      	ldrb	r3, [r7, #15]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	211a      	movs	r1, #26
 8005648:	fb01 f303 	mul.w	r3, r1, r3
 800564c:	4413      	add	r3, r2
 800564e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005652:	781a      	ldrb	r2, [r3, #0]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005658:	7bfb      	ldrb	r3, [r7, #15]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	211a      	movs	r1, #26
 800565e:	fb01 f303 	mul.w	r3, r1, r3
 8005662:	4413      	add	r3, r2
 8005664:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005668:	881a      	ldrh	r2, [r3, #0]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	835a      	strh	r2, [r3, #26]
 800566e:	e015      	b.n	800569c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	211a      	movs	r1, #26
 8005676:	fb01 f303 	mul.w	r3, r1, r3
 800567a:	4413      	add	r3, r2
 800567c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005680:	781a      	ldrb	r2, [r3, #0]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005686:	7bfb      	ldrb	r3, [r7, #15]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	211a      	movs	r1, #26
 800568c:	fb01 f303 	mul.w	r3, r1, r3
 8005690:	4413      	add	r3, r2
 8005692:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005696:	881a      	ldrh	r2, [r3, #0]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800569c:	7bfb      	ldrb	r3, [r7, #15]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	211a      	movs	r1, #26
 80056a2:	fb01 f303 	mul.w	r3, r1, r3
 80056a6:	4413      	add	r3, r2
 80056a8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	b25b      	sxtb	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	da16      	bge.n	80056e2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	211a      	movs	r1, #26
 80056ba:	fb01 f303 	mul.w	r3, r1, r3
 80056be:	4413      	add	r3, r2
 80056c0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80056c4:	781a      	ldrb	r2, [r3, #0]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80056ca:	7bfb      	ldrb	r3, [r7, #15]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	211a      	movs	r1, #26
 80056d0:	fb01 f303 	mul.w	r3, r1, r3
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80056da:	881a      	ldrh	r2, [r3, #0]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	835a      	strh	r2, [r3, #26]
 80056e0:	e015      	b.n	800570e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	211a      	movs	r1, #26
 80056e8:	fb01 f303 	mul.w	r3, r1, r3
 80056ec:	4413      	add	r3, r2
 80056ee:	f203 3356 	addw	r3, r3, #854	; 0x356
 80056f2:	781a      	ldrb	r2, [r3, #0]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	211a      	movs	r1, #26
 80056fe:	fb01 f303 	mul.w	r3, r1, r3
 8005702:	4413      	add	r3, r2
 8005704:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005708:	881a      	ldrh	r2, [r3, #0]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	7b9b      	ldrb	r3, [r3, #14]
 8005712:	4619      	mov	r1, r3
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f001 fe84 	bl	8007422 <USBH_AllocPipe>
 800571a:	4603      	mov	r3, r0
 800571c:	461a      	mov	r2, r3
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	7bdb      	ldrb	r3, [r3, #15]
 8005726:	4619      	mov	r1, r3
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f001 fe7a 	bl	8007422 <USBH_AllocPipe>
 800572e:	4603      	mov	r3, r0
 8005730:	461a      	mov	r2, r3
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	7b59      	ldrb	r1, [r3, #13]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	7b98      	ldrb	r0, [r3, #14]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	8b12      	ldrh	r2, [r2, #24]
 800574e:	9202      	str	r2, [sp, #8]
 8005750:	2202      	movs	r2, #2
 8005752:	9201      	str	r2, [sp, #4]
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	4623      	mov	r3, r4
 8005758:	4602      	mov	r2, r0
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f001 fe32 	bl	80073c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	7b19      	ldrb	r1, [r3, #12]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	7bd8      	ldrb	r0, [r3, #15]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	8b52      	ldrh	r2, [r2, #26]
 8005778:	9202      	str	r2, [sp, #8]
 800577a:	2202      	movs	r2, #2
 800577c:	9201      	str	r2, [sp, #4]
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	4623      	mov	r3, r4
 8005782:	4602      	mov	r2, r0
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f001 fe1d 	bl	80073c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	7b5b      	ldrb	r3, [r3, #13]
 8005796:	2200      	movs	r2, #0
 8005798:	4619      	mov	r1, r3
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f002 f928 	bl	80079f0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	7b1b      	ldrb	r3, [r3, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	4619      	mov	r1, r3
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f002 f921 	bl	80079f0 <USBH_LL_SetToggle>

  return USBH_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd90      	pop	{r4, r7, pc}

080057b8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00e      	beq.n	80057f0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	4619      	mov	r1, r3
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f001 fe12 	bl	8007402 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	4619      	mov	r1, r3
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f001 fe3d 	bl	8007464 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	7b1b      	ldrb	r3, [r3, #12]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00e      	beq.n	8005816 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	7b1b      	ldrb	r3, [r3, #12]
 80057fc:	4619      	mov	r1, r3
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f001 fdff 	bl	8007402 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	7b1b      	ldrb	r3, [r3, #12]
 8005808:	4619      	mov	r1, r3
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f001 fe2a 	bl	8007464 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	7b5b      	ldrb	r3, [r3, #13]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00e      	beq.n	800583c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	7b5b      	ldrb	r3, [r3, #13]
 8005822:	4619      	mov	r1, r3
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f001 fdec 	bl	8007402 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	7b5b      	ldrb	r3, [r3, #13]
 800582e:	4619      	mov	r1, r3
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f001 fe17 	bl	8007464 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00b      	beq.n	8005860 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800584e:	69db      	ldr	r3, [r3, #28]
 8005850:	4618      	mov	r0, r3
 8005852:	f002 f983 	bl	8007b5c <free>
    phost->pActiveClass->pData = 0U;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800585c:	2200      	movs	r2, #0
 800585e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b084      	sub	sp, #16
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	3340      	adds	r3, #64	; 0x40
 8005880:	4619      	mov	r1, r3
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f8b1 	bl	80059ea <GetLineCoding>
 8005888:	4603      	mov	r3, r0
 800588a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800588c:	7afb      	ldrb	r3, [r7, #11]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d105      	bne.n	800589e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005898:	2102      	movs	r1, #2
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800589e:	7afb      	ldrb	r3, [r7, #11]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80058b0:	2301      	movs	r3, #1
 80058b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80058b4:	2300      	movs	r3, #0
 80058b6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058be:	69db      	ldr	r3, [r3, #28]
 80058c0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80058c8:	2b04      	cmp	r3, #4
 80058ca:	d877      	bhi.n	80059bc <USBH_CDC_Process+0x114>
 80058cc:	a201      	add	r2, pc, #4	; (adr r2, 80058d4 <USBH_CDC_Process+0x2c>)
 80058ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d2:	bf00      	nop
 80058d4:	080058e9 	.word	0x080058e9
 80058d8:	080058ef 	.word	0x080058ef
 80058dc:	0800591f 	.word	0x0800591f
 80058e0:	08005993 	.word	0x08005993
 80058e4:	080059a1 	.word	0x080059a1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80058e8:	2300      	movs	r3, #0
 80058ea:	73fb      	strb	r3, [r7, #15]
      break;
 80058ec:	e06d      	b.n	80059ca <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058f2:	4619      	mov	r1, r3
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f897 	bl	8005a28 <SetLineCoding>
 80058fa:	4603      	mov	r3, r0
 80058fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80058fe:	7bbb      	ldrb	r3, [r7, #14]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d104      	bne.n	800590e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800590c:	e058      	b.n	80059c0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800590e:	7bbb      	ldrb	r3, [r7, #14]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d055      	beq.n	80059c0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2204      	movs	r2, #4
 8005918:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800591c:	e050      	b.n	80059c0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	3340      	adds	r3, #64	; 0x40
 8005922:	4619      	mov	r1, r3
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f860 	bl	80059ea <GetLineCoding>
 800592a:	4603      	mov	r3, r0
 800592c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800592e:	7bbb      	ldrb	r3, [r7, #14]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d126      	bne.n	8005982 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005946:	791b      	ldrb	r3, [r3, #4]
 8005948:	429a      	cmp	r2, r3
 800594a:	d13b      	bne.n	80059c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005956:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005958:	429a      	cmp	r2, r3
 800595a:	d133      	bne.n	80059c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005966:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005968:	429a      	cmp	r2, r3
 800596a:	d12b      	bne.n	80059c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005974:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005976:	429a      	cmp	r2, r3
 8005978:	d124      	bne.n	80059c4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f958 	bl	8005c30 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005980:	e020      	b.n	80059c4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005982:	7bbb      	ldrb	r3, [r7, #14]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d01d      	beq.n	80059c4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2204      	movs	r2, #4
 800598c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005990:	e018      	b.n	80059c4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f867 	bl	8005a66 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f8da 	bl	8005b52 <CDC_ProcessReception>
      break;
 800599e:	e014      	b.n	80059ca <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80059a0:	2100      	movs	r1, #0
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 ffef 	bl	8006986 <USBH_ClrFeature>
 80059a8:	4603      	mov	r3, r0
 80059aa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80059ac:	7bbb      	ldrb	r3, [r7, #14]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10a      	bne.n	80059c8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80059ba:	e005      	b.n	80059c8 <USBH_CDC_Process+0x120>

    default:
      break;
 80059bc:	bf00      	nop
 80059be:	e004      	b.n	80059ca <USBH_CDC_Process+0x122>
      break;
 80059c0:	bf00      	nop
 80059c2:	e002      	b.n	80059ca <USBH_CDC_Process+0x122>
      break;
 80059c4:	bf00      	nop
 80059c6:	e000      	b.n	80059ca <USBH_CDC_Process+0x122>
      break;
 80059c8:	bf00      	nop

  }

  return status;
 80059ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b082      	sub	sp, #8
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	22a1      	movs	r2, #161	; 0xa1
 80059f8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2221      	movs	r2, #33	; 0x21
 80059fe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2207      	movs	r2, #7
 8005a10:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2207      	movs	r2, #7
 8005a16:	4619      	mov	r1, r3
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f001 fa81 	bl	8006f20 <USBH_CtlReq>
 8005a1e:	4603      	mov	r3, r0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2221      	movs	r2, #33	; 0x21
 8005a36:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2207      	movs	r2, #7
 8005a4e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	2207      	movs	r2, #7
 8005a54:	4619      	mov	r1, r3
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f001 fa62 	bl	8006f20 <USBH_CtlReq>
 8005a5c:	4603      	mov	r3, r0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b086      	sub	sp, #24
 8005a6a:	af02      	add	r7, sp, #8
 8005a6c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d002      	beq.n	8005a8c <CDC_ProcessTransmission+0x26>
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d023      	beq.n	8005ad2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005a8a:	e05e      	b.n	8005b4a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	8b12      	ldrh	r2, [r2, #24]
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d90b      	bls.n	8005ab0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	69d9      	ldr	r1, [r3, #28]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8b1a      	ldrh	r2, [r3, #24]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	7b5b      	ldrb	r3, [r3, #13]
 8005aa4:	2001      	movs	r0, #1
 8005aa6:	9000      	str	r0, [sp, #0]
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f001 fc48 	bl	800733e <USBH_BulkSendData>
 8005aae:	e00b      	b.n	8005ac8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	7b5b      	ldrb	r3, [r3, #13]
 8005abe:	2001      	movs	r0, #1
 8005ac0:	9000      	str	r0, [sp, #0]
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f001 fc3b 	bl	800733e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005ad0:	e03b      	b.n	8005b4a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	7b5b      	ldrb	r3, [r3, #13]
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f001 ff5f 	bl	800799c <USBH_LL_GetURBState>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005ae2:	7afb      	ldrb	r3, [r7, #11]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d128      	bne.n	8005b3a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	8b12      	ldrh	r2, [r2, #24]
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d90e      	bls.n	8005b12 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	8b12      	ldrh	r2, [r2, #24]
 8005afc:	1a9a      	subs	r2, r3, r2
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	8b12      	ldrh	r2, [r2, #24]
 8005b0a:	441a      	add	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	61da      	str	r2, [r3, #28]
 8005b10:	e002      	b.n	8005b18 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d004      	beq.n	8005b2a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005b28:	e00e      	b.n	8005b48 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f868 	bl	8005c08 <USBH_CDC_TransmitCallback>
      break;
 8005b38:	e006      	b.n	8005b48 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005b3a:	7afb      	ldrb	r3, [r7, #11]
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d103      	bne.n	8005b48 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005b48:	bf00      	nop
  }
}
 8005b4a:	bf00      	nop
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b086      	sub	sp, #24
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005b64:	2300      	movs	r3, #0
 8005b66:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005b6e:	2b03      	cmp	r3, #3
 8005b70:	d002      	beq.n	8005b78 <CDC_ProcessReception+0x26>
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d00e      	beq.n	8005b94 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005b76:	e043      	b.n	8005c00 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	6a19      	ldr	r1, [r3, #32]
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	8b5a      	ldrh	r2, [r3, #26]
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	7b1b      	ldrb	r3, [r3, #12]
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f001 fbff 	bl	8007388 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2204      	movs	r2, #4
 8005b8e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005b92:	e035      	b.n	8005c00 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	7b1b      	ldrb	r3, [r3, #12]
 8005b98:	4619      	mov	r1, r3
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f001 fefe 	bl	800799c <USBH_LL_GetURBState>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005ba4:	7cfb      	ldrb	r3, [r7, #19]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d129      	bne.n	8005bfe <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	7b1b      	ldrb	r3, [r3, #12]
 8005bae:	4619      	mov	r1, r3
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f001 fe61 	bl	8007878 <USBH_LL_GetLastXferSize>
 8005bb6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d016      	beq.n	8005bf0 <CDC_ProcessReception+0x9e>
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	8b5b      	ldrh	r3, [r3, #26]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d910      	bls.n	8005bf0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	1ad2      	subs	r2, r2, r3
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	6a1a      	ldr	r2, [r3, #32]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	441a      	add	r2, r3
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2203      	movs	r2, #3
 8005bea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005bee:	e006      	b.n	8005bfe <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f80f 	bl	8005c1c <USBH_CDC_ReceiveCallback>
      break;
 8005bfe:	bf00      	nop
  }
}
 8005c00:	bf00      	nop
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005c58:	2302      	movs	r3, #2
 8005c5a:	e029      	b.n	8005cb0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	79fa      	ldrb	r2, [r7, #7]
 8005c60:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 f81f 	bl	8005cb8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f001 fd31 	bl	8007710 <USBH_LL_Init>

  return USBH_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	e009      	b.n	8005cde <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	33e0      	adds	r3, #224	; 0xe0
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b0f      	cmp	r3, #15
 8005ce2:	d9f2      	bls.n	8005cca <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60fb      	str	r3, [r7, #12]
 8005ce8:	e009      	b.n	8005cfe <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	60fb      	str	r3, [r7, #12]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d04:	d3f1      	bcc.n	8005cea <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2240      	movs	r2, #64	; 0x40
 8005d2a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d016      	beq.n	8005da2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10e      	bne.n	8005d9c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005d84:	1c59      	adds	r1, r3, #1
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	33de      	adds	r3, #222	; 0xde
 8005d90:	6839      	ldr	r1, [r7, #0]
 8005d92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	73fb      	strb	r3, [r7, #15]
 8005d9a:	e004      	b.n	8005da6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	73fb      	strb	r3, [r7, #15]
 8005da0:	e001      	b.n	8005da6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005da2:	2302      	movs	r3, #2
 8005da4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005dca:	78fa      	ldrb	r2, [r7, #3]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d204      	bcs.n	8005dda <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	78fa      	ldrb	r2, [r7, #3]
 8005dd4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005dd8:	e001      	b.n	8005dde <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005dda:	2302      	movs	r3, #2
 8005ddc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	4608      	mov	r0, r1
 8005df6:	4611      	mov	r1, r2
 8005df8:	461a      	mov	r2, r3
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	70fb      	strb	r3, [r7, #3]
 8005dfe:	460b      	mov	r3, r1
 8005e00:	70bb      	strb	r3, [r7, #2]
 8005e02:	4613      	mov	r3, r2
 8005e04:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005e06:	2300      	movs	r3, #0
 8005e08:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005e14:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005e16:	e025      	b.n	8005e64 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005e18:	7dfb      	ldrb	r3, [r7, #23]
 8005e1a:	221a      	movs	r2, #26
 8005e1c:	fb02 f303 	mul.w	r3, r2, r3
 8005e20:	3308      	adds	r3, #8
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4413      	add	r3, r2
 8005e26:	3302      	adds	r3, #2
 8005e28:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	795b      	ldrb	r3, [r3, #5]
 8005e2e:	78fa      	ldrb	r2, [r7, #3]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d002      	beq.n	8005e3a <USBH_FindInterface+0x4e>
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	2bff      	cmp	r3, #255	; 0xff
 8005e38:	d111      	bne.n	8005e5e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005e3e:	78ba      	ldrb	r2, [r7, #2]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d002      	beq.n	8005e4a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e44:	78bb      	ldrb	r3, [r7, #2]
 8005e46:	2bff      	cmp	r3, #255	; 0xff
 8005e48:	d109      	bne.n	8005e5e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e4e:	787a      	ldrb	r2, [r7, #1]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d002      	beq.n	8005e5a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005e54:	787b      	ldrb	r3, [r7, #1]
 8005e56:	2bff      	cmp	r3, #255	; 0xff
 8005e58:	d101      	bne.n	8005e5e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005e5a:	7dfb      	ldrb	r3, [r7, #23]
 8005e5c:	e006      	b.n	8005e6c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005e5e:	7dfb      	ldrb	r3, [r7, #23]
 8005e60:	3301      	adds	r3, #1
 8005e62:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005e64:	7dfb      	ldrb	r3, [r7, #23]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d9d6      	bls.n	8005e18 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005e6a:	23ff      	movs	r3, #255	; 0xff
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	371c      	adds	r7, #28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f001 fc81 	bl	8007788 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005e86:	2101      	movs	r1, #1
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f001 fd9a 	bl	80079c2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b088      	sub	sp, #32
 8005e9c:	af04      	add	r7, sp, #16
 8005e9e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d102      	bne.n	8005eba <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2203      	movs	r2, #3
 8005eb8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b0b      	cmp	r3, #11
 8005ec2:	f200 81be 	bhi.w	8006242 <USBH_Process+0x3aa>
 8005ec6:	a201      	add	r2, pc, #4	; (adr r2, 8005ecc <USBH_Process+0x34>)
 8005ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ecc:	08005efd 	.word	0x08005efd
 8005ed0:	08005f2f 	.word	0x08005f2f
 8005ed4:	08005f97 	.word	0x08005f97
 8005ed8:	080061dd 	.word	0x080061dd
 8005edc:	08006243 	.word	0x08006243
 8005ee0:	0800603b 	.word	0x0800603b
 8005ee4:	08006183 	.word	0x08006183
 8005ee8:	08006071 	.word	0x08006071
 8005eec:	08006091 	.word	0x08006091
 8005ef0:	080060b1 	.word	0x080060b1
 8005ef4:	080060f5 	.word	0x080060f5
 8005ef8:	080061c5 	.word	0x080061c5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f000 819e 	beq.w	8006246 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005f10:	20c8      	movs	r0, #200	; 0xc8
 8005f12:	f001 fd9d 	bl	8007a50 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f001 fc93 	bl	8007842 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005f2c:	e18b      	b.n	8006246 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d107      	bne.n	8005f48 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005f46:	e18d      	b.n	8006264 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005f4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f52:	d914      	bls.n	8005f7e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	d903      	bls.n	8005f76 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	220d      	movs	r2, #13
 8005f72:	701a      	strb	r2, [r3, #0]
      break;
 8005f74:	e176      	b.n	8006264 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	701a      	strb	r2, [r3, #0]
      break;
 8005f7c:	e172      	b.n	8006264 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005f84:	f103 020a 	add.w	r2, r3, #10
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005f8e:	200a      	movs	r0, #10
 8005f90:	f001 fd5e 	bl	8007a50 <USBH_Delay>
      break;
 8005f94:	e166      	b.n	8006264 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d005      	beq.n	8005fac <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005fa6:	2104      	movs	r1, #4
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005fac:	2064      	movs	r0, #100	; 0x64
 8005fae:	f001 fd4f 	bl	8007a50 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f001 fc1e 	bl	80077f4 <USBH_LL_GetSpeed>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	461a      	mov	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2205      	movs	r2, #5
 8005fc6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005fc8:	2100      	movs	r1, #0
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f001 fa29 	bl	8007422 <USBH_AllocPipe>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005fd8:	2180      	movs	r1, #128	; 0x80
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f001 fa21 	bl	8007422 <USBH_AllocPipe>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	7919      	ldrb	r1, [r3, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005ffc:	b292      	uxth	r2, r2
 8005ffe:	9202      	str	r2, [sp, #8]
 8006000:	2200      	movs	r2, #0
 8006002:	9201      	str	r2, [sp, #4]
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	4603      	mov	r3, r0
 8006008:	2280      	movs	r2, #128	; 0x80
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f001 f9da 	bl	80073c4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	7959      	ldrb	r1, [r3, #5]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006024:	b292      	uxth	r2, r2
 8006026:	9202      	str	r2, [sp, #8]
 8006028:	2200      	movs	r2, #0
 800602a:	9201      	str	r2, [sp, #4]
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	4603      	mov	r3, r0
 8006030:	2200      	movs	r2, #0
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f001 f9c6 	bl	80073c4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006038:	e114      	b.n	8006264 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f918 	bl	8006270 <USBH_HandleEnum>
 8006040:	4603      	mov	r3, r0
 8006042:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006044:	7bbb      	ldrb	r3, [r7, #14]
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	f040 80fe 	bne.w	800624a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800605c:	2b01      	cmp	r3, #1
 800605e:	d103      	bne.n	8006068 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2208      	movs	r2, #8
 8006064:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006066:	e0f0      	b.n	800624a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2207      	movs	r2, #7
 800606c:	701a      	strb	r2, [r3, #0]
      break;
 800606e:	e0ec      	b.n	800624a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 80e9 	beq.w	800624e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006082:	2101      	movs	r1, #1
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2208      	movs	r2, #8
 800608c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800608e:	e0de      	b.n	800624e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006096:	b29b      	uxth	r3, r3
 8006098:	4619      	mov	r1, r3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fc2c 	bl	80068f8 <USBH_SetCfg>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f040 80d5 	bne.w	8006252 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2209      	movs	r2, #9
 80060ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80060ae:	e0d0      	b.n	8006252 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80060b6:	f003 0320 	and.w	r3, r3, #32
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d016      	beq.n	80060ec <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80060be:	2101      	movs	r1, #1
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fc3c 	bl	800693e <USBH_SetFeature>
 80060c6:	4603      	mov	r3, r0
 80060c8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80060ca:	7bbb      	ldrb	r3, [r7, #14]
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d103      	bne.n	80060da <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	220a      	movs	r2, #10
 80060d6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80060d8:	e0bd      	b.n	8006256 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80060da:	7bbb      	ldrb	r3, [r7, #14]
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b03      	cmp	r3, #3
 80060e0:	f040 80b9 	bne.w	8006256 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	220a      	movs	r2, #10
 80060e8:	701a      	strb	r2, [r3, #0]
      break;
 80060ea:	e0b4      	b.n	8006256 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	220a      	movs	r2, #10
 80060f0:	701a      	strb	r2, [r3, #0]
      break;
 80060f2:	e0b0      	b.n	8006256 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 80ad 	beq.w	800625a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006108:	2300      	movs	r3, #0
 800610a:	73fb      	strb	r3, [r7, #15]
 800610c:	e016      	b.n	800613c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800610e:	7bfa      	ldrb	r2, [r7, #15]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	32de      	adds	r2, #222	; 0xde
 8006114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006118:	791a      	ldrb	r2, [r3, #4]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006120:	429a      	cmp	r2, r3
 8006122:	d108      	bne.n	8006136 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006124:	7bfa      	ldrb	r2, [r7, #15]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	32de      	adds	r2, #222	; 0xde
 800612a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006134:	e005      	b.n	8006142 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006136:	7bfb      	ldrb	r3, [r7, #15]
 8006138:	3301      	adds	r3, #1
 800613a:	73fb      	strb	r3, [r7, #15]
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d0e5      	beq.n	800610e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006148:	2b00      	cmp	r3, #0
 800614a:	d016      	beq.n	800617a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	4798      	blx	r3
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d109      	bne.n	8006172 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2206      	movs	r2, #6
 8006162:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800616a:	2103      	movs	r1, #3
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006170:	e073      	b.n	800625a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	220d      	movs	r2, #13
 8006176:	701a      	strb	r2, [r3, #0]
      break;
 8006178:	e06f      	b.n	800625a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	220d      	movs	r2, #13
 800617e:	701a      	strb	r2, [r3, #0]
      break;
 8006180:	e06b      	b.n	800625a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006188:	2b00      	cmp	r3, #0
 800618a:	d017      	beq.n	80061bc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	4798      	blx	r3
 8006198:	4603      	mov	r3, r0
 800619a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800619c:	7bbb      	ldrb	r3, [r7, #14]
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d103      	bne.n	80061ac <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	220b      	movs	r2, #11
 80061a8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80061aa:	e058      	b.n	800625e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80061ac:	7bbb      	ldrb	r3, [r7, #14]
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d154      	bne.n	800625e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	220d      	movs	r2, #13
 80061b8:	701a      	strb	r2, [r3, #0]
      break;
 80061ba:	e050      	b.n	800625e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	220d      	movs	r2, #13
 80061c0:	701a      	strb	r2, [r3, #0]
      break;
 80061c2:	e04c      	b.n	800625e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d049      	beq.n	8006262 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	4798      	blx	r3
      }
      break;
 80061da:	e042      	b.n	8006262 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7ff fd67 	bl	8005cb8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d009      	beq.n	8006208 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800620e:	2b00      	cmp	r3, #0
 8006210:	d005      	beq.n	800621e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006218:	2105      	movs	r1, #5
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b01      	cmp	r3, #1
 8006228:	d107      	bne.n	800623a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7ff fe20 	bl	8005e78 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006238:	e014      	b.n	8006264 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f001 faa4 	bl	8007788 <USBH_LL_Start>
      break;
 8006240:	e010      	b.n	8006264 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006242:	bf00      	nop
 8006244:	e00e      	b.n	8006264 <USBH_Process+0x3cc>
      break;
 8006246:	bf00      	nop
 8006248:	e00c      	b.n	8006264 <USBH_Process+0x3cc>
      break;
 800624a:	bf00      	nop
 800624c:	e00a      	b.n	8006264 <USBH_Process+0x3cc>
    break;
 800624e:	bf00      	nop
 8006250:	e008      	b.n	8006264 <USBH_Process+0x3cc>
      break;
 8006252:	bf00      	nop
 8006254:	e006      	b.n	8006264 <USBH_Process+0x3cc>
      break;
 8006256:	bf00      	nop
 8006258:	e004      	b.n	8006264 <USBH_Process+0x3cc>
      break;
 800625a:	bf00      	nop
 800625c:	e002      	b.n	8006264 <USBH_Process+0x3cc>
      break;
 800625e:	bf00      	nop
 8006260:	e000      	b.n	8006264 <USBH_Process+0x3cc>
      break;
 8006262:	bf00      	nop
  }
  return USBH_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop

08006270 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af04      	add	r7, sp, #16
 8006276:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006278:	2301      	movs	r3, #1
 800627a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800627c:	2301      	movs	r3, #1
 800627e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	785b      	ldrb	r3, [r3, #1]
 8006284:	2b07      	cmp	r3, #7
 8006286:	f200 81c1 	bhi.w	800660c <USBH_HandleEnum+0x39c>
 800628a:	a201      	add	r2, pc, #4	; (adr r2, 8006290 <USBH_HandleEnum+0x20>)
 800628c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006290:	080062b1 	.word	0x080062b1
 8006294:	0800636f 	.word	0x0800636f
 8006298:	080063d9 	.word	0x080063d9
 800629c:	08006467 	.word	0x08006467
 80062a0:	080064d1 	.word	0x080064d1
 80062a4:	08006541 	.word	0x08006541
 80062a8:	08006587 	.word	0x08006587
 80062ac:	080065cd 	.word	0x080065cd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80062b0:	2108      	movs	r1, #8
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fa50 	bl	8006758 <USBH_Get_DevDesc>
 80062b8:	4603      	mov	r3, r0
 80062ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80062bc:	7bbb      	ldrb	r3, [r7, #14]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d130      	bne.n	8006324 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	7919      	ldrb	r1, [r3, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80062e6:	b292      	uxth	r2, r2
 80062e8:	9202      	str	r2, [sp, #8]
 80062ea:	2200      	movs	r2, #0
 80062ec:	9201      	str	r2, [sp, #4]
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	4603      	mov	r3, r0
 80062f2:	2280      	movs	r2, #128	; 0x80
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f001 f865 	bl	80073c4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	7959      	ldrb	r1, [r3, #5]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800630e:	b292      	uxth	r2, r2
 8006310:	9202      	str	r2, [sp, #8]
 8006312:	2200      	movs	r2, #0
 8006314:	9201      	str	r2, [sp, #4]
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	4603      	mov	r3, r0
 800631a:	2200      	movs	r2, #0
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f001 f851 	bl	80073c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006322:	e175      	b.n	8006610 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006324:	7bbb      	ldrb	r3, [r7, #14]
 8006326:	2b03      	cmp	r3, #3
 8006328:	f040 8172 	bne.w	8006610 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006332:	3301      	adds	r3, #1
 8006334:	b2da      	uxtb	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006342:	2b03      	cmp	r3, #3
 8006344:	d903      	bls.n	800634e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	220d      	movs	r2, #13
 800634a:	701a      	strb	r2, [r3, #0]
      break;
 800634c:	e160      	b.n	8006610 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	795b      	ldrb	r3, [r3, #5]
 8006352:	4619      	mov	r1, r3
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f001 f885 	bl	8007464 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	791b      	ldrb	r3, [r3, #4]
 800635e:	4619      	mov	r1, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f001 f87f 	bl	8007464 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	701a      	strb	r2, [r3, #0]
      break;
 800636c:	e150      	b.n	8006610 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800636e:	2112      	movs	r1, #18
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f9f1 	bl	8006758 <USBH_Get_DevDesc>
 8006376:	4603      	mov	r3, r0
 8006378:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800637a:	7bbb      	ldrb	r3, [r7, #14]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d103      	bne.n	8006388 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2202      	movs	r2, #2
 8006384:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006386:	e145      	b.n	8006614 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006388:	7bbb      	ldrb	r3, [r7, #14]
 800638a:	2b03      	cmp	r3, #3
 800638c:	f040 8142 	bne.w	8006614 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006396:	3301      	adds	r3, #1
 8006398:	b2da      	uxtb	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d903      	bls.n	80063b2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	220d      	movs	r2, #13
 80063ae:	701a      	strb	r2, [r3, #0]
      break;
 80063b0:	e130      	b.n	8006614 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	795b      	ldrb	r3, [r3, #5]
 80063b6:	4619      	mov	r1, r3
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f001 f853 	bl	8007464 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	791b      	ldrb	r3, [r3, #4]
 80063c2:	4619      	mov	r1, r3
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f001 f84d 	bl	8007464 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	701a      	strb	r2, [r3, #0]
      break;
 80063d6:	e11d      	b.n	8006614 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80063d8:	2101      	movs	r1, #1
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fa68 	bl	80068b0 <USBH_SetAddress>
 80063e0:	4603      	mov	r3, r0
 80063e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80063e4:	7bbb      	ldrb	r3, [r7, #14]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d132      	bne.n	8006450 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80063ea:	2002      	movs	r0, #2
 80063ec:	f001 fb30 	bl	8007a50 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2203      	movs	r2, #3
 80063fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	7919      	ldrb	r1, [r3, #4]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006412:	b292      	uxth	r2, r2
 8006414:	9202      	str	r2, [sp, #8]
 8006416:	2200      	movs	r2, #0
 8006418:	9201      	str	r2, [sp, #4]
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	4603      	mov	r3, r0
 800641e:	2280      	movs	r2, #128	; 0x80
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 ffcf 	bl	80073c4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	7959      	ldrb	r1, [r3, #5]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800643a:	b292      	uxth	r2, r2
 800643c:	9202      	str	r2, [sp, #8]
 800643e:	2200      	movs	r2, #0
 8006440:	9201      	str	r2, [sp, #4]
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	4603      	mov	r3, r0
 8006446:	2200      	movs	r2, #0
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 ffbb 	bl	80073c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800644e:	e0e3      	b.n	8006618 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006450:	7bbb      	ldrb	r3, [r7, #14]
 8006452:	2b03      	cmp	r3, #3
 8006454:	f040 80e0 	bne.w	8006618 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	220d      	movs	r2, #13
 800645c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	705a      	strb	r2, [r3, #1]
      break;
 8006464:	e0d8      	b.n	8006618 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006466:	2109      	movs	r1, #9
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f99d 	bl	80067a8 <USBH_Get_CfgDesc>
 800646e:	4603      	mov	r3, r0
 8006470:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006472:	7bbb      	ldrb	r3, [r7, #14]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d103      	bne.n	8006480 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2204      	movs	r2, #4
 800647c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800647e:	e0cd      	b.n	800661c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006480:	7bbb      	ldrb	r3, [r7, #14]
 8006482:	2b03      	cmp	r3, #3
 8006484:	f040 80ca 	bne.w	800661c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800648e:	3301      	adds	r3, #1
 8006490:	b2da      	uxtb	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800649e:	2b03      	cmp	r3, #3
 80064a0:	d903      	bls.n	80064aa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	220d      	movs	r2, #13
 80064a6:	701a      	strb	r2, [r3, #0]
      break;
 80064a8:	e0b8      	b.n	800661c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	795b      	ldrb	r3, [r3, #5]
 80064ae:	4619      	mov	r1, r3
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 ffd7 	bl	8007464 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	791b      	ldrb	r3, [r3, #4]
 80064ba:	4619      	mov	r1, r3
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 ffd1 	bl	8007464 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	701a      	strb	r2, [r3, #0]
      break;
 80064ce:	e0a5      	b.n	800661c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80064d6:	4619      	mov	r1, r3
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f965 	bl	80067a8 <USBH_Get_CfgDesc>
 80064de:	4603      	mov	r3, r0
 80064e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80064e2:	7bbb      	ldrb	r3, [r7, #14]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d103      	bne.n	80064f0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2205      	movs	r2, #5
 80064ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80064ee:	e097      	b.n	8006620 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064f0:	7bbb      	ldrb	r3, [r7, #14]
 80064f2:	2b03      	cmp	r3, #3
 80064f4:	f040 8094 	bne.w	8006620 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064fe:	3301      	adds	r3, #1
 8006500:	b2da      	uxtb	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800650e:	2b03      	cmp	r3, #3
 8006510:	d903      	bls.n	800651a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	220d      	movs	r2, #13
 8006516:	701a      	strb	r2, [r3, #0]
      break;
 8006518:	e082      	b.n	8006620 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	795b      	ldrb	r3, [r3, #5]
 800651e:	4619      	mov	r1, r3
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 ff9f 	bl	8007464 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	791b      	ldrb	r3, [r3, #4]
 800652a:	4619      	mov	r1, r3
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 ff99 	bl	8007464 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	701a      	strb	r2, [r3, #0]
      break;
 800653e:	e06f      	b.n	8006620 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006546:	2b00      	cmp	r3, #0
 8006548:	d019      	beq.n	800657e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006556:	23ff      	movs	r3, #255	; 0xff
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 f949 	bl	80067f0 <USBH_Get_StringDesc>
 800655e:	4603      	mov	r3, r0
 8006560:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006562:	7bbb      	ldrb	r3, [r7, #14]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d103      	bne.n	8006570 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2206      	movs	r2, #6
 800656c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800656e:	e059      	b.n	8006624 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006570:	7bbb      	ldrb	r3, [r7, #14]
 8006572:	2b03      	cmp	r3, #3
 8006574:	d156      	bne.n	8006624 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2206      	movs	r2, #6
 800657a:	705a      	strb	r2, [r3, #1]
      break;
 800657c:	e052      	b.n	8006624 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2206      	movs	r2, #6
 8006582:	705a      	strb	r2, [r3, #1]
      break;
 8006584:	e04e      	b.n	8006624 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800658c:	2b00      	cmp	r3, #0
 800658e:	d019      	beq.n	80065c4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800659c:	23ff      	movs	r3, #255	; 0xff
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f926 	bl	80067f0 <USBH_Get_StringDesc>
 80065a4:	4603      	mov	r3, r0
 80065a6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80065a8:	7bbb      	ldrb	r3, [r7, #14]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d103      	bne.n	80065b6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2207      	movs	r2, #7
 80065b2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80065b4:	e038      	b.n	8006628 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065b6:	7bbb      	ldrb	r3, [r7, #14]
 80065b8:	2b03      	cmp	r3, #3
 80065ba:	d135      	bne.n	8006628 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2207      	movs	r2, #7
 80065c0:	705a      	strb	r2, [r3, #1]
      break;
 80065c2:	e031      	b.n	8006628 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2207      	movs	r2, #7
 80065c8:	705a      	strb	r2, [r3, #1]
      break;
 80065ca:	e02d      	b.n	8006628 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d017      	beq.n	8006606 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80065e2:	23ff      	movs	r3, #255	; 0xff
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f903 	bl	80067f0 <USBH_Get_StringDesc>
 80065ea:	4603      	mov	r3, r0
 80065ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80065ee:	7bbb      	ldrb	r3, [r7, #14]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d102      	bne.n	80065fa <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80065f8:	e018      	b.n	800662c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065fa:	7bbb      	ldrb	r3, [r7, #14]
 80065fc:	2b03      	cmp	r3, #3
 80065fe:	d115      	bne.n	800662c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006600:	2300      	movs	r3, #0
 8006602:	73fb      	strb	r3, [r7, #15]
      break;
 8006604:	e012      	b.n	800662c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	73fb      	strb	r3, [r7, #15]
      break;
 800660a:	e00f      	b.n	800662c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800660c:	bf00      	nop
 800660e:	e00e      	b.n	800662e <USBH_HandleEnum+0x3be>
      break;
 8006610:	bf00      	nop
 8006612:	e00c      	b.n	800662e <USBH_HandleEnum+0x3be>
      break;
 8006614:	bf00      	nop
 8006616:	e00a      	b.n	800662e <USBH_HandleEnum+0x3be>
      break;
 8006618:	bf00      	nop
 800661a:	e008      	b.n	800662e <USBH_HandleEnum+0x3be>
      break;
 800661c:	bf00      	nop
 800661e:	e006      	b.n	800662e <USBH_HandleEnum+0x3be>
      break;
 8006620:	bf00      	nop
 8006622:	e004      	b.n	800662e <USBH_HandleEnum+0x3be>
      break;
 8006624:	bf00      	nop
 8006626:	e002      	b.n	800662e <USBH_HandleEnum+0x3be>
      break;
 8006628:	bf00      	nop
 800662a:	e000      	b.n	800662e <USBH_HandleEnum+0x3be>
      break;
 800662c:	bf00      	nop
  }
  return Status;
 800662e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	683a      	ldr	r2, [r7, #0]
 8006646:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800664a:	bf00      	nop
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b082      	sub	sp, #8
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006664:	1c5a      	adds	r2, r3, #1
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f804 	bl	800667a <USBH_HandleSof>
}
 8006672:	bf00      	nop
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b082      	sub	sp, #8
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b0b      	cmp	r3, #11
 800668a:	d10a      	bne.n	80066a2 <USBH_HandleSof+0x28>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006692:	2b00      	cmp	r3, #0
 8006694:	d005      	beq.n	80066a2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	4798      	blx	r3
  }
}
 80066a2:	bf00      	nop
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b083      	sub	sp, #12
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80066ba:	bf00      	nop
}
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b083      	sub	sp, #12
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80066d6:	bf00      	nop
}
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f001 f844 	bl	80077be <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	791b      	ldrb	r3, [r3, #4]
 800673a:	4619      	mov	r1, r3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fe91 	bl	8007464 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	795b      	ldrb	r3, [r3, #5]
 8006746:	4619      	mov	r1, r3
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 fe8b 	bl	8007464 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af02      	add	r7, sp, #8
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	460b      	mov	r3, r1
 8006762:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800676a:	78fb      	ldrb	r3, [r7, #3]
 800676c:	b29b      	uxth	r3, r3
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	4613      	mov	r3, r2
 8006772:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006776:	2100      	movs	r1, #0
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f864 	bl	8006846 <USBH_GetDescriptor>
 800677e:	4603      	mov	r3, r0
 8006780:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8006782:	7bfb      	ldrb	r3, [r7, #15]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10a      	bne.n	800679e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006794:	78fa      	ldrb	r2, [r7, #3]
 8006796:	b292      	uxth	r2, r2
 8006798:	4619      	mov	r1, r3
 800679a:	f000 f918 	bl	80069ce <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800679e:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af02      	add	r7, sp, #8
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	331c      	adds	r3, #28
 80067b8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80067ba:	887b      	ldrh	r3, [r7, #2]
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067c4:	2100      	movs	r1, #0
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f83d 	bl	8006846 <USBH_GetDescriptor>
 80067cc:	4603      	mov	r3, r0
 80067ce:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d107      	bne.n	80067e6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80067d6:	887b      	ldrh	r3, [r7, #2]
 80067d8:	461a      	mov	r2, r3
 80067da:	68b9      	ldr	r1, [r7, #8]
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 f987 	bl	8006af0 <USBH_ParseCfgDesc>
 80067e2:	4603      	mov	r3, r0
 80067e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b088      	sub	sp, #32
 80067f4:	af02      	add	r7, sp, #8
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	607a      	str	r2, [r7, #4]
 80067fa:	461a      	mov	r2, r3
 80067fc:	460b      	mov	r3, r1
 80067fe:	72fb      	strb	r3, [r7, #11]
 8006800:	4613      	mov	r3, r2
 8006802:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006804:	7afb      	ldrb	r3, [r7, #11]
 8006806:	b29b      	uxth	r3, r3
 8006808:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800680c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006814:	893b      	ldrh	r3, [r7, #8]
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	460b      	mov	r3, r1
 800681a:	2100      	movs	r1, #0
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 f812 	bl	8006846 <USBH_GetDescriptor>
 8006822:	4603      	mov	r3, r0
 8006824:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006826:	7dfb      	ldrb	r3, [r7, #23]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d107      	bne.n	800683c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006832:	893a      	ldrh	r2, [r7, #8]
 8006834:	6879      	ldr	r1, [r7, #4]
 8006836:	4618      	mov	r0, r3
 8006838:	f000 fb24 	bl	8006e84 <USBH_ParseStringDesc>
  }

  return status;
 800683c:	7dfb      	ldrb	r3, [r7, #23]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3718      	adds	r7, #24
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b084      	sub	sp, #16
 800684a:	af00      	add	r7, sp, #0
 800684c:	60f8      	str	r0, [r7, #12]
 800684e:	607b      	str	r3, [r7, #4]
 8006850:	460b      	mov	r3, r1
 8006852:	72fb      	strb	r3, [r7, #11]
 8006854:	4613      	mov	r3, r2
 8006856:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	789b      	ldrb	r3, [r3, #2]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d11c      	bne.n	800689a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006860:	7afb      	ldrb	r3, [r7, #11]
 8006862:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006866:	b2da      	uxtb	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2206      	movs	r2, #6
 8006870:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	893a      	ldrh	r2, [r7, #8]
 8006876:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006878:	893b      	ldrh	r3, [r7, #8]
 800687a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800687e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006882:	d104      	bne.n	800688e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f240 4209 	movw	r2, #1033	; 0x409
 800688a:	829a      	strh	r2, [r3, #20]
 800688c:	e002      	b.n	8006894 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8b3a      	ldrh	r2, [r7, #24]
 8006898:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800689a:	8b3b      	ldrh	r3, [r7, #24]
 800689c:	461a      	mov	r2, r3
 800689e:	6879      	ldr	r1, [r7, #4]
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 fb3d 	bl	8006f20 <USBH_CtlReq>
 80068a6:	4603      	mov	r3, r0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	460b      	mov	r3, r1
 80068ba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	789b      	ldrb	r3, [r3, #2]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d10f      	bne.n	80068e4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2205      	movs	r2, #5
 80068ce:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80068d0:	78fb      	ldrb	r3, [r7, #3]
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80068e4:	2200      	movs	r2, #0
 80068e6:	2100      	movs	r1, #0
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fb19 	bl	8006f20 <USBH_CtlReq>
 80068ee:	4603      	mov	r3, r0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	460b      	mov	r3, r1
 8006902:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	789b      	ldrb	r3, [r3, #2]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d10e      	bne.n	800692a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2209      	movs	r2, #9
 8006916:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	887a      	ldrh	r2, [r7, #2]
 800691c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800692a:	2200      	movs	r2, #0
 800692c:	2100      	movs	r1, #0
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 faf6 	bl	8006f20 <USBH_CtlReq>
 8006934:	4603      	mov	r3, r0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3708      	adds	r7, #8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b082      	sub	sp, #8
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
 8006946:	460b      	mov	r3, r1
 8006948:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	789b      	ldrb	r3, [r3, #2]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d10f      	bne.n	8006972 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2203      	movs	r2, #3
 800695c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800695e:	78fb      	ldrb	r3, [r7, #3]
 8006960:	b29a      	uxth	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006972:	2200      	movs	r2, #0
 8006974:	2100      	movs	r1, #0
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fad2 	bl	8006f20 <USBH_CtlReq>
 800697c:	4603      	mov	r3, r0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b082      	sub	sp, #8
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
 800698e:	460b      	mov	r3, r1
 8006990:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	789b      	ldrb	r3, [r3, #2]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d10f      	bne.n	80069ba <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2202      	movs	r2, #2
 800699e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80069ac:	78fb      	ldrb	r3, [r7, #3]
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80069ba:	2200      	movs	r2, #0
 80069bc:	2100      	movs	r1, #0
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 faae 	bl	8006f20 <USBH_CtlReq>
 80069c4:	4603      	mov	r3, r0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b085      	sub	sp, #20
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	60f8      	str	r0, [r7, #12]
 80069d6:	60b9      	str	r1, [r7, #8]
 80069d8:	4613      	mov	r3, r2
 80069da:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	781a      	ldrb	r2, [r3, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	785a      	ldrb	r2, [r3, #1]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	3302      	adds	r3, #2
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	3303      	adds	r3, #3
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	021b      	lsls	r3, r3, #8
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	4313      	orrs	r3, r2
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	791a      	ldrb	r2, [r3, #4]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	795a      	ldrb	r2, [r3, #5]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	799a      	ldrb	r2, [r3, #6]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	79da      	ldrb	r2, [r3, #7]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	79db      	ldrb	r3, [r3, #7]
 8006a2c:	2b20      	cmp	r3, #32
 8006a2e:	dc11      	bgt.n	8006a54 <USBH_ParseDevDesc+0x86>
 8006a30:	2b08      	cmp	r3, #8
 8006a32:	db16      	blt.n	8006a62 <USBH_ParseDevDesc+0x94>
 8006a34:	3b08      	subs	r3, #8
 8006a36:	2201      	movs	r2, #1
 8006a38:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8006a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	bf14      	ite	ne
 8006a48:	2301      	movne	r3, #1
 8006a4a:	2300      	moveq	r3, #0
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d102      	bne.n	8006a58 <USBH_ParseDevDesc+0x8a>
 8006a52:	e006      	b.n	8006a62 <USBH_ParseDevDesc+0x94>
 8006a54:	2b40      	cmp	r3, #64	; 0x40
 8006a56:	d104      	bne.n	8006a62 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	79da      	ldrb	r2, [r3, #7]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	71da      	strb	r2, [r3, #7]
      break;
 8006a60:	e003      	b.n	8006a6a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2240      	movs	r2, #64	; 0x40
 8006a66:	71da      	strb	r2, [r3, #7]
      break;
 8006a68:	bf00      	nop
  }

  if (length > 8U)
 8006a6a:	88fb      	ldrh	r3, [r7, #6]
 8006a6c:	2b08      	cmp	r3, #8
 8006a6e:	d939      	bls.n	8006ae4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	3308      	adds	r3, #8
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	3309      	adds	r3, #9
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	021b      	lsls	r3, r3, #8
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	4313      	orrs	r3, r2
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	330a      	adds	r3, #10
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	330b      	adds	r3, #11
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	021b      	lsls	r3, r3, #8
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	330c      	adds	r3, #12
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	330d      	adds	r3, #13
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	021b      	lsls	r3, r3, #8
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	4313      	orrs	r3, r2
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	7b9a      	ldrb	r2, [r3, #14]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	7bda      	ldrb	r2, [r3, #15]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	7c1a      	ldrb	r2, [r3, #16]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	7c5a      	ldrb	r2, [r3, #17]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	745a      	strb	r2, [r3, #17]
  }
}
 8006ae4:	bf00      	nop
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b08c      	sub	sp, #48	; 0x30
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	4613      	mov	r3, r2
 8006afc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006b04:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006b06:	2300      	movs	r3, #0
 8006b08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	781a      	ldrb	r2, [r3, #0]
 8006b24:	6a3b      	ldr	r3, [r7, #32]
 8006b26:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	785a      	ldrb	r2, [r3, #1]
 8006b2c:	6a3b      	ldr	r3, [r7, #32]
 8006b2e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	3302      	adds	r3, #2
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	3303      	adds	r3, #3
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	021b      	lsls	r3, r3, #8
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	4313      	orrs	r3, r2
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b4c:	bf28      	it	cs
 8006b4e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	791a      	ldrb	r2, [r3, #4]
 8006b5c:	6a3b      	ldr	r3, [r7, #32]
 8006b5e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	795a      	ldrb	r2, [r3, #5]
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	799a      	ldrb	r2, [r3, #6]
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	79da      	ldrb	r2, [r3, #7]
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	7a1a      	ldrb	r2, [r3, #8]
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	2b09      	cmp	r3, #9
 8006b86:	d002      	beq.n	8006b8e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	2209      	movs	r2, #9
 8006b8c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006b8e:	88fb      	ldrh	r3, [r7, #6]
 8006b90:	2b09      	cmp	r3, #9
 8006b92:	f240 809d 	bls.w	8006cd0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8006b96:	2309      	movs	r3, #9
 8006b98:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006b9e:	e081      	b.n	8006ca4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006ba0:	f107 0316 	add.w	r3, r7, #22
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ba8:	f000 f99f 	bl	8006eea <USBH_GetNextDesc>
 8006bac:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb0:	785b      	ldrb	r3, [r3, #1]
 8006bb2:	2b04      	cmp	r3, #4
 8006bb4:	d176      	bne.n	8006ca4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	2b09      	cmp	r3, #9
 8006bbc:	d002      	beq.n	8006bc4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc0:	2209      	movs	r2, #9
 8006bc2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bc8:	221a      	movs	r2, #26
 8006bca:	fb02 f303 	mul.w	r3, r2, r3
 8006bce:	3308      	adds	r3, #8
 8006bd0:	6a3a      	ldr	r2, [r7, #32]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	3302      	adds	r3, #2
 8006bd6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006bd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bda:	69f8      	ldr	r0, [r7, #28]
 8006bdc:	f000 f87e 	bl	8006cdc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006be6:	2300      	movs	r3, #0
 8006be8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006bea:	e043      	b.n	8006c74 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006bec:	f107 0316 	add.w	r3, r7, #22
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bf4:	f000 f979 	bl	8006eea <USBH_GetNextDesc>
 8006bf8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfc:	785b      	ldrb	r3, [r3, #1]
 8006bfe:	2b05      	cmp	r3, #5
 8006c00:	d138      	bne.n	8006c74 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	795b      	ldrb	r3, [r3, #5]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d10f      	bne.n	8006c2a <USBH_ParseCfgDesc+0x13a>
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	799b      	ldrb	r3, [r3, #6]
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d10b      	bne.n	8006c2a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	79db      	ldrb	r3, [r3, #7]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10f      	bne.n	8006c3a <USBH_ParseCfgDesc+0x14a>
 8006c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b09      	cmp	r3, #9
 8006c20:	d00b      	beq.n	8006c3a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	2209      	movs	r2, #9
 8006c26:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006c28:	e007      	b.n	8006c3a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8006c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	2b07      	cmp	r3, #7
 8006c30:	d004      	beq.n	8006c3c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c34:	2207      	movs	r2, #7
 8006c36:	701a      	strb	r2, [r3, #0]
 8006c38:	e000      	b.n	8006c3c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006c3a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c40:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006c44:	3201      	adds	r2, #1
 8006c46:	00d2      	lsls	r2, r2, #3
 8006c48:	211a      	movs	r1, #26
 8006c4a:	fb01 f303 	mul.w	r3, r1, r3
 8006c4e:	4413      	add	r3, r2
 8006c50:	3308      	adds	r3, #8
 8006c52:	6a3a      	ldr	r2, [r7, #32]
 8006c54:	4413      	add	r3, r2
 8006c56:	3304      	adds	r3, #4
 8006c58:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8006c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c5c:	69b9      	ldr	r1, [r7, #24]
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f000 f86b 	bl	8006d3a <USBH_ParseEPDesc>
 8006c64:	4603      	mov	r3, r0
 8006c66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8006c6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c6e:	3301      	adds	r3, #1
 8006c70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	791b      	ldrb	r3, [r3, #4]
 8006c78:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d204      	bcs.n	8006c8a <USBH_ParseCfgDesc+0x19a>
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	885a      	ldrh	r2, [r3, #2]
 8006c84:	8afb      	ldrh	r3, [r7, #22]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d8b0      	bhi.n	8006bec <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	791b      	ldrb	r3, [r3, #4]
 8006c8e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d201      	bcs.n	8006c9a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e01c      	b.n	8006cd4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8006c9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d805      	bhi.n	8006cb8 <USBH_ParseCfgDesc+0x1c8>
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	885a      	ldrh	r2, [r3, #2]
 8006cb0:	8afb      	ldrh	r3, [r7, #22]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	f63f af74 	bhi.w	8006ba0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	791b      	ldrb	r3, [r3, #4]
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	bf28      	it	cs
 8006cc0:	2302      	movcs	r3, #2
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d201      	bcs.n	8006cd0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e001      	b.n	8006cd4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8006cd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3730      	adds	r7, #48	; 0x30
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	781a      	ldrb	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	785a      	ldrb	r2, [r3, #1]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	789a      	ldrb	r2, [r3, #2]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	78da      	ldrb	r2, [r3, #3]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	791a      	ldrb	r2, [r3, #4]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	795a      	ldrb	r2, [r3, #5]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	799a      	ldrb	r2, [r3, #6]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	79da      	ldrb	r2, [r3, #7]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	7a1a      	ldrb	r2, [r3, #8]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	721a      	strb	r2, [r3, #8]
}
 8006d2e:	bf00      	nop
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b087      	sub	sp, #28
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	60f8      	str	r0, [r7, #12]
 8006d42:	60b9      	str	r1, [r7, #8]
 8006d44:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	781a      	ldrb	r2, [r3, #0]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	785a      	ldrb	r2, [r3, #1]
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	789a      	ldrb	r2, [r3, #2]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	78da      	ldrb	r2, [r3, #3]
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	3304      	adds	r3, #4
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	3305      	adds	r3, #5
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	021b      	lsls	r3, r3, #8
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	799a      	ldrb	r2, [r3, #6]
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	889b      	ldrh	r3, [r3, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d102      	bne.n	8006d9c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8006d96:	2303      	movs	r3, #3
 8006d98:	75fb      	strb	r3, [r7, #23]
 8006d9a:	e033      	b.n	8006e04 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	889b      	ldrh	r3, [r3, #4]
 8006da0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006da4:	f023 0307 	bic.w	r3, r3, #7
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	889b      	ldrh	r3, [r3, #4]
 8006db2:	b21a      	sxth	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	3304      	adds	r3, #4
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	b299      	uxth	r1, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	3305      	adds	r3, #5
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	021b      	lsls	r3, r3, #8
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	430b      	orrs	r3, r1
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d110      	bne.n	8006df6 <USBH_ParseEPDesc+0xbc>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	3304      	adds	r3, #4
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	b299      	uxth	r1, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	3305      	adds	r3, #5
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	021b      	lsls	r3, r3, #8
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	430b      	orrs	r3, r1
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	b21b      	sxth	r3, r3
 8006dee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006df2:	b21b      	sxth	r3, r3
 8006df4:	e001      	b.n	8006dfa <USBH_ParseEPDesc+0xc0>
 8006df6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	b21b      	sxth	r3, r3
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d116      	bne.n	8006e3c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	78db      	ldrb	r3, [r3, #3]
 8006e12:	f003 0303 	and.w	r3, r3, #3
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d005      	beq.n	8006e26 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	78db      	ldrb	r3, [r3, #3]
 8006e1e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	d127      	bne.n	8006e76 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	799b      	ldrb	r3, [r3, #6]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d003      	beq.n	8006e36 <USBH_ParseEPDesc+0xfc>
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	799b      	ldrb	r3, [r3, #6]
 8006e32:	2b10      	cmp	r3, #16
 8006e34:	d91f      	bls.n	8006e76 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006e36:	2303      	movs	r3, #3
 8006e38:	75fb      	strb	r3, [r7, #23]
 8006e3a:	e01c      	b.n	8006e76 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	78db      	ldrb	r3, [r3, #3]
 8006e40:	f003 0303 	and.w	r3, r3, #3
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d10a      	bne.n	8006e5e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	799b      	ldrb	r3, [r3, #6]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d003      	beq.n	8006e58 <USBH_ParseEPDesc+0x11e>
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	799b      	ldrb	r3, [r3, #6]
 8006e54:	2b10      	cmp	r3, #16
 8006e56:	d90e      	bls.n	8006e76 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	75fb      	strb	r3, [r7, #23]
 8006e5c:	e00b      	b.n	8006e76 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	78db      	ldrb	r3, [r3, #3]
 8006e62:	f003 0303 	and.w	r3, r3, #3
 8006e66:	2b03      	cmp	r3, #3
 8006e68:	d105      	bne.n	8006e76 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	799b      	ldrb	r3, [r3, #6]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006e72:	2303      	movs	r3, #3
 8006e74:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8006e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	371c      	adds	r7, #28
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b087      	sub	sp, #28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	4613      	mov	r3, r2
 8006e90:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	3301      	adds	r3, #1
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	2b03      	cmp	r3, #3
 8006e9a:	d120      	bne.n	8006ede <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	1e9a      	subs	r2, r3, #2
 8006ea2:	88fb      	ldrh	r3, [r7, #6]
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	bf28      	it	cs
 8006ea8:	4613      	movcs	r3, r2
 8006eaa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	3302      	adds	r3, #2
 8006eb0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	82fb      	strh	r3, [r7, #22]
 8006eb6:	e00b      	b.n	8006ed0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006eb8:	8afb      	ldrh	r3, [r7, #22]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	781a      	ldrb	r2, [r3, #0]
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006eca:	8afb      	ldrh	r3, [r7, #22]
 8006ecc:	3302      	adds	r3, #2
 8006ece:	82fb      	strh	r3, [r7, #22]
 8006ed0:	8afa      	ldrh	r2, [r7, #22]
 8006ed2:	8abb      	ldrh	r3, [r7, #20]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d3ef      	bcc.n	8006eb8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2200      	movs	r2, #0
 8006edc:	701a      	strb	r2, [r3, #0]
  }
}
 8006ede:	bf00      	nop
 8006ee0:	371c      	adds	r7, #28
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b085      	sub	sp, #20
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	881a      	ldrh	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	4413      	add	r3, r2
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4413      	add	r3, r2
 8006f10:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006f12:	68fb      	ldr	r3, [r7, #12]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	789b      	ldrb	r3, [r3, #2]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d002      	beq.n	8006f40 <USBH_CtlReq+0x20>
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d00f      	beq.n	8006f5e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006f3e:	e027      	b.n	8006f90 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	88fa      	ldrh	r2, [r7, #6]
 8006f4a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2202      	movs	r2, #2
 8006f56:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f5c:	e018      	b.n	8006f90 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f000 f81c 	bl	8006f9c <USBH_HandleControl>
 8006f64:	4603      	mov	r3, r0
 8006f66:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006f68:	7dfb      	ldrb	r3, [r7, #23]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <USBH_CtlReq+0x54>
 8006f6e:	7dfb      	ldrb	r3, [r7, #23]
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	d106      	bne.n	8006f82 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2201      	movs	r2, #1
 8006f78:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	761a      	strb	r2, [r3, #24]
      break;
 8006f80:	e005      	b.n	8006f8e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006f82:	7dfb      	ldrb	r3, [r7, #23]
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d102      	bne.n	8006f8e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	709a      	strb	r2, [r3, #2]
      break;
 8006f8e:	bf00      	nop
  }
  return status;
 8006f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
	...

08006f9c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af02      	add	r7, sp, #8
 8006fa2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	7e1b      	ldrb	r3, [r3, #24]
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	2b0a      	cmp	r3, #10
 8006fb4:	f200 8156 	bhi.w	8007264 <USBH_HandleControl+0x2c8>
 8006fb8:	a201      	add	r2, pc, #4	; (adr r2, 8006fc0 <USBH_HandleControl+0x24>)
 8006fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fbe:	bf00      	nop
 8006fc0:	08006fed 	.word	0x08006fed
 8006fc4:	08007007 	.word	0x08007007
 8006fc8:	08007071 	.word	0x08007071
 8006fcc:	08007097 	.word	0x08007097
 8006fd0:	080070cf 	.word	0x080070cf
 8006fd4:	080070f9 	.word	0x080070f9
 8006fd8:	0800714b 	.word	0x0800714b
 8006fdc:	0800716d 	.word	0x0800716d
 8006fe0:	080071a9 	.word	0x080071a9
 8006fe4:	080071cf 	.word	0x080071cf
 8006fe8:	0800720d 	.word	0x0800720d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f103 0110 	add.w	r1, r3, #16
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	795b      	ldrb	r3, [r3, #5]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f943 	bl	8007284 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2202      	movs	r2, #2
 8007002:	761a      	strb	r2, [r3, #24]
      break;
 8007004:	e139      	b.n	800727a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	795b      	ldrb	r3, [r3, #5]
 800700a:	4619      	mov	r1, r3
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fcc5 	bl	800799c <USBH_LL_GetURBState>
 8007012:	4603      	mov	r3, r0
 8007014:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007016:	7bbb      	ldrb	r3, [r7, #14]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d11e      	bne.n	800705a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	7c1b      	ldrb	r3, [r3, #16]
 8007020:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007024:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	8adb      	ldrh	r3, [r3, #22]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00a      	beq.n	8007044 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800702e:	7b7b      	ldrb	r3, [r7, #13]
 8007030:	2b80      	cmp	r3, #128	; 0x80
 8007032:	d103      	bne.n	800703c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2203      	movs	r2, #3
 8007038:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800703a:	e115      	b.n	8007268 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2205      	movs	r2, #5
 8007040:	761a      	strb	r2, [r3, #24]
      break;
 8007042:	e111      	b.n	8007268 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007044:	7b7b      	ldrb	r3, [r7, #13]
 8007046:	2b80      	cmp	r3, #128	; 0x80
 8007048:	d103      	bne.n	8007052 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2209      	movs	r2, #9
 800704e:	761a      	strb	r2, [r3, #24]
      break;
 8007050:	e10a      	b.n	8007268 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2207      	movs	r2, #7
 8007056:	761a      	strb	r2, [r3, #24]
      break;
 8007058:	e106      	b.n	8007268 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800705a:	7bbb      	ldrb	r3, [r7, #14]
 800705c:	2b04      	cmp	r3, #4
 800705e:	d003      	beq.n	8007068 <USBH_HandleControl+0xcc>
 8007060:	7bbb      	ldrb	r3, [r7, #14]
 8007062:	2b02      	cmp	r3, #2
 8007064:	f040 8100 	bne.w	8007268 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	220b      	movs	r2, #11
 800706c:	761a      	strb	r2, [r3, #24]
      break;
 800706e:	e0fb      	b.n	8007268 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007076:	b29a      	uxth	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6899      	ldr	r1, [r3, #8]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	899a      	ldrh	r2, [r3, #12]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	791b      	ldrb	r3, [r3, #4]
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f93a 	bl	8007302 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2204      	movs	r2, #4
 8007092:	761a      	strb	r2, [r3, #24]
      break;
 8007094:	e0f1      	b.n	800727a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	791b      	ldrb	r3, [r3, #4]
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fc7d 	bl	800799c <USBH_LL_GetURBState>
 80070a2:	4603      	mov	r3, r0
 80070a4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80070a6:	7bbb      	ldrb	r3, [r7, #14]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d102      	bne.n	80070b2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2209      	movs	r2, #9
 80070b0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80070b2:	7bbb      	ldrb	r3, [r7, #14]
 80070b4:	2b05      	cmp	r3, #5
 80070b6:	d102      	bne.n	80070be <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80070b8:	2303      	movs	r3, #3
 80070ba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80070bc:	e0d6      	b.n	800726c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80070be:	7bbb      	ldrb	r3, [r7, #14]
 80070c0:	2b04      	cmp	r3, #4
 80070c2:	f040 80d3 	bne.w	800726c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	220b      	movs	r2, #11
 80070ca:	761a      	strb	r2, [r3, #24]
      break;
 80070cc:	e0ce      	b.n	800726c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6899      	ldr	r1, [r3, #8]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	899a      	ldrh	r2, [r3, #12]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	795b      	ldrb	r3, [r3, #5]
 80070da:	2001      	movs	r0, #1
 80070dc:	9000      	str	r0, [sp, #0]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f8ea 	bl	80072b8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2206      	movs	r2, #6
 80070f4:	761a      	strb	r2, [r3, #24]
      break;
 80070f6:	e0c0      	b.n	800727a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	795b      	ldrb	r3, [r3, #5]
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fc4c 	bl	800799c <USBH_LL_GetURBState>
 8007104:	4603      	mov	r3, r0
 8007106:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d103      	bne.n	8007116 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2207      	movs	r2, #7
 8007112:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007114:	e0ac      	b.n	8007270 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007116:	7bbb      	ldrb	r3, [r7, #14]
 8007118:	2b05      	cmp	r3, #5
 800711a:	d105      	bne.n	8007128 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	220c      	movs	r2, #12
 8007120:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007122:	2303      	movs	r3, #3
 8007124:	73fb      	strb	r3, [r7, #15]
      break;
 8007126:	e0a3      	b.n	8007270 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007128:	7bbb      	ldrb	r3, [r7, #14]
 800712a:	2b02      	cmp	r3, #2
 800712c:	d103      	bne.n	8007136 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2205      	movs	r2, #5
 8007132:	761a      	strb	r2, [r3, #24]
      break;
 8007134:	e09c      	b.n	8007270 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007136:	7bbb      	ldrb	r3, [r7, #14]
 8007138:	2b04      	cmp	r3, #4
 800713a:	f040 8099 	bne.w	8007270 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	220b      	movs	r2, #11
 8007142:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007144:	2302      	movs	r3, #2
 8007146:	73fb      	strb	r3, [r7, #15]
      break;
 8007148:	e092      	b.n	8007270 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	791b      	ldrb	r3, [r3, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	2100      	movs	r1, #0
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f8d5 	bl	8007302 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800715e:	b29a      	uxth	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2208      	movs	r2, #8
 8007168:	761a      	strb	r2, [r3, #24]

      break;
 800716a:	e086      	b.n	800727a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	791b      	ldrb	r3, [r3, #4]
 8007170:	4619      	mov	r1, r3
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fc12 	bl	800799c <USBH_LL_GetURBState>
 8007178:	4603      	mov	r3, r0
 800717a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800717c:	7bbb      	ldrb	r3, [r7, #14]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d105      	bne.n	800718e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	220d      	movs	r2, #13
 8007186:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007188:	2300      	movs	r3, #0
 800718a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800718c:	e072      	b.n	8007274 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800718e:	7bbb      	ldrb	r3, [r7, #14]
 8007190:	2b04      	cmp	r3, #4
 8007192:	d103      	bne.n	800719c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	220b      	movs	r2, #11
 8007198:	761a      	strb	r2, [r3, #24]
      break;
 800719a:	e06b      	b.n	8007274 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800719c:	7bbb      	ldrb	r3, [r7, #14]
 800719e:	2b05      	cmp	r3, #5
 80071a0:	d168      	bne.n	8007274 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80071a2:	2303      	movs	r3, #3
 80071a4:	73fb      	strb	r3, [r7, #15]
      break;
 80071a6:	e065      	b.n	8007274 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	795b      	ldrb	r3, [r3, #5]
 80071ac:	2201      	movs	r2, #1
 80071ae:	9200      	str	r2, [sp, #0]
 80071b0:	2200      	movs	r2, #0
 80071b2:	2100      	movs	r1, #0
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f87f 	bl	80072b8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	220a      	movs	r2, #10
 80071ca:	761a      	strb	r2, [r3, #24]
      break;
 80071cc:	e055      	b.n	800727a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	795b      	ldrb	r3, [r3, #5]
 80071d2:	4619      	mov	r1, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fbe1 	bl	800799c <USBH_LL_GetURBState>
 80071da:	4603      	mov	r3, r0
 80071dc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80071de:	7bbb      	ldrb	r3, [r7, #14]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d105      	bne.n	80071f0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	220d      	movs	r2, #13
 80071ec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80071ee:	e043      	b.n	8007278 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80071f0:	7bbb      	ldrb	r3, [r7, #14]
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d103      	bne.n	80071fe <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2209      	movs	r2, #9
 80071fa:	761a      	strb	r2, [r3, #24]
      break;
 80071fc:	e03c      	b.n	8007278 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80071fe:	7bbb      	ldrb	r3, [r7, #14]
 8007200:	2b04      	cmp	r3, #4
 8007202:	d139      	bne.n	8007278 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	220b      	movs	r2, #11
 8007208:	761a      	strb	r2, [r3, #24]
      break;
 800720a:	e035      	b.n	8007278 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	7e5b      	ldrb	r3, [r3, #25]
 8007210:	3301      	adds	r3, #1
 8007212:	b2da      	uxtb	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	765a      	strb	r2, [r3, #25]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	7e5b      	ldrb	r3, [r3, #25]
 800721c:	2b02      	cmp	r3, #2
 800721e:	d806      	bhi.n	800722e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800722c:	e025      	b.n	800727a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007234:	2106      	movs	r1, #6
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	795b      	ldrb	r3, [r3, #5]
 8007244:	4619      	mov	r1, r3
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f90c 	bl	8007464 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	791b      	ldrb	r3, [r3, #4]
 8007250:	4619      	mov	r1, r3
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f906 	bl	8007464 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800725e:	2302      	movs	r3, #2
 8007260:	73fb      	strb	r3, [r7, #15]
      break;
 8007262:	e00a      	b.n	800727a <USBH_HandleControl+0x2de>

    default:
      break;
 8007264:	bf00      	nop
 8007266:	e008      	b.n	800727a <USBH_HandleControl+0x2de>
      break;
 8007268:	bf00      	nop
 800726a:	e006      	b.n	800727a <USBH_HandleControl+0x2de>
      break;
 800726c:	bf00      	nop
 800726e:	e004      	b.n	800727a <USBH_HandleControl+0x2de>
      break;
 8007270:	bf00      	nop
 8007272:	e002      	b.n	800727a <USBH_HandleControl+0x2de>
      break;
 8007274:	bf00      	nop
 8007276:	e000      	b.n	800727a <USBH_HandleControl+0x2de>
      break;
 8007278:	bf00      	nop
  }

  return status;
 800727a:	7bfb      	ldrb	r3, [r7, #15]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b088      	sub	sp, #32
 8007288:	af04      	add	r7, sp, #16
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	4613      	mov	r3, r2
 8007290:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007292:	79f9      	ldrb	r1, [r7, #7]
 8007294:	2300      	movs	r3, #0
 8007296:	9303      	str	r3, [sp, #12]
 8007298:	2308      	movs	r3, #8
 800729a:	9302      	str	r3, [sp, #8]
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	9301      	str	r3, [sp, #4]
 80072a0:	2300      	movs	r3, #0
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	2300      	movs	r3, #0
 80072a6:	2200      	movs	r2, #0
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 fb46 	bl	800793a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b088      	sub	sp, #32
 80072bc:	af04      	add	r7, sp, #16
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	4611      	mov	r1, r2
 80072c4:	461a      	mov	r2, r3
 80072c6:	460b      	mov	r3, r1
 80072c8:	80fb      	strh	r3, [r7, #6]
 80072ca:	4613      	mov	r3, r2
 80072cc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d001      	beq.n	80072dc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80072d8:	2300      	movs	r3, #0
 80072da:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80072dc:	7979      	ldrb	r1, [r7, #5]
 80072de:	7e3b      	ldrb	r3, [r7, #24]
 80072e0:	9303      	str	r3, [sp, #12]
 80072e2:	88fb      	ldrh	r3, [r7, #6]
 80072e4:	9302      	str	r3, [sp, #8]
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	9301      	str	r3, [sp, #4]
 80072ea:	2301      	movs	r3, #1
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	2300      	movs	r3, #0
 80072f0:	2200      	movs	r2, #0
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f000 fb21 	bl	800793a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b088      	sub	sp, #32
 8007306:	af04      	add	r7, sp, #16
 8007308:	60f8      	str	r0, [r7, #12]
 800730a:	60b9      	str	r1, [r7, #8]
 800730c:	4611      	mov	r1, r2
 800730e:	461a      	mov	r2, r3
 8007310:	460b      	mov	r3, r1
 8007312:	80fb      	strh	r3, [r7, #6]
 8007314:	4613      	mov	r3, r2
 8007316:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007318:	7979      	ldrb	r1, [r7, #5]
 800731a:	2300      	movs	r3, #0
 800731c:	9303      	str	r3, [sp, #12]
 800731e:	88fb      	ldrh	r3, [r7, #6]
 8007320:	9302      	str	r3, [sp, #8]
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	9301      	str	r3, [sp, #4]
 8007326:	2301      	movs	r3, #1
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	2300      	movs	r3, #0
 800732c:	2201      	movs	r2, #1
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f000 fb03 	bl	800793a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007334:	2300      	movs	r3, #0

}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b088      	sub	sp, #32
 8007342:	af04      	add	r7, sp, #16
 8007344:	60f8      	str	r0, [r7, #12]
 8007346:	60b9      	str	r1, [r7, #8]
 8007348:	4611      	mov	r1, r2
 800734a:	461a      	mov	r2, r3
 800734c:	460b      	mov	r3, r1
 800734e:	80fb      	strh	r3, [r7, #6]
 8007350:	4613      	mov	r3, r2
 8007352:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800735a:	2b00      	cmp	r3, #0
 800735c:	d001      	beq.n	8007362 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007362:	7979      	ldrb	r1, [r7, #5]
 8007364:	7e3b      	ldrb	r3, [r7, #24]
 8007366:	9303      	str	r3, [sp, #12]
 8007368:	88fb      	ldrh	r3, [r7, #6]
 800736a:	9302      	str	r3, [sp, #8]
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	9301      	str	r3, [sp, #4]
 8007370:	2301      	movs	r3, #1
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	2302      	movs	r3, #2
 8007376:	2200      	movs	r2, #0
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 fade 	bl	800793a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b088      	sub	sp, #32
 800738c:	af04      	add	r7, sp, #16
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	4611      	mov	r1, r2
 8007394:	461a      	mov	r2, r3
 8007396:	460b      	mov	r3, r1
 8007398:	80fb      	strh	r3, [r7, #6]
 800739a:	4613      	mov	r3, r2
 800739c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800739e:	7979      	ldrb	r1, [r7, #5]
 80073a0:	2300      	movs	r3, #0
 80073a2:	9303      	str	r3, [sp, #12]
 80073a4:	88fb      	ldrh	r3, [r7, #6]
 80073a6:	9302      	str	r3, [sp, #8]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	9301      	str	r3, [sp, #4]
 80073ac:	2301      	movs	r3, #1
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	2302      	movs	r3, #2
 80073b2:	2201      	movs	r2, #1
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f000 fac0 	bl	800793a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af04      	add	r7, sp, #16
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	4608      	mov	r0, r1
 80073ce:	4611      	mov	r1, r2
 80073d0:	461a      	mov	r2, r3
 80073d2:	4603      	mov	r3, r0
 80073d4:	70fb      	strb	r3, [r7, #3]
 80073d6:	460b      	mov	r3, r1
 80073d8:	70bb      	strb	r3, [r7, #2]
 80073da:	4613      	mov	r3, r2
 80073dc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80073de:	7878      	ldrb	r0, [r7, #1]
 80073e0:	78ba      	ldrb	r2, [r7, #2]
 80073e2:	78f9      	ldrb	r1, [r7, #3]
 80073e4:	8b3b      	ldrh	r3, [r7, #24]
 80073e6:	9302      	str	r3, [sp, #8]
 80073e8:	7d3b      	ldrb	r3, [r7, #20]
 80073ea:	9301      	str	r3, [sp, #4]
 80073ec:	7c3b      	ldrb	r3, [r7, #16]
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	4603      	mov	r3, r0
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fa53 	bl	800789e <USBH_LL_OpenPipe>

  return USBH_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b082      	sub	sp, #8
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	460b      	mov	r3, r1
 800740c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800740e:	78fb      	ldrb	r3, [r7, #3]
 8007410:	4619      	mov	r1, r3
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fa72 	bl	80078fc <USBH_LL_ClosePipe>

  return USBH_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b084      	sub	sp, #16
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	460b      	mov	r3, r1
 800742c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f836 	bl	80074a0 <USBH_GetFreePipe>
 8007434:	4603      	mov	r3, r0
 8007436:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007438:	89fb      	ldrh	r3, [r7, #14]
 800743a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800743e:	4293      	cmp	r3, r2
 8007440:	d00a      	beq.n	8007458 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007442:	78fa      	ldrb	r2, [r7, #3]
 8007444:	89fb      	ldrh	r3, [r7, #14]
 8007446:	f003 030f 	and.w	r3, r3, #15
 800744a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800744e:	6879      	ldr	r1, [r7, #4]
 8007450:	33e0      	adds	r3, #224	; 0xe0
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	440b      	add	r3, r1
 8007456:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007458:	89fb      	ldrh	r3, [r7, #14]
 800745a:	b2db      	uxtb	r3, r3
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	460b      	mov	r3, r1
 800746e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007470:	78fb      	ldrb	r3, [r7, #3]
 8007472:	2b0f      	cmp	r3, #15
 8007474:	d80d      	bhi.n	8007492 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007476:	78fb      	ldrb	r3, [r7, #3]
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	33e0      	adds	r3, #224	; 0xe0
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4413      	add	r3, r2
 8007480:	685a      	ldr	r2, [r3, #4]
 8007482:	78fb      	ldrb	r3, [r7, #3]
 8007484:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007488:	6879      	ldr	r1, [r7, #4]
 800748a:	33e0      	adds	r3, #224	; 0xe0
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	440b      	add	r3, r1
 8007490:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80074a8:	2300      	movs	r3, #0
 80074aa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80074ac:	2300      	movs	r3, #0
 80074ae:	73fb      	strb	r3, [r7, #15]
 80074b0:	e00f      	b.n	80074d2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	33e0      	adds	r3, #224	; 0xe0
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d102      	bne.n	80074cc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	e007      	b.n	80074dc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	3301      	adds	r3, #1
 80074d0:	73fb      	strb	r3, [r7, #15]
 80074d2:	7bfb      	ldrb	r3, [r7, #15]
 80074d4:	2b0f      	cmp	r3, #15
 80074d6:	d9ec      	bls.n	80074b2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80074d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80074ec:	2201      	movs	r2, #1
 80074ee:	490e      	ldr	r1, [pc, #56]	; (8007528 <MX_USB_HOST_Init+0x40>)
 80074f0:	480e      	ldr	r0, [pc, #56]	; (800752c <MX_USB_HOST_Init+0x44>)
 80074f2:	f7fe fba7 	bl	8005c44 <USBH_Init>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d001      	beq.n	8007500 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80074fc:	f7f9 fa52 	bl	80009a4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007500:	490b      	ldr	r1, [pc, #44]	; (8007530 <MX_USB_HOST_Init+0x48>)
 8007502:	480a      	ldr	r0, [pc, #40]	; (800752c <MX_USB_HOST_Init+0x44>)
 8007504:	f7fe fc2c 	bl	8005d60 <USBH_RegisterClass>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800750e:	f7f9 fa49 	bl	80009a4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007512:	4806      	ldr	r0, [pc, #24]	; (800752c <MX_USB_HOST_Init+0x44>)
 8007514:	f7fe fcb0 	bl	8005e78 <USBH_Start>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d001      	beq.n	8007522 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800751e:	f7f9 fa41 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007522:	bf00      	nop
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	08007549 	.word	0x08007549
 800752c:	200001b0 	.word	0x200001b0
 8007530:	2000000c 	.word	0x2000000c

08007534 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007538:	4802      	ldr	r0, [pc, #8]	; (8007544 <MX_USB_HOST_Process+0x10>)
 800753a:	f7fe fcad 	bl	8005e98 <USBH_Process>
}
 800753e:	bf00      	nop
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	200001b0 	.word	0x200001b0

08007548 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	460b      	mov	r3, r1
 8007552:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007554:	78fb      	ldrb	r3, [r7, #3]
 8007556:	3b01      	subs	r3, #1
 8007558:	2b04      	cmp	r3, #4
 800755a:	d819      	bhi.n	8007590 <USBH_UserProcess+0x48>
 800755c:	a201      	add	r2, pc, #4	; (adr r2, 8007564 <USBH_UserProcess+0x1c>)
 800755e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007562:	bf00      	nop
 8007564:	08007591 	.word	0x08007591
 8007568:	08007581 	.word	0x08007581
 800756c:	08007591 	.word	0x08007591
 8007570:	08007589 	.word	0x08007589
 8007574:	08007579 	.word	0x08007579
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007578:	4b09      	ldr	r3, [pc, #36]	; (80075a0 <USBH_UserProcess+0x58>)
 800757a:	2203      	movs	r2, #3
 800757c:	701a      	strb	r2, [r3, #0]
  break;
 800757e:	e008      	b.n	8007592 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007580:	4b07      	ldr	r3, [pc, #28]	; (80075a0 <USBH_UserProcess+0x58>)
 8007582:	2202      	movs	r2, #2
 8007584:	701a      	strb	r2, [r3, #0]
  break;
 8007586:	e004      	b.n	8007592 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007588:	4b05      	ldr	r3, [pc, #20]	; (80075a0 <USBH_UserProcess+0x58>)
 800758a:	2201      	movs	r2, #1
 800758c:	701a      	strb	r2, [r3, #0]
  break;
 800758e:	e000      	b.n	8007592 <USBH_UserProcess+0x4a>

  default:
  break;
 8007590:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007592:	bf00      	nop
 8007594:	370c      	adds	r7, #12
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	20000588 	.word	0x20000588

080075a4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b08a      	sub	sp, #40	; 0x28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075ac:	f107 0314 	add.w	r3, r7, #20
 80075b0:	2200      	movs	r2, #0
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	605a      	str	r2, [r3, #4]
 80075b6:	609a      	str	r2, [r3, #8]
 80075b8:	60da      	str	r2, [r3, #12]
 80075ba:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075c4:	d147      	bne.n	8007656 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075c6:	2300      	movs	r3, #0
 80075c8:	613b      	str	r3, [r7, #16]
 80075ca:	4b25      	ldr	r3, [pc, #148]	; (8007660 <HAL_HCD_MspInit+0xbc>)
 80075cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ce:	4a24      	ldr	r2, [pc, #144]	; (8007660 <HAL_HCD_MspInit+0xbc>)
 80075d0:	f043 0301 	orr.w	r3, r3, #1
 80075d4:	6313      	str	r3, [r2, #48]	; 0x30
 80075d6:	4b22      	ldr	r3, [pc, #136]	; (8007660 <HAL_HCD_MspInit+0xbc>)
 80075d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	613b      	str	r3, [r7, #16]
 80075e0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80075e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075e8:	2300      	movs	r3, #0
 80075ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ec:	2300      	movs	r3, #0
 80075ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80075f0:	f107 0314 	add.w	r3, r7, #20
 80075f4:	4619      	mov	r1, r3
 80075f6:	481b      	ldr	r0, [pc, #108]	; (8007664 <HAL_HCD_MspInit+0xc0>)
 80075f8:	f7f9 fd68 	bl	80010cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80075fc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007602:	2302      	movs	r3, #2
 8007604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007606:	2300      	movs	r3, #0
 8007608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800760a:	2300      	movs	r3, #0
 800760c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800760e:	230a      	movs	r3, #10
 8007610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007612:	f107 0314 	add.w	r3, r7, #20
 8007616:	4619      	mov	r1, r3
 8007618:	4812      	ldr	r0, [pc, #72]	; (8007664 <HAL_HCD_MspInit+0xc0>)
 800761a:	f7f9 fd57 	bl	80010cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800761e:	4b10      	ldr	r3, [pc, #64]	; (8007660 <HAL_HCD_MspInit+0xbc>)
 8007620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007622:	4a0f      	ldr	r2, [pc, #60]	; (8007660 <HAL_HCD_MspInit+0xbc>)
 8007624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007628:	6353      	str	r3, [r2, #52]	; 0x34
 800762a:	2300      	movs	r3, #0
 800762c:	60fb      	str	r3, [r7, #12]
 800762e:	4b0c      	ldr	r3, [pc, #48]	; (8007660 <HAL_HCD_MspInit+0xbc>)
 8007630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007632:	4a0b      	ldr	r2, [pc, #44]	; (8007660 <HAL_HCD_MspInit+0xbc>)
 8007634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007638:	6453      	str	r3, [r2, #68]	; 0x44
 800763a:	4b09      	ldr	r3, [pc, #36]	; (8007660 <HAL_HCD_MspInit+0xbc>)
 800763c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800763e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007642:	60fb      	str	r3, [r7, #12]
 8007644:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007646:	2200      	movs	r2, #0
 8007648:	2100      	movs	r1, #0
 800764a:	2043      	movs	r0, #67	; 0x43
 800764c:	f7f9 fd07 	bl	800105e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007650:	2043      	movs	r0, #67	; 0x43
 8007652:	f7f9 fd20 	bl	8001096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007656:	bf00      	nop
 8007658:	3728      	adds	r7, #40	; 0x28
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	40023800 	.word	0x40023800
 8007664:	40020000 	.word	0x40020000

08007668 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007676:	4618      	mov	r0, r3
 8007678:	f7fe ffed 	bl	8006656 <USBH_LL_IncTimer>
}
 800767c:	bf00      	nop
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007692:	4618      	mov	r0, r3
 8007694:	f7ff f825 	bl	80066e2 <USBH_LL_Connect>
}
 8007698:	bf00      	nop
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7ff f82e 	bl	8006710 <USBH_LL_Disconnect>
}
 80076b4:	bf00      	nop
 80076b6:	3708      	adds	r7, #8
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	460b      	mov	r3, r1
 80076c6:	70fb      	strb	r3, [r7, #3]
 80076c8:	4613      	mov	r3, r2
 80076ca:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fe ffdf 	bl	80066aa <USBH_LL_PortEnabled>
}
 80076ec:	bf00      	nop
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007702:	4618      	mov	r0, r3
 8007704:	f7fe ffdf 	bl	80066c6 <USBH_LL_PortDisabled>
}
 8007708:	bf00      	nop
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800771e:	2b01      	cmp	r3, #1
 8007720:	d12a      	bne.n	8007778 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007722:	4a18      	ldr	r2, [pc, #96]	; (8007784 <USBH_LL_Init+0x74>)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a15      	ldr	r2, [pc, #84]	; (8007784 <USBH_LL_Init+0x74>)
 800772e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007732:	4b14      	ldr	r3, [pc, #80]	; (8007784 <USBH_LL_Init+0x74>)
 8007734:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007738:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800773a:	4b12      	ldr	r3, [pc, #72]	; (8007784 <USBH_LL_Init+0x74>)
 800773c:	2208      	movs	r2, #8
 800773e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007740:	4b10      	ldr	r3, [pc, #64]	; (8007784 <USBH_LL_Init+0x74>)
 8007742:	2201      	movs	r2, #1
 8007744:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007746:	4b0f      	ldr	r3, [pc, #60]	; (8007784 <USBH_LL_Init+0x74>)
 8007748:	2200      	movs	r2, #0
 800774a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800774c:	4b0d      	ldr	r3, [pc, #52]	; (8007784 <USBH_LL_Init+0x74>)
 800774e:	2202      	movs	r2, #2
 8007750:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007752:	4b0c      	ldr	r3, [pc, #48]	; (8007784 <USBH_LL_Init+0x74>)
 8007754:	2200      	movs	r2, #0
 8007756:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007758:	480a      	ldr	r0, [pc, #40]	; (8007784 <USBH_LL_Init+0x74>)
 800775a:	f7f9 feb7 	bl	80014cc <HAL_HCD_Init>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007764:	f7f9 f91e 	bl	80009a4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007768:	4806      	ldr	r0, [pc, #24]	; (8007784 <USBH_LL_Init+0x74>)
 800776a:	f7fa fa9a 	bl	8001ca2 <HAL_HCD_GetCurrentFrame>
 800776e:	4603      	mov	r3, r0
 8007770:	4619      	mov	r1, r3
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7fe ff60 	bl	8006638 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	2000058c 	.word	0x2000058c

08007788 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007790:	2300      	movs	r3, #0
 8007792:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007794:	2300      	movs	r3, #0
 8007796:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fa fa09 	bl	8001bb6 <HAL_HCD_Start>
 80077a4:	4603      	mov	r3, r0
 80077a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f000 f95c 	bl	8007a68 <USBH_Get_USB_Status>
 80077b0:	4603      	mov	r3, r0
 80077b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b084      	sub	sp, #16
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7fa fa11 	bl	8001bfc <HAL_HCD_Stop>
 80077da:	4603      	mov	r3, r0
 80077dc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80077de:	7bfb      	ldrb	r3, [r7, #15]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f000 f941 	bl	8007a68 <USBH_Get_USB_Status>
 80077e6:	4603      	mov	r3, r0
 80077e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80077fc:	2301      	movs	r3, #1
 80077fe:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007806:	4618      	mov	r0, r3
 8007808:	f7fa fa59 	bl	8001cbe <HAL_HCD_GetCurrentSpeed>
 800780c:	4603      	mov	r3, r0
 800780e:	2b02      	cmp	r3, #2
 8007810:	d00c      	beq.n	800782c <USBH_LL_GetSpeed+0x38>
 8007812:	2b02      	cmp	r3, #2
 8007814:	d80d      	bhi.n	8007832 <USBH_LL_GetSpeed+0x3e>
 8007816:	2b00      	cmp	r3, #0
 8007818:	d002      	beq.n	8007820 <USBH_LL_GetSpeed+0x2c>
 800781a:	2b01      	cmp	r3, #1
 800781c:	d003      	beq.n	8007826 <USBH_LL_GetSpeed+0x32>
 800781e:	e008      	b.n	8007832 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007820:	2300      	movs	r3, #0
 8007822:	73fb      	strb	r3, [r7, #15]
    break;
 8007824:	e008      	b.n	8007838 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007826:	2301      	movs	r3, #1
 8007828:	73fb      	strb	r3, [r7, #15]
    break;
 800782a:	e005      	b.n	8007838 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800782c:	2302      	movs	r3, #2
 800782e:	73fb      	strb	r3, [r7, #15]
    break;
 8007830:	e002      	b.n	8007838 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007832:	2301      	movs	r3, #1
 8007834:	73fb      	strb	r3, [r7, #15]
    break;
 8007836:	bf00      	nop
  }
  return  speed;
 8007838:	7bfb      	ldrb	r3, [r7, #15]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007858:	4618      	mov	r0, r3
 800785a:	f7fa f9ec 	bl	8001c36 <HAL_HCD_ResetPort>
 800785e:	4603      	mov	r3, r0
 8007860:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007862:	7bfb      	ldrb	r3, [r7, #15]
 8007864:	4618      	mov	r0, r3
 8007866:	f000 f8ff 	bl	8007a68 <USBH_Get_USB_Status>
 800786a:	4603      	mov	r3, r0
 800786c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800786e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	460b      	mov	r3, r1
 8007882:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800788a:	78fa      	ldrb	r2, [r7, #3]
 800788c:	4611      	mov	r1, r2
 800788e:	4618      	mov	r0, r3
 8007890:	f7fa f9f3 	bl	8001c7a <HAL_HCD_HC_GetXferCount>
 8007894:	4603      	mov	r3, r0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3708      	adds	r7, #8
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800789e:	b590      	push	{r4, r7, lr}
 80078a0:	b089      	sub	sp, #36	; 0x24
 80078a2:	af04      	add	r7, sp, #16
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	4608      	mov	r0, r1
 80078a8:	4611      	mov	r1, r2
 80078aa:	461a      	mov	r2, r3
 80078ac:	4603      	mov	r3, r0
 80078ae:	70fb      	strb	r3, [r7, #3]
 80078b0:	460b      	mov	r3, r1
 80078b2:	70bb      	strb	r3, [r7, #2]
 80078b4:	4613      	mov	r3, r2
 80078b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078bc:	2300      	movs	r3, #0
 80078be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80078c6:	787c      	ldrb	r4, [r7, #1]
 80078c8:	78ba      	ldrb	r2, [r7, #2]
 80078ca:	78f9      	ldrb	r1, [r7, #3]
 80078cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80078ce:	9302      	str	r3, [sp, #8]
 80078d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80078d4:	9301      	str	r3, [sp, #4]
 80078d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	4623      	mov	r3, r4
 80078de:	f7f9 fe57 	bl	8001590 <HAL_HCD_HC_Init>
 80078e2:	4603      	mov	r3, r0
 80078e4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
 80078e8:	4618      	mov	r0, r3
 80078ea:	f000 f8bd 	bl	8007a68 <USBH_Get_USB_Status>
 80078ee:	4603      	mov	r3, r0
 80078f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd90      	pop	{r4, r7, pc}

080078fc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	460b      	mov	r3, r1
 8007906:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800790c:	2300      	movs	r3, #0
 800790e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007916:	78fa      	ldrb	r2, [r7, #3]
 8007918:	4611      	mov	r1, r2
 800791a:	4618      	mov	r0, r3
 800791c:	f7f9 fec7 	bl	80016ae <HAL_HCD_HC_Halt>
 8007920:	4603      	mov	r3, r0
 8007922:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	4618      	mov	r0, r3
 8007928:	f000 f89e 	bl	8007a68 <USBH_Get_USB_Status>
 800792c:	4603      	mov	r3, r0
 800792e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007930:	7bbb      	ldrb	r3, [r7, #14]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800793a:	b590      	push	{r4, r7, lr}
 800793c:	b089      	sub	sp, #36	; 0x24
 800793e:	af04      	add	r7, sp, #16
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	4608      	mov	r0, r1
 8007944:	4611      	mov	r1, r2
 8007946:	461a      	mov	r2, r3
 8007948:	4603      	mov	r3, r0
 800794a:	70fb      	strb	r3, [r7, #3]
 800794c:	460b      	mov	r3, r1
 800794e:	70bb      	strb	r3, [r7, #2]
 8007950:	4613      	mov	r3, r2
 8007952:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007954:	2300      	movs	r3, #0
 8007956:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007962:	787c      	ldrb	r4, [r7, #1]
 8007964:	78ba      	ldrb	r2, [r7, #2]
 8007966:	78f9      	ldrb	r1, [r7, #3]
 8007968:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800796c:	9303      	str	r3, [sp, #12]
 800796e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007970:	9302      	str	r3, [sp, #8]
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	9301      	str	r3, [sp, #4]
 8007976:	f897 3020 	ldrb.w	r3, [r7, #32]
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	4623      	mov	r3, r4
 800797e:	f7f9 feb9 	bl	80016f4 <HAL_HCD_HC_SubmitRequest>
 8007982:	4603      	mov	r3, r0
 8007984:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007986:	7bfb      	ldrb	r3, [r7, #15]
 8007988:	4618      	mov	r0, r3
 800798a:	f000 f86d 	bl	8007a68 <USBH_Get_USB_Status>
 800798e:	4603      	mov	r3, r0
 8007990:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007992:	7bbb      	ldrb	r3, [r7, #14]
}
 8007994:	4618      	mov	r0, r3
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	bd90      	pop	{r4, r7, pc}

0800799c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	460b      	mov	r3, r1
 80079a6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80079ae:	78fa      	ldrb	r2, [r7, #3]
 80079b0:	4611      	mov	r1, r2
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fa f94d 	bl	8001c52 <HAL_HCD_HC_GetURBState>
 80079b8:	4603      	mov	r3, r0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b082      	sub	sp, #8
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
 80079ca:	460b      	mov	r3, r1
 80079cc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d103      	bne.n	80079e0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80079d8:	78fb      	ldrb	r3, [r7, #3]
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 f870 	bl	8007ac0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80079e0:	20c8      	movs	r0, #200	; 0xc8
 80079e2:	f7f9 fa3d 	bl	8000e60 <HAL_Delay>
  return USBH_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3708      	adds	r7, #8
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	460b      	mov	r3, r1
 80079fa:	70fb      	strb	r3, [r7, #3]
 80079fc:	4613      	mov	r3, r2
 80079fe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a06:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007a08:	78fb      	ldrb	r3, [r7, #3]
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	212c      	movs	r1, #44	; 0x2c
 8007a0e:	fb01 f303 	mul.w	r3, r1, r3
 8007a12:	4413      	add	r3, r2
 8007a14:	333b      	adds	r3, #59	; 0x3b
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d009      	beq.n	8007a30 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007a1c:	78fb      	ldrb	r3, [r7, #3]
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	212c      	movs	r1, #44	; 0x2c
 8007a22:	fb01 f303 	mul.w	r3, r1, r3
 8007a26:	4413      	add	r3, r2
 8007a28:	3354      	adds	r3, #84	; 0x54
 8007a2a:	78ba      	ldrb	r2, [r7, #2]
 8007a2c:	701a      	strb	r2, [r3, #0]
 8007a2e:	e008      	b.n	8007a42 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007a30:	78fb      	ldrb	r3, [r7, #3]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	212c      	movs	r1, #44	; 0x2c
 8007a36:	fb01 f303 	mul.w	r3, r1, r3
 8007a3a:	4413      	add	r3, r2
 8007a3c:	3355      	adds	r3, #85	; 0x55
 8007a3e:	78ba      	ldrb	r2, [r7, #2]
 8007a40:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3714      	adds	r7, #20
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7f9 fa01 	bl	8000e60 <HAL_Delay>
}
 8007a5e:	bf00      	nop
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	4603      	mov	r3, r0
 8007a70:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a76:	79fb      	ldrb	r3, [r7, #7]
 8007a78:	2b03      	cmp	r3, #3
 8007a7a:	d817      	bhi.n	8007aac <USBH_Get_USB_Status+0x44>
 8007a7c:	a201      	add	r2, pc, #4	; (adr r2, 8007a84 <USBH_Get_USB_Status+0x1c>)
 8007a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a82:	bf00      	nop
 8007a84:	08007a95 	.word	0x08007a95
 8007a88:	08007a9b 	.word	0x08007a9b
 8007a8c:	08007aa1 	.word	0x08007aa1
 8007a90:	08007aa7 	.word	0x08007aa7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	73fb      	strb	r3, [r7, #15]
    break;
 8007a98:	e00b      	b.n	8007ab2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a9e:	e008      	b.n	8007ab2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	73fb      	strb	r3, [r7, #15]
    break;
 8007aa4:	e005      	b.n	8007ab2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	73fb      	strb	r3, [r7, #15]
    break;
 8007aaa:	e002      	b.n	8007ab2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007aac:	2302      	movs	r3, #2
 8007aae:	73fb      	strb	r3, [r7, #15]
    break;
 8007ab0:	bf00      	nop
  }
  return usb_status;
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3714      	adds	r7, #20
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007aca:	79fb      	ldrb	r3, [r7, #7]
 8007acc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007ace:	79fb      	ldrb	r3, [r7, #7]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d102      	bne.n	8007ada <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	73fb      	strb	r3, [r7, #15]
 8007ad8:	e001      	b.n	8007ade <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007ada:	2301      	movs	r3, #1
 8007adc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007ade:	7bfb      	ldrb	r3, [r7, #15]
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	2101      	movs	r1, #1
 8007ae4:	4803      	ldr	r0, [pc, #12]	; (8007af4 <MX_DriverVbusFS+0x34>)
 8007ae6:	f7f9 fca5 	bl	8001434 <HAL_GPIO_WritePin>
}
 8007aea:	bf00      	nop
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	40020800 	.word	0x40020800

08007af8 <__errno>:
 8007af8:	4b01      	ldr	r3, [pc, #4]	; (8007b00 <__errno+0x8>)
 8007afa:	6818      	ldr	r0, [r3, #0]
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	2000002c 	.word	0x2000002c

08007b04 <__libc_init_array>:
 8007b04:	b570      	push	{r4, r5, r6, lr}
 8007b06:	4d0d      	ldr	r5, [pc, #52]	; (8007b3c <__libc_init_array+0x38>)
 8007b08:	4c0d      	ldr	r4, [pc, #52]	; (8007b40 <__libc_init_array+0x3c>)
 8007b0a:	1b64      	subs	r4, r4, r5
 8007b0c:	10a4      	asrs	r4, r4, #2
 8007b0e:	2600      	movs	r6, #0
 8007b10:	42a6      	cmp	r6, r4
 8007b12:	d109      	bne.n	8007b28 <__libc_init_array+0x24>
 8007b14:	4d0b      	ldr	r5, [pc, #44]	; (8007b44 <__libc_init_array+0x40>)
 8007b16:	4c0c      	ldr	r4, [pc, #48]	; (8007b48 <__libc_init_array+0x44>)
 8007b18:	f000 f92e 	bl	8007d78 <_init>
 8007b1c:	1b64      	subs	r4, r4, r5
 8007b1e:	10a4      	asrs	r4, r4, #2
 8007b20:	2600      	movs	r6, #0
 8007b22:	42a6      	cmp	r6, r4
 8007b24:	d105      	bne.n	8007b32 <__libc_init_array+0x2e>
 8007b26:	bd70      	pop	{r4, r5, r6, pc}
 8007b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b2c:	4798      	blx	r3
 8007b2e:	3601      	adds	r6, #1
 8007b30:	e7ee      	b.n	8007b10 <__libc_init_array+0xc>
 8007b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b36:	4798      	blx	r3
 8007b38:	3601      	adds	r6, #1
 8007b3a:	e7f2      	b.n	8007b22 <__libc_init_array+0x1e>
 8007b3c:	08007db4 	.word	0x08007db4
 8007b40:	08007db4 	.word	0x08007db4
 8007b44:	08007db4 	.word	0x08007db4
 8007b48:	08007db8 	.word	0x08007db8

08007b4c <malloc>:
 8007b4c:	4b02      	ldr	r3, [pc, #8]	; (8007b58 <malloc+0xc>)
 8007b4e:	4601      	mov	r1, r0
 8007b50:	6818      	ldr	r0, [r3, #0]
 8007b52:	f000 b87f 	b.w	8007c54 <_malloc_r>
 8007b56:	bf00      	nop
 8007b58:	2000002c 	.word	0x2000002c

08007b5c <free>:
 8007b5c:	4b02      	ldr	r3, [pc, #8]	; (8007b68 <free+0xc>)
 8007b5e:	4601      	mov	r1, r0
 8007b60:	6818      	ldr	r0, [r3, #0]
 8007b62:	f000 b80b 	b.w	8007b7c <_free_r>
 8007b66:	bf00      	nop
 8007b68:	2000002c 	.word	0x2000002c

08007b6c <memset>:
 8007b6c:	4402      	add	r2, r0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d100      	bne.n	8007b76 <memset+0xa>
 8007b74:	4770      	bx	lr
 8007b76:	f803 1b01 	strb.w	r1, [r3], #1
 8007b7a:	e7f9      	b.n	8007b70 <memset+0x4>

08007b7c <_free_r>:
 8007b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b7e:	2900      	cmp	r1, #0
 8007b80:	d044      	beq.n	8007c0c <_free_r+0x90>
 8007b82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b86:	9001      	str	r0, [sp, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f1a1 0404 	sub.w	r4, r1, #4
 8007b8e:	bfb8      	it	lt
 8007b90:	18e4      	addlt	r4, r4, r3
 8007b92:	f000 f8e3 	bl	8007d5c <__malloc_lock>
 8007b96:	4a1e      	ldr	r2, [pc, #120]	; (8007c10 <_free_r+0x94>)
 8007b98:	9801      	ldr	r0, [sp, #4]
 8007b9a:	6813      	ldr	r3, [r2, #0]
 8007b9c:	b933      	cbnz	r3, 8007bac <_free_r+0x30>
 8007b9e:	6063      	str	r3, [r4, #4]
 8007ba0:	6014      	str	r4, [r2, #0]
 8007ba2:	b003      	add	sp, #12
 8007ba4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ba8:	f000 b8de 	b.w	8007d68 <__malloc_unlock>
 8007bac:	42a3      	cmp	r3, r4
 8007bae:	d908      	bls.n	8007bc2 <_free_r+0x46>
 8007bb0:	6825      	ldr	r5, [r4, #0]
 8007bb2:	1961      	adds	r1, r4, r5
 8007bb4:	428b      	cmp	r3, r1
 8007bb6:	bf01      	itttt	eq
 8007bb8:	6819      	ldreq	r1, [r3, #0]
 8007bba:	685b      	ldreq	r3, [r3, #4]
 8007bbc:	1949      	addeq	r1, r1, r5
 8007bbe:	6021      	streq	r1, [r4, #0]
 8007bc0:	e7ed      	b.n	8007b9e <_free_r+0x22>
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	b10b      	cbz	r3, 8007bcc <_free_r+0x50>
 8007bc8:	42a3      	cmp	r3, r4
 8007bca:	d9fa      	bls.n	8007bc2 <_free_r+0x46>
 8007bcc:	6811      	ldr	r1, [r2, #0]
 8007bce:	1855      	adds	r5, r2, r1
 8007bd0:	42a5      	cmp	r5, r4
 8007bd2:	d10b      	bne.n	8007bec <_free_r+0x70>
 8007bd4:	6824      	ldr	r4, [r4, #0]
 8007bd6:	4421      	add	r1, r4
 8007bd8:	1854      	adds	r4, r2, r1
 8007bda:	42a3      	cmp	r3, r4
 8007bdc:	6011      	str	r1, [r2, #0]
 8007bde:	d1e0      	bne.n	8007ba2 <_free_r+0x26>
 8007be0:	681c      	ldr	r4, [r3, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	6053      	str	r3, [r2, #4]
 8007be6:	4421      	add	r1, r4
 8007be8:	6011      	str	r1, [r2, #0]
 8007bea:	e7da      	b.n	8007ba2 <_free_r+0x26>
 8007bec:	d902      	bls.n	8007bf4 <_free_r+0x78>
 8007bee:	230c      	movs	r3, #12
 8007bf0:	6003      	str	r3, [r0, #0]
 8007bf2:	e7d6      	b.n	8007ba2 <_free_r+0x26>
 8007bf4:	6825      	ldr	r5, [r4, #0]
 8007bf6:	1961      	adds	r1, r4, r5
 8007bf8:	428b      	cmp	r3, r1
 8007bfa:	bf04      	itt	eq
 8007bfc:	6819      	ldreq	r1, [r3, #0]
 8007bfe:	685b      	ldreq	r3, [r3, #4]
 8007c00:	6063      	str	r3, [r4, #4]
 8007c02:	bf04      	itt	eq
 8007c04:	1949      	addeq	r1, r1, r5
 8007c06:	6021      	streq	r1, [r4, #0]
 8007c08:	6054      	str	r4, [r2, #4]
 8007c0a:	e7ca      	b.n	8007ba2 <_free_r+0x26>
 8007c0c:	b003      	add	sp, #12
 8007c0e:	bd30      	pop	{r4, r5, pc}
 8007c10:	20000890 	.word	0x20000890

08007c14 <sbrk_aligned>:
 8007c14:	b570      	push	{r4, r5, r6, lr}
 8007c16:	4e0e      	ldr	r6, [pc, #56]	; (8007c50 <sbrk_aligned+0x3c>)
 8007c18:	460c      	mov	r4, r1
 8007c1a:	6831      	ldr	r1, [r6, #0]
 8007c1c:	4605      	mov	r5, r0
 8007c1e:	b911      	cbnz	r1, 8007c26 <sbrk_aligned+0x12>
 8007c20:	f000 f88c 	bl	8007d3c <_sbrk_r>
 8007c24:	6030      	str	r0, [r6, #0]
 8007c26:	4621      	mov	r1, r4
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f000 f887 	bl	8007d3c <_sbrk_r>
 8007c2e:	1c43      	adds	r3, r0, #1
 8007c30:	d00a      	beq.n	8007c48 <sbrk_aligned+0x34>
 8007c32:	1cc4      	adds	r4, r0, #3
 8007c34:	f024 0403 	bic.w	r4, r4, #3
 8007c38:	42a0      	cmp	r0, r4
 8007c3a:	d007      	beq.n	8007c4c <sbrk_aligned+0x38>
 8007c3c:	1a21      	subs	r1, r4, r0
 8007c3e:	4628      	mov	r0, r5
 8007c40:	f000 f87c 	bl	8007d3c <_sbrk_r>
 8007c44:	3001      	adds	r0, #1
 8007c46:	d101      	bne.n	8007c4c <sbrk_aligned+0x38>
 8007c48:	f04f 34ff 	mov.w	r4, #4294967295
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	bd70      	pop	{r4, r5, r6, pc}
 8007c50:	20000894 	.word	0x20000894

08007c54 <_malloc_r>:
 8007c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c58:	1ccd      	adds	r5, r1, #3
 8007c5a:	f025 0503 	bic.w	r5, r5, #3
 8007c5e:	3508      	adds	r5, #8
 8007c60:	2d0c      	cmp	r5, #12
 8007c62:	bf38      	it	cc
 8007c64:	250c      	movcc	r5, #12
 8007c66:	2d00      	cmp	r5, #0
 8007c68:	4607      	mov	r7, r0
 8007c6a:	db01      	blt.n	8007c70 <_malloc_r+0x1c>
 8007c6c:	42a9      	cmp	r1, r5
 8007c6e:	d905      	bls.n	8007c7c <_malloc_r+0x28>
 8007c70:	230c      	movs	r3, #12
 8007c72:	603b      	str	r3, [r7, #0]
 8007c74:	2600      	movs	r6, #0
 8007c76:	4630      	mov	r0, r6
 8007c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c7c:	4e2e      	ldr	r6, [pc, #184]	; (8007d38 <_malloc_r+0xe4>)
 8007c7e:	f000 f86d 	bl	8007d5c <__malloc_lock>
 8007c82:	6833      	ldr	r3, [r6, #0]
 8007c84:	461c      	mov	r4, r3
 8007c86:	bb34      	cbnz	r4, 8007cd6 <_malloc_r+0x82>
 8007c88:	4629      	mov	r1, r5
 8007c8a:	4638      	mov	r0, r7
 8007c8c:	f7ff ffc2 	bl	8007c14 <sbrk_aligned>
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	4604      	mov	r4, r0
 8007c94:	d14d      	bne.n	8007d32 <_malloc_r+0xde>
 8007c96:	6834      	ldr	r4, [r6, #0]
 8007c98:	4626      	mov	r6, r4
 8007c9a:	2e00      	cmp	r6, #0
 8007c9c:	d140      	bne.n	8007d20 <_malloc_r+0xcc>
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	4631      	mov	r1, r6
 8007ca2:	4638      	mov	r0, r7
 8007ca4:	eb04 0803 	add.w	r8, r4, r3
 8007ca8:	f000 f848 	bl	8007d3c <_sbrk_r>
 8007cac:	4580      	cmp	r8, r0
 8007cae:	d13a      	bne.n	8007d26 <_malloc_r+0xd2>
 8007cb0:	6821      	ldr	r1, [r4, #0]
 8007cb2:	3503      	adds	r5, #3
 8007cb4:	1a6d      	subs	r5, r5, r1
 8007cb6:	f025 0503 	bic.w	r5, r5, #3
 8007cba:	3508      	adds	r5, #8
 8007cbc:	2d0c      	cmp	r5, #12
 8007cbe:	bf38      	it	cc
 8007cc0:	250c      	movcc	r5, #12
 8007cc2:	4629      	mov	r1, r5
 8007cc4:	4638      	mov	r0, r7
 8007cc6:	f7ff ffa5 	bl	8007c14 <sbrk_aligned>
 8007cca:	3001      	adds	r0, #1
 8007ccc:	d02b      	beq.n	8007d26 <_malloc_r+0xd2>
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	442b      	add	r3, r5
 8007cd2:	6023      	str	r3, [r4, #0]
 8007cd4:	e00e      	b.n	8007cf4 <_malloc_r+0xa0>
 8007cd6:	6822      	ldr	r2, [r4, #0]
 8007cd8:	1b52      	subs	r2, r2, r5
 8007cda:	d41e      	bmi.n	8007d1a <_malloc_r+0xc6>
 8007cdc:	2a0b      	cmp	r2, #11
 8007cde:	d916      	bls.n	8007d0e <_malloc_r+0xba>
 8007ce0:	1961      	adds	r1, r4, r5
 8007ce2:	42a3      	cmp	r3, r4
 8007ce4:	6025      	str	r5, [r4, #0]
 8007ce6:	bf18      	it	ne
 8007ce8:	6059      	strne	r1, [r3, #4]
 8007cea:	6863      	ldr	r3, [r4, #4]
 8007cec:	bf08      	it	eq
 8007cee:	6031      	streq	r1, [r6, #0]
 8007cf0:	5162      	str	r2, [r4, r5]
 8007cf2:	604b      	str	r3, [r1, #4]
 8007cf4:	4638      	mov	r0, r7
 8007cf6:	f104 060b 	add.w	r6, r4, #11
 8007cfa:	f000 f835 	bl	8007d68 <__malloc_unlock>
 8007cfe:	f026 0607 	bic.w	r6, r6, #7
 8007d02:	1d23      	adds	r3, r4, #4
 8007d04:	1af2      	subs	r2, r6, r3
 8007d06:	d0b6      	beq.n	8007c76 <_malloc_r+0x22>
 8007d08:	1b9b      	subs	r3, r3, r6
 8007d0a:	50a3      	str	r3, [r4, r2]
 8007d0c:	e7b3      	b.n	8007c76 <_malloc_r+0x22>
 8007d0e:	6862      	ldr	r2, [r4, #4]
 8007d10:	42a3      	cmp	r3, r4
 8007d12:	bf0c      	ite	eq
 8007d14:	6032      	streq	r2, [r6, #0]
 8007d16:	605a      	strne	r2, [r3, #4]
 8007d18:	e7ec      	b.n	8007cf4 <_malloc_r+0xa0>
 8007d1a:	4623      	mov	r3, r4
 8007d1c:	6864      	ldr	r4, [r4, #4]
 8007d1e:	e7b2      	b.n	8007c86 <_malloc_r+0x32>
 8007d20:	4634      	mov	r4, r6
 8007d22:	6876      	ldr	r6, [r6, #4]
 8007d24:	e7b9      	b.n	8007c9a <_malloc_r+0x46>
 8007d26:	230c      	movs	r3, #12
 8007d28:	603b      	str	r3, [r7, #0]
 8007d2a:	4638      	mov	r0, r7
 8007d2c:	f000 f81c 	bl	8007d68 <__malloc_unlock>
 8007d30:	e7a1      	b.n	8007c76 <_malloc_r+0x22>
 8007d32:	6025      	str	r5, [r4, #0]
 8007d34:	e7de      	b.n	8007cf4 <_malloc_r+0xa0>
 8007d36:	bf00      	nop
 8007d38:	20000890 	.word	0x20000890

08007d3c <_sbrk_r>:
 8007d3c:	b538      	push	{r3, r4, r5, lr}
 8007d3e:	4d06      	ldr	r5, [pc, #24]	; (8007d58 <_sbrk_r+0x1c>)
 8007d40:	2300      	movs	r3, #0
 8007d42:	4604      	mov	r4, r0
 8007d44:	4608      	mov	r0, r1
 8007d46:	602b      	str	r3, [r5, #0]
 8007d48:	f7f8 ffa6 	bl	8000c98 <_sbrk>
 8007d4c:	1c43      	adds	r3, r0, #1
 8007d4e:	d102      	bne.n	8007d56 <_sbrk_r+0x1a>
 8007d50:	682b      	ldr	r3, [r5, #0]
 8007d52:	b103      	cbz	r3, 8007d56 <_sbrk_r+0x1a>
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	bd38      	pop	{r3, r4, r5, pc}
 8007d58:	20000898 	.word	0x20000898

08007d5c <__malloc_lock>:
 8007d5c:	4801      	ldr	r0, [pc, #4]	; (8007d64 <__malloc_lock+0x8>)
 8007d5e:	f000 b809 	b.w	8007d74 <__retarget_lock_acquire_recursive>
 8007d62:	bf00      	nop
 8007d64:	2000089c 	.word	0x2000089c

08007d68 <__malloc_unlock>:
 8007d68:	4801      	ldr	r0, [pc, #4]	; (8007d70 <__malloc_unlock+0x8>)
 8007d6a:	f000 b804 	b.w	8007d76 <__retarget_lock_release_recursive>
 8007d6e:	bf00      	nop
 8007d70:	2000089c 	.word	0x2000089c

08007d74 <__retarget_lock_acquire_recursive>:
 8007d74:	4770      	bx	lr

08007d76 <__retarget_lock_release_recursive>:
 8007d76:	4770      	bx	lr

08007d78 <_init>:
 8007d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7a:	bf00      	nop
 8007d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d7e:	bc08      	pop	{r3}
 8007d80:	469e      	mov	lr, r3
 8007d82:	4770      	bx	lr

08007d84 <_fini>:
 8007d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d86:	bf00      	nop
 8007d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d8a:	bc08      	pop	{r3}
 8007d8c:	469e      	mov	lr, r3
 8007d8e:	4770      	bx	lr
