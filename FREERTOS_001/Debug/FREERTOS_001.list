
FREERTOS_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045b0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08004740  08004740  00005740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004860  08004860  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004860  08004860  00005860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004868  08004868  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004868  08004868  00005868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800486c  0800486c  0000586c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004870  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006010  2**0
                  CONTENTS
 10 .bss          00004064  20000010  20000010  00006010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004074  20004074  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012b36  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c50  00000000  00000000  00018b76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001148  00000000  00000000  0001b7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d76  00000000  00000000  0001c910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021eca  00000000  00000000  0001d686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000139f7  00000000  00000000  0003f550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d30de  00000000  00000000  00052f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00126025  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004848  00000000  00000000  00126068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0012a8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004728 	.word	0x08004728

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004728 	.word	0x08004728

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <vApplicationGetIdleTaskMemory+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <vApplicationGetIdleTaskMemory+0x30>)
 80004d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2000002c 	.word	0x2000002c
 80004f0:	20000080 	.word	0x20000080

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b5b0      	push	{r4, r5, r7, lr}
 80004f6:	b092      	sub	sp, #72	@ 0x48
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fb2d 	bl	8000b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f851 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f8e3 	bl	80006cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000506:	f000 f8b7 	bl	8000678 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 800050a:	2300      	movs	r3, #0
 800050c:	643b      	str	r3, [r7, #64]	@ 0x40
 800050e:	2300      	movs	r3, #0
 8000510:	647b      	str	r3, [r7, #68]	@ 0x44
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8000512:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000516:	4618      	mov	r0, r3
 8000518:	f002 f983 	bl	8002822 <osMutexCreate>
 800051c:	4603      	mov	r3, r0
 800051e:	4a1b      	ldr	r2, [pc, #108]	@ (800058c <main+0x98>)
 8000520:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinarySemaphore */
  osSemaphoreDef(BinarySemaphore);
 8000522:	2300      	movs	r3, #0
 8000524:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000526:	2300      	movs	r3, #0
 8000528:	63fb      	str	r3, [r7, #60]	@ 0x3c
  BinarySemaphoreHandle = osSemaphoreCreate(osSemaphore(BinarySemaphore), 1);
 800052a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800052e:	2101      	movs	r1, #1
 8000530:	4618      	mov	r0, r3
 8000532:	f002 f98e 	bl	8002852 <osSemaphoreCreate>
 8000536:	4603      	mov	r3, r0
 8000538:	4a15      	ldr	r2, [pc, #84]	@ (8000590 <main+0x9c>)
 800053a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LowPriorityTask */
  osThreadDef(LowPriorityTask, StartLowPriorityTask, osPriorityBelowNormal, 0, 128);
 800053c:	4b15      	ldr	r3, [pc, #84]	@ (8000594 <main+0xa0>)
 800053e:	f107 041c 	add.w	r4, r7, #28
 8000542:	461d      	mov	r5, r3
 8000544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000548:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800054c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LowPriorityTaskHandle = osThreadCreate(osThread(LowPriorityTask), NULL);
 8000550:	f107 031c 	add.w	r3, r7, #28
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f002 f917 	bl	800278a <osThreadCreate>
 800055c:	4603      	mov	r3, r0
 800055e:	4a0e      	ldr	r2, [pc, #56]	@ (8000598 <main+0xa4>)
 8000560:	6013      	str	r3, [r2, #0]

  /* definition and creation of NormalPriorityT */
  osThreadDef(NormalPriorityT, StartNormalPriorityTask, osPriorityNormal, 0, 128);
 8000562:	4b0e      	ldr	r3, [pc, #56]	@ (800059c <main+0xa8>)
 8000564:	463c      	mov	r4, r7
 8000566:	461d      	mov	r5, r3
 8000568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000570:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  NormalPriorityTHandle = osThreadCreate(osThread(NormalPriorityT), NULL);
 8000574:	463b      	mov	r3, r7
 8000576:	2100      	movs	r1, #0
 8000578:	4618      	mov	r0, r3
 800057a:	f002 f906 	bl	800278a <osThreadCreate>
 800057e:	4603      	mov	r3, r0
 8000580:	4a07      	ldr	r2, [pc, #28]	@ (80005a0 <main+0xac>)
 8000582:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000584:	f002 f8fa 	bl	800277c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <main+0x94>
 800058c:	200002cc 	.word	0x200002cc
 8000590:	200002d0 	.word	0x200002d0
 8000594:	08004750 	.word	0x08004750
 8000598:	200002c4 	.word	0x200002c4
 800059c:	0800477c 	.word	0x0800477c
 80005a0:	200002c8 	.word	0x200002c8

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	@ 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	@ 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f004 f87e 	bl	80046b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b28      	ldr	r3, [pc, #160]	@ (8000670 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	4a27      	ldr	r2, [pc, #156]	@ (8000670 <SystemClock_Config+0xcc>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d8:	4b25      	ldr	r3, [pc, #148]	@ (8000670 <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b22      	ldr	r3, [pc, #136]	@ (8000674 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a21      	ldr	r2, [pc, #132]	@ (8000674 <SystemClock_Config+0xd0>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <SystemClock_Config+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000604:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000612:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000614:	2304      	movs	r3, #4
 8000616:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000618:	23a8      	movs	r3, #168	@ 0xa8
 800061a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000620:	2304      	movs	r3, #4
 8000622:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0320 	add.w	r3, r7, #32
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fd55 	bl	80010d8 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000634:	f000 f940 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063c:	2302      	movs	r3, #2
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000644:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000648:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800064e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2105      	movs	r1, #5
 8000656:	4618      	mov	r0, r3
 8000658:	f000 ffb6 	bl	80015c8 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000662:	f000 f929 	bl	80008b8 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	@ 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800067c:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <MX_USART2_UART_Init+0x4c>)
 800067e:	4a12      	ldr	r2, [pc, #72]	@ (80006c8 <MX_USART2_UART_Init+0x50>)
 8000680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000682:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000684:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <MX_USART2_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	@ (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <MX_USART2_UART_Init+0x4c>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006b0:	f001 fc8a 	bl	8001fc8 <HAL_UART_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ba:	f000 f8fd 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000280 	.word	0x20000280
 80006c8:	40004400 	.word	0x40004400

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	4b15      	ldr	r3, [pc, #84]	@ (800073c <MX_GPIO_Init+0x70>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a14      	ldr	r2, [pc, #80]	@ (800073c <MX_GPIO_Init+0x70>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b12      	ldr	r3, [pc, #72]	@ (800073c <MX_GPIO_Init+0x70>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <MX_GPIO_Init+0x70>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a0d      	ldr	r2, [pc, #52]	@ (800073c <MX_GPIO_Init+0x70>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b0b      	ldr	r3, [pc, #44]	@ (800073c <MX_GPIO_Init+0x70>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800071a:	2301      	movs	r3, #1
 800071c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000722:	2302      	movs	r3, #2
 8000724:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	4619      	mov	r1, r3
 800072c:	4804      	ldr	r0, [pc, #16]	@ (8000740 <MX_GPIO_Init+0x74>)
 800072e:	f000 fb37 	bl	8000da0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000732:	bf00      	nop
 8000734:	3720      	adds	r7, #32
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800
 8000740:	40020000 	.word	0x40020000

08000744 <StartLowPriorityTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLowPriorityTask */
void StartLowPriorityTask(void const * argument)
{
 8000744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000746:	b0b5      	sub	sp, #212	@ 0xd4
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  char str1[100] = "Entered Low Priority Task\n\r";
 800074c:	4b22      	ldr	r3, [pc, #136]	@ (80007d8 <StartLowPriorityTask+0x94>)
 800074e:	f107 0408 	add.w	r4, r7, #8
 8000752:	461d      	mov	r5, r3
 8000754:	6828      	ldr	r0, [r5, #0]
 8000756:	6869      	ldr	r1, [r5, #4]
 8000758:	68aa      	ldr	r2, [r5, #8]
 800075a:	68eb      	ldr	r3, [r5, #12]
 800075c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800075e:	6928      	ldr	r0, [r5, #16]
 8000760:	6969      	ldr	r1, [r5, #20]
 8000762:	69aa      	ldr	r2, [r5, #24]
 8000764:	c407      	stmia	r4!, {r0, r1, r2}
 8000766:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076a:	2248      	movs	r2, #72	@ 0x48
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f003 ffa0 	bl	80046b4 <memset>
	  HAL_UART_Transmit(&huart2, (uint8_t *)str1, sizeof(str1),1000);
 8000774:	f107 0108 	add.w	r1, r7, #8
 8000778:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800077c:	2264      	movs	r2, #100	@ 0x64
 800077e:	4817      	ldr	r0, [pc, #92]	@ (80007dc <StartLowPriorityTask+0x98>)
 8000780:	f001 fc6f 	bl	8002062 <HAL_UART_Transmit>

	  char str3[100] = "Exit Low Priority Task and releasing Semaphore\n\n\r";
 8000784:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <StartLowPriorityTask+0x9c>)
 8000786:	461c      	mov	r4, r3
 8000788:	f107 066c 	add.w	r6, r7, #108	@ 0x6c
 800078c:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8000790:	4635      	mov	r5, r6
 8000792:	4623      	mov	r3, r4
 8000794:	6818      	ldr	r0, [r3, #0]
 8000796:	6859      	ldr	r1, [r3, #4]
 8000798:	689a      	ldr	r2, [r3, #8]
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800079e:	3410      	adds	r4, #16
 80007a0:	3610      	adds	r6, #16
 80007a2:	4564      	cmp	r4, ip
 80007a4:	d1f4      	bne.n	8000790 <StartLowPriorityTask+0x4c>
 80007a6:	4632      	mov	r2, r6
 80007a8:	4623      	mov	r3, r4
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	8013      	strh	r3, [r2, #0]
 80007ae:	f107 039e 	add.w	r3, r7, #158	@ 0x9e
 80007b2:	2232      	movs	r2, #50	@ 0x32
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f003 ff7c 	bl	80046b4 <memset>
	  HAL_UART_Transmit(&huart2, (uint8_t *)str3,sizeof(str3), 1000);
 80007bc:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80007c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007c4:	2264      	movs	r2, #100	@ 0x64
 80007c6:	4805      	ldr	r0, [pc, #20]	@ (80007dc <StartLowPriorityTask+0x98>)
 80007c8:	f001 fc4b 	bl	8002062 <HAL_UART_Transmit>

	  vTaskDelay(2000);
 80007cc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007d0:	f002 fe22 	bl	8003418 <vTaskDelay>
  {
 80007d4:	bf00      	nop
 80007d6:	e7b9      	b.n	800074c <StartLowPriorityTask+0x8>
 80007d8:	08004798 	.word	0x08004798
 80007dc:	20000280 	.word	0x20000280
 80007e0:	080047b4 	.word	0x080047b4

080007e4 <StartNormalPriorityTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartNormalPriorityTask */
void StartNormalPriorityTask(void const * argument)
{
 80007e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e6:	b0b5      	sub	sp, #212	@ 0xd4
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartNormalPriorityTask */
  /* Infinite loop */
  for(;;)
  {
	  char str1[100] = "Entered Medium Priority Task\n\r";
 80007ec:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <StartNormalPriorityTask+0xa4>)
 80007ee:	f107 0408 	add.w	r4, r7, #8
 80007f2:	461d      	mov	r5, r3
 80007f4:	6828      	ldr	r0, [r5, #0]
 80007f6:	6869      	ldr	r1, [r5, #4]
 80007f8:	68aa      	ldr	r2, [r5, #8]
 80007fa:	68eb      	ldr	r3, [r5, #12]
 80007fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fe:	6928      	ldr	r0, [r5, #16]
 8000800:	6969      	ldr	r1, [r5, #20]
 8000802:	69aa      	ldr	r2, [r5, #24]
 8000804:	c407      	stmia	r4!, {r0, r1, r2}
 8000806:	8bab      	ldrh	r3, [r5, #28]
 8000808:	7faa      	ldrb	r2, [r5, #30]
 800080a:	8023      	strh	r3, [r4, #0]
 800080c:	4613      	mov	r3, r2
 800080e:	70a3      	strb	r3, [r4, #2]
 8000810:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8000814:	2245      	movs	r2, #69	@ 0x45
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f003 ff4b 	bl	80046b4 <memset>
	  HAL_UART_Transmit(&huart2, (uint8_t *)str1, sizeof(str1),1000);
 800081e:	f107 0108 	add.w	r1, r7, #8
 8000822:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000826:	2264      	movs	r2, #100	@ 0x64
 8000828:	4818      	ldr	r0, [pc, #96]	@ (800088c <StartNormalPriorityTask+0xa8>)
 800082a:	f001 fc1a 	bl	8002062 <HAL_UART_Transmit>

	  char str3[100] = "Exit Medium Priority Task and releasing Semaphore\n\n\r";
 800082e:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <StartNormalPriorityTask+0xac>)
 8000830:	461c      	mov	r4, r3
 8000832:	f107 066c 	add.w	r6, r7, #108	@ 0x6c
 8000836:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800083a:	4635      	mov	r5, r6
 800083c:	4623      	mov	r3, r4
 800083e:	6818      	ldr	r0, [r3, #0]
 8000840:	6859      	ldr	r1, [r3, #4]
 8000842:	689a      	ldr	r2, [r3, #8]
 8000844:	68db      	ldr	r3, [r3, #12]
 8000846:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000848:	3410      	adds	r4, #16
 800084a:	3610      	adds	r6, #16
 800084c:	4564      	cmp	r4, ip
 800084e:	d1f4      	bne.n	800083a <StartNormalPriorityTask+0x56>
 8000850:	4633      	mov	r3, r6
 8000852:	4622      	mov	r2, r4
 8000854:	6810      	ldr	r0, [r2, #0]
 8000856:	6018      	str	r0, [r3, #0]
 8000858:	7912      	ldrb	r2, [r2, #4]
 800085a:	711a      	strb	r2, [r3, #4]
 800085c:	f107 03a1 	add.w	r3, r7, #161	@ 0xa1
 8000860:	222f      	movs	r2, #47	@ 0x2f
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f003 ff25 	bl	80046b4 <memset>
	  HAL_UART_Transmit(&huart2, (uint8_t *)str3,sizeof(str3), 1000);
 800086a:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800086e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000872:	2264      	movs	r2, #100	@ 0x64
 8000874:	4805      	ldr	r0, [pc, #20]	@ (800088c <StartNormalPriorityTask+0xa8>)
 8000876:	f001 fbf4 	bl	8002062 <HAL_UART_Transmit>


	  vTaskDelay(2000);
 800087a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800087e:	f002 fdcb 	bl	8003418 <vTaskDelay>
  {
 8000882:	bf00      	nop
 8000884:	e7b2      	b.n	80007ec <StartNormalPriorityTask+0x8>
 8000886:	bf00      	nop
 8000888:	080047e8 	.word	0x080047e8
 800088c:	20000280 	.word	0x20000280
 8000890:	08004808 	.word	0x08004808

08000894 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a04      	ldr	r2, [pc, #16]	@ (80008b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d101      	bne.n	80008aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008a6:	f000 f979 	bl	8000b9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40010000 	.word	0x40010000

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <Error_Handler+0x8>

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <HAL_MspInit+0x54>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d2:	4a11      	ldr	r2, [pc, #68]	@ (8000918 <HAL_MspInit+0x54>)
 80008d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008da:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <HAL_MspInit+0x54>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <HAL_MspInit+0x54>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000918 <HAL_MspInit+0x54>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f6:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <HAL_MspInit+0x54>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	210f      	movs	r1, #15
 8000906:	f06f 0001 	mvn.w	r0, #1
 800090a:	f000 fa1f 	bl	8000d4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800

0800091c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	@ 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a19      	ldr	r2, [pc, #100]	@ (80009a0 <HAL_UART_MspInit+0x84>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d12b      	bne.n	8000996 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b18      	ldr	r3, [pc, #96]	@ (80009a4 <HAL_UART_MspInit+0x88>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000946:	4a17      	ldr	r2, [pc, #92]	@ (80009a4 <HAL_UART_MspInit+0x88>)
 8000948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800094c:	6413      	str	r3, [r2, #64]	@ 0x40
 800094e:	4b15      	ldr	r3, [pc, #84]	@ (80009a4 <HAL_UART_MspInit+0x88>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <HAL_UART_MspInit+0x88>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a10      	ldr	r2, [pc, #64]	@ (80009a4 <HAL_UART_MspInit+0x88>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <HAL_UART_MspInit+0x88>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000976:	230c      	movs	r3, #12
 8000978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000986:	2307      	movs	r3, #7
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <HAL_UART_MspInit+0x8c>)
 8000992:	f000 fa05 	bl	8000da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000996:	bf00      	nop
 8000998:	3728      	adds	r7, #40	@ 0x28
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40004400 	.word	0x40004400
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020000 	.word	0x40020000

080009ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08c      	sub	sp, #48	@ 0x30
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009bc:	2300      	movs	r3, #0
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000a80 <HAL_InitTick+0xd4>)
 80009c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c4:	4a2e      	ldr	r2, [pc, #184]	@ (8000a80 <HAL_InitTick+0xd4>)
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80009cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000a80 <HAL_InitTick+0xd4>)
 80009ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009d8:	f107 020c 	add.w	r2, r7, #12
 80009dc:	f107 0310 	add.w	r3, r7, #16
 80009e0:	4611      	mov	r1, r2
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 f810 	bl	8001a08 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80009e8:	f000 fffa 	bl	80019e0 <HAL_RCC_GetPCLK2Freq>
 80009ec:	4603      	mov	r3, r0
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009f4:	4a23      	ldr	r2, [pc, #140]	@ (8000a84 <HAL_InitTick+0xd8>)
 80009f6:	fba2 2303 	umull	r2, r3, r2, r3
 80009fa:	0c9b      	lsrs	r3, r3, #18
 80009fc:	3b01      	subs	r3, #1
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a00:	4b21      	ldr	r3, [pc, #132]	@ (8000a88 <HAL_InitTick+0xdc>)
 8000a02:	4a22      	ldr	r2, [pc, #136]	@ (8000a8c <HAL_InitTick+0xe0>)
 8000a04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a06:	4b20      	ldr	r3, [pc, #128]	@ (8000a88 <HAL_InitTick+0xdc>)
 8000a08:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a0c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a0e:	4a1e      	ldr	r2, [pc, #120]	@ (8000a88 <HAL_InitTick+0xdc>)
 8000a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a12:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a14:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <HAL_InitTick+0xdc>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a88 <HAL_InitTick+0xdc>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a20:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <HAL_InitTick+0xdc>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a26:	4818      	ldr	r0, [pc, #96]	@ (8000a88 <HAL_InitTick+0xdc>)
 8000a28:	f001 f820 	bl	8001a6c <HAL_TIM_Base_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d11b      	bne.n	8000a72 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a3a:	4813      	ldr	r0, [pc, #76]	@ (8000a88 <HAL_InitTick+0xdc>)
 8000a3c:	f001 f870 	bl	8001b20 <HAL_TIM_Base_Start_IT>
 8000a40:	4603      	mov	r3, r0
 8000a42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d111      	bne.n	8000a72 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a4e:	2019      	movs	r0, #25
 8000a50:	f000 f998 	bl	8000d84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b0f      	cmp	r3, #15
 8000a58:	d808      	bhi.n	8000a6c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	6879      	ldr	r1, [r7, #4]
 8000a5e:	2019      	movs	r0, #25
 8000a60:	f000 f974 	bl	8000d4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a64:	4a0a      	ldr	r2, [pc, #40]	@ (8000a90 <HAL_InitTick+0xe4>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6013      	str	r3, [r2, #0]
 8000a6a:	e002      	b.n	8000a72 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3730      	adds	r7, #48	@ 0x30
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800
 8000a84:	431bde83 	.word	0x431bde83
 8000a88:	200002d4 	.word	0x200002d4
 8000a8c:	40010000 	.word	0x40010000
 8000a90:	20000004 	.word	0x20000004

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <NMI_Handler+0x4>

08000a9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
	...

08000acc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ad0:	4802      	ldr	r0, [pc, #8]	@ (8000adc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ad2:	f001 f895 	bl	8001c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200002d4 	.word	0x200002d4

08000ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae4:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <SystemInit+0x20>)
 8000ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aea:	4a05      	ldr	r2, [pc, #20]	@ (8000b00 <SystemInit+0x20>)
 8000aec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000af0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b08:	480d      	ldr	r0, [pc, #52]	@ (8000b40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b0a:	490e      	ldr	r1, [pc, #56]	@ (8000b44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	@ (8000b48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b20:	4c0b      	ldr	r4, [pc, #44]	@ (8000b50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b2e:	f7ff ffd7 	bl	8000ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b32:	f003 fdc7 	bl	80046c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b36:	f7ff fcdd 	bl	80004f4 <main>
  bx  lr    
 8000b3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b48:	08004870 	.word	0x08004870
  ldr r2, =_sbss
 8000b4c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b50:	20004074 	.word	0x20004074

08000b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC_IRQHandler>
	...

08000b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0d      	ldr	r2, [pc, #52]	@ (8000b98 <HAL_Init+0x40>)
 8000b62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b68:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <HAL_Init+0x40>)
 8000b6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b74:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a07      	ldr	r2, [pc, #28]	@ (8000b98 <HAL_Init+0x40>)
 8000b7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b80:	2003      	movs	r0, #3
 8000b82:	f000 f8d8 	bl	8000d36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b86:	200f      	movs	r0, #15
 8000b88:	f7ff ff10 	bl	80009ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b8c:	f7ff fe9a 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023c00 	.word	0x40023c00

08000b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <HAL_IncTick+0x20>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <HAL_IncTick+0x24>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a04      	ldr	r2, [pc, #16]	@ (8000bc0 <HAL_IncTick+0x24>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	2000031c 	.word	0x2000031c

08000bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	@ (8000bd8 <HAL_GetTick+0x14>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	2000031c 	.word	0x2000031c

08000bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bec:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	@ (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	60d3      	str	r3, [r2, #12]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c28:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <__NVIC_GetPriorityGrouping+0x18>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	f003 0307 	and.w	r3, r3, #7
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	db0b      	blt.n	8000c6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	f003 021f 	and.w	r2, r3, #31
 8000c58:	4907      	ldr	r1, [pc, #28]	@ (8000c78 <__NVIC_EnableIRQ+0x38>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	095b      	lsrs	r3, r3, #5
 8000c60:	2001      	movs	r0, #1
 8000c62:	fa00 f202 	lsl.w	r2, r0, r2
 8000c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000e100 	.word	0xe000e100

08000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	db0a      	blt.n	8000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	490c      	ldr	r1, [pc, #48]	@ (8000cc8 <__NVIC_SetPriority+0x4c>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca4:	e00a      	b.n	8000cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4908      	ldr	r1, [pc, #32]	@ (8000ccc <__NVIC_SetPriority+0x50>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	0112      	lsls	r2, r2, #4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	761a      	strb	r2, [r3, #24]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	@ 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f1c3 0307 	rsb	r3, r3, #7
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf28      	it	cs
 8000cee:	2304      	movcs	r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d902      	bls.n	8000d00 <NVIC_EncodePriority+0x30>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	e000      	b.n	8000d02 <NVIC_EncodePriority+0x32>
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43d9      	mvns	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4313      	orrs	r3, r2
         );
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	@ 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ff4c 	bl	8000bdc <__NVIC_SetPriorityGrouping>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
 8000d58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5e:	f7ff ff61 	bl	8000c24 <__NVIC_GetPriorityGrouping>
 8000d62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	68b9      	ldr	r1, [r7, #8]
 8000d68:	6978      	ldr	r0, [r7, #20]
 8000d6a:	f7ff ffb1 	bl	8000cd0 <NVIC_EncodePriority>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ff80 	bl	8000c7c <__NVIC_SetPriority>
}
 8000d7c:	bf00      	nop
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ff54 	bl	8000c40 <__NVIC_EnableIRQ>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	@ 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
 8000dba:	e16b      	b.n	8001094 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	f040 815a 	bne.w	800108e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d005      	beq.n	8000df2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d130      	bne.n	8000e54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4013      	ands	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	68da      	ldr	r2, [r3, #12]
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e28:	2201      	movs	r2, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	091b      	lsrs	r3, r3, #4
 8000e3e:	f003 0201 	and.w	r2, r3, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	d017      	beq.n	8000e90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d123      	bne.n	8000ee4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	08da      	lsrs	r2, r3, #3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3208      	adds	r2, #8
 8000ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	220f      	movs	r2, #15
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	691a      	ldr	r2, [r3, #16]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	08da      	lsrs	r2, r3, #3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3208      	adds	r2, #8
 8000ede:	69b9      	ldr	r1, [r7, #24]
 8000ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0203 	and.w	r2, r3, #3
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f000 80b4 	beq.w	800108e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b60      	ldr	r3, [pc, #384]	@ (80010ac <HAL_GPIO_Init+0x30c>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2e:	4a5f      	ldr	r2, [pc, #380]	@ (80010ac <HAL_GPIO_Init+0x30c>)
 8000f30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f36:	4b5d      	ldr	r3, [pc, #372]	@ (80010ac <HAL_GPIO_Init+0x30c>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f42:	4a5b      	ldr	r2, [pc, #364]	@ (80010b0 <HAL_GPIO_Init+0x310>)
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	3302      	adds	r3, #2
 8000f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	220f      	movs	r2, #15
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a52      	ldr	r2, [pc, #328]	@ (80010b4 <HAL_GPIO_Init+0x314>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d02b      	beq.n	8000fc6 <HAL_GPIO_Init+0x226>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a51      	ldr	r2, [pc, #324]	@ (80010b8 <HAL_GPIO_Init+0x318>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d025      	beq.n	8000fc2 <HAL_GPIO_Init+0x222>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a50      	ldr	r2, [pc, #320]	@ (80010bc <HAL_GPIO_Init+0x31c>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d01f      	beq.n	8000fbe <HAL_GPIO_Init+0x21e>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4f      	ldr	r2, [pc, #316]	@ (80010c0 <HAL_GPIO_Init+0x320>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d019      	beq.n	8000fba <HAL_GPIO_Init+0x21a>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4e      	ldr	r2, [pc, #312]	@ (80010c4 <HAL_GPIO_Init+0x324>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d013      	beq.n	8000fb6 <HAL_GPIO_Init+0x216>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4d      	ldr	r2, [pc, #308]	@ (80010c8 <HAL_GPIO_Init+0x328>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d00d      	beq.n	8000fb2 <HAL_GPIO_Init+0x212>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a4c      	ldr	r2, [pc, #304]	@ (80010cc <HAL_GPIO_Init+0x32c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d007      	beq.n	8000fae <HAL_GPIO_Init+0x20e>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4b      	ldr	r2, [pc, #300]	@ (80010d0 <HAL_GPIO_Init+0x330>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d101      	bne.n	8000faa <HAL_GPIO_Init+0x20a>
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	e00e      	b.n	8000fc8 <HAL_GPIO_Init+0x228>
 8000faa:	2308      	movs	r3, #8
 8000fac:	e00c      	b.n	8000fc8 <HAL_GPIO_Init+0x228>
 8000fae:	2306      	movs	r3, #6
 8000fb0:	e00a      	b.n	8000fc8 <HAL_GPIO_Init+0x228>
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	e008      	b.n	8000fc8 <HAL_GPIO_Init+0x228>
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	e006      	b.n	8000fc8 <HAL_GPIO_Init+0x228>
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e004      	b.n	8000fc8 <HAL_GPIO_Init+0x228>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	e002      	b.n	8000fc8 <HAL_GPIO_Init+0x228>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <HAL_GPIO_Init+0x228>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	69fa      	ldr	r2, [r7, #28]
 8000fca:	f002 0203 	and.w	r2, r2, #3
 8000fce:	0092      	lsls	r2, r2, #2
 8000fd0:	4093      	lsls	r3, r2
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd8:	4935      	ldr	r1, [pc, #212]	@ (80010b0 <HAL_GPIO_Init+0x310>)
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	3302      	adds	r3, #2
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80010d4 <HAL_GPIO_Init+0x334>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800100a:	4a32      	ldr	r2, [pc, #200]	@ (80010d4 <HAL_GPIO_Init+0x334>)
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001010:	4b30      	ldr	r3, [pc, #192]	@ (80010d4 <HAL_GPIO_Init+0x334>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001034:	4a27      	ldr	r2, [pc, #156]	@ (80010d4 <HAL_GPIO_Init+0x334>)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800103a:	4b26      	ldr	r3, [pc, #152]	@ (80010d4 <HAL_GPIO_Init+0x334>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800105e:	4a1d      	ldr	r2, [pc, #116]	@ (80010d4 <HAL_GPIO_Init+0x334>)
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001064:	4b1b      	ldr	r3, [pc, #108]	@ (80010d4 <HAL_GPIO_Init+0x334>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001088:	4a12      	ldr	r2, [pc, #72]	@ (80010d4 <HAL_GPIO_Init+0x334>)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3301      	adds	r3, #1
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	2b0f      	cmp	r3, #15
 8001098:	f67f ae90 	bls.w	8000dbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3724      	adds	r7, #36	@ 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40013800 	.word	0x40013800
 80010b4:	40020000 	.word	0x40020000
 80010b8:	40020400 	.word	0x40020400
 80010bc:	40020800 	.word	0x40020800
 80010c0:	40020c00 	.word	0x40020c00
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40021400 	.word	0x40021400
 80010cc:	40021800 	.word	0x40021800
 80010d0:	40021c00 	.word	0x40021c00
 80010d4:	40013c00 	.word	0x40013c00

080010d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e267      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d075      	beq.n	80011e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010f6:	4b88      	ldr	r3, [pc, #544]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 030c 	and.w	r3, r3, #12
 80010fe:	2b04      	cmp	r3, #4
 8001100:	d00c      	beq.n	800111c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001102:	4b85      	ldr	r3, [pc, #532]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800110a:	2b08      	cmp	r3, #8
 800110c:	d112      	bne.n	8001134 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800110e:	4b82      	ldr	r3, [pc, #520]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001116:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800111a:	d10b      	bne.n	8001134 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111c:	4b7e      	ldr	r3, [pc, #504]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d05b      	beq.n	80011e0 <HAL_RCC_OscConfig+0x108>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d157      	bne.n	80011e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e242      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800113c:	d106      	bne.n	800114c <HAL_RCC_OscConfig+0x74>
 800113e:	4b76      	ldr	r3, [pc, #472]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a75      	ldr	r2, [pc, #468]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e01d      	b.n	8001188 <HAL_RCC_OscConfig+0xb0>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001154:	d10c      	bne.n	8001170 <HAL_RCC_OscConfig+0x98>
 8001156:	4b70      	ldr	r3, [pc, #448]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a6f      	ldr	r2, [pc, #444]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 800115c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	4b6d      	ldr	r3, [pc, #436]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a6c      	ldr	r2, [pc, #432]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e00b      	b.n	8001188 <HAL_RCC_OscConfig+0xb0>
 8001170:	4b69      	ldr	r3, [pc, #420]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a68      	ldr	r2, [pc, #416]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001176:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	4b66      	ldr	r3, [pc, #408]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a65      	ldr	r2, [pc, #404]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001182:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d013      	beq.n	80011b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001190:	f7ff fd18 	bl	8000bc4 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001198:	f7ff fd14 	bl	8000bc4 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b64      	cmp	r3, #100	@ 0x64
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e207      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011aa:	4b5b      	ldr	r3, [pc, #364]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f0      	beq.n	8001198 <HAL_RCC_OscConfig+0xc0>
 80011b6:	e014      	b.n	80011e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b8:	f7ff fd04 	bl	8000bc4 <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c0:	f7ff fd00 	bl	8000bc4 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b64      	cmp	r3, #100	@ 0x64
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e1f3      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d2:	4b51      	ldr	r3, [pc, #324]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f0      	bne.n	80011c0 <HAL_RCC_OscConfig+0xe8>
 80011de:	e000      	b.n	80011e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d063      	beq.n	80012b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00b      	beq.n	8001212 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011fa:	4b47      	ldr	r3, [pc, #284]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001202:	2b08      	cmp	r3, #8
 8001204:	d11c      	bne.n	8001240 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001206:	4b44      	ldr	r3, [pc, #272]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d116      	bne.n	8001240 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001212:	4b41      	ldr	r3, [pc, #260]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d005      	beq.n	800122a <HAL_RCC_OscConfig+0x152>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d001      	beq.n	800122a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e1c7      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800122a:	4b3b      	ldr	r3, [pc, #236]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	4937      	ldr	r1, [pc, #220]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 800123a:	4313      	orrs	r3, r2
 800123c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123e:	e03a      	b.n	80012b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d020      	beq.n	800128a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001248:	4b34      	ldr	r3, [pc, #208]	@ (800131c <HAL_RCC_OscConfig+0x244>)
 800124a:	2201      	movs	r2, #1
 800124c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124e:	f7ff fcb9 	bl	8000bc4 <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001256:	f7ff fcb5 	bl	8000bc4 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e1a8      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001268:	4b2b      	ldr	r3, [pc, #172]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0f0      	beq.n	8001256 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001274:	4b28      	ldr	r3, [pc, #160]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	4925      	ldr	r1, [pc, #148]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 8001284:	4313      	orrs	r3, r2
 8001286:	600b      	str	r3, [r1, #0]
 8001288:	e015      	b.n	80012b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800128a:	4b24      	ldr	r3, [pc, #144]	@ (800131c <HAL_RCC_OscConfig+0x244>)
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001290:	f7ff fc98 	bl	8000bc4 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001298:	f7ff fc94 	bl	8000bc4 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e187      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f0      	bne.n	8001298 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d036      	beq.n	8001330 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d016      	beq.n	80012f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ca:	4b15      	ldr	r3, [pc, #84]	@ (8001320 <HAL_RCC_OscConfig+0x248>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d0:	f7ff fc78 	bl	8000bc4 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d8:	f7ff fc74 	bl	8000bc4 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e167      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <HAL_RCC_OscConfig+0x240>)
 80012ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0f0      	beq.n	80012d8 <HAL_RCC_OscConfig+0x200>
 80012f6:	e01b      	b.n	8001330 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012f8:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <HAL_RCC_OscConfig+0x248>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fe:	f7ff fc61 	bl	8000bc4 <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001304:	e00e      	b.n	8001324 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001306:	f7ff fc5d 	bl	8000bc4 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d907      	bls.n	8001324 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e150      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
 8001318:	40023800 	.word	0x40023800
 800131c:	42470000 	.word	0x42470000
 8001320:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001324:	4b88      	ldr	r3, [pc, #544]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 8001326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1ea      	bne.n	8001306 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 8097 	beq.w	800146c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800133e:	2300      	movs	r3, #0
 8001340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001342:	4b81      	ldr	r3, [pc, #516]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10f      	bne.n	800136e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	4b7d      	ldr	r3, [pc, #500]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	4a7c      	ldr	r2, [pc, #496]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800135c:	6413      	str	r3, [r2, #64]	@ 0x40
 800135e:	4b7a      	ldr	r3, [pc, #488]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800136a:	2301      	movs	r3, #1
 800136c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136e:	4b77      	ldr	r3, [pc, #476]	@ (800154c <HAL_RCC_OscConfig+0x474>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001376:	2b00      	cmp	r3, #0
 8001378:	d118      	bne.n	80013ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800137a:	4b74      	ldr	r3, [pc, #464]	@ (800154c <HAL_RCC_OscConfig+0x474>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a73      	ldr	r2, [pc, #460]	@ (800154c <HAL_RCC_OscConfig+0x474>)
 8001380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001386:	f7ff fc1d 	bl	8000bc4 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800138e:	f7ff fc19 	bl	8000bc4 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e10c      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a0:	4b6a      	ldr	r3, [pc, #424]	@ (800154c <HAL_RCC_OscConfig+0x474>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d106      	bne.n	80013c2 <HAL_RCC_OscConfig+0x2ea>
 80013b4:	4b64      	ldr	r3, [pc, #400]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 80013b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b8:	4a63      	ldr	r2, [pc, #396]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6713      	str	r3, [r2, #112]	@ 0x70
 80013c0:	e01c      	b.n	80013fc <HAL_RCC_OscConfig+0x324>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b05      	cmp	r3, #5
 80013c8:	d10c      	bne.n	80013e4 <HAL_RCC_OscConfig+0x30c>
 80013ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 80013cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ce:	4a5e      	ldr	r2, [pc, #376]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80013d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 80013d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013da:	4a5b      	ldr	r2, [pc, #364]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80013e2:	e00b      	b.n	80013fc <HAL_RCC_OscConfig+0x324>
 80013e4:	4b58      	ldr	r3, [pc, #352]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 80013e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e8:	4a57      	ldr	r2, [pc, #348]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 80013ea:	f023 0301 	bic.w	r3, r3, #1
 80013ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80013f0:	4b55      	ldr	r3, [pc, #340]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 80013f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013f4:	4a54      	ldr	r2, [pc, #336]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 80013f6:	f023 0304 	bic.w	r3, r3, #4
 80013fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d015      	beq.n	8001430 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001404:	f7ff fbde 	bl	8000bc4 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800140a:	e00a      	b.n	8001422 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800140c:	f7ff fbda 	bl	8000bc4 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800141a:	4293      	cmp	r3, r2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e0cb      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001422:	4b49      	ldr	r3, [pc, #292]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 8001424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0ee      	beq.n	800140c <HAL_RCC_OscConfig+0x334>
 800142e:	e014      	b.n	800145a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001430:	f7ff fbc8 	bl	8000bc4 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001436:	e00a      	b.n	800144e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001438:	f7ff fbc4 	bl	8000bc4 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001446:	4293      	cmp	r3, r2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e0b5      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800144e:	4b3e      	ldr	r3, [pc, #248]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 8001450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1ee      	bne.n	8001438 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800145a:	7dfb      	ldrb	r3, [r7, #23]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d105      	bne.n	800146c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001460:	4b39      	ldr	r3, [pc, #228]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001464:	4a38      	ldr	r2, [pc, #224]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 8001466:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800146a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 80a1 	beq.w	80015b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001476:	4b34      	ldr	r3, [pc, #208]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 030c 	and.w	r3, r3, #12
 800147e:	2b08      	cmp	r3, #8
 8001480:	d05c      	beq.n	800153c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d141      	bne.n	800150e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148a:	4b31      	ldr	r3, [pc, #196]	@ (8001550 <HAL_RCC_OscConfig+0x478>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001490:	f7ff fb98 	bl	8000bc4 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001498:	f7ff fb94 	bl	8000bc4 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e087      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014aa:	4b27      	ldr	r3, [pc, #156]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69da      	ldr	r2, [r3, #28]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c4:	019b      	lsls	r3, r3, #6
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014cc:	085b      	lsrs	r3, r3, #1
 80014ce:	3b01      	subs	r3, #1
 80014d0:	041b      	lsls	r3, r3, #16
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014d8:	061b      	lsls	r3, r3, #24
 80014da:	491b      	ldr	r1, [pc, #108]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001550 <HAL_RCC_OscConfig+0x478>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e6:	f7ff fb6d 	bl	8000bc4 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ee:	f7ff fb69 	bl	8000bc4 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e05c      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001500:	4b11      	ldr	r3, [pc, #68]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x416>
 800150c:	e054      	b.n	80015b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150e:	4b10      	ldr	r3, [pc, #64]	@ (8001550 <HAL_RCC_OscConfig+0x478>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fb56 	bl	8000bc4 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800151c:	f7ff fb52 	bl	8000bc4 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e045      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152e:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <HAL_RCC_OscConfig+0x470>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x444>
 800153a:	e03d      	b.n	80015b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d107      	bne.n	8001554 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e038      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
 8001548:	40023800 	.word	0x40023800
 800154c:	40007000 	.word	0x40007000
 8001550:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001554:	4b1b      	ldr	r3, [pc, #108]	@ (80015c4 <HAL_RCC_OscConfig+0x4ec>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d028      	beq.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800156c:	429a      	cmp	r2, r3
 800156e:	d121      	bne.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800157a:	429a      	cmp	r2, r3
 800157c:	d11a      	bne.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001584:	4013      	ands	r3, r2
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800158a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800158c:	4293      	cmp	r3, r2
 800158e:	d111      	bne.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800159a:	085b      	lsrs	r3, r3, #1
 800159c:	3b01      	subs	r3, #1
 800159e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d107      	bne.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d001      	beq.n	80015b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800

080015c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0cc      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015dc:	4b68      	ldr	r3, [pc, #416]	@ (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d90c      	bls.n	8001604 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ea:	4b65      	ldr	r3, [pc, #404]	@ (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f2:	4b63      	ldr	r3, [pc, #396]	@ (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d001      	beq.n	8001604 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0b8      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d020      	beq.n	8001652 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800161c:	4b59      	ldr	r3, [pc, #356]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	4a58      	ldr	r2, [pc, #352]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001626:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001634:	4b53      	ldr	r3, [pc, #332]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	4a52      	ldr	r2, [pc, #328]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800163e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001640:	4b50      	ldr	r3, [pc, #320]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	494d      	ldr	r1, [pc, #308]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	4313      	orrs	r3, r2
 8001650:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d044      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d107      	bne.n	8001676 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001666:	4b47      	ldr	r3, [pc, #284]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d119      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e07f      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d003      	beq.n	8001686 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001682:	2b03      	cmp	r3, #3
 8001684:	d107      	bne.n	8001696 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001686:	4b3f      	ldr	r3, [pc, #252]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d109      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e06f      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001696:	4b3b      	ldr	r3, [pc, #236]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e067      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016a6:	4b37      	ldr	r3, [pc, #220]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f023 0203 	bic.w	r2, r3, #3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4934      	ldr	r1, [pc, #208]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016b8:	f7ff fa84 	bl	8000bc4 <HAL_GetTick>
 80016bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016be:	e00a      	b.n	80016d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c0:	f7ff fa80 	bl	8000bc4 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e04f      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 020c 	and.w	r2, r3, #12
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d1eb      	bne.n	80016c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016e8:	4b25      	ldr	r3, [pc, #148]	@ (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d20c      	bcs.n	8001710 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f6:	4b22      	ldr	r3, [pc, #136]	@ (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fe:	4b20      	ldr	r3, [pc, #128]	@ (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e032      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d008      	beq.n	800172e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800171c:	4b19      	ldr	r3, [pc, #100]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	4916      	ldr	r1, [pc, #88]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	4313      	orrs	r3, r2
 800172c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	2b00      	cmp	r3, #0
 8001738:	d009      	beq.n	800174e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800173a:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	490e      	ldr	r1, [pc, #56]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	4313      	orrs	r3, r2
 800174c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800174e:	f000 f821 	bl	8001794 <HAL_RCC_GetSysClockFreq>
 8001752:	4602      	mov	r2, r0
 8001754:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	091b      	lsrs	r3, r3, #4
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	490a      	ldr	r1, [pc, #40]	@ (8001788 <HAL_RCC_ClockConfig+0x1c0>)
 8001760:	5ccb      	ldrb	r3, [r1, r3]
 8001762:	fa22 f303 	lsr.w	r3, r2, r3
 8001766:	4a09      	ldr	r2, [pc, #36]	@ (800178c <HAL_RCC_ClockConfig+0x1c4>)
 8001768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800176a:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <HAL_RCC_ClockConfig+0x1c8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff f91c 	bl	80009ac <HAL_InitTick>

  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023c00 	.word	0x40023c00
 8001784:	40023800 	.word	0x40023800
 8001788:	08004848 	.word	0x08004848
 800178c:	20000000 	.word	0x20000000
 8001790:	20000004 	.word	0x20000004

08001794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001798:	b094      	sub	sp, #80	@ 0x50
 800179a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	647b      	str	r3, [r7, #68]	@ 0x44
 80017a0:	2300      	movs	r3, #0
 80017a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80017a4:	2300      	movs	r3, #0
 80017a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017ac:	4b79      	ldr	r3, [pc, #484]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x200>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 030c 	and.w	r3, r3, #12
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d00d      	beq.n	80017d4 <HAL_RCC_GetSysClockFreq+0x40>
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	f200 80e1 	bhi.w	8001980 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <HAL_RCC_GetSysClockFreq+0x34>
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	d003      	beq.n	80017ce <HAL_RCC_GetSysClockFreq+0x3a>
 80017c6:	e0db      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017c8:	4b73      	ldr	r3, [pc, #460]	@ (8001998 <HAL_RCC_GetSysClockFreq+0x204>)
 80017ca:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80017cc:	e0db      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ce:	4b73      	ldr	r3, [pc, #460]	@ (800199c <HAL_RCC_GetSysClockFreq+0x208>)
 80017d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017d2:	e0d8      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017d4:	4b6f      	ldr	r3, [pc, #444]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x200>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017dc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017de:	4b6d      	ldr	r3, [pc, #436]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x200>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d063      	beq.n	80018b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ea:	4b6a      	ldr	r3, [pc, #424]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x200>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	099b      	lsrs	r3, r3, #6
 80017f0:	2200      	movs	r2, #0
 80017f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80017f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80017fe:	2300      	movs	r3, #0
 8001800:	637b      	str	r3, [r7, #52]	@ 0x34
 8001802:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001806:	4622      	mov	r2, r4
 8001808:	462b      	mov	r3, r5
 800180a:	f04f 0000 	mov.w	r0, #0
 800180e:	f04f 0100 	mov.w	r1, #0
 8001812:	0159      	lsls	r1, r3, #5
 8001814:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001818:	0150      	lsls	r0, r2, #5
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4621      	mov	r1, r4
 8001820:	1a51      	subs	r1, r2, r1
 8001822:	6139      	str	r1, [r7, #16]
 8001824:	4629      	mov	r1, r5
 8001826:	eb63 0301 	sbc.w	r3, r3, r1
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001838:	4659      	mov	r1, fp
 800183a:	018b      	lsls	r3, r1, #6
 800183c:	4651      	mov	r1, sl
 800183e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001842:	4651      	mov	r1, sl
 8001844:	018a      	lsls	r2, r1, #6
 8001846:	4651      	mov	r1, sl
 8001848:	ebb2 0801 	subs.w	r8, r2, r1
 800184c:	4659      	mov	r1, fp
 800184e:	eb63 0901 	sbc.w	r9, r3, r1
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800185e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001862:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001866:	4690      	mov	r8, r2
 8001868:	4699      	mov	r9, r3
 800186a:	4623      	mov	r3, r4
 800186c:	eb18 0303 	adds.w	r3, r8, r3
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	462b      	mov	r3, r5
 8001874:	eb49 0303 	adc.w	r3, r9, r3
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001886:	4629      	mov	r1, r5
 8001888:	024b      	lsls	r3, r1, #9
 800188a:	4621      	mov	r1, r4
 800188c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001890:	4621      	mov	r1, r4
 8001892:	024a      	lsls	r2, r1, #9
 8001894:	4610      	mov	r0, r2
 8001896:	4619      	mov	r1, r3
 8001898:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800189a:	2200      	movs	r2, #0
 800189c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800189e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80018a4:	f7fe fc94 	bl	80001d0 <__aeabi_uldivmod>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4613      	mov	r3, r2
 80018ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018b0:	e058      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018b2:	4b38      	ldr	r3, [pc, #224]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x200>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	099b      	lsrs	r3, r3, #6
 80018b8:	2200      	movs	r2, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	4611      	mov	r1, r2
 80018be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018c2:	623b      	str	r3, [r7, #32]
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80018c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018cc:	4642      	mov	r2, r8
 80018ce:	464b      	mov	r3, r9
 80018d0:	f04f 0000 	mov.w	r0, #0
 80018d4:	f04f 0100 	mov.w	r1, #0
 80018d8:	0159      	lsls	r1, r3, #5
 80018da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018de:	0150      	lsls	r0, r2, #5
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4641      	mov	r1, r8
 80018e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80018ea:	4649      	mov	r1, r9
 80018ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001900:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001904:	ebb2 040a 	subs.w	r4, r2, sl
 8001908:	eb63 050b 	sbc.w	r5, r3, fp
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	00eb      	lsls	r3, r5, #3
 8001916:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800191a:	00e2      	lsls	r2, r4, #3
 800191c:	4614      	mov	r4, r2
 800191e:	461d      	mov	r5, r3
 8001920:	4643      	mov	r3, r8
 8001922:	18e3      	adds	r3, r4, r3
 8001924:	603b      	str	r3, [r7, #0]
 8001926:	464b      	mov	r3, r9
 8001928:	eb45 0303 	adc.w	r3, r5, r3
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	e9d7 4500 	ldrd	r4, r5, [r7]
 800193a:	4629      	mov	r1, r5
 800193c:	028b      	lsls	r3, r1, #10
 800193e:	4621      	mov	r1, r4
 8001940:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001944:	4621      	mov	r1, r4
 8001946:	028a      	lsls	r2, r1, #10
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800194e:	2200      	movs	r2, #0
 8001950:	61bb      	str	r3, [r7, #24]
 8001952:	61fa      	str	r2, [r7, #28]
 8001954:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001958:	f7fe fc3a 	bl	80001d0 <__aeabi_uldivmod>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4613      	mov	r3, r2
 8001962:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001964:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x200>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	0c1b      	lsrs	r3, r3, #16
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	3301      	adds	r3, #1
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001974:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001978:	fbb2 f3f3 	udiv	r3, r2, r3
 800197c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800197e:	e002      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001980:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <HAL_RCC_GetSysClockFreq+0x204>)
 8001982:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001986:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001988:	4618      	mov	r0, r3
 800198a:	3750      	adds	r7, #80	@ 0x50
 800198c:	46bd      	mov	sp, r7
 800198e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	00f42400 	.word	0x00f42400
 800199c:	007a1200 	.word	0x007a1200

080019a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019a4:	4b03      	ldr	r3, [pc, #12]	@ (80019b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000000 	.word	0x20000000

080019b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019bc:	f7ff fff0 	bl	80019a0 <HAL_RCC_GetHCLKFreq>
 80019c0:	4602      	mov	r2, r0
 80019c2:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	0a9b      	lsrs	r3, r3, #10
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	4903      	ldr	r1, [pc, #12]	@ (80019dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ce:	5ccb      	ldrb	r3, [r1, r3]
 80019d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40023800 	.word	0x40023800
 80019dc:	08004858 	.word	0x08004858

080019e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019e4:	f7ff ffdc 	bl	80019a0 <HAL_RCC_GetHCLKFreq>
 80019e8:	4602      	mov	r2, r0
 80019ea:	4b05      	ldr	r3, [pc, #20]	@ (8001a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	0b5b      	lsrs	r3, r3, #13
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	4903      	ldr	r1, [pc, #12]	@ (8001a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019f6:	5ccb      	ldrb	r3, [r1, r3]
 80019f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40023800 	.word	0x40023800
 8001a04:	08004858 	.word	0x08004858

08001a08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	220f      	movs	r2, #15
 8001a16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a18:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <HAL_RCC_GetClockConfig+0x5c>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 0203 	and.w	r2, r3, #3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a24:	4b0f      	ldr	r3, [pc, #60]	@ (8001a64 <HAL_RCC_GetClockConfig+0x5c>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a30:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <HAL_RCC_GetClockConfig+0x5c>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a3c:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <HAL_RCC_GetClockConfig+0x5c>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	08db      	lsrs	r3, r3, #3
 8001a42:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a4a:	4b07      	ldr	r3, [pc, #28]	@ (8001a68 <HAL_RCC_GetClockConfig+0x60>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0207 	and.w	r2, r3, #7
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	601a      	str	r2, [r3, #0]
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40023c00 	.word	0x40023c00

08001a6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e041      	b.n	8001b02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d106      	bne.n	8001a98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f839 	bl	8001b0a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3304      	adds	r3, #4
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4610      	mov	r0, r2
 8001aac:	f000 f9d8 	bl	8001e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d001      	beq.n	8001b38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e04e      	b.n	8001bd6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a23      	ldr	r2, [pc, #140]	@ (8001be4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d022      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0x80>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b62:	d01d      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0x80>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a1f      	ldr	r2, [pc, #124]	@ (8001be8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d018      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0x80>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a1e      	ldr	r2, [pc, #120]	@ (8001bec <HAL_TIM_Base_Start_IT+0xcc>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d013      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0x80>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8001bf0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d00e      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0x80>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a1b      	ldr	r2, [pc, #108]	@ (8001bf4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d009      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0x80>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a19      	ldr	r2, [pc, #100]	@ (8001bf8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d004      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0x80>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a18      	ldr	r2, [pc, #96]	@ (8001bfc <HAL_TIM_Base_Start_IT+0xdc>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d111      	bne.n	8001bc4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b06      	cmp	r3, #6
 8001bb0:	d010      	beq.n	8001bd4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f042 0201 	orr.w	r2, r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bc2:	e007      	b.n	8001bd4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0201 	orr.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40010000 	.word	0x40010000
 8001be8:	40000400 	.word	0x40000400
 8001bec:	40000800 	.word	0x40000800
 8001bf0:	40000c00 	.word	0x40000c00
 8001bf4:	40010400 	.word	0x40010400
 8001bf8:	40014000 	.word	0x40014000
 8001bfc:	40001800 	.word	0x40001800

08001c00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d122      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d11b      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f06f 0202 	mvn.w	r2, #2
 8001c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f8ee 	bl	8001e24 <HAL_TIM_IC_CaptureCallback>
 8001c48:	e005      	b.n	8001c56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f8e0 	bl	8001e10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f8f1 	bl	8001e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d122      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d11b      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0204 	mvn.w	r2, #4
 8001c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2202      	movs	r2, #2
 8001c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f8c4 	bl	8001e24 <HAL_TIM_IC_CaptureCallback>
 8001c9c:	e005      	b.n	8001caa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f8b6 	bl	8001e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f8c7 	bl	8001e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d122      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d11b      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0208 	mvn.w	r2, #8
 8001cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2204      	movs	r2, #4
 8001cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f89a 	bl	8001e24 <HAL_TIM_IC_CaptureCallback>
 8001cf0:	e005      	b.n	8001cfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f88c 	bl	8001e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f89d 	bl	8001e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	f003 0310 	and.w	r3, r3, #16
 8001d0e:	2b10      	cmp	r3, #16
 8001d10:	d122      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	2b10      	cmp	r3, #16
 8001d1e:	d11b      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f06f 0210 	mvn.w	r2, #16
 8001d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2208      	movs	r2, #8
 8001d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f870 	bl	8001e24 <HAL_TIM_IC_CaptureCallback>
 8001d44:	e005      	b.n	8001d52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f862 	bl	8001e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f873 	bl	8001e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d10e      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d107      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0201 	mvn.w	r2, #1
 8001d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7fe fd88 	bl	8000894 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d8e:	2b80      	cmp	r3, #128	@ 0x80
 8001d90:	d10e      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d9c:	2b80      	cmp	r3, #128	@ 0x80
 8001d9e:	d107      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f902 	bl	8001fb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dba:	2b40      	cmp	r3, #64	@ 0x40
 8001dbc:	d10e      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dc8:	2b40      	cmp	r3, #64	@ 0x40
 8001dca:	d107      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f838 	bl	8001e4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	2b20      	cmp	r3, #32
 8001de8:	d10e      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0320 	and.w	r3, r3, #32
 8001df4:	2b20      	cmp	r3, #32
 8001df6:	d107      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0220 	mvn.w	r2, #32
 8001e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f8cc 	bl	8001fa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a40      	ldr	r2, [pc, #256]	@ (8001f74 <TIM_Base_SetConfig+0x114>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d013      	beq.n	8001ea0 <TIM_Base_SetConfig+0x40>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e7e:	d00f      	beq.n	8001ea0 <TIM_Base_SetConfig+0x40>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a3d      	ldr	r2, [pc, #244]	@ (8001f78 <TIM_Base_SetConfig+0x118>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d00b      	beq.n	8001ea0 <TIM_Base_SetConfig+0x40>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a3c      	ldr	r2, [pc, #240]	@ (8001f7c <TIM_Base_SetConfig+0x11c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d007      	beq.n	8001ea0 <TIM_Base_SetConfig+0x40>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a3b      	ldr	r2, [pc, #236]	@ (8001f80 <TIM_Base_SetConfig+0x120>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d003      	beq.n	8001ea0 <TIM_Base_SetConfig+0x40>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a3a      	ldr	r2, [pc, #232]	@ (8001f84 <TIM_Base_SetConfig+0x124>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d108      	bne.n	8001eb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a2f      	ldr	r2, [pc, #188]	@ (8001f74 <TIM_Base_SetConfig+0x114>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d02b      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ec0:	d027      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a2c      	ldr	r2, [pc, #176]	@ (8001f78 <TIM_Base_SetConfig+0x118>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d023      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a2b      	ldr	r2, [pc, #172]	@ (8001f7c <TIM_Base_SetConfig+0x11c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d01f      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a2a      	ldr	r2, [pc, #168]	@ (8001f80 <TIM_Base_SetConfig+0x120>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01b      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a29      	ldr	r2, [pc, #164]	@ (8001f84 <TIM_Base_SetConfig+0x124>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d017      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a28      	ldr	r2, [pc, #160]	@ (8001f88 <TIM_Base_SetConfig+0x128>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a27      	ldr	r2, [pc, #156]	@ (8001f8c <TIM_Base_SetConfig+0x12c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00f      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a26      	ldr	r2, [pc, #152]	@ (8001f90 <TIM_Base_SetConfig+0x130>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d00b      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a25      	ldr	r2, [pc, #148]	@ (8001f94 <TIM_Base_SetConfig+0x134>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d007      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a24      	ldr	r2, [pc, #144]	@ (8001f98 <TIM_Base_SetConfig+0x138>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d003      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a23      	ldr	r2, [pc, #140]	@ (8001f9c <TIM_Base_SetConfig+0x13c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d108      	bne.n	8001f24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f74 <TIM_Base_SetConfig+0x114>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d003      	beq.n	8001f58 <TIM_Base_SetConfig+0xf8>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a0c      	ldr	r2, [pc, #48]	@ (8001f84 <TIM_Base_SetConfig+0x124>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d103      	bne.n	8001f60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	615a      	str	r2, [r3, #20]
}
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40010000 	.word	0x40010000
 8001f78:	40000400 	.word	0x40000400
 8001f7c:	40000800 	.word	0x40000800
 8001f80:	40000c00 	.word	0x40000c00
 8001f84:	40010400 	.word	0x40010400
 8001f88:	40014000 	.word	0x40014000
 8001f8c:	40014400 	.word	0x40014400
 8001f90:	40014800 	.word	0x40014800
 8001f94:	40001800 	.word	0x40001800
 8001f98:	40001c00 	.word	0x40001c00
 8001f9c:	40002000 	.word	0x40002000

08001fa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e03f      	b.n	800205a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d106      	bne.n	8001ff4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7fe fc94 	bl	800091c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2224      	movs	r2, #36	@ 0x24
 8001ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800200a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f929 	bl	8002264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002020:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	695a      	ldr	r2, [r3, #20]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002030:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002040:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2220      	movs	r2, #32
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2220      	movs	r2, #32
 8002054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b08a      	sub	sp, #40	@ 0x28
 8002066:	af02      	add	r7, sp, #8
 8002068:	60f8      	str	r0, [r7, #12]
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	603b      	str	r3, [r7, #0]
 800206e:	4613      	mov	r3, r2
 8002070:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b20      	cmp	r3, #32
 8002080:	d17c      	bne.n	800217c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <HAL_UART_Transmit+0x2c>
 8002088:	88fb      	ldrh	r3, [r7, #6]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e075      	b.n	800217e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_UART_Transmit+0x3e>
 800209c:	2302      	movs	r3, #2
 800209e:	e06e      	b.n	800217e <HAL_UART_Transmit+0x11c>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2221      	movs	r2, #33	@ 0x21
 80020b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020b6:	f7fe fd85 	bl	8000bc4 <HAL_GetTick>
 80020ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	88fa      	ldrh	r2, [r7, #6]
 80020c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	88fa      	ldrh	r2, [r7, #6]
 80020c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020d0:	d108      	bne.n	80020e4 <HAL_UART_Transmit+0x82>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d104      	bne.n	80020e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	e003      	b.n	80020ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80020f4:	e02a      	b.n	800214c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2200      	movs	r2, #0
 80020fe:	2180      	movs	r1, #128	@ 0x80
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 f840 	bl	8002186 <UART_WaitOnFlagUntilTimeout>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e036      	b.n	800217e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10b      	bne.n	800212e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002124:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	3302      	adds	r3, #2
 800212a:	61bb      	str	r3, [r7, #24]
 800212c:	e007      	b.n	800213e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	781a      	ldrb	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	3301      	adds	r3, #1
 800213c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002150:	b29b      	uxth	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1cf      	bne.n	80020f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2200      	movs	r2, #0
 800215e:	2140      	movs	r1, #64	@ 0x40
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 f810 	bl	8002186 <UART_WaitOnFlagUntilTimeout>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e006      	b.n	800217e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2220      	movs	r2, #32
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	e000      	b.n	800217e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800217c:	2302      	movs	r3, #2
  }
}
 800217e:	4618      	mov	r0, r3
 8002180:	3720      	adds	r7, #32
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b090      	sub	sp, #64	@ 0x40
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	603b      	str	r3, [r7, #0]
 8002192:	4613      	mov	r3, r2
 8002194:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002196:	e050      	b.n	800223a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002198:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800219a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219e:	d04c      	beq.n	800223a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d007      	beq.n	80021b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80021a6:	f7fe fd0d 	bl	8000bc4 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d241      	bcs.n	800223a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	330c      	adds	r3, #12
 80021bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021c0:	e853 3f00 	ldrex	r3, [r3]
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80021c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80021cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	330c      	adds	r3, #12
 80021d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80021d6:	637a      	str	r2, [r7, #52]	@ 0x34
 80021d8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80021dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80021de:	e841 2300 	strex	r3, r2, [r1]
 80021e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80021e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1e5      	bne.n	80021b6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	3314      	adds	r3, #20
 80021f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	e853 3f00 	ldrex	r3, [r3]
 80021f8:	613b      	str	r3, [r7, #16]
   return(result);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	3314      	adds	r3, #20
 8002208:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800220a:	623a      	str	r2, [r7, #32]
 800220c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800220e:	69f9      	ldr	r1, [r7, #28]
 8002210:	6a3a      	ldr	r2, [r7, #32]
 8002212:	e841 2300 	strex	r3, r2, [r1]
 8002216:	61bb      	str	r3, [r7, #24]
   return(result);
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1e5      	bne.n	80021ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2220      	movs	r2, #32
 8002222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2220      	movs	r2, #32
 800222a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e00f      	b.n	800225a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	4013      	ands	r3, r2
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	429a      	cmp	r2, r3
 8002248:	bf0c      	ite	eq
 800224a:	2301      	moveq	r3, #1
 800224c:	2300      	movne	r3, #0
 800224e:	b2db      	uxtb	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	429a      	cmp	r2, r3
 8002256:	d09f      	beq.n	8002198 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3740      	adds	r7, #64	@ 0x40
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002268:	b0c0      	sub	sp, #256	@ 0x100
 800226a:	af00      	add	r7, sp, #0
 800226c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800227c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002280:	68d9      	ldr	r1, [r3, #12]
 8002282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	ea40 0301 	orr.w	r3, r0, r1
 800228c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800228e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	431a      	orrs	r2, r3
 800229c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	431a      	orrs	r2, r3
 80022a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80022b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80022bc:	f021 010c 	bic.w	r1, r1, #12
 80022c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80022ca:	430b      	orrs	r3, r1
 80022cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80022da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022de:	6999      	ldr	r1, [r3, #24]
 80022e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	ea40 0301 	orr.w	r3, r0, r1
 80022ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	4b8f      	ldr	r3, [pc, #572]	@ (8002530 <UART_SetConfig+0x2cc>)
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d005      	beq.n	8002304 <UART_SetConfig+0xa0>
 80022f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	4b8d      	ldr	r3, [pc, #564]	@ (8002534 <UART_SetConfig+0x2d0>)
 8002300:	429a      	cmp	r2, r3
 8002302:	d104      	bne.n	800230e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002304:	f7ff fb6c 	bl	80019e0 <HAL_RCC_GetPCLK2Freq>
 8002308:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800230c:	e003      	b.n	8002316 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800230e:	f7ff fb53 	bl	80019b8 <HAL_RCC_GetPCLK1Freq>
 8002312:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002320:	f040 810c 	bne.w	800253c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002328:	2200      	movs	r2, #0
 800232a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800232e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002332:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002336:	4622      	mov	r2, r4
 8002338:	462b      	mov	r3, r5
 800233a:	1891      	adds	r1, r2, r2
 800233c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800233e:	415b      	adcs	r3, r3
 8002340:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002342:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002346:	4621      	mov	r1, r4
 8002348:	eb12 0801 	adds.w	r8, r2, r1
 800234c:	4629      	mov	r1, r5
 800234e:	eb43 0901 	adc.w	r9, r3, r1
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800235e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002362:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002366:	4690      	mov	r8, r2
 8002368:	4699      	mov	r9, r3
 800236a:	4623      	mov	r3, r4
 800236c:	eb18 0303 	adds.w	r3, r8, r3
 8002370:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002374:	462b      	mov	r3, r5
 8002376:	eb49 0303 	adc.w	r3, r9, r3
 800237a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800237e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800238a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800238e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002392:	460b      	mov	r3, r1
 8002394:	18db      	adds	r3, r3, r3
 8002396:	653b      	str	r3, [r7, #80]	@ 0x50
 8002398:	4613      	mov	r3, r2
 800239a:	eb42 0303 	adc.w	r3, r2, r3
 800239e:	657b      	str	r3, [r7, #84]	@ 0x54
 80023a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80023a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80023a8:	f7fd ff12 	bl	80001d0 <__aeabi_uldivmod>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4b61      	ldr	r3, [pc, #388]	@ (8002538 <UART_SetConfig+0x2d4>)
 80023b2:	fba3 2302 	umull	r2, r3, r3, r2
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	011c      	lsls	r4, r3, #4
 80023ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023be:	2200      	movs	r2, #0
 80023c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80023c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80023c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80023cc:	4642      	mov	r2, r8
 80023ce:	464b      	mov	r3, r9
 80023d0:	1891      	adds	r1, r2, r2
 80023d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80023d4:	415b      	adcs	r3, r3
 80023d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80023dc:	4641      	mov	r1, r8
 80023de:	eb12 0a01 	adds.w	sl, r2, r1
 80023e2:	4649      	mov	r1, r9
 80023e4:	eb43 0b01 	adc.w	fp, r3, r1
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023fc:	4692      	mov	sl, r2
 80023fe:	469b      	mov	fp, r3
 8002400:	4643      	mov	r3, r8
 8002402:	eb1a 0303 	adds.w	r3, sl, r3
 8002406:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800240a:	464b      	mov	r3, r9
 800240c:	eb4b 0303 	adc.w	r3, fp, r3
 8002410:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002420:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002424:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002428:	460b      	mov	r3, r1
 800242a:	18db      	adds	r3, r3, r3
 800242c:	643b      	str	r3, [r7, #64]	@ 0x40
 800242e:	4613      	mov	r3, r2
 8002430:	eb42 0303 	adc.w	r3, r2, r3
 8002434:	647b      	str	r3, [r7, #68]	@ 0x44
 8002436:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800243a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800243e:	f7fd fec7 	bl	80001d0 <__aeabi_uldivmod>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4611      	mov	r1, r2
 8002448:	4b3b      	ldr	r3, [pc, #236]	@ (8002538 <UART_SetConfig+0x2d4>)
 800244a:	fba3 2301 	umull	r2, r3, r3, r1
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	2264      	movs	r2, #100	@ 0x64
 8002452:	fb02 f303 	mul.w	r3, r2, r3
 8002456:	1acb      	subs	r3, r1, r3
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800245e:	4b36      	ldr	r3, [pc, #216]	@ (8002538 <UART_SetConfig+0x2d4>)
 8002460:	fba3 2302 	umull	r2, r3, r3, r2
 8002464:	095b      	lsrs	r3, r3, #5
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800246c:	441c      	add	r4, r3
 800246e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002472:	2200      	movs	r2, #0
 8002474:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002478:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800247c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002480:	4642      	mov	r2, r8
 8002482:	464b      	mov	r3, r9
 8002484:	1891      	adds	r1, r2, r2
 8002486:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002488:	415b      	adcs	r3, r3
 800248a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800248c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002490:	4641      	mov	r1, r8
 8002492:	1851      	adds	r1, r2, r1
 8002494:	6339      	str	r1, [r7, #48]	@ 0x30
 8002496:	4649      	mov	r1, r9
 8002498:	414b      	adcs	r3, r1
 800249a:	637b      	str	r3, [r7, #52]	@ 0x34
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80024a8:	4659      	mov	r1, fp
 80024aa:	00cb      	lsls	r3, r1, #3
 80024ac:	4651      	mov	r1, sl
 80024ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024b2:	4651      	mov	r1, sl
 80024b4:	00ca      	lsls	r2, r1, #3
 80024b6:	4610      	mov	r0, r2
 80024b8:	4619      	mov	r1, r3
 80024ba:	4603      	mov	r3, r0
 80024bc:	4642      	mov	r2, r8
 80024be:	189b      	adds	r3, r3, r2
 80024c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80024c4:	464b      	mov	r3, r9
 80024c6:	460a      	mov	r2, r1
 80024c8:	eb42 0303 	adc.w	r3, r2, r3
 80024cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80024dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80024e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80024e4:	460b      	mov	r3, r1
 80024e6:	18db      	adds	r3, r3, r3
 80024e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024ea:	4613      	mov	r3, r2
 80024ec:	eb42 0303 	adc.w	r3, r2, r3
 80024f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80024fa:	f7fd fe69 	bl	80001d0 <__aeabi_uldivmod>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4b0d      	ldr	r3, [pc, #52]	@ (8002538 <UART_SetConfig+0x2d4>)
 8002504:	fba3 1302 	umull	r1, r3, r3, r2
 8002508:	095b      	lsrs	r3, r3, #5
 800250a:	2164      	movs	r1, #100	@ 0x64
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	3332      	adds	r3, #50	@ 0x32
 8002516:	4a08      	ldr	r2, [pc, #32]	@ (8002538 <UART_SetConfig+0x2d4>)
 8002518:	fba2 2303 	umull	r2, r3, r2, r3
 800251c:	095b      	lsrs	r3, r3, #5
 800251e:	f003 0207 	and.w	r2, r3, #7
 8002522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4422      	add	r2, r4
 800252a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800252c:	e106      	b.n	800273c <UART_SetConfig+0x4d8>
 800252e:	bf00      	nop
 8002530:	40011000 	.word	0x40011000
 8002534:	40011400 	.word	0x40011400
 8002538:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800253c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002540:	2200      	movs	r2, #0
 8002542:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002546:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800254a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800254e:	4642      	mov	r2, r8
 8002550:	464b      	mov	r3, r9
 8002552:	1891      	adds	r1, r2, r2
 8002554:	6239      	str	r1, [r7, #32]
 8002556:	415b      	adcs	r3, r3
 8002558:	627b      	str	r3, [r7, #36]	@ 0x24
 800255a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800255e:	4641      	mov	r1, r8
 8002560:	1854      	adds	r4, r2, r1
 8002562:	4649      	mov	r1, r9
 8002564:	eb43 0501 	adc.w	r5, r3, r1
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	00eb      	lsls	r3, r5, #3
 8002572:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002576:	00e2      	lsls	r2, r4, #3
 8002578:	4614      	mov	r4, r2
 800257a:	461d      	mov	r5, r3
 800257c:	4643      	mov	r3, r8
 800257e:	18e3      	adds	r3, r4, r3
 8002580:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002584:	464b      	mov	r3, r9
 8002586:	eb45 0303 	adc.w	r3, r5, r3
 800258a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800258e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800259a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80025aa:	4629      	mov	r1, r5
 80025ac:	008b      	lsls	r3, r1, #2
 80025ae:	4621      	mov	r1, r4
 80025b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025b4:	4621      	mov	r1, r4
 80025b6:	008a      	lsls	r2, r1, #2
 80025b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80025bc:	f7fd fe08 	bl	80001d0 <__aeabi_uldivmod>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4b60      	ldr	r3, [pc, #384]	@ (8002748 <UART_SetConfig+0x4e4>)
 80025c6:	fba3 2302 	umull	r2, r3, r3, r2
 80025ca:	095b      	lsrs	r3, r3, #5
 80025cc:	011c      	lsls	r4, r3, #4
 80025ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025d2:	2200      	movs	r2, #0
 80025d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80025d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80025dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80025e0:	4642      	mov	r2, r8
 80025e2:	464b      	mov	r3, r9
 80025e4:	1891      	adds	r1, r2, r2
 80025e6:	61b9      	str	r1, [r7, #24]
 80025e8:	415b      	adcs	r3, r3
 80025ea:	61fb      	str	r3, [r7, #28]
 80025ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025f0:	4641      	mov	r1, r8
 80025f2:	1851      	adds	r1, r2, r1
 80025f4:	6139      	str	r1, [r7, #16]
 80025f6:	4649      	mov	r1, r9
 80025f8:	414b      	adcs	r3, r1
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	f04f 0300 	mov.w	r3, #0
 8002604:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002608:	4659      	mov	r1, fp
 800260a:	00cb      	lsls	r3, r1, #3
 800260c:	4651      	mov	r1, sl
 800260e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002612:	4651      	mov	r1, sl
 8002614:	00ca      	lsls	r2, r1, #3
 8002616:	4610      	mov	r0, r2
 8002618:	4619      	mov	r1, r3
 800261a:	4603      	mov	r3, r0
 800261c:	4642      	mov	r2, r8
 800261e:	189b      	adds	r3, r3, r2
 8002620:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002624:	464b      	mov	r3, r9
 8002626:	460a      	mov	r2, r1
 8002628:	eb42 0303 	adc.w	r3, r2, r3
 800262c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	67bb      	str	r3, [r7, #120]	@ 0x78
 800263a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002648:	4649      	mov	r1, r9
 800264a:	008b      	lsls	r3, r1, #2
 800264c:	4641      	mov	r1, r8
 800264e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002652:	4641      	mov	r1, r8
 8002654:	008a      	lsls	r2, r1, #2
 8002656:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800265a:	f7fd fdb9 	bl	80001d0 <__aeabi_uldivmod>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4611      	mov	r1, r2
 8002664:	4b38      	ldr	r3, [pc, #224]	@ (8002748 <UART_SetConfig+0x4e4>)
 8002666:	fba3 2301 	umull	r2, r3, r3, r1
 800266a:	095b      	lsrs	r3, r3, #5
 800266c:	2264      	movs	r2, #100	@ 0x64
 800266e:	fb02 f303 	mul.w	r3, r2, r3
 8002672:	1acb      	subs	r3, r1, r3
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	3332      	adds	r3, #50	@ 0x32
 8002678:	4a33      	ldr	r2, [pc, #204]	@ (8002748 <UART_SetConfig+0x4e4>)
 800267a:	fba2 2303 	umull	r2, r3, r2, r3
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002684:	441c      	add	r4, r3
 8002686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800268a:	2200      	movs	r2, #0
 800268c:	673b      	str	r3, [r7, #112]	@ 0x70
 800268e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002690:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002694:	4642      	mov	r2, r8
 8002696:	464b      	mov	r3, r9
 8002698:	1891      	adds	r1, r2, r2
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	415b      	adcs	r3, r3
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026a4:	4641      	mov	r1, r8
 80026a6:	1851      	adds	r1, r2, r1
 80026a8:	6039      	str	r1, [r7, #0]
 80026aa:	4649      	mov	r1, r9
 80026ac:	414b      	adcs	r3, r1
 80026ae:	607b      	str	r3, [r7, #4]
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80026bc:	4659      	mov	r1, fp
 80026be:	00cb      	lsls	r3, r1, #3
 80026c0:	4651      	mov	r1, sl
 80026c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026c6:	4651      	mov	r1, sl
 80026c8:	00ca      	lsls	r2, r1, #3
 80026ca:	4610      	mov	r0, r2
 80026cc:	4619      	mov	r1, r3
 80026ce:	4603      	mov	r3, r0
 80026d0:	4642      	mov	r2, r8
 80026d2:	189b      	adds	r3, r3, r2
 80026d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026d6:	464b      	mov	r3, r9
 80026d8:	460a      	mov	r2, r1
 80026da:	eb42 0303 	adc.w	r3, r2, r3
 80026de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80026e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80026ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80026f8:	4649      	mov	r1, r9
 80026fa:	008b      	lsls	r3, r1, #2
 80026fc:	4641      	mov	r1, r8
 80026fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002702:	4641      	mov	r1, r8
 8002704:	008a      	lsls	r2, r1, #2
 8002706:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800270a:	f7fd fd61 	bl	80001d0 <__aeabi_uldivmod>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4b0d      	ldr	r3, [pc, #52]	@ (8002748 <UART_SetConfig+0x4e4>)
 8002714:	fba3 1302 	umull	r1, r3, r3, r2
 8002718:	095b      	lsrs	r3, r3, #5
 800271a:	2164      	movs	r1, #100	@ 0x64
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	3332      	adds	r3, #50	@ 0x32
 8002726:	4a08      	ldr	r2, [pc, #32]	@ (8002748 <UART_SetConfig+0x4e4>)
 8002728:	fba2 2303 	umull	r2, r3, r2, r3
 800272c:	095b      	lsrs	r3, r3, #5
 800272e:	f003 020f 	and.w	r2, r3, #15
 8002732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4422      	add	r2, r4
 800273a:	609a      	str	r2, [r3, #8]
}
 800273c:	bf00      	nop
 800273e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002742:	46bd      	mov	sp, r7
 8002744:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002748:	51eb851f 	.word	0x51eb851f

0800274c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800275a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800275e:	2b84      	cmp	r3, #132	@ 0x84
 8002760:	d005      	beq.n	800276e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002762:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4413      	add	r3, r2
 800276a:	3303      	adds	r3, #3
 800276c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800276e:	68fb      	ldr	r3, [r7, #12]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002780:	f000 fe80 	bl	8003484 <vTaskStartScheduler>
  
  return osOK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	bd80      	pop	{r7, pc}

0800278a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800278a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800278c:	b089      	sub	sp, #36	@ 0x24
 800278e:	af04      	add	r7, sp, #16
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d020      	beq.n	80027de <osThreadCreate+0x54>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d01c      	beq.n	80027de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685c      	ldr	r4, [r3, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691e      	ldr	r6, [r3, #16]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff ffc8 	bl	800274c <makeFreeRtosPriority>
 80027bc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027c6:	9202      	str	r2, [sp, #8]
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	9100      	str	r1, [sp, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	4632      	mov	r2, r6
 80027d0:	4629      	mov	r1, r5
 80027d2:	4620      	mov	r0, r4
 80027d4:	f000 fc88 	bl	80030e8 <xTaskCreateStatic>
 80027d8:	4603      	mov	r3, r0
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	e01c      	b.n	8002818 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685c      	ldr	r4, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027ea:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff ffaa 	bl	800274c <makeFreeRtosPriority>
 80027f8:	4602      	mov	r2, r0
 80027fa:	f107 030c 	add.w	r3, r7, #12
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	9200      	str	r2, [sp, #0]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	4632      	mov	r2, r6
 8002806:	4629      	mov	r1, r5
 8002808:	4620      	mov	r0, r4
 800280a:	f000 fccd 	bl	80031a8 <xTaskCreate>
 800280e:	4603      	mov	r3, r0
 8002810:	2b01      	cmp	r3, #1
 8002812:	d001      	beq.n	8002818 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002814:	2300      	movs	r3, #0
 8002816:	e000      	b.n	800281a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002818:	68fb      	ldr	r3, [r7, #12]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002822 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d007      	beq.n	8002842 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	4619      	mov	r1, r3
 8002838:	2001      	movs	r0, #1
 800283a:	f000 fa64 	bl	8002d06 <xQueueCreateMutexStatic>
 800283e:	4603      	mov	r3, r0
 8002840:	e003      	b.n	800284a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8002842:	2001      	movs	r0, #1
 8002844:	f000 fa47 	bl	8002cd6 <xQueueCreateMutex>
 8002848:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002852:	b580      	push	{r7, lr}
 8002854:	b086      	sub	sp, #24
 8002856:	af02      	add	r7, sp, #8
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00f      	beq.n	8002884 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d10a      	bne.n	8002880 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2203      	movs	r2, #3
 8002870:	9200      	str	r2, [sp, #0]
 8002872:	2200      	movs	r2, #0
 8002874:	2100      	movs	r1, #0
 8002876:	2001      	movs	r0, #1
 8002878:	f000 f93c 	bl	8002af4 <xQueueGenericCreateStatic>
 800287c:	4603      	mov	r3, r0
 800287e:	e016      	b.n	80028ae <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002880:	2300      	movs	r3, #0
 8002882:	e014      	b.n	80028ae <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d110      	bne.n	80028ac <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800288a:	2203      	movs	r2, #3
 800288c:	2100      	movs	r1, #0
 800288e:	2001      	movs	r0, #1
 8002890:	f000 f9ad 	bl	8002bee <xQueueGenericCreate>
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <osSemaphoreCreate+0x56>
 800289c:	2300      	movs	r3, #0
 800289e:	2200      	movs	r2, #0
 80028a0:	2100      	movs	r1, #0
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 fa4a 	bl	8002d3c <xQueueGenericSend>
      return sema;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	e000      	b.n	80028ae <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80028ac:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f103 0208 	add.w	r2, r3, #8
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f04f 32ff 	mov.w	r2, #4294967295
 80028ce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f103 0208 	add.w	r2, r3, #8
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f103 0208 	add.w	r2, r3, #8
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	601a      	str	r2, [r3, #0]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296e:	d103      	bne.n	8002978 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	e00c      	b.n	8002992 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3308      	adds	r3, #8
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	e002      	b.n	8002986 <vListInsert+0x2e>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	429a      	cmp	r2, r3
 8002990:	d2f6      	bcs.n	8002980 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	601a      	str	r2, [r3, #0]
}
 80029be:	bf00      	nop
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029ca:	b480      	push	{r7}
 80029cc:	b085      	sub	sp, #20
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6892      	ldr	r2, [r2, #8]
 80029e0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6852      	ldr	r2, [r2, #4]
 80029ea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d103      	bne.n	80029fe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	1e5a      	subs	r2, r3, #1
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10b      	bne.n	8002a4c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a38:	f383 8811 	msr	BASEPRI, r3
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	f3bf 8f4f 	dsb	sy
 8002a44:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a46:	bf00      	nop
 8002a48:	bf00      	nop
 8002a4a:	e7fd      	b.n	8002a48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a4c:	f001 fb64 	bl	8004118 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a58:	68f9      	ldr	r1, [r7, #12]
 8002a5a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a5c:	fb01 f303 	mul.w	r3, r1, r3
 8002a60:	441a      	add	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	68f9      	ldr	r1, [r7, #12]
 8002a80:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	441a      	add	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	22ff      	movs	r2, #255	@ 0xff
 8002a90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	22ff      	movs	r2, #255	@ 0xff
 8002a98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d114      	bne.n	8002acc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d01a      	beq.n	8002ae0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	3310      	adds	r3, #16
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 ff32 	bl	8003918 <xTaskRemoveFromEventList>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d012      	beq.n	8002ae0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002aba:	4b0d      	ldr	r3, [pc, #52]	@ (8002af0 <xQueueGenericReset+0xd0>)
 8002abc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	f3bf 8f4f 	dsb	sy
 8002ac6:	f3bf 8f6f 	isb	sy
 8002aca:	e009      	b.n	8002ae0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	3310      	adds	r3, #16
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fef0 	bl	80028b6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	3324      	adds	r3, #36	@ 0x24
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff feeb 	bl	80028b6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ae0:	f001 fb4c 	bl	800417c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ae4:	2301      	movs	r3, #1
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	e000ed04 	.word	0xe000ed04

08002af4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08e      	sub	sp, #56	@ 0x38
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10b      	bne.n	8002b20 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002b1a:	bf00      	nop
 8002b1c:	bf00      	nop
 8002b1e:	e7fd      	b.n	8002b1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10b      	bne.n	8002b3e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b2a:	f383 8811 	msr	BASEPRI, r3
 8002b2e:	f3bf 8f6f 	isb	sy
 8002b32:	f3bf 8f4f 	dsb	sy
 8002b36:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b38:	bf00      	nop
 8002b3a:	bf00      	nop
 8002b3c:	e7fd      	b.n	8002b3a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d002      	beq.n	8002b4a <xQueueGenericCreateStatic+0x56>
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <xQueueGenericCreateStatic+0x5a>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <xQueueGenericCreateStatic+0x5c>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10b      	bne.n	8002b6c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b58:	f383 8811 	msr	BASEPRI, r3
 8002b5c:	f3bf 8f6f 	isb	sy
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	623b      	str	r3, [r7, #32]
}
 8002b66:	bf00      	nop
 8002b68:	bf00      	nop
 8002b6a:	e7fd      	b.n	8002b68 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d102      	bne.n	8002b78 <xQueueGenericCreateStatic+0x84>
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <xQueueGenericCreateStatic+0x88>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <xQueueGenericCreateStatic+0x8a>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10b      	bne.n	8002b9a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b86:	f383 8811 	msr	BASEPRI, r3
 8002b8a:	f3bf 8f6f 	isb	sy
 8002b8e:	f3bf 8f4f 	dsb	sy
 8002b92:	61fb      	str	r3, [r7, #28]
}
 8002b94:	bf00      	nop
 8002b96:	bf00      	nop
 8002b98:	e7fd      	b.n	8002b96 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b9a:	2348      	movs	r3, #72	@ 0x48
 8002b9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2b48      	cmp	r3, #72	@ 0x48
 8002ba2:	d00b      	beq.n	8002bbc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	f3bf 8f6f 	isb	sy
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	61bb      	str	r3, [r7, #24]
}
 8002bb6:	bf00      	nop
 8002bb8:	bf00      	nop
 8002bba:	e7fd      	b.n	8002bb8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002bbc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00d      	beq.n	8002be4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bd0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 f840 	bl	8002c64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3730      	adds	r7, #48	@ 0x30
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b08a      	sub	sp, #40	@ 0x28
 8002bf2:	af02      	add	r7, sp, #8
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10b      	bne.n	8002c1a <xQueueGenericCreate+0x2c>
	__asm volatile
 8002c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c06:	f383 8811 	msr	BASEPRI, r3
 8002c0a:	f3bf 8f6f 	isb	sy
 8002c0e:	f3bf 8f4f 	dsb	sy
 8002c12:	613b      	str	r3, [r7, #16]
}
 8002c14:	bf00      	nop
 8002c16:	bf00      	nop
 8002c18:	e7fd      	b.n	8002c16 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	fb02 f303 	mul.w	r3, r2, r3
 8002c22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	3348      	adds	r3, #72	@ 0x48
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f001 fb55 	bl	80042d8 <pvPortMalloc>
 8002c2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d011      	beq.n	8002c5a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	3348      	adds	r3, #72	@ 0x48
 8002c3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c48:	79fa      	ldrb	r2, [r7, #7]
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	68b9      	ldr	r1, [r7, #8]
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 f805 	bl	8002c64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c5a:	69bb      	ldr	r3, [r7, #24]
	}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3720      	adds	r7, #32
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d103      	bne.n	8002c80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	e002      	b.n	8002c86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c92:	2101      	movs	r1, #1
 8002c94:	69b8      	ldr	r0, [r7, #24]
 8002c96:	f7ff fec3 	bl	8002a20 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00e      	beq.n	8002cce <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f837 	bl	8002d3c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b086      	sub	sp, #24
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	4603      	mov	r3, r0
 8002cde:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	461a      	mov	r2, r3
 8002cec:	6939      	ldr	r1, [r7, #16]
 8002cee:	6978      	ldr	r0, [r7, #20]
 8002cf0:	f7ff ff7d 	bl	8002bee <xQueueGenericCreate>
 8002cf4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f7ff ffd3 	bl	8002ca2 <prvInitialiseMutex>

		return xNewQueue;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
	}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b088      	sub	sp, #32
 8002d0a:	af02      	add	r7, sp, #8
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	6039      	str	r1, [r7, #0]
 8002d10:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002d12:	2301      	movs	r3, #1
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2200      	movs	r2, #0
 8002d22:	6939      	ldr	r1, [r7, #16]
 8002d24:	6978      	ldr	r0, [r7, #20]
 8002d26:	f7ff fee5 	bl	8002af4 <xQueueGenericCreateStatic>
 8002d2a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f7ff ffb8 	bl	8002ca2 <prvInitialiseMutex>

		return xNewQueue;
 8002d32:	68fb      	ldr	r3, [r7, #12]
	}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08e      	sub	sp, #56	@ 0x38
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10b      	bne.n	8002d70 <xQueueGenericSend+0x34>
	__asm volatile
 8002d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d5c:	f383 8811 	msr	BASEPRI, r3
 8002d60:	f3bf 8f6f 	isb	sy
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d6a:	bf00      	nop
 8002d6c:	bf00      	nop
 8002d6e:	e7fd      	b.n	8002d6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d103      	bne.n	8002d7e <xQueueGenericSend+0x42>
 8002d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <xQueueGenericSend+0x46>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <xQueueGenericSend+0x48>
 8002d82:	2300      	movs	r3, #0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10b      	bne.n	8002da0 <xQueueGenericSend+0x64>
	__asm volatile
 8002d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d8c:	f383 8811 	msr	BASEPRI, r3
 8002d90:	f3bf 8f6f 	isb	sy
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d9a:	bf00      	nop
 8002d9c:	bf00      	nop
 8002d9e:	e7fd      	b.n	8002d9c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d103      	bne.n	8002dae <xQueueGenericSend+0x72>
 8002da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d101      	bne.n	8002db2 <xQueueGenericSend+0x76>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <xQueueGenericSend+0x78>
 8002db2:	2300      	movs	r3, #0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10b      	bne.n	8002dd0 <xQueueGenericSend+0x94>
	__asm volatile
 8002db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dbc:	f383 8811 	msr	BASEPRI, r3
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	623b      	str	r3, [r7, #32]
}
 8002dca:	bf00      	nop
 8002dcc:	bf00      	nop
 8002dce:	e7fd      	b.n	8002dcc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dd0:	f000 ff62 	bl	8003c98 <xTaskGetSchedulerState>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d102      	bne.n	8002de0 <xQueueGenericSend+0xa4>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <xQueueGenericSend+0xa8>
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <xQueueGenericSend+0xaa>
 8002de4:	2300      	movs	r3, #0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10b      	bne.n	8002e02 <xQueueGenericSend+0xc6>
	__asm volatile
 8002dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dee:	f383 8811 	msr	BASEPRI, r3
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	f3bf 8f4f 	dsb	sy
 8002dfa:	61fb      	str	r3, [r7, #28]
}
 8002dfc:	bf00      	nop
 8002dfe:	bf00      	nop
 8002e00:	e7fd      	b.n	8002dfe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e02:	f001 f989 	bl	8004118 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d302      	bcc.n	8002e18 <xQueueGenericSend+0xdc>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d129      	bne.n	8002e6c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e1e:	f000 f88f 	bl	8002f40 <prvCopyDataToQueue>
 8002e22:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d010      	beq.n	8002e4e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2e:	3324      	adds	r3, #36	@ 0x24
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 fd71 	bl	8003918 <xTaskRemoveFromEventList>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d013      	beq.n	8002e64 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e3c:	4b3f      	ldr	r3, [pc, #252]	@ (8002f3c <xQueueGenericSend+0x200>)
 8002e3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	f3bf 8f6f 	isb	sy
 8002e4c:	e00a      	b.n	8002e64 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d007      	beq.n	8002e64 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e54:	4b39      	ldr	r3, [pc, #228]	@ (8002f3c <xQueueGenericSend+0x200>)
 8002e56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e64:	f001 f98a 	bl	800417c <vPortExitCritical>
				return pdPASS;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e063      	b.n	8002f34 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d103      	bne.n	8002e7a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e72:	f001 f983 	bl	800417c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	e05c      	b.n	8002f34 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d106      	bne.n	8002e8e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e80:	f107 0314 	add.w	r3, r7, #20
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 fdab 	bl	80039e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e8e:	f001 f975 	bl	800417c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e92:	f000 fb59 	bl	8003548 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e96:	f001 f93f 	bl	8004118 <vPortEnterCritical>
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ea0:	b25b      	sxtb	r3, r3
 8002ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea6:	d103      	bne.n	8002eb0 <xQueueGenericSend+0x174>
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002eb6:	b25b      	sxtb	r3, r3
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebc:	d103      	bne.n	8002ec6 <xQueueGenericSend+0x18a>
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ec6:	f001 f959 	bl	800417c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002eca:	1d3a      	adds	r2, r7, #4
 8002ecc:	f107 0314 	add.w	r3, r7, #20
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 fd9a 	bl	8003a0c <xTaskCheckForTimeOut>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d124      	bne.n	8002f28 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ede:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ee0:	f000 f8ea 	bl	80030b8 <prvIsQueueFull>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d018      	beq.n	8002f1c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eec:	3310      	adds	r3, #16
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 fcea 	bl	80038cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ef8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002efa:	f000 f88b 	bl	8003014 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002efe:	f000 fb31 	bl	8003564 <xTaskResumeAll>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f47f af7c 	bne.w	8002e02 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f3c <xQueueGenericSend+0x200>)
 8002f0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	f3bf 8f4f 	dsb	sy
 8002f16:	f3bf 8f6f 	isb	sy
 8002f1a:	e772      	b.n	8002e02 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f1e:	f000 f879 	bl	8003014 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f22:	f000 fb1f 	bl	8003564 <xTaskResumeAll>
 8002f26:	e76c      	b.n	8002e02 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f2a:	f000 f873 	bl	8003014 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f2e:	f000 fb19 	bl	8003564 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3738      	adds	r7, #56	@ 0x38
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	e000ed04 	.word	0xe000ed04

08002f40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10d      	bne.n	8002f7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d14d      	bne.n	8003002 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 feb2 	bl	8003cd4 <xTaskPriorityDisinherit>
 8002f70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	e043      	b.n	8003002 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d119      	bne.n	8002fb4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6858      	ldr	r0, [r3, #4]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f88:	461a      	mov	r2, r3
 8002f8a:	68b9      	ldr	r1, [r7, #8]
 8002f8c:	f001 fbbe 	bl	800470c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f98:	441a      	add	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d32b      	bcc.n	8003002 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	e026      	b.n	8003002 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	68d8      	ldr	r0, [r3, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	68b9      	ldr	r1, [r7, #8]
 8002fc0:	f001 fba4 	bl	800470c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fcc:	425b      	negs	r3, r3
 8002fce:	441a      	add	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d207      	bcs.n	8002ff0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe8:	425b      	negs	r3, r3
 8002fea:	441a      	add	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d105      	bne.n	8003002 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d002      	beq.n	8003002 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800300a:	697b      	ldr	r3, [r7, #20]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800301c:	f001 f87c 	bl	8004118 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003026:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003028:	e011      	b.n	800304e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302e:	2b00      	cmp	r3, #0
 8003030:	d012      	beq.n	8003058 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3324      	adds	r3, #36	@ 0x24
 8003036:	4618      	mov	r0, r3
 8003038:	f000 fc6e 	bl	8003918 <xTaskRemoveFromEventList>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003042:	f000 fd47 	bl	8003ad4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003046:	7bfb      	ldrb	r3, [r7, #15]
 8003048:	3b01      	subs	r3, #1
 800304a:	b2db      	uxtb	r3, r3
 800304c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800304e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003052:	2b00      	cmp	r3, #0
 8003054:	dce9      	bgt.n	800302a <prvUnlockQueue+0x16>
 8003056:	e000      	b.n	800305a <prvUnlockQueue+0x46>
					break;
 8003058:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	22ff      	movs	r2, #255	@ 0xff
 800305e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003062:	f001 f88b 	bl	800417c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003066:	f001 f857 	bl	8004118 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003070:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003072:	e011      	b.n	8003098 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d012      	beq.n	80030a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3310      	adds	r3, #16
 8003080:	4618      	mov	r0, r3
 8003082:	f000 fc49 	bl	8003918 <xTaskRemoveFromEventList>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800308c:	f000 fd22 	bl	8003ad4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003090:	7bbb      	ldrb	r3, [r7, #14]
 8003092:	3b01      	subs	r3, #1
 8003094:	b2db      	uxtb	r3, r3
 8003096:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003098:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800309c:	2b00      	cmp	r3, #0
 800309e:	dce9      	bgt.n	8003074 <prvUnlockQueue+0x60>
 80030a0:	e000      	b.n	80030a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80030a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	22ff      	movs	r2, #255	@ 0xff
 80030a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80030ac:	f001 f866 	bl	800417c <vPortExitCritical>
}
 80030b0:	bf00      	nop
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030c0:	f001 f82a 	bl	8004118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d102      	bne.n	80030d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80030d0:	2301      	movs	r3, #1
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	e001      	b.n	80030da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030da:	f001 f84f 	bl	800417c <vPortExitCritical>

	return xReturn;
 80030de:	68fb      	ldr	r3, [r7, #12]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08e      	sub	sp, #56	@ 0x38
 80030ec:	af04      	add	r7, sp, #16
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80030f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10b      	bne.n	8003114 <xTaskCreateStatic+0x2c>
	__asm volatile
 80030fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003100:	f383 8811 	msr	BASEPRI, r3
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	623b      	str	r3, [r7, #32]
}
 800310e:	bf00      	nop
 8003110:	bf00      	nop
 8003112:	e7fd      	b.n	8003110 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10b      	bne.n	8003132 <xTaskCreateStatic+0x4a>
	__asm volatile
 800311a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	61fb      	str	r3, [r7, #28]
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	e7fd      	b.n	800312e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003132:	2354      	movs	r3, #84	@ 0x54
 8003134:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	2b54      	cmp	r3, #84	@ 0x54
 800313a:	d00b      	beq.n	8003154 <xTaskCreateStatic+0x6c>
	__asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	61bb      	str	r3, [r7, #24]
}
 800314e:	bf00      	nop
 8003150:	bf00      	nop
 8003152:	e7fd      	b.n	8003150 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003154:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01e      	beq.n	800319a <xTaskCreateStatic+0xb2>
 800315c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800315e:	2b00      	cmp	r3, #0
 8003160:	d01b      	beq.n	800319a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003164:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003168:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800316a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800316c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316e:	2202      	movs	r2, #2
 8003170:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003174:	2300      	movs	r3, #0
 8003176:	9303      	str	r3, [sp, #12]
 8003178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317a:	9302      	str	r3, [sp, #8]
 800317c:	f107 0314 	add.w	r3, r7, #20
 8003180:	9301      	str	r3, [sp, #4]
 8003182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	68b9      	ldr	r1, [r7, #8]
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 f850 	bl	8003232 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003192:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003194:	f000 f8d6 	bl	8003344 <prvAddNewTaskToReadyList>
 8003198:	e001      	b.n	800319e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800319e:	697b      	ldr	r3, [r7, #20]
	}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3728      	adds	r7, #40	@ 0x28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08c      	sub	sp, #48	@ 0x30
 80031ac:	af04      	add	r7, sp, #16
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	4613      	mov	r3, r2
 80031b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80031b8:	88fb      	ldrh	r3, [r7, #6]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4618      	mov	r0, r3
 80031be:	f001 f88b 	bl	80042d8 <pvPortMalloc>
 80031c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00e      	beq.n	80031e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80031ca:	2054      	movs	r0, #84	@ 0x54
 80031cc:	f001 f884 	bl	80042d8 <pvPortMalloc>
 80031d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80031de:	e005      	b.n	80031ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80031e0:	6978      	ldr	r0, [r7, #20]
 80031e2:	f001 f947 	bl	8004474 <vPortFree>
 80031e6:	e001      	b.n	80031ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d017      	beq.n	8003222 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80031fa:	88fa      	ldrh	r2, [r7, #6]
 80031fc:	2300      	movs	r3, #0
 80031fe:	9303      	str	r3, [sp, #12]
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	9302      	str	r3, [sp, #8]
 8003204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003206:	9301      	str	r3, [sp, #4]
 8003208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	68b9      	ldr	r1, [r7, #8]
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 f80e 	bl	8003232 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003216:	69f8      	ldr	r0, [r7, #28]
 8003218:	f000 f894 	bl	8003344 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800321c:	2301      	movs	r3, #1
 800321e:	61bb      	str	r3, [r7, #24]
 8003220:	e002      	b.n	8003228 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003222:	f04f 33ff 	mov.w	r3, #4294967295
 8003226:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003228:	69bb      	ldr	r3, [r7, #24]
	}
 800322a:	4618      	mov	r0, r3
 800322c:	3720      	adds	r7, #32
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b088      	sub	sp, #32
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
 800323e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003242:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800324a:	3b01      	subs	r3, #1
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	f023 0307 	bic.w	r3, r3, #7
 8003258:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00b      	beq.n	800327c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	617b      	str	r3, [r7, #20]
}
 8003276:	bf00      	nop
 8003278:	bf00      	nop
 800327a:	e7fd      	b.n	8003278 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d01f      	beq.n	80032c2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003282:	2300      	movs	r3, #0
 8003284:	61fb      	str	r3, [r7, #28]
 8003286:	e012      	b.n	80032ae <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	4413      	add	r3, r2
 800328e:	7819      	ldrb	r1, [r3, #0]
 8003290:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	4413      	add	r3, r2
 8003296:	3334      	adds	r3, #52	@ 0x34
 8003298:	460a      	mov	r2, r1
 800329a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	4413      	add	r3, r2
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d006      	beq.n	80032b6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	3301      	adds	r3, #1
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	2b0f      	cmp	r3, #15
 80032b2:	d9e9      	bls.n	8003288 <prvInitialiseNewTask+0x56>
 80032b4:	e000      	b.n	80032b8 <prvInitialiseNewTask+0x86>
			{
				break;
 80032b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032c0:	e003      	b.n	80032ca <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80032c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80032ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032cc:	2b06      	cmp	r3, #6
 80032ce:	d901      	bls.n	80032d4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80032d0:	2306      	movs	r3, #6
 80032d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80032d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032d8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80032da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032de:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80032e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e2:	2200      	movs	r2, #0
 80032e4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e8:	3304      	adds	r3, #4
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff fb03 	bl	80028f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80032f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f2:	3318      	adds	r3, #24
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff fafe 	bl	80028f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80032fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003302:	f1c3 0207 	rsb	r2, r3, #7
 8003306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003308:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800330a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800330c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800330e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003312:	2200      	movs	r2, #0
 8003314:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	68f9      	ldr	r1, [r7, #12]
 8003322:	69b8      	ldr	r0, [r7, #24]
 8003324:	f000 fdc4 	bl	8003eb0 <pxPortInitialiseStack>
 8003328:	4602      	mov	r2, r0
 800332a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800332c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800332e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003336:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003338:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800333a:	bf00      	nop
 800333c:	3720      	adds	r7, #32
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800334c:	f000 fee4 	bl	8004118 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003350:	4b2a      	ldr	r3, [pc, #168]	@ (80033fc <prvAddNewTaskToReadyList+0xb8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3301      	adds	r3, #1
 8003356:	4a29      	ldr	r2, [pc, #164]	@ (80033fc <prvAddNewTaskToReadyList+0xb8>)
 8003358:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800335a:	4b29      	ldr	r3, [pc, #164]	@ (8003400 <prvAddNewTaskToReadyList+0xbc>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d109      	bne.n	8003376 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003362:	4a27      	ldr	r2, [pc, #156]	@ (8003400 <prvAddNewTaskToReadyList+0xbc>)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003368:	4b24      	ldr	r3, [pc, #144]	@ (80033fc <prvAddNewTaskToReadyList+0xb8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d110      	bne.n	8003392 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003370:	f000 fbd4 	bl	8003b1c <prvInitialiseTaskLists>
 8003374:	e00d      	b.n	8003392 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003376:	4b23      	ldr	r3, [pc, #140]	@ (8003404 <prvAddNewTaskToReadyList+0xc0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d109      	bne.n	8003392 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800337e:	4b20      	ldr	r3, [pc, #128]	@ (8003400 <prvAddNewTaskToReadyList+0xbc>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003388:	429a      	cmp	r2, r3
 800338a:	d802      	bhi.n	8003392 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800338c:	4a1c      	ldr	r2, [pc, #112]	@ (8003400 <prvAddNewTaskToReadyList+0xbc>)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003392:	4b1d      	ldr	r3, [pc, #116]	@ (8003408 <prvAddNewTaskToReadyList+0xc4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3301      	adds	r3, #1
 8003398:	4a1b      	ldr	r2, [pc, #108]	@ (8003408 <prvAddNewTaskToReadyList+0xc4>)
 800339a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a0:	2201      	movs	r2, #1
 80033a2:	409a      	lsls	r2, r3
 80033a4:	4b19      	ldr	r3, [pc, #100]	@ (800340c <prvAddNewTaskToReadyList+0xc8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	4a18      	ldr	r2, [pc, #96]	@ (800340c <prvAddNewTaskToReadyList+0xc8>)
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4a15      	ldr	r2, [pc, #84]	@ (8003410 <prvAddNewTaskToReadyList+0xcc>)
 80033bc:	441a      	add	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3304      	adds	r3, #4
 80033c2:	4619      	mov	r1, r3
 80033c4:	4610      	mov	r0, r2
 80033c6:	f7ff faa3 	bl	8002910 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80033ca:	f000 fed7 	bl	800417c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80033ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003404 <prvAddNewTaskToReadyList+0xc0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00e      	beq.n	80033f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80033d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003400 <prvAddNewTaskToReadyList+0xbc>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d207      	bcs.n	80033f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80033e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003414 <prvAddNewTaskToReadyList+0xd0>)
 80033e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	f3bf 8f4f 	dsb	sy
 80033f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033f4:	bf00      	nop
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	20000420 	.word	0x20000420
 8003400:	20000320 	.word	0x20000320
 8003404:	2000042c 	.word	0x2000042c
 8003408:	2000043c 	.word	0x2000043c
 800340c:	20000428 	.word	0x20000428
 8003410:	20000324 	.word	0x20000324
 8003414:	e000ed04 	.word	0xe000ed04

08003418 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003420:	2300      	movs	r3, #0
 8003422:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d018      	beq.n	800345c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800342a:	4b14      	ldr	r3, [pc, #80]	@ (800347c <vTaskDelay+0x64>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00b      	beq.n	800344a <vTaskDelay+0x32>
	__asm volatile
 8003432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003436:	f383 8811 	msr	BASEPRI, r3
 800343a:	f3bf 8f6f 	isb	sy
 800343e:	f3bf 8f4f 	dsb	sy
 8003442:	60bb      	str	r3, [r7, #8]
}
 8003444:	bf00      	nop
 8003446:	bf00      	nop
 8003448:	e7fd      	b.n	8003446 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800344a:	f000 f87d 	bl	8003548 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800344e:	2100      	movs	r1, #0
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 fcc7 	bl	8003de4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003456:	f000 f885 	bl	8003564 <xTaskResumeAll>
 800345a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d107      	bne.n	8003472 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003462:	4b07      	ldr	r3, [pc, #28]	@ (8003480 <vTaskDelay+0x68>)
 8003464:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	f3bf 8f4f 	dsb	sy
 800346e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003472:	bf00      	nop
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000448 	.word	0x20000448
 8003480:	e000ed04 	.word	0xe000ed04

08003484 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08a      	sub	sp, #40	@ 0x28
 8003488:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800348a:	2300      	movs	r3, #0
 800348c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800348e:	2300      	movs	r3, #0
 8003490:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003492:	463a      	mov	r2, r7
 8003494:	1d39      	adds	r1, r7, #4
 8003496:	f107 0308 	add.w	r3, r7, #8
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd f810 	bl	80004c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80034a0:	6839      	ldr	r1, [r7, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	9202      	str	r2, [sp, #8]
 80034a8:	9301      	str	r3, [sp, #4]
 80034aa:	2300      	movs	r3, #0
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	2300      	movs	r3, #0
 80034b0:	460a      	mov	r2, r1
 80034b2:	491f      	ldr	r1, [pc, #124]	@ (8003530 <vTaskStartScheduler+0xac>)
 80034b4:	481f      	ldr	r0, [pc, #124]	@ (8003534 <vTaskStartScheduler+0xb0>)
 80034b6:	f7ff fe17 	bl	80030e8 <xTaskCreateStatic>
 80034ba:	4603      	mov	r3, r0
 80034bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003538 <vTaskStartScheduler+0xb4>)
 80034be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80034c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003538 <vTaskStartScheduler+0xb4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80034c8:	2301      	movs	r3, #1
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	e001      	b.n	80034d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d116      	bne.n	8003506 <vTaskStartScheduler+0x82>
	__asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	613b      	str	r3, [r7, #16]
}
 80034ea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80034ec:	4b13      	ldr	r3, [pc, #76]	@ (800353c <vTaskStartScheduler+0xb8>)
 80034ee:	f04f 32ff 	mov.w	r2, #4294967295
 80034f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80034f4:	4b12      	ldr	r3, [pc, #72]	@ (8003540 <vTaskStartScheduler+0xbc>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80034fa:	4b12      	ldr	r3, [pc, #72]	@ (8003544 <vTaskStartScheduler+0xc0>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003500:	f000 fd66 	bl	8003fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003504:	e00f      	b.n	8003526 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350c:	d10b      	bne.n	8003526 <vTaskStartScheduler+0xa2>
	__asm volatile
 800350e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003512:	f383 8811 	msr	BASEPRI, r3
 8003516:	f3bf 8f6f 	isb	sy
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	60fb      	str	r3, [r7, #12]
}
 8003520:	bf00      	nop
 8003522:	bf00      	nop
 8003524:	e7fd      	b.n	8003522 <vTaskStartScheduler+0x9e>
}
 8003526:	bf00      	nop
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	08004840 	.word	0x08004840
 8003534:	08003aed 	.word	0x08003aed
 8003538:	20000444 	.word	0x20000444
 800353c:	20000440 	.word	0x20000440
 8003540:	2000042c 	.word	0x2000042c
 8003544:	20000424 	.word	0x20000424

08003548 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800354c:	4b04      	ldr	r3, [pc, #16]	@ (8003560 <vTaskSuspendAll+0x18>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3301      	adds	r3, #1
 8003552:	4a03      	ldr	r2, [pc, #12]	@ (8003560 <vTaskSuspendAll+0x18>)
 8003554:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003556:	bf00      	nop
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	20000448 	.word	0x20000448

08003564 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800356e:	2300      	movs	r3, #0
 8003570:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003572:	4b42      	ldr	r3, [pc, #264]	@ (800367c <xTaskResumeAll+0x118>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10b      	bne.n	8003592 <xTaskResumeAll+0x2e>
	__asm volatile
 800357a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	603b      	str	r3, [r7, #0]
}
 800358c:	bf00      	nop
 800358e:	bf00      	nop
 8003590:	e7fd      	b.n	800358e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003592:	f000 fdc1 	bl	8004118 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003596:	4b39      	ldr	r3, [pc, #228]	@ (800367c <xTaskResumeAll+0x118>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3b01      	subs	r3, #1
 800359c:	4a37      	ldr	r2, [pc, #220]	@ (800367c <xTaskResumeAll+0x118>)
 800359e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035a0:	4b36      	ldr	r3, [pc, #216]	@ (800367c <xTaskResumeAll+0x118>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d161      	bne.n	800366c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035a8:	4b35      	ldr	r3, [pc, #212]	@ (8003680 <xTaskResumeAll+0x11c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d05d      	beq.n	800366c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035b0:	e02e      	b.n	8003610 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035b2:	4b34      	ldr	r3, [pc, #208]	@ (8003684 <xTaskResumeAll+0x120>)
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	3318      	adds	r3, #24
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff fa03 	bl	80029ca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	3304      	adds	r3, #4
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff f9fe 	bl	80029ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d2:	2201      	movs	r2, #1
 80035d4:	409a      	lsls	r2, r3
 80035d6:	4b2c      	ldr	r3, [pc, #176]	@ (8003688 <xTaskResumeAll+0x124>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4313      	orrs	r3, r2
 80035dc:	4a2a      	ldr	r2, [pc, #168]	@ (8003688 <xTaskResumeAll+0x124>)
 80035de:	6013      	str	r3, [r2, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4a27      	ldr	r2, [pc, #156]	@ (800368c <xTaskResumeAll+0x128>)
 80035ee:	441a      	add	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	3304      	adds	r3, #4
 80035f4:	4619      	mov	r1, r3
 80035f6:	4610      	mov	r0, r2
 80035f8:	f7ff f98a 	bl	8002910 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003600:	4b23      	ldr	r3, [pc, #140]	@ (8003690 <xTaskResumeAll+0x12c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003606:	429a      	cmp	r2, r3
 8003608:	d302      	bcc.n	8003610 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800360a:	4b22      	ldr	r3, [pc, #136]	@ (8003694 <xTaskResumeAll+0x130>)
 800360c:	2201      	movs	r2, #1
 800360e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003610:	4b1c      	ldr	r3, [pc, #112]	@ (8003684 <xTaskResumeAll+0x120>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1cc      	bne.n	80035b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800361e:	f000 fb1b 	bl	8003c58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003622:	4b1d      	ldr	r3, [pc, #116]	@ (8003698 <xTaskResumeAll+0x134>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d010      	beq.n	8003650 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800362e:	f000 f837 	bl	80036a0 <xTaskIncrementTick>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003638:	4b16      	ldr	r3, [pc, #88]	@ (8003694 <xTaskResumeAll+0x130>)
 800363a:	2201      	movs	r2, #1
 800363c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3b01      	subs	r3, #1
 8003642:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f1      	bne.n	800362e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800364a:	4b13      	ldr	r3, [pc, #76]	@ (8003698 <xTaskResumeAll+0x134>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003650:	4b10      	ldr	r3, [pc, #64]	@ (8003694 <xTaskResumeAll+0x130>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d009      	beq.n	800366c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003658:	2301      	movs	r3, #1
 800365a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800365c:	4b0f      	ldr	r3, [pc, #60]	@ (800369c <xTaskResumeAll+0x138>)
 800365e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800366c:	f000 fd86 	bl	800417c <vPortExitCritical>

	return xAlreadyYielded;
 8003670:	68bb      	ldr	r3, [r7, #8]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000448 	.word	0x20000448
 8003680:	20000420 	.word	0x20000420
 8003684:	200003e0 	.word	0x200003e0
 8003688:	20000428 	.word	0x20000428
 800368c:	20000324 	.word	0x20000324
 8003690:	20000320 	.word	0x20000320
 8003694:	20000434 	.word	0x20000434
 8003698:	20000430 	.word	0x20000430
 800369c:	e000ed04 	.word	0xe000ed04

080036a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036aa:	4b4f      	ldr	r3, [pc, #316]	@ (80037e8 <xTaskIncrementTick+0x148>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f040 808f 	bne.w	80037d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036b4:	4b4d      	ldr	r3, [pc, #308]	@ (80037ec <xTaskIncrementTick+0x14c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	3301      	adds	r3, #1
 80036ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80036bc:	4a4b      	ldr	r2, [pc, #300]	@ (80037ec <xTaskIncrementTick+0x14c>)
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d121      	bne.n	800370c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80036c8:	4b49      	ldr	r3, [pc, #292]	@ (80037f0 <xTaskIncrementTick+0x150>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00b      	beq.n	80036ea <xTaskIncrementTick+0x4a>
	__asm volatile
 80036d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	603b      	str	r3, [r7, #0]
}
 80036e4:	bf00      	nop
 80036e6:	bf00      	nop
 80036e8:	e7fd      	b.n	80036e6 <xTaskIncrementTick+0x46>
 80036ea:	4b41      	ldr	r3, [pc, #260]	@ (80037f0 <xTaskIncrementTick+0x150>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	4b40      	ldr	r3, [pc, #256]	@ (80037f4 <xTaskIncrementTick+0x154>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a3e      	ldr	r2, [pc, #248]	@ (80037f0 <xTaskIncrementTick+0x150>)
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	4a3e      	ldr	r2, [pc, #248]	@ (80037f4 <xTaskIncrementTick+0x154>)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	4b3e      	ldr	r3, [pc, #248]	@ (80037f8 <xTaskIncrementTick+0x158>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3301      	adds	r3, #1
 8003704:	4a3c      	ldr	r2, [pc, #240]	@ (80037f8 <xTaskIncrementTick+0x158>)
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	f000 faa6 	bl	8003c58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800370c:	4b3b      	ldr	r3, [pc, #236]	@ (80037fc <xTaskIncrementTick+0x15c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	429a      	cmp	r2, r3
 8003714:	d348      	bcc.n	80037a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003716:	4b36      	ldr	r3, [pc, #216]	@ (80037f0 <xTaskIncrementTick+0x150>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d104      	bne.n	800372a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003720:	4b36      	ldr	r3, [pc, #216]	@ (80037fc <xTaskIncrementTick+0x15c>)
 8003722:	f04f 32ff 	mov.w	r2, #4294967295
 8003726:	601a      	str	r2, [r3, #0]
					break;
 8003728:	e03e      	b.n	80037a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800372a:	4b31      	ldr	r3, [pc, #196]	@ (80037f0 <xTaskIncrementTick+0x150>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	429a      	cmp	r2, r3
 8003740:	d203      	bcs.n	800374a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003742:	4a2e      	ldr	r2, [pc, #184]	@ (80037fc <xTaskIncrementTick+0x15c>)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003748:	e02e      	b.n	80037a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	3304      	adds	r3, #4
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff f93b 	bl	80029ca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003758:	2b00      	cmp	r3, #0
 800375a:	d004      	beq.n	8003766 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	3318      	adds	r3, #24
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff f932 	bl	80029ca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376a:	2201      	movs	r2, #1
 800376c:	409a      	lsls	r2, r3
 800376e:	4b24      	ldr	r3, [pc, #144]	@ (8003800 <xTaskIncrementTick+0x160>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4313      	orrs	r3, r2
 8003774:	4a22      	ldr	r2, [pc, #136]	@ (8003800 <xTaskIncrementTick+0x160>)
 8003776:	6013      	str	r3, [r2, #0]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800377c:	4613      	mov	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4a1f      	ldr	r2, [pc, #124]	@ (8003804 <xTaskIncrementTick+0x164>)
 8003786:	441a      	add	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	3304      	adds	r3, #4
 800378c:	4619      	mov	r1, r3
 800378e:	4610      	mov	r0, r2
 8003790:	f7ff f8be 	bl	8002910 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003798:	4b1b      	ldr	r3, [pc, #108]	@ (8003808 <xTaskIncrementTick+0x168>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379e:	429a      	cmp	r2, r3
 80037a0:	d3b9      	bcc.n	8003716 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80037a2:	2301      	movs	r3, #1
 80037a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037a6:	e7b6      	b.n	8003716 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037a8:	4b17      	ldr	r3, [pc, #92]	@ (8003808 <xTaskIncrementTick+0x168>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ae:	4915      	ldr	r1, [pc, #84]	@ (8003804 <xTaskIncrementTick+0x164>)
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d901      	bls.n	80037c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80037c0:	2301      	movs	r3, #1
 80037c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80037c4:	4b11      	ldr	r3, [pc, #68]	@ (800380c <xTaskIncrementTick+0x16c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d007      	beq.n	80037dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80037cc:	2301      	movs	r3, #1
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	e004      	b.n	80037dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80037d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003810 <xTaskIncrementTick+0x170>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3301      	adds	r3, #1
 80037d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003810 <xTaskIncrementTick+0x170>)
 80037da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80037dc:	697b      	ldr	r3, [r7, #20]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20000448 	.word	0x20000448
 80037ec:	20000424 	.word	0x20000424
 80037f0:	200003d8 	.word	0x200003d8
 80037f4:	200003dc 	.word	0x200003dc
 80037f8:	20000438 	.word	0x20000438
 80037fc:	20000440 	.word	0x20000440
 8003800:	20000428 	.word	0x20000428
 8003804:	20000324 	.word	0x20000324
 8003808:	20000320 	.word	0x20000320
 800380c:	20000434 	.word	0x20000434
 8003810:	20000430 	.word	0x20000430

08003814 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800381a:	4b27      	ldr	r3, [pc, #156]	@ (80038b8 <vTaskSwitchContext+0xa4>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003822:	4b26      	ldr	r3, [pc, #152]	@ (80038bc <vTaskSwitchContext+0xa8>)
 8003824:	2201      	movs	r2, #1
 8003826:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003828:	e040      	b.n	80038ac <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800382a:	4b24      	ldr	r3, [pc, #144]	@ (80038bc <vTaskSwitchContext+0xa8>)
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003830:	4b23      	ldr	r3, [pc, #140]	@ (80038c0 <vTaskSwitchContext+0xac>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	fab3 f383 	clz	r3, r3
 800383c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800383e:	7afb      	ldrb	r3, [r7, #11]
 8003840:	f1c3 031f 	rsb	r3, r3, #31
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	491f      	ldr	r1, [pc, #124]	@ (80038c4 <vTaskSwitchContext+0xb0>)
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10b      	bne.n	8003872 <vTaskSwitchContext+0x5e>
	__asm volatile
 800385a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800385e:	f383 8811 	msr	BASEPRI, r3
 8003862:	f3bf 8f6f 	isb	sy
 8003866:	f3bf 8f4f 	dsb	sy
 800386a:	607b      	str	r3, [r7, #4]
}
 800386c:	bf00      	nop
 800386e:	bf00      	nop
 8003870:	e7fd      	b.n	800386e <vTaskSwitchContext+0x5a>
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4a11      	ldr	r2, [pc, #68]	@ (80038c4 <vTaskSwitchContext+0xb0>)
 800387e:	4413      	add	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	605a      	str	r2, [r3, #4]
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	3308      	adds	r3, #8
 8003894:	429a      	cmp	r2, r3
 8003896:	d104      	bne.n	80038a2 <vTaskSwitchContext+0x8e>
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	605a      	str	r2, [r3, #4]
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	4a07      	ldr	r2, [pc, #28]	@ (80038c8 <vTaskSwitchContext+0xb4>)
 80038aa:	6013      	str	r3, [r2, #0]
}
 80038ac:	bf00      	nop
 80038ae:	371c      	adds	r7, #28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	20000448 	.word	0x20000448
 80038bc:	20000434 	.word	0x20000434
 80038c0:	20000428 	.word	0x20000428
 80038c4:	20000324 	.word	0x20000324
 80038c8:	20000320 	.word	0x20000320

080038cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10b      	bne.n	80038f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80038dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	60fb      	str	r3, [r7, #12]
}
 80038ee:	bf00      	nop
 80038f0:	bf00      	nop
 80038f2:	e7fd      	b.n	80038f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038f4:	4b07      	ldr	r3, [pc, #28]	@ (8003914 <vTaskPlaceOnEventList+0x48>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3318      	adds	r3, #24
 80038fa:	4619      	mov	r1, r3
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff f82b 	bl	8002958 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003902:	2101      	movs	r1, #1
 8003904:	6838      	ldr	r0, [r7, #0]
 8003906:	f000 fa6d 	bl	8003de4 <prvAddCurrentTaskToDelayedList>
}
 800390a:	bf00      	nop
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000320 	.word	0x20000320

08003918 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10b      	bne.n	8003946 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800392e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003932:	f383 8811 	msr	BASEPRI, r3
 8003936:	f3bf 8f6f 	isb	sy
 800393a:	f3bf 8f4f 	dsb	sy
 800393e:	60fb      	str	r3, [r7, #12]
}
 8003940:	bf00      	nop
 8003942:	bf00      	nop
 8003944:	e7fd      	b.n	8003942 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	3318      	adds	r3, #24
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff f83d 	bl	80029ca <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003950:	4b1d      	ldr	r3, [pc, #116]	@ (80039c8 <xTaskRemoveFromEventList+0xb0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d11c      	bne.n	8003992 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	3304      	adds	r3, #4
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff f834 	bl	80029ca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003966:	2201      	movs	r2, #1
 8003968:	409a      	lsls	r2, r3
 800396a:	4b18      	ldr	r3, [pc, #96]	@ (80039cc <xTaskRemoveFromEventList+0xb4>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4313      	orrs	r3, r2
 8003970:	4a16      	ldr	r2, [pc, #88]	@ (80039cc <xTaskRemoveFromEventList+0xb4>)
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4a13      	ldr	r2, [pc, #76]	@ (80039d0 <xTaskRemoveFromEventList+0xb8>)
 8003982:	441a      	add	r2, r3
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	3304      	adds	r3, #4
 8003988:	4619      	mov	r1, r3
 800398a:	4610      	mov	r0, r2
 800398c:	f7fe ffc0 	bl	8002910 <vListInsertEnd>
 8003990:	e005      	b.n	800399e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	3318      	adds	r3, #24
 8003996:	4619      	mov	r1, r3
 8003998:	480e      	ldr	r0, [pc, #56]	@ (80039d4 <xTaskRemoveFromEventList+0xbc>)
 800399a:	f7fe ffb9 	bl	8002910 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039a2:	4b0d      	ldr	r3, [pc, #52]	@ (80039d8 <xTaskRemoveFromEventList+0xc0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d905      	bls.n	80039b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80039ac:	2301      	movs	r3, #1
 80039ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80039b0:	4b0a      	ldr	r3, [pc, #40]	@ (80039dc <xTaskRemoveFromEventList+0xc4>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	e001      	b.n	80039bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80039b8:	2300      	movs	r3, #0
 80039ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80039bc:	697b      	ldr	r3, [r7, #20]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000448 	.word	0x20000448
 80039cc:	20000428 	.word	0x20000428
 80039d0:	20000324 	.word	0x20000324
 80039d4:	200003e0 	.word	0x200003e0
 80039d8:	20000320 	.word	0x20000320
 80039dc:	20000434 	.word	0x20000434

080039e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80039e8:	4b06      	ldr	r3, [pc, #24]	@ (8003a04 <vTaskInternalSetTimeOutState+0x24>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80039f0:	4b05      	ldr	r3, [pc, #20]	@ (8003a08 <vTaskInternalSetTimeOutState+0x28>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	605a      	str	r2, [r3, #4]
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	20000438 	.word	0x20000438
 8003a08:	20000424 	.word	0x20000424

08003a0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10b      	bne.n	8003a34 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a20:	f383 8811 	msr	BASEPRI, r3
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	613b      	str	r3, [r7, #16]
}
 8003a2e:	bf00      	nop
 8003a30:	bf00      	nop
 8003a32:	e7fd      	b.n	8003a30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10b      	bne.n	8003a52 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a3e:	f383 8811 	msr	BASEPRI, r3
 8003a42:	f3bf 8f6f 	isb	sy
 8003a46:	f3bf 8f4f 	dsb	sy
 8003a4a:	60fb      	str	r3, [r7, #12]
}
 8003a4c:	bf00      	nop
 8003a4e:	bf00      	nop
 8003a50:	e7fd      	b.n	8003a4e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003a52:	f000 fb61 	bl	8004118 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003a56:	4b1d      	ldr	r3, [pc, #116]	@ (8003acc <xTaskCheckForTimeOut+0xc0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6e:	d102      	bne.n	8003a76 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003a70:	2300      	movs	r3, #0
 8003a72:	61fb      	str	r3, [r7, #28]
 8003a74:	e023      	b.n	8003abe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	4b15      	ldr	r3, [pc, #84]	@ (8003ad0 <xTaskCheckForTimeOut+0xc4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d007      	beq.n	8003a92 <xTaskCheckForTimeOut+0x86>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d302      	bcc.n	8003a92 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	61fb      	str	r3, [r7, #28]
 8003a90:	e015      	b.n	8003abe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d20b      	bcs.n	8003ab4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	1ad2      	subs	r2, r2, r3
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff ff99 	bl	80039e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61fb      	str	r3, [r7, #28]
 8003ab2:	e004      	b.n	8003abe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003aba:	2301      	movs	r3, #1
 8003abc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003abe:	f000 fb5d 	bl	800417c <vPortExitCritical>

	return xReturn;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3720      	adds	r7, #32
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	20000424 	.word	0x20000424
 8003ad0:	20000438 	.word	0x20000438

08003ad4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ad8:	4b03      	ldr	r3, [pc, #12]	@ (8003ae8 <vTaskMissedYield+0x14>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
}
 8003ade:	bf00      	nop
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	20000434 	.word	0x20000434

08003aec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003af4:	f000 f852 	bl	8003b9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003af8:	4b06      	ldr	r3, [pc, #24]	@ (8003b14 <prvIdleTask+0x28>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d9f9      	bls.n	8003af4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b00:	4b05      	ldr	r3, [pc, #20]	@ (8003b18 <prvIdleTask+0x2c>)
 8003b02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b10:	e7f0      	b.n	8003af4 <prvIdleTask+0x8>
 8003b12:	bf00      	nop
 8003b14:	20000324 	.word	0x20000324
 8003b18:	e000ed04 	.word	0xe000ed04

08003b1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b22:	2300      	movs	r3, #0
 8003b24:	607b      	str	r3, [r7, #4]
 8003b26:	e00c      	b.n	8003b42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4a12      	ldr	r2, [pc, #72]	@ (8003b7c <prvInitialiseTaskLists+0x60>)
 8003b34:	4413      	add	r3, r2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fe febd 	bl	80028b6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	607b      	str	r3, [r7, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b06      	cmp	r3, #6
 8003b46:	d9ef      	bls.n	8003b28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b48:	480d      	ldr	r0, [pc, #52]	@ (8003b80 <prvInitialiseTaskLists+0x64>)
 8003b4a:	f7fe feb4 	bl	80028b6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b4e:	480d      	ldr	r0, [pc, #52]	@ (8003b84 <prvInitialiseTaskLists+0x68>)
 8003b50:	f7fe feb1 	bl	80028b6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b54:	480c      	ldr	r0, [pc, #48]	@ (8003b88 <prvInitialiseTaskLists+0x6c>)
 8003b56:	f7fe feae 	bl	80028b6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b5a:	480c      	ldr	r0, [pc, #48]	@ (8003b8c <prvInitialiseTaskLists+0x70>)
 8003b5c:	f7fe feab 	bl	80028b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b60:	480b      	ldr	r0, [pc, #44]	@ (8003b90 <prvInitialiseTaskLists+0x74>)
 8003b62:	f7fe fea8 	bl	80028b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b66:	4b0b      	ldr	r3, [pc, #44]	@ (8003b94 <prvInitialiseTaskLists+0x78>)
 8003b68:	4a05      	ldr	r2, [pc, #20]	@ (8003b80 <prvInitialiseTaskLists+0x64>)
 8003b6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b98 <prvInitialiseTaskLists+0x7c>)
 8003b6e:	4a05      	ldr	r2, [pc, #20]	@ (8003b84 <prvInitialiseTaskLists+0x68>)
 8003b70:	601a      	str	r2, [r3, #0]
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20000324 	.word	0x20000324
 8003b80:	200003b0 	.word	0x200003b0
 8003b84:	200003c4 	.word	0x200003c4
 8003b88:	200003e0 	.word	0x200003e0
 8003b8c:	200003f4 	.word	0x200003f4
 8003b90:	2000040c 	.word	0x2000040c
 8003b94:	200003d8 	.word	0x200003d8
 8003b98:	200003dc 	.word	0x200003dc

08003b9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ba2:	e019      	b.n	8003bd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ba4:	f000 fab8 	bl	8004118 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ba8:	4b10      	ldr	r3, [pc, #64]	@ (8003bec <prvCheckTasksWaitingTermination+0x50>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fe ff08 	bl	80029ca <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003bba:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf0 <prvCheckTasksWaitingTermination+0x54>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	4a0b      	ldr	r2, [pc, #44]	@ (8003bf0 <prvCheckTasksWaitingTermination+0x54>)
 8003bc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf4 <prvCheckTasksWaitingTermination+0x58>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	4a0a      	ldr	r2, [pc, #40]	@ (8003bf4 <prvCheckTasksWaitingTermination+0x58>)
 8003bcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003bce:	f000 fad5 	bl	800417c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f810 	bl	8003bf8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bd8:	4b06      	ldr	r3, [pc, #24]	@ (8003bf4 <prvCheckTasksWaitingTermination+0x58>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1e1      	bne.n	8003ba4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003be0:	bf00      	nop
 8003be2:	bf00      	nop
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	200003f4 	.word	0x200003f4
 8003bf0:	20000420 	.word	0x20000420
 8003bf4:	20000408 	.word	0x20000408

08003bf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d108      	bne.n	8003c1c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fc30 	bl	8004474 <vPortFree>
				vPortFree( pxTCB );
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fc2d 	bl	8004474 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c1a:	e019      	b.n	8003c50 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d103      	bne.n	8003c2e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 fc24 	bl	8004474 <vPortFree>
	}
 8003c2c:	e010      	b.n	8003c50 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d00b      	beq.n	8003c50 <prvDeleteTCB+0x58>
	__asm volatile
 8003c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c3c:	f383 8811 	msr	BASEPRI, r3
 8003c40:	f3bf 8f6f 	isb	sy
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	60fb      	str	r3, [r7, #12]
}
 8003c4a:	bf00      	nop
 8003c4c:	bf00      	nop
 8003c4e:	e7fd      	b.n	8003c4c <prvDeleteTCB+0x54>
	}
 8003c50:	bf00      	nop
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003c90 <prvResetNextTaskUnblockTime+0x38>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d104      	bne.n	8003c72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c68:	4b0a      	ldr	r3, [pc, #40]	@ (8003c94 <prvResetNextTaskUnblockTime+0x3c>)
 8003c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c70:	e008      	b.n	8003c84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c72:	4b07      	ldr	r3, [pc, #28]	@ (8003c90 <prvResetNextTaskUnblockTime+0x38>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	4a04      	ldr	r2, [pc, #16]	@ (8003c94 <prvResetNextTaskUnblockTime+0x3c>)
 8003c82:	6013      	str	r3, [r2, #0]
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	200003d8 	.word	0x200003d8
 8003c94:	20000440 	.word	0x20000440

08003c98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003ccc <xTaskGetSchedulerState+0x34>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d102      	bne.n	8003cac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	607b      	str	r3, [r7, #4]
 8003caa:	e008      	b.n	8003cbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cac:	4b08      	ldr	r3, [pc, #32]	@ (8003cd0 <xTaskGetSchedulerState+0x38>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d102      	bne.n	8003cba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	607b      	str	r3, [r7, #4]
 8003cb8:	e001      	b.n	8003cbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003cbe:	687b      	ldr	r3, [r7, #4]
	}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	2000042c 	.word	0x2000042c
 8003cd0:	20000448 	.word	0x20000448

08003cd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d070      	beq.n	8003dcc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003cea:	4b3b      	ldr	r3, [pc, #236]	@ (8003dd8 <xTaskPriorityDisinherit+0x104>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d00b      	beq.n	8003d0c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf8:	f383 8811 	msr	BASEPRI, r3
 8003cfc:	f3bf 8f6f 	isb	sy
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	60fb      	str	r3, [r7, #12]
}
 8003d06:	bf00      	nop
 8003d08:	bf00      	nop
 8003d0a:	e7fd      	b.n	8003d08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10b      	bne.n	8003d2c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d18:	f383 8811 	msr	BASEPRI, r3
 8003d1c:	f3bf 8f6f 	isb	sy
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	60bb      	str	r3, [r7, #8]
}
 8003d26:	bf00      	nop
 8003d28:	bf00      	nop
 8003d2a:	e7fd      	b.n	8003d28 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d30:	1e5a      	subs	r2, r3, #1
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d044      	beq.n	8003dcc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d140      	bne.n	8003dcc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fe fe3b 	bl	80029ca <uxListRemove>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d115      	bne.n	8003d86 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d5e:	491f      	ldr	r1, [pc, #124]	@ (8003ddc <xTaskPriorityDisinherit+0x108>)
 8003d60:	4613      	mov	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10a      	bne.n	8003d86 <xTaskPriorityDisinherit+0xb2>
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d74:	2201      	movs	r2, #1
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	43da      	mvns	r2, r3
 8003d7c:	4b18      	ldr	r3, [pc, #96]	@ (8003de0 <xTaskPriorityDisinherit+0x10c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4013      	ands	r3, r2
 8003d82:	4a17      	ldr	r2, [pc, #92]	@ (8003de0 <xTaskPriorityDisinherit+0x10c>)
 8003d84:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d92:	f1c3 0207 	rsb	r2, r3, #7
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9e:	2201      	movs	r2, #1
 8003da0:	409a      	lsls	r2, r3
 8003da2:	4b0f      	ldr	r3, [pc, #60]	@ (8003de0 <xTaskPriorityDisinherit+0x10c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	4a0d      	ldr	r2, [pc, #52]	@ (8003de0 <xTaskPriorityDisinherit+0x10c>)
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003db0:	4613      	mov	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4a08      	ldr	r2, [pc, #32]	@ (8003ddc <xTaskPriorityDisinherit+0x108>)
 8003dba:	441a      	add	r2, r3
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	f7fe fda4 	bl	8002910 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003dcc:	697b      	ldr	r3, [r7, #20]
	}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20000320 	.word	0x20000320
 8003ddc:	20000324 	.word	0x20000324
 8003de0:	20000428 	.word	0x20000428

08003de4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003dee:	4b29      	ldr	r3, [pc, #164]	@ (8003e94 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003df4:	4b28      	ldr	r3, [pc, #160]	@ (8003e98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fe fde5 	bl	80029ca <uxListRemove>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10b      	bne.n	8003e1e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003e06:	4b24      	ldr	r3, [pc, #144]	@ (8003e98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	43da      	mvns	r2, r3
 8003e14:	4b21      	ldr	r3, [pc, #132]	@ (8003e9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	4a20      	ldr	r2, [pc, #128]	@ (8003e9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e1c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e24:	d10a      	bne.n	8003e3c <prvAddCurrentTaskToDelayedList+0x58>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d007      	beq.n	8003e3c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003e98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	3304      	adds	r3, #4
 8003e32:	4619      	mov	r1, r3
 8003e34:	481a      	ldr	r0, [pc, #104]	@ (8003ea0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003e36:	f7fe fd6b 	bl	8002910 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e3a:	e026      	b.n	8003e8a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4413      	add	r3, r2
 8003e42:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e44:	4b14      	ldr	r3, [pc, #80]	@ (8003e98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d209      	bcs.n	8003e68 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e54:	4b13      	ldr	r3, [pc, #76]	@ (8003ea4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	4b0f      	ldr	r3, [pc, #60]	@ (8003e98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4610      	mov	r0, r2
 8003e62:	f7fe fd79 	bl	8002958 <vListInsert>
}
 8003e66:	e010      	b.n	8003e8a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e68:	4b0f      	ldr	r3, [pc, #60]	@ (8003ea8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3304      	adds	r3, #4
 8003e72:	4619      	mov	r1, r3
 8003e74:	4610      	mov	r0, r2
 8003e76:	f7fe fd6f 	bl	8002958 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003eac <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d202      	bcs.n	8003e8a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003e84:	4a09      	ldr	r2, [pc, #36]	@ (8003eac <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	6013      	str	r3, [r2, #0]
}
 8003e8a:	bf00      	nop
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20000424 	.word	0x20000424
 8003e98:	20000320 	.word	0x20000320
 8003e9c:	20000428 	.word	0x20000428
 8003ea0:	2000040c 	.word	0x2000040c
 8003ea4:	200003dc 	.word	0x200003dc
 8003ea8:	200003d8 	.word	0x200003d8
 8003eac:	20000440 	.word	0x20000440

08003eb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	3b04      	subs	r3, #4
 8003ec0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ec8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	3b04      	subs	r3, #4
 8003ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f023 0201 	bic.w	r2, r3, #1
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	3b04      	subs	r3, #4
 8003ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8003f14 <pxPortInitialiseStack+0x64>)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	3b14      	subs	r3, #20
 8003eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3b04      	subs	r3, #4
 8003ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f06f 0202 	mvn.w	r2, #2
 8003efe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	3b20      	subs	r3, #32
 8003f04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003f06:	68fb      	ldr	r3, [r7, #12]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	08003f19 	.word	0x08003f19

08003f18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003f22:	4b13      	ldr	r3, [pc, #76]	@ (8003f70 <prvTaskExitError+0x58>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2a:	d00b      	beq.n	8003f44 <prvTaskExitError+0x2c>
	__asm volatile
 8003f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f30:	f383 8811 	msr	BASEPRI, r3
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	60fb      	str	r3, [r7, #12]
}
 8003f3e:	bf00      	nop
 8003f40:	bf00      	nop
 8003f42:	e7fd      	b.n	8003f40 <prvTaskExitError+0x28>
	__asm volatile
 8003f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f48:	f383 8811 	msr	BASEPRI, r3
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	60bb      	str	r3, [r7, #8]
}
 8003f56:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003f58:	bf00      	nop
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0fc      	beq.n	8003f5a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003f60:	bf00      	nop
 8003f62:	bf00      	nop
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	2000000c 	.word	0x2000000c
	...

08003f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003f80:	4b07      	ldr	r3, [pc, #28]	@ (8003fa0 <pxCurrentTCBConst2>)
 8003f82:	6819      	ldr	r1, [r3, #0]
 8003f84:	6808      	ldr	r0, [r1, #0]
 8003f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f8a:	f380 8809 	msr	PSP, r0
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f04f 0000 	mov.w	r0, #0
 8003f96:	f380 8811 	msr	BASEPRI, r0
 8003f9a:	4770      	bx	lr
 8003f9c:	f3af 8000 	nop.w

08003fa0 <pxCurrentTCBConst2>:
 8003fa0:	20000320 	.word	0x20000320
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003fa4:	bf00      	nop
 8003fa6:	bf00      	nop

08003fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003fa8:	4808      	ldr	r0, [pc, #32]	@ (8003fcc <prvPortStartFirstTask+0x24>)
 8003faa:	6800      	ldr	r0, [r0, #0]
 8003fac:	6800      	ldr	r0, [r0, #0]
 8003fae:	f380 8808 	msr	MSP, r0
 8003fb2:	f04f 0000 	mov.w	r0, #0
 8003fb6:	f380 8814 	msr	CONTROL, r0
 8003fba:	b662      	cpsie	i
 8003fbc:	b661      	cpsie	f
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	df00      	svc	0
 8003fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003fca:	bf00      	nop
 8003fcc:	e000ed08 	.word	0xe000ed08

08003fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003fd6:	4b47      	ldr	r3, [pc, #284]	@ (80040f4 <xPortStartScheduler+0x124>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a47      	ldr	r2, [pc, #284]	@ (80040f8 <xPortStartScheduler+0x128>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d10b      	bne.n	8003ff8 <xPortStartScheduler+0x28>
	__asm volatile
 8003fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	613b      	str	r3, [r7, #16]
}
 8003ff2:	bf00      	nop
 8003ff4:	bf00      	nop
 8003ff6:	e7fd      	b.n	8003ff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003ff8:	4b3e      	ldr	r3, [pc, #248]	@ (80040f4 <xPortStartScheduler+0x124>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a3f      	ldr	r2, [pc, #252]	@ (80040fc <xPortStartScheduler+0x12c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d10b      	bne.n	800401a <xPortStartScheduler+0x4a>
	__asm volatile
 8004002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004006:	f383 8811 	msr	BASEPRI, r3
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	60fb      	str	r3, [r7, #12]
}
 8004014:	bf00      	nop
 8004016:	bf00      	nop
 8004018:	e7fd      	b.n	8004016 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800401a:	4b39      	ldr	r3, [pc, #228]	@ (8004100 <xPortStartScheduler+0x130>)
 800401c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	22ff      	movs	r2, #255	@ 0xff
 800402a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	b2db      	uxtb	r3, r3
 8004032:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800403c:	b2da      	uxtb	r2, r3
 800403e:	4b31      	ldr	r3, [pc, #196]	@ (8004104 <xPortStartScheduler+0x134>)
 8004040:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004042:	4b31      	ldr	r3, [pc, #196]	@ (8004108 <xPortStartScheduler+0x138>)
 8004044:	2207      	movs	r2, #7
 8004046:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004048:	e009      	b.n	800405e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800404a:	4b2f      	ldr	r3, [pc, #188]	@ (8004108 <xPortStartScheduler+0x138>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3b01      	subs	r3, #1
 8004050:	4a2d      	ldr	r2, [pc, #180]	@ (8004108 <xPortStartScheduler+0x138>)
 8004052:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	b2db      	uxtb	r3, r3
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	b2db      	uxtb	r3, r3
 800405c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	b2db      	uxtb	r3, r3
 8004062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004066:	2b80      	cmp	r3, #128	@ 0x80
 8004068:	d0ef      	beq.n	800404a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800406a:	4b27      	ldr	r3, [pc, #156]	@ (8004108 <xPortStartScheduler+0x138>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f1c3 0307 	rsb	r3, r3, #7
 8004072:	2b04      	cmp	r3, #4
 8004074:	d00b      	beq.n	800408e <xPortStartScheduler+0xbe>
	__asm volatile
 8004076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	60bb      	str	r3, [r7, #8]
}
 8004088:	bf00      	nop
 800408a:	bf00      	nop
 800408c:	e7fd      	b.n	800408a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800408e:	4b1e      	ldr	r3, [pc, #120]	@ (8004108 <xPortStartScheduler+0x138>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	021b      	lsls	r3, r3, #8
 8004094:	4a1c      	ldr	r2, [pc, #112]	@ (8004108 <xPortStartScheduler+0x138>)
 8004096:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004098:	4b1b      	ldr	r3, [pc, #108]	@ (8004108 <xPortStartScheduler+0x138>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80040a0:	4a19      	ldr	r2, [pc, #100]	@ (8004108 <xPortStartScheduler+0x138>)
 80040a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80040ac:	4b17      	ldr	r3, [pc, #92]	@ (800410c <xPortStartScheduler+0x13c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a16      	ldr	r2, [pc, #88]	@ (800410c <xPortStartScheduler+0x13c>)
 80040b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80040b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80040b8:	4b14      	ldr	r3, [pc, #80]	@ (800410c <xPortStartScheduler+0x13c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a13      	ldr	r2, [pc, #76]	@ (800410c <xPortStartScheduler+0x13c>)
 80040be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80040c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80040c4:	f000 f8da 	bl	800427c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80040c8:	4b11      	ldr	r3, [pc, #68]	@ (8004110 <xPortStartScheduler+0x140>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80040ce:	f000 f8f9 	bl	80042c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80040d2:	4b10      	ldr	r3, [pc, #64]	@ (8004114 <xPortStartScheduler+0x144>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a0f      	ldr	r2, [pc, #60]	@ (8004114 <xPortStartScheduler+0x144>)
 80040d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80040dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80040de:	f7ff ff63 	bl	8003fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80040e2:	f7ff fb97 	bl	8003814 <vTaskSwitchContext>
	prvTaskExitError();
 80040e6:	f7ff ff17 	bl	8003f18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	e000ed00 	.word	0xe000ed00
 80040f8:	410fc271 	.word	0x410fc271
 80040fc:	410fc270 	.word	0x410fc270
 8004100:	e000e400 	.word	0xe000e400
 8004104:	2000044c 	.word	0x2000044c
 8004108:	20000450 	.word	0x20000450
 800410c:	e000ed20 	.word	0xe000ed20
 8004110:	2000000c 	.word	0x2000000c
 8004114:	e000ef34 	.word	0xe000ef34

08004118 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
	__asm volatile
 800411e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	607b      	str	r3, [r7, #4]
}
 8004130:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004132:	4b10      	ldr	r3, [pc, #64]	@ (8004174 <vPortEnterCritical+0x5c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3301      	adds	r3, #1
 8004138:	4a0e      	ldr	r2, [pc, #56]	@ (8004174 <vPortEnterCritical+0x5c>)
 800413a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800413c:	4b0d      	ldr	r3, [pc, #52]	@ (8004174 <vPortEnterCritical+0x5c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d110      	bne.n	8004166 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004144:	4b0c      	ldr	r3, [pc, #48]	@ (8004178 <vPortEnterCritical+0x60>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00b      	beq.n	8004166 <vPortEnterCritical+0x4e>
	__asm volatile
 800414e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004152:	f383 8811 	msr	BASEPRI, r3
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	603b      	str	r3, [r7, #0]
}
 8004160:	bf00      	nop
 8004162:	bf00      	nop
 8004164:	e7fd      	b.n	8004162 <vPortEnterCritical+0x4a>
	}
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	2000000c 	.word	0x2000000c
 8004178:	e000ed04 	.word	0xe000ed04

0800417c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004182:	4b12      	ldr	r3, [pc, #72]	@ (80041cc <vPortExitCritical+0x50>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10b      	bne.n	80041a2 <vPortExitCritical+0x26>
	__asm volatile
 800418a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800418e:	f383 8811 	msr	BASEPRI, r3
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	607b      	str	r3, [r7, #4]
}
 800419c:	bf00      	nop
 800419e:	bf00      	nop
 80041a0:	e7fd      	b.n	800419e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80041a2:	4b0a      	ldr	r3, [pc, #40]	@ (80041cc <vPortExitCritical+0x50>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	4a08      	ldr	r2, [pc, #32]	@ (80041cc <vPortExitCritical+0x50>)
 80041aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80041ac:	4b07      	ldr	r3, [pc, #28]	@ (80041cc <vPortExitCritical+0x50>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d105      	bne.n	80041c0 <vPortExitCritical+0x44>
 80041b4:	2300      	movs	r3, #0
 80041b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80041be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	2000000c 	.word	0x2000000c

080041d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80041d0:	f3ef 8009 	mrs	r0, PSP
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	4b15      	ldr	r3, [pc, #84]	@ (8004230 <pxCurrentTCBConst>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	f01e 0f10 	tst.w	lr, #16
 80041e0:	bf08      	it	eq
 80041e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80041e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ea:	6010      	str	r0, [r2, #0]
 80041ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80041f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80041f4:	f380 8811 	msr	BASEPRI, r0
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f7ff fb08 	bl	8003814 <vTaskSwitchContext>
 8004204:	f04f 0000 	mov.w	r0, #0
 8004208:	f380 8811 	msr	BASEPRI, r0
 800420c:	bc09      	pop	{r0, r3}
 800420e:	6819      	ldr	r1, [r3, #0]
 8004210:	6808      	ldr	r0, [r1, #0]
 8004212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004216:	f01e 0f10 	tst.w	lr, #16
 800421a:	bf08      	it	eq
 800421c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004220:	f380 8809 	msr	PSP, r0
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	f3af 8000 	nop.w

08004230 <pxCurrentTCBConst>:
 8004230:	20000320 	.word	0x20000320
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004234:	bf00      	nop
 8004236:	bf00      	nop

08004238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
	__asm volatile
 800423e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	607b      	str	r3, [r7, #4]
}
 8004250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004252:	f7ff fa25 	bl	80036a0 <xTaskIncrementTick>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800425c:	4b06      	ldr	r3, [pc, #24]	@ (8004278 <SysTick_Handler+0x40>)
 800425e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	2300      	movs	r3, #0
 8004266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	f383 8811 	msr	BASEPRI, r3
}
 800426e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004270:	bf00      	nop
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	e000ed04 	.word	0xe000ed04

0800427c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004280:	4b0b      	ldr	r3, [pc, #44]	@ (80042b0 <vPortSetupTimerInterrupt+0x34>)
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004286:	4b0b      	ldr	r3, [pc, #44]	@ (80042b4 <vPortSetupTimerInterrupt+0x38>)
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800428c:	4b0a      	ldr	r3, [pc, #40]	@ (80042b8 <vPortSetupTimerInterrupt+0x3c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a0a      	ldr	r2, [pc, #40]	@ (80042bc <vPortSetupTimerInterrupt+0x40>)
 8004292:	fba2 2303 	umull	r2, r3, r2, r3
 8004296:	099b      	lsrs	r3, r3, #6
 8004298:	4a09      	ldr	r2, [pc, #36]	@ (80042c0 <vPortSetupTimerInterrupt+0x44>)
 800429a:	3b01      	subs	r3, #1
 800429c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800429e:	4b04      	ldr	r3, [pc, #16]	@ (80042b0 <vPortSetupTimerInterrupt+0x34>)
 80042a0:	2207      	movs	r2, #7
 80042a2:	601a      	str	r2, [r3, #0]
}
 80042a4:	bf00      	nop
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	e000e010 	.word	0xe000e010
 80042b4:	e000e018 	.word	0xe000e018
 80042b8:	20000000 	.word	0x20000000
 80042bc:	10624dd3 	.word	0x10624dd3
 80042c0:	e000e014 	.word	0xe000e014

080042c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80042c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80042d4 <vPortEnableVFP+0x10>
 80042c8:	6801      	ldr	r1, [r0, #0]
 80042ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80042ce:	6001      	str	r1, [r0, #0]
 80042d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80042d2:	bf00      	nop
 80042d4:	e000ed88 	.word	0xe000ed88

080042d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08a      	sub	sp, #40	@ 0x28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80042e4:	f7ff f930 	bl	8003548 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80042e8:	4b5c      	ldr	r3, [pc, #368]	@ (800445c <pvPortMalloc+0x184>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80042f0:	f000 f924 	bl	800453c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80042f4:	4b5a      	ldr	r3, [pc, #360]	@ (8004460 <pvPortMalloc+0x188>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4013      	ands	r3, r2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f040 8095 	bne.w	800442c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d01e      	beq.n	8004346 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004308:	2208      	movs	r2, #8
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4413      	add	r3, r2
 800430e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	2b00      	cmp	r3, #0
 8004318:	d015      	beq.n	8004346 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f023 0307 	bic.w	r3, r3, #7
 8004320:	3308      	adds	r3, #8
 8004322:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00b      	beq.n	8004346 <pvPortMalloc+0x6e>
	__asm volatile
 800432e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004332:	f383 8811 	msr	BASEPRI, r3
 8004336:	f3bf 8f6f 	isb	sy
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	617b      	str	r3, [r7, #20]
}
 8004340:	bf00      	nop
 8004342:	bf00      	nop
 8004344:	e7fd      	b.n	8004342 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d06f      	beq.n	800442c <pvPortMalloc+0x154>
 800434c:	4b45      	ldr	r3, [pc, #276]	@ (8004464 <pvPortMalloc+0x18c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	429a      	cmp	r2, r3
 8004354:	d86a      	bhi.n	800442c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004356:	4b44      	ldr	r3, [pc, #272]	@ (8004468 <pvPortMalloc+0x190>)
 8004358:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800435a:	4b43      	ldr	r3, [pc, #268]	@ (8004468 <pvPortMalloc+0x190>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004360:	e004      	b.n	800436c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800436c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	429a      	cmp	r2, r3
 8004374:	d903      	bls.n	800437e <pvPortMalloc+0xa6>
 8004376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f1      	bne.n	8004362 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800437e:	4b37      	ldr	r3, [pc, #220]	@ (800445c <pvPortMalloc+0x184>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004384:	429a      	cmp	r2, r3
 8004386:	d051      	beq.n	800442c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2208      	movs	r2, #8
 800438e:	4413      	add	r3, r2
 8004390:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	1ad2      	subs	r2, r2, r3
 80043a2:	2308      	movs	r3, #8
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d920      	bls.n	80043ec <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4413      	add	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00b      	beq.n	80043d4 <pvPortMalloc+0xfc>
	__asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	613b      	str	r3, [r7, #16]
}
 80043ce:	bf00      	nop
 80043d0:	bf00      	nop
 80043d2:	e7fd      	b.n	80043d0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80043d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	1ad2      	subs	r2, r2, r3
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80043e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80043e6:	69b8      	ldr	r0, [r7, #24]
 80043e8:	f000 f90a 	bl	8004600 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80043ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004464 <pvPortMalloc+0x18c>)
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004464 <pvPortMalloc+0x18c>)
 80043f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80043fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004464 <pvPortMalloc+0x18c>)
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	4b1b      	ldr	r3, [pc, #108]	@ (800446c <pvPortMalloc+0x194>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d203      	bcs.n	800440e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004406:	4b17      	ldr	r3, [pc, #92]	@ (8004464 <pvPortMalloc+0x18c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a18      	ldr	r2, [pc, #96]	@ (800446c <pvPortMalloc+0x194>)
 800440c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800440e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	4b13      	ldr	r3, [pc, #76]	@ (8004460 <pvPortMalloc+0x188>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	431a      	orrs	r2, r3
 8004418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800441c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004422:	4b13      	ldr	r3, [pc, #76]	@ (8004470 <pvPortMalloc+0x198>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3301      	adds	r3, #1
 8004428:	4a11      	ldr	r2, [pc, #68]	@ (8004470 <pvPortMalloc+0x198>)
 800442a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800442c:	f7ff f89a 	bl	8003564 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00b      	beq.n	8004452 <pvPortMalloc+0x17a>
	__asm volatile
 800443a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	60fb      	str	r3, [r7, #12]
}
 800444c:	bf00      	nop
 800444e:	bf00      	nop
 8004450:	e7fd      	b.n	800444e <pvPortMalloc+0x176>
	return pvReturn;
 8004452:	69fb      	ldr	r3, [r7, #28]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3728      	adds	r7, #40	@ 0x28
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	2000405c 	.word	0x2000405c
 8004460:	20004070 	.word	0x20004070
 8004464:	20004060 	.word	0x20004060
 8004468:	20004054 	.word	0x20004054
 800446c:	20004064 	.word	0x20004064
 8004470:	20004068 	.word	0x20004068

08004474 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d04f      	beq.n	8004526 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004486:	2308      	movs	r3, #8
 8004488:	425b      	negs	r3, r3
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	4413      	add	r3, r2
 800448e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	4b25      	ldr	r3, [pc, #148]	@ (8004530 <vPortFree+0xbc>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4013      	ands	r3, r2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10b      	bne.n	80044ba <vPortFree+0x46>
	__asm volatile
 80044a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a6:	f383 8811 	msr	BASEPRI, r3
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	60fb      	str	r3, [r7, #12]
}
 80044b4:	bf00      	nop
 80044b6:	bf00      	nop
 80044b8:	e7fd      	b.n	80044b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00b      	beq.n	80044da <vPortFree+0x66>
	__asm volatile
 80044c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	60bb      	str	r3, [r7, #8]
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	e7fd      	b.n	80044d6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	4b14      	ldr	r3, [pc, #80]	@ (8004530 <vPortFree+0xbc>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4013      	ands	r3, r2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01e      	beq.n	8004526 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d11a      	bne.n	8004526 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004530 <vPortFree+0xbc>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	43db      	mvns	r3, r3
 80044fa:	401a      	ands	r2, r3
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004500:	f7ff f822 	bl	8003548 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	4b0a      	ldr	r3, [pc, #40]	@ (8004534 <vPortFree+0xc0>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4413      	add	r3, r2
 800450e:	4a09      	ldr	r2, [pc, #36]	@ (8004534 <vPortFree+0xc0>)
 8004510:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004512:	6938      	ldr	r0, [r7, #16]
 8004514:	f000 f874 	bl	8004600 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004518:	4b07      	ldr	r3, [pc, #28]	@ (8004538 <vPortFree+0xc4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3301      	adds	r3, #1
 800451e:	4a06      	ldr	r2, [pc, #24]	@ (8004538 <vPortFree+0xc4>)
 8004520:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004522:	f7ff f81f 	bl	8003564 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004526:	bf00      	nop
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	20004070 	.word	0x20004070
 8004534:	20004060 	.word	0x20004060
 8004538:	2000406c 	.word	0x2000406c

0800453c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004542:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004546:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004548:	4b27      	ldr	r3, [pc, #156]	@ (80045e8 <prvHeapInit+0xac>)
 800454a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00c      	beq.n	8004570 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	3307      	adds	r3, #7
 800455a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0307 	bic.w	r3, r3, #7
 8004562:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	4a1f      	ldr	r2, [pc, #124]	@ (80045e8 <prvHeapInit+0xac>)
 800456c:	4413      	add	r3, r2
 800456e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004574:	4a1d      	ldr	r2, [pc, #116]	@ (80045ec <prvHeapInit+0xb0>)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800457a:	4b1c      	ldr	r3, [pc, #112]	@ (80045ec <prvHeapInit+0xb0>)
 800457c:	2200      	movs	r2, #0
 800457e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	4413      	add	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004588:	2208      	movs	r2, #8
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f023 0307 	bic.w	r3, r3, #7
 8004596:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4a15      	ldr	r2, [pc, #84]	@ (80045f0 <prvHeapInit+0xb4>)
 800459c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800459e:	4b14      	ldr	r3, [pc, #80]	@ (80045f0 <prvHeapInit+0xb4>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2200      	movs	r2, #0
 80045a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80045a6:	4b12      	ldr	r3, [pc, #72]	@ (80045f0 <prvHeapInit+0xb4>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	1ad2      	subs	r2, r2, r3
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045bc:	4b0c      	ldr	r3, [pc, #48]	@ (80045f0 <prvHeapInit+0xb4>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	4a0a      	ldr	r2, [pc, #40]	@ (80045f4 <prvHeapInit+0xb8>)
 80045ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	4a09      	ldr	r2, [pc, #36]	@ (80045f8 <prvHeapInit+0xbc>)
 80045d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80045d4:	4b09      	ldr	r3, [pc, #36]	@ (80045fc <prvHeapInit+0xc0>)
 80045d6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80045da:	601a      	str	r2, [r3, #0]
}
 80045dc:	bf00      	nop
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	20000454 	.word	0x20000454
 80045ec:	20004054 	.word	0x20004054
 80045f0:	2000405c 	.word	0x2000405c
 80045f4:	20004064 	.word	0x20004064
 80045f8:	20004060 	.word	0x20004060
 80045fc:	20004070 	.word	0x20004070

08004600 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004608:	4b28      	ldr	r3, [pc, #160]	@ (80046ac <prvInsertBlockIntoFreeList+0xac>)
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	e002      	b.n	8004614 <prvInsertBlockIntoFreeList+0x14>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	429a      	cmp	r2, r3
 800461c:	d8f7      	bhi.n	800460e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	4413      	add	r3, r2
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	429a      	cmp	r2, r3
 800462e:	d108      	bne.n	8004642 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	441a      	add	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	441a      	add	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d118      	bne.n	8004688 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	4b15      	ldr	r3, [pc, #84]	@ (80046b0 <prvInsertBlockIntoFreeList+0xb0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d00d      	beq.n	800467e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	441a      	add	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	e008      	b.n	8004690 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800467e:	4b0c      	ldr	r3, [pc, #48]	@ (80046b0 <prvInsertBlockIntoFreeList+0xb0>)
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	e003      	b.n	8004690 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	429a      	cmp	r2, r3
 8004696:	d002      	beq.n	800469e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800469e:	bf00      	nop
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	20004054 	.word	0x20004054
 80046b0:	2000405c 	.word	0x2000405c

080046b4 <memset>:
 80046b4:	4402      	add	r2, r0
 80046b6:	4603      	mov	r3, r0
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d100      	bne.n	80046be <memset+0xa>
 80046bc:	4770      	bx	lr
 80046be:	f803 1b01 	strb.w	r1, [r3], #1
 80046c2:	e7f9      	b.n	80046b8 <memset+0x4>

080046c4 <__libc_init_array>:
 80046c4:	b570      	push	{r4, r5, r6, lr}
 80046c6:	4d0d      	ldr	r5, [pc, #52]	@ (80046fc <__libc_init_array+0x38>)
 80046c8:	4c0d      	ldr	r4, [pc, #52]	@ (8004700 <__libc_init_array+0x3c>)
 80046ca:	1b64      	subs	r4, r4, r5
 80046cc:	10a4      	asrs	r4, r4, #2
 80046ce:	2600      	movs	r6, #0
 80046d0:	42a6      	cmp	r6, r4
 80046d2:	d109      	bne.n	80046e8 <__libc_init_array+0x24>
 80046d4:	4d0b      	ldr	r5, [pc, #44]	@ (8004704 <__libc_init_array+0x40>)
 80046d6:	4c0c      	ldr	r4, [pc, #48]	@ (8004708 <__libc_init_array+0x44>)
 80046d8:	f000 f826 	bl	8004728 <_init>
 80046dc:	1b64      	subs	r4, r4, r5
 80046de:	10a4      	asrs	r4, r4, #2
 80046e0:	2600      	movs	r6, #0
 80046e2:	42a6      	cmp	r6, r4
 80046e4:	d105      	bne.n	80046f2 <__libc_init_array+0x2e>
 80046e6:	bd70      	pop	{r4, r5, r6, pc}
 80046e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ec:	4798      	blx	r3
 80046ee:	3601      	adds	r6, #1
 80046f0:	e7ee      	b.n	80046d0 <__libc_init_array+0xc>
 80046f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046f6:	4798      	blx	r3
 80046f8:	3601      	adds	r6, #1
 80046fa:	e7f2      	b.n	80046e2 <__libc_init_array+0x1e>
 80046fc:	08004868 	.word	0x08004868
 8004700:	08004868 	.word	0x08004868
 8004704:	08004868 	.word	0x08004868
 8004708:	0800486c 	.word	0x0800486c

0800470c <memcpy>:
 800470c:	440a      	add	r2, r1
 800470e:	4291      	cmp	r1, r2
 8004710:	f100 33ff 	add.w	r3, r0, #4294967295
 8004714:	d100      	bne.n	8004718 <memcpy+0xc>
 8004716:	4770      	bx	lr
 8004718:	b510      	push	{r4, lr}
 800471a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800471e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004722:	4291      	cmp	r1, r2
 8004724:	d1f9      	bne.n	800471a <memcpy+0xe>
 8004726:	bd10      	pop	{r4, pc}

08004728 <_init>:
 8004728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472a:	bf00      	nop
 800472c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800472e:	bc08      	pop	{r3}
 8004730:	469e      	mov	lr, r3
 8004732:	4770      	bx	lr

08004734 <_fini>:
 8004734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004736:	bf00      	nop
 8004738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473a:	bc08      	pop	{r3}
 800473c:	469e      	mov	lr, r3
 800473e:	4770      	bx	lr
