
STM32_HAL_EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b88  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007d10  08007d10  00017d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d2c  08007d2c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007d2c  08007d2c  00017d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d34  08007d34  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d34  08007d34  00017d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d38  08007d38  00017d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007d3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000808  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000898  20000898  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015b78  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003719  00000000  00000000  00035c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001118  00000000  00000000  00039358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fa8  00000000  00000000  0003a470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023681  00000000  00000000  0003b418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017247  00000000  00000000  0005ea99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb51b  00000000  00000000  00075ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001411fb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048dc  00000000  00000000  0014124c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007cf8 	.word	0x08007cf8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007cf8 	.word	0x08007cf8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fc22 	bl	8000d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f822 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f91e 	bl	8000718 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f888 	bl	80005f0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8b4 	bl	800064c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f8e2 	bl	80006ac <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e8:	f006 ffbe 	bl	8007468 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004ec:	f006 ffe2 	bl	80074b4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,1);
 80004f0:	2201      	movs	r2, #1
 80004f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f6:	4808      	ldr	r0, [pc, #32]	; (8000518 <main+0x4c>)
 80004f8:	f000 ff6a 	bl	80013d0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80004fc:	2064      	movs	r0, #100	; 0x64
 80004fe:	f000 fc7d 	bl	8000dfc <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,0);
 8000502:	2200      	movs	r2, #0
 8000504:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000508:	4803      	ldr	r0, [pc, #12]	; (8000518 <main+0x4c>)
 800050a:	f000 ff61 	bl	80013d0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800050e:	2064      	movs	r0, #100	; 0x64
 8000510:	f000 fc74 	bl	8000dfc <HAL_Delay>
    MX_USB_HOST_Process();
 8000514:	e7ea      	b.n	80004ec <main+0x20>
 8000516:	bf00      	nop
 8000518:	40020c00 	.word	0x40020c00

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f007 fade 	bl	8007aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a27      	ldr	r2, [pc, #156]	; (80005e8 <SystemClock_Config+0xcc>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <SystemClock_Config+0xd0>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000578:	2301      	movs	r3, #1
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800058c:	2308      	movs	r3, #8
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000590:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000594:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059a:	2307      	movs	r3, #7
 800059c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 f940 	bl	8003828 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ae:	f000 f9b9 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2302      	movs	r3, #2
 80005b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2105      	movs	r1, #5
 80005d0:	4618      	mov	r0, r3
 80005d2:	f003 fba1 	bl	8003d18 <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005dc:	f000 f9a2 	bl	8000924 <Error_Handler>
  }
}
 80005e0:	bf00      	nop
 80005e2:	3750      	adds	r7, #80	; 0x50
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_I2C1_Init+0x50>)
 80005f6:	4a13      	ldr	r2, [pc, #76]	; (8000644 <MX_I2C1_Init+0x54>)
 80005f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_I2C1_Init+0x50>)
 80005fc:	4a12      	ldr	r2, [pc, #72]	; (8000648 <MX_I2C1_Init+0x58>)
 80005fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_I2C1_Init+0x50>)
 800060e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000612:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_I2C1_Init+0x50>)
 800062e:	f002 fb17 	bl	8002c60 <HAL_I2C_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000638:	f000 f974 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200000ac 	.word	0x200000ac
 8000644:	40005400 	.word	0x40005400
 8000648:	000186a0 	.word	0x000186a0

0800064c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000652:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <MX_I2S3_Init+0x58>)
 8000654:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800065c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <MX_I2S3_Init+0x54>)
 800066c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000670:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000674:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <MX_I2S3_Init+0x5c>)
 8000676:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_I2S3_Init+0x54>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_I2S3_Init+0x54>)
 800068c:	f002 fc2c 	bl	8002ee8 <HAL_I2S_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000696:	f000 f945 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000100 	.word	0x20000100
 80006a4:	40003c00 	.word	0x40003c00
 80006a8:	00017700 	.word	0x00017700

080006ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_SPI1_Init+0x64>)
 80006b2:	4a18      	ldr	r2, [pc, #96]	; (8000714 <MX_SPI1_Init+0x68>)
 80006b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <MX_SPI1_Init+0x64>)
 80006b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_SPI1_Init+0x64>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_SPI1_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_SPI1_Init+0x64>)
 80006d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_SPI1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <MX_SPI1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_SPI1_Init+0x64>)
 80006f8:	220a      	movs	r2, #10
 80006fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_SPI1_Init+0x64>)
 80006fe:	f003 fe57 	bl	80043b0 <HAL_SPI_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000708:	f000 f90c 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000148 	.word	0x20000148
 8000714:	40013000 	.word	0x40013000

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08c      	sub	sp, #48	; 0x30
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
 8000732:	4b76      	ldr	r3, [pc, #472]	; (800090c <MX_GPIO_Init+0x1f4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a75      	ldr	r2, [pc, #468]	; (800090c <MX_GPIO_Init+0x1f4>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b73      	ldr	r3, [pc, #460]	; (800090c <MX_GPIO_Init+0x1f4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	4b6f      	ldr	r3, [pc, #444]	; (800090c <MX_GPIO_Init+0x1f4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a6e      	ldr	r2, [pc, #440]	; (800090c <MX_GPIO_Init+0x1f4>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b6c      	ldr	r3, [pc, #432]	; (800090c <MX_GPIO_Init+0x1f4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	4b68      	ldr	r3, [pc, #416]	; (800090c <MX_GPIO_Init+0x1f4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a67      	ldr	r2, [pc, #412]	; (800090c <MX_GPIO_Init+0x1f4>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b65      	ldr	r3, [pc, #404]	; (800090c <MX_GPIO_Init+0x1f4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4b61      	ldr	r3, [pc, #388]	; (800090c <MX_GPIO_Init+0x1f4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a60      	ldr	r2, [pc, #384]	; (800090c <MX_GPIO_Init+0x1f4>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b5e      	ldr	r3, [pc, #376]	; (800090c <MX_GPIO_Init+0x1f4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b5a      	ldr	r3, [pc, #360]	; (800090c <MX_GPIO_Init+0x1f4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a59      	ldr	r2, [pc, #356]	; (800090c <MX_GPIO_Init+0x1f4>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b57      	ldr	r3, [pc, #348]	; (800090c <MX_GPIO_Init+0x1f4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b53      	ldr	r3, [pc, #332]	; (800090c <MX_GPIO_Init+0x1f4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a52      	ldr	r2, [pc, #328]	; (800090c <MX_GPIO_Init+0x1f4>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b50      	ldr	r3, [pc, #320]	; (800090c <MX_GPIO_Init+0x1f4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2108      	movs	r1, #8
 80007da:	484d      	ldr	r0, [pc, #308]	; (8000910 <MX_GPIO_Init+0x1f8>)
 80007dc:	f000 fdf8 	bl	80013d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2101      	movs	r1, #1
 80007e4:	484b      	ldr	r0, [pc, #300]	; (8000914 <MX_GPIO_Init+0x1fc>)
 80007e6:	f000 fdf3 	bl	80013d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ea:	2200      	movs	r2, #0
 80007ec:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007f0:	4849      	ldr	r0, [pc, #292]	; (8000918 <MX_GPIO_Init+0x200>)
 80007f2:	f000 fded 	bl	80013d0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007f6:	2308      	movs	r3, #8
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4840      	ldr	r0, [pc, #256]	; (8000910 <MX_GPIO_Init+0x1f8>)
 800080e:	f000 fc2b 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	483a      	ldr	r0, [pc, #232]	; (8000914 <MX_GPIO_Init+0x1fc>)
 800082a:	f000 fc1d 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800082e:	2308      	movs	r3, #8
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800083e:	2305      	movs	r3, #5
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	4832      	ldr	r0, [pc, #200]	; (8000914 <MX_GPIO_Init+0x1fc>)
 800084a:	f000 fc0d 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800084e:	2301      	movs	r3, #1
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000852:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000858:	2302      	movs	r3, #2
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	482e      	ldr	r0, [pc, #184]	; (800091c <MX_GPIO_Init+0x204>)
 8000864:	f000 fc00 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000868:	2304      	movs	r3, #4
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	4829      	ldr	r0, [pc, #164]	; (8000920 <MX_GPIO_Init+0x208>)
 800087c:	f000 fbf4 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000892:	2305      	movs	r3, #5
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4820      	ldr	r0, [pc, #128]	; (8000920 <MX_GPIO_Init+0x208>)
 800089e:	f000 fbe3 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008a2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008a6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4817      	ldr	r0, [pc, #92]	; (8000918 <MX_GPIO_Init+0x200>)
 80008bc:	f000 fbd4 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008c0:	2320      	movs	r3, #32
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4811      	ldr	r0, [pc, #68]	; (8000918 <MX_GPIO_Init+0x200>)
 80008d4:	f000 fbc8 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008d8:	2302      	movs	r3, #2
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008dc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4808      	ldr	r0, [pc, #32]	; (8000910 <MX_GPIO_Init+0x1f8>)
 80008ee:	f000 fbbb 	bl	8001068 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2100      	movs	r1, #0
 80008f6:	2006      	movs	r0, #6
 80008f8:	f000 fb7f 	bl	8000ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008fc:	2006      	movs	r0, #6
 80008fe:	f000 fb98 	bl	8001032 <HAL_NVIC_EnableIRQ>

}
 8000902:	bf00      	nop
 8000904:	3730      	adds	r7, #48	; 0x30
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800
 8000910:	40021000 	.word	0x40021000
 8000914:	40020800 	.word	0x40020800
 8000918:	40020c00 	.word	0x40020c00
 800091c:	40020000 	.word	0x40020000
 8000920:	40020400 	.word	0x40020400

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	e7fe      	b.n	800092c <Error_Handler+0x8>
	...

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	4a0f      	ldr	r2, [pc, #60]	; (800097c <HAL_MspInit+0x4c>)
 8000940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000944:	6453      	str	r3, [r2, #68]	; 0x44
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <HAL_MspInit+0x4c>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	4a08      	ldr	r2, [pc, #32]	; (800097c <HAL_MspInit+0x4c>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_MspInit+0x4c>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800096e:	2007      	movs	r0, #7
 8000970:	f000 fb38 	bl	8000fe4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800

08000980 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a19      	ldr	r2, [pc, #100]	; (8000a04 <HAL_I2C_MspInit+0x84>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d12c      	bne.n	80009fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <HAL_I2C_MspInit+0x88>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <HAL_I2C_MspInit+0x88>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <HAL_I2C_MspInit+0x88>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009be:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c4:	2312      	movs	r3, #18
 80009c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009d0:	2304      	movs	r3, #4
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4619      	mov	r1, r3
 80009da:	480c      	ldr	r0, [pc, #48]	; (8000a0c <HAL_I2C_MspInit+0x8c>)
 80009dc:	f000 fb44 	bl	8001068 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_I2C_MspInit+0x88>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <HAL_I2C_MspInit+0x88>)
 80009ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ee:	6413      	str	r3, [r2, #64]	; 0x40
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <HAL_I2C_MspInit+0x88>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009fc:	bf00      	nop
 80009fe:	3728      	adds	r7, #40	; 0x28
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40005400 	.word	0x40005400
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020400 	.word	0x40020400

08000a10 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08e      	sub	sp, #56	; 0x38
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a31      	ldr	r2, [pc, #196]	; (8000b00 <HAL_I2S_MspInit+0xf0>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d15a      	bne.n	8000af6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a40:	2301      	movs	r3, #1
 8000a42:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a44:	23c0      	movs	r3, #192	; 0xc0
 8000a46:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4618      	mov	r0, r3
 8000a52:	f003 fb6d 	bl	8004130 <HAL_RCCEx_PeriphCLKConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a5c:	f7ff ff62 	bl	8000924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <HAL_I2S_MspInit+0xf4>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	4a26      	ldr	r2, [pc, #152]	; (8000b04 <HAL_I2S_MspInit+0xf4>)
 8000a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a70:	4b24      	ldr	r3, [pc, #144]	; (8000b04 <HAL_I2S_MspInit+0xf4>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <HAL_I2S_MspInit+0xf4>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	4a1f      	ldr	r2, [pc, #124]	; (8000b04 <HAL_I2S_MspInit+0xf4>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <HAL_I2S_MspInit+0xf4>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <HAL_I2S_MspInit+0xf4>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	4a18      	ldr	r2, [pc, #96]	; (8000b04 <HAL_I2S_MspInit+0xf4>)
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <HAL_I2S_MspInit+0xf4>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ab4:	2310      	movs	r3, #16
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ac4:	2306      	movs	r3, #6
 8000ac6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000acc:	4619      	mov	r1, r3
 8000ace:	480e      	ldr	r0, [pc, #56]	; (8000b08 <HAL_I2S_MspInit+0xf8>)
 8000ad0:	f000 faca 	bl	8001068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ad4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ae6:	2306      	movs	r3, #6
 8000ae8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	4619      	mov	r1, r3
 8000af0:	4806      	ldr	r0, [pc, #24]	; (8000b0c <HAL_I2S_MspInit+0xfc>)
 8000af2:	f000 fab9 	bl	8001068 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000af6:	bf00      	nop
 8000af8:	3738      	adds	r7, #56	; 0x38
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40003c00 	.word	0x40003c00
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40020800 	.word	0x40020800

08000b10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a19      	ldr	r2, [pc, #100]	; (8000b94 <HAL_SPI_MspInit+0x84>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d12b      	bne.n	8000b8a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b40:	6453      	str	r3, [r2, #68]	; 0x44
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_SPI_MspInit+0x88>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b6a:	23e0      	movs	r3, #224	; 0xe0
 8000b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b7a:	2305      	movs	r3, #5
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	4805      	ldr	r0, [pc, #20]	; (8000b9c <HAL_SPI_MspInit+0x8c>)
 8000b86:	f000 fa6f 	bl	8001068 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b8a:	bf00      	nop
 8000b8c:	3728      	adds	r7, #40	; 0x28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40013000 	.word	0x40013000
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020000 	.word	0x40020000

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler+0x4>

08000bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <MemManage_Handler+0x4>

08000bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <BusFault_Handler+0x4>

08000bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <UsageFault_Handler+0x4>

08000bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bec:	f000 f8e6 	bl	8000dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0));
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	4807      	ldr	r0, [pc, #28]	; (8000c18 <EXTI0_IRQHandler+0x24>)
 8000bfc:	f000 fbd0 	bl	80013a0 <HAL_GPIO_ReadPin>
 8000c00:	4603      	mov	r3, r0
 8000c02:	461a      	mov	r2, r3
 8000c04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c08:	4804      	ldr	r0, [pc, #16]	; (8000c1c <EXTI0_IRQHandler+0x28>)
 8000c0a:	f000 fbe1 	bl	80013d0 <HAL_GPIO_WritePin>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f000 fbf8 	bl	8001404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40020000 	.word	0x40020000
 8000c1c:	40020c00 	.word	0x40020c00

08000c20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <OTG_FS_IRQHandler+0x10>)
 8000c26:	f000 fe7b 	bl	8001920 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000584 	.word	0x20000584

08000c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c3c:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <_sbrk+0x5c>)
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <_sbrk+0x60>)
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c48:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d102      	bne.n	8000c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <_sbrk+0x64>)
 8000c52:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <_sbrk+0x68>)
 8000c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <_sbrk+0x64>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d207      	bcs.n	8000c74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c64:	f006 ff08 	bl	8007a78 <__errno>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c72:	e009      	b.n	8000c88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <_sbrk+0x64>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c7a:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <_sbrk+0x64>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <_sbrk+0x64>)
 8000c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c86:	68fb      	ldr	r3, [r7, #12]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20020000 	.word	0x20020000
 8000c94:	00000400 	.word	0x00000400
 8000c98:	200001a0 	.word	0x200001a0
 8000c9c:	20000898 	.word	0x20000898

08000ca0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <SystemInit+0x20>)
 8000ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <SystemInit+0x20>)
 8000cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc8:	480d      	ldr	r0, [pc, #52]	; (8000d00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cca:	490e      	ldr	r1, [pc, #56]	; (8000d04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ccc:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ce0:	4c0b      	ldr	r4, [pc, #44]	; (8000d10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cee:	f7ff ffd7 	bl	8000ca0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f006 fec7 	bl	8007a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf6:	f7ff fbe9 	bl	80004cc <main>
  bx  lr    
 8000cfa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000d08:	08007d3c 	.word	0x08007d3c
  ldr r2, =_sbss
 8000d0c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000d10:	20000898 	.word	0x20000898

08000d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC_IRQHandler>
	...

08000d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <HAL_Init+0x40>)
 8000d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_Init+0x40>)
 8000d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <HAL_Init+0x40>)
 8000d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d40:	2003      	movs	r0, #3
 8000d42:	f000 f94f 	bl	8000fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f000 f808 	bl	8000d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d4c:	f7ff fdf0 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023c00 	.word	0x40023c00

08000d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x54>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_InitTick+0x58>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f967 	bl	800104e <HAL_SYSTICK_Config>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00e      	b.n	8000da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b0f      	cmp	r3, #15
 8000d8e:	d80a      	bhi.n	8000da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d90:	2200      	movs	r2, #0
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f000 f92f 	bl	8000ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d9c:	4a06      	ldr	r2, [pc, #24]	; (8000db8 <HAL_InitTick+0x5c>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e000      	b.n	8000da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000000 	.word	0x20000000
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000004 	.word	0x20000004

08000dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x20>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x24>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <HAL_IncTick+0x24>)
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	200001a4 	.word	0x200001a4

08000de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <HAL_GetTick+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	200001a4 	.word	0x200001a4

08000dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff ffee 	bl	8000de4 <HAL_GetTick>
 8000e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e14:	d005      	beq.n	8000e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_Delay+0x44>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4413      	add	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e22:	bf00      	nop
 8000e24:	f7ff ffde 	bl	8000de4 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d8f7      	bhi.n	8000e24 <HAL_Delay+0x28>
  {
  }
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008

08000e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e60:	4013      	ands	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e76:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	60d3      	str	r3, [r2, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	f003 0307 	and.w	r3, r3, #7
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	db0b      	blt.n	8000ed2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	f003 021f 	and.w	r2, r3, #31
 8000ec0:	4907      	ldr	r1, [pc, #28]	; (8000ee0 <__NVIC_EnableIRQ+0x38>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	095b      	lsrs	r3, r3, #5
 8000ec8:	2001      	movs	r0, #1
 8000eca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000e100 	.word	0xe000e100

08000ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	db0a      	blt.n	8000f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	490c      	ldr	r1, [pc, #48]	; (8000f30 <__NVIC_SetPriority+0x4c>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	0112      	lsls	r2, r2, #4
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	440b      	add	r3, r1
 8000f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f0c:	e00a      	b.n	8000f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4908      	ldr	r1, [pc, #32]	; (8000f34 <__NVIC_SetPriority+0x50>)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	3b04      	subs	r3, #4
 8000f1c:	0112      	lsls	r2, r2, #4
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	440b      	add	r3, r1
 8000f22:	761a      	strb	r2, [r3, #24]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000e100 	.word	0xe000e100
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f1c3 0307 	rsb	r3, r3, #7
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	bf28      	it	cs
 8000f56:	2304      	movcs	r3, #4
 8000f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	2b06      	cmp	r3, #6
 8000f60:	d902      	bls.n	8000f68 <NVIC_EncodePriority+0x30>
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3b03      	subs	r3, #3
 8000f66:	e000      	b.n	8000f6a <NVIC_EncodePriority+0x32>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43da      	mvns	r2, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f80:	f04f 31ff 	mov.w	r1, #4294967295
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	43d9      	mvns	r1, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	4313      	orrs	r3, r2
         );
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3724      	adds	r7, #36	; 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb0:	d301      	bcc.n	8000fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00f      	b.n	8000fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <SysTick_Config+0x40>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fbe:	210f      	movs	r1, #15
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f7ff ff8e 	bl	8000ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <SysTick_Config+0x40>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <SysTick_Config+0x40>)
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	e000e010 	.word	0xe000e010

08000fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ff29 	bl	8000e44 <__NVIC_SetPriorityGrouping>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800100c:	f7ff ff3e 	bl	8000e8c <__NVIC_GetPriorityGrouping>
 8001010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	68b9      	ldr	r1, [r7, #8]
 8001016:	6978      	ldr	r0, [r7, #20]
 8001018:	f7ff ff8e 	bl	8000f38 <NVIC_EncodePriority>
 800101c:	4602      	mov	r2, r0
 800101e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff5d 	bl	8000ee4 <__NVIC_SetPriority>
}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff31 	bl	8000ea8 <__NVIC_EnableIRQ>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ffa2 	bl	8000fa0 <SysTick_Config>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
 8001082:	e16b      	b.n	800135c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001084:	2201      	movs	r2, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	429a      	cmp	r2, r3
 800109e:	f040 815a 	bne.w	8001356 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d005      	beq.n	80010ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d130      	bne.n	800111c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	2203      	movs	r2, #3
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f0:	2201      	movs	r2, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	091b      	lsrs	r3, r3, #4
 8001106:	f003 0201 	and.w	r2, r3, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	2b03      	cmp	r3, #3
 8001126:	d017      	beq.n	8001158 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d123      	bne.n	80011ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	08da      	lsrs	r2, r3, #3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3208      	adds	r2, #8
 800116c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	f003 0307 	and.w	r3, r3, #7
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	220f      	movs	r2, #15
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	691a      	ldr	r2, [r3, #16]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	08da      	lsrs	r2, r3, #3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3208      	adds	r2, #8
 80011a6:	69b9      	ldr	r1, [r7, #24]
 80011a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0203 	and.w	r2, r3, #3
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f000 80b4 	beq.w	8001356 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b60      	ldr	r3, [pc, #384]	; (8001374 <HAL_GPIO_Init+0x30c>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	4a5f      	ldr	r2, [pc, #380]	; (8001374 <HAL_GPIO_Init+0x30c>)
 80011f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fc:	6453      	str	r3, [r2, #68]	; 0x44
 80011fe:	4b5d      	ldr	r3, [pc, #372]	; (8001374 <HAL_GPIO_Init+0x30c>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800120a:	4a5b      	ldr	r2, [pc, #364]	; (8001378 <HAL_GPIO_Init+0x310>)
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	3302      	adds	r3, #2
 8001212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	220f      	movs	r2, #15
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a52      	ldr	r2, [pc, #328]	; (800137c <HAL_GPIO_Init+0x314>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d02b      	beq.n	800128e <HAL_GPIO_Init+0x226>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a51      	ldr	r2, [pc, #324]	; (8001380 <HAL_GPIO_Init+0x318>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d025      	beq.n	800128a <HAL_GPIO_Init+0x222>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a50      	ldr	r2, [pc, #320]	; (8001384 <HAL_GPIO_Init+0x31c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d01f      	beq.n	8001286 <HAL_GPIO_Init+0x21e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4f      	ldr	r2, [pc, #316]	; (8001388 <HAL_GPIO_Init+0x320>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d019      	beq.n	8001282 <HAL_GPIO_Init+0x21a>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4e      	ldr	r2, [pc, #312]	; (800138c <HAL_GPIO_Init+0x324>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d013      	beq.n	800127e <HAL_GPIO_Init+0x216>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4d      	ldr	r2, [pc, #308]	; (8001390 <HAL_GPIO_Init+0x328>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d00d      	beq.n	800127a <HAL_GPIO_Init+0x212>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4c      	ldr	r2, [pc, #304]	; (8001394 <HAL_GPIO_Init+0x32c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d007      	beq.n	8001276 <HAL_GPIO_Init+0x20e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4b      	ldr	r2, [pc, #300]	; (8001398 <HAL_GPIO_Init+0x330>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d101      	bne.n	8001272 <HAL_GPIO_Init+0x20a>
 800126e:	2307      	movs	r3, #7
 8001270:	e00e      	b.n	8001290 <HAL_GPIO_Init+0x228>
 8001272:	2308      	movs	r3, #8
 8001274:	e00c      	b.n	8001290 <HAL_GPIO_Init+0x228>
 8001276:	2306      	movs	r3, #6
 8001278:	e00a      	b.n	8001290 <HAL_GPIO_Init+0x228>
 800127a:	2305      	movs	r3, #5
 800127c:	e008      	b.n	8001290 <HAL_GPIO_Init+0x228>
 800127e:	2304      	movs	r3, #4
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x228>
 8001282:	2303      	movs	r3, #3
 8001284:	e004      	b.n	8001290 <HAL_GPIO_Init+0x228>
 8001286:	2302      	movs	r3, #2
 8001288:	e002      	b.n	8001290 <HAL_GPIO_Init+0x228>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <HAL_GPIO_Init+0x228>
 800128e:	2300      	movs	r3, #0
 8001290:	69fa      	ldr	r2, [r7, #28]
 8001292:	f002 0203 	and.w	r2, r2, #3
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	4093      	lsls	r3, r2
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a0:	4935      	ldr	r1, [pc, #212]	; (8001378 <HAL_GPIO_Init+0x310>)
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	3302      	adds	r3, #2
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ae:	4b3b      	ldr	r3, [pc, #236]	; (800139c <HAL_GPIO_Init+0x334>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012d2:	4a32      	ldr	r2, [pc, #200]	; (800139c <HAL_GPIO_Init+0x334>)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d8:	4b30      	ldr	r3, [pc, #192]	; (800139c <HAL_GPIO_Init+0x334>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012fc:	4a27      	ldr	r2, [pc, #156]	; (800139c <HAL_GPIO_Init+0x334>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001302:	4b26      	ldr	r3, [pc, #152]	; (800139c <HAL_GPIO_Init+0x334>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001326:	4a1d      	ldr	r2, [pc, #116]	; (800139c <HAL_GPIO_Init+0x334>)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800132c:	4b1b      	ldr	r3, [pc, #108]	; (800139c <HAL_GPIO_Init+0x334>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001350:	4a12      	ldr	r2, [pc, #72]	; (800139c <HAL_GPIO_Init+0x334>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3301      	adds	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	2b0f      	cmp	r3, #15
 8001360:	f67f ae90 	bls.w	8001084 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	40013800 	.word	0x40013800
 800137c:	40020000 	.word	0x40020000
 8001380:	40020400 	.word	0x40020400
 8001384:	40020800 	.word	0x40020800
 8001388:	40020c00 	.word	0x40020c00
 800138c:	40021000 	.word	0x40021000
 8001390:	40021400 	.word	0x40021400
 8001394:	40021800 	.word	0x40021800
 8001398:	40021c00 	.word	0x40021c00
 800139c:	40013c00 	.word	0x40013c00

080013a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691a      	ldr	r2, [r3, #16]
 80013b0:	887b      	ldrh	r3, [r7, #2]
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013b8:	2301      	movs	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	e001      	b.n	80013c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
 80013dc:	4613      	mov	r3, r2
 80013de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e0:	787b      	ldrb	r3, [r7, #1]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e6:	887a      	ldrh	r2, [r7, #2]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013ec:	e003      	b.n	80013f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ee:	887b      	ldrh	r3, [r7, #2]
 80013f0:	041a      	lsls	r2, r3, #16
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	619a      	str	r2, [r3, #24]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001410:	695a      	ldr	r2, [r3, #20]
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	4013      	ands	r3, r2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d006      	beq.n	8001428 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800141a:	4a05      	ldr	r2, [pc, #20]	; (8001430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f806 	bl	8001434 <HAL_GPIO_EXTI_Callback>
  }
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40013c00 	.word	0x40013c00

08001434 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800144a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144c:	b08f      	sub	sp, #60	; 0x3c
 800144e:	af0a      	add	r7, sp, #40	; 0x28
 8001450:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e054      	b.n	8001506 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d106      	bne.n	800147c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f006 f854 	bl	8007524 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2203      	movs	r2, #3
 8001480:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f003 f883 	bl	80045a6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	687e      	ldr	r6, [r7, #4]
 80014a8:	466d      	mov	r5, sp
 80014aa:	f106 0410 	add.w	r4, r6, #16
 80014ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80014be:	1d33      	adds	r3, r6, #4
 80014c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c2:	6838      	ldr	r0, [r7, #0]
 80014c4:	f002 fffd 	bl	80044c2 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2101      	movs	r1, #1
 80014ce:	4618      	mov	r0, r3
 80014d0:	f003 f87a 	bl	80045c8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	687e      	ldr	r6, [r7, #4]
 80014dc:	466d      	mov	r5, sp
 80014de:	f106 0410 	add.w	r4, r6, #16
 80014e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80014f2:	1d33      	adds	r3, r6, #4
 80014f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f6:	6838      	ldr	r0, [r7, #0]
 80014f8:	f003 fa02 	bl	8004900 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800150e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800150e:	b590      	push	{r4, r7, lr}
 8001510:	b089      	sub	sp, #36	; 0x24
 8001512:	af04      	add	r7, sp, #16
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	4608      	mov	r0, r1
 8001518:	4611      	mov	r1, r2
 800151a:	461a      	mov	r2, r3
 800151c:	4603      	mov	r3, r0
 800151e:	70fb      	strb	r3, [r7, #3]
 8001520:	460b      	mov	r3, r1
 8001522:	70bb      	strb	r3, [r7, #2]
 8001524:	4613      	mov	r3, r2
 8001526:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800152e:	2b01      	cmp	r3, #1
 8001530:	d101      	bne.n	8001536 <HAL_HCD_HC_Init+0x28>
 8001532:	2302      	movs	r3, #2
 8001534:	e076      	b.n	8001624 <HAL_HCD_HC_Init+0x116>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800153e:	78fb      	ldrb	r3, [r7, #3]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	212c      	movs	r1, #44	; 0x2c
 8001544:	fb01 f303 	mul.w	r3, r1, r3
 8001548:	4413      	add	r3, r2
 800154a:	333d      	adds	r3, #61	; 0x3d
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001550:	78fb      	ldrb	r3, [r7, #3]
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	212c      	movs	r1, #44	; 0x2c
 8001556:	fb01 f303 	mul.w	r3, r1, r3
 800155a:	4413      	add	r3, r2
 800155c:	3338      	adds	r3, #56	; 0x38
 800155e:	787a      	ldrb	r2, [r7, #1]
 8001560:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	212c      	movs	r1, #44	; 0x2c
 8001568:	fb01 f303 	mul.w	r3, r1, r3
 800156c:	4413      	add	r3, r2
 800156e:	3340      	adds	r3, #64	; 0x40
 8001570:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001572:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	212c      	movs	r1, #44	; 0x2c
 800157a:	fb01 f303 	mul.w	r3, r1, r3
 800157e:	4413      	add	r3, r2
 8001580:	3339      	adds	r3, #57	; 0x39
 8001582:	78fa      	ldrb	r2, [r7, #3]
 8001584:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001586:	78fb      	ldrb	r3, [r7, #3]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	212c      	movs	r1, #44	; 0x2c
 800158c:	fb01 f303 	mul.w	r3, r1, r3
 8001590:	4413      	add	r3, r2
 8001592:	333f      	adds	r3, #63	; 0x3f
 8001594:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001598:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	78ba      	ldrb	r2, [r7, #2]
 800159e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015a2:	b2d0      	uxtb	r0, r2
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	212c      	movs	r1, #44	; 0x2c
 80015a8:	fb01 f303 	mul.w	r3, r1, r3
 80015ac:	4413      	add	r3, r2
 80015ae:	333a      	adds	r3, #58	; 0x3a
 80015b0:	4602      	mov	r2, r0
 80015b2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80015b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	da09      	bge.n	80015d0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	212c      	movs	r1, #44	; 0x2c
 80015c2:	fb01 f303 	mul.w	r3, r1, r3
 80015c6:	4413      	add	r3, r2
 80015c8:	333b      	adds	r3, #59	; 0x3b
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]
 80015ce:	e008      	b.n	80015e2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80015d0:	78fb      	ldrb	r3, [r7, #3]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	212c      	movs	r1, #44	; 0x2c
 80015d6:	fb01 f303 	mul.w	r3, r1, r3
 80015da:	4413      	add	r3, r2
 80015dc:	333b      	adds	r3, #59	; 0x3b
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80015e2:	78fb      	ldrb	r3, [r7, #3]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	212c      	movs	r1, #44	; 0x2c
 80015e8:	fb01 f303 	mul.w	r3, r1, r3
 80015ec:	4413      	add	r3, r2
 80015ee:	333c      	adds	r3, #60	; 0x3c
 80015f0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015f4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6818      	ldr	r0, [r3, #0]
 80015fa:	787c      	ldrb	r4, [r7, #1]
 80015fc:	78ba      	ldrb	r2, [r7, #2]
 80015fe:	78f9      	ldrb	r1, [r7, #3]
 8001600:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001602:	9302      	str	r3, [sp, #8]
 8001604:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001608:	9301      	str	r3, [sp, #4]
 800160a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	4623      	mov	r3, r4
 8001612:	f003 fafb 	bl	8004c0c <USB_HC_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	bd90      	pop	{r4, r7, pc}

0800162c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001642:	2b01      	cmp	r3, #1
 8001644:	d101      	bne.n	800164a <HAL_HCD_HC_Halt+0x1e>
 8001646:	2302      	movs	r3, #2
 8001648:	e00f      	b.n	800166a <HAL_HCD_HC_Halt+0x3e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	78fa      	ldrb	r2, [r7, #3]
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f003 fd4b 	bl	80050f6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001668:	7bfb      	ldrb	r3, [r7, #15]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	4608      	mov	r0, r1
 800167e:	4611      	mov	r1, r2
 8001680:	461a      	mov	r2, r3
 8001682:	4603      	mov	r3, r0
 8001684:	70fb      	strb	r3, [r7, #3]
 8001686:	460b      	mov	r3, r1
 8001688:	70bb      	strb	r3, [r7, #2]
 800168a:	4613      	mov	r3, r2
 800168c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800168e:	78fb      	ldrb	r3, [r7, #3]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	212c      	movs	r1, #44	; 0x2c
 8001694:	fb01 f303 	mul.w	r3, r1, r3
 8001698:	4413      	add	r3, r2
 800169a:	333b      	adds	r3, #59	; 0x3b
 800169c:	78ba      	ldrb	r2, [r7, #2]
 800169e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	212c      	movs	r1, #44	; 0x2c
 80016a6:	fb01 f303 	mul.w	r3, r1, r3
 80016aa:	4413      	add	r3, r2
 80016ac:	333f      	adds	r3, #63	; 0x3f
 80016ae:	787a      	ldrb	r2, [r7, #1]
 80016b0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80016b2:	7c3b      	ldrb	r3, [r7, #16]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d112      	bne.n	80016de <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	212c      	movs	r1, #44	; 0x2c
 80016be:	fb01 f303 	mul.w	r3, r1, r3
 80016c2:	4413      	add	r3, r2
 80016c4:	3342      	adds	r3, #66	; 0x42
 80016c6:	2203      	movs	r2, #3
 80016c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80016ca:	78fb      	ldrb	r3, [r7, #3]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	212c      	movs	r1, #44	; 0x2c
 80016d0:	fb01 f303 	mul.w	r3, r1, r3
 80016d4:	4413      	add	r3, r2
 80016d6:	333d      	adds	r3, #61	; 0x3d
 80016d8:	7f3a      	ldrb	r2, [r7, #28]
 80016da:	701a      	strb	r2, [r3, #0]
 80016dc:	e008      	b.n	80016f0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016de:	78fb      	ldrb	r3, [r7, #3]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	212c      	movs	r1, #44	; 0x2c
 80016e4:	fb01 f303 	mul.w	r3, r1, r3
 80016e8:	4413      	add	r3, r2
 80016ea:	3342      	adds	r3, #66	; 0x42
 80016ec:	2202      	movs	r2, #2
 80016ee:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80016f0:	787b      	ldrb	r3, [r7, #1]
 80016f2:	2b03      	cmp	r3, #3
 80016f4:	f200 80c6 	bhi.w	8001884 <HAL_HCD_HC_SubmitRequest+0x210>
 80016f8:	a201      	add	r2, pc, #4	; (adr r2, 8001700 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80016fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fe:	bf00      	nop
 8001700:	08001711 	.word	0x08001711
 8001704:	08001871 	.word	0x08001871
 8001708:	08001775 	.word	0x08001775
 800170c:	080017f3 	.word	0x080017f3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001710:	7c3b      	ldrb	r3, [r7, #16]
 8001712:	2b01      	cmp	r3, #1
 8001714:	f040 80b8 	bne.w	8001888 <HAL_HCD_HC_SubmitRequest+0x214>
 8001718:	78bb      	ldrb	r3, [r7, #2]
 800171a:	2b00      	cmp	r3, #0
 800171c:	f040 80b4 	bne.w	8001888 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001720:	8b3b      	ldrh	r3, [r7, #24]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d108      	bne.n	8001738 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001726:	78fb      	ldrb	r3, [r7, #3]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	212c      	movs	r1, #44	; 0x2c
 800172c:	fb01 f303 	mul.w	r3, r1, r3
 8001730:	4413      	add	r3, r2
 8001732:	3355      	adds	r3, #85	; 0x55
 8001734:	2201      	movs	r2, #1
 8001736:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001738:	78fb      	ldrb	r3, [r7, #3]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	212c      	movs	r1, #44	; 0x2c
 800173e:	fb01 f303 	mul.w	r3, r1, r3
 8001742:	4413      	add	r3, r2
 8001744:	3355      	adds	r3, #85	; 0x55
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d109      	bne.n	8001760 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	212c      	movs	r1, #44	; 0x2c
 8001752:	fb01 f303 	mul.w	r3, r1, r3
 8001756:	4413      	add	r3, r2
 8001758:	3342      	adds	r3, #66	; 0x42
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800175e:	e093      	b.n	8001888 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	212c      	movs	r1, #44	; 0x2c
 8001766:	fb01 f303 	mul.w	r3, r1, r3
 800176a:	4413      	add	r3, r2
 800176c:	3342      	adds	r3, #66	; 0x42
 800176e:	2202      	movs	r2, #2
 8001770:	701a      	strb	r2, [r3, #0]
      break;
 8001772:	e089      	b.n	8001888 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001774:	78bb      	ldrb	r3, [r7, #2]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d11d      	bne.n	80017b6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800177a:	78fb      	ldrb	r3, [r7, #3]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	212c      	movs	r1, #44	; 0x2c
 8001780:	fb01 f303 	mul.w	r3, r1, r3
 8001784:	4413      	add	r3, r2
 8001786:	3355      	adds	r3, #85	; 0x55
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d109      	bne.n	80017a2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800178e:	78fb      	ldrb	r3, [r7, #3]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	212c      	movs	r1, #44	; 0x2c
 8001794:	fb01 f303 	mul.w	r3, r1, r3
 8001798:	4413      	add	r3, r2
 800179a:	3342      	adds	r3, #66	; 0x42
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80017a0:	e073      	b.n	800188a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017a2:	78fb      	ldrb	r3, [r7, #3]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	212c      	movs	r1, #44	; 0x2c
 80017a8:	fb01 f303 	mul.w	r3, r1, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	3342      	adds	r3, #66	; 0x42
 80017b0:	2202      	movs	r2, #2
 80017b2:	701a      	strb	r2, [r3, #0]
      break;
 80017b4:	e069      	b.n	800188a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	212c      	movs	r1, #44	; 0x2c
 80017bc:	fb01 f303 	mul.w	r3, r1, r3
 80017c0:	4413      	add	r3, r2
 80017c2:	3354      	adds	r3, #84	; 0x54
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d109      	bne.n	80017de <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	212c      	movs	r1, #44	; 0x2c
 80017d0:	fb01 f303 	mul.w	r3, r1, r3
 80017d4:	4413      	add	r3, r2
 80017d6:	3342      	adds	r3, #66	; 0x42
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
      break;
 80017dc:	e055      	b.n	800188a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	212c      	movs	r1, #44	; 0x2c
 80017e4:	fb01 f303 	mul.w	r3, r1, r3
 80017e8:	4413      	add	r3, r2
 80017ea:	3342      	adds	r3, #66	; 0x42
 80017ec:	2202      	movs	r2, #2
 80017ee:	701a      	strb	r2, [r3, #0]
      break;
 80017f0:	e04b      	b.n	800188a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80017f2:	78bb      	ldrb	r3, [r7, #2]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d11d      	bne.n	8001834 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	212c      	movs	r1, #44	; 0x2c
 80017fe:	fb01 f303 	mul.w	r3, r1, r3
 8001802:	4413      	add	r3, r2
 8001804:	3355      	adds	r3, #85	; 0x55
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d109      	bne.n	8001820 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800180c:	78fb      	ldrb	r3, [r7, #3]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	212c      	movs	r1, #44	; 0x2c
 8001812:	fb01 f303 	mul.w	r3, r1, r3
 8001816:	4413      	add	r3, r2
 8001818:	3342      	adds	r3, #66	; 0x42
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800181e:	e034      	b.n	800188a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001820:	78fb      	ldrb	r3, [r7, #3]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	212c      	movs	r1, #44	; 0x2c
 8001826:	fb01 f303 	mul.w	r3, r1, r3
 800182a:	4413      	add	r3, r2
 800182c:	3342      	adds	r3, #66	; 0x42
 800182e:	2202      	movs	r2, #2
 8001830:	701a      	strb	r2, [r3, #0]
      break;
 8001832:	e02a      	b.n	800188a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001834:	78fb      	ldrb	r3, [r7, #3]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	212c      	movs	r1, #44	; 0x2c
 800183a:	fb01 f303 	mul.w	r3, r1, r3
 800183e:	4413      	add	r3, r2
 8001840:	3354      	adds	r3, #84	; 0x54
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d109      	bne.n	800185c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001848:	78fb      	ldrb	r3, [r7, #3]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	212c      	movs	r1, #44	; 0x2c
 800184e:	fb01 f303 	mul.w	r3, r1, r3
 8001852:	4413      	add	r3, r2
 8001854:	3342      	adds	r3, #66	; 0x42
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
      break;
 800185a:	e016      	b.n	800188a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800185c:	78fb      	ldrb	r3, [r7, #3]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	212c      	movs	r1, #44	; 0x2c
 8001862:	fb01 f303 	mul.w	r3, r1, r3
 8001866:	4413      	add	r3, r2
 8001868:	3342      	adds	r3, #66	; 0x42
 800186a:	2202      	movs	r2, #2
 800186c:	701a      	strb	r2, [r3, #0]
      break;
 800186e:	e00c      	b.n	800188a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	212c      	movs	r1, #44	; 0x2c
 8001876:	fb01 f303 	mul.w	r3, r1, r3
 800187a:	4413      	add	r3, r2
 800187c:	3342      	adds	r3, #66	; 0x42
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
      break;
 8001882:	e002      	b.n	800188a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001884:	bf00      	nop
 8001886:	e000      	b.n	800188a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001888:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800188a:	78fb      	ldrb	r3, [r7, #3]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	212c      	movs	r1, #44	; 0x2c
 8001890:	fb01 f303 	mul.w	r3, r1, r3
 8001894:	4413      	add	r3, r2
 8001896:	3344      	adds	r3, #68	; 0x44
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	8b3a      	ldrh	r2, [r7, #24]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	202c      	movs	r0, #44	; 0x2c
 80018a4:	fb00 f303 	mul.w	r3, r0, r3
 80018a8:	440b      	add	r3, r1
 80018aa:	334c      	adds	r3, #76	; 0x4c
 80018ac:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	212c      	movs	r1, #44	; 0x2c
 80018b4:	fb01 f303 	mul.w	r3, r1, r3
 80018b8:	4413      	add	r3, r2
 80018ba:	3360      	adds	r3, #96	; 0x60
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	212c      	movs	r1, #44	; 0x2c
 80018c6:	fb01 f303 	mul.w	r3, r1, r3
 80018ca:	4413      	add	r3, r2
 80018cc:	3350      	adds	r3, #80	; 0x50
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	212c      	movs	r1, #44	; 0x2c
 80018d8:	fb01 f303 	mul.w	r3, r1, r3
 80018dc:	4413      	add	r3, r2
 80018de:	3339      	adds	r3, #57	; 0x39
 80018e0:	78fa      	ldrb	r2, [r7, #3]
 80018e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	212c      	movs	r1, #44	; 0x2c
 80018ea:	fb01 f303 	mul.w	r3, r1, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	3361      	adds	r3, #97	; 0x61
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	78fb      	ldrb	r3, [r7, #3]
 80018fc:	222c      	movs	r2, #44	; 0x2c
 80018fe:	fb02 f303 	mul.w	r3, r2, r3
 8001902:	3338      	adds	r3, #56	; 0x38
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	18d1      	adds	r1, r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	461a      	mov	r2, r3
 8001910:	f003 fa9e 	bl	8004e50 <USB_HC_StartXfer>
 8001914:	4603      	mov	r3, r0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop

08001920 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f002 ff9f 	bl	800487a <USB_GetMode>
 800193c:	4603      	mov	r3, r0
 800193e:	2b01      	cmp	r3, #1
 8001940:	f040 80f6 	bne.w	8001b30 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f002 ff83 	bl	8004854 <USB_ReadInterrupts>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 80ec 	beq.w	8001b2e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f002 ff7a 	bl	8004854 <USB_ReadInterrupts>
 8001960:	4603      	mov	r3, r0
 8001962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001966:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800196a:	d104      	bne.n	8001976 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001974:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f002 ff6a 	bl	8004854 <USB_ReadInterrupts>
 8001980:	4603      	mov	r3, r0
 8001982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800198a:	d104      	bne.n	8001996 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001994:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f002 ff5a 	bl	8004854 <USB_ReadInterrupts>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80019aa:	d104      	bne.n	80019b6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f002 ff4a 	bl	8004854 <USB_ReadInterrupts>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d103      	bne.n	80019d2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2202      	movs	r2, #2
 80019d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f002 ff3c 	bl	8004854 <USB_ReadInterrupts>
 80019dc:	4603      	mov	r3, r0
 80019de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019e6:	d11c      	bne.n	8001a22 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019f0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10f      	bne.n	8001a22 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001a02:	2110      	movs	r1, #16
 8001a04:	6938      	ldr	r0, [r7, #16]
 8001a06:	f002 fe2b 	bl	8004660 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001a0a:	6938      	ldr	r0, [r7, #16]
 8001a0c:	f002 fe5c 	bl	80046c8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2101      	movs	r1, #1
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 f832 	bl	8004a80 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f005 fdff 	bl	8007620 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 ff14 	bl	8004854 <USB_ReadInterrupts>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a36:	d102      	bne.n	8001a3e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f001 f89e 	bl	8002b7a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f002 ff06 	bl	8004854 <USB_ReadInterrupts>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d106      	bne.n	8001a60 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f005 fdc8 	bl	80075e8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2208      	movs	r2, #8
 8001a5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f002 fef5 	bl	8004854 <USB_ReadInterrupts>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	2b10      	cmp	r3, #16
 8001a72:	d101      	bne.n	8001a78 <HAL_HCD_IRQHandler+0x158>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <HAL_HCD_IRQHandler+0x15a>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d012      	beq.n	8001aa4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	699a      	ldr	r2, [r3, #24]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 0210 	bic.w	r2, r2, #16
 8001a8c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 ffa1 	bl	80029d6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	699a      	ldr	r2, [r3, #24]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0210 	orr.w	r2, r2, #16
 8001aa2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f002 fed3 	bl	8004854 <USB_ReadInterrupts>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ab8:	d13a      	bne.n	8001b30 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 fb08 	bl	80050d4 <USB_HC_ReadInterrupt>
 8001ac4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	e025      	b.n	8001b18 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d018      	beq.n	8001b12 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	015a      	lsls	r2, r3, #5
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001af6:	d106      	bne.n	8001b06 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	4619      	mov	r1, r3
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f8ab 	bl	8001c5a <HCD_HC_IN_IRQHandler>
 8001b04:	e005      	b.n	8001b12 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 fbf9 	bl	8002304 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	3301      	adds	r3, #1
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d3d4      	bcc.n	8001acc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b2a:	615a      	str	r2, [r3, #20]
 8001b2c:	e000      	b.n	8001b30 <HAL_HCD_IRQHandler+0x210>
      return;
 8001b2e:	bf00      	nop
    }
  }
}
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <HAL_HCD_Start+0x16>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e013      	b.n	8001b74 <HAL_HCD_Start+0x3e>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2101      	movs	r1, #1
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f002 fff4 	bl	8004b48 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f002 fd0d 	bl	8004584 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_HCD_Stop+0x16>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e00d      	b.n	8001bae <HAL_HCD_Stop+0x32>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 fbe2 	bl	8005368 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f002 ff96 	bl	8004af4 <USB_ResetPort>
 8001bc8:	4603      	mov	r3, r0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001bde:	78fb      	ldrb	r3, [r7, #3]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	212c      	movs	r1, #44	; 0x2c
 8001be4:	fb01 f303 	mul.w	r3, r1, r3
 8001be8:	4413      	add	r3, r2
 8001bea:	3360      	adds	r3, #96	; 0x60
 8001bec:	781b      	ldrb	r3, [r3, #0]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	460b      	mov	r3, r1
 8001c04:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	212c      	movs	r1, #44	; 0x2c
 8001c0c:	fb01 f303 	mul.w	r3, r1, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	3350      	adds	r3, #80	; 0x50
 8001c14:	681b      	ldr	r3, [r3, #0]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f002 ffda 	bl	8004be8 <USB_GetCurrentFrame>
 8001c34:	4603      	mov	r3, r0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f002 ffb5 	bl	8004bba <USB_GetHostSpeed>
 8001c50:	4603      	mov	r3, r0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b086      	sub	sp, #24
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	460b      	mov	r3, r1
 8001c64:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c70:	78fb      	ldrb	r3, [r7, #3]
 8001c72:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	015a      	lsls	r2, r3, #5
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0304 	and.w	r3, r3, #4
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d11a      	bne.n	8001cc0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	015a      	lsls	r2, r3, #5
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4413      	add	r3, r2
 8001c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c96:	461a      	mov	r2, r3
 8001c98:	2304      	movs	r3, #4
 8001c9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	212c      	movs	r1, #44	; 0x2c
 8001ca2:	fb01 f303 	mul.w	r3, r1, r3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3361      	adds	r3, #97	; 0x61
 8001caa:	2206      	movs	r2, #6
 8001cac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f003 fa1c 	bl	80050f6 <USB_HC_Halt>
 8001cbe:	e0af      	b.n	8001e20 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	015a      	lsls	r2, r3, #5
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd6:	d11b      	bne.n	8001d10 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	015a      	lsls	r2, r3, #5
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4413      	add	r3, r2
 8001ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	212c      	movs	r1, #44	; 0x2c
 8001cf2:	fb01 f303 	mul.w	r3, r1, r3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3361      	adds	r3, #97	; 0x61
 8001cfa:	2207      	movs	r2, #7
 8001cfc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f003 f9f4 	bl	80050f6 <USB_HC_Halt>
 8001d0e:	e087      	b.n	8001e20 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	015a      	lsls	r2, r3, #5
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4413      	add	r3, r2
 8001d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 0320 	and.w	r3, r3, #32
 8001d22:	2b20      	cmp	r3, #32
 8001d24:	d109      	bne.n	8001d3a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	015a      	lsls	r2, r3, #5
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d32:	461a      	mov	r2, r3
 8001d34:	2320      	movs	r3, #32
 8001d36:	6093      	str	r3, [r2, #8]
 8001d38:	e072      	b.n	8001e20 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	015a      	lsls	r2, r3, #5
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4413      	add	r3, r2
 8001d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d11a      	bne.n	8001d86 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	015a      	lsls	r2, r3, #5
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4413      	add	r3, r2
 8001d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	2308      	movs	r3, #8
 8001d60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	212c      	movs	r1, #44	; 0x2c
 8001d68:	fb01 f303 	mul.w	r3, r1, r3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	3361      	adds	r3, #97	; 0x61
 8001d70:	2205      	movs	r2, #5
 8001d72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	4611      	mov	r1, r2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f003 f9b9 	bl	80050f6 <USB_HC_Halt>
 8001d84:	e04c      	b.n	8001e20 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	015a      	lsls	r2, r3, #5
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d9c:	d11b      	bne.n	8001dd6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	015a      	lsls	r2, r3, #5
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001daa:	461a      	mov	r2, r3
 8001dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001db0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	212c      	movs	r1, #44	; 0x2c
 8001db8:	fb01 f303 	mul.w	r3, r1, r3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3361      	adds	r3, #97	; 0x61
 8001dc0:	2208      	movs	r2, #8
 8001dc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f003 f991 	bl	80050f6 <USB_HC_Halt>
 8001dd4:	e024      	b.n	8001e20 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	015a      	lsls	r2, r3, #5
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4413      	add	r3, r2
 8001dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de8:	2b80      	cmp	r3, #128	; 0x80
 8001dea:	d119      	bne.n	8001e20 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2380      	movs	r3, #128	; 0x80
 8001dfc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	212c      	movs	r1, #44	; 0x2c
 8001e04:	fb01 f303 	mul.w	r3, r1, r3
 8001e08:	4413      	add	r3, r2
 8001e0a:	3361      	adds	r3, #97	; 0x61
 8001e0c:	2206      	movs	r2, #6
 8001e0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	4611      	mov	r1, r2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f003 f96b 	bl	80050f6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	015a      	lsls	r2, r3, #5
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4413      	add	r3, r2
 8001e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e36:	d112      	bne.n	8001e5e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	4611      	mov	r1, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 f957 	bl	80050f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	015a      	lsls	r2, r3, #5
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e54:	461a      	mov	r2, r3
 8001e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e5a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e5c:	e24e      	b.n	80022fc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	015a      	lsls	r2, r3, #5
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4413      	add	r3, r2
 8001e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	f040 80df 	bne.w	8002034 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d019      	beq.n	8001eb2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	212c      	movs	r1, #44	; 0x2c
 8001e84:	fb01 f303 	mul.w	r3, r1, r3
 8001e88:	4413      	add	r3, r2
 8001e8a:	3348      	adds	r3, #72	; 0x48
 8001e8c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	0159      	lsls	r1, r3, #5
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	440b      	add	r3, r1
 8001e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ea0:	1ad2      	subs	r2, r2, r3
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	202c      	movs	r0, #44	; 0x2c
 8001ea8:	fb00 f303 	mul.w	r3, r0, r3
 8001eac:	440b      	add	r3, r1
 8001eae:	3350      	adds	r3, #80	; 0x50
 8001eb0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	212c      	movs	r1, #44	; 0x2c
 8001eb8:	fb01 f303 	mul.w	r3, r1, r3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3361      	adds	r3, #97	; 0x61
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	212c      	movs	r1, #44	; 0x2c
 8001eca:	fb01 f303 	mul.w	r3, r1, r3
 8001ece:	4413      	add	r3, r2
 8001ed0:	335c      	adds	r3, #92	; 0x5c
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	015a      	lsls	r2, r3, #5
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	212c      	movs	r1, #44	; 0x2c
 8001eee:	fb01 f303 	mul.w	r3, r1, r3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	333f      	adds	r3, #63	; 0x3f
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d009      	beq.n	8001f10 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	212c      	movs	r1, #44	; 0x2c
 8001f02:	fb01 f303 	mul.w	r3, r1, r3
 8001f06:	4413      	add	r3, r2
 8001f08:	333f      	adds	r3, #63	; 0x3f
 8001f0a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d111      	bne.n	8001f34 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f003 f8eb 	bl	80050f6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	015a      	lsls	r2, r3, #5
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4413      	add	r3, r2
 8001f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	2310      	movs	r3, #16
 8001f30:	6093      	str	r3, [r2, #8]
 8001f32:	e03a      	b.n	8001faa <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	212c      	movs	r1, #44	; 0x2c
 8001f3a:	fb01 f303 	mul.w	r3, r1, r3
 8001f3e:	4413      	add	r3, r2
 8001f40:	333f      	adds	r3, #63	; 0x3f
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d009      	beq.n	8001f5c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	212c      	movs	r1, #44	; 0x2c
 8001f4e:	fb01 f303 	mul.w	r3, r1, r3
 8001f52:	4413      	add	r3, r2
 8001f54:	333f      	adds	r3, #63	; 0x3f
 8001f56:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d126      	bne.n	8001faa <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	0151      	lsls	r1, r2, #5
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	440a      	add	r2, r1
 8001f72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f7a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	212c      	movs	r1, #44	; 0x2c
 8001f82:	fb01 f303 	mul.w	r3, r1, r3
 8001f86:	4413      	add	r3, r2
 8001f88:	3360      	adds	r3, #96	; 0x60
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	b2d9      	uxtb	r1, r3
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	202c      	movs	r0, #44	; 0x2c
 8001f98:	fb00 f303 	mul.w	r3, r0, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3360      	adds	r3, #96	; 0x60
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f005 fb49 	bl	800763c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d12b      	bne.n	800200a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	212c      	movs	r1, #44	; 0x2c
 8001fb8:	fb01 f303 	mul.w	r3, r1, r3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3348      	adds	r3, #72	; 0x48
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	202c      	movs	r0, #44	; 0x2c
 8001fc8:	fb00 f202 	mul.w	r2, r0, r2
 8001fcc:	440a      	add	r2, r1
 8001fce:	3240      	adds	r2, #64	; 0x40
 8001fd0:	8812      	ldrh	r2, [r2, #0]
 8001fd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 818e 	beq.w	80022fc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	212c      	movs	r1, #44	; 0x2c
 8001fe6:	fb01 f303 	mul.w	r3, r1, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	3354      	adds	r3, #84	; 0x54
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	f083 0301 	eor.w	r3, r3, #1
 8001ff4:	b2d8      	uxtb	r0, r3
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	212c      	movs	r1, #44	; 0x2c
 8001ffc:	fb01 f303 	mul.w	r3, r1, r3
 8002000:	4413      	add	r3, r2
 8002002:	3354      	adds	r3, #84	; 0x54
 8002004:	4602      	mov	r2, r0
 8002006:	701a      	strb	r2, [r3, #0]
}
 8002008:	e178      	b.n	80022fc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	212c      	movs	r1, #44	; 0x2c
 8002010:	fb01 f303 	mul.w	r3, r1, r3
 8002014:	4413      	add	r3, r2
 8002016:	3354      	adds	r3, #84	; 0x54
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	f083 0301 	eor.w	r3, r3, #1
 800201e:	b2d8      	uxtb	r0, r3
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	212c      	movs	r1, #44	; 0x2c
 8002026:	fb01 f303 	mul.w	r3, r1, r3
 800202a:	4413      	add	r3, r2
 800202c:	3354      	adds	r3, #84	; 0x54
 800202e:	4602      	mov	r2, r0
 8002030:	701a      	strb	r2, [r3, #0]
}
 8002032:	e163      	b.n	80022fc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	015a      	lsls	r2, r3, #5
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4413      	add	r3, r2
 800203c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b02      	cmp	r3, #2
 8002048:	f040 80f6 	bne.w	8002238 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	212c      	movs	r1, #44	; 0x2c
 8002052:	fb01 f303 	mul.w	r3, r1, r3
 8002056:	4413      	add	r3, r2
 8002058:	3361      	adds	r3, #97	; 0x61
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d109      	bne.n	8002074 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	212c      	movs	r1, #44	; 0x2c
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	4413      	add	r3, r2
 800206c:	3360      	adds	r3, #96	; 0x60
 800206e:	2201      	movs	r2, #1
 8002070:	701a      	strb	r2, [r3, #0]
 8002072:	e0c9      	b.n	8002208 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	212c      	movs	r1, #44	; 0x2c
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	4413      	add	r3, r2
 8002080:	3361      	adds	r3, #97	; 0x61
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b05      	cmp	r3, #5
 8002086:	d109      	bne.n	800209c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	212c      	movs	r1, #44	; 0x2c
 800208e:	fb01 f303 	mul.w	r3, r1, r3
 8002092:	4413      	add	r3, r2
 8002094:	3360      	adds	r3, #96	; 0x60
 8002096:	2205      	movs	r2, #5
 8002098:	701a      	strb	r2, [r3, #0]
 800209a:	e0b5      	b.n	8002208 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	212c      	movs	r1, #44	; 0x2c
 80020a2:	fb01 f303 	mul.w	r3, r1, r3
 80020a6:	4413      	add	r3, r2
 80020a8:	3361      	adds	r3, #97	; 0x61
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b06      	cmp	r3, #6
 80020ae:	d009      	beq.n	80020c4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	212c      	movs	r1, #44	; 0x2c
 80020b6:	fb01 f303 	mul.w	r3, r1, r3
 80020ba:	4413      	add	r3, r2
 80020bc:	3361      	adds	r3, #97	; 0x61
 80020be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d150      	bne.n	8002166 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	212c      	movs	r1, #44	; 0x2c
 80020ca:	fb01 f303 	mul.w	r3, r1, r3
 80020ce:	4413      	add	r3, r2
 80020d0:	335c      	adds	r3, #92	; 0x5c
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	202c      	movs	r0, #44	; 0x2c
 80020dc:	fb00 f303 	mul.w	r3, r0, r3
 80020e0:	440b      	add	r3, r1
 80020e2:	335c      	adds	r3, #92	; 0x5c
 80020e4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	212c      	movs	r1, #44	; 0x2c
 80020ec:	fb01 f303 	mul.w	r3, r1, r3
 80020f0:	4413      	add	r3, r2
 80020f2:	335c      	adds	r3, #92	; 0x5c
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d912      	bls.n	8002120 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	212c      	movs	r1, #44	; 0x2c
 8002100:	fb01 f303 	mul.w	r3, r1, r3
 8002104:	4413      	add	r3, r2
 8002106:	335c      	adds	r3, #92	; 0x5c
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	212c      	movs	r1, #44	; 0x2c
 8002112:	fb01 f303 	mul.w	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	3360      	adds	r3, #96	; 0x60
 800211a:	2204      	movs	r2, #4
 800211c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800211e:	e073      	b.n	8002208 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	212c      	movs	r1, #44	; 0x2c
 8002126:	fb01 f303 	mul.w	r3, r1, r3
 800212a:	4413      	add	r3, r2
 800212c:	3360      	adds	r3, #96	; 0x60
 800212e:	2202      	movs	r2, #2
 8002130:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	015a      	lsls	r2, r3, #5
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4413      	add	r3, r2
 800213a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002148:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002150:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	015a      	lsls	r2, r3, #5
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4413      	add	r3, r2
 800215a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215e:	461a      	mov	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002164:	e050      	b.n	8002208 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	212c      	movs	r1, #44	; 0x2c
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	4413      	add	r3, r2
 8002172:	3361      	adds	r3, #97	; 0x61
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b03      	cmp	r3, #3
 8002178:	d122      	bne.n	80021c0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	212c      	movs	r1, #44	; 0x2c
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	4413      	add	r3, r2
 8002186:	3360      	adds	r3, #96	; 0x60
 8002188:	2202      	movs	r2, #2
 800218a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	015a      	lsls	r2, r3, #5
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4413      	add	r3, r2
 8002194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021a2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021aa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	015a      	lsls	r2, r3, #5
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b8:	461a      	mov	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	e023      	b.n	8002208 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	212c      	movs	r1, #44	; 0x2c
 80021c6:	fb01 f303 	mul.w	r3, r1, r3
 80021ca:	4413      	add	r3, r2
 80021cc:	3361      	adds	r3, #97	; 0x61
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b07      	cmp	r3, #7
 80021d2:	d119      	bne.n	8002208 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	212c      	movs	r1, #44	; 0x2c
 80021da:	fb01 f303 	mul.w	r3, r1, r3
 80021de:	4413      	add	r3, r2
 80021e0:	335c      	adds	r3, #92	; 0x5c
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	202c      	movs	r0, #44	; 0x2c
 80021ec:	fb00 f303 	mul.w	r3, r0, r3
 80021f0:	440b      	add	r3, r1
 80021f2:	335c      	adds	r3, #92	; 0x5c
 80021f4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	212c      	movs	r1, #44	; 0x2c
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	4413      	add	r3, r2
 8002202:	3360      	adds	r3, #96	; 0x60
 8002204:	2204      	movs	r2, #4
 8002206:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4413      	add	r3, r2
 8002210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002214:	461a      	mov	r2, r3
 8002216:	2302      	movs	r3, #2
 8002218:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	b2d9      	uxtb	r1, r3
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	202c      	movs	r0, #44	; 0x2c
 8002224:	fb00 f303 	mul.w	r3, r0, r3
 8002228:	4413      	add	r3, r2
 800222a:	3360      	adds	r3, #96	; 0x60
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f005 fa03 	bl	800763c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002236:	e061      	b.n	80022fc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	015a      	lsls	r2, r3, #5
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4413      	add	r3, r2
 8002240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 0310 	and.w	r3, r3, #16
 800224a:	2b10      	cmp	r3, #16
 800224c:	d156      	bne.n	80022fc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	212c      	movs	r1, #44	; 0x2c
 8002254:	fb01 f303 	mul.w	r3, r1, r3
 8002258:	4413      	add	r3, r2
 800225a:	333f      	adds	r3, #63	; 0x3f
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b03      	cmp	r3, #3
 8002260:	d111      	bne.n	8002286 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	212c      	movs	r1, #44	; 0x2c
 8002268:	fb01 f303 	mul.w	r3, r1, r3
 800226c:	4413      	add	r3, r2
 800226e:	335c      	adds	r3, #92	; 0x5c
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	4611      	mov	r1, r2
 800227e:	4618      	mov	r0, r3
 8002280:	f002 ff39 	bl	80050f6 <USB_HC_Halt>
 8002284:	e031      	b.n	80022ea <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	212c      	movs	r1, #44	; 0x2c
 800228c:	fb01 f303 	mul.w	r3, r1, r3
 8002290:	4413      	add	r3, r2
 8002292:	333f      	adds	r3, #63	; 0x3f
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d009      	beq.n	80022ae <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	212c      	movs	r1, #44	; 0x2c
 80022a0:	fb01 f303 	mul.w	r3, r1, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	333f      	adds	r3, #63	; 0x3f
 80022a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d11d      	bne.n	80022ea <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	212c      	movs	r1, #44	; 0x2c
 80022b4:	fb01 f303 	mul.w	r3, r1, r3
 80022b8:	4413      	add	r3, r2
 80022ba:	335c      	adds	r3, #92	; 0x5c
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d110      	bne.n	80022ea <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	212c      	movs	r1, #44	; 0x2c
 80022ce:	fb01 f303 	mul.w	r3, r1, r3
 80022d2:	4413      	add	r3, r2
 80022d4:	3361      	adds	r3, #97	; 0x61
 80022d6:	2203      	movs	r2, #3
 80022d8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f002 ff06 	bl	80050f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	015a      	lsls	r2, r3, #5
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4413      	add	r3, r2
 80022f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f6:	461a      	mov	r2, r3
 80022f8:	2310      	movs	r3, #16
 80022fa:	6093      	str	r3, [r2, #8]
}
 80022fc:	bf00      	nop
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800231a:	78fb      	ldrb	r3, [r7, #3]
 800231c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	4413      	add	r3, r2
 8002326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b04      	cmp	r3, #4
 8002332:	d11a      	bne.n	800236a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	4413      	add	r3, r2
 800233c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002340:	461a      	mov	r2, r3
 8002342:	2304      	movs	r3, #4
 8002344:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	212c      	movs	r1, #44	; 0x2c
 800234c:	fb01 f303 	mul.w	r3, r1, r3
 8002350:	4413      	add	r3, r2
 8002352:	3361      	adds	r3, #97	; 0x61
 8002354:	2206      	movs	r2, #6
 8002356:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	4611      	mov	r1, r2
 8002362:	4618      	mov	r0, r3
 8002364:	f002 fec7 	bl	80050f6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002368:	e331      	b.n	80029ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	015a      	lsls	r2, r3, #5
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	4413      	add	r3, r2
 8002372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 0320 	and.w	r3, r3, #32
 800237c:	2b20      	cmp	r3, #32
 800237e:	d12e      	bne.n	80023de <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	4413      	add	r3, r2
 8002388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238c:	461a      	mov	r2, r3
 800238e:	2320      	movs	r3, #32
 8002390:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	212c      	movs	r1, #44	; 0x2c
 8002398:	fb01 f303 	mul.w	r3, r1, r3
 800239c:	4413      	add	r3, r2
 800239e:	333d      	adds	r3, #61	; 0x3d
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	f040 8313 	bne.w	80029ce <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	212c      	movs	r1, #44	; 0x2c
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	333d      	adds	r3, #61	; 0x3d
 80023b6:	2200      	movs	r2, #0
 80023b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	212c      	movs	r1, #44	; 0x2c
 80023c0:	fb01 f303 	mul.w	r3, r1, r3
 80023c4:	4413      	add	r3, r2
 80023c6:	3360      	adds	r3, #96	; 0x60
 80023c8:	2202      	movs	r2, #2
 80023ca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	4611      	mov	r1, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f002 fe8d 	bl	80050f6 <USB_HC_Halt>
}
 80023dc:	e2f7      	b.n	80029ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023f4:	d112      	bne.n	800241c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002402:	461a      	mov	r2, r3
 8002404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002408:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f002 fe6e 	bl	80050f6 <USB_HC_Halt>
}
 800241a:	e2d8      	b.n	80029ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	015a      	lsls	r2, r3, #5
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	4413      	add	r3, r2
 8002424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b01      	cmp	r3, #1
 8002430:	d140      	bne.n	80024b4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	212c      	movs	r1, #44	; 0x2c
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	4413      	add	r3, r2
 800243e:	335c      	adds	r3, #92	; 0x5c
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	4413      	add	r3, r2
 800244c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002456:	2b40      	cmp	r3, #64	; 0x40
 8002458:	d111      	bne.n	800247e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	212c      	movs	r1, #44	; 0x2c
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	4413      	add	r3, r2
 8002466:	333d      	adds	r3, #61	; 0x3d
 8002468:	2201      	movs	r2, #1
 800246a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	015a      	lsls	r2, r3, #5
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	4413      	add	r3, r2
 8002474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002478:	461a      	mov	r2, r3
 800247a:	2340      	movs	r3, #64	; 0x40
 800247c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	4413      	add	r3, r2
 8002486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248a:	461a      	mov	r2, r3
 800248c:	2301      	movs	r3, #1
 800248e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	212c      	movs	r1, #44	; 0x2c
 8002496:	fb01 f303 	mul.w	r3, r1, r3
 800249a:	4413      	add	r3, r2
 800249c:	3361      	adds	r3, #97	; 0x61
 800249e:	2201      	movs	r2, #1
 80024a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f002 fe22 	bl	80050f6 <USB_HC_Halt>
}
 80024b2:	e28c      	b.n	80029ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	015a      	lsls	r2, r3, #5
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c6:	2b40      	cmp	r3, #64	; 0x40
 80024c8:	d12c      	bne.n	8002524 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	212c      	movs	r1, #44	; 0x2c
 80024d0:	fb01 f303 	mul.w	r3, r1, r3
 80024d4:	4413      	add	r3, r2
 80024d6:	3361      	adds	r3, #97	; 0x61
 80024d8:	2204      	movs	r2, #4
 80024da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	212c      	movs	r1, #44	; 0x2c
 80024e2:	fb01 f303 	mul.w	r3, r1, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	333d      	adds	r3, #61	; 0x3d
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	212c      	movs	r1, #44	; 0x2c
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	4413      	add	r3, r2
 80024fa:	335c      	adds	r3, #92	; 0x5c
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	4611      	mov	r1, r2
 800250a:	4618      	mov	r0, r3
 800250c:	f002 fdf3 	bl	80050f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	4413      	add	r3, r2
 8002518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251c:	461a      	mov	r2, r3
 800251e:	2340      	movs	r3, #64	; 0x40
 8002520:	6093      	str	r3, [r2, #8]
}
 8002522:	e254      	b.n	80029ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	4413      	add	r3, r2
 800252c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b08      	cmp	r3, #8
 8002538:	d11a      	bne.n	8002570 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	4413      	add	r3, r2
 8002542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002546:	461a      	mov	r2, r3
 8002548:	2308      	movs	r3, #8
 800254a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	212c      	movs	r1, #44	; 0x2c
 8002552:	fb01 f303 	mul.w	r3, r1, r3
 8002556:	4413      	add	r3, r2
 8002558:	3361      	adds	r3, #97	; 0x61
 800255a:	2205      	movs	r2, #5
 800255c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	4611      	mov	r1, r2
 8002568:	4618      	mov	r0, r3
 800256a:	f002 fdc4 	bl	80050f6 <USB_HC_Halt>
}
 800256e:	e22e      	b.n	80029ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	4413      	add	r3, r2
 8002578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	2b10      	cmp	r3, #16
 8002584:	d140      	bne.n	8002608 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	212c      	movs	r1, #44	; 0x2c
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	4413      	add	r3, r2
 8002592:	335c      	adds	r3, #92	; 0x5c
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	212c      	movs	r1, #44	; 0x2c
 800259e:	fb01 f303 	mul.w	r3, r1, r3
 80025a2:	4413      	add	r3, r2
 80025a4:	3361      	adds	r3, #97	; 0x61
 80025a6:	2203      	movs	r2, #3
 80025a8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	212c      	movs	r1, #44	; 0x2c
 80025b0:	fb01 f303 	mul.w	r3, r1, r3
 80025b4:	4413      	add	r3, r2
 80025b6:	333d      	adds	r3, #61	; 0x3d
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d112      	bne.n	80025e4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	212c      	movs	r1, #44	; 0x2c
 80025c4:	fb01 f303 	mul.w	r3, r1, r3
 80025c8:	4413      	add	r3, r2
 80025ca:	333c      	adds	r3, #60	; 0x3c
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d108      	bne.n	80025e4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	212c      	movs	r1, #44	; 0x2c
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	4413      	add	r3, r2
 80025de:	333d      	adds	r3, #61	; 0x3d
 80025e0:	2201      	movs	r2, #1
 80025e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	4611      	mov	r1, r2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f002 fd81 	bl	80050f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	015a      	lsls	r2, r3, #5
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	4413      	add	r3, r2
 80025fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002600:	461a      	mov	r2, r3
 8002602:	2310      	movs	r3, #16
 8002604:	6093      	str	r3, [r2, #8]
}
 8002606:	e1e2      	b.n	80029ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	4413      	add	r3, r2
 8002610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261a:	2b80      	cmp	r3, #128	; 0x80
 800261c:	d164      	bne.n	80026e8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d111      	bne.n	800264a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	212c      	movs	r1, #44	; 0x2c
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	4413      	add	r3, r2
 8002632:	3361      	adds	r3, #97	; 0x61
 8002634:	2206      	movs	r2, #6
 8002636:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f002 fd57 	bl	80050f6 <USB_HC_Halt>
 8002648:	e044      	b.n	80026d4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	212c      	movs	r1, #44	; 0x2c
 8002650:	fb01 f303 	mul.w	r3, r1, r3
 8002654:	4413      	add	r3, r2
 8002656:	335c      	adds	r3, #92	; 0x5c
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	202c      	movs	r0, #44	; 0x2c
 8002662:	fb00 f303 	mul.w	r3, r0, r3
 8002666:	440b      	add	r3, r1
 8002668:	335c      	adds	r3, #92	; 0x5c
 800266a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	212c      	movs	r1, #44	; 0x2c
 8002672:	fb01 f303 	mul.w	r3, r1, r3
 8002676:	4413      	add	r3, r2
 8002678:	335c      	adds	r3, #92	; 0x5c
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d920      	bls.n	80026c2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	212c      	movs	r1, #44	; 0x2c
 8002686:	fb01 f303 	mul.w	r3, r1, r3
 800268a:	4413      	add	r3, r2
 800268c:	335c      	adds	r3, #92	; 0x5c
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	212c      	movs	r1, #44	; 0x2c
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	4413      	add	r3, r2
 800269e:	3360      	adds	r3, #96	; 0x60
 80026a0:	2204      	movs	r2, #4
 80026a2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	b2d9      	uxtb	r1, r3
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	202c      	movs	r0, #44	; 0x2c
 80026ae:	fb00 f303 	mul.w	r3, r0, r3
 80026b2:	4413      	add	r3, r2
 80026b4:	3360      	adds	r3, #96	; 0x60
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f004 ffbe 	bl	800763c <HAL_HCD_HC_NotifyURBChange_Callback>
 80026c0:	e008      	b.n	80026d4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	212c      	movs	r1, #44	; 0x2c
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	4413      	add	r3, r2
 80026ce:	3360      	adds	r3, #96	; 0x60
 80026d0:	2202      	movs	r2, #2
 80026d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e0:	461a      	mov	r2, r3
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	6093      	str	r3, [r2, #8]
}
 80026e6:	e172      	b.n	80029ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fe:	d11b      	bne.n	8002738 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	212c      	movs	r1, #44	; 0x2c
 8002706:	fb01 f303 	mul.w	r3, r1, r3
 800270a:	4413      	add	r3, r2
 800270c:	3361      	adds	r3, #97	; 0x61
 800270e:	2208      	movs	r2, #8
 8002710:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	4611      	mov	r1, r2
 800271c:	4618      	mov	r0, r3
 800271e:	f002 fcea 	bl	80050f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	4413      	add	r3, r2
 800272a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272e:	461a      	mov	r2, r3
 8002730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002734:	6093      	str	r3, [r2, #8]
}
 8002736:	e14a      	b.n	80029ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b02      	cmp	r3, #2
 800274c:	f040 813f 	bne.w	80029ce <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	212c      	movs	r1, #44	; 0x2c
 8002756:	fb01 f303 	mul.w	r3, r1, r3
 800275a:	4413      	add	r3, r2
 800275c:	3361      	adds	r3, #97	; 0x61
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d17d      	bne.n	8002860 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	212c      	movs	r1, #44	; 0x2c
 800276a:	fb01 f303 	mul.w	r3, r1, r3
 800276e:	4413      	add	r3, r2
 8002770:	3360      	adds	r3, #96	; 0x60
 8002772:	2201      	movs	r2, #1
 8002774:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	212c      	movs	r1, #44	; 0x2c
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	4413      	add	r3, r2
 8002782:	333f      	adds	r3, #63	; 0x3f
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b02      	cmp	r3, #2
 8002788:	d00a      	beq.n	80027a0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	212c      	movs	r1, #44	; 0x2c
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	333f      	adds	r3, #63	; 0x3f
 8002798:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800279a:	2b03      	cmp	r3, #3
 800279c:	f040 8100 	bne.w	80029a0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d113      	bne.n	80027d0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	212c      	movs	r1, #44	; 0x2c
 80027ae:	fb01 f303 	mul.w	r3, r1, r3
 80027b2:	4413      	add	r3, r2
 80027b4:	3355      	adds	r3, #85	; 0x55
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	f083 0301 	eor.w	r3, r3, #1
 80027bc:	b2d8      	uxtb	r0, r3
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	212c      	movs	r1, #44	; 0x2c
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	3355      	adds	r3, #85	; 0x55
 80027cc:	4602      	mov	r2, r0
 80027ce:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	f040 80e3 	bne.w	80029a0 <HCD_HC_OUT_IRQHandler+0x69c>
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	212c      	movs	r1, #44	; 0x2c
 80027e0:	fb01 f303 	mul.w	r3, r1, r3
 80027e4:	4413      	add	r3, r2
 80027e6:	334c      	adds	r3, #76	; 0x4c
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 80d8 	beq.w	80029a0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	212c      	movs	r1, #44	; 0x2c
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	4413      	add	r3, r2
 80027fc:	334c      	adds	r3, #76	; 0x4c
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	202c      	movs	r0, #44	; 0x2c
 8002806:	fb00 f202 	mul.w	r2, r0, r2
 800280a:	440a      	add	r2, r1
 800280c:	3240      	adds	r2, #64	; 0x40
 800280e:	8812      	ldrh	r2, [r2, #0]
 8002810:	4413      	add	r3, r2
 8002812:	3b01      	subs	r3, #1
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	202c      	movs	r0, #44	; 0x2c
 800281a:	fb00 f202 	mul.w	r2, r0, r2
 800281e:	440a      	add	r2, r1
 8002820:	3240      	adds	r2, #64	; 0x40
 8002822:	8812      	ldrh	r2, [r2, #0]
 8002824:	fbb3 f3f2 	udiv	r3, r3, r2
 8002828:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80b5 	beq.w	80029a0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	212c      	movs	r1, #44	; 0x2c
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	3355      	adds	r3, #85	; 0x55
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	f083 0301 	eor.w	r3, r3, #1
 800284a:	b2d8      	uxtb	r0, r3
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	212c      	movs	r1, #44	; 0x2c
 8002852:	fb01 f303 	mul.w	r3, r1, r3
 8002856:	4413      	add	r3, r2
 8002858:	3355      	adds	r3, #85	; 0x55
 800285a:	4602      	mov	r2, r0
 800285c:	701a      	strb	r2, [r3, #0]
 800285e:	e09f      	b.n	80029a0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	212c      	movs	r1, #44	; 0x2c
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	4413      	add	r3, r2
 800286c:	3361      	adds	r3, #97	; 0x61
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b03      	cmp	r3, #3
 8002872:	d109      	bne.n	8002888 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	212c      	movs	r1, #44	; 0x2c
 800287a:	fb01 f303 	mul.w	r3, r1, r3
 800287e:	4413      	add	r3, r2
 8002880:	3360      	adds	r3, #96	; 0x60
 8002882:	2202      	movs	r2, #2
 8002884:	701a      	strb	r2, [r3, #0]
 8002886:	e08b      	b.n	80029a0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	212c      	movs	r1, #44	; 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	3361      	adds	r3, #97	; 0x61
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b04      	cmp	r3, #4
 800289a:	d109      	bne.n	80028b0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	212c      	movs	r1, #44	; 0x2c
 80028a2:	fb01 f303 	mul.w	r3, r1, r3
 80028a6:	4413      	add	r3, r2
 80028a8:	3360      	adds	r3, #96	; 0x60
 80028aa:	2202      	movs	r2, #2
 80028ac:	701a      	strb	r2, [r3, #0]
 80028ae:	e077      	b.n	80029a0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	212c      	movs	r1, #44	; 0x2c
 80028b6:	fb01 f303 	mul.w	r3, r1, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	3361      	adds	r3, #97	; 0x61
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b05      	cmp	r3, #5
 80028c2:	d109      	bne.n	80028d8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	212c      	movs	r1, #44	; 0x2c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	3360      	adds	r3, #96	; 0x60
 80028d2:	2205      	movs	r2, #5
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	e063      	b.n	80029a0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	3361      	adds	r3, #97	; 0x61
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b06      	cmp	r3, #6
 80028ea:	d009      	beq.n	8002900 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	3361      	adds	r3, #97	; 0x61
 80028fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d14f      	bne.n	80029a0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	335c      	adds	r3, #92	; 0x5c
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	202c      	movs	r0, #44	; 0x2c
 8002918:	fb00 f303 	mul.w	r3, r0, r3
 800291c:	440b      	add	r3, r1
 800291e:	335c      	adds	r3, #92	; 0x5c
 8002920:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	212c      	movs	r1, #44	; 0x2c
 8002928:	fb01 f303 	mul.w	r3, r1, r3
 800292c:	4413      	add	r3, r2
 800292e:	335c      	adds	r3, #92	; 0x5c
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d912      	bls.n	800295c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	212c      	movs	r1, #44	; 0x2c
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	4413      	add	r3, r2
 8002942:	335c      	adds	r3, #92	; 0x5c
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	212c      	movs	r1, #44	; 0x2c
 800294e:	fb01 f303 	mul.w	r3, r1, r3
 8002952:	4413      	add	r3, r2
 8002954:	3360      	adds	r3, #96	; 0x60
 8002956:	2204      	movs	r2, #4
 8002958:	701a      	strb	r2, [r3, #0]
 800295a:	e021      	b.n	80029a0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	212c      	movs	r1, #44	; 0x2c
 8002962:	fb01 f303 	mul.w	r3, r1, r3
 8002966:	4413      	add	r3, r2
 8002968:	3360      	adds	r3, #96	; 0x60
 800296a:	2202      	movs	r2, #2
 800296c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	4413      	add	r3, r2
 8002976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002984:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800298c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	4413      	add	r3, r2
 8002996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299a:	461a      	mov	r2, r3
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ac:	461a      	mov	r2, r3
 80029ae:	2302      	movs	r3, #2
 80029b0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	b2d9      	uxtb	r1, r3
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	202c      	movs	r0, #44	; 0x2c
 80029bc:	fb00 f303 	mul.w	r3, r0, r3
 80029c0:	4413      	add	r3, r2
 80029c2:	3360      	adds	r3, #96	; 0x60
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	461a      	mov	r2, r3
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f004 fe37 	bl	800763c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80029ce:	bf00      	nop
 80029d0:	3720      	adds	r7, #32
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b08a      	sub	sp, #40	; 0x28
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	0c5b      	lsrs	r3, r3, #17
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a0a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d004      	beq.n	8002a1c <HCD_RXQLVL_IRQHandler+0x46>
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b05      	cmp	r3, #5
 8002a16:	f000 80a9 	beq.w	8002b6c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002a1a:	e0aa      	b.n	8002b72 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 80a6 	beq.w	8002b70 <HCD_RXQLVL_IRQHandler+0x19a>
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	3344      	adds	r3, #68	; 0x44
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 809b 	beq.w	8002b70 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	212c      	movs	r1, #44	; 0x2c
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	4413      	add	r3, r2
 8002a46:	3350      	adds	r3, #80	; 0x50
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	441a      	add	r2, r3
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	202c      	movs	r0, #44	; 0x2c
 8002a54:	fb00 f303 	mul.w	r3, r0, r3
 8002a58:	440b      	add	r3, r1
 8002a5a:	334c      	adds	r3, #76	; 0x4c
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d87a      	bhi.n	8002b58 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	212c      	movs	r1, #44	; 0x2c
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	3344      	adds	r3, #68	; 0x44
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	b292      	uxth	r2, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f001 fe92 	bl	80047a4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	212c      	movs	r1, #44	; 0x2c
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3344      	adds	r3, #68	; 0x44
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	441a      	add	r2, r3
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	202c      	movs	r0, #44	; 0x2c
 8002a9a:	fb00 f303 	mul.w	r3, r0, r3
 8002a9e:	440b      	add	r3, r1
 8002aa0:	3344      	adds	r3, #68	; 0x44
 8002aa2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	212c      	movs	r1, #44	; 0x2c
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3350      	adds	r3, #80	; 0x50
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	441a      	add	r2, r3
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	202c      	movs	r0, #44	; 0x2c
 8002abe:	fb00 f303 	mul.w	r3, r0, r3
 8002ac2:	440b      	add	r3, r1
 8002ac4:	3350      	adds	r3, #80	; 0x50
 8002ac6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	0cdb      	lsrs	r3, r3, #19
 8002ad8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002adc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	212c      	movs	r1, #44	; 0x2c
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	3340      	adds	r3, #64	; 0x40
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d13c      	bne.n	8002b70 <HCD_RXQLVL_IRQHandler+0x19a>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d039      	beq.n	8002b70 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b12:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b1a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	461a      	mov	r2, r3
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	3354      	adds	r3, #84	; 0x54
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	f083 0301 	eor.w	r3, r3, #1
 8002b42:	b2d8      	uxtb	r0, r3
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	212c      	movs	r1, #44	; 0x2c
 8002b4a:	fb01 f303 	mul.w	r3, r1, r3
 8002b4e:	4413      	add	r3, r2
 8002b50:	3354      	adds	r3, #84	; 0x54
 8002b52:	4602      	mov	r2, r0
 8002b54:	701a      	strb	r2, [r3, #0]
      break;
 8002b56:	e00b      	b.n	8002b70 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	212c      	movs	r1, #44	; 0x2c
 8002b5e:	fb01 f303 	mul.w	r3, r1, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	3360      	adds	r3, #96	; 0x60
 8002b66:	2204      	movs	r2, #4
 8002b68:	701a      	strb	r2, [r3, #0]
      break;
 8002b6a:	e001      	b.n	8002b70 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002b6c:	bf00      	nop
 8002b6e:	e000      	b.n	8002b72 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002b70:	bf00      	nop
  }
}
 8002b72:	bf00      	nop
 8002b74:	3728      	adds	r7, #40	; 0x28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b086      	sub	sp, #24
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002ba6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d10b      	bne.n	8002bca <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d102      	bne.n	8002bc2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f004 fd21 	bl	8007604 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f043 0302 	orr.w	r3, r3, #2
 8002bc8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d132      	bne.n	8002c3a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	f043 0308 	orr.w	r3, r3, #8
 8002bda:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d126      	bne.n	8002c34 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d113      	bne.n	8002c16 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002bf4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bf8:	d106      	bne.n	8002c08 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2102      	movs	r1, #2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f001 ff3d 	bl	8004a80 <USB_InitFSLSPClkSel>
 8002c06:	e011      	b.n	8002c2c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f001 ff36 	bl	8004a80 <USB_InitFSLSPClkSel>
 8002c14:	e00a      	b.n	8002c2c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d106      	bne.n	8002c2c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c24:	461a      	mov	r2, r3
 8002c26:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002c2a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f004 fd13 	bl	8007658 <HAL_HCD_PortEnabled_Callback>
 8002c32:	e002      	b.n	8002c3a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f004 fd1d 	bl	8007674 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f003 0320 	and.w	r3, r3, #32
 8002c40:	2b20      	cmp	r3, #32
 8002c42:	d103      	bne.n	8002c4c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f043 0320 	orr.w	r3, r3, #32
 8002c4a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c52:	461a      	mov	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	6013      	str	r3, [r2, #0]
}
 8002c58:	bf00      	nop
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e12b      	b.n	8002eca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fd fe7a 	bl	8000980 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2224      	movs	r2, #36	; 0x24
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0201 	bic.w	r2, r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cc4:	f001 fa20 	bl	8004108 <HAL_RCC_GetPCLK1Freq>
 8002cc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4a81      	ldr	r2, [pc, #516]	; (8002ed4 <HAL_I2C_Init+0x274>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d807      	bhi.n	8002ce4 <HAL_I2C_Init+0x84>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4a80      	ldr	r2, [pc, #512]	; (8002ed8 <HAL_I2C_Init+0x278>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	bf94      	ite	ls
 8002cdc:	2301      	movls	r3, #1
 8002cde:	2300      	movhi	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	e006      	b.n	8002cf2 <HAL_I2C_Init+0x92>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4a7d      	ldr	r2, [pc, #500]	; (8002edc <HAL_I2C_Init+0x27c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	bf94      	ite	ls
 8002cec:	2301      	movls	r3, #1
 8002cee:	2300      	movhi	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e0e7      	b.n	8002eca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4a78      	ldr	r2, [pc, #480]	; (8002ee0 <HAL_I2C_Init+0x280>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	0c9b      	lsrs	r3, r3, #18
 8002d04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	4a6a      	ldr	r2, [pc, #424]	; (8002ed4 <HAL_I2C_Init+0x274>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d802      	bhi.n	8002d34 <HAL_I2C_Init+0xd4>
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	3301      	adds	r3, #1
 8002d32:	e009      	b.n	8002d48 <HAL_I2C_Init+0xe8>
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d3a:	fb02 f303 	mul.w	r3, r2, r3
 8002d3e:	4a69      	ldr	r2, [pc, #420]	; (8002ee4 <HAL_I2C_Init+0x284>)
 8002d40:	fba2 2303 	umull	r2, r3, r2, r3
 8002d44:	099b      	lsrs	r3, r3, #6
 8002d46:	3301      	adds	r3, #1
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6812      	ldr	r2, [r2, #0]
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	495c      	ldr	r1, [pc, #368]	; (8002ed4 <HAL_I2C_Init+0x274>)
 8002d64:	428b      	cmp	r3, r1
 8002d66:	d819      	bhi.n	8002d9c <HAL_I2C_Init+0x13c>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	1e59      	subs	r1, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d76:	1c59      	adds	r1, r3, #1
 8002d78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d7c:	400b      	ands	r3, r1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_I2C_Init+0x138>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1e59      	subs	r1, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d90:	3301      	adds	r3, #1
 8002d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d96:	e051      	b.n	8002e3c <HAL_I2C_Init+0x1dc>
 8002d98:	2304      	movs	r3, #4
 8002d9a:	e04f      	b.n	8002e3c <HAL_I2C_Init+0x1dc>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d111      	bne.n	8002dc8 <HAL_I2C_Init+0x168>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	1e58      	subs	r0, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6859      	ldr	r1, [r3, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	440b      	add	r3, r1
 8002db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db6:	3301      	adds	r3, #1
 8002db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	e012      	b.n	8002dee <HAL_I2C_Init+0x18e>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	1e58      	subs	r0, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6859      	ldr	r1, [r3, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	0099      	lsls	r1, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dde:	3301      	adds	r3, #1
 8002de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf0c      	ite	eq
 8002de8:	2301      	moveq	r3, #1
 8002dea:	2300      	movne	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_I2C_Init+0x196>
 8002df2:	2301      	movs	r3, #1
 8002df4:	e022      	b.n	8002e3c <HAL_I2C_Init+0x1dc>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10e      	bne.n	8002e1c <HAL_I2C_Init+0x1bc>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1e58      	subs	r0, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6859      	ldr	r1, [r3, #4]
 8002e06:	460b      	mov	r3, r1
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	440b      	add	r3, r1
 8002e0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e10:	3301      	adds	r3, #1
 8002e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e1a:	e00f      	b.n	8002e3c <HAL_I2C_Init+0x1dc>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	1e58      	subs	r0, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6859      	ldr	r1, [r3, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	0099      	lsls	r1, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e32:	3301      	adds	r3, #1
 8002e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	6809      	ldr	r1, [r1, #0]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69da      	ldr	r2, [r3, #28]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6911      	ldr	r1, [r2, #16]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	68d2      	ldr	r2, [r2, #12]
 8002e76:	4311      	orrs	r1, r2
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695a      	ldr	r2, [r3, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	000186a0 	.word	0x000186a0
 8002ed8:	001e847f 	.word	0x001e847f
 8002edc:	003d08ff 	.word	0x003d08ff
 8002ee0:	431bde83 	.word	0x431bde83
 8002ee4:	10624dd3 	.word	0x10624dd3

08002ee8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e128      	b.n	800314c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a90      	ldr	r2, [pc, #576]	; (8003154 <HAL_I2S_Init+0x26c>)
 8002f12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7fd fd7b 	bl	8000a10 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f30:	f023 030f 	bic.w	r3, r3, #15
 8002f34:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d060      	beq.n	8003008 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d102      	bne.n	8002f54 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f4e:	2310      	movs	r3, #16
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	e001      	b.n	8002f58 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002f54:	2320      	movs	r3, #32
 8002f56:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	d802      	bhi.n	8002f66 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002f66:	2001      	movs	r0, #1
 8002f68:	f001 f9c4 	bl	80042f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f6c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f76:	d125      	bne.n	8002fc4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d010      	beq.n	8002fa2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	461a      	mov	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9c:	3305      	adds	r3, #5
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	e01f      	b.n	8002fe2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbe:	3305      	adds	r3, #5
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	e00e      	b.n	8002fe2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fde:	3305      	adds	r3, #5
 8002fe0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4a5c      	ldr	r2, [pc, #368]	; (8003158 <HAL_I2S_Init+0x270>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	08db      	lsrs	r3, r3, #3
 8002fec:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	085b      	lsrs	r3, r3, #1
 8002ffe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	021b      	lsls	r3, r3, #8
 8003004:	61bb      	str	r3, [r7, #24]
 8003006:	e003      	b.n	8003010 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003008:	2302      	movs	r3, #2
 800300a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d902      	bls.n	800301c <HAL_I2S_Init+0x134>
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	2bff      	cmp	r3, #255	; 0xff
 800301a:	d907      	bls.n	800302c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003020:	f043 0210 	orr.w	r2, r3, #16
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e08f      	b.n	800314c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	ea42 0103 	orr.w	r1, r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69fa      	ldr	r2, [r7, #28]
 800303c:	430a      	orrs	r2, r1
 800303e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800304a:	f023 030f 	bic.w	r3, r3, #15
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6851      	ldr	r1, [r2, #4]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6892      	ldr	r2, [r2, #8]
 8003056:	4311      	orrs	r1, r2
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	68d2      	ldr	r2, [r2, #12]
 800305c:	4311      	orrs	r1, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6992      	ldr	r2, [r2, #24]
 8003062:	430a      	orrs	r2, r1
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800306e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d161      	bne.n	800313c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a38      	ldr	r2, [pc, #224]	; (800315c <HAL_I2S_Init+0x274>)
 800307c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a37      	ldr	r2, [pc, #220]	; (8003160 <HAL_I2S_Init+0x278>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d101      	bne.n	800308c <HAL_I2S_Init+0x1a4>
 8003088:	4b36      	ldr	r3, [pc, #216]	; (8003164 <HAL_I2S_Init+0x27c>)
 800308a:	e001      	b.n	8003090 <HAL_I2S_Init+0x1a8>
 800308c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	4932      	ldr	r1, [pc, #200]	; (8003160 <HAL_I2S_Init+0x278>)
 8003098:	428a      	cmp	r2, r1
 800309a:	d101      	bne.n	80030a0 <HAL_I2S_Init+0x1b8>
 800309c:	4a31      	ldr	r2, [pc, #196]	; (8003164 <HAL_I2S_Init+0x27c>)
 800309e:	e001      	b.n	80030a4 <HAL_I2S_Init+0x1bc>
 80030a0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80030a4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030a8:	f023 030f 	bic.w	r3, r3, #15
 80030ac:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a2b      	ldr	r2, [pc, #172]	; (8003160 <HAL_I2S_Init+0x278>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d101      	bne.n	80030bc <HAL_I2S_Init+0x1d4>
 80030b8:	4b2a      	ldr	r3, [pc, #168]	; (8003164 <HAL_I2S_Init+0x27c>)
 80030ba:	e001      	b.n	80030c0 <HAL_I2S_Init+0x1d8>
 80030bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030c0:	2202      	movs	r2, #2
 80030c2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a25      	ldr	r2, [pc, #148]	; (8003160 <HAL_I2S_Init+0x278>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d101      	bne.n	80030d2 <HAL_I2S_Init+0x1ea>
 80030ce:	4b25      	ldr	r3, [pc, #148]	; (8003164 <HAL_I2S_Init+0x27c>)
 80030d0:	e001      	b.n	80030d6 <HAL_I2S_Init+0x1ee>
 80030d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e2:	d003      	beq.n	80030ec <HAL_I2S_Init+0x204>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d103      	bne.n	80030f4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80030ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	e001      	b.n	80030f8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80030f4:	2300      	movs	r3, #0
 80030f6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003102:	4313      	orrs	r3, r2
 8003104:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800310c:	4313      	orrs	r3, r2
 800310e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003116:	4313      	orrs	r3, r2
 8003118:	b29a      	uxth	r2, r3
 800311a:	897b      	ldrh	r3, [r7, #10]
 800311c:	4313      	orrs	r3, r2
 800311e:	b29b      	uxth	r3, r3
 8003120:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003124:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a0d      	ldr	r2, [pc, #52]	; (8003160 <HAL_I2S_Init+0x278>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d101      	bne.n	8003134 <HAL_I2S_Init+0x24c>
 8003130:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <HAL_I2S_Init+0x27c>)
 8003132:	e001      	b.n	8003138 <HAL_I2S_Init+0x250>
 8003134:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003138:	897a      	ldrh	r2, [r7, #10]
 800313a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3720      	adds	r7, #32
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	0800325f 	.word	0x0800325f
 8003158:	cccccccd 	.word	0xcccccccd
 800315c:	08003375 	.word	0x08003375
 8003160:	40003800 	.word	0x40003800
 8003164:	40003400 	.word	0x40003400

08003168 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	881a      	ldrh	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	1c9a      	adds	r2, r3, #2
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10e      	bne.n	80031f8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031e8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7ff ffb8 	bl	8003168 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80031f8:	bf00      	nop
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003212:	b292      	uxth	r2, r2
 8003214:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321a:	1c9a      	adds	r2, r3, #2
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003224:	b29b      	uxth	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003232:	b29b      	uxth	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10e      	bne.n	8003256 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003246:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff ff93 	bl	800317c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b086      	sub	sp, #24
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b04      	cmp	r3, #4
 8003278:	d13a      	bne.n	80032f0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b01      	cmp	r3, #1
 8003282:	d109      	bne.n	8003298 <I2S_IRQHandler+0x3a>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328e:	2b40      	cmp	r3, #64	; 0x40
 8003290:	d102      	bne.n	8003298 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7ff ffb4 	bl	8003200 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329e:	2b40      	cmp	r3, #64	; 0x40
 80032a0:	d126      	bne.n	80032f0 <I2S_IRQHandler+0x92>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b20      	cmp	r3, #32
 80032ae:	d11f      	bne.n	80032f0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80032c0:	2300      	movs	r3, #0
 80032c2:	613b      	str	r3, [r7, #16]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	f043 0202 	orr.w	r2, r3, #2
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff ff50 	bl	8003190 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d136      	bne.n	800336a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b02      	cmp	r3, #2
 8003304:	d109      	bne.n	800331a <I2S_IRQHandler+0xbc>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003310:	2b80      	cmp	r3, #128	; 0x80
 8003312:	d102      	bne.n	800331a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff ff45 	bl	80031a4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b08      	cmp	r3, #8
 8003322:	d122      	bne.n	800336a <I2S_IRQHandler+0x10c>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f003 0320 	and.w	r3, r3, #32
 800332e:	2b20      	cmp	r3, #32
 8003330:	d11b      	bne.n	800336a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003340:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335c:	f043 0204 	orr.w	r2, r3, #4
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff ff13 	bl	8003190 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800336a:	bf00      	nop
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a92      	ldr	r2, [pc, #584]	; (80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d101      	bne.n	8003392 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800338e:	4b92      	ldr	r3, [pc, #584]	; (80035d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003390:	e001      	b.n	8003396 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003392:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a8b      	ldr	r2, [pc, #556]	; (80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d101      	bne.n	80033b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80033ac:	4b8a      	ldr	r3, [pc, #552]	; (80035d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033ae:	e001      	b.n	80033b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80033b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033c0:	d004      	beq.n	80033cc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f040 8099 	bne.w	80034fe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d107      	bne.n	80033e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f925 	bl	8003630 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d107      	bne.n	8003400 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f9c8 	bl	8003790 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003406:	2b40      	cmp	r3, #64	; 0x40
 8003408:	d13a      	bne.n	8003480 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f003 0320 	and.w	r3, r3, #32
 8003410:	2b00      	cmp	r3, #0
 8003412:	d035      	beq.n	8003480 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a6e      	ldr	r2, [pc, #440]	; (80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d101      	bne.n	8003422 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800341e:	4b6e      	ldr	r3, [pc, #440]	; (80035d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003420:	e001      	b.n	8003426 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003422:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4969      	ldr	r1, [pc, #420]	; (80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800342e:	428b      	cmp	r3, r1
 8003430:	d101      	bne.n	8003436 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003432:	4b69      	ldr	r3, [pc, #420]	; (80035d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003434:	e001      	b.n	800343a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003436:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800343a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800343e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800344e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003450:	2300      	movs	r3, #0
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	f043 0202 	orr.w	r2, r3, #2
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff fe88 	bl	8003190 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b08      	cmp	r3, #8
 8003488:	f040 80c3 	bne.w	8003612 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f003 0320 	and.w	r3, r3, #32
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 80bd 	beq.w	8003612 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034a6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a49      	ldr	r2, [pc, #292]	; (80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d101      	bne.n	80034b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80034b2:	4b49      	ldr	r3, [pc, #292]	; (80035d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034b4:	e001      	b.n	80034ba <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80034b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4944      	ldr	r1, [pc, #272]	; (80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034c2:	428b      	cmp	r3, r1
 80034c4:	d101      	bne.n	80034ca <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80034c6:	4b44      	ldr	r3, [pc, #272]	; (80035d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034c8:	e001      	b.n	80034ce <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80034ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034d2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034d4:	2300      	movs	r3, #0
 80034d6:	60bb      	str	r3, [r7, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	60bb      	str	r3, [r7, #8]
 80034e0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ee:	f043 0204 	orr.w	r2, r3, #4
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff fe4a 	bl	8003190 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034fc:	e089      	b.n	8003612 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b02      	cmp	r3, #2
 8003506:	d107      	bne.n	8003518 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f8be 	bl	8003694 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b01      	cmp	r3, #1
 8003520:	d107      	bne.n	8003532 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f8fd 	bl	800372c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003538:	2b40      	cmp	r3, #64	; 0x40
 800353a:	d12f      	bne.n	800359c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f003 0320 	and.w	r3, r3, #32
 8003542:	2b00      	cmp	r3, #0
 8003544:	d02a      	beq.n	800359c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003554:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1e      	ldr	r2, [pc, #120]	; (80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d101      	bne.n	8003564 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003560:	4b1d      	ldr	r3, [pc, #116]	; (80035d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003562:	e001      	b.n	8003568 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003564:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4919      	ldr	r1, [pc, #100]	; (80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003570:	428b      	cmp	r3, r1
 8003572:	d101      	bne.n	8003578 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003574:	4b18      	ldr	r3, [pc, #96]	; (80035d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003576:	e001      	b.n	800357c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003578:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800357c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003580:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	f043 0202 	orr.w	r2, r3, #2
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff fdfa 	bl	8003190 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d136      	bne.n	8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d031      	beq.n	8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a07      	ldr	r2, [pc, #28]	; (80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d101      	bne.n	80035be <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80035ba:	4b07      	ldr	r3, [pc, #28]	; (80035d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035bc:	e001      	b.n	80035c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80035be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4902      	ldr	r1, [pc, #8]	; (80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035ca:	428b      	cmp	r3, r1
 80035cc:	d106      	bne.n	80035dc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80035ce:	4b02      	ldr	r3, [pc, #8]	; (80035d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035d0:	e006      	b.n	80035e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80035d2:	bf00      	nop
 80035d4:	40003800 	.word	0x40003800
 80035d8:	40003400 	.word	0x40003400
 80035dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035e4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035f4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003602:	f043 0204 	orr.w	r2, r3, #4
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff fdc0 	bl	8003190 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003610:	e000      	b.n	8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003612:	bf00      	nop
}
 8003614:	bf00      	nop
 8003616:	3720      	adds	r7, #32
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	1c99      	adds	r1, r3, #2
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6251      	str	r1, [r2, #36]	; 0x24
 8003642:	881a      	ldrh	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d113      	bne.n	800368a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003670:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003676:	b29b      	uxth	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d106      	bne.n	800368a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff ffc9 	bl	800361c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	1c99      	adds	r1, r3, #2
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6251      	str	r1, [r2, #36]	; 0x24
 80036a6:	8819      	ldrh	r1, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a1d      	ldr	r2, [pc, #116]	; (8003724 <I2SEx_TxISR_I2SExt+0x90>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d101      	bne.n	80036b6 <I2SEx_TxISR_I2SExt+0x22>
 80036b2:	4b1d      	ldr	r3, [pc, #116]	; (8003728 <I2SEx_TxISR_I2SExt+0x94>)
 80036b4:	e001      	b.n	80036ba <I2SEx_TxISR_I2SExt+0x26>
 80036b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ba:	460a      	mov	r2, r1
 80036bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d121      	bne.n	800371a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a12      	ldr	r2, [pc, #72]	; (8003724 <I2SEx_TxISR_I2SExt+0x90>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d101      	bne.n	80036e4 <I2SEx_TxISR_I2SExt+0x50>
 80036e0:	4b11      	ldr	r3, [pc, #68]	; (8003728 <I2SEx_TxISR_I2SExt+0x94>)
 80036e2:	e001      	b.n	80036e8 <I2SEx_TxISR_I2SExt+0x54>
 80036e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	490d      	ldr	r1, [pc, #52]	; (8003724 <I2SEx_TxISR_I2SExt+0x90>)
 80036f0:	428b      	cmp	r3, r1
 80036f2:	d101      	bne.n	80036f8 <I2SEx_TxISR_I2SExt+0x64>
 80036f4:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <I2SEx_TxISR_I2SExt+0x94>)
 80036f6:	e001      	b.n	80036fc <I2SEx_TxISR_I2SExt+0x68>
 80036f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003700:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003706:	b29b      	uxth	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d106      	bne.n	800371a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7ff ff81 	bl	800361c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800371a:	bf00      	nop
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40003800 	.word	0x40003800
 8003728:	40003400 	.word	0x40003400

0800372c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68d8      	ldr	r0, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373e:	1c99      	adds	r1, r3, #2
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003744:	b282      	uxth	r2, r0
 8003746:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800374c:	b29b      	uxth	r3, r3
 800374e:	3b01      	subs	r3, #1
 8003750:	b29a      	uxth	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800375a:	b29b      	uxth	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d113      	bne.n	8003788 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800376e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff ff4a 	bl	800361c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003788:	bf00      	nop
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a20      	ldr	r2, [pc, #128]	; (8003820 <I2SEx_RxISR_I2SExt+0x90>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d101      	bne.n	80037a6 <I2SEx_RxISR_I2SExt+0x16>
 80037a2:	4b20      	ldr	r3, [pc, #128]	; (8003824 <I2SEx_RxISR_I2SExt+0x94>)
 80037a4:	e001      	b.n	80037aa <I2SEx_RxISR_I2SExt+0x1a>
 80037a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037aa:	68d8      	ldr	r0, [r3, #12]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	1c99      	adds	r1, r3, #2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80037b6:	b282      	uxth	r2, r0
 80037b8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d121      	bne.n	8003816 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a12      	ldr	r2, [pc, #72]	; (8003820 <I2SEx_RxISR_I2SExt+0x90>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d101      	bne.n	80037e0 <I2SEx_RxISR_I2SExt+0x50>
 80037dc:	4b11      	ldr	r3, [pc, #68]	; (8003824 <I2SEx_RxISR_I2SExt+0x94>)
 80037de:	e001      	b.n	80037e4 <I2SEx_RxISR_I2SExt+0x54>
 80037e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	490d      	ldr	r1, [pc, #52]	; (8003820 <I2SEx_RxISR_I2SExt+0x90>)
 80037ec:	428b      	cmp	r3, r1
 80037ee:	d101      	bne.n	80037f4 <I2SEx_RxISR_I2SExt+0x64>
 80037f0:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <I2SEx_RxISR_I2SExt+0x94>)
 80037f2:	e001      	b.n	80037f8 <I2SEx_RxISR_I2SExt+0x68>
 80037f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037fc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003802:	b29b      	uxth	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d106      	bne.n	8003816 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff ff03 	bl	800361c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40003800 	.word	0x40003800
 8003824:	40003400 	.word	0x40003400

08003828 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e267      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d075      	beq.n	8003932 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003846:	4b88      	ldr	r3, [pc, #544]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 030c 	and.w	r3, r3, #12
 800384e:	2b04      	cmp	r3, #4
 8003850:	d00c      	beq.n	800386c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003852:	4b85      	ldr	r3, [pc, #532]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800385a:	2b08      	cmp	r3, #8
 800385c:	d112      	bne.n	8003884 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800385e:	4b82      	ldr	r3, [pc, #520]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003866:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800386a:	d10b      	bne.n	8003884 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800386c:	4b7e      	ldr	r3, [pc, #504]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d05b      	beq.n	8003930 <HAL_RCC_OscConfig+0x108>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d157      	bne.n	8003930 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e242      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800388c:	d106      	bne.n	800389c <HAL_RCC_OscConfig+0x74>
 800388e:	4b76      	ldr	r3, [pc, #472]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a75      	ldr	r2, [pc, #468]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	e01d      	b.n	80038d8 <HAL_RCC_OscConfig+0xb0>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038a4:	d10c      	bne.n	80038c0 <HAL_RCC_OscConfig+0x98>
 80038a6:	4b70      	ldr	r3, [pc, #448]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a6f      	ldr	r2, [pc, #444]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	4b6d      	ldr	r3, [pc, #436]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a6c      	ldr	r2, [pc, #432]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	e00b      	b.n	80038d8 <HAL_RCC_OscConfig+0xb0>
 80038c0:	4b69      	ldr	r3, [pc, #420]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a68      	ldr	r2, [pc, #416]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	4b66      	ldr	r3, [pc, #408]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a65      	ldr	r2, [pc, #404]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d013      	beq.n	8003908 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e0:	f7fd fa80 	bl	8000de4 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038e8:	f7fd fa7c 	bl	8000de4 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b64      	cmp	r3, #100	; 0x64
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e207      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fa:	4b5b      	ldr	r3, [pc, #364]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0f0      	beq.n	80038e8 <HAL_RCC_OscConfig+0xc0>
 8003906:	e014      	b.n	8003932 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003908:	f7fd fa6c 	bl	8000de4 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003910:	f7fd fa68 	bl	8000de4 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b64      	cmp	r3, #100	; 0x64
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e1f3      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003922:	4b51      	ldr	r3, [pc, #324]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1f0      	bne.n	8003910 <HAL_RCC_OscConfig+0xe8>
 800392e:	e000      	b.n	8003932 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d063      	beq.n	8003a06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800393e:	4b4a      	ldr	r3, [pc, #296]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00b      	beq.n	8003962 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800394a:	4b47      	ldr	r3, [pc, #284]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003952:	2b08      	cmp	r3, #8
 8003954:	d11c      	bne.n	8003990 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003956:	4b44      	ldr	r3, [pc, #272]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d116      	bne.n	8003990 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003962:	4b41      	ldr	r3, [pc, #260]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <HAL_RCC_OscConfig+0x152>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d001      	beq.n	800397a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e1c7      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397a:	4b3b      	ldr	r3, [pc, #236]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4937      	ldr	r1, [pc, #220]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 800398a:	4313      	orrs	r3, r2
 800398c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800398e:	e03a      	b.n	8003a06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d020      	beq.n	80039da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003998:	4b34      	ldr	r3, [pc, #208]	; (8003a6c <HAL_RCC_OscConfig+0x244>)
 800399a:	2201      	movs	r2, #1
 800399c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399e:	f7fd fa21 	bl	8000de4 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039a6:	f7fd fa1d 	bl	8000de4 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e1a8      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b8:	4b2b      	ldr	r3, [pc, #172]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0f0      	beq.n	80039a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c4:	4b28      	ldr	r3, [pc, #160]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	4925      	ldr	r1, [pc, #148]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	600b      	str	r3, [r1, #0]
 80039d8:	e015      	b.n	8003a06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039da:	4b24      	ldr	r3, [pc, #144]	; (8003a6c <HAL_RCC_OscConfig+0x244>)
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e0:	f7fd fa00 	bl	8000de4 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039e8:	f7fd f9fc 	bl	8000de4 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e187      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fa:	4b1b      	ldr	r3, [pc, #108]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d036      	beq.n	8003a80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d016      	beq.n	8003a48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a1a:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <HAL_RCC_OscConfig+0x248>)
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a20:	f7fd f9e0 	bl	8000de4 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a28:	f7fd f9dc 	bl	8000de4 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e167      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3a:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCC_OscConfig+0x200>
 8003a46:	e01b      	b.n	8003a80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a48:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <HAL_RCC_OscConfig+0x248>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4e:	f7fd f9c9 	bl	8000de4 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a54:	e00e      	b.n	8003a74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a56:	f7fd f9c5 	bl	8000de4 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d907      	bls.n	8003a74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e150      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	42470000 	.word	0x42470000
 8003a70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a74:	4b88      	ldr	r3, [pc, #544]	; (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1ea      	bne.n	8003a56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 8097 	beq.w	8003bbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a92:	4b81      	ldr	r3, [pc, #516]	; (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10f      	bne.n	8003abe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	4b7d      	ldr	r3, [pc, #500]	; (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	4a7c      	ldr	r2, [pc, #496]	; (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aac:	6413      	str	r3, [r2, #64]	; 0x40
 8003aae:	4b7a      	ldr	r3, [pc, #488]	; (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aba:	2301      	movs	r3, #1
 8003abc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003abe:	4b77      	ldr	r3, [pc, #476]	; (8003c9c <HAL_RCC_OscConfig+0x474>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d118      	bne.n	8003afc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aca:	4b74      	ldr	r3, [pc, #464]	; (8003c9c <HAL_RCC_OscConfig+0x474>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a73      	ldr	r2, [pc, #460]	; (8003c9c <HAL_RCC_OscConfig+0x474>)
 8003ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ad6:	f7fd f985 	bl	8000de4 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ade:	f7fd f981 	bl	8000de4 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e10c      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af0:	4b6a      	ldr	r3, [pc, #424]	; (8003c9c <HAL_RCC_OscConfig+0x474>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0f0      	beq.n	8003ade <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d106      	bne.n	8003b12 <HAL_RCC_OscConfig+0x2ea>
 8003b04:	4b64      	ldr	r3, [pc, #400]	; (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b08:	4a63      	ldr	r2, [pc, #396]	; (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b10:	e01c      	b.n	8003b4c <HAL_RCC_OscConfig+0x324>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2b05      	cmp	r3, #5
 8003b18:	d10c      	bne.n	8003b34 <HAL_RCC_OscConfig+0x30c>
 8003b1a:	4b5f      	ldr	r3, [pc, #380]	; (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1e:	4a5e      	ldr	r2, [pc, #376]	; (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b20:	f043 0304 	orr.w	r3, r3, #4
 8003b24:	6713      	str	r3, [r2, #112]	; 0x70
 8003b26:	4b5c      	ldr	r3, [pc, #368]	; (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2a:	4a5b      	ldr	r2, [pc, #364]	; (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	6713      	str	r3, [r2, #112]	; 0x70
 8003b32:	e00b      	b.n	8003b4c <HAL_RCC_OscConfig+0x324>
 8003b34:	4b58      	ldr	r3, [pc, #352]	; (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b38:	4a57      	ldr	r2, [pc, #348]	; (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b3a:	f023 0301 	bic.w	r3, r3, #1
 8003b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b40:	4b55      	ldr	r3, [pc, #340]	; (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b44:	4a54      	ldr	r2, [pc, #336]	; (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b46:	f023 0304 	bic.w	r3, r3, #4
 8003b4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d015      	beq.n	8003b80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b54:	f7fd f946 	bl	8000de4 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b5a:	e00a      	b.n	8003b72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b5c:	f7fd f942 	bl	8000de4 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e0cb      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b72:	4b49      	ldr	r3, [pc, #292]	; (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0ee      	beq.n	8003b5c <HAL_RCC_OscConfig+0x334>
 8003b7e:	e014      	b.n	8003baa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b80:	f7fd f930 	bl	8000de4 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b86:	e00a      	b.n	8003b9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b88:	f7fd f92c 	bl	8000de4 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e0b5      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b9e:	4b3e      	ldr	r3, [pc, #248]	; (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1ee      	bne.n	8003b88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d105      	bne.n	8003bbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb0:	4b39      	ldr	r3, [pc, #228]	; (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	4a38      	ldr	r2, [pc, #224]	; (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 80a1 	beq.w	8003d08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bc6:	4b34      	ldr	r3, [pc, #208]	; (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d05c      	beq.n	8003c8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d141      	bne.n	8003c5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bda:	4b31      	ldr	r3, [pc, #196]	; (8003ca0 <HAL_RCC_OscConfig+0x478>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be0:	f7fd f900 	bl	8000de4 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be8:	f7fd f8fc 	bl	8000de4 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e087      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bfa:	4b27      	ldr	r3, [pc, #156]	; (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69da      	ldr	r2, [r3, #28]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	019b      	lsls	r3, r3, #6
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1c:	085b      	lsrs	r3, r3, #1
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	041b      	lsls	r3, r3, #16
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c28:	061b      	lsls	r3, r3, #24
 8003c2a:	491b      	ldr	r1, [pc, #108]	; (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c30:	4b1b      	ldr	r3, [pc, #108]	; (8003ca0 <HAL_RCC_OscConfig+0x478>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c36:	f7fd f8d5 	bl	8000de4 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3c:	e008      	b.n	8003c50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c3e:	f7fd f8d1 	bl	8000de4 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e05c      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c50:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0f0      	beq.n	8003c3e <HAL_RCC_OscConfig+0x416>
 8003c5c:	e054      	b.n	8003d08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c5e:	4b10      	ldr	r3, [pc, #64]	; (8003ca0 <HAL_RCC_OscConfig+0x478>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c64:	f7fd f8be 	bl	8000de4 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c6c:	f7fd f8ba 	bl	8000de4 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e045      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7e:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0x444>
 8003c8a:	e03d      	b.n	8003d08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d107      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e038      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	40007000 	.word	0x40007000
 8003ca0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ca4:	4b1b      	ldr	r3, [pc, #108]	; (8003d14 <HAL_RCC_OscConfig+0x4ec>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d028      	beq.n	8003d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d121      	bne.n	8003d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d11a      	bne.n	8003d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d111      	bne.n	8003d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	085b      	lsrs	r3, r3, #1
 8003cec:	3b01      	subs	r3, #1
 8003cee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d107      	bne.n	8003d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d001      	beq.n	8003d08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e000      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40023800 	.word	0x40023800

08003d18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0cc      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d2c:	4b68      	ldr	r3, [pc, #416]	; (8003ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d90c      	bls.n	8003d54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3a:	4b65      	ldr	r3, [pc, #404]	; (8003ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d42:	4b63      	ldr	r3, [pc, #396]	; (8003ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d001      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0b8      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d020      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d6c:	4b59      	ldr	r3, [pc, #356]	; (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	4a58      	ldr	r2, [pc, #352]	; (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d84:	4b53      	ldr	r3, [pc, #332]	; (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4a52      	ldr	r2, [pc, #328]	; (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d90:	4b50      	ldr	r3, [pc, #320]	; (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	494d      	ldr	r1, [pc, #308]	; (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d044      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d107      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db6:	4b47      	ldr	r3, [pc, #284]	; (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d119      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e07f      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d003      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dd2:	2b03      	cmp	r3, #3
 8003dd4:	d107      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd6:	4b3f      	ldr	r3, [pc, #252]	; (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d109      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e06f      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de6:	4b3b      	ldr	r3, [pc, #236]	; (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e067      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003df6:	4b37      	ldr	r3, [pc, #220]	; (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f023 0203 	bic.w	r2, r3, #3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	4934      	ldr	r1, [pc, #208]	; (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e08:	f7fc ffec 	bl	8000de4 <HAL_GetTick>
 8003e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0e:	e00a      	b.n	8003e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e10:	f7fc ffe8 	bl	8000de4 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e04f      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e26:	4b2b      	ldr	r3, [pc, #172]	; (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 020c 	and.w	r2, r3, #12
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d1eb      	bne.n	8003e10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e38:	4b25      	ldr	r3, [pc, #148]	; (8003ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d20c      	bcs.n	8003e60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e46:	4b22      	ldr	r3, [pc, #136]	; (8003ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4e:	4b20      	ldr	r3, [pc, #128]	; (8003ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e032      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d008      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e6c:	4b19      	ldr	r3, [pc, #100]	; (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	4916      	ldr	r1, [pc, #88]	; (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d009      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e8a:	4b12      	ldr	r3, [pc, #72]	; (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	490e      	ldr	r1, [pc, #56]	; (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e9e:	f000 f821 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	091b      	lsrs	r3, r3, #4
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	490a      	ldr	r1, [pc, #40]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb0:	5ccb      	ldrb	r3, [r1, r3]
 8003eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb6:	4a09      	ldr	r2, [pc, #36]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003eba:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fc ff4c 	bl	8000d5c <HAL_InitTick>

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40023c00 	.word	0x40023c00
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	08007d14 	.word	0x08007d14
 8003edc:	20000000 	.word	0x20000000
 8003ee0:	20000004 	.word	0x20000004

08003ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ee8:	b094      	sub	sp, #80	; 0x50
 8003eea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	647b      	str	r3, [r7, #68]	; 0x44
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003efc:	4b79      	ldr	r3, [pc, #484]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 030c 	and.w	r3, r3, #12
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d00d      	beq.n	8003f24 <HAL_RCC_GetSysClockFreq+0x40>
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	f200 80e1 	bhi.w	80040d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <HAL_RCC_GetSysClockFreq+0x34>
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d003      	beq.n	8003f1e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f16:	e0db      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f18:	4b73      	ldr	r3, [pc, #460]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f1c:	e0db      	b.n	80040d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f1e:	4b73      	ldr	r3, [pc, #460]	; (80040ec <HAL_RCC_GetSysClockFreq+0x208>)
 8003f20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f22:	e0d8      	b.n	80040d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f24:	4b6f      	ldr	r3, [pc, #444]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f2e:	4b6d      	ldr	r3, [pc, #436]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d063      	beq.n	8004002 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f3a:	4b6a      	ldr	r3, [pc, #424]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	099b      	lsrs	r3, r3, #6
 8003f40:	2200      	movs	r2, #0
 8003f42:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f4c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f4e:	2300      	movs	r3, #0
 8003f50:	637b      	str	r3, [r7, #52]	; 0x34
 8003f52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f56:	4622      	mov	r2, r4
 8003f58:	462b      	mov	r3, r5
 8003f5a:	f04f 0000 	mov.w	r0, #0
 8003f5e:	f04f 0100 	mov.w	r1, #0
 8003f62:	0159      	lsls	r1, r3, #5
 8003f64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f68:	0150      	lsls	r0, r2, #5
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4621      	mov	r1, r4
 8003f70:	1a51      	subs	r1, r2, r1
 8003f72:	6139      	str	r1, [r7, #16]
 8003f74:	4629      	mov	r1, r5
 8003f76:	eb63 0301 	sbc.w	r3, r3, r1
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f88:	4659      	mov	r1, fp
 8003f8a:	018b      	lsls	r3, r1, #6
 8003f8c:	4651      	mov	r1, sl
 8003f8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f92:	4651      	mov	r1, sl
 8003f94:	018a      	lsls	r2, r1, #6
 8003f96:	4651      	mov	r1, sl
 8003f98:	ebb2 0801 	subs.w	r8, r2, r1
 8003f9c:	4659      	mov	r1, fp
 8003f9e:	eb63 0901 	sbc.w	r9, r3, r1
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fb6:	4690      	mov	r8, r2
 8003fb8:	4699      	mov	r9, r3
 8003fba:	4623      	mov	r3, r4
 8003fbc:	eb18 0303 	adds.w	r3, r8, r3
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	462b      	mov	r3, r5
 8003fc4:	eb49 0303 	adc.w	r3, r9, r3
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	f04f 0200 	mov.w	r2, #0
 8003fce:	f04f 0300 	mov.w	r3, #0
 8003fd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fd6:	4629      	mov	r1, r5
 8003fd8:	024b      	lsls	r3, r1, #9
 8003fda:	4621      	mov	r1, r4
 8003fdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	024a      	lsls	r2, r1, #9
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fea:	2200      	movs	r2, #0
 8003fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ff0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ff4:	f7fc f8e8 	bl	80001c8 <__aeabi_uldivmod>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004000:	e058      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004002:	4b38      	ldr	r3, [pc, #224]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	099b      	lsrs	r3, r3, #6
 8004008:	2200      	movs	r2, #0
 800400a:	4618      	mov	r0, r3
 800400c:	4611      	mov	r1, r2
 800400e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004012:	623b      	str	r3, [r7, #32]
 8004014:	2300      	movs	r3, #0
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
 8004018:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800401c:	4642      	mov	r2, r8
 800401e:	464b      	mov	r3, r9
 8004020:	f04f 0000 	mov.w	r0, #0
 8004024:	f04f 0100 	mov.w	r1, #0
 8004028:	0159      	lsls	r1, r3, #5
 800402a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800402e:	0150      	lsls	r0, r2, #5
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4641      	mov	r1, r8
 8004036:	ebb2 0a01 	subs.w	sl, r2, r1
 800403a:	4649      	mov	r1, r9
 800403c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800404c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004050:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004054:	ebb2 040a 	subs.w	r4, r2, sl
 8004058:	eb63 050b 	sbc.w	r5, r3, fp
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	00eb      	lsls	r3, r5, #3
 8004066:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800406a:	00e2      	lsls	r2, r4, #3
 800406c:	4614      	mov	r4, r2
 800406e:	461d      	mov	r5, r3
 8004070:	4643      	mov	r3, r8
 8004072:	18e3      	adds	r3, r4, r3
 8004074:	603b      	str	r3, [r7, #0]
 8004076:	464b      	mov	r3, r9
 8004078:	eb45 0303 	adc.w	r3, r5, r3
 800407c:	607b      	str	r3, [r7, #4]
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	e9d7 4500 	ldrd	r4, r5, [r7]
 800408a:	4629      	mov	r1, r5
 800408c:	028b      	lsls	r3, r1, #10
 800408e:	4621      	mov	r1, r4
 8004090:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004094:	4621      	mov	r1, r4
 8004096:	028a      	lsls	r2, r1, #10
 8004098:	4610      	mov	r0, r2
 800409a:	4619      	mov	r1, r3
 800409c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800409e:	2200      	movs	r2, #0
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	61fa      	str	r2, [r7, #28]
 80040a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040a8:	f7fc f88e 	bl	80001c8 <__aeabi_uldivmod>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4613      	mov	r3, r2
 80040b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040b4:	4b0b      	ldr	r3, [pc, #44]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	0c1b      	lsrs	r3, r3, #16
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	3301      	adds	r3, #1
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80040c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040ce:	e002      	b.n	80040d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040d0:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80040d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3750      	adds	r7, #80	; 0x50
 80040dc:	46bd      	mov	sp, r7
 80040de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040e2:	bf00      	nop
 80040e4:	40023800 	.word	0x40023800
 80040e8:	00f42400 	.word	0x00f42400
 80040ec:	007a1200 	.word	0x007a1200

080040f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040f4:	4b03      	ldr	r3, [pc, #12]	; (8004104 <HAL_RCC_GetHCLKFreq+0x14>)
 80040f6:	681b      	ldr	r3, [r3, #0]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	20000000 	.word	0x20000000

08004108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800410c:	f7ff fff0 	bl	80040f0 <HAL_RCC_GetHCLKFreq>
 8004110:	4602      	mov	r2, r0
 8004112:	4b05      	ldr	r3, [pc, #20]	; (8004128 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	0a9b      	lsrs	r3, r3, #10
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	4903      	ldr	r1, [pc, #12]	; (800412c <HAL_RCC_GetPCLK1Freq+0x24>)
 800411e:	5ccb      	ldrb	r3, [r1, r3]
 8004120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004124:	4618      	mov	r0, r3
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40023800 	.word	0x40023800
 800412c:	08007d24 	.word	0x08007d24

08004130 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d105      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004154:	2b00      	cmp	r3, #0
 8004156:	d035      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004158:	4b62      	ldr	r3, [pc, #392]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800415a:	2200      	movs	r2, #0
 800415c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800415e:	f7fc fe41 	bl	8000de4 <HAL_GetTick>
 8004162:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004164:	e008      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004166:	f7fc fe3d 	bl	8000de4 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d901      	bls.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e0b0      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004178:	4b5b      	ldr	r3, [pc, #364]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1f0      	bne.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	019a      	lsls	r2, r3, #6
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	071b      	lsls	r3, r3, #28
 8004190:	4955      	ldr	r1, [pc, #340]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004198:	4b52      	ldr	r3, [pc, #328]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800419a:	2201      	movs	r2, #1
 800419c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800419e:	f7fc fe21 	bl	8000de4 <HAL_GetTick>
 80041a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041a4:	e008      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041a6:	f7fc fe1d 	bl	8000de4 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e090      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041b8:	4b4b      	ldr	r3, [pc, #300]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0f0      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 8083 	beq.w	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041d2:	2300      	movs	r3, #0
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	4b44      	ldr	r3, [pc, #272]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	4a43      	ldr	r2, [pc, #268]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e0:	6413      	str	r3, [r2, #64]	; 0x40
 80041e2:	4b41      	ldr	r3, [pc, #260]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80041ee:	4b3f      	ldr	r3, [pc, #252]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a3e      	ldr	r2, [pc, #248]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041fa:	f7fc fdf3 	bl	8000de4 <HAL_GetTick>
 80041fe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004200:	e008      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004202:	f7fc fdef 	bl	8000de4 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e062      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004214:	4b35      	ldr	r3, [pc, #212]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0f0      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004220:	4b31      	ldr	r3, [pc, #196]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004224:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004228:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d02f      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	429a      	cmp	r2, r3
 800423c:	d028      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800423e:	4b2a      	ldr	r3, [pc, #168]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004246:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004248:	4b29      	ldr	r3, [pc, #164]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800424a:	2201      	movs	r2, #1
 800424c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800424e:	4b28      	ldr	r3, [pc, #160]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004254:	4a24      	ldr	r2, [pc, #144]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800425a:	4b23      	ldr	r3, [pc, #140]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800425c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b01      	cmp	r3, #1
 8004264:	d114      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004266:	f7fc fdbd 	bl	8000de4 <HAL_GetTick>
 800426a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800426c:	e00a      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800426e:	f7fc fdb9 	bl	8000de4 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	f241 3288 	movw	r2, #5000	; 0x1388
 800427c:	4293      	cmp	r3, r2
 800427e:	d901      	bls.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e02a      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004284:	4b18      	ldr	r3, [pc, #96]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0ee      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004298:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800429c:	d10d      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800429e:	4b12      	ldr	r3, [pc, #72]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80042ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b2:	490d      	ldr	r1, [pc, #52]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	608b      	str	r3, [r1, #8]
 80042b8:	e005      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80042ba:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	4a0a      	ldr	r2, [pc, #40]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042c0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042c4:	6093      	str	r3, [r2, #8]
 80042c6:	4b08      	ldr	r3, [pc, #32]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d2:	4905      	ldr	r1, [pc, #20]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	42470068 	.word	0x42470068
 80042e8:	40023800 	.word	0x40023800
 80042ec:	40007000 	.word	0x40007000
 80042f0:	42470e40 	.word	0x42470e40

080042f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d13e      	bne.n	8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004312:	4b23      	ldr	r3, [pc, #140]	; (80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d005      	beq.n	800432e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d12f      	bne.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004328:	4b1e      	ldr	r3, [pc, #120]	; (80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800432a:	617b      	str	r3, [r7, #20]
          break;
 800432c:	e02f      	b.n	800438e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800432e:	4b1c      	ldr	r3, [pc, #112]	; (80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004336:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800433a:	d108      	bne.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800433c:	4b18      	ldr	r3, [pc, #96]	; (80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004344:	4a18      	ldr	r2, [pc, #96]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004346:	fbb2 f3f3 	udiv	r3, r2, r3
 800434a:	613b      	str	r3, [r7, #16]
 800434c:	e007      	b.n	800435e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800434e:	4b14      	ldr	r3, [pc, #80]	; (80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004356:	4a15      	ldr	r2, [pc, #84]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004358:	fbb2 f3f3 	udiv	r3, r2, r3
 800435c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800435e:	4b10      	ldr	r3, [pc, #64]	; (80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004364:	099b      	lsrs	r3, r3, #6
 8004366:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	fb02 f303 	mul.w	r3, r2, r3
 8004370:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004372:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004378:	0f1b      	lsrs	r3, r3, #28
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	fbb2 f3f3 	udiv	r3, r2, r3
 8004384:	617b      	str	r3, [r7, #20]
          break;
 8004386:	e002      	b.n	800438e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]
          break;
 800438c:	bf00      	nop
        }
      }
      break;
 800438e:	bf00      	nop
    }
  }
  return frequency;
 8004390:	697b      	ldr	r3, [r7, #20]
}
 8004392:	4618      	mov	r0, r3
 8004394:	371c      	adds	r7, #28
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40023800 	.word	0x40023800
 80043a4:	00bb8000 	.word	0x00bb8000
 80043a8:	007a1200 	.word	0x007a1200
 80043ac:	00f42400 	.word	0x00f42400

080043b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e07b      	b.n	80044ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d108      	bne.n	80043dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043d2:	d009      	beq.n	80043e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	61da      	str	r2, [r3, #28]
 80043da:	e005      	b.n	80043e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d106      	bne.n	8004408 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7fc fb84 	bl	8000b10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800441e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446c:	ea42 0103 	orr.w	r1, r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004474:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	0c1b      	lsrs	r3, r3, #16
 8004486:	f003 0104 	and.w	r1, r3, #4
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	f003 0210 	and.w	r2, r3, #16
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	69da      	ldr	r2, [r3, #28]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044c2:	b084      	sub	sp, #16
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	f107 001c 	add.w	r0, r7, #28
 80044d0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d122      	bne.n	8004520 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80044ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004504:	2b01      	cmp	r3, #1
 8004506:	d105      	bne.n	8004514 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f9bf 	bl	8004898 <USB_CoreReset>
 800451a:	4603      	mov	r3, r0
 800451c:	73fb      	strb	r3, [r7, #15]
 800451e:	e01a      	b.n	8004556 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f9b3 	bl	8004898 <USB_CoreReset>
 8004532:	4603      	mov	r3, r0
 8004534:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004538:	2b00      	cmp	r3, #0
 800453a:	d106      	bne.n	800454a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004540:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	639a      	str	r2, [r3, #56]	; 0x38
 8004548:	e005      	b.n	8004556 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	2b01      	cmp	r3, #1
 800455a:	d10b      	bne.n	8004574 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f043 0206 	orr.w	r2, r3, #6
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f043 0220 	orr.w	r2, r3, #32
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004574:	7bfb      	ldrb	r3, [r7, #15]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004580:	b004      	add	sp, #16
 8004582:	4770      	bx	lr

08004584 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f043 0201 	orr.w	r2, r3, #1
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b083      	sub	sp, #12
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f023 0201 	bic.w	r2, r3, #1
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d115      	bne.n	8004616 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045f6:	2001      	movs	r0, #1
 80045f8:	f7fc fc00 	bl	8000dfc <HAL_Delay>
      ms++;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	3301      	adds	r3, #1
 8004600:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f939 	bl	800487a <USB_GetMode>
 8004608:	4603      	mov	r3, r0
 800460a:	2b01      	cmp	r3, #1
 800460c:	d01e      	beq.n	800464c <USB_SetCurrentMode+0x84>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2b31      	cmp	r3, #49	; 0x31
 8004612:	d9f0      	bls.n	80045f6 <USB_SetCurrentMode+0x2e>
 8004614:	e01a      	b.n	800464c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004616:	78fb      	ldrb	r3, [r7, #3]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d115      	bne.n	8004648 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004628:	2001      	movs	r0, #1
 800462a:	f7fc fbe7 	bl	8000dfc <HAL_Delay>
      ms++;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3301      	adds	r3, #1
 8004632:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f920 	bl	800487a <USB_GetMode>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d005      	beq.n	800464c <USB_SetCurrentMode+0x84>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2b31      	cmp	r3, #49	; 0x31
 8004644:	d9f0      	bls.n	8004628 <USB_SetCurrentMode+0x60>
 8004646:	e001      	b.n	800464c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e005      	b.n	8004658 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2b32      	cmp	r3, #50	; 0x32
 8004650:	d101      	bne.n	8004656 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	3301      	adds	r3, #1
 8004672:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4a13      	ldr	r2, [pc, #76]	; (80046c4 <USB_FlushTxFifo+0x64>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d901      	bls.n	8004680 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e01b      	b.n	80046b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	daf2      	bge.n	800466e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	019b      	lsls	r3, r3, #6
 8004690:	f043 0220 	orr.w	r2, r3, #32
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	3301      	adds	r3, #1
 800469c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	4a08      	ldr	r2, [pc, #32]	; (80046c4 <USB_FlushTxFifo+0x64>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d901      	bls.n	80046aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e006      	b.n	80046b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	d0f0      	beq.n	8004698 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	00030d40 	.word	0x00030d40

080046c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	3301      	adds	r3, #1
 80046d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4a11      	ldr	r2, [pc, #68]	; (8004724 <USB_FlushRxFifo+0x5c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d901      	bls.n	80046e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e018      	b.n	8004718 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	daf2      	bge.n	80046d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2210      	movs	r2, #16
 80046f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	3301      	adds	r3, #1
 80046fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4a08      	ldr	r2, [pc, #32]	; (8004724 <USB_FlushRxFifo+0x5c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d901      	bls.n	800470a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e006      	b.n	8004718 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f003 0310 	and.w	r3, r3, #16
 8004712:	2b10      	cmp	r3, #16
 8004714:	d0f0      	beq.n	80046f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	00030d40 	.word	0x00030d40

08004728 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004728:	b480      	push	{r7}
 800472a:	b089      	sub	sp, #36	; 0x24
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	4611      	mov	r1, r2
 8004734:	461a      	mov	r2, r3
 8004736:	460b      	mov	r3, r1
 8004738:	71fb      	strb	r3, [r7, #7]
 800473a:	4613      	mov	r3, r2
 800473c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004746:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800474a:	2b00      	cmp	r3, #0
 800474c:	d123      	bne.n	8004796 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800474e:	88bb      	ldrh	r3, [r7, #4]
 8004750:	3303      	adds	r3, #3
 8004752:	089b      	lsrs	r3, r3, #2
 8004754:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004756:	2300      	movs	r3, #0
 8004758:	61bb      	str	r3, [r7, #24]
 800475a:	e018      	b.n	800478e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800475c:	79fb      	ldrb	r3, [r7, #7]
 800475e:	031a      	lsls	r2, r3, #12
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	4413      	add	r3, r2
 8004764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004768:	461a      	mov	r2, r3
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	3301      	adds	r3, #1
 8004774:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	3301      	adds	r3, #1
 800477a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	3301      	adds	r3, #1
 8004780:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	3301      	adds	r3, #1
 8004786:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	3301      	adds	r3, #1
 800478c:	61bb      	str	r3, [r7, #24]
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	429a      	cmp	r2, r3
 8004794:	d3e2      	bcc.n	800475c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3724      	adds	r7, #36	; 0x24
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b08b      	sub	sp, #44	; 0x2c
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	4613      	mov	r3, r2
 80047b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80047ba:	88fb      	ldrh	r3, [r7, #6]
 80047bc:	089b      	lsrs	r3, r3, #2
 80047be:	b29b      	uxth	r3, r3
 80047c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	f003 0303 	and.w	r3, r3, #3
 80047c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80047ca:	2300      	movs	r3, #0
 80047cc:	623b      	str	r3, [r7, #32]
 80047ce:	e014      	b.n	80047fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	601a      	str	r2, [r3, #0]
    pDest++;
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	3301      	adds	r3, #1
 80047e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	3301      	adds	r3, #1
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	3301      	adds	r3, #1
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	3301      	adds	r3, #1
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	3301      	adds	r3, #1
 80047f8:	623b      	str	r3, [r7, #32]
 80047fa:	6a3a      	ldr	r2, [r7, #32]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d3e6      	bcc.n	80047d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004802:	8bfb      	ldrh	r3, [r7, #30]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01e      	beq.n	8004846 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004812:	461a      	mov	r2, r3
 8004814:	f107 0310 	add.w	r3, r7, #16
 8004818:	6812      	ldr	r2, [r2, #0]
 800481a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	6a3b      	ldr	r3, [r7, #32]
 8004820:	b2db      	uxtb	r3, r3
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	fa22 f303 	lsr.w	r3, r2, r3
 8004828:	b2da      	uxtb	r2, r3
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	701a      	strb	r2, [r3, #0]
      i++;
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	3301      	adds	r3, #1
 8004832:	623b      	str	r3, [r7, #32]
      pDest++;
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	3301      	adds	r3, #1
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800483a:	8bfb      	ldrh	r3, [r7, #30]
 800483c:	3b01      	subs	r3, #1
 800483e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004840:	8bfb      	ldrh	r3, [r7, #30]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1ea      	bne.n	800481c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004848:	4618      	mov	r0, r3
 800484a:	372c      	adds	r7, #44	; 0x2c
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	4013      	ands	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800486c:	68fb      	ldr	r3, [r7, #12]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	f003 0301 	and.w	r3, r3, #1
}
 800488a:	4618      	mov	r0, r3
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
	...

08004898 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3301      	adds	r3, #1
 80048a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4a13      	ldr	r2, [pc, #76]	; (80048fc <USB_CoreReset+0x64>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d901      	bls.n	80048b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e01b      	b.n	80048ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	daf2      	bge.n	80048a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f043 0201 	orr.w	r2, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	3301      	adds	r3, #1
 80048d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4a09      	ldr	r2, [pc, #36]	; (80048fc <USB_CoreReset+0x64>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d901      	bls.n	80048e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e006      	b.n	80048ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d0f0      	beq.n	80048ce <USB_CoreReset+0x36>

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	00030d40 	.word	0x00030d40

08004900 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004900:	b084      	sub	sp, #16
 8004902:	b580      	push	{r7, lr}
 8004904:	b086      	sub	sp, #24
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800490e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004920:	461a      	mov	r2, r3
 8004922:	2300      	movs	r3, #0
 8004924:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004942:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004952:	2b00      	cmp	r3, #0
 8004954:	d018      	beq.n	8004988 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004958:	2b01      	cmp	r3, #1
 800495a:	d10a      	bne.n	8004972 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800496a:	f043 0304 	orr.w	r3, r3, #4
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	e014      	b.n	800499c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004980:	f023 0304 	bic.w	r3, r3, #4
 8004984:	6013      	str	r3, [r2, #0]
 8004986:	e009      	b.n	800499c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004996:	f023 0304 	bic.w	r3, r3, #4
 800499a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800499c:	2110      	movs	r1, #16
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7ff fe5e 	bl	8004660 <USB_FlushTxFifo>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7ff fe8a 	bl	80046c8 <USB_FlushRxFifo>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80049be:	2300      	movs	r3, #0
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	e015      	b.n	80049f0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049d0:	461a      	mov	r2, r3
 80049d2:	f04f 33ff 	mov.w	r3, #4294967295
 80049d6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e4:	461a      	mov	r2, r3
 80049e6:	2300      	movs	r3, #0
 80049e8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	3301      	adds	r3, #1
 80049ee:	613b      	str	r3, [r7, #16]
 80049f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d3e5      	bcc.n	80049c4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f04f 32ff 	mov.w	r2, #4294967295
 8004a04:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00b      	beq.n	8004a2a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a18:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a13      	ldr	r2, [pc, #76]	; (8004a6c <USB_HostInit+0x16c>)
 8004a1e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a13      	ldr	r2, [pc, #76]	; (8004a70 <USB_HostInit+0x170>)
 8004a24:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004a28:	e009      	b.n	8004a3e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2280      	movs	r2, #128	; 0x80
 8004a2e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a10      	ldr	r2, [pc, #64]	; (8004a74 <USB_HostInit+0x174>)
 8004a34:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a0f      	ldr	r2, [pc, #60]	; (8004a78 <USB_HostInit+0x178>)
 8004a3a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d105      	bne.n	8004a50 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	f043 0210 	orr.w	r2, r3, #16
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	699a      	ldr	r2, [r3, #24]
 8004a54:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <USB_HostInit+0x17c>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a68:	b004      	add	sp, #16
 8004a6a:	4770      	bx	lr
 8004a6c:	01000200 	.word	0x01000200
 8004a70:	00e00300 	.word	0x00e00300
 8004a74:	00600080 	.word	0x00600080
 8004a78:	004000e0 	.word	0x004000e0
 8004a7c:	a3200008 	.word	0xa3200008

08004a80 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a9e:	f023 0303 	bic.w	r3, r3, #3
 8004aa2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	78fb      	ldrb	r3, [r7, #3]
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	68f9      	ldr	r1, [r7, #12]
 8004ab4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d107      	bne.n	8004ad2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ac8:	461a      	mov	r2, r3
 8004aca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004ace:	6053      	str	r3, [r2, #4]
 8004ad0:	e009      	b.n	8004ae6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004ad2:	78fb      	ldrb	r3, [r7, #3]
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d106      	bne.n	8004ae6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f241 7370 	movw	r3, #6000	; 0x1770
 8004ae4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b14:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b22:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004b24:	2064      	movs	r0, #100	; 0x64
 8004b26:	f7fc f969 	bl	8000dfc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b36:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004b38:	200a      	movs	r0, #10
 8004b3a:	f7fc f95f 	bl	8000dfc <HAL_Delay>

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b6c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d109      	bne.n	8004b8c <USB_DriveVbus+0x44>
 8004b78:	78fb      	ldrb	r3, [r7, #3]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d106      	bne.n	8004b8c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b8a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b96:	d109      	bne.n	8004bac <USB_DriveVbus+0x64>
 8004b98:	78fb      	ldrb	r3, [r7, #3]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004ba6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004baa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b085      	sub	sp, #20
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	0c5b      	lsrs	r3, r3, #17
 8004bd8:	f003 0303 	and.w	r3, r3, #3
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	b29b      	uxth	r3, r3
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
	...

08004c0c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b088      	sub	sp, #32
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	4608      	mov	r0, r1
 8004c16:	4611      	mov	r1, r2
 8004c18:	461a      	mov	r2, r3
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	70fb      	strb	r3, [r7, #3]
 8004c1e:	460b      	mov	r3, r1
 8004c20:	70bb      	strb	r3, [r7, #2]
 8004c22:	4613      	mov	r3, r2
 8004c24:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004c2e:	78fb      	ldrb	r3, [r7, #3]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c40:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004c42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	d87e      	bhi.n	8004d48 <USB_HC_Init+0x13c>
 8004c4a:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <USB_HC_Init+0x44>)
 8004c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c50:	08004c61 	.word	0x08004c61
 8004c54:	08004d0b 	.word	0x08004d0b
 8004c58:	08004c61 	.word	0x08004c61
 8004c5c:	08004ccd 	.word	0x08004ccd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	f240 439d 	movw	r3, #1181	; 0x49d
 8004c72:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004c74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	da10      	bge.n	8004c9e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004c7c:	78fb      	ldrb	r3, [r7, #3]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	78fa      	ldrb	r2, [r7, #3]
 8004c8c:	0151      	lsls	r1, r2, #5
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	440a      	add	r2, r1
 8004c92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c9a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004c9c:	e057      	b.n	8004d4e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d051      	beq.n	8004d4e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004caa:	78fb      	ldrb	r3, [r7, #3]
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	78fa      	ldrb	r2, [r7, #3]
 8004cba:	0151      	lsls	r1, r2, #5
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	440a      	add	r2, r1
 8004cc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cc4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004cc8:	60d3      	str	r3, [r2, #12]
      break;
 8004cca:	e040      	b.n	8004d4e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd8:	461a      	mov	r2, r3
 8004cda:	f240 639d 	movw	r3, #1693	; 0x69d
 8004cde:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004ce0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	da34      	bge.n	8004d52 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	78fa      	ldrb	r2, [r7, #3]
 8004cf8:	0151      	lsls	r1, r2, #5
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	440a      	add	r2, r1
 8004cfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d06:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004d08:	e023      	b.n	8004d52 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d0a:	78fb      	ldrb	r3, [r7, #3]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d16:	461a      	mov	r2, r3
 8004d18:	f240 2325 	movw	r3, #549	; 0x225
 8004d1c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004d1e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	da17      	bge.n	8004d56 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004d26:	78fb      	ldrb	r3, [r7, #3]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	78fa      	ldrb	r2, [r7, #3]
 8004d36:	0151      	lsls	r1, r2, #5
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	440a      	add	r2, r1
 8004d3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d40:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004d44:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004d46:	e006      	b.n	8004d56 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	77fb      	strb	r3, [r7, #31]
      break;
 8004d4c:	e004      	b.n	8004d58 <USB_HC_Init+0x14c>
      break;
 8004d4e:	bf00      	nop
 8004d50:	e002      	b.n	8004d58 <USB_HC_Init+0x14c>
      break;
 8004d52:	bf00      	nop
 8004d54:	e000      	b.n	8004d58 <USB_HC_Init+0x14c>
      break;
 8004d56:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004d58:	78fb      	ldrb	r3, [r7, #3]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	78fa      	ldrb	r2, [r7, #3]
 8004d68:	0151      	lsls	r1, r2, #5
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	440a      	add	r2, r1
 8004d6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d72:	f043 0302 	orr.w	r3, r3, #2
 8004d76:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d7e:	699a      	ldr	r2, [r3, #24]
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	f003 030f 	and.w	r3, r3, #15
 8004d86:	2101      	movs	r1, #1
 8004d88:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8c:	6939      	ldr	r1, [r7, #16]
 8004d8e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d92:	4313      	orrs	r3, r2
 8004d94:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004da2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	da03      	bge.n	8004db2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dae:	61bb      	str	r3, [r7, #24]
 8004db0:	e001      	b.n	8004db6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7ff feff 	bl	8004bba <USB_GetHostSpeed>
 8004dbc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004dbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d106      	bne.n	8004dd4 <USB_HC_Init+0x1c8>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d003      	beq.n	8004dd4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004dcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dd0:	617b      	str	r3, [r7, #20]
 8004dd2:	e001      	b.n	8004dd8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004dd8:	787b      	ldrb	r3, [r7, #1]
 8004dda:	059b      	lsls	r3, r3, #22
 8004ddc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004de0:	78bb      	ldrb	r3, [r7, #2]
 8004de2:	02db      	lsls	r3, r3, #11
 8004de4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004de8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004dea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004dee:	049b      	lsls	r3, r3, #18
 8004df0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004df4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004df6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004df8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004dfc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e02:	78fb      	ldrb	r3, [r7, #3]
 8004e04:	0159      	lsls	r1, r3, #5
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	440b      	add	r3, r1
 8004e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e14:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004e16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e1a:	2b03      	cmp	r3, #3
 8004e1c:	d003      	beq.n	8004e26 <USB_HC_Init+0x21a>
 8004e1e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d10f      	bne.n	8004e46 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004e26:	78fb      	ldrb	r3, [r7, #3]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	78fa      	ldrb	r2, [r7, #3]
 8004e36:	0151      	lsls	r1, r2, #5
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	440a      	add	r2, r1
 8004e3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e44:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004e46:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3720      	adds	r7, #32
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b08c      	sub	sp, #48	; 0x30
 8004e54:	af02      	add	r7, sp, #8
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	785b      	ldrb	r3, [r3, #1]
 8004e66:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004e68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e6c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d02d      	beq.n	8004ed6 <USB_HC_StartXfer+0x86>
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	791b      	ldrb	r3, [r3, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d129      	bne.n	8004ed6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004e82:	79fb      	ldrb	r3, [r7, #7]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d117      	bne.n	8004eb8 <USB_HC_StartXfer+0x68>
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	79db      	ldrb	r3, [r3, #7]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d003      	beq.n	8004e98 <USB_HC_StartXfer+0x48>
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	79db      	ldrb	r3, [r3, #7]
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d10f      	bne.n	8004eb8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	69fa      	ldr	r2, [r7, #28]
 8004ea8:	0151      	lsls	r1, r2, #5
 8004eaa:	6a3a      	ldr	r2, [r7, #32]
 8004eac:	440a      	add	r2, r1
 8004eae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004eb8:	79fb      	ldrb	r3, [r7, #7]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10b      	bne.n	8004ed6 <USB_HC_StartXfer+0x86>
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	795b      	ldrb	r3, [r3, #5]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d107      	bne.n	8004ed6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	785b      	ldrb	r3, [r3, #1]
 8004eca:	4619      	mov	r1, r3
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 fa0f 	bl	80052f0 <USB_DoPing>
      return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	e0f8      	b.n	80050c8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d018      	beq.n	8004f10 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	8912      	ldrh	r2, [r2, #8]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	8912      	ldrh	r2, [r2, #8]
 8004eee:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ef2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004ef4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004ef6:	8b7b      	ldrh	r3, [r7, #26]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d90b      	bls.n	8004f14 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004efc:	8b7b      	ldrh	r3, [r7, #26]
 8004efe:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004f00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	8912      	ldrh	r2, [r2, #8]
 8004f06:	fb03 f202 	mul.w	r2, r3, r2
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	611a      	str	r2, [r3, #16]
 8004f0e:	e001      	b.n	8004f14 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004f10:	2301      	movs	r3, #1
 8004f12:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	78db      	ldrb	r3, [r3, #3]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d007      	beq.n	8004f2c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004f1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	8912      	ldrh	r2, [r2, #8]
 8004f22:	fb03 f202 	mul.w	r2, r3, r2
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	611a      	str	r2, [r3, #16]
 8004f2a:	e003      	b.n	8004f34 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	695a      	ldr	r2, [r3, #20]
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f3e:	04d9      	lsls	r1, r3, #19
 8004f40:	4b63      	ldr	r3, [pc, #396]	; (80050d0 <USB_HC_StartXfer+0x280>)
 8004f42:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f44:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	7a9b      	ldrb	r3, [r3, #10]
 8004f4a:	075b      	lsls	r3, r3, #29
 8004f4c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f50:	69f9      	ldr	r1, [r7, #28]
 8004f52:	0148      	lsls	r0, r1, #5
 8004f54:	6a39      	ldr	r1, [r7, #32]
 8004f56:	4401      	add	r1, r0
 8004f58:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f5c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f5e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d009      	beq.n	8004f7a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	68d9      	ldr	r1, [r3, #12]
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f76:	460a      	mov	r2, r1
 8004f78:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	bf0c      	ite	eq
 8004f8a:	2301      	moveq	r3, #1
 8004f8c:	2300      	movne	r3, #0
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69fa      	ldr	r2, [r7, #28]
 8004fa2:	0151      	lsls	r1, r2, #5
 8004fa4:	6a3a      	ldr	r2, [r7, #32]
 8004fa6:	440a      	add	r2, r1
 8004fa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004fb0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	015a      	lsls	r2, r3, #5
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	7e7b      	ldrb	r3, [r7, #25]
 8004fc2:	075b      	lsls	r3, r3, #29
 8004fc4:	69f9      	ldr	r1, [r7, #28]
 8004fc6:	0148      	lsls	r0, r1, #5
 8004fc8:	6a39      	ldr	r1, [r7, #32]
 8004fca:	4401      	add	r1, r0
 8004fcc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fea:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	78db      	ldrb	r3, [r3, #3]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d004      	beq.n	8004ffe <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ffa:	613b      	str	r3, [r7, #16]
 8004ffc:	e003      	b.n	8005006 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005004:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800500c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	4413      	add	r3, r2
 8005016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501a:	461a      	mov	r2, r3
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005020:	79fb      	ldrb	r3, [r7, #7]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005026:	2300      	movs	r3, #0
 8005028:	e04e      	b.n	80050c8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	78db      	ldrb	r3, [r3, #3]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d149      	bne.n	80050c6 <USB_HC_StartXfer+0x276>
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d045      	beq.n	80050c6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	79db      	ldrb	r3, [r3, #7]
 800503e:	2b03      	cmp	r3, #3
 8005040:	d830      	bhi.n	80050a4 <USB_HC_StartXfer+0x254>
 8005042:	a201      	add	r2, pc, #4	; (adr r2, 8005048 <USB_HC_StartXfer+0x1f8>)
 8005044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005048:	08005059 	.word	0x08005059
 800504c:	0800507d 	.word	0x0800507d
 8005050:	08005059 	.word	0x08005059
 8005054:	0800507d 	.word	0x0800507d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	3303      	adds	r3, #3
 800505e:	089b      	lsrs	r3, r3, #2
 8005060:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005062:	8afa      	ldrh	r2, [r7, #22]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005068:	b29b      	uxth	r3, r3
 800506a:	429a      	cmp	r2, r3
 800506c:	d91c      	bls.n	80050a8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	f043 0220 	orr.w	r2, r3, #32
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	619a      	str	r2, [r3, #24]
        }
        break;
 800507a:	e015      	b.n	80050a8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	3303      	adds	r3, #3
 8005082:	089b      	lsrs	r3, r3, #2
 8005084:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005086:	8afa      	ldrh	r2, [r7, #22]
 8005088:	6a3b      	ldr	r3, [r7, #32]
 800508a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	b29b      	uxth	r3, r3
 8005092:	429a      	cmp	r2, r3
 8005094:	d90a      	bls.n	80050ac <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	619a      	str	r2, [r3, #24]
        }
        break;
 80050a2:	e003      	b.n	80050ac <USB_HC_StartXfer+0x25c>

      default:
        break;
 80050a4:	bf00      	nop
 80050a6:	e002      	b.n	80050ae <USB_HC_StartXfer+0x25e>
        break;
 80050a8:	bf00      	nop
 80050aa:	e000      	b.n	80050ae <USB_HC_StartXfer+0x25e>
        break;
 80050ac:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	68d9      	ldr	r1, [r3, #12]
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	785a      	ldrb	r2, [r3, #1]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2000      	movs	r0, #0
 80050be:	9000      	str	r0, [sp, #0]
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f7ff fb31 	bl	8004728 <USB_WritePacket>
  }

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3728      	adds	r7, #40	; 0x28
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	1ff80000 	.word	0x1ff80000

080050d4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	b29b      	uxth	r3, r3
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b089      	sub	sp, #36	; 0x24
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
 80050fe:	460b      	mov	r3, r1
 8005100:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005106:	78fb      	ldrb	r3, [r7, #3]
 8005108:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	015a      	lsls	r2, r3, #5
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	4413      	add	r3, r2
 8005116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	0c9b      	lsrs	r3, r3, #18
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	4413      	add	r3, r2
 800512c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	0fdb      	lsrs	r3, r3, #31
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 0320 	and.w	r3, r3, #32
 8005142:	2b20      	cmp	r3, #32
 8005144:	d104      	bne.n	8005150 <USB_HC_Halt+0x5a>
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800514c:	2300      	movs	r3, #0
 800514e:	e0c8      	b.n	80052e2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <USB_HC_Halt+0x66>
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b02      	cmp	r3, #2
 800515a:	d163      	bne.n	8005224 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	4413      	add	r3, r2
 8005164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	0151      	lsls	r1, r2, #5
 800516e:	69fa      	ldr	r2, [r7, #28]
 8005170:	440a      	add	r2, r1
 8005172:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005176:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800517a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f003 0320 	and.w	r3, r3, #32
 8005184:	2b00      	cmp	r3, #0
 8005186:	f040 80ab 	bne.w	80052e0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d133      	bne.n	80051fe <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	4413      	add	r3, r2
 800519e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	0151      	lsls	r1, r2, #5
 80051a8:	69fa      	ldr	r2, [r7, #28]
 80051aa:	440a      	add	r2, r1
 80051ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051b4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	0151      	lsls	r1, r2, #5
 80051c8:	69fa      	ldr	r2, [r7, #28]
 80051ca:	440a      	add	r2, r1
 80051cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051d4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	3301      	adds	r3, #1
 80051da:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051e2:	d81d      	bhi.n	8005220 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051fa:	d0ec      	beq.n	80051d6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051fc:	e070      	b.n	80052e0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	4413      	add	r3, r2
 8005206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	0151      	lsls	r1, r2, #5
 8005210:	69fa      	ldr	r2, [r7, #28]
 8005212:	440a      	add	r2, r1
 8005214:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005218:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800521c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800521e:	e05f      	b.n	80052e0 <USB_HC_Halt+0x1ea>
            break;
 8005220:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005222:	e05d      	b.n	80052e0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	4413      	add	r3, r2
 800522c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	0151      	lsls	r1, r2, #5
 8005236:	69fa      	ldr	r2, [r7, #28]
 8005238:	440a      	add	r2, r1
 800523a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800523e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005242:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d133      	bne.n	80052bc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	4413      	add	r3, r2
 800525c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	0151      	lsls	r1, r2, #5
 8005266:	69fa      	ldr	r2, [r7, #28]
 8005268:	440a      	add	r2, r1
 800526a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800526e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005272:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	4413      	add	r3, r2
 800527c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	0151      	lsls	r1, r2, #5
 8005286:	69fa      	ldr	r2, [r7, #28]
 8005288:	440a      	add	r2, r1
 800528a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800528e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005292:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	3301      	adds	r3, #1
 8005298:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052a0:	d81d      	bhi.n	80052de <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052b8:	d0ec      	beq.n	8005294 <USB_HC_Halt+0x19e>
 80052ba:	e011      	b.n	80052e0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	0151      	lsls	r1, r2, #5
 80052ce:	69fa      	ldr	r2, [r7, #28]
 80052d0:	440a      	add	r2, r1
 80052d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052da:	6013      	str	r3, [r2, #0]
 80052dc:	e000      	b.n	80052e0 <USB_HC_Halt+0x1ea>
          break;
 80052de:	bf00      	nop
    }
  }

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3724      	adds	r7, #36	; 0x24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
	...

080052f0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	460b      	mov	r3, r1
 80052fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005300:	78fb      	ldrb	r3, [r7, #3]
 8005302:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005304:	2301      	movs	r3, #1
 8005306:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	04da      	lsls	r2, r3, #19
 800530c:	4b15      	ldr	r3, [pc, #84]	; (8005364 <USB_DoPing+0x74>)
 800530e:	4013      	ands	r3, r2
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	0151      	lsls	r1, r2, #5
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	440a      	add	r2, r1
 8005318:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800531c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005320:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	4413      	add	r3, r2
 800532a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005338:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005340:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	4413      	add	r3, r2
 800534a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534e:	461a      	mov	r2, r3
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	1ff80000 	.word	0x1ff80000

08005368 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b088      	sub	sp, #32
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7ff f912 	bl	80045a6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005382:	2110      	movs	r1, #16
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7ff f96b 	bl	8004660 <USB_FlushTxFifo>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7ff f997 	bl	80046c8 <USB_FlushRxFifo>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80053a4:	2300      	movs	r3, #0
 80053a6:	61bb      	str	r3, [r7, #24]
 80053a8:	e01f      	b.n	80053ea <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053c8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053d0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053de:	461a      	mov	r2, r3
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	3301      	adds	r3, #1
 80053e8:	61bb      	str	r3, [r7, #24]
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	2b0f      	cmp	r3, #15
 80053ee:	d9dc      	bls.n	80053aa <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80053f0:	2300      	movs	r3, #0
 80053f2:	61bb      	str	r3, [r7, #24]
 80053f4:	e034      	b.n	8005460 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800540c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005414:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800541c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	4413      	add	r3, r2
 8005426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800542a:	461a      	mov	r2, r3
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	3301      	adds	r3, #1
 8005434:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800543c:	d80c      	bhi.n	8005458 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	4413      	add	r3, r2
 8005446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005450:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005454:	d0ec      	beq.n	8005430 <USB_StopHost+0xc8>
 8005456:	e000      	b.n	800545a <USB_StopHost+0xf2>
        break;
 8005458:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	3301      	adds	r3, #1
 800545e:	61bb      	str	r3, [r7, #24]
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	2b0f      	cmp	r3, #15
 8005464:	d9c7      	bls.n	80053f6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800546c:	461a      	mov	r2, r3
 800546e:	f04f 33ff 	mov.w	r3, #4294967295
 8005472:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f04f 32ff 	mov.w	r2, #4294967295
 800547a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7ff f881 	bl	8004584 <USB_EnableGlobalInt>

  return ret;
 8005482:	7ffb      	ldrb	r3, [r7, #31]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3720      	adds	r7, #32
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800548c:	b590      	push	{r4, r7, lr}
 800548e:	b089      	sub	sp, #36	; 0x24
 8005490:	af04      	add	r7, sp, #16
 8005492:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005494:	2301      	movs	r3, #1
 8005496:	2202      	movs	r2, #2
 8005498:	2102      	movs	r1, #2
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fc66 	bl	8005d6c <USBH_FindInterface>
 80054a0:	4603      	mov	r3, r0
 80054a2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
 80054a6:	2bff      	cmp	r3, #255	; 0xff
 80054a8:	d002      	beq.n	80054b0 <USBH_CDC_InterfaceInit+0x24>
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d901      	bls.n	80054b4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80054b0:	2302      	movs	r3, #2
 80054b2:	e13d      	b.n	8005730 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
 80054b6:	4619      	mov	r1, r3
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fc3b 	bl	8005d34 <USBH_SelectInterface>
 80054be:	4603      	mov	r3, r0
 80054c0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80054c2:	7bbb      	ldrb	r3, [r7, #14]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80054c8:	2302      	movs	r3, #2
 80054ca:	e131      	b.n	8005730 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80054d2:	2050      	movs	r0, #80	; 0x50
 80054d4:	f002 fafa 	bl	8007acc <malloc>
 80054d8:	4603      	mov	r3, r0
 80054da:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80054ec:	2302      	movs	r3, #2
 80054ee:	e11f      	b.n	8005730 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80054f0:	2250      	movs	r2, #80	; 0x50
 80054f2:	2100      	movs	r1, #0
 80054f4:	68b8      	ldr	r0, [r7, #8]
 80054f6:	f002 faf9 	bl	8007aec <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	211a      	movs	r1, #26
 8005500:	fb01 f303 	mul.w	r3, r1, r3
 8005504:	4413      	add	r3, r2
 8005506:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	b25b      	sxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	da15      	bge.n	800553e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005512:	7bfb      	ldrb	r3, [r7, #15]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	211a      	movs	r1, #26
 8005518:	fb01 f303 	mul.w	r3, r1, r3
 800551c:	4413      	add	r3, r2
 800551e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005522:	781a      	ldrb	r2, [r3, #0]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005528:	7bfb      	ldrb	r3, [r7, #15]
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	211a      	movs	r1, #26
 800552e:	fb01 f303 	mul.w	r3, r1, r3
 8005532:	4413      	add	r3, r2
 8005534:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005538:	881a      	ldrh	r2, [r3, #0]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	785b      	ldrb	r3, [r3, #1]
 8005542:	4619      	mov	r1, r3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f001 ff2c 	bl	80073a2 <USBH_AllocPipe>
 800554a:	4603      	mov	r3, r0
 800554c:	461a      	mov	r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	7819      	ldrb	r1, [r3, #0]
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	7858      	ldrb	r0, [r3, #1]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	8952      	ldrh	r2, [r2, #10]
 800556a:	9202      	str	r2, [sp, #8]
 800556c:	2203      	movs	r2, #3
 800556e:	9201      	str	r2, [sp, #4]
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	4623      	mov	r3, r4
 8005574:	4602      	mov	r2, r0
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f001 fee4 	bl	8007344 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2200      	movs	r2, #0
 8005582:	4619      	mov	r1, r3
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f002 f9f3 	bl	8007970 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800558a:	2300      	movs	r3, #0
 800558c:	2200      	movs	r2, #0
 800558e:	210a      	movs	r1, #10
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fbeb 	bl	8005d6c <USBH_FindInterface>
 8005596:	4603      	mov	r3, r0
 8005598:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800559a:	7bfb      	ldrb	r3, [r7, #15]
 800559c:	2bff      	cmp	r3, #255	; 0xff
 800559e:	d002      	beq.n	80055a6 <USBH_CDC_InterfaceInit+0x11a>
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d901      	bls.n	80055aa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80055a6:	2302      	movs	r3, #2
 80055a8:	e0c2      	b.n	8005730 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80055aa:	7bfb      	ldrb	r3, [r7, #15]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	211a      	movs	r1, #26
 80055b0:	fb01 f303 	mul.w	r3, r1, r3
 80055b4:	4413      	add	r3, r2
 80055b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	b25b      	sxtb	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	da16      	bge.n	80055f0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	211a      	movs	r1, #26
 80055c8:	fb01 f303 	mul.w	r3, r1, r3
 80055cc:	4413      	add	r3, r2
 80055ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80055d2:	781a      	ldrb	r2, [r3, #0]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	211a      	movs	r1, #26
 80055de:	fb01 f303 	mul.w	r3, r1, r3
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80055e8:	881a      	ldrh	r2, [r3, #0]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	835a      	strh	r2, [r3, #26]
 80055ee:	e015      	b.n	800561c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	211a      	movs	r1, #26
 80055f6:	fb01 f303 	mul.w	r3, r1, r3
 80055fa:	4413      	add	r3, r2
 80055fc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005600:	781a      	ldrb	r2, [r3, #0]
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005606:	7bfb      	ldrb	r3, [r7, #15]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	211a      	movs	r1, #26
 800560c:	fb01 f303 	mul.w	r3, r1, r3
 8005610:	4413      	add	r3, r2
 8005612:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005616:	881a      	ldrh	r2, [r3, #0]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800561c:	7bfb      	ldrb	r3, [r7, #15]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	211a      	movs	r1, #26
 8005622:	fb01 f303 	mul.w	r3, r1, r3
 8005626:	4413      	add	r3, r2
 8005628:	f203 3356 	addw	r3, r3, #854	; 0x356
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	b25b      	sxtb	r3, r3
 8005630:	2b00      	cmp	r3, #0
 8005632:	da16      	bge.n	8005662 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005634:	7bfb      	ldrb	r3, [r7, #15]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	211a      	movs	r1, #26
 800563a:	fb01 f303 	mul.w	r3, r1, r3
 800563e:	4413      	add	r3, r2
 8005640:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005644:	781a      	ldrb	r2, [r3, #0]
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800564a:	7bfb      	ldrb	r3, [r7, #15]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	211a      	movs	r1, #26
 8005650:	fb01 f303 	mul.w	r3, r1, r3
 8005654:	4413      	add	r3, r2
 8005656:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800565a:	881a      	ldrh	r2, [r3, #0]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	835a      	strh	r2, [r3, #26]
 8005660:	e015      	b.n	800568e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005662:	7bfb      	ldrb	r3, [r7, #15]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	211a      	movs	r1, #26
 8005668:	fb01 f303 	mul.w	r3, r1, r3
 800566c:	4413      	add	r3, r2
 800566e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005672:	781a      	ldrb	r2, [r3, #0]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005678:	7bfb      	ldrb	r3, [r7, #15]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	211a      	movs	r1, #26
 800567e:	fb01 f303 	mul.w	r3, r1, r3
 8005682:	4413      	add	r3, r2
 8005684:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005688:	881a      	ldrh	r2, [r3, #0]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	7b9b      	ldrb	r3, [r3, #14]
 8005692:	4619      	mov	r1, r3
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f001 fe84 	bl	80073a2 <USBH_AllocPipe>
 800569a:	4603      	mov	r3, r0
 800569c:	461a      	mov	r2, r3
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	7bdb      	ldrb	r3, [r3, #15]
 80056a6:	4619      	mov	r1, r3
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f001 fe7a 	bl	80073a2 <USBH_AllocPipe>
 80056ae:	4603      	mov	r3, r0
 80056b0:	461a      	mov	r2, r3
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	7b59      	ldrb	r1, [r3, #13]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	7b98      	ldrb	r0, [r3, #14]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	8b12      	ldrh	r2, [r2, #24]
 80056ce:	9202      	str	r2, [sp, #8]
 80056d0:	2202      	movs	r2, #2
 80056d2:	9201      	str	r2, [sp, #4]
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	4623      	mov	r3, r4
 80056d8:	4602      	mov	r2, r0
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f001 fe32 	bl	8007344 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	7b19      	ldrb	r1, [r3, #12]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	7bd8      	ldrb	r0, [r3, #15]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	8b52      	ldrh	r2, [r2, #26]
 80056f8:	9202      	str	r2, [sp, #8]
 80056fa:	2202      	movs	r2, #2
 80056fc:	9201      	str	r2, [sp, #4]
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	4623      	mov	r3, r4
 8005702:	4602      	mov	r2, r0
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f001 fe1d 	bl	8007344 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	7b5b      	ldrb	r3, [r3, #13]
 8005716:	2200      	movs	r2, #0
 8005718:	4619      	mov	r1, r3
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f002 f928 	bl	8007970 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	7b1b      	ldrb	r3, [r3, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	4619      	mov	r1, r3
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f002 f921 	bl	8007970 <USBH_LL_SetToggle>

  return USBH_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	bd90      	pop	{r4, r7, pc}

08005738 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005746:	69db      	ldr	r3, [r3, #28]
 8005748:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00e      	beq.n	8005770 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	4619      	mov	r1, r3
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f001 fe12 	bl	8007382 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	4619      	mov	r1, r3
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f001 fe3d 	bl	80073e4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	7b1b      	ldrb	r3, [r3, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00e      	beq.n	8005796 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	7b1b      	ldrb	r3, [r3, #12]
 800577c:	4619      	mov	r1, r3
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f001 fdff 	bl	8007382 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	7b1b      	ldrb	r3, [r3, #12]
 8005788:	4619      	mov	r1, r3
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f001 fe2a 	bl	80073e4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	7b5b      	ldrb	r3, [r3, #13]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00e      	beq.n	80057bc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	7b5b      	ldrb	r3, [r3, #13]
 80057a2:	4619      	mov	r1, r3
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f001 fdec 	bl	8007382 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	7b5b      	ldrb	r3, [r3, #13]
 80057ae:	4619      	mov	r1, r3
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f001 fe17 	bl	80073e4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057c2:	69db      	ldr	r3, [r3, #28]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00b      	beq.n	80057e0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f002 f983 	bl	8007adc <free>
    phost->pActiveClass->pData = 0U;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057dc:	2200      	movs	r2, #0
 80057de:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3340      	adds	r3, #64	; 0x40
 8005800:	4619      	mov	r1, r3
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f8b1 	bl	800596a <GetLineCoding>
 8005808:	4603      	mov	r3, r0
 800580a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800580c:	7afb      	ldrb	r3, [r7, #11]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d105      	bne.n	800581e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005818:	2102      	movs	r1, #2
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800581e:	7afb      	ldrb	r3, [r7, #11]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005830:	2301      	movs	r3, #1
 8005832:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005834:	2300      	movs	r3, #0
 8005836:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005848:	2b04      	cmp	r3, #4
 800584a:	d877      	bhi.n	800593c <USBH_CDC_Process+0x114>
 800584c:	a201      	add	r2, pc, #4	; (adr r2, 8005854 <USBH_CDC_Process+0x2c>)
 800584e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005852:	bf00      	nop
 8005854:	08005869 	.word	0x08005869
 8005858:	0800586f 	.word	0x0800586f
 800585c:	0800589f 	.word	0x0800589f
 8005860:	08005913 	.word	0x08005913
 8005864:	08005921 	.word	0x08005921
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005868:	2300      	movs	r3, #0
 800586a:	73fb      	strb	r3, [r7, #15]
      break;
 800586c:	e06d      	b.n	800594a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005872:	4619      	mov	r1, r3
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f897 	bl	80059a8 <SetLineCoding>
 800587a:	4603      	mov	r3, r0
 800587c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800587e:	7bbb      	ldrb	r3, [r7, #14]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d104      	bne.n	800588e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800588c:	e058      	b.n	8005940 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800588e:	7bbb      	ldrb	r3, [r7, #14]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d055      	beq.n	8005940 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2204      	movs	r2, #4
 8005898:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800589c:	e050      	b.n	8005940 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	3340      	adds	r3, #64	; 0x40
 80058a2:	4619      	mov	r1, r3
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f860 	bl	800596a <GetLineCoding>
 80058aa:	4603      	mov	r3, r0
 80058ac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80058ae:	7bbb      	ldrb	r3, [r7, #14]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d126      	bne.n	8005902 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058c6:	791b      	ldrb	r3, [r3, #4]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d13b      	bne.n	8005944 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80058d8:	429a      	cmp	r2, r3
 80058da:	d133      	bne.n	8005944 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058e6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d12b      	bne.n	8005944 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058f4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d124      	bne.n	8005944 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f958 	bl	8005bb0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005900:	e020      	b.n	8005944 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005902:	7bbb      	ldrb	r3, [r7, #14]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d01d      	beq.n	8005944 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2204      	movs	r2, #4
 800590c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005910:	e018      	b.n	8005944 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f867 	bl	80059e6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f8da 	bl	8005ad2 <CDC_ProcessReception>
      break;
 800591e:	e014      	b.n	800594a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005920:	2100      	movs	r1, #0
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 ffef 	bl	8006906 <USBH_ClrFeature>
 8005928:	4603      	mov	r3, r0
 800592a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800592c:	7bbb      	ldrb	r3, [r7, #14]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10a      	bne.n	8005948 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800593a:	e005      	b.n	8005948 <USBH_CDC_Process+0x120>

    default:
      break;
 800593c:	bf00      	nop
 800593e:	e004      	b.n	800594a <USBH_CDC_Process+0x122>
      break;
 8005940:	bf00      	nop
 8005942:	e002      	b.n	800594a <USBH_CDC_Process+0x122>
      break;
 8005944:	bf00      	nop
 8005946:	e000      	b.n	800594a <USBH_CDC_Process+0x122>
      break;
 8005948:	bf00      	nop

  }

  return status;
 800594a:	7bfb      	ldrb	r3, [r7, #15]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b082      	sub	sp, #8
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	22a1      	movs	r2, #161	; 0xa1
 8005978:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2221      	movs	r2, #33	; 0x21
 800597e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2207      	movs	r2, #7
 8005990:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2207      	movs	r2, #7
 8005996:	4619      	mov	r1, r3
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f001 fa81 	bl	8006ea0 <USBH_CtlReq>
 800599e:	4603      	mov	r3, r0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2221      	movs	r2, #33	; 0x21
 80059b6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2220      	movs	r2, #32
 80059bc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2207      	movs	r2, #7
 80059ce:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2207      	movs	r2, #7
 80059d4:	4619      	mov	r1, r3
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f001 fa62 	bl	8006ea0 <USBH_CtlReq>
 80059dc:	4603      	mov	r3, r0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b086      	sub	sp, #24
 80059ea:	af02      	add	r7, sp, #8
 80059ec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80059f8:	2300      	movs	r3, #0
 80059fa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d002      	beq.n	8005a0c <CDC_ProcessTransmission+0x26>
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d023      	beq.n	8005a52 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005a0a:	e05e      	b.n	8005aca <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	8b12      	ldrh	r2, [r2, #24]
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d90b      	bls.n	8005a30 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	69d9      	ldr	r1, [r3, #28]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8b1a      	ldrh	r2, [r3, #24]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	7b5b      	ldrb	r3, [r3, #13]
 8005a24:	2001      	movs	r0, #1
 8005a26:	9000      	str	r0, [sp, #0]
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f001 fc48 	bl	80072be <USBH_BulkSendData>
 8005a2e:	e00b      	b.n	8005a48 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	7b5b      	ldrb	r3, [r3, #13]
 8005a3e:	2001      	movs	r0, #1
 8005a40:	9000      	str	r0, [sp, #0]
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f001 fc3b 	bl	80072be <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005a50:	e03b      	b.n	8005aca <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	7b5b      	ldrb	r3, [r3, #13]
 8005a56:	4619      	mov	r1, r3
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f001 ff5f 	bl	800791c <USBH_LL_GetURBState>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005a62:	7afb      	ldrb	r3, [r7, #11]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d128      	bne.n	8005aba <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	8b12      	ldrh	r2, [r2, #24]
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d90e      	bls.n	8005a92 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	8b12      	ldrh	r2, [r2, #24]
 8005a7c:	1a9a      	subs	r2, r3, r2
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	8b12      	ldrh	r2, [r2, #24]
 8005a8a:	441a      	add	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	61da      	str	r2, [r3, #28]
 8005a90:	e002      	b.n	8005a98 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d004      	beq.n	8005aaa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005aa8:	e00e      	b.n	8005ac8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f868 	bl	8005b88 <USBH_CDC_TransmitCallback>
      break;
 8005ab8:	e006      	b.n	8005ac8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005aba:	7afb      	ldrb	r3, [r7, #11]
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d103      	bne.n	8005ac8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005ac8:	bf00      	nop
  }
}
 8005aca:	bf00      	nop
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b086      	sub	sp, #24
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	d002      	beq.n	8005af8 <CDC_ProcessReception+0x26>
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d00e      	beq.n	8005b14 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005af6:	e043      	b.n	8005b80 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	6a19      	ldr	r1, [r3, #32]
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	8b5a      	ldrh	r2, [r3, #26]
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	7b1b      	ldrb	r3, [r3, #12]
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f001 fbff 	bl	8007308 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2204      	movs	r2, #4
 8005b0e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005b12:	e035      	b.n	8005b80 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	7b1b      	ldrb	r3, [r3, #12]
 8005b18:	4619      	mov	r1, r3
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f001 fefe 	bl	800791c <USBH_LL_GetURBState>
 8005b20:	4603      	mov	r3, r0
 8005b22:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005b24:	7cfb      	ldrb	r3, [r7, #19]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d129      	bne.n	8005b7e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	7b1b      	ldrb	r3, [r3, #12]
 8005b2e:	4619      	mov	r1, r3
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f001 fe61 	bl	80077f8 <USBH_LL_GetLastXferSize>
 8005b36:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d016      	beq.n	8005b70 <CDC_ProcessReception+0x9e>
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	8b5b      	ldrh	r3, [r3, #26]
 8005b46:	461a      	mov	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d910      	bls.n	8005b70 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	1ad2      	subs	r2, r2, r3
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	6a1a      	ldr	r2, [r3, #32]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	441a      	add	r2, r3
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	2203      	movs	r2, #3
 8005b6a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005b6e:	e006      	b.n	8005b7e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f80f 	bl	8005b9c <USBH_CDC_ReceiveCallback>
      break;
 8005b7e:	bf00      	nop
  }
}
 8005b80:	bf00      	nop
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005bd8:	2302      	movs	r3, #2
 8005bda:	e029      	b.n	8005c30 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	79fa      	ldrb	r2, [r7, #7]
 8005be0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 f81f 	bl	8005c38 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d003      	beq.n	8005c28 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f001 fd31 	bl	8007690 <USBH_LL_Init>

  return USBH_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005c40:	2300      	movs	r3, #0
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005c44:	2300      	movs	r3, #0
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	e009      	b.n	8005c5e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	33e0      	adds	r3, #224	; 0xe0
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	2200      	movs	r2, #0
 8005c56:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	60fb      	str	r3, [r7, #12]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2b0f      	cmp	r3, #15
 8005c62:	d9f2      	bls.n	8005c4a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005c64:	2300      	movs	r3, #0
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	e009      	b.n	8005c7e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005c74:	2200      	movs	r2, #0
 8005c76:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	60fb      	str	r3, [r7, #12]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c84:	d3f1      	bcc.n	8005c6a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2240      	movs	r2, #64	; 0x40
 8005caa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005cea:	2300      	movs	r3, #0
 8005cec:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d016      	beq.n	8005d22 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10e      	bne.n	8005d1c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005d04:	1c59      	adds	r1, r3, #1
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	33de      	adds	r3, #222	; 0xde
 8005d10:	6839      	ldr	r1, [r7, #0]
 8005d12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	73fb      	strb	r3, [r7, #15]
 8005d1a:	e004      	b.n	8005d26 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	73fb      	strb	r3, [r7, #15]
 8005d20:	e001      	b.n	8005d26 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005d22:	2302      	movs	r3, #2
 8005d24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005d40:	2300      	movs	r3, #0
 8005d42:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005d4a:	78fa      	ldrb	r2, [r7, #3]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d204      	bcs.n	8005d5a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	78fa      	ldrb	r2, [r7, #3]
 8005d54:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005d58:	e001      	b.n	8005d5e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	4608      	mov	r0, r1
 8005d76:	4611      	mov	r1, r2
 8005d78:	461a      	mov	r2, r3
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	70fb      	strb	r3, [r7, #3]
 8005d7e:	460b      	mov	r3, r1
 8005d80:	70bb      	strb	r3, [r7, #2]
 8005d82:	4613      	mov	r3, r2
 8005d84:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005d86:	2300      	movs	r3, #0
 8005d88:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005d94:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005d96:	e025      	b.n	8005de4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005d98:	7dfb      	ldrb	r3, [r7, #23]
 8005d9a:	221a      	movs	r2, #26
 8005d9c:	fb02 f303 	mul.w	r3, r2, r3
 8005da0:	3308      	adds	r3, #8
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	4413      	add	r3, r2
 8005da6:	3302      	adds	r3, #2
 8005da8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	795b      	ldrb	r3, [r3, #5]
 8005dae:	78fa      	ldrb	r2, [r7, #3]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d002      	beq.n	8005dba <USBH_FindInterface+0x4e>
 8005db4:	78fb      	ldrb	r3, [r7, #3]
 8005db6:	2bff      	cmp	r3, #255	; 0xff
 8005db8:	d111      	bne.n	8005dde <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005dbe:	78ba      	ldrb	r2, [r7, #2]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d002      	beq.n	8005dca <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005dc4:	78bb      	ldrb	r3, [r7, #2]
 8005dc6:	2bff      	cmp	r3, #255	; 0xff
 8005dc8:	d109      	bne.n	8005dde <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005dce:	787a      	ldrb	r2, [r7, #1]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d002      	beq.n	8005dda <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005dd4:	787b      	ldrb	r3, [r7, #1]
 8005dd6:	2bff      	cmp	r3, #255	; 0xff
 8005dd8:	d101      	bne.n	8005dde <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005dda:	7dfb      	ldrb	r3, [r7, #23]
 8005ddc:	e006      	b.n	8005dec <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005dde:	7dfb      	ldrb	r3, [r7, #23]
 8005de0:	3301      	adds	r3, #1
 8005de2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005de4:	7dfb      	ldrb	r3, [r7, #23]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d9d6      	bls.n	8005d98 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005dea:	23ff      	movs	r3, #255	; 0xff
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	371c      	adds	r7, #28
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f001 fc81 	bl	8007708 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005e06:	2101      	movs	r1, #1
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f001 fd9a 	bl	8007942 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b088      	sub	sp, #32
 8005e1c:	af04      	add	r7, sp, #16
 8005e1e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005e20:	2302      	movs	r3, #2
 8005e22:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d102      	bne.n	8005e3a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2203      	movs	r2, #3
 8005e38:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b0b      	cmp	r3, #11
 8005e42:	f200 81be 	bhi.w	80061c2 <USBH_Process+0x3aa>
 8005e46:	a201      	add	r2, pc, #4	; (adr r2, 8005e4c <USBH_Process+0x34>)
 8005e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4c:	08005e7d 	.word	0x08005e7d
 8005e50:	08005eaf 	.word	0x08005eaf
 8005e54:	08005f17 	.word	0x08005f17
 8005e58:	0800615d 	.word	0x0800615d
 8005e5c:	080061c3 	.word	0x080061c3
 8005e60:	08005fbb 	.word	0x08005fbb
 8005e64:	08006103 	.word	0x08006103
 8005e68:	08005ff1 	.word	0x08005ff1
 8005e6c:	08006011 	.word	0x08006011
 8005e70:	08006031 	.word	0x08006031
 8005e74:	08006075 	.word	0x08006075
 8005e78:	08006145 	.word	0x08006145
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 819e 	beq.w	80061c6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005e90:	20c8      	movs	r0, #200	; 0xc8
 8005e92:	f001 fd9d 	bl	80079d0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f001 fc93 	bl	80077c2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005eac:	e18b      	b.n	80061c6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d107      	bne.n	8005ec8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005ec6:	e18d      	b.n	80061e4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005ece:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ed2:	d914      	bls.n	8005efe <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005eda:	3301      	adds	r3, #1
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005eea:	2b03      	cmp	r3, #3
 8005eec:	d903      	bls.n	8005ef6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	220d      	movs	r2, #13
 8005ef2:	701a      	strb	r2, [r3, #0]
      break;
 8005ef4:	e176      	b.n	80061e4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	701a      	strb	r2, [r3, #0]
      break;
 8005efc:	e172      	b.n	80061e4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005f04:	f103 020a 	add.w	r2, r3, #10
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005f0e:	200a      	movs	r0, #10
 8005f10:	f001 fd5e 	bl	80079d0 <USBH_Delay>
      break;
 8005f14:	e166      	b.n	80061e4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d005      	beq.n	8005f2c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f26:	2104      	movs	r1, #4
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005f2c:	2064      	movs	r0, #100	; 0x64
 8005f2e:	f001 fd4f 	bl	80079d0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f001 fc1e 	bl	8007774 <USBH_LL_GetSpeed>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2205      	movs	r2, #5
 8005f46:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005f48:	2100      	movs	r1, #0
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f001 fa29 	bl	80073a2 <USBH_AllocPipe>
 8005f50:	4603      	mov	r3, r0
 8005f52:	461a      	mov	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005f58:	2180      	movs	r1, #128	; 0x80
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f001 fa21 	bl	80073a2 <USBH_AllocPipe>
 8005f60:	4603      	mov	r3, r0
 8005f62:	461a      	mov	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	7919      	ldrb	r1, [r3, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005f7c:	b292      	uxth	r2, r2
 8005f7e:	9202      	str	r2, [sp, #8]
 8005f80:	2200      	movs	r2, #0
 8005f82:	9201      	str	r2, [sp, #4]
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	4603      	mov	r3, r0
 8005f88:	2280      	movs	r2, #128	; 0x80
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f001 f9da 	bl	8007344 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	7959      	ldrb	r1, [r3, #5]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005fa4:	b292      	uxth	r2, r2
 8005fa6:	9202      	str	r2, [sp, #8]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	9201      	str	r2, [sp, #4]
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f001 f9c6 	bl	8007344 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005fb8:	e114      	b.n	80061e4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f918 	bl	80061f0 <USBH_HandleEnum>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005fc4:	7bbb      	ldrb	r3, [r7, #14]
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f040 80fe 	bne.w	80061ca <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d103      	bne.n	8005fe8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2208      	movs	r2, #8
 8005fe4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005fe6:	e0f0      	b.n	80061ca <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2207      	movs	r2, #7
 8005fec:	701a      	strb	r2, [r3, #0]
      break;
 8005fee:	e0ec      	b.n	80061ca <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 80e9 	beq.w	80061ce <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006002:	2101      	movs	r1, #1
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2208      	movs	r2, #8
 800600c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800600e:	e0de      	b.n	80061ce <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006016:	b29b      	uxth	r3, r3
 8006018:	4619      	mov	r1, r3
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fc2c 	bl	8006878 <USBH_SetCfg>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	f040 80d5 	bne.w	80061d2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2209      	movs	r2, #9
 800602c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800602e:	e0d0      	b.n	80061d2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006036:	f003 0320 	and.w	r3, r3, #32
 800603a:	2b00      	cmp	r3, #0
 800603c:	d016      	beq.n	800606c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800603e:	2101      	movs	r1, #1
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 fc3c 	bl	80068be <USBH_SetFeature>
 8006046:	4603      	mov	r3, r0
 8006048:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800604a:	7bbb      	ldrb	r3, [r7, #14]
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d103      	bne.n	800605a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	220a      	movs	r2, #10
 8006056:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006058:	e0bd      	b.n	80061d6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800605a:	7bbb      	ldrb	r3, [r7, #14]
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b03      	cmp	r3, #3
 8006060:	f040 80b9 	bne.w	80061d6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	220a      	movs	r2, #10
 8006068:	701a      	strb	r2, [r3, #0]
      break;
 800606a:	e0b4      	b.n	80061d6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	220a      	movs	r2, #10
 8006070:	701a      	strb	r2, [r3, #0]
      break;
 8006072:	e0b0      	b.n	80061d6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800607a:	2b00      	cmp	r3, #0
 800607c:	f000 80ad 	beq.w	80061da <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006088:	2300      	movs	r3, #0
 800608a:	73fb      	strb	r3, [r7, #15]
 800608c:	e016      	b.n	80060bc <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800608e:	7bfa      	ldrb	r2, [r7, #15]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	32de      	adds	r2, #222	; 0xde
 8006094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006098:	791a      	ldrb	r2, [r3, #4]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d108      	bne.n	80060b6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80060a4:	7bfa      	ldrb	r2, [r7, #15]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	32de      	adds	r2, #222	; 0xde
 80060aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80060b4:	e005      	b.n	80060c2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80060b6:	7bfb      	ldrb	r3, [r7, #15]
 80060b8:	3301      	adds	r3, #1
 80060ba:	73fb      	strb	r3, [r7, #15]
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0e5      	beq.n	800608e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d016      	beq.n	80060fa <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	4798      	blx	r3
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d109      	bne.n	80060f2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2206      	movs	r2, #6
 80060e2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060ea:	2103      	movs	r1, #3
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80060f0:	e073      	b.n	80061da <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	220d      	movs	r2, #13
 80060f6:	701a      	strb	r2, [r3, #0]
      break;
 80060f8:	e06f      	b.n	80061da <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	220d      	movs	r2, #13
 80060fe:	701a      	strb	r2, [r3, #0]
      break;
 8006100:	e06b      	b.n	80061da <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006108:	2b00      	cmp	r3, #0
 800610a:	d017      	beq.n	800613c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	4798      	blx	r3
 8006118:	4603      	mov	r3, r0
 800611a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800611c:	7bbb      	ldrb	r3, [r7, #14]
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b00      	cmp	r3, #0
 8006122:	d103      	bne.n	800612c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	220b      	movs	r2, #11
 8006128:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800612a:	e058      	b.n	80061de <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800612c:	7bbb      	ldrb	r3, [r7, #14]
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b02      	cmp	r3, #2
 8006132:	d154      	bne.n	80061de <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	220d      	movs	r2, #13
 8006138:	701a      	strb	r2, [r3, #0]
      break;
 800613a:	e050      	b.n	80061de <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	220d      	movs	r2, #13
 8006140:	701a      	strb	r2, [r3, #0]
      break;
 8006142:	e04c      	b.n	80061de <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800614a:	2b00      	cmp	r3, #0
 800614c:	d049      	beq.n	80061e2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	4798      	blx	r3
      }
      break;
 800615a:	e042      	b.n	80061e2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7ff fd67 	bl	8005c38 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d009      	beq.n	8006188 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800618e:	2b00      	cmp	r3, #0
 8006190:	d005      	beq.n	800619e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006198:	2105      	movs	r1, #5
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d107      	bne.n	80061ba <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff fe20 	bl	8005df8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80061b8:	e014      	b.n	80061e4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f001 faa4 	bl	8007708 <USBH_LL_Start>
      break;
 80061c0:	e010      	b.n	80061e4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80061c2:	bf00      	nop
 80061c4:	e00e      	b.n	80061e4 <USBH_Process+0x3cc>
      break;
 80061c6:	bf00      	nop
 80061c8:	e00c      	b.n	80061e4 <USBH_Process+0x3cc>
      break;
 80061ca:	bf00      	nop
 80061cc:	e00a      	b.n	80061e4 <USBH_Process+0x3cc>
    break;
 80061ce:	bf00      	nop
 80061d0:	e008      	b.n	80061e4 <USBH_Process+0x3cc>
      break;
 80061d2:	bf00      	nop
 80061d4:	e006      	b.n	80061e4 <USBH_Process+0x3cc>
      break;
 80061d6:	bf00      	nop
 80061d8:	e004      	b.n	80061e4 <USBH_Process+0x3cc>
      break;
 80061da:	bf00      	nop
 80061dc:	e002      	b.n	80061e4 <USBH_Process+0x3cc>
      break;
 80061de:	bf00      	nop
 80061e0:	e000      	b.n	80061e4 <USBH_Process+0x3cc>
      break;
 80061e2:	bf00      	nop
  }
  return USBH_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop

080061f0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b088      	sub	sp, #32
 80061f4:	af04      	add	r7, sp, #16
 80061f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80061f8:	2301      	movs	r3, #1
 80061fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80061fc:	2301      	movs	r3, #1
 80061fe:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	785b      	ldrb	r3, [r3, #1]
 8006204:	2b07      	cmp	r3, #7
 8006206:	f200 81c1 	bhi.w	800658c <USBH_HandleEnum+0x39c>
 800620a:	a201      	add	r2, pc, #4	; (adr r2, 8006210 <USBH_HandleEnum+0x20>)
 800620c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006210:	08006231 	.word	0x08006231
 8006214:	080062ef 	.word	0x080062ef
 8006218:	08006359 	.word	0x08006359
 800621c:	080063e7 	.word	0x080063e7
 8006220:	08006451 	.word	0x08006451
 8006224:	080064c1 	.word	0x080064c1
 8006228:	08006507 	.word	0x08006507
 800622c:	0800654d 	.word	0x0800654d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006230:	2108      	movs	r1, #8
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fa50 	bl	80066d8 <USBH_Get_DevDesc>
 8006238:	4603      	mov	r3, r0
 800623a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800623c:	7bbb      	ldrb	r3, [r7, #14]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d130      	bne.n	80062a4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	7919      	ldrb	r1, [r3, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006266:	b292      	uxth	r2, r2
 8006268:	9202      	str	r2, [sp, #8]
 800626a:	2200      	movs	r2, #0
 800626c:	9201      	str	r2, [sp, #4]
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	4603      	mov	r3, r0
 8006272:	2280      	movs	r2, #128	; 0x80
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f001 f865 	bl	8007344 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	7959      	ldrb	r1, [r3, #5]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800628e:	b292      	uxth	r2, r2
 8006290:	9202      	str	r2, [sp, #8]
 8006292:	2200      	movs	r2, #0
 8006294:	9201      	str	r2, [sp, #4]
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	4603      	mov	r3, r0
 800629a:	2200      	movs	r2, #0
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f001 f851 	bl	8007344 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80062a2:	e175      	b.n	8006590 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80062a4:	7bbb      	ldrb	r3, [r7, #14]
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	f040 8172 	bne.w	8006590 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80062b2:	3301      	adds	r3, #1
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80062c2:	2b03      	cmp	r3, #3
 80062c4:	d903      	bls.n	80062ce <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	220d      	movs	r2, #13
 80062ca:	701a      	strb	r2, [r3, #0]
      break;
 80062cc:	e160      	b.n	8006590 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	795b      	ldrb	r3, [r3, #5]
 80062d2:	4619      	mov	r1, r3
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f001 f885 	bl	80073e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	791b      	ldrb	r3, [r3, #4]
 80062de:	4619      	mov	r1, r3
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f001 f87f 	bl	80073e4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	701a      	strb	r2, [r3, #0]
      break;
 80062ec:	e150      	b.n	8006590 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80062ee:	2112      	movs	r1, #18
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 f9f1 	bl	80066d8 <USBH_Get_DevDesc>
 80062f6:	4603      	mov	r3, r0
 80062f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80062fa:	7bbb      	ldrb	r3, [r7, #14]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d103      	bne.n	8006308 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2202      	movs	r2, #2
 8006304:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006306:	e145      	b.n	8006594 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006308:	7bbb      	ldrb	r3, [r7, #14]
 800630a:	2b03      	cmp	r3, #3
 800630c:	f040 8142 	bne.w	8006594 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006316:	3301      	adds	r3, #1
 8006318:	b2da      	uxtb	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006326:	2b03      	cmp	r3, #3
 8006328:	d903      	bls.n	8006332 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	220d      	movs	r2, #13
 800632e:	701a      	strb	r2, [r3, #0]
      break;
 8006330:	e130      	b.n	8006594 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	795b      	ldrb	r3, [r3, #5]
 8006336:	4619      	mov	r1, r3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f001 f853 	bl	80073e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	791b      	ldrb	r3, [r3, #4]
 8006342:	4619      	mov	r1, r3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f001 f84d 	bl	80073e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	701a      	strb	r2, [r3, #0]
      break;
 8006356:	e11d      	b.n	8006594 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006358:	2101      	movs	r1, #1
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fa68 	bl	8006830 <USBH_SetAddress>
 8006360:	4603      	mov	r3, r0
 8006362:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006364:	7bbb      	ldrb	r3, [r7, #14]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d132      	bne.n	80063d0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800636a:	2002      	movs	r0, #2
 800636c:	f001 fb30 	bl	80079d0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2203      	movs	r2, #3
 800637c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	7919      	ldrb	r1, [r3, #4]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006392:	b292      	uxth	r2, r2
 8006394:	9202      	str	r2, [sp, #8]
 8006396:	2200      	movs	r2, #0
 8006398:	9201      	str	r2, [sp, #4]
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	4603      	mov	r3, r0
 800639e:	2280      	movs	r2, #128	; 0x80
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 ffcf 	bl	8007344 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	7959      	ldrb	r1, [r3, #5]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80063ba:	b292      	uxth	r2, r2
 80063bc:	9202      	str	r2, [sp, #8]
 80063be:	2200      	movs	r2, #0
 80063c0:	9201      	str	r2, [sp, #4]
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	4603      	mov	r3, r0
 80063c6:	2200      	movs	r2, #0
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 ffbb 	bl	8007344 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80063ce:	e0e3      	b.n	8006598 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80063d0:	7bbb      	ldrb	r3, [r7, #14]
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	f040 80e0 	bne.w	8006598 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	220d      	movs	r2, #13
 80063dc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	705a      	strb	r2, [r3, #1]
      break;
 80063e4:	e0d8      	b.n	8006598 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80063e6:	2109      	movs	r1, #9
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 f99d 	bl	8006728 <USBH_Get_CfgDesc>
 80063ee:	4603      	mov	r3, r0
 80063f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80063f2:	7bbb      	ldrb	r3, [r7, #14]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d103      	bne.n	8006400 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2204      	movs	r2, #4
 80063fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80063fe:	e0cd      	b.n	800659c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006400:	7bbb      	ldrb	r3, [r7, #14]
 8006402:	2b03      	cmp	r3, #3
 8006404:	f040 80ca 	bne.w	800659c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800640e:	3301      	adds	r3, #1
 8006410:	b2da      	uxtb	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800641e:	2b03      	cmp	r3, #3
 8006420:	d903      	bls.n	800642a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	220d      	movs	r2, #13
 8006426:	701a      	strb	r2, [r3, #0]
      break;
 8006428:	e0b8      	b.n	800659c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	795b      	ldrb	r3, [r3, #5]
 800642e:	4619      	mov	r1, r3
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 ffd7 	bl	80073e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	791b      	ldrb	r3, [r3, #4]
 800643a:	4619      	mov	r1, r3
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 ffd1 	bl	80073e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	701a      	strb	r2, [r3, #0]
      break;
 800644e:	e0a5      	b.n	800659c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006456:	4619      	mov	r1, r3
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 f965 	bl	8006728 <USBH_Get_CfgDesc>
 800645e:	4603      	mov	r3, r0
 8006460:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006462:	7bbb      	ldrb	r3, [r7, #14]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d103      	bne.n	8006470 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2205      	movs	r2, #5
 800646c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800646e:	e097      	b.n	80065a0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006470:	7bbb      	ldrb	r3, [r7, #14]
 8006472:	2b03      	cmp	r3, #3
 8006474:	f040 8094 	bne.w	80065a0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800647e:	3301      	adds	r3, #1
 8006480:	b2da      	uxtb	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800648e:	2b03      	cmp	r3, #3
 8006490:	d903      	bls.n	800649a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	220d      	movs	r2, #13
 8006496:	701a      	strb	r2, [r3, #0]
      break;
 8006498:	e082      	b.n	80065a0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	795b      	ldrb	r3, [r3, #5]
 800649e:	4619      	mov	r1, r3
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 ff9f 	bl	80073e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	791b      	ldrb	r3, [r3, #4]
 80064aa:	4619      	mov	r1, r3
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 ff99 	bl	80073e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	701a      	strb	r2, [r3, #0]
      break;
 80064be:	e06f      	b.n	80065a0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d019      	beq.n	80064fe <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80064d6:	23ff      	movs	r3, #255	; 0xff
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f949 	bl	8006770 <USBH_Get_StringDesc>
 80064de:	4603      	mov	r3, r0
 80064e0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80064e2:	7bbb      	ldrb	r3, [r7, #14]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d103      	bne.n	80064f0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2206      	movs	r2, #6
 80064ec:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80064ee:	e059      	b.n	80065a4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064f0:	7bbb      	ldrb	r3, [r7, #14]
 80064f2:	2b03      	cmp	r3, #3
 80064f4:	d156      	bne.n	80065a4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2206      	movs	r2, #6
 80064fa:	705a      	strb	r2, [r3, #1]
      break;
 80064fc:	e052      	b.n	80065a4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2206      	movs	r2, #6
 8006502:	705a      	strb	r2, [r3, #1]
      break;
 8006504:	e04e      	b.n	80065a4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800650c:	2b00      	cmp	r3, #0
 800650e:	d019      	beq.n	8006544 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800651c:	23ff      	movs	r3, #255	; 0xff
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f926 	bl	8006770 <USBH_Get_StringDesc>
 8006524:	4603      	mov	r3, r0
 8006526:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006528:	7bbb      	ldrb	r3, [r7, #14]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d103      	bne.n	8006536 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2207      	movs	r2, #7
 8006532:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006534:	e038      	b.n	80065a8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006536:	7bbb      	ldrb	r3, [r7, #14]
 8006538:	2b03      	cmp	r3, #3
 800653a:	d135      	bne.n	80065a8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2207      	movs	r2, #7
 8006540:	705a      	strb	r2, [r3, #1]
      break;
 8006542:	e031      	b.n	80065a8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2207      	movs	r2, #7
 8006548:	705a      	strb	r2, [r3, #1]
      break;
 800654a:	e02d      	b.n	80065a8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006552:	2b00      	cmp	r3, #0
 8006554:	d017      	beq.n	8006586 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006562:	23ff      	movs	r3, #255	; 0xff
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f903 	bl	8006770 <USBH_Get_StringDesc>
 800656a:	4603      	mov	r3, r0
 800656c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800656e:	7bbb      	ldrb	r3, [r7, #14]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d102      	bne.n	800657a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006574:	2300      	movs	r3, #0
 8006576:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006578:	e018      	b.n	80065ac <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800657a:	7bbb      	ldrb	r3, [r7, #14]
 800657c:	2b03      	cmp	r3, #3
 800657e:	d115      	bne.n	80065ac <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	73fb      	strb	r3, [r7, #15]
      break;
 8006584:	e012      	b.n	80065ac <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	73fb      	strb	r3, [r7, #15]
      break;
 800658a:	e00f      	b.n	80065ac <USBH_HandleEnum+0x3bc>

    default:
      break;
 800658c:	bf00      	nop
 800658e:	e00e      	b.n	80065ae <USBH_HandleEnum+0x3be>
      break;
 8006590:	bf00      	nop
 8006592:	e00c      	b.n	80065ae <USBH_HandleEnum+0x3be>
      break;
 8006594:	bf00      	nop
 8006596:	e00a      	b.n	80065ae <USBH_HandleEnum+0x3be>
      break;
 8006598:	bf00      	nop
 800659a:	e008      	b.n	80065ae <USBH_HandleEnum+0x3be>
      break;
 800659c:	bf00      	nop
 800659e:	e006      	b.n	80065ae <USBH_HandleEnum+0x3be>
      break;
 80065a0:	bf00      	nop
 80065a2:	e004      	b.n	80065ae <USBH_HandleEnum+0x3be>
      break;
 80065a4:	bf00      	nop
 80065a6:	e002      	b.n	80065ae <USBH_HandleEnum+0x3be>
      break;
 80065a8:	bf00      	nop
 80065aa:	e000      	b.n	80065ae <USBH_HandleEnum+0x3be>
      break;
 80065ac:	bf00      	nop
  }
  return Status;
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80065ca:	bf00      	nop
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b082      	sub	sp, #8
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80065e4:	1c5a      	adds	r2, r3, #1
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f804 	bl	80065fa <USBH_HandleSof>
}
 80065f2:	bf00      	nop
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b082      	sub	sp, #8
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b0b      	cmp	r3, #11
 800660a:	d10a      	bne.n	8006622 <USBH_HandleSof+0x28>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006612:	2b00      	cmp	r3, #0
 8006614:	d005      	beq.n	8006622 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	4798      	blx	r3
  }
}
 8006622:	bf00      	nop
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800662a:	b480      	push	{r7}
 800662c:	b083      	sub	sp, #12
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800663a:	bf00      	nop
}
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006656:	bf00      	nop
}
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f001 f844 	bl	800773e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	791b      	ldrb	r3, [r3, #4]
 80066ba:	4619      	mov	r1, r3
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fe91 	bl	80073e4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	795b      	ldrb	r3, [r3, #5]
 80066c6:	4619      	mov	r1, r3
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 fe8b 	bl	80073e4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af02      	add	r7, sp, #8
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	460b      	mov	r3, r1
 80066e2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80066ea:	78fb      	ldrb	r3, [r7, #3]
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	4613      	mov	r3, r2
 80066f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066f6:	2100      	movs	r1, #0
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f864 	bl	80067c6 <USBH_GetDescriptor>
 80066fe:	4603      	mov	r3, r0
 8006700:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8006702:	7bfb      	ldrb	r3, [r7, #15]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10a      	bne.n	800671e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006714:	78fa      	ldrb	r2, [r7, #3]
 8006716:	b292      	uxth	r2, r2
 8006718:	4619      	mov	r1, r3
 800671a:	f000 f918 	bl	800694e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800671e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006720:	4618      	mov	r0, r3
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af02      	add	r7, sp, #8
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	460b      	mov	r3, r1
 8006732:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	331c      	adds	r3, #28
 8006738:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800673a:	887b      	ldrh	r3, [r7, #2]
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006744:	2100      	movs	r1, #0
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f83d 	bl	80067c6 <USBH_GetDescriptor>
 800674c:	4603      	mov	r3, r0
 800674e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006750:	7bfb      	ldrb	r3, [r7, #15]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d107      	bne.n	8006766 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006756:	887b      	ldrh	r3, [r7, #2]
 8006758:	461a      	mov	r2, r3
 800675a:	68b9      	ldr	r1, [r7, #8]
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f987 	bl	8006a70 <USBH_ParseCfgDesc>
 8006762:	4603      	mov	r3, r0
 8006764:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006766:	7bfb      	ldrb	r3, [r7, #15]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b088      	sub	sp, #32
 8006774:	af02      	add	r7, sp, #8
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	607a      	str	r2, [r7, #4]
 800677a:	461a      	mov	r2, r3
 800677c:	460b      	mov	r3, r1
 800677e:	72fb      	strb	r3, [r7, #11]
 8006780:	4613      	mov	r3, r2
 8006782:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006784:	7afb      	ldrb	r3, [r7, #11]
 8006786:	b29b      	uxth	r3, r3
 8006788:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800678c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006794:	893b      	ldrh	r3, [r7, #8]
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	460b      	mov	r3, r1
 800679a:	2100      	movs	r1, #0
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f000 f812 	bl	80067c6 <USBH_GetDescriptor>
 80067a2:	4603      	mov	r3, r0
 80067a4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80067a6:	7dfb      	ldrb	r3, [r7, #23]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d107      	bne.n	80067bc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80067b2:	893a      	ldrh	r2, [r7, #8]
 80067b4:	6879      	ldr	r1, [r7, #4]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 fb24 	bl	8006e04 <USBH_ParseStringDesc>
  }

  return status;
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3718      	adds	r7, #24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b084      	sub	sp, #16
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	60f8      	str	r0, [r7, #12]
 80067ce:	607b      	str	r3, [r7, #4]
 80067d0:	460b      	mov	r3, r1
 80067d2:	72fb      	strb	r3, [r7, #11]
 80067d4:	4613      	mov	r3, r2
 80067d6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	789b      	ldrb	r3, [r3, #2]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d11c      	bne.n	800681a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80067e0:	7afb      	ldrb	r3, [r7, #11]
 80067e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2206      	movs	r2, #6
 80067f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	893a      	ldrh	r2, [r7, #8]
 80067f6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80067f8:	893b      	ldrh	r3, [r7, #8]
 80067fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80067fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006802:	d104      	bne.n	800680e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f240 4209 	movw	r2, #1033	; 0x409
 800680a:	829a      	strh	r2, [r3, #20]
 800680c:	e002      	b.n	8006814 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8b3a      	ldrh	r2, [r7, #24]
 8006818:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800681a:	8b3b      	ldrh	r3, [r7, #24]
 800681c:	461a      	mov	r2, r3
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f000 fb3d 	bl	8006ea0 <USBH_CtlReq>
 8006826:	4603      	mov	r3, r0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	460b      	mov	r3, r1
 800683a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	789b      	ldrb	r3, [r3, #2]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d10f      	bne.n	8006864 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2205      	movs	r2, #5
 800684e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006850:	78fb      	ldrb	r3, [r7, #3]
 8006852:	b29a      	uxth	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006864:	2200      	movs	r2, #0
 8006866:	2100      	movs	r1, #0
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fb19 	bl	8006ea0 <USBH_CtlReq>
 800686e:	4603      	mov	r3, r0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	460b      	mov	r3, r1
 8006882:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	789b      	ldrb	r3, [r3, #2]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d10e      	bne.n	80068aa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2209      	movs	r2, #9
 8006896:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	887a      	ldrh	r2, [r7, #2]
 800689c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80068aa:	2200      	movs	r2, #0
 80068ac:	2100      	movs	r1, #0
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 faf6 	bl	8006ea0 <USBH_CtlReq>
 80068b4:	4603      	mov	r3, r0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3708      	adds	r7, #8
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b082      	sub	sp, #8
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	460b      	mov	r3, r1
 80068c8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	789b      	ldrb	r3, [r3, #2]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d10f      	bne.n	80068f2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2203      	movs	r2, #3
 80068dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80068de:	78fb      	ldrb	r3, [r7, #3]
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80068f2:	2200      	movs	r2, #0
 80068f4:	2100      	movs	r1, #0
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fad2 	bl	8006ea0 <USBH_CtlReq>
 80068fc:	4603      	mov	r3, r0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b082      	sub	sp, #8
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	460b      	mov	r3, r1
 8006910:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	789b      	ldrb	r3, [r3, #2]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d10f      	bne.n	800693a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2202      	movs	r2, #2
 800691e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800692c:	78fb      	ldrb	r3, [r7, #3]
 800692e:	b29a      	uxth	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800693a:	2200      	movs	r2, #0
 800693c:	2100      	movs	r1, #0
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 faae 	bl	8006ea0 <USBH_CtlReq>
 8006944:	4603      	mov	r3, r0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800694e:	b480      	push	{r7}
 8006950:	b085      	sub	sp, #20
 8006952:	af00      	add	r7, sp, #0
 8006954:	60f8      	str	r0, [r7, #12]
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	4613      	mov	r3, r2
 800695a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	781a      	ldrb	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	785a      	ldrb	r2, [r3, #1]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	3302      	adds	r3, #2
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	b29a      	uxth	r2, r3
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	3303      	adds	r3, #3
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	b29b      	uxth	r3, r3
 800697c:	021b      	lsls	r3, r3, #8
 800697e:	b29b      	uxth	r3, r3
 8006980:	4313      	orrs	r3, r2
 8006982:	b29a      	uxth	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	791a      	ldrb	r2, [r3, #4]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	795a      	ldrb	r2, [r3, #5]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	799a      	ldrb	r2, [r3, #6]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	79da      	ldrb	r2, [r3, #7]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	79db      	ldrb	r3, [r3, #7]
 80069ac:	2b20      	cmp	r3, #32
 80069ae:	dc11      	bgt.n	80069d4 <USBH_ParseDevDesc+0x86>
 80069b0:	2b08      	cmp	r3, #8
 80069b2:	db16      	blt.n	80069e2 <USBH_ParseDevDesc+0x94>
 80069b4:	3b08      	subs	r3, #8
 80069b6:	2201      	movs	r2, #1
 80069b8:	fa02 f303 	lsl.w	r3, r2, r3
 80069bc:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80069c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	bf14      	ite	ne
 80069c8:	2301      	movne	r3, #1
 80069ca:	2300      	moveq	r3, #0
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d102      	bne.n	80069d8 <USBH_ParseDevDesc+0x8a>
 80069d2:	e006      	b.n	80069e2 <USBH_ParseDevDesc+0x94>
 80069d4:	2b40      	cmp	r3, #64	; 0x40
 80069d6:	d104      	bne.n	80069e2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	79da      	ldrb	r2, [r3, #7]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	71da      	strb	r2, [r3, #7]
      break;
 80069e0:	e003      	b.n	80069ea <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2240      	movs	r2, #64	; 0x40
 80069e6:	71da      	strb	r2, [r3, #7]
      break;
 80069e8:	bf00      	nop
  }

  if (length > 8U)
 80069ea:	88fb      	ldrh	r3, [r7, #6]
 80069ec:	2b08      	cmp	r3, #8
 80069ee:	d939      	bls.n	8006a64 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	3308      	adds	r3, #8
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	3309      	adds	r3, #9
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	021b      	lsls	r3, r3, #8
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	4313      	orrs	r3, r2
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	330a      	adds	r3, #10
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	330b      	adds	r3, #11
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	021b      	lsls	r3, r3, #8
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	4313      	orrs	r3, r2
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	330c      	adds	r3, #12
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	330d      	adds	r3, #13
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	021b      	lsls	r3, r3, #8
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	7b9a      	ldrb	r2, [r3, #14]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	7bda      	ldrb	r2, [r3, #15]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	7c1a      	ldrb	r2, [r3, #16]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	7c5a      	ldrb	r2, [r3, #17]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	745a      	strb	r2, [r3, #17]
  }
}
 8006a64:	bf00      	nop
 8006a66:	3714      	adds	r7, #20
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08c      	sub	sp, #48	; 0x30
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006a84:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	781a      	ldrb	r2, [r3, #0]
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	785a      	ldrb	r2, [r3, #1]
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	3302      	adds	r3, #2
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	3303      	adds	r3, #3
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	021b      	lsls	r3, r3, #8
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006acc:	bf28      	it	cs
 8006ace:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	791a      	ldrb	r2, [r3, #4]
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	795a      	ldrb	r2, [r3, #5]
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	799a      	ldrb	r2, [r3, #6]
 8006aec:	6a3b      	ldr	r3, [r7, #32]
 8006aee:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	79da      	ldrb	r2, [r3, #7]
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	7a1a      	ldrb	r2, [r3, #8]
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	2b09      	cmp	r3, #9
 8006b06:	d002      	beq.n	8006b0e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	2209      	movs	r2, #9
 8006b0c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006b0e:	88fb      	ldrh	r3, [r7, #6]
 8006b10:	2b09      	cmp	r3, #9
 8006b12:	f240 809d 	bls.w	8006c50 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8006b16:	2309      	movs	r3, #9
 8006b18:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006b1e:	e081      	b.n	8006c24 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006b20:	f107 0316 	add.w	r3, r7, #22
 8006b24:	4619      	mov	r1, r3
 8006b26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b28:	f000 f99f 	bl	8006e6a <USBH_GetNextDesc>
 8006b2c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b30:	785b      	ldrb	r3, [r3, #1]
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	d176      	bne.n	8006c24 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	2b09      	cmp	r3, #9
 8006b3c:	d002      	beq.n	8006b44 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b40:	2209      	movs	r2, #9
 8006b42:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b48:	221a      	movs	r2, #26
 8006b4a:	fb02 f303 	mul.w	r3, r2, r3
 8006b4e:	3308      	adds	r3, #8
 8006b50:	6a3a      	ldr	r2, [r7, #32]
 8006b52:	4413      	add	r3, r2
 8006b54:	3302      	adds	r3, #2
 8006b56:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006b58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b5a:	69f8      	ldr	r0, [r7, #28]
 8006b5c:	f000 f87e 	bl	8006c5c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006b60:	2300      	movs	r3, #0
 8006b62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006b66:	2300      	movs	r3, #0
 8006b68:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006b6a:	e043      	b.n	8006bf4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006b6c:	f107 0316 	add.w	r3, r7, #22
 8006b70:	4619      	mov	r1, r3
 8006b72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b74:	f000 f979 	bl	8006e6a <USBH_GetNextDesc>
 8006b78:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7c:	785b      	ldrb	r3, [r3, #1]
 8006b7e:	2b05      	cmp	r3, #5
 8006b80:	d138      	bne.n	8006bf4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	795b      	ldrb	r3, [r3, #5]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d10f      	bne.n	8006baa <USBH_ParseCfgDesc+0x13a>
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	799b      	ldrb	r3, [r3, #6]
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d10b      	bne.n	8006baa <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	79db      	ldrb	r3, [r3, #7]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10f      	bne.n	8006bba <USBH_ParseCfgDesc+0x14a>
 8006b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	2b09      	cmp	r3, #9
 8006ba0:	d00b      	beq.n	8006bba <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8006ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba4:	2209      	movs	r2, #9
 8006ba6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006ba8:	e007      	b.n	8006bba <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8006baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	2b07      	cmp	r3, #7
 8006bb0:	d004      	beq.n	8006bbc <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb4:	2207      	movs	r2, #7
 8006bb6:	701a      	strb	r2, [r3, #0]
 8006bb8:	e000      	b.n	8006bbc <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006bba:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bc0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006bc4:	3201      	adds	r2, #1
 8006bc6:	00d2      	lsls	r2, r2, #3
 8006bc8:	211a      	movs	r1, #26
 8006bca:	fb01 f303 	mul.w	r3, r1, r3
 8006bce:	4413      	add	r3, r2
 8006bd0:	3308      	adds	r3, #8
 8006bd2:	6a3a      	ldr	r2, [r7, #32]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	3304      	adds	r3, #4
 8006bd8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8006bda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bdc:	69b9      	ldr	r1, [r7, #24]
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f000 f86b 	bl	8006cba <USBH_ParseEPDesc>
 8006be4:	4603      	mov	r3, r0
 8006be6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8006bea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006bee:	3301      	adds	r3, #1
 8006bf0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	791b      	ldrb	r3, [r3, #4]
 8006bf8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d204      	bcs.n	8006c0a <USBH_ParseCfgDesc+0x19a>
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	885a      	ldrh	r2, [r3, #2]
 8006c04:	8afb      	ldrh	r3, [r7, #22]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d8b0      	bhi.n	8006b6c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	791b      	ldrb	r3, [r3, #4]
 8006c0e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d201      	bcs.n	8006c1a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e01c      	b.n	8006c54 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8006c1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c1e:	3301      	adds	r3, #1
 8006c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d805      	bhi.n	8006c38 <USBH_ParseCfgDesc+0x1c8>
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	885a      	ldrh	r2, [r3, #2]
 8006c30:	8afb      	ldrh	r3, [r7, #22]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	f63f af74 	bhi.w	8006b20 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006c38:	6a3b      	ldr	r3, [r7, #32]
 8006c3a:	791b      	ldrb	r3, [r3, #4]
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	bf28      	it	cs
 8006c40:	2302      	movcs	r3, #2
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d201      	bcs.n	8006c50 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e001      	b.n	8006c54 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8006c50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3730      	adds	r7, #48	; 0x30
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	781a      	ldrb	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	785a      	ldrb	r2, [r3, #1]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	789a      	ldrb	r2, [r3, #2]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	78da      	ldrb	r2, [r3, #3]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	791a      	ldrb	r2, [r3, #4]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	795a      	ldrb	r2, [r3, #5]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	799a      	ldrb	r2, [r3, #6]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	79da      	ldrb	r2, [r3, #7]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	7a1a      	ldrb	r2, [r3, #8]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	721a      	strb	r2, [r3, #8]
}
 8006cae:	bf00      	nop
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b087      	sub	sp, #28
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	60f8      	str	r0, [r7, #12]
 8006cc2:	60b9      	str	r1, [r7, #8]
 8006cc4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	781a      	ldrb	r2, [r3, #0]
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	785a      	ldrb	r2, [r3, #1]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	789a      	ldrb	r2, [r3, #2]
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	78da      	ldrb	r2, [r3, #3]
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	3304      	adds	r3, #4
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	3305      	adds	r3, #5
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	021b      	lsls	r3, r3, #8
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	799a      	ldrb	r2, [r3, #6]
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	889b      	ldrh	r3, [r3, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d102      	bne.n	8006d1c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8006d16:	2303      	movs	r3, #3
 8006d18:	75fb      	strb	r3, [r7, #23]
 8006d1a:	e033      	b.n	8006d84 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	889b      	ldrh	r3, [r3, #4]
 8006d20:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006d24:	f023 0307 	bic.w	r3, r3, #7
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	889b      	ldrh	r3, [r3, #4]
 8006d32:	b21a      	sxth	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3304      	adds	r3, #4
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	b299      	uxth	r1, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	3305      	adds	r3, #5
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	021b      	lsls	r3, r3, #8
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	430b      	orrs	r3, r1
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d110      	bne.n	8006d76 <USBH_ParseEPDesc+0xbc>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	3304      	adds	r3, #4
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	b299      	uxth	r1, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	3305      	adds	r3, #5
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	021b      	lsls	r3, r3, #8
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	430b      	orrs	r3, r1
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	b21b      	sxth	r3, r3
 8006d6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d72:	b21b      	sxth	r3, r3
 8006d74:	e001      	b.n	8006d7a <USBH_ParseEPDesc+0xc0>
 8006d76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	b21b      	sxth	r3, r3
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d116      	bne.n	8006dbc <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	78db      	ldrb	r3, [r3, #3]
 8006d92:	f003 0303 	and.w	r3, r3, #3
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d005      	beq.n	8006da6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	78db      	ldrb	r3, [r3, #3]
 8006d9e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	d127      	bne.n	8006df6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	799b      	ldrb	r3, [r3, #6]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <USBH_ParseEPDesc+0xfc>
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	799b      	ldrb	r3, [r3, #6]
 8006db2:	2b10      	cmp	r3, #16
 8006db4:	d91f      	bls.n	8006df6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006db6:	2303      	movs	r3, #3
 8006db8:	75fb      	strb	r3, [r7, #23]
 8006dba:	e01c      	b.n	8006df6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	78db      	ldrb	r3, [r3, #3]
 8006dc0:	f003 0303 	and.w	r3, r3, #3
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d10a      	bne.n	8006dde <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	799b      	ldrb	r3, [r3, #6]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d003      	beq.n	8006dd8 <USBH_ParseEPDesc+0x11e>
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	799b      	ldrb	r3, [r3, #6]
 8006dd4:	2b10      	cmp	r3, #16
 8006dd6:	d90e      	bls.n	8006df6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	75fb      	strb	r3, [r7, #23]
 8006ddc:	e00b      	b.n	8006df6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	78db      	ldrb	r3, [r3, #3]
 8006de2:	f003 0303 	and.w	r3, r3, #3
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d105      	bne.n	8006df6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	799b      	ldrb	r3, [r3, #6]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006df2:	2303      	movs	r3, #3
 8006df4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	371c      	adds	r7, #28
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	3301      	adds	r3, #1
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	2b03      	cmp	r3, #3
 8006e1a:	d120      	bne.n	8006e5e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	1e9a      	subs	r2, r3, #2
 8006e22:	88fb      	ldrh	r3, [r7, #6]
 8006e24:	4293      	cmp	r3, r2
 8006e26:	bf28      	it	cs
 8006e28:	4613      	movcs	r3, r2
 8006e2a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	3302      	adds	r3, #2
 8006e30:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006e32:	2300      	movs	r3, #0
 8006e34:	82fb      	strh	r3, [r7, #22]
 8006e36:	e00b      	b.n	8006e50 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006e38:	8afb      	ldrh	r3, [r7, #22]
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	781a      	ldrb	r2, [r3, #0]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	3301      	adds	r3, #1
 8006e48:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006e4a:	8afb      	ldrh	r3, [r7, #22]
 8006e4c:	3302      	adds	r3, #2
 8006e4e:	82fb      	strh	r3, [r7, #22]
 8006e50:	8afa      	ldrh	r2, [r7, #22]
 8006e52:	8abb      	ldrh	r3, [r7, #20]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d3ef      	bcc.n	8006e38 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	701a      	strb	r2, [r3, #0]
  }
}
 8006e5e:	bf00      	nop
 8006e60:	371c      	adds	r7, #28
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b085      	sub	sp, #20
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	881a      	ldrh	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	4413      	add	r3, r2
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4413      	add	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006e92:	68fb      	ldr	r3, [r7, #12]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	789b      	ldrb	r3, [r3, #2]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d002      	beq.n	8006ec0 <USBH_CtlReq+0x20>
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d00f      	beq.n	8006ede <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006ebe:	e027      	b.n	8006f10 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	88fa      	ldrh	r2, [r7, #6]
 8006eca:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2202      	movs	r2, #2
 8006ed6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	75fb      	strb	r3, [r7, #23]
      break;
 8006edc:	e018      	b.n	8006f10 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f000 f81c 	bl	8006f1c <USBH_HandleControl>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006ee8:	7dfb      	ldrb	r3, [r7, #23]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d002      	beq.n	8006ef4 <USBH_CtlReq+0x54>
 8006eee:	7dfb      	ldrb	r3, [r7, #23]
 8006ef0:	2b03      	cmp	r3, #3
 8006ef2:	d106      	bne.n	8006f02 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	761a      	strb	r2, [r3, #24]
      break;
 8006f00:	e005      	b.n	8006f0e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006f02:	7dfb      	ldrb	r3, [r7, #23]
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d102      	bne.n	8006f0e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	709a      	strb	r2, [r3, #2]
      break;
 8006f0e:	bf00      	nop
  }
  return status;
 8006f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3718      	adds	r7, #24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
	...

08006f1c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af02      	add	r7, sp, #8
 8006f22:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006f24:	2301      	movs	r3, #1
 8006f26:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	7e1b      	ldrb	r3, [r3, #24]
 8006f30:	3b01      	subs	r3, #1
 8006f32:	2b0a      	cmp	r3, #10
 8006f34:	f200 8156 	bhi.w	80071e4 <USBH_HandleControl+0x2c8>
 8006f38:	a201      	add	r2, pc, #4	; (adr r2, 8006f40 <USBH_HandleControl+0x24>)
 8006f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3e:	bf00      	nop
 8006f40:	08006f6d 	.word	0x08006f6d
 8006f44:	08006f87 	.word	0x08006f87
 8006f48:	08006ff1 	.word	0x08006ff1
 8006f4c:	08007017 	.word	0x08007017
 8006f50:	0800704f 	.word	0x0800704f
 8006f54:	08007079 	.word	0x08007079
 8006f58:	080070cb 	.word	0x080070cb
 8006f5c:	080070ed 	.word	0x080070ed
 8006f60:	08007129 	.word	0x08007129
 8006f64:	0800714f 	.word	0x0800714f
 8006f68:	0800718d 	.word	0x0800718d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f103 0110 	add.w	r1, r3, #16
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	795b      	ldrb	r3, [r3, #5]
 8006f76:	461a      	mov	r2, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f943 	bl	8007204 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2202      	movs	r2, #2
 8006f82:	761a      	strb	r2, [r3, #24]
      break;
 8006f84:	e139      	b.n	80071fa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	795b      	ldrb	r3, [r3, #5]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 fcc5 	bl	800791c <USBH_LL_GetURBState>
 8006f92:	4603      	mov	r3, r0
 8006f94:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006f96:	7bbb      	ldrb	r3, [r7, #14]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d11e      	bne.n	8006fda <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	7c1b      	ldrb	r3, [r3, #16]
 8006fa0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006fa4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	8adb      	ldrh	r3, [r3, #22]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00a      	beq.n	8006fc4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006fae:	7b7b      	ldrb	r3, [r7, #13]
 8006fb0:	2b80      	cmp	r3, #128	; 0x80
 8006fb2:	d103      	bne.n	8006fbc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2203      	movs	r2, #3
 8006fb8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006fba:	e115      	b.n	80071e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2205      	movs	r2, #5
 8006fc0:	761a      	strb	r2, [r3, #24]
      break;
 8006fc2:	e111      	b.n	80071e8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006fc4:	7b7b      	ldrb	r3, [r7, #13]
 8006fc6:	2b80      	cmp	r3, #128	; 0x80
 8006fc8:	d103      	bne.n	8006fd2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2209      	movs	r2, #9
 8006fce:	761a      	strb	r2, [r3, #24]
      break;
 8006fd0:	e10a      	b.n	80071e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2207      	movs	r2, #7
 8006fd6:	761a      	strb	r2, [r3, #24]
      break;
 8006fd8:	e106      	b.n	80071e8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006fda:	7bbb      	ldrb	r3, [r7, #14]
 8006fdc:	2b04      	cmp	r3, #4
 8006fde:	d003      	beq.n	8006fe8 <USBH_HandleControl+0xcc>
 8006fe0:	7bbb      	ldrb	r3, [r7, #14]
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	f040 8100 	bne.w	80071e8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	220b      	movs	r2, #11
 8006fec:	761a      	strb	r2, [r3, #24]
      break;
 8006fee:	e0fb      	b.n	80071e8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6899      	ldr	r1, [r3, #8]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	899a      	ldrh	r2, [r3, #12]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	791b      	ldrb	r3, [r3, #4]
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f93a 	bl	8007282 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2204      	movs	r2, #4
 8007012:	761a      	strb	r2, [r3, #24]
      break;
 8007014:	e0f1      	b.n	80071fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	791b      	ldrb	r3, [r3, #4]
 800701a:	4619      	mov	r1, r3
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fc7d 	bl	800791c <USBH_LL_GetURBState>
 8007022:	4603      	mov	r3, r0
 8007024:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007026:	7bbb      	ldrb	r3, [r7, #14]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d102      	bne.n	8007032 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2209      	movs	r2, #9
 8007030:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007032:	7bbb      	ldrb	r3, [r7, #14]
 8007034:	2b05      	cmp	r3, #5
 8007036:	d102      	bne.n	800703e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007038:	2303      	movs	r3, #3
 800703a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800703c:	e0d6      	b.n	80071ec <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800703e:	7bbb      	ldrb	r3, [r7, #14]
 8007040:	2b04      	cmp	r3, #4
 8007042:	f040 80d3 	bne.w	80071ec <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	220b      	movs	r2, #11
 800704a:	761a      	strb	r2, [r3, #24]
      break;
 800704c:	e0ce      	b.n	80071ec <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6899      	ldr	r1, [r3, #8]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	899a      	ldrh	r2, [r3, #12]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	795b      	ldrb	r3, [r3, #5]
 800705a:	2001      	movs	r0, #1
 800705c:	9000      	str	r0, [sp, #0]
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f8ea 	bl	8007238 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800706a:	b29a      	uxth	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2206      	movs	r2, #6
 8007074:	761a      	strb	r2, [r3, #24]
      break;
 8007076:	e0c0      	b.n	80071fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	795b      	ldrb	r3, [r3, #5]
 800707c:	4619      	mov	r1, r3
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fc4c 	bl	800791c <USBH_LL_GetURBState>
 8007084:	4603      	mov	r3, r0
 8007086:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007088:	7bbb      	ldrb	r3, [r7, #14]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d103      	bne.n	8007096 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2207      	movs	r2, #7
 8007092:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007094:	e0ac      	b.n	80071f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007096:	7bbb      	ldrb	r3, [r7, #14]
 8007098:	2b05      	cmp	r3, #5
 800709a:	d105      	bne.n	80070a8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	220c      	movs	r2, #12
 80070a0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80070a2:	2303      	movs	r3, #3
 80070a4:	73fb      	strb	r3, [r7, #15]
      break;
 80070a6:	e0a3      	b.n	80071f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80070a8:	7bbb      	ldrb	r3, [r7, #14]
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d103      	bne.n	80070b6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2205      	movs	r2, #5
 80070b2:	761a      	strb	r2, [r3, #24]
      break;
 80070b4:	e09c      	b.n	80071f0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80070b6:	7bbb      	ldrb	r3, [r7, #14]
 80070b8:	2b04      	cmp	r3, #4
 80070ba:	f040 8099 	bne.w	80071f0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	220b      	movs	r2, #11
 80070c2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80070c4:	2302      	movs	r3, #2
 80070c6:	73fb      	strb	r3, [r7, #15]
      break;
 80070c8:	e092      	b.n	80071f0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	791b      	ldrb	r3, [r3, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	2100      	movs	r1, #0
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f8d5 	bl	8007282 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070de:	b29a      	uxth	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2208      	movs	r2, #8
 80070e8:	761a      	strb	r2, [r3, #24]

      break;
 80070ea:	e086      	b.n	80071fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	791b      	ldrb	r3, [r3, #4]
 80070f0:	4619      	mov	r1, r3
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fc12 	bl	800791c <USBH_LL_GetURBState>
 80070f8:	4603      	mov	r3, r0
 80070fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80070fc:	7bbb      	ldrb	r3, [r7, #14]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d105      	bne.n	800710e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	220d      	movs	r2, #13
 8007106:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007108:	2300      	movs	r3, #0
 800710a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800710c:	e072      	b.n	80071f4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800710e:	7bbb      	ldrb	r3, [r7, #14]
 8007110:	2b04      	cmp	r3, #4
 8007112:	d103      	bne.n	800711c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	220b      	movs	r2, #11
 8007118:	761a      	strb	r2, [r3, #24]
      break;
 800711a:	e06b      	b.n	80071f4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800711c:	7bbb      	ldrb	r3, [r7, #14]
 800711e:	2b05      	cmp	r3, #5
 8007120:	d168      	bne.n	80071f4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007122:	2303      	movs	r3, #3
 8007124:	73fb      	strb	r3, [r7, #15]
      break;
 8007126:	e065      	b.n	80071f4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	795b      	ldrb	r3, [r3, #5]
 800712c:	2201      	movs	r2, #1
 800712e:	9200      	str	r2, [sp, #0]
 8007130:	2200      	movs	r2, #0
 8007132:	2100      	movs	r1, #0
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f87f 	bl	8007238 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007140:	b29a      	uxth	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	220a      	movs	r2, #10
 800714a:	761a      	strb	r2, [r3, #24]
      break;
 800714c:	e055      	b.n	80071fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	795b      	ldrb	r3, [r3, #5]
 8007152:	4619      	mov	r1, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fbe1 	bl	800791c <USBH_LL_GetURBState>
 800715a:	4603      	mov	r3, r0
 800715c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800715e:	7bbb      	ldrb	r3, [r7, #14]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d105      	bne.n	8007170 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007164:	2300      	movs	r3, #0
 8007166:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	220d      	movs	r2, #13
 800716c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800716e:	e043      	b.n	80071f8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007170:	7bbb      	ldrb	r3, [r7, #14]
 8007172:	2b02      	cmp	r3, #2
 8007174:	d103      	bne.n	800717e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2209      	movs	r2, #9
 800717a:	761a      	strb	r2, [r3, #24]
      break;
 800717c:	e03c      	b.n	80071f8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800717e:	7bbb      	ldrb	r3, [r7, #14]
 8007180:	2b04      	cmp	r3, #4
 8007182:	d139      	bne.n	80071f8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	220b      	movs	r2, #11
 8007188:	761a      	strb	r2, [r3, #24]
      break;
 800718a:	e035      	b.n	80071f8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	7e5b      	ldrb	r3, [r3, #25]
 8007190:	3301      	adds	r3, #1
 8007192:	b2da      	uxtb	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	765a      	strb	r2, [r3, #25]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	7e5b      	ldrb	r3, [r3, #25]
 800719c:	2b02      	cmp	r3, #2
 800719e:	d806      	bhi.n	80071ae <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2201      	movs	r2, #1
 80071aa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80071ac:	e025      	b.n	80071fa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071b4:	2106      	movs	r1, #6
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	795b      	ldrb	r3, [r3, #5]
 80071c4:	4619      	mov	r1, r3
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f90c 	bl	80073e4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	791b      	ldrb	r3, [r3, #4]
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f906 	bl	80073e4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80071de:	2302      	movs	r3, #2
 80071e0:	73fb      	strb	r3, [r7, #15]
      break;
 80071e2:	e00a      	b.n	80071fa <USBH_HandleControl+0x2de>

    default:
      break;
 80071e4:	bf00      	nop
 80071e6:	e008      	b.n	80071fa <USBH_HandleControl+0x2de>
      break;
 80071e8:	bf00      	nop
 80071ea:	e006      	b.n	80071fa <USBH_HandleControl+0x2de>
      break;
 80071ec:	bf00      	nop
 80071ee:	e004      	b.n	80071fa <USBH_HandleControl+0x2de>
      break;
 80071f0:	bf00      	nop
 80071f2:	e002      	b.n	80071fa <USBH_HandleControl+0x2de>
      break;
 80071f4:	bf00      	nop
 80071f6:	e000      	b.n	80071fa <USBH_HandleControl+0x2de>
      break;
 80071f8:	bf00      	nop
  }

  return status;
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b088      	sub	sp, #32
 8007208:	af04      	add	r7, sp, #16
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	4613      	mov	r3, r2
 8007210:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007212:	79f9      	ldrb	r1, [r7, #7]
 8007214:	2300      	movs	r3, #0
 8007216:	9303      	str	r3, [sp, #12]
 8007218:	2308      	movs	r3, #8
 800721a:	9302      	str	r3, [sp, #8]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	9301      	str	r3, [sp, #4]
 8007220:	2300      	movs	r3, #0
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	2300      	movs	r3, #0
 8007226:	2200      	movs	r2, #0
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f000 fb46 	bl	80078ba <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b088      	sub	sp, #32
 800723c:	af04      	add	r7, sp, #16
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	4611      	mov	r1, r2
 8007244:	461a      	mov	r2, r3
 8007246:	460b      	mov	r3, r1
 8007248:	80fb      	strh	r3, [r7, #6]
 800724a:	4613      	mov	r3, r2
 800724c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007258:	2300      	movs	r3, #0
 800725a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800725c:	7979      	ldrb	r1, [r7, #5]
 800725e:	7e3b      	ldrb	r3, [r7, #24]
 8007260:	9303      	str	r3, [sp, #12]
 8007262:	88fb      	ldrh	r3, [r7, #6]
 8007264:	9302      	str	r3, [sp, #8]
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	9301      	str	r3, [sp, #4]
 800726a:	2301      	movs	r3, #1
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	2300      	movs	r3, #0
 8007270:	2200      	movs	r2, #0
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f000 fb21 	bl	80078ba <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b088      	sub	sp, #32
 8007286:	af04      	add	r7, sp, #16
 8007288:	60f8      	str	r0, [r7, #12]
 800728a:	60b9      	str	r1, [r7, #8]
 800728c:	4611      	mov	r1, r2
 800728e:	461a      	mov	r2, r3
 8007290:	460b      	mov	r3, r1
 8007292:	80fb      	strh	r3, [r7, #6]
 8007294:	4613      	mov	r3, r2
 8007296:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007298:	7979      	ldrb	r1, [r7, #5]
 800729a:	2300      	movs	r3, #0
 800729c:	9303      	str	r3, [sp, #12]
 800729e:	88fb      	ldrh	r3, [r7, #6]
 80072a0:	9302      	str	r3, [sp, #8]
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	9301      	str	r3, [sp, #4]
 80072a6:	2301      	movs	r3, #1
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	2300      	movs	r3, #0
 80072ac:	2201      	movs	r2, #1
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 fb03 	bl	80078ba <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80072b4:	2300      	movs	r3, #0

}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b088      	sub	sp, #32
 80072c2:	af04      	add	r7, sp, #16
 80072c4:	60f8      	str	r0, [r7, #12]
 80072c6:	60b9      	str	r1, [r7, #8]
 80072c8:	4611      	mov	r1, r2
 80072ca:	461a      	mov	r2, r3
 80072cc:	460b      	mov	r3, r1
 80072ce:	80fb      	strh	r3, [r7, #6]
 80072d0:	4613      	mov	r3, r2
 80072d2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80072de:	2300      	movs	r3, #0
 80072e0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80072e2:	7979      	ldrb	r1, [r7, #5]
 80072e4:	7e3b      	ldrb	r3, [r7, #24]
 80072e6:	9303      	str	r3, [sp, #12]
 80072e8:	88fb      	ldrh	r3, [r7, #6]
 80072ea:	9302      	str	r3, [sp, #8]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	9301      	str	r3, [sp, #4]
 80072f0:	2301      	movs	r3, #1
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	2302      	movs	r3, #2
 80072f6:	2200      	movs	r2, #0
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 fade 	bl	80078ba <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b088      	sub	sp, #32
 800730c:	af04      	add	r7, sp, #16
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	4611      	mov	r1, r2
 8007314:	461a      	mov	r2, r3
 8007316:	460b      	mov	r3, r1
 8007318:	80fb      	strh	r3, [r7, #6]
 800731a:	4613      	mov	r3, r2
 800731c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800731e:	7979      	ldrb	r1, [r7, #5]
 8007320:	2300      	movs	r3, #0
 8007322:	9303      	str	r3, [sp, #12]
 8007324:	88fb      	ldrh	r3, [r7, #6]
 8007326:	9302      	str	r3, [sp, #8]
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	9301      	str	r3, [sp, #4]
 800732c:	2301      	movs	r3, #1
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	2302      	movs	r3, #2
 8007332:	2201      	movs	r2, #1
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f000 fac0 	bl	80078ba <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af04      	add	r7, sp, #16
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	4608      	mov	r0, r1
 800734e:	4611      	mov	r1, r2
 8007350:	461a      	mov	r2, r3
 8007352:	4603      	mov	r3, r0
 8007354:	70fb      	strb	r3, [r7, #3]
 8007356:	460b      	mov	r3, r1
 8007358:	70bb      	strb	r3, [r7, #2]
 800735a:	4613      	mov	r3, r2
 800735c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800735e:	7878      	ldrb	r0, [r7, #1]
 8007360:	78ba      	ldrb	r2, [r7, #2]
 8007362:	78f9      	ldrb	r1, [r7, #3]
 8007364:	8b3b      	ldrh	r3, [r7, #24]
 8007366:	9302      	str	r3, [sp, #8]
 8007368:	7d3b      	ldrb	r3, [r7, #20]
 800736a:	9301      	str	r3, [sp, #4]
 800736c:	7c3b      	ldrb	r3, [r7, #16]
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	4603      	mov	r3, r0
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fa53 	bl	800781e <USBH_LL_OpenPipe>

  return USBH_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b082      	sub	sp, #8
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	460b      	mov	r3, r1
 800738c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800738e:	78fb      	ldrb	r3, [r7, #3]
 8007390:	4619      	mov	r1, r3
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fa72 	bl	800787c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b084      	sub	sp, #16
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	460b      	mov	r3, r1
 80073ac:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f836 	bl	8007420 <USBH_GetFreePipe>
 80073b4:	4603      	mov	r3, r0
 80073b6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80073b8:	89fb      	ldrh	r3, [r7, #14]
 80073ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073be:	4293      	cmp	r3, r2
 80073c0:	d00a      	beq.n	80073d8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80073c2:	78fa      	ldrb	r2, [r7, #3]
 80073c4:	89fb      	ldrh	r3, [r7, #14]
 80073c6:	f003 030f 	and.w	r3, r3, #15
 80073ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073ce:	6879      	ldr	r1, [r7, #4]
 80073d0:	33e0      	adds	r3, #224	; 0xe0
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	440b      	add	r3, r1
 80073d6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80073d8:	89fb      	ldrh	r3, [r7, #14]
 80073da:	b2db      	uxtb	r3, r3
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	460b      	mov	r3, r1
 80073ee:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80073f0:	78fb      	ldrb	r3, [r7, #3]
 80073f2:	2b0f      	cmp	r3, #15
 80073f4:	d80d      	bhi.n	8007412 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80073f6:	78fb      	ldrb	r3, [r7, #3]
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	33e0      	adds	r3, #224	; 0xe0
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4413      	add	r3, r2
 8007400:	685a      	ldr	r2, [r3, #4]
 8007402:	78fb      	ldrb	r3, [r7, #3]
 8007404:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007408:	6879      	ldr	r1, [r7, #4]
 800740a:	33e0      	adds	r3, #224	; 0xe0
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	440b      	add	r3, r1
 8007410:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007428:	2300      	movs	r3, #0
 800742a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800742c:	2300      	movs	r3, #0
 800742e:	73fb      	strb	r3, [r7, #15]
 8007430:	e00f      	b.n	8007452 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007432:	7bfb      	ldrb	r3, [r7, #15]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	33e0      	adds	r3, #224	; 0xe0
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4413      	add	r3, r2
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d102      	bne.n	800744c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007446:	7bfb      	ldrb	r3, [r7, #15]
 8007448:	b29b      	uxth	r3, r3
 800744a:	e007      	b.n	800745c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800744c:	7bfb      	ldrb	r3, [r7, #15]
 800744e:	3301      	adds	r3, #1
 8007450:	73fb      	strb	r3, [r7, #15]
 8007452:	7bfb      	ldrb	r3, [r7, #15]
 8007454:	2b0f      	cmp	r3, #15
 8007456:	d9ec      	bls.n	8007432 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007458:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800745c:	4618      	mov	r0, r3
 800745e:	3714      	adds	r7, #20
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800746c:	2201      	movs	r2, #1
 800746e:	490e      	ldr	r1, [pc, #56]	; (80074a8 <MX_USB_HOST_Init+0x40>)
 8007470:	480e      	ldr	r0, [pc, #56]	; (80074ac <MX_USB_HOST_Init+0x44>)
 8007472:	f7fe fba7 	bl	8005bc4 <USBH_Init>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800747c:	f7f9 fa52 	bl	8000924 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007480:	490b      	ldr	r1, [pc, #44]	; (80074b0 <MX_USB_HOST_Init+0x48>)
 8007482:	480a      	ldr	r0, [pc, #40]	; (80074ac <MX_USB_HOST_Init+0x44>)
 8007484:	f7fe fc2c 	bl	8005ce0 <USBH_RegisterClass>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d001      	beq.n	8007492 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800748e:	f7f9 fa49 	bl	8000924 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007492:	4806      	ldr	r0, [pc, #24]	; (80074ac <MX_USB_HOST_Init+0x44>)
 8007494:	f7fe fcb0 	bl	8005df8 <USBH_Start>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800749e:	f7f9 fa41 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80074a2:	bf00      	nop
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	080074c9 	.word	0x080074c9
 80074ac:	200001a8 	.word	0x200001a8
 80074b0:	2000000c 	.word	0x2000000c

080074b4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80074b8:	4802      	ldr	r0, [pc, #8]	; (80074c4 <MX_USB_HOST_Process+0x10>)
 80074ba:	f7fe fcad 	bl	8005e18 <USBH_Process>
}
 80074be:	bf00      	nop
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	200001a8 	.word	0x200001a8

080074c8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	460b      	mov	r3, r1
 80074d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80074d4:	78fb      	ldrb	r3, [r7, #3]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	2b04      	cmp	r3, #4
 80074da:	d819      	bhi.n	8007510 <USBH_UserProcess+0x48>
 80074dc:	a201      	add	r2, pc, #4	; (adr r2, 80074e4 <USBH_UserProcess+0x1c>)
 80074de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e2:	bf00      	nop
 80074e4:	08007511 	.word	0x08007511
 80074e8:	08007501 	.word	0x08007501
 80074ec:	08007511 	.word	0x08007511
 80074f0:	08007509 	.word	0x08007509
 80074f4:	080074f9 	.word	0x080074f9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80074f8:	4b09      	ldr	r3, [pc, #36]	; (8007520 <USBH_UserProcess+0x58>)
 80074fa:	2203      	movs	r2, #3
 80074fc:	701a      	strb	r2, [r3, #0]
  break;
 80074fe:	e008      	b.n	8007512 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007500:	4b07      	ldr	r3, [pc, #28]	; (8007520 <USBH_UserProcess+0x58>)
 8007502:	2202      	movs	r2, #2
 8007504:	701a      	strb	r2, [r3, #0]
  break;
 8007506:	e004      	b.n	8007512 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007508:	4b05      	ldr	r3, [pc, #20]	; (8007520 <USBH_UserProcess+0x58>)
 800750a:	2201      	movs	r2, #1
 800750c:	701a      	strb	r2, [r3, #0]
  break;
 800750e:	e000      	b.n	8007512 <USBH_UserProcess+0x4a>

  default:
  break;
 8007510:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007512:	bf00      	nop
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	20000580 	.word	0x20000580

08007524 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b08a      	sub	sp, #40	; 0x28
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800752c:	f107 0314 	add.w	r3, r7, #20
 8007530:	2200      	movs	r2, #0
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	605a      	str	r2, [r3, #4]
 8007536:	609a      	str	r2, [r3, #8]
 8007538:	60da      	str	r2, [r3, #12]
 800753a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007544:	d147      	bne.n	80075d6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007546:	2300      	movs	r3, #0
 8007548:	613b      	str	r3, [r7, #16]
 800754a:	4b25      	ldr	r3, [pc, #148]	; (80075e0 <HAL_HCD_MspInit+0xbc>)
 800754c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754e:	4a24      	ldr	r2, [pc, #144]	; (80075e0 <HAL_HCD_MspInit+0xbc>)
 8007550:	f043 0301 	orr.w	r3, r3, #1
 8007554:	6313      	str	r3, [r2, #48]	; 0x30
 8007556:	4b22      	ldr	r3, [pc, #136]	; (80075e0 <HAL_HCD_MspInit+0xbc>)
 8007558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	613b      	str	r3, [r7, #16]
 8007560:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007562:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007568:	2300      	movs	r3, #0
 800756a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800756c:	2300      	movs	r3, #0
 800756e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007570:	f107 0314 	add.w	r3, r7, #20
 8007574:	4619      	mov	r1, r3
 8007576:	481b      	ldr	r0, [pc, #108]	; (80075e4 <HAL_HCD_MspInit+0xc0>)
 8007578:	f7f9 fd76 	bl	8001068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800757c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007582:	2302      	movs	r3, #2
 8007584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007586:	2300      	movs	r3, #0
 8007588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800758a:	2300      	movs	r3, #0
 800758c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800758e:	230a      	movs	r3, #10
 8007590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007592:	f107 0314 	add.w	r3, r7, #20
 8007596:	4619      	mov	r1, r3
 8007598:	4812      	ldr	r0, [pc, #72]	; (80075e4 <HAL_HCD_MspInit+0xc0>)
 800759a:	f7f9 fd65 	bl	8001068 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800759e:	4b10      	ldr	r3, [pc, #64]	; (80075e0 <HAL_HCD_MspInit+0xbc>)
 80075a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a2:	4a0f      	ldr	r2, [pc, #60]	; (80075e0 <HAL_HCD_MspInit+0xbc>)
 80075a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075a8:	6353      	str	r3, [r2, #52]	; 0x34
 80075aa:	2300      	movs	r3, #0
 80075ac:	60fb      	str	r3, [r7, #12]
 80075ae:	4b0c      	ldr	r3, [pc, #48]	; (80075e0 <HAL_HCD_MspInit+0xbc>)
 80075b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b2:	4a0b      	ldr	r2, [pc, #44]	; (80075e0 <HAL_HCD_MspInit+0xbc>)
 80075b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075b8:	6453      	str	r3, [r2, #68]	; 0x44
 80075ba:	4b09      	ldr	r3, [pc, #36]	; (80075e0 <HAL_HCD_MspInit+0xbc>)
 80075bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075c2:	60fb      	str	r3, [r7, #12]
 80075c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80075c6:	2200      	movs	r2, #0
 80075c8:	2100      	movs	r1, #0
 80075ca:	2043      	movs	r0, #67	; 0x43
 80075cc:	f7f9 fd15 	bl	8000ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80075d0:	2043      	movs	r0, #67	; 0x43
 80075d2:	f7f9 fd2e 	bl	8001032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80075d6:	bf00      	nop
 80075d8:	3728      	adds	r7, #40	; 0x28
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	40023800 	.word	0x40023800
 80075e4:	40020000 	.word	0x40020000

080075e8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fe ffed 	bl	80065d6 <USBH_LL_IncTimer>
}
 80075fc:	bf00      	nop
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007612:	4618      	mov	r0, r3
 8007614:	f7ff f825 	bl	8006662 <USBH_LL_Connect>
}
 8007618:	bf00      	nop
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800762e:	4618      	mov	r0, r3
 8007630:	f7ff f82e 	bl	8006690 <USBH_LL_Disconnect>
}
 8007634:	bf00      	nop
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	460b      	mov	r3, r1
 8007646:	70fb      	strb	r3, [r7, #3]
 8007648:	4613      	mov	r3, r2
 800764a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007666:	4618      	mov	r0, r3
 8007668:	f7fe ffdf 	bl	800662a <USBH_LL_PortEnabled>
}
 800766c:	bf00      	nop
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007682:	4618      	mov	r0, r3
 8007684:	f7fe ffdf 	bl	8006646 <USBH_LL_PortDisabled>
}
 8007688:	bf00      	nop
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d12a      	bne.n	80076f8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80076a2:	4a18      	ldr	r2, [pc, #96]	; (8007704 <USBH_LL_Init+0x74>)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a15      	ldr	r2, [pc, #84]	; (8007704 <USBH_LL_Init+0x74>)
 80076ae:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80076b2:	4b14      	ldr	r3, [pc, #80]	; (8007704 <USBH_LL_Init+0x74>)
 80076b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80076b8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80076ba:	4b12      	ldr	r3, [pc, #72]	; (8007704 <USBH_LL_Init+0x74>)
 80076bc:	2208      	movs	r2, #8
 80076be:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80076c0:	4b10      	ldr	r3, [pc, #64]	; (8007704 <USBH_LL_Init+0x74>)
 80076c2:	2201      	movs	r2, #1
 80076c4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80076c6:	4b0f      	ldr	r3, [pc, #60]	; (8007704 <USBH_LL_Init+0x74>)
 80076c8:	2200      	movs	r2, #0
 80076ca:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80076cc:	4b0d      	ldr	r3, [pc, #52]	; (8007704 <USBH_LL_Init+0x74>)
 80076ce:	2202      	movs	r2, #2
 80076d0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80076d2:	4b0c      	ldr	r3, [pc, #48]	; (8007704 <USBH_LL_Init+0x74>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80076d8:	480a      	ldr	r0, [pc, #40]	; (8007704 <USBH_LL_Init+0x74>)
 80076da:	f7f9 feb6 	bl	800144a <HAL_HCD_Init>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d001      	beq.n	80076e8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80076e4:	f7f9 f91e 	bl	8000924 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80076e8:	4806      	ldr	r0, [pc, #24]	; (8007704 <USBH_LL_Init+0x74>)
 80076ea:	f7fa fa9a 	bl	8001c22 <HAL_HCD_GetCurrentFrame>
 80076ee:	4603      	mov	r3, r0
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7fe ff60 	bl	80065b8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	20000584 	.word	0x20000584

08007708 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007710:	2300      	movs	r3, #0
 8007712:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800771e:	4618      	mov	r0, r3
 8007720:	f7fa fa09 	bl	8001b36 <HAL_HCD_Start>
 8007724:	4603      	mov	r3, r0
 8007726:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007728:	7bfb      	ldrb	r3, [r7, #15]
 800772a:	4618      	mov	r0, r3
 800772c:	f000 f95c 	bl	80079e8 <USBH_Get_USB_Status>
 8007730:	4603      	mov	r3, r0
 8007732:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007734:	7bbb      	ldrb	r3, [r7, #14]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b084      	sub	sp, #16
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007746:	2300      	movs	r3, #0
 8007748:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800774a:	2300      	movs	r3, #0
 800774c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007754:	4618      	mov	r0, r3
 8007756:	f7fa fa11 	bl	8001b7c <HAL_HCD_Stop>
 800775a:	4603      	mov	r3, r0
 800775c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800775e:	7bfb      	ldrb	r3, [r7, #15]
 8007760:	4618      	mov	r0, r3
 8007762:	f000 f941 	bl	80079e8 <USBH_Get_USB_Status>
 8007766:	4603      	mov	r3, r0
 8007768:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800776a:	7bbb      	ldrb	r3, [r7, #14]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800777c:	2301      	movs	r3, #1
 800777e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007786:	4618      	mov	r0, r3
 8007788:	f7fa fa59 	bl	8001c3e <HAL_HCD_GetCurrentSpeed>
 800778c:	4603      	mov	r3, r0
 800778e:	2b02      	cmp	r3, #2
 8007790:	d00c      	beq.n	80077ac <USBH_LL_GetSpeed+0x38>
 8007792:	2b02      	cmp	r3, #2
 8007794:	d80d      	bhi.n	80077b2 <USBH_LL_GetSpeed+0x3e>
 8007796:	2b00      	cmp	r3, #0
 8007798:	d002      	beq.n	80077a0 <USBH_LL_GetSpeed+0x2c>
 800779a:	2b01      	cmp	r3, #1
 800779c:	d003      	beq.n	80077a6 <USBH_LL_GetSpeed+0x32>
 800779e:	e008      	b.n	80077b2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80077a0:	2300      	movs	r3, #0
 80077a2:	73fb      	strb	r3, [r7, #15]
    break;
 80077a4:	e008      	b.n	80077b8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80077a6:	2301      	movs	r3, #1
 80077a8:	73fb      	strb	r3, [r7, #15]
    break;
 80077aa:	e005      	b.n	80077b8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80077ac:	2302      	movs	r3, #2
 80077ae:	73fb      	strb	r3, [r7, #15]
    break;
 80077b0:	e002      	b.n	80077b8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80077b2:	2301      	movs	r3, #1
 80077b4:	73fb      	strb	r3, [r7, #15]
    break;
 80077b6:	bf00      	nop
  }
  return  speed;
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b084      	sub	sp, #16
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077d8:	4618      	mov	r0, r3
 80077da:	f7fa f9ec 	bl	8001bb6 <HAL_HCD_ResetPort>
 80077de:	4603      	mov	r3, r0
 80077e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
 80077e4:	4618      	mov	r0, r3
 80077e6:	f000 f8ff 	bl	80079e8 <USBH_Get_USB_Status>
 80077ea:	4603      	mov	r3, r0
 80077ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	460b      	mov	r3, r1
 8007802:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800780a:	78fa      	ldrb	r2, [r7, #3]
 800780c:	4611      	mov	r1, r2
 800780e:	4618      	mov	r0, r3
 8007810:	f7fa f9f3 	bl	8001bfa <HAL_HCD_HC_GetXferCount>
 8007814:	4603      	mov	r3, r0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800781e:	b590      	push	{r4, r7, lr}
 8007820:	b089      	sub	sp, #36	; 0x24
 8007822:	af04      	add	r7, sp, #16
 8007824:	6078      	str	r0, [r7, #4]
 8007826:	4608      	mov	r0, r1
 8007828:	4611      	mov	r1, r2
 800782a:	461a      	mov	r2, r3
 800782c:	4603      	mov	r3, r0
 800782e:	70fb      	strb	r3, [r7, #3]
 8007830:	460b      	mov	r3, r1
 8007832:	70bb      	strb	r3, [r7, #2]
 8007834:	4613      	mov	r3, r2
 8007836:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800783c:	2300      	movs	r3, #0
 800783e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007846:	787c      	ldrb	r4, [r7, #1]
 8007848:	78ba      	ldrb	r2, [r7, #2]
 800784a:	78f9      	ldrb	r1, [r7, #3]
 800784c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800784e:	9302      	str	r3, [sp, #8]
 8007850:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007854:	9301      	str	r3, [sp, #4]
 8007856:	f897 3020 	ldrb.w	r3, [r7, #32]
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	4623      	mov	r3, r4
 800785e:	f7f9 fe56 	bl	800150e <HAL_HCD_HC_Init>
 8007862:	4603      	mov	r3, r0
 8007864:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007866:	7bfb      	ldrb	r3, [r7, #15]
 8007868:	4618      	mov	r0, r3
 800786a:	f000 f8bd 	bl	80079e8 <USBH_Get_USB_Status>
 800786e:	4603      	mov	r3, r0
 8007870:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007872:	7bbb      	ldrb	r3, [r7, #14]
}
 8007874:	4618      	mov	r0, r3
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	bd90      	pop	{r4, r7, pc}

0800787c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	460b      	mov	r3, r1
 8007886:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007888:	2300      	movs	r3, #0
 800788a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800788c:	2300      	movs	r3, #0
 800788e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007896:	78fa      	ldrb	r2, [r7, #3]
 8007898:	4611      	mov	r1, r2
 800789a:	4618      	mov	r0, r3
 800789c:	f7f9 fec6 	bl	800162c <HAL_HCD_HC_Halt>
 80078a0:	4603      	mov	r3, r0
 80078a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f000 f89e 	bl	80079e8 <USBH_Get_USB_Status>
 80078ac:	4603      	mov	r3, r0
 80078ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80078ba:	b590      	push	{r4, r7, lr}
 80078bc:	b089      	sub	sp, #36	; 0x24
 80078be:	af04      	add	r7, sp, #16
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	4608      	mov	r0, r1
 80078c4:	4611      	mov	r1, r2
 80078c6:	461a      	mov	r2, r3
 80078c8:	4603      	mov	r3, r0
 80078ca:	70fb      	strb	r3, [r7, #3]
 80078cc:	460b      	mov	r3, r1
 80078ce:	70bb      	strb	r3, [r7, #2]
 80078d0:	4613      	mov	r3, r2
 80078d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80078e2:	787c      	ldrb	r4, [r7, #1]
 80078e4:	78ba      	ldrb	r2, [r7, #2]
 80078e6:	78f9      	ldrb	r1, [r7, #3]
 80078e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80078ec:	9303      	str	r3, [sp, #12]
 80078ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80078f0:	9302      	str	r3, [sp, #8]
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	9301      	str	r3, [sp, #4]
 80078f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	4623      	mov	r3, r4
 80078fe:	f7f9 feb9 	bl	8001674 <HAL_HCD_HC_SubmitRequest>
 8007902:	4603      	mov	r3, r0
 8007904:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007906:	7bfb      	ldrb	r3, [r7, #15]
 8007908:	4618      	mov	r0, r3
 800790a:	f000 f86d 	bl	80079e8 <USBH_Get_USB_Status>
 800790e:	4603      	mov	r3, r0
 8007910:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007912:	7bbb      	ldrb	r3, [r7, #14]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	bd90      	pop	{r4, r7, pc}

0800791c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	460b      	mov	r3, r1
 8007926:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800792e:	78fa      	ldrb	r2, [r7, #3]
 8007930:	4611      	mov	r1, r2
 8007932:	4618      	mov	r0, r3
 8007934:	f7fa f94d 	bl	8001bd2 <HAL_HCD_HC_GetURBState>
 8007938:	4603      	mov	r3, r0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b082      	sub	sp, #8
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	460b      	mov	r3, r1
 800794c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007954:	2b01      	cmp	r3, #1
 8007956:	d103      	bne.n	8007960 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007958:	78fb      	ldrb	r3, [r7, #3]
 800795a:	4618      	mov	r0, r3
 800795c:	f000 f870 	bl	8007a40 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007960:	20c8      	movs	r0, #200	; 0xc8
 8007962:	f7f9 fa4b 	bl	8000dfc <HAL_Delay>
  return USBH_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	460b      	mov	r3, r1
 800797a:	70fb      	strb	r3, [r7, #3]
 800797c:	4613      	mov	r3, r2
 800797e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007986:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007988:	78fb      	ldrb	r3, [r7, #3]
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	212c      	movs	r1, #44	; 0x2c
 800798e:	fb01 f303 	mul.w	r3, r1, r3
 8007992:	4413      	add	r3, r2
 8007994:	333b      	adds	r3, #59	; 0x3b
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d009      	beq.n	80079b0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800799c:	78fb      	ldrb	r3, [r7, #3]
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	212c      	movs	r1, #44	; 0x2c
 80079a2:	fb01 f303 	mul.w	r3, r1, r3
 80079a6:	4413      	add	r3, r2
 80079a8:	3354      	adds	r3, #84	; 0x54
 80079aa:	78ba      	ldrb	r2, [r7, #2]
 80079ac:	701a      	strb	r2, [r3, #0]
 80079ae:	e008      	b.n	80079c2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80079b0:	78fb      	ldrb	r3, [r7, #3]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	212c      	movs	r1, #44	; 0x2c
 80079b6:	fb01 f303 	mul.w	r3, r1, r3
 80079ba:	4413      	add	r3, r2
 80079bc:	3355      	adds	r3, #85	; 0x55
 80079be:	78ba      	ldrb	r2, [r7, #2]
 80079c0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3714      	adds	r7, #20
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f7f9 fa0f 	bl	8000dfc <HAL_Delay>
}
 80079de:	bf00      	nop
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
	...

080079e8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	4603      	mov	r3, r0
 80079f0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80079f6:	79fb      	ldrb	r3, [r7, #7]
 80079f8:	2b03      	cmp	r3, #3
 80079fa:	d817      	bhi.n	8007a2c <USBH_Get_USB_Status+0x44>
 80079fc:	a201      	add	r2, pc, #4	; (adr r2, 8007a04 <USBH_Get_USB_Status+0x1c>)
 80079fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a02:	bf00      	nop
 8007a04:	08007a15 	.word	0x08007a15
 8007a08:	08007a1b 	.word	0x08007a1b
 8007a0c:	08007a21 	.word	0x08007a21
 8007a10:	08007a27 	.word	0x08007a27
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	73fb      	strb	r3, [r7, #15]
    break;
 8007a18:	e00b      	b.n	8007a32 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007a1a:	2302      	movs	r3, #2
 8007a1c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a1e:	e008      	b.n	8007a32 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007a20:	2301      	movs	r3, #1
 8007a22:	73fb      	strb	r3, [r7, #15]
    break;
 8007a24:	e005      	b.n	8007a32 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007a26:	2302      	movs	r3, #2
 8007a28:	73fb      	strb	r3, [r7, #15]
    break;
 8007a2a:	e002      	b.n	8007a32 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a30:	bf00      	nop
  }
  return usb_status;
 8007a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	4603      	mov	r3, r0
 8007a48:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007a4a:	79fb      	ldrb	r3, [r7, #7]
 8007a4c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007a4e:	79fb      	ldrb	r3, [r7, #7]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d102      	bne.n	8007a5a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007a54:	2300      	movs	r3, #0
 8007a56:	73fb      	strb	r3, [r7, #15]
 8007a58:	e001      	b.n	8007a5e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
 8007a60:	461a      	mov	r2, r3
 8007a62:	2101      	movs	r1, #1
 8007a64:	4803      	ldr	r0, [pc, #12]	; (8007a74 <MX_DriverVbusFS+0x34>)
 8007a66:	f7f9 fcb3 	bl	80013d0 <HAL_GPIO_WritePin>
}
 8007a6a:	bf00      	nop
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	40020800 	.word	0x40020800

08007a78 <__errno>:
 8007a78:	4b01      	ldr	r3, [pc, #4]	; (8007a80 <__errno+0x8>)
 8007a7a:	6818      	ldr	r0, [r3, #0]
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	2000002c 	.word	0x2000002c

08007a84 <__libc_init_array>:
 8007a84:	b570      	push	{r4, r5, r6, lr}
 8007a86:	4d0d      	ldr	r5, [pc, #52]	; (8007abc <__libc_init_array+0x38>)
 8007a88:	4c0d      	ldr	r4, [pc, #52]	; (8007ac0 <__libc_init_array+0x3c>)
 8007a8a:	1b64      	subs	r4, r4, r5
 8007a8c:	10a4      	asrs	r4, r4, #2
 8007a8e:	2600      	movs	r6, #0
 8007a90:	42a6      	cmp	r6, r4
 8007a92:	d109      	bne.n	8007aa8 <__libc_init_array+0x24>
 8007a94:	4d0b      	ldr	r5, [pc, #44]	; (8007ac4 <__libc_init_array+0x40>)
 8007a96:	4c0c      	ldr	r4, [pc, #48]	; (8007ac8 <__libc_init_array+0x44>)
 8007a98:	f000 f92e 	bl	8007cf8 <_init>
 8007a9c:	1b64      	subs	r4, r4, r5
 8007a9e:	10a4      	asrs	r4, r4, #2
 8007aa0:	2600      	movs	r6, #0
 8007aa2:	42a6      	cmp	r6, r4
 8007aa4:	d105      	bne.n	8007ab2 <__libc_init_array+0x2e>
 8007aa6:	bd70      	pop	{r4, r5, r6, pc}
 8007aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aac:	4798      	blx	r3
 8007aae:	3601      	adds	r6, #1
 8007ab0:	e7ee      	b.n	8007a90 <__libc_init_array+0xc>
 8007ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ab6:	4798      	blx	r3
 8007ab8:	3601      	adds	r6, #1
 8007aba:	e7f2      	b.n	8007aa2 <__libc_init_array+0x1e>
 8007abc:	08007d34 	.word	0x08007d34
 8007ac0:	08007d34 	.word	0x08007d34
 8007ac4:	08007d34 	.word	0x08007d34
 8007ac8:	08007d38 	.word	0x08007d38

08007acc <malloc>:
 8007acc:	4b02      	ldr	r3, [pc, #8]	; (8007ad8 <malloc+0xc>)
 8007ace:	4601      	mov	r1, r0
 8007ad0:	6818      	ldr	r0, [r3, #0]
 8007ad2:	f000 b87f 	b.w	8007bd4 <_malloc_r>
 8007ad6:	bf00      	nop
 8007ad8:	2000002c 	.word	0x2000002c

08007adc <free>:
 8007adc:	4b02      	ldr	r3, [pc, #8]	; (8007ae8 <free+0xc>)
 8007ade:	4601      	mov	r1, r0
 8007ae0:	6818      	ldr	r0, [r3, #0]
 8007ae2:	f000 b80b 	b.w	8007afc <_free_r>
 8007ae6:	bf00      	nop
 8007ae8:	2000002c 	.word	0x2000002c

08007aec <memset>:
 8007aec:	4402      	add	r2, r0
 8007aee:	4603      	mov	r3, r0
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d100      	bne.n	8007af6 <memset+0xa>
 8007af4:	4770      	bx	lr
 8007af6:	f803 1b01 	strb.w	r1, [r3], #1
 8007afa:	e7f9      	b.n	8007af0 <memset+0x4>

08007afc <_free_r>:
 8007afc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007afe:	2900      	cmp	r1, #0
 8007b00:	d044      	beq.n	8007b8c <_free_r+0x90>
 8007b02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b06:	9001      	str	r0, [sp, #4]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f1a1 0404 	sub.w	r4, r1, #4
 8007b0e:	bfb8      	it	lt
 8007b10:	18e4      	addlt	r4, r4, r3
 8007b12:	f000 f8e3 	bl	8007cdc <__malloc_lock>
 8007b16:	4a1e      	ldr	r2, [pc, #120]	; (8007b90 <_free_r+0x94>)
 8007b18:	9801      	ldr	r0, [sp, #4]
 8007b1a:	6813      	ldr	r3, [r2, #0]
 8007b1c:	b933      	cbnz	r3, 8007b2c <_free_r+0x30>
 8007b1e:	6063      	str	r3, [r4, #4]
 8007b20:	6014      	str	r4, [r2, #0]
 8007b22:	b003      	add	sp, #12
 8007b24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b28:	f000 b8de 	b.w	8007ce8 <__malloc_unlock>
 8007b2c:	42a3      	cmp	r3, r4
 8007b2e:	d908      	bls.n	8007b42 <_free_r+0x46>
 8007b30:	6825      	ldr	r5, [r4, #0]
 8007b32:	1961      	adds	r1, r4, r5
 8007b34:	428b      	cmp	r3, r1
 8007b36:	bf01      	itttt	eq
 8007b38:	6819      	ldreq	r1, [r3, #0]
 8007b3a:	685b      	ldreq	r3, [r3, #4]
 8007b3c:	1949      	addeq	r1, r1, r5
 8007b3e:	6021      	streq	r1, [r4, #0]
 8007b40:	e7ed      	b.n	8007b1e <_free_r+0x22>
 8007b42:	461a      	mov	r2, r3
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	b10b      	cbz	r3, 8007b4c <_free_r+0x50>
 8007b48:	42a3      	cmp	r3, r4
 8007b4a:	d9fa      	bls.n	8007b42 <_free_r+0x46>
 8007b4c:	6811      	ldr	r1, [r2, #0]
 8007b4e:	1855      	adds	r5, r2, r1
 8007b50:	42a5      	cmp	r5, r4
 8007b52:	d10b      	bne.n	8007b6c <_free_r+0x70>
 8007b54:	6824      	ldr	r4, [r4, #0]
 8007b56:	4421      	add	r1, r4
 8007b58:	1854      	adds	r4, r2, r1
 8007b5a:	42a3      	cmp	r3, r4
 8007b5c:	6011      	str	r1, [r2, #0]
 8007b5e:	d1e0      	bne.n	8007b22 <_free_r+0x26>
 8007b60:	681c      	ldr	r4, [r3, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	6053      	str	r3, [r2, #4]
 8007b66:	4421      	add	r1, r4
 8007b68:	6011      	str	r1, [r2, #0]
 8007b6a:	e7da      	b.n	8007b22 <_free_r+0x26>
 8007b6c:	d902      	bls.n	8007b74 <_free_r+0x78>
 8007b6e:	230c      	movs	r3, #12
 8007b70:	6003      	str	r3, [r0, #0]
 8007b72:	e7d6      	b.n	8007b22 <_free_r+0x26>
 8007b74:	6825      	ldr	r5, [r4, #0]
 8007b76:	1961      	adds	r1, r4, r5
 8007b78:	428b      	cmp	r3, r1
 8007b7a:	bf04      	itt	eq
 8007b7c:	6819      	ldreq	r1, [r3, #0]
 8007b7e:	685b      	ldreq	r3, [r3, #4]
 8007b80:	6063      	str	r3, [r4, #4]
 8007b82:	bf04      	itt	eq
 8007b84:	1949      	addeq	r1, r1, r5
 8007b86:	6021      	streq	r1, [r4, #0]
 8007b88:	6054      	str	r4, [r2, #4]
 8007b8a:	e7ca      	b.n	8007b22 <_free_r+0x26>
 8007b8c:	b003      	add	sp, #12
 8007b8e:	bd30      	pop	{r4, r5, pc}
 8007b90:	20000888 	.word	0x20000888

08007b94 <sbrk_aligned>:
 8007b94:	b570      	push	{r4, r5, r6, lr}
 8007b96:	4e0e      	ldr	r6, [pc, #56]	; (8007bd0 <sbrk_aligned+0x3c>)
 8007b98:	460c      	mov	r4, r1
 8007b9a:	6831      	ldr	r1, [r6, #0]
 8007b9c:	4605      	mov	r5, r0
 8007b9e:	b911      	cbnz	r1, 8007ba6 <sbrk_aligned+0x12>
 8007ba0:	f000 f88c 	bl	8007cbc <_sbrk_r>
 8007ba4:	6030      	str	r0, [r6, #0]
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	4628      	mov	r0, r5
 8007baa:	f000 f887 	bl	8007cbc <_sbrk_r>
 8007bae:	1c43      	adds	r3, r0, #1
 8007bb0:	d00a      	beq.n	8007bc8 <sbrk_aligned+0x34>
 8007bb2:	1cc4      	adds	r4, r0, #3
 8007bb4:	f024 0403 	bic.w	r4, r4, #3
 8007bb8:	42a0      	cmp	r0, r4
 8007bba:	d007      	beq.n	8007bcc <sbrk_aligned+0x38>
 8007bbc:	1a21      	subs	r1, r4, r0
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	f000 f87c 	bl	8007cbc <_sbrk_r>
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	d101      	bne.n	8007bcc <sbrk_aligned+0x38>
 8007bc8:	f04f 34ff 	mov.w	r4, #4294967295
 8007bcc:	4620      	mov	r0, r4
 8007bce:	bd70      	pop	{r4, r5, r6, pc}
 8007bd0:	2000088c 	.word	0x2000088c

08007bd4 <_malloc_r>:
 8007bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd8:	1ccd      	adds	r5, r1, #3
 8007bda:	f025 0503 	bic.w	r5, r5, #3
 8007bde:	3508      	adds	r5, #8
 8007be0:	2d0c      	cmp	r5, #12
 8007be2:	bf38      	it	cc
 8007be4:	250c      	movcc	r5, #12
 8007be6:	2d00      	cmp	r5, #0
 8007be8:	4607      	mov	r7, r0
 8007bea:	db01      	blt.n	8007bf0 <_malloc_r+0x1c>
 8007bec:	42a9      	cmp	r1, r5
 8007bee:	d905      	bls.n	8007bfc <_malloc_r+0x28>
 8007bf0:	230c      	movs	r3, #12
 8007bf2:	603b      	str	r3, [r7, #0]
 8007bf4:	2600      	movs	r6, #0
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bfc:	4e2e      	ldr	r6, [pc, #184]	; (8007cb8 <_malloc_r+0xe4>)
 8007bfe:	f000 f86d 	bl	8007cdc <__malloc_lock>
 8007c02:	6833      	ldr	r3, [r6, #0]
 8007c04:	461c      	mov	r4, r3
 8007c06:	bb34      	cbnz	r4, 8007c56 <_malloc_r+0x82>
 8007c08:	4629      	mov	r1, r5
 8007c0a:	4638      	mov	r0, r7
 8007c0c:	f7ff ffc2 	bl	8007b94 <sbrk_aligned>
 8007c10:	1c43      	adds	r3, r0, #1
 8007c12:	4604      	mov	r4, r0
 8007c14:	d14d      	bne.n	8007cb2 <_malloc_r+0xde>
 8007c16:	6834      	ldr	r4, [r6, #0]
 8007c18:	4626      	mov	r6, r4
 8007c1a:	2e00      	cmp	r6, #0
 8007c1c:	d140      	bne.n	8007ca0 <_malloc_r+0xcc>
 8007c1e:	6823      	ldr	r3, [r4, #0]
 8007c20:	4631      	mov	r1, r6
 8007c22:	4638      	mov	r0, r7
 8007c24:	eb04 0803 	add.w	r8, r4, r3
 8007c28:	f000 f848 	bl	8007cbc <_sbrk_r>
 8007c2c:	4580      	cmp	r8, r0
 8007c2e:	d13a      	bne.n	8007ca6 <_malloc_r+0xd2>
 8007c30:	6821      	ldr	r1, [r4, #0]
 8007c32:	3503      	adds	r5, #3
 8007c34:	1a6d      	subs	r5, r5, r1
 8007c36:	f025 0503 	bic.w	r5, r5, #3
 8007c3a:	3508      	adds	r5, #8
 8007c3c:	2d0c      	cmp	r5, #12
 8007c3e:	bf38      	it	cc
 8007c40:	250c      	movcc	r5, #12
 8007c42:	4629      	mov	r1, r5
 8007c44:	4638      	mov	r0, r7
 8007c46:	f7ff ffa5 	bl	8007b94 <sbrk_aligned>
 8007c4a:	3001      	adds	r0, #1
 8007c4c:	d02b      	beq.n	8007ca6 <_malloc_r+0xd2>
 8007c4e:	6823      	ldr	r3, [r4, #0]
 8007c50:	442b      	add	r3, r5
 8007c52:	6023      	str	r3, [r4, #0]
 8007c54:	e00e      	b.n	8007c74 <_malloc_r+0xa0>
 8007c56:	6822      	ldr	r2, [r4, #0]
 8007c58:	1b52      	subs	r2, r2, r5
 8007c5a:	d41e      	bmi.n	8007c9a <_malloc_r+0xc6>
 8007c5c:	2a0b      	cmp	r2, #11
 8007c5e:	d916      	bls.n	8007c8e <_malloc_r+0xba>
 8007c60:	1961      	adds	r1, r4, r5
 8007c62:	42a3      	cmp	r3, r4
 8007c64:	6025      	str	r5, [r4, #0]
 8007c66:	bf18      	it	ne
 8007c68:	6059      	strne	r1, [r3, #4]
 8007c6a:	6863      	ldr	r3, [r4, #4]
 8007c6c:	bf08      	it	eq
 8007c6e:	6031      	streq	r1, [r6, #0]
 8007c70:	5162      	str	r2, [r4, r5]
 8007c72:	604b      	str	r3, [r1, #4]
 8007c74:	4638      	mov	r0, r7
 8007c76:	f104 060b 	add.w	r6, r4, #11
 8007c7a:	f000 f835 	bl	8007ce8 <__malloc_unlock>
 8007c7e:	f026 0607 	bic.w	r6, r6, #7
 8007c82:	1d23      	adds	r3, r4, #4
 8007c84:	1af2      	subs	r2, r6, r3
 8007c86:	d0b6      	beq.n	8007bf6 <_malloc_r+0x22>
 8007c88:	1b9b      	subs	r3, r3, r6
 8007c8a:	50a3      	str	r3, [r4, r2]
 8007c8c:	e7b3      	b.n	8007bf6 <_malloc_r+0x22>
 8007c8e:	6862      	ldr	r2, [r4, #4]
 8007c90:	42a3      	cmp	r3, r4
 8007c92:	bf0c      	ite	eq
 8007c94:	6032      	streq	r2, [r6, #0]
 8007c96:	605a      	strne	r2, [r3, #4]
 8007c98:	e7ec      	b.n	8007c74 <_malloc_r+0xa0>
 8007c9a:	4623      	mov	r3, r4
 8007c9c:	6864      	ldr	r4, [r4, #4]
 8007c9e:	e7b2      	b.n	8007c06 <_malloc_r+0x32>
 8007ca0:	4634      	mov	r4, r6
 8007ca2:	6876      	ldr	r6, [r6, #4]
 8007ca4:	e7b9      	b.n	8007c1a <_malloc_r+0x46>
 8007ca6:	230c      	movs	r3, #12
 8007ca8:	603b      	str	r3, [r7, #0]
 8007caa:	4638      	mov	r0, r7
 8007cac:	f000 f81c 	bl	8007ce8 <__malloc_unlock>
 8007cb0:	e7a1      	b.n	8007bf6 <_malloc_r+0x22>
 8007cb2:	6025      	str	r5, [r4, #0]
 8007cb4:	e7de      	b.n	8007c74 <_malloc_r+0xa0>
 8007cb6:	bf00      	nop
 8007cb8:	20000888 	.word	0x20000888

08007cbc <_sbrk_r>:
 8007cbc:	b538      	push	{r3, r4, r5, lr}
 8007cbe:	4d06      	ldr	r5, [pc, #24]	; (8007cd8 <_sbrk_r+0x1c>)
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	4608      	mov	r0, r1
 8007cc6:	602b      	str	r3, [r5, #0]
 8007cc8:	f7f8 ffb4 	bl	8000c34 <_sbrk>
 8007ccc:	1c43      	adds	r3, r0, #1
 8007cce:	d102      	bne.n	8007cd6 <_sbrk_r+0x1a>
 8007cd0:	682b      	ldr	r3, [r5, #0]
 8007cd2:	b103      	cbz	r3, 8007cd6 <_sbrk_r+0x1a>
 8007cd4:	6023      	str	r3, [r4, #0]
 8007cd6:	bd38      	pop	{r3, r4, r5, pc}
 8007cd8:	20000890 	.word	0x20000890

08007cdc <__malloc_lock>:
 8007cdc:	4801      	ldr	r0, [pc, #4]	; (8007ce4 <__malloc_lock+0x8>)
 8007cde:	f000 b809 	b.w	8007cf4 <__retarget_lock_acquire_recursive>
 8007ce2:	bf00      	nop
 8007ce4:	20000894 	.word	0x20000894

08007ce8 <__malloc_unlock>:
 8007ce8:	4801      	ldr	r0, [pc, #4]	; (8007cf0 <__malloc_unlock+0x8>)
 8007cea:	f000 b804 	b.w	8007cf6 <__retarget_lock_release_recursive>
 8007cee:	bf00      	nop
 8007cf0:	20000894 	.word	0x20000894

08007cf4 <__retarget_lock_acquire_recursive>:
 8007cf4:	4770      	bx	lr

08007cf6 <__retarget_lock_release_recursive>:
 8007cf6:	4770      	bx	lr

08007cf8 <_init>:
 8007cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfa:	bf00      	nop
 8007cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cfe:	bc08      	pop	{r3}
 8007d00:	469e      	mov	lr, r3
 8007d02:	4770      	bx	lr

08007d04 <_fini>:
 8007d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d06:	bf00      	nop
 8007d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d0a:	bc08      	pop	{r3}
 8007d0c:	469e      	mov	lr, r3
 8007d0e:	4770      	bx	lr
